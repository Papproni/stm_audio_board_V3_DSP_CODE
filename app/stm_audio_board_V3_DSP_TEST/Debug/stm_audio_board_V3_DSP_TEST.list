
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .sdram_section 0002ee00  c0000000  c0000000  00030000  2**2
                  ALLOC
  2 .text         0000bc70  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000310  0800bf40  0800bf40  0001bf40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c250  0800c250  0001c250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c254  0800c254  0001c254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004e4  24000000  0800c258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000c4c4  240004e4  0800c73c  000204e4  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  2400c9a8  0800c73c  0002c9a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY
 10 .comment      000000b8  00000000  00000000  00020512  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002f183  00000000  00000000  000205ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007973  00000000  00000000  0004f74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000f9f7  00000000  00000000  000570c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  00066ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001cce  00000000  00000000  000680e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039e89  00000000  00000000  00069db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032d25  00000000  00000000  000a3c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00150f68  00000000  00000000  000d6964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000048e0  00000000  00000000  002278cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000092  00000000  00000000  0022c1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000017a3  00000000  00000000  0022c23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000070  00000000  00000000  0022d9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240004e4 	.word	0x240004e4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bf28 	.word	0x0800bf28

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240004e8 	.word	0x240004e8
 800030c:	0800bf28 	.word	0x0800bf28

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <ad1939_init>:

	 return 0;
}

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	TXdata[0] = AD1939_Global_Address_Write;
 80003b2:	2308      	movs	r3, #8
 80003b4:	4c58      	ldr	r4, [pc, #352]	; (8000518 <ad1939_init+0x168>)
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003b6:	b083      	sub	sp, #12
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003b8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	TXdata[0] = AD1939_Global_Address_Write;
 80003bc:	8023      	strh	r3, [r4, #0]
	TXdata[2] = data;
 80003be:	23be      	movs	r3, #190	; 0xbe
    AD1939_spi = hspi_codec;
 80003c0:	4d56      	ldr	r5, [pc, #344]	; (800051c <ad1939_init+0x16c>)
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003c2:	4621      	mov	r1, r4
	TXdata[2] = data;
 80003c4:	70a3      	strb	r3, [r4, #2]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003c6:	2303      	movs	r3, #3
 80003c8:	4a55      	ldr	r2, [pc, #340]	; (8000520 <ad1939_init+0x170>)
 80003ca:	9600      	str	r6, [sp, #0]
    AD1939_spi = hspi_codec;
 80003cc:	6028      	str	r0, [r5, #0]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003ce:	f007 f93f 	bl	8007650 <HAL_SPI_TransmitReceive>

    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 80003d2:	2800      	cmp	r0, #0
 80003d4:	f040 809b 	bne.w	800050e <ad1939_init+0x15e>
	TXdata[0] = AD1939_Global_Address_Write;
 80003d8:	f44f 7384 	mov.w	r3, #264	; 0x108
	TXdata[2] = data;
 80003dc:	2704      	movs	r7, #4
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003de:	4a50      	ldr	r2, [pc, #320]	; (8000520 <ad1939_init+0x170>)
 80003e0:	4621      	mov	r1, r4
	TXdata[0] = AD1939_Global_Address_Write;
 80003e2:	8023      	strh	r3, [r4, #0]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003e4:	2303      	movs	r3, #3
 80003e6:	6828      	ldr	r0, [r5, #0]
 80003e8:	9600      	str	r6, [sp, #0]
	TXdata[2] = data;
 80003ea:	70a7      	strb	r7, [r4, #2]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003ec:	f007 f930 	bl	8007650 <HAL_SPI_TransmitReceive>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 80003f0:	2800      	cmp	r0, #0
 80003f2:	f040 808c 	bne.w	800050e <ad1939_init+0x15e>





    HAL_Delay(100);
 80003f6:	2064      	movs	r0, #100	; 0x64
 80003f8:	f001 fca4 	bl	8001d44 <HAL_Delay>
	TXdata[0] = AD1939_Global_Address_Read;
 80003fc:	f240 1309 	movw	r3, #265	; 0x109
	HAL_Delay(10);
 8000400:	200a      	movs	r0, #10
	TXdata[2] = 0b00000100;
 8000402:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Read;
 8000404:	8023      	strh	r3, [r4, #0]
	HAL_Delay(10);
 8000406:	f001 fc9d 	bl	8001d44 <HAL_Delay>
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800040a:	2303      	movs	r3, #3
 800040c:	4a44      	ldr	r2, [pc, #272]	; (8000520 <ad1939_init+0x170>)
 800040e:	4621      	mov	r1, r4
 8000410:	6828      	ldr	r0, [r5, #0]
 8000412:	9600      	str	r6, [sp, #0]
 8000414:	f007 f91c 	bl	8007650 <HAL_SPI_TransmitReceive>
	TXdata[0] = AD1939_Global_Address_Write;
 8000418:	f44f 7302 	mov.w	r3, #520	; 0x208
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800041c:	4a40      	ldr	r2, [pc, #256]	; (8000520 <ad1939_init+0x170>)
 800041e:	4621      	mov	r1, r4
	TXdata[0] = AD1939_Global_Address_Write;
 8000420:	8023      	strh	r3, [r4, #0]
	TXdata[2] = data;
 8000422:	2340      	movs	r3, #64	; 0x40
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000424:	6828      	ldr	r0, [r5, #0]
	TXdata[2] = data;
 8000426:	70a3      	strb	r3, [r4, #2]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000428:	2303      	movs	r3, #3
 800042a:	9600      	str	r6, [sp, #0]
 800042c:	f007 f910 	bl	8007650 <HAL_SPI_TransmitReceive>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b01000000)) return -1;
 8000430:	2800      	cmp	r0, #0
 8000432:	d16c      	bne.n	800050e <ad1939_init+0x15e>
	TXdata[0] = AD1939_Global_Address_Write;
 8000434:	f44f 7242 	mov.w	r2, #776	; 0x308
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000438:	2303      	movs	r3, #3
 800043a:	4621      	mov	r1, r4
 800043c:	6828      	ldr	r0, [r5, #0]
	TXdata[0] = AD1939_Global_Address_Write;
 800043e:	8022      	strh	r2, [r4, #0]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000440:	9600      	str	r6, [sp, #0]
 8000442:	4a37      	ldr	r2, [pc, #220]	; (8000520 <ad1939_init+0x170>)
	TXdata[2] = data;
 8000444:	70a7      	strb	r7, [r4, #2]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000446:	f007 f903 	bl	8007650 <HAL_SPI_TransmitReceive>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000100)) return -1; // Slave setup
 800044a:	2800      	cmp	r0, #0
 800044c:	d15f      	bne.n	800050e <ad1939_init+0x15e>
	TXdata[0] = AD1939_Global_Address_Write;
 800044e:	f44f 6281 	mov.w	r2, #1032	; 0x408
	TXdata[2] = data;
 8000452:	70a0      	strb	r0, [r4, #2]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000454:	2303      	movs	r3, #3
 8000456:	4621      	mov	r1, r4
	TXdata[0] = AD1939_Global_Address_Write;
 8000458:	8022      	strh	r2, [r4, #0]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800045a:	6828      	ldr	r0, [r5, #0]
 800045c:	4a30      	ldr	r2, [pc, #192]	; (8000520 <ad1939_init+0x170>)
 800045e:	9600      	str	r6, [sp, #0]
 8000460:	f007 f8f6 	bl	8007650 <HAL_SPI_TransmitReceive>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 8000464:	2800      	cmp	r0, #0
 8000466:	d152      	bne.n	800050e <ad1939_init+0x15e>
	TXdata[0] = AD1939_Global_Address_Write;
 8000468:	f44f 62a1 	mov.w	r2, #1288	; 0x508
	TXdata[2] = data;
 800046c:	70a0      	strb	r0, [r4, #2]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800046e:	2303      	movs	r3, #3
 8000470:	4621      	mov	r1, r4
	TXdata[0] = AD1939_Global_Address_Write;
 8000472:	8022      	strh	r2, [r4, #0]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000474:	6828      	ldr	r0, [r5, #0]
 8000476:	4a2a      	ldr	r2, [pc, #168]	; (8000520 <ad1939_init+0x170>)
 8000478:	9600      	str	r6, [sp, #0]
 800047a:	f007 f8e9 	bl	8007650 <HAL_SPI_TransmitReceive>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 800047e:	2800      	cmp	r0, #0
 8000480:	d145      	bne.n	800050e <ad1939_init+0x15e>
	TXdata[0] = AD1939_Global_Address_Write;
 8000482:	f640 0208 	movw	r2, #2056	; 0x808
	TXdata[2] = data;
 8000486:	70a0      	strb	r0, [r4, #2]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000488:	2303      	movs	r3, #3
 800048a:	4621      	mov	r1, r4
	TXdata[0] = AD1939_Global_Address_Write;
 800048c:	8022      	strh	r2, [r4, #0]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800048e:	6828      	ldr	r0, [r5, #0]
 8000490:	4a23      	ldr	r2, [pc, #140]	; (8000520 <ad1939_init+0x170>)
 8000492:	9600      	str	r6, [sp, #0]
 8000494:	f007 f8dc 	bl	8007650 <HAL_SPI_TransmitReceive>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 8000498:	2800      	cmp	r0, #0
 800049a:	d138      	bne.n	800050e <ad1939_init+0x15e>
	TXdata[0] = AD1939_Global_Address_Write;
 800049c:	f640 1208 	movw	r2, #2312	; 0x908
	TXdata[2] = data;
 80004a0:	70a0      	strb	r0, [r4, #2]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004a2:	2303      	movs	r3, #3
 80004a4:	4621      	mov	r1, r4
	TXdata[0] = AD1939_Global_Address_Write;
 80004a6:	8022      	strh	r2, [r4, #0]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004a8:	6828      	ldr	r0, [r5, #0]
 80004aa:	4a1d      	ldr	r2, [pc, #116]	; (8000520 <ad1939_init+0x170>)
 80004ac:	9600      	str	r6, [sp, #0]
 80004ae:	f007 f8cf 	bl	8007650 <HAL_SPI_TransmitReceive>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 80004b2:	bb60      	cbnz	r0, 800050e <ad1939_init+0x15e>
	TXdata[0] = AD1939_Global_Address_Write;
 80004b4:	f640 6208 	movw	r2, #3592	; 0xe08
	TXdata[2] = data;
 80004b8:	70a0      	strb	r0, [r4, #2]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004ba:	2303      	movs	r3, #3
 80004bc:	4621      	mov	r1, r4
	TXdata[0] = AD1939_Global_Address_Write;
 80004be:	8022      	strh	r2, [r4, #0]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004c0:	6828      	ldr	r0, [r5, #0]
 80004c2:	4a17      	ldr	r2, [pc, #92]	; (8000520 <ad1939_init+0x170>)
 80004c4:	9600      	str	r6, [sp, #0]
 80004c6:	f007 f8c3 	bl	8007650 <HAL_SPI_TransmitReceive>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 80004ca:	bb00      	cbnz	r0, 800050e <ad1939_init+0x15e>
	TXdata[0] = AD1939_Global_Address_Write;
 80004cc:	f640 7108 	movw	r1, #3848	; 0xf08
	TXdata[2] = data;
 80004d0:	2220      	movs	r2, #32
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004d2:	2303      	movs	r3, #3
 80004d4:	6828      	ldr	r0, [r5, #0]
	TXdata[0] = AD1939_Global_Address_Write;
 80004d6:	8021      	strh	r1, [r4, #0]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004d8:	4621      	mov	r1, r4
	TXdata[2] = data;
 80004da:	70a2      	strb	r2, [r4, #2]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004dc:	9600      	str	r6, [sp, #0]
 80004de:	4a10      	ldr	r2, [pc, #64]	; (8000520 <ad1939_init+0x170>)
 80004e0:	f007 f8b6 	bl	8007650 <HAL_SPI_TransmitReceive>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0b00100000 )) return -1;
 80004e4:	b998      	cbnz	r0, 800050e <ad1939_init+0x15e>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	TXdata[0] = AD1939_Global_Address_Write;
 80004ea:	f241 0108 	movw	r1, #4104	; 0x1008
	TXdata[2] = data;
 80004ee:	2200      	movs	r2, #0
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004f0:	6828      	ldr	r0, [r5, #0]
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2303      	movs	r3, #3
	TXdata[0] = AD1939_Global_Address_Write;
 80004f6:	8021      	strh	r1, [r4, #0]
	TXdata[2] = data;
 80004f8:	70a2      	strb	r2, [r4, #2]
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004fa:	4907      	ldr	r1, [pc, #28]	; (8000518 <ad1939_init+0x168>)
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <ad1939_init+0x170>)
 80004fe:	f007 f8a7 	bl	8007650 <HAL_SPI_TransmitReceive>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 8000502:	3800      	subs	r0, #0
 8000504:	bf18      	it	ne
 8000506:	2001      	movne	r0, #1
 8000508:	4240      	negs	r0, r0



    return 0; // Return 0 if all writes are successful
}
 800050a:	b003      	add	sp, #12
 800050c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 800050e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000512:	b003      	add	sp, #12
 8000514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000516:	bf00      	nop
 8000518:	24000508 	.word	0x24000508
 800051c:	24000500 	.word	0x24000500
 8000520:	24000504 	.word	0x24000504

08000524 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_DMA_Init+0x5c>)
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	200b      	movs	r0, #11
 800052a:	4611      	mov	r1, r2
{
 800052c:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052e:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8000532:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000534:	f044 0401 	orr.w	r4, r4, #1
 8000538:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 800053c:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 8000540:	f004 0401 	and.w	r4, r4, #1
 8000544:	9400      	str	r4, [sp, #0]
 8000546:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000548:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 800054c:	f044 0402 	orr.w	r4, r4, #2
 8000550:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8000554:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000558:	f003 0302 	and.w	r3, r3, #2
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000560:	f001 fc14 	bl	8001d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000564:	200b      	movs	r0, #11
 8000566:	f001 fc4f 	bl	8001e08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2038      	movs	r0, #56	; 0x38
 800056e:	4611      	mov	r1, r2
 8000570:	f001 fc0c 	bl	8001d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000574:	2038      	movs	r0, #56	; 0x38

}
 8000576:	b002      	add	sp, #8
 8000578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800057c:	f001 bc44 	b.w	8001e08 <HAL_NVIC_EnableIRQ>
 8000580:	58024400 	.word	0x58024400
 8000584:	00000000 	.word	0x00000000

08000588 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000588:	4821      	ldr	r0, [pc, #132]	; (8000610 <MX_FMC_Init+0x88>)
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800058a:	f44f 71c0 	mov.w	r1, #384	; 0x180
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800058e:	2200      	movs	r2, #0
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000590:	2310      	movs	r3, #16
{
 8000592:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000594:	4c1f      	ldr	r4, [pc, #124]	; (8000614 <MX_FMC_Init+0x8c>)
{
 8000596:	b090      	sub	sp, #64	; 0x40
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000598:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800059a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800059e:	61c2      	str	r2, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80005a0:	6241      	str	r1, [r0, #36]	; 0x24
  SdramTiming.RowCycleDelay = 16;
  SdramTiming.WriteRecoveryTime = 16;
  SdramTiming.RPDelay = 16;
  SdramTiming.RCDDelay = 16;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80005a2:	4669      	mov	r1, sp
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80005a4:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.RCDDelay = 16;
 80005a6:	9306      	str	r3, [sp, #24]
  SdramTiming.WriteRecoveryTime = 16;
 80005a8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8000608 <MX_FMC_Init+0x80>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80005ac:	e9c0 4200 	strd	r4, r2, [r0]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80005b0:	f44f 6400 	mov.w	r4, #2048	; 0x800
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80005b4:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80005b8:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80005bc:	6204      	str	r4, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80005be:	e9cd 3300 	strd	r3, r3, [sp]
  SdramTiming.RowCycleDelay = 16;
 80005c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
  SdramTiming.WriteRecoveryTime = 16;
 80005c6:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80005ca:	f006 feaf 	bl	800732c <HAL_SDRAM_Init>
 80005ce:	b9a8      	cbnz	r0, 80005fc <MX_FMC_Init+0x74>

//    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2500);


    IS42S16800J_Context_t my_sdram;
    my_sdram.TargetBank  = FMC_SDRAM_CMD_TARGET_BANK1;
 80005d0:	2110      	movs	r1, #16
    my_sdram.RefreshMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80005d2:	2203      	movs	r2, #3
    my_sdram.RefreshRate = REFRESH_COUNT;
    my_sdram.CASLatency  = IS42S16800J_CAS_LATENCY_3;
 80005d4:	2030      	movs	r0, #48	; 0x30
    my_sdram.OperationMode = IS42S16800J_OPERATING_MODE_STANDARD;
 80005d6:	2300      	movs	r3, #0
    my_sdram.RefreshRate = REFRESH_COUNT;
 80005d8:	f240 64d6 	movw	r4, #1750	; 0x6d6
    my_sdram.CASLatency  = IS42S16800J_CAS_LATENCY_3;
 80005dc:	900d      	str	r0, [sp, #52]	; 0x34
    my_sdram.WriteBurstMode = IS42S16800J_WRITEBURST_MODE_SINGLE;
    my_sdram.BurstType 		= IS42S16800J_BURST_TYPE_SEQUENTIAL;
    my_sdram.BurstLength 	= IS42S16800J_BURST_LENGTH_1;

    IS42S16800J_Init(&hsdram1, &my_sdram);
 80005de:	480c      	ldr	r0, [pc, #48]	; (8000610 <MX_FMC_Init+0x88>)
    my_sdram.RefreshRate = REFRESH_COUNT;
 80005e0:	940a      	str	r4, [sp, #40]	; 0x28
    my_sdram.RefreshMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80005e2:	e9cd 1208 	strd	r1, r2, [sp, #32]
    my_sdram.WriteBurstMode = IS42S16800J_WRITEBURST_MODE_SINGLE;
 80005e6:	f44f 7200 	mov.w	r2, #512	; 0x200
    IS42S16800J_Init(&hsdram1, &my_sdram);
 80005ea:	a908      	add	r1, sp, #32
    my_sdram.WriteBurstMode = IS42S16800J_WRITEBURST_MODE_SINGLE;
 80005ec:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    my_sdram.BurstLength 	= IS42S16800J_BURST_LENGTH_1;
 80005f0:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    IS42S16800J_Init(&hsdram1, &my_sdram);
 80005f4:	f000 fc22 	bl	8000e3c <IS42S16800J_Init>
  /* USER CODE END FMC_Init 2 */
}
 80005f8:	b010      	add	sp, #64	; 0x40
 80005fa:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80005fc:	f000 ffce 	bl	800159c <Error_Handler>
 8000600:	e7e6      	b.n	80005d0 <MX_FMC_Init+0x48>
 8000602:	bf00      	nop
 8000604:	f3af 8000 	nop.w
 8000608:	00000010 	.word	0x00000010
 800060c:	00000010 	.word	0x00000010
 8000610:	24000510 	.word	0x24000510
 8000614:	52004140 	.word	0x52004140

08000618 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8000618:	4850      	ldr	r0, [pc, #320]	; (800075c <HAL_SDRAM_MspInit+0x144>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800061c:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  if (FMC_Initialized) {
 8000620:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000622:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000628:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800062c:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 800062e:	b111      	cbz	r1, 8000636 <HAL_SDRAM_MspInit+0x1e>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000630:	b036      	add	sp, #216	; 0xd8
 8000632:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
  FMC_Initialized = 1;
 8000636:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000638:	22b0      	movs	r2, #176	; 0xb0
  FMC_Initialized = 1;
 800063a:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800063c:	a80a      	add	r0, sp, #40	; 0x28
 800063e:	f00a f822 	bl	800a686 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000642:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000646:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000648:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800064a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800064e:	f005 f919 	bl	8005884 <HAL_RCCEx_PeriphCLKConfig>
 8000652:	2800      	cmp	r0, #0
 8000654:	d17e      	bne.n	8000754 <HAL_SDRAM_MspInit+0x13c>
  __HAL_RCC_FMC_CLK_ENABLE();
 8000656:	4b42      	ldr	r3, [pc, #264]	; (8000760 <HAL_SDRAM_MspInit+0x148>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000658:	f24f 003f 	movw	r0, #61503	; 0xf03f
 800065c:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800065e:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8000660:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000664:	2600      	movs	r6, #0
 8000666:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000668:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 800066c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000670:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8000674:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000678:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800067c:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 800067e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000682:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000686:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000688:	a902      	add	r1, sp, #8
 800068a:	4836      	ldr	r0, [pc, #216]	; (8000764 <HAL_SDRAM_MspInit+0x14c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800068c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800068e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000692:	f002 fc2b 	bl	8002eec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000696:	220d      	movs	r2, #13
 8000698:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069a:	a902      	add	r1, sp, #8
 800069c:	4832      	ldr	r0, [pc, #200]	; (8000768 <HAL_SDRAM_MspInit+0x150>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800069e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80006a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80006a4:	e9cd 8904 	strd	r8, r9, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a8:	f002 fc20 	bl	8002eec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006ac:	2230      	movs	r2, #48	; 0x30
 80006ae:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	a902      	add	r1, sp, #8
 80006b2:	482e      	ldr	r0, [pc, #184]	; (800076c <HAL_SDRAM_MspInit+0x154>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006b4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80006ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f002 fc15 	bl	8002eec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006c6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006c8:	a902      	add	r1, sp, #8
 80006ca:	4826      	ldr	r0, [pc, #152]	; (8000764 <HAL_SDRAM_MspInit+0x14c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006cc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80006d2:	e9cd 8904 	strd	r8, r9, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006d6:	f002 fc09 	bl	8002eec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006da:	2201      	movs	r2, #1
 80006dc:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006de:	a902      	add	r1, sp, #8
 80006e0:	4823      	ldr	r0, [pc, #140]	; (8000770 <HAL_SDRAM_MspInit+0x158>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006e2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80006e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ec:	f002 fbfe 	bl	8002eec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80006f0:	f24e 7280 	movw	r2, #59264	; 0xe780
 80006f4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f6:	a902      	add	r1, sp, #8
 80006f8:	481e      	ldr	r0, [pc, #120]	; (8000774 <HAL_SDRAM_MspInit+0x15c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006fa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80006fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000700:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000704:	f002 fbf2 	bl	8002eec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000708:	f24c 7203 	movw	r2, #50947	; 0xc703
 800070c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070e:	a902      	add	r1, sp, #8
 8000710:	4819      	ldr	r0, [pc, #100]	; (8000778 <HAL_SDRAM_MspInit+0x160>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000712:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000714:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000718:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071c:	f002 fbe6 	bl	8002eec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8000720:	f248 1210 	movw	r2, #33040	; 0x8110
 8000724:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000726:	a902      	add	r1, sp, #8
 8000728:	4811      	ldr	r0, [pc, #68]	; (8000770 <HAL_SDRAM_MspInit+0x158>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800072a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 800072c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000730:	e9cd 8904 	strd	r8, r9, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000734:	f002 fbda 	bl	8002eec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000738:	2203      	movs	r2, #3
 800073a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800073c:	a902      	add	r1, sp, #8
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <HAL_SDRAM_MspInit+0x15c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000740:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000742:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8000746:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074a:	f002 fbcf 	bl	8002eec <HAL_GPIO_Init>
}
 800074e:	b036      	add	sp, #216	; 0xd8
 8000750:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
      Error_Handler();
 8000754:	f000 ff22 	bl	800159c <Error_Handler>
 8000758:	e77d      	b.n	8000656 <HAL_SDRAM_MspInit+0x3e>
 800075a:	bf00      	nop
 800075c:	2400050c 	.word	0x2400050c
 8000760:	58024400 	.word	0x58024400
 8000764:	58021400 	.word	0x58021400
 8000768:	58020800 	.word	0x58020800
 800076c:	58020000 	.word	0x58020000
 8000770:	58021800 	.word	0x58021800
 8000774:	58021000 	.word	0x58021000
 8000778:	58020c00 	.word	0x58020c00

0800077c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800077c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000780:	4b55      	ldr	r3, [pc, #340]	; (80008d8 <MX_GPIO_Init+0x15c>)
{
 8000782:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	4d54      	ldr	r5, [pc, #336]	; (80008dc <MX_GPIO_Init+0x160>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	940c      	str	r4, [sp, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSW_LED4_Pin|FSW_BTN3_Pin, GPIO_PIN_RESET);
 800078c:	4e54      	ldr	r6, [pc, #336]	; (80008e0 <MX_GPIO_Init+0x164>)
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 800078e:	4628      	mov	r0, r5

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FSW_LED3_Pin|FSW_LED2_Pin|FSW_LED1_Pin, GPIO_PIN_RESET);
 8000790:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80008e8 <MX_GPIO_Init+0x16c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSW_BTN4_GPIO_Port, FSW_BTN4_Pin, GPIO_PIN_RESET);
 8000794:	4f53      	ldr	r7, [pc, #332]	; (80008e4 <MX_GPIO_Init+0x168>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800079a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80007a2:	f041 0110 	orr.w	r1, r1, #16
 80007a6:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 80007aa:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80007ae:	f001 0110 	and.w	r1, r1, #16
 80007b2:	9101      	str	r1, [sp, #4]
 80007b4:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80007ba:	f041 0120 	orr.w	r1, r1, #32
 80007be:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 80007c2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80007c6:	f001 0120 	and.w	r1, r1, #32
 80007ca:	9102      	str	r1, [sp, #8]
 80007cc:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80007d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80007d6:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 80007da:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80007de:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80007e2:	9103      	str	r1, [sp, #12]
 80007e4:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80007ea:	f041 0104 	orr.w	r1, r1, #4
 80007ee:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 80007f2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80007f6:	f001 0104 	and.w	r1, r1, #4
 80007fa:	9104      	str	r1, [sp, #16]
 80007fc:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8000802:	4311      	orrs	r1, r2
 8000804:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8000808:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800080c:	4011      	ands	r1, r2
 800080e:	9105      	str	r1, [sp, #20]
 8000810:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000812:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8000816:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800081a:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 800081e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8000822:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8000826:	9106      	str	r1, [sp, #24]
 8000828:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800082e:	f041 0108 	orr.w	r1, r1, #8
 8000832:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000836:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	f003 0308 	and.w	r3, r3, #8
 8000840:	9307      	str	r3, [sp, #28]
 8000842:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000844:	f002 fc7a 	bl	800313c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FSW_LED4_Pin|FSW_BTN3_Pin, GPIO_PIN_RESET);
 8000848:	4622      	mov	r2, r4
 800084a:	4630      	mov	r0, r6
 800084c:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000850:	f002 fc74 	bl	800313c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, FSW_LED3_Pin|FSW_LED2_Pin|FSW_LED1_Pin, GPIO_PIN_RESET);
 8000854:	4622      	mov	r2, r4
 8000856:	4640      	mov	r0, r8
 8000858:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800085c:	f002 fc6e 	bl	800313c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FSW_BTN4_GPIO_Port, FSW_BTN4_Pin, GPIO_PIN_RESET);
 8000860:	4622      	mov	r2, r4
 8000862:	4638      	mov	r0, r7
 8000864:	2104      	movs	r1, #4
 8000866:	f002 fc69 	bl	800313c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800086a:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800086c:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000870:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000874:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000878:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800087c:	f002 fb36 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSW_LED4_Pin|FSW_BTN3_Pin;
 8000880:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000884:	a908      	add	r1, sp, #32
 8000886:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = FSW_LED4_Pin|FSW_BTN3_Pin;
 8000888:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000890:	f002 fb2c 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FSW_LED3_Pin|FSW_LED2_Pin|FSW_LED1_Pin;
 8000894:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	4640      	mov	r0, r8
 800089a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = FSW_LED3_Pin|FSW_LED2_Pin|FSW_LED1_Pin;
 800089c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f002 fb22 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSW_BTN1_Pin|FSW_BTN2_Pin;
 80008a8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80008ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b0:	4630      	mov	r0, r6
 80008b2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = FSW_BTN1_Pin|FSW_BTN2_Pin;
 80008b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f002 fb17 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSW_BTN4_Pin;
 80008be:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FSW_BTN4_GPIO_Port, &GPIO_InitStruct);
 80008c0:	a908      	add	r1, sp, #32
 80008c2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = FSW_BTN4_Pin;
 80008c4:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(FSW_BTN4_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f002 fb0e 	bl	8002eec <HAL_GPIO_Init>

}
 80008d0:	b00e      	add	sp, #56	; 0x38
 80008d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008d6:	bf00      	nop
 80008d8:	58024400 	.word	0x58024400
 80008dc:	58021800 	.word	0x58021800
 80008e0:	58020800 	.word	0x58020800
 80008e4:	58020c00 	.word	0x58020c00
 80008e8:	58020000 	.word	0x58020000
 80008ec:	00000000 	.word	0x00000000

080008f0 <callback>:
 * 		callback()
 * DESC:
 * 		Delay algorithm
 */
static int32_t callback(struct delay_effects_st* self,int32_t input_signal_i32){
	float32_t in_f32 = input_signal_i32;
 80008f0:	ee07 1a90 	vmov	s15, r1
	float32_t out_f32 = 0;
	 arm_biquad_cascade_df2T_f32(&lowpass_15k, &in_f32, &out_f32, 1);
 80008f4:	2301      	movs	r3, #1
static int32_t callback(struct delay_effects_st* self,int32_t input_signal_i32){
 80008f6:	b570      	push	{r4, r5, r6, lr}
	float32_t in_f32 = input_signal_i32;
 80008f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
static int32_t callback(struct delay_effects_st* self,int32_t input_signal_i32){
 80008fc:	4604      	mov	r4, r0
	float32_t out_f32 = 0;
 80008fe:	2500      	movs	r5, #0
	 arm_biquad_cascade_df2T_f32(&lowpass_15k, &in_f32, &out_f32, 1);
 8000900:	4845      	ldr	r0, [pc, #276]	; (8000a18 <callback+0x128>)
static int32_t callback(struct delay_effects_st* self,int32_t input_signal_i32){
 8000902:	ed2d 8b04 	vpush	{d8-d9}
 8000906:	b082      	sub	sp, #8
	 arm_biquad_cascade_df2T_f32(&lowpass_15k, &in_f32, &out_f32, 1);
 8000908:	aa01      	add	r2, sp, #4
 800090a:	4669      	mov	r1, sp
	float32_t out_f32 = 0;
 800090c:	9501      	str	r5, [sp, #4]
	float32_t in_f32 = input_signal_i32;
 800090e:	edcd 7a00 	vstr	s15, [sp]
	 arm_biquad_cascade_df2T_f32(&lowpass_15k, &in_f32, &out_f32, 1);
 8000912:	f009 fa23 	bl	8009d5c <arm_biquad_cascade_df2T_f32>
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 8000916:	68e3      	ldr	r3, [r4, #12]
	if(self->delayed_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 8000918:	f64b 317f 	movw	r1, #47999	; 0xbb7f
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 800091c:	69e2      	ldr	r2, [r4, #28]
	// delay effect
	float32_t delayed_sample_f32 = get_delayed_signal(self);


	self->output_i32 = (float)delayed_sample_f32*self->parameters_st.mix_f32 +
						(float)self->input_i32*(1.0 - self->parameters_st.mix_f32);
 800091e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
	 self->input_i32 =in_f32;// out_f32;
 8000922:	ed9d 8a00 	vldr	s16, [sp]
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 8000926:	441a      	add	r2, r3
	return self->buffer_ai32[self->delayed_counter_u32];
 8000928:	68a5      	ldr	r5, [r4, #8]
	 self->input_i32 =in_f32;// out_f32;
 800092a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
	self->output_i32 = (float)delayed_sample_f32*self->parameters_st.mix_f32 +
 800092e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
	if(self->delayed_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 8000932:	428a      	cmp	r2, r1
	self->current_counter_u32++;
 8000934:	f103 0301 	add.w	r3, r3, #1
						(float)self->input_i32*(1.0 - self->parameters_st.mix_f32);
 8000938:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
		self->delayed_counter_u32 = self->delayed_counter_u32- (DELAY_BUFFER_LENGTH-1);
 800093c:	bf88      	it	hi
 800093e:	1a52      	subhi	r2, r2, r1
	 self->input_i32 =in_f32;// out_f32;
 8000940:	ed84 8a00 	vstr	s16, [r4]
						(float)self->input_i32*(1.0 - self->parameters_st.mix_f32);
 8000944:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
		self->delayed_counter_u32 = self->delayed_counter_u32- (DELAY_BUFFER_LENGTH-1);
 8000948:	6122      	str	r2, [r4, #16]
	return self->buffer_ai32[self->delayed_counter_u32];
 800094a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
						(float)self->input_i32*(1.0 - self->parameters_st.mix_f32);
 800094e:	ee36 6b45 	vsub.f64	d6, d6, d5
	return self->buffer_ai32[self->delayed_counter_u32];
 8000952:	ed92 9a00 	vldr	s18, [r2]
						(float)self->input_i32*(1.0 - self->parameters_st.mix_f32);
 8000956:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
	if(self->current_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 800095a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
	return self->buffer_ai32[self->delayed_counter_u32];
 800095e:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
	if(self->current_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 8000962:	4293      	cmp	r3, r2

	increment_current_sample_counter(self);

	// modulation
	if( self->modulation_on_u8 ){
 8000964:	7d22      	ldrb	r2, [r4, #20]
	self->output_i32 = (float)delayed_sample_f32*self->parameters_st.mix_f32 +
 8000966:	ee27 7a09 	vmul.f32	s14, s14, s18
		self->current_counter_u32 = 0;
 800096a:	bf8c      	ite	hi
 800096c:	2300      	movhi	r3, #0
		self->parameters_st.time_in_buffer_u32 = DELAY_BUFFER_LENGTH - self->parameters_st.modulation_base_u32 + self->parameters_st.modulation_amplitude_i32*sin((float)self->parameters_st.modulation_counter_u32/(float)self->parameters_st.modulation_in_buffer_u32*6.28);
		self->parameters_st.modulation_counter_u32++;
	}

	// feedback calculation input,delayed,feedback
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)delayed_sample_f32* self->parameters_st.feedback_gain_f32) +
 800096e:	eb05 0583 	addls.w	r5, r5, r3, lsl #2
 8000972:	60e3      	str	r3, [r4, #12]
	self->output_i32 = (float)delayed_sample_f32*self->parameters_st.mix_f32 +
 8000974:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000978:	eea8 7b06 	vfma.f64	d7, d8, d6
 800097c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8000980:	ed84 7a01 	vstr	s14, [r4, #4]
	if( self->modulation_on_u8 ){
 8000984:	b332      	cbz	r2, 80009d4 <callback+0xe4>
		self->parameters_st.time_in_buffer_u32 = DELAY_BUFFER_LENGTH - self->parameters_st.modulation_base_u32 + self->parameters_st.modulation_amplitude_i32*sin((float)self->parameters_st.modulation_counter_u32/(float)self->parameters_st.modulation_in_buffer_u32*6.28);
 8000986:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000988:	edd4 7a08 	vldr	s15, [r4, #32]
 800098c:	ee07 6a10 	vmov	s14, r6
		self->parameters_st.modulation_counter_u32++;
 8000990:	3601      	adds	r6, #1
		self->parameters_st.time_in_buffer_u32 = DELAY_BUFFER_LENGTH - self->parameters_st.modulation_base_u32 + self->parameters_st.modulation_amplitude_i32*sin((float)self->parameters_st.modulation_counter_u32/(float)self->parameters_st.modulation_in_buffer_u32*6.28);
 8000992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000996:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800099a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8000a10 <callback+0x120>
 800099e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80009a2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80009a6:	ee27 0b00 	vmul.f64	d0, d7, d0
 80009aa:	f00a fcd1 	bl	800b350 <sin>
 80009ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009b0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80009b4:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
		self->parameters_st.modulation_counter_u32++;
 80009b8:	6266      	str	r6, [r4, #36]	; 0x24
		self->parameters_st.time_in_buffer_u32 = DELAY_BUFFER_LENGTH - self->parameters_st.modulation_base_u32 + self->parameters_st.modulation_amplitude_i32*sin((float)self->parameters_st.modulation_counter_u32/(float)self->parameters_st.modulation_in_buffer_u32*6.28);
 80009ba:	1a9b      	subs	r3, r3, r2
 80009bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80009c8:	eea6 7b00 	vfma.f64	d7, d6, d0
 80009cc:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80009d0:	ed84 7a07 	vstr	s14, [r4, #28]
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)delayed_sample_f32* self->parameters_st.feedback_gain_f32) +
 80009d4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 80009d8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80009dc:	eeb7 5ae6 	vcvt.f64.f32	d5, s13
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)delayed_sample_f32* self->parameters_st.feedback_gain_f32) +
 80009e0:	ee66 6a89 	vmul.f32	s13, s13, s18
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 80009e4:	ee37 7b45 	vsub.f64	d7, d7, d5
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)delayed_sample_f32* self->parameters_st.feedback_gain_f32) +
 80009e8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 80009ec:	ee27 7b08 	vmul.f64	d7, d7, d8
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)delayed_sample_f32* self->parameters_st.feedback_gain_f32) +
 80009f0:	ee16 2a90 	vmov	r2, s13
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 80009f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009f8:	ee17 3a90 	vmov	r3, s15
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)delayed_sample_f32* self->parameters_st.feedback_gain_f32) +
 80009fc:	4413      	add	r3, r2
 80009fe:	602b      	str	r3, [r5, #0]


	return self->output_i32;
}
 8000a00:	6860      	ldr	r0, [r4, #4]
 8000a02:	b002      	add	sp, #8
 8000a04:	ecbd 8b04 	vpop	{d8-d9}
 8000a08:	bd70      	pop	{r4, r5, r6, pc}
 8000a0a:	bf00      	nop
 8000a0c:	f3af 8000 	nop.w
 8000a10:	51eb851f 	.word	0x51eb851f
 8000a14:	40191eb8 	.word	0x40191eb8
 8000a18:	24000544 	.word	0x24000544

08000a1c <init_guitar_effect_delay>:
 * FUNC:
 * 		init_guitar_effect_delay()
 * DESC:
 * 		Sets basic paramters and function pointers to the struct
 */
void init_guitar_effect_delay(struct delay_effects_st* self){
 8000a1c:	b510      	push	{r4, lr}


	arm_biquad_cascade_df2T_init_f32(&lowpass_15k, 1, &lowpass_15k_coeff, &lowpass_15k_state);
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <init_guitar_effect_delay+0x48>)
void init_guitar_effect_delay(struct delay_effects_st* self){
 8000a20:	4604      	mov	r4, r0
	arm_biquad_cascade_df2T_init_f32(&lowpass_15k, 1, &lowpass_15k_coeff, &lowpass_15k_state);
 8000a22:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <init_guitar_effect_delay+0x4c>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	4811      	ldr	r0, [pc, #68]	; (8000a6c <init_guitar_effect_delay+0x50>)
 8000a28:	f009 fb54 	bl	800a0d4 <arm_biquad_cascade_df2T_init_f32>

	// set basic parameters
	self->parameters_st.time_in_buffer_u32 			= DELAY_BUFFER_LENGTH-DELAY_BUFFER_LENGTH/5;	// 12ms delay
 8000a2c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
	self->modulation_on_u8 							= 0;
 8000a30:	2100      	movs	r1, #0
	self->parameters_st.modulation_counter_u32 		= 0;
	self->parameters_st.modulation_in_buffer_u32 	= 25000;						// 1ms
	self->parameters_st.modulation_amplitude_i32	= 20;
	self->parameters_st.modulation_base_u32			= 50;
	self->parameters_st.mix_f32						= 0.3; 		// 50%
	self->parameters_st.feedback_gain_f32			= 0.5; 		// 50%
 8000a32:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
	self->parameters_st.time_in_buffer_u32 			= DELAY_BUFFER_LENGTH-DELAY_BUFFER_LENGTH/5;	// 12ms delay
 8000a36:	61e3      	str	r3, [r4, #28]
	self->parameters_st.modulation_in_buffer_u32 	= 25000;						// 1ms
 8000a38:	f246 13a8 	movw	r3, #25000	; 0x61a8
	self->current_counter_u32 = 0;




	self->buffer_ai32 = delay_sdram_buffer_ai32;
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <init_guitar_effect_delay+0x54>)
	self->parameters_st.modulation_in_buffer_u32 	= 25000;						// 1ms
 8000a3e:	6223      	str	r3, [r4, #32]
	self->parameters_st.modulation_amplitude_i32	= 20;
 8000a40:	2314      	movs	r3, #20
	self->parameters_st.feedback_gain_f32			= 0.5; 		// 50%
 8000a42:	63a2      	str	r2, [r4, #56]	; 0x38
	self->parameters_st.modulation_amplitude_i32	= 20;
 8000a44:	62a3      	str	r3, [r4, #40]	; 0x28
	self->parameters_st.modulation_base_u32			= 50;
 8000a46:	2332      	movs	r3, #50	; 0x32


	for(int i = 0; i<DELAY_BUFFER_LENGTH;i++){
		self->buffer_ai32[i] = 0;
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <init_guitar_effect_delay+0x58>)
	self->parameters_st.modulation_base_u32			= 50;
 8000a4a:	62e3      	str	r3, [r4, #44]	; 0x2c
	self->parameters_st.mix_f32						= 0.3; 		// 50%
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <init_guitar_effect_delay+0x5c>)
	self->modulation_on_u8 							= 0;
 8000a4e:	7521      	strb	r1, [r4, #20]
	self->parameters_st.mix_f32						= 0.3; 		// 50%
 8000a50:	6323      	str	r3, [r4, #48]	; 0x30
	self->parameters_st.modulation_counter_u32 		= 0;
 8000a52:	6261      	str	r1, [r4, #36]	; 0x24
	self->current_counter_u32 = 0;
 8000a54:	60e1      	str	r1, [r4, #12]
	self->buffer_ai32 = delay_sdram_buffer_ai32;
 8000a56:	60a0      	str	r0, [r4, #8]
		self->buffer_ai32[i] = 0;
 8000a58:	f009 fe15 	bl	800a686 <memset>
	}
	// add function pointers
	self->callback = callback;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <init_guitar_effect_delay+0x60>)
 8000a5e:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8000a60:	bd10      	pop	{r4, pc}
 8000a62:	bf00      	nop
 8000a64:	24000550 	.word	0x24000550
 8000a68:	24000000 	.word	0x24000000
 8000a6c:	24000544 	.word	0x24000544
 8000a70:	c0000000 	.word	0xc0000000
 8000a74:	0002ee00 	.word	0x0002ee00
 8000a78:	3e99999a 	.word	0x3e99999a
 8000a7c:	080008f1 	.word	0x080008f1

08000a80 <set_volumes>:
	// reset output
	self->output_f32 = 0;

	// calculate the new output defined by the voluem params
	self->output_f32 += self->input_f32 		* self->volumes_st.clean_f32;
	self->output_f32 += self->octave_up_1_f32 	* self->volumes_st.up_1_f32;
 8000a80:	ed90 7a03 	vldr	s14, [r0, #12]
 8000a84:	edd0 7a07 	vldr	s15, [r0, #28]
 8000a88:	edd0 5a05 	vldr	s11, [r0, #20]
 8000a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a90:	ed90 6a02 	vldr	s12, [r0, #8]
	self->output_f32 += self->octave_down_1_f32 * self->volumes_st.sub_1_f32;
 8000a94:	edd0 6a09 	vldr	s13, [r0, #36]	; 0x24
 8000a98:	ed90 7a01 	vldr	s14, [r0, #4]
	self->output_f32 += self->octave_up_1_f32 	* self->volumes_st.up_1_f32;
 8000a9c:	eee5 7a86 	vfma.f32	s15, s11, s12
	self->output_f32 += self->octave_down_1_f32 * self->volumes_st.sub_1_f32;
 8000aa0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000aa4:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <algorithm_octave_1_up>:
}

// Calculate the octave 1 HIGHER
static void algorithm_octave_1_up(struct octave_effects_st* self){
	// TODO
}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <algorithm_octave_1_down>:
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <subbandfilter_octave2_calculation>:
void subbandfilter_octave2_calculation(struct octave_effects_st* self){
 8000ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ab8:	f200 7424 	addw	r4, r0, #1828	; 0x724
	  self->subbandfilter_octave2_dn2[i]=self->subbandfilter_octave2_dn1[i];
 8000abc:	f500 6a00 	add.w	sl, r0, #2048	; 0x800
 8000ac0:	f500 67c9 	add.w	r7, r0, #1608	; 0x648
 8000ac4:	22dc      	movs	r2, #220	; 0xdc
  float32_t input_f32=self->input_f32;
 8000ac6:	6946      	ldr	r6, [r0, #20]
	  self->subbandfilter_octave2_dn2[i]=self->subbandfilter_octave2_dn1[i];
 8000ac8:	4621      	mov	r1, r4
void subbandfilter_octave2_calculation(struct octave_effects_st* self){
 8000aca:	4605      	mov	r5, r0
	  self->subbandfilter_octave2_dn2[i]=self->subbandfilter_octave2_dn1[i];
 8000acc:	4650      	mov	r0, sl
void subbandfilter_octave2_calculation(struct octave_effects_st* self){
 8000ace:	ed2d 8b02 	vpush	{d8}
 8000ad2:	b083      	sub	sp, #12
	  self->subbandfilter_octave2_dn2[i]=self->subbandfilter_octave2_dn1[i];
 8000ad4:	f009 fe53 	bl	800a77e <memcpy>
	  self->subbandfilter_octave2_dn1[i]=self->subbandfilter_octave2_dn[i];
 8000ad8:	22dc      	movs	r2, #220	; 0xdc
 8000ada:	4639      	mov	r1, r7
 8000adc:	4620      	mov	r0, r4
 8000ade:	f009 fe4e 	bl	800a77e <memcpy>
 8000ae2:	463b      	mov	r3, r7
	  self->subbandfilter_octave2_dn[i] = input_f32;
 8000ae4:	f843 6b04 	str.w	r6, [r3], #4
  for(int i=0;i<numberofsubbands;i++){
 8000ae8:	429c      	cmp	r4, r3
 8000aea:	d1fb      	bne.n	8000ae4 <subbandfilter_octave2_calculation+0x30>
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_octave2_yn1, self->subbandfilter_A1, numberofsubbands);
 8000aec:	f605 06dc 	addw	r6, r5, #2268	; 0x8dc
 8000af0:	f605 2994 	addw	r9, r5, #2708	; 0xa94
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_octave2_yn2, self->subbandfilter_A2, numberofsubbands);
 8000af4:	f605 13b8 	addw	r3, r5, #2488	; 0x9b8
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_octave2_yn1, self->subbandfilter_A1, numberofsubbands);
 8000af8:	482b      	ldr	r0, [pc, #172]	; (8000ba8 <subbandfilter_octave2_calculation+0xf4>)
 8000afa:	464a      	mov	r2, r9
 8000afc:	4631      	mov	r1, r6
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_octave2_yn2, self->subbandfilter_A2, numberofsubbands);
 8000afe:	9301      	str	r3, [sp, #4]
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_octave2_yn1, self->subbandfilter_A1, numberofsubbands);
 8000b00:	2337      	movs	r3, #55	; 0x37
 8000b02:	f009 fb4d 	bl	800a1a0 <arm_mult_f32>
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_octave2_yn2, self->subbandfilter_A2, numberofsubbands);
 8000b06:	f505 6b37 	add.w	fp, r5, #2928	; 0xb70
 8000b0a:	ed9d 8a01 	vldr	s16, [sp, #4]
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 8000b0e:	f605 484c 	addw	r8, r5, #3148	; 0xc4c
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_octave2_yn2, self->subbandfilter_A2, numberofsubbands);
 8000b12:	465a      	mov	r2, fp
 8000b14:	2337      	movs	r3, #55	; 0x37
 8000b16:	ee18 1a10 	vmov	r1, s16
 8000b1a:	4824      	ldr	r0, [pc, #144]	; (8000bac <subbandfilter_octave2_calculation+0xf8>)
 8000b1c:	f009 fb40 	bl	800a1a0 <arm_mult_f32>
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 8000b20:	4648      	mov	r0, r9
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_octave2_dn1, self->subbandfilter_B1, numberofsubbands);
 8000b22:	f605 6904 	addw	r9, r5, #3588	; 0xe04
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 8000b26:	4659      	mov	r1, fp
 8000b28:	4642      	mov	r2, r8
  arm_mult_f32(subbandfilter_b2, self->subbandfilter_octave2_dn2, self->subbandfilter_B2, numberofsubbands);
 8000b2a:	f505 6b6e 	add.w	fp, r5, #3808	; 0xee0
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 8000b2e:	2337      	movs	r3, #55	; 0x37
 8000b30:	f009 fbec 	bl	800a30c <arm_add_f32>
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_octave2_dn1, self->subbandfilter_B1, numberofsubbands);
 8000b34:	4621      	mov	r1, r4
 8000b36:	464a      	mov	r2, r9
 8000b38:	2337      	movs	r3, #55	; 0x37
 8000b3a:	481d      	ldr	r0, [pc, #116]	; (8000bb0 <subbandfilter_octave2_calculation+0xfc>)
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 8000b3c:	f605 74bc 	addw	r4, r5, #4028	; 0xfbc
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_octave2_dn1, self->subbandfilter_B1, numberofsubbands);
 8000b40:	f009 fb2e 	bl	800a1a0 <arm_mult_f32>
  arm_mult_f32(subbandfilter_b2, self->subbandfilter_octave2_dn2, self->subbandfilter_B2, numberofsubbands);
 8000b44:	4651      	mov	r1, sl
 8000b46:	465a      	mov	r2, fp
 8000b48:	2337      	movs	r3, #55	; 0x37
 8000b4a:	481a      	ldr	r0, [pc, #104]	; (8000bb4 <subbandfilter_octave2_calculation+0x100>)
 8000b4c:	f009 fb28 	bl	800a1a0 <arm_mult_f32>
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 8000b50:	4648      	mov	r0, r9
  arm_mult_f32(subbandfilter_b0, self->subbandfilter_octave2_dn, self->subbandfilter_B0, numberofsubbands);
 8000b52:	f605 5928 	addw	r9, r5, #3368	; 0xd28
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 8000b56:	4659      	mov	r1, fp
 8000b58:	4622      	mov	r2, r4
 8000b5a:	2337      	movs	r3, #55	; 0x37
 8000b5c:	f009 fbd6 	bl	800a30c <arm_add_f32>
  arm_sub_f32(self->subbandfilter_B,self->subbandfilter_A, self->subbandfilter_output, numberofsubbands);
 8000b60:	f505 7590 	add.w	r5, r5, #288	; 0x120
  arm_mult_f32(subbandfilter_b0, self->subbandfilter_octave2_dn, self->subbandfilter_B0, numberofsubbands);
 8000b64:	4639      	mov	r1, r7
 8000b66:	464a      	mov	r2, r9
 8000b68:	2337      	movs	r3, #55	; 0x37
 8000b6a:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <subbandfilter_octave2_calculation+0x104>)
 8000b6c:	f009 fb18 	bl	800a1a0 <arm_mult_f32>
  arm_add_f32(self->subbandfilter_B, self->subbandfilter_B0, self->subbandfilter_B, numberofsubbands);
 8000b70:	4649      	mov	r1, r9
 8000b72:	4622      	mov	r2, r4
 8000b74:	4620      	mov	r0, r4
 8000b76:	2337      	movs	r3, #55	; 0x37
 8000b78:	f009 fbc8 	bl	800a30c <arm_add_f32>
  arm_sub_f32(self->subbandfilter_B,self->subbandfilter_A, self->subbandfilter_output, numberofsubbands);
 8000b7c:	4641      	mov	r1, r8
 8000b7e:	4620      	mov	r0, r4
 8000b80:	2337      	movs	r3, #55	; 0x37
 8000b82:	462a      	mov	r2, r5
 8000b84:	f009 fab2 	bl	800a0ec <arm_sub_f32>
	  self->subbandfilter_octave2_yn2[i] 	= self->subbandfilter_octave2_yn1[i];
 8000b88:	4631      	mov	r1, r6
 8000b8a:	22dc      	movs	r2, #220	; 0xdc
 8000b8c:	ee18 0a10 	vmov	r0, s16
 8000b90:	f009 fdf5 	bl	800a77e <memcpy>
	  self->subbandfilter_octave2_yn1[i]  = self->subbandfilter_output[i];
 8000b94:	22dc      	movs	r2, #220	; 0xdc
 8000b96:	4629      	mov	r1, r5
 8000b98:	4630      	mov	r0, r6
}
 8000b9a:	b003      	add	sp, #12
 8000b9c:	ecbd 8b02 	vpop	{d8}
 8000ba0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  self->subbandfilter_octave2_yn1[i]  = self->subbandfilter_output[i];
 8000ba4:	f009 bdeb 	b.w	800a77e <memcpy>
 8000ba8:	24000028 	.word	0x24000028
 8000bac:	24000104 	.word	0x24000104
 8000bb0:	24000778 	.word	0x24000778
 8000bb4:	240002bc 	.word	0x240002bc
 8000bb8:	240001e0 	.word	0x240001e0

08000bbc <callback_octave_effect>:

	// 3. return value


	// LEGACY CODE
	self->input_f32 = (float32_t)input_i32;
 8000bbc:	ee07 1a90 	vmov	s15, r1
	  self->subbandfilter_dn2[i]		= self->subbandfilter_dn1[i];
 8000bc0:	22dc      	movs	r2, #220	; 0xdc
static int32_t callback_octave_effect(struct octave_effects_st* self,int32_t input_i32){
 8000bc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bc6:	ed2d 8b02 	vpush	{d8}
	self->input_f32 = (float32_t)input_i32;
 8000bca:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000bce:	f500 7436 	add.w	r4, r0, #728	; 0x2d8
	  self->subbandfilter_dn2[i]		= self->subbandfilter_dn1[i];
 8000bd2:	f500 7a6d 	add.w	sl, r0, #948	; 0x3b4
 8000bd6:	f500 77fe 	add.w	r7, r0, #508	; 0x1fc
static int32_t callback_octave_effect(struct octave_effects_st* self,int32_t input_i32){
 8000bda:	b083      	sub	sp, #12
	  self->subbandfilter_dn2[i]		= self->subbandfilter_dn1[i];
 8000bdc:	4621      	mov	r1, r4
	self->input_f32 = (float32_t)input_i32;
 8000bde:	ed80 8a05 	vstr	s16, [r0, #20]
static int32_t callback_octave_effect(struct octave_effects_st* self,int32_t input_i32){
 8000be2:	4605      	mov	r5, r0
	  self->subbandfilter_dn2[i]		= self->subbandfilter_dn1[i];
 8000be4:	4650      	mov	r0, sl
 8000be6:	f009 fdca 	bl	800a77e <memcpy>
	  self->subbandfilter_dn1[i]		= self->subbandfilter_dn[i];
 8000bea:	22dc      	movs	r2, #220	; 0xdc
 8000bec:	4639      	mov	r1, r7
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f009 fdc5 	bl	800a77e <memcpy>
 8000bf4:	463b      	mov	r3, r7
	  self->subbandfilter_dn[i]		= input_f32;
 8000bf6:	eca3 8a01 	vstmia	r3!, {s16}
  for(int i=0;i<numberofsubbands;i++){
 8000bfa:	429c      	cmp	r4, r3
 8000bfc:	d1fb      	bne.n	8000bf6 <callback_octave_effect+0x3a>
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_yn1, self->subbandfilter_A1, numberofsubbands);
 8000bfe:	f605 2994 	addw	r9, r5, #2708	; 0xa94
 8000c02:	f505 6692 	add.w	r6, r5, #1168	; 0x490
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_yn2, self->subbandfilter_A2, numberofsubbands);
 8000c06:	f205 536c 	addw	r3, r5, #1388	; 0x56c
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_yn1, self->subbandfilter_A1, numberofsubbands);
 8000c0a:	4853      	ldr	r0, [pc, #332]	; (8000d58 <callback_octave_effect+0x19c>)
 8000c0c:	464a      	mov	r2, r9
 8000c0e:	4631      	mov	r1, r6
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_yn2, self->subbandfilter_A2, numberofsubbands);
 8000c10:	9301      	str	r3, [sp, #4]
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_yn1, self->subbandfilter_A1, numberofsubbands);
 8000c12:	2337      	movs	r3, #55	; 0x37
 8000c14:	f009 fac4 	bl	800a1a0 <arm_mult_f32>
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_yn2, self->subbandfilter_A2, numberofsubbands);
 8000c18:	f505 6b37 	add.w	fp, r5, #2928	; 0xb70
 8000c1c:	ed9d 8a01 	vldr	s16, [sp, #4]
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 8000c20:	f605 484c 	addw	r8, r5, #3148	; 0xc4c
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_yn2, self->subbandfilter_A2, numberofsubbands);
 8000c24:	465a      	mov	r2, fp
 8000c26:	2337      	movs	r3, #55	; 0x37
 8000c28:	ee18 1a10 	vmov	r1, s16
 8000c2c:	484b      	ldr	r0, [pc, #300]	; (8000d5c <callback_octave_effect+0x1a0>)
 8000c2e:	f009 fab7 	bl	800a1a0 <arm_mult_f32>
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 8000c32:	4648      	mov	r0, r9
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_dn1, self->subbandfilter_B1, numberofsubbands);
 8000c34:	f605 6904 	addw	r9, r5, #3588	; 0xe04
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 8000c38:	4659      	mov	r1, fp
 8000c3a:	4642      	mov	r2, r8
  arm_mult_f32(subbandfilter_b2, self->subbandfilter_dn2, self->subbandfilter_B2, numberofsubbands);
 8000c3c:	f505 6b6e 	add.w	fp, r5, #3808	; 0xee0
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 8000c40:	2337      	movs	r3, #55	; 0x37
 8000c42:	f009 fb63 	bl	800a30c <arm_add_f32>
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_dn1, self->subbandfilter_B1, numberofsubbands);
 8000c46:	4621      	mov	r1, r4
 8000c48:	464a      	mov	r2, r9
 8000c4a:	2337      	movs	r3, #55	; 0x37
 8000c4c:	4844      	ldr	r0, [pc, #272]	; (8000d60 <callback_octave_effect+0x1a4>)
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 8000c4e:	f605 74bc 	addw	r4, r5, #4028	; 0xfbc
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_dn1, self->subbandfilter_B1, numberofsubbands);
 8000c52:	f009 faa5 	bl	800a1a0 <arm_mult_f32>
  arm_mult_f32(subbandfilter_b2, self->subbandfilter_dn2, self->subbandfilter_B2, numberofsubbands);
 8000c56:	4651      	mov	r1, sl
 8000c58:	465a      	mov	r2, fp
 8000c5a:	2337      	movs	r3, #55	; 0x37
 8000c5c:	4841      	ldr	r0, [pc, #260]	; (8000d64 <callback_octave_effect+0x1a8>)
 8000c5e:	f009 fa9f 	bl	800a1a0 <arm_mult_f32>
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 8000c62:	4648      	mov	r0, r9
  arm_mult_f32(subbandfilter_b0, self->subbandfilter_dn, self->subbandfilter_B0, numberofsubbands);
 8000c64:	f605 5928 	addw	r9, r5, #3368	; 0xd28
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 8000c68:	4659      	mov	r1, fp
 8000c6a:	4622      	mov	r2, r4
 8000c6c:	2337      	movs	r3, #55	; 0x37
 8000c6e:	f009 fb4d 	bl	800a30c <arm_add_f32>
  arm_mult_f32(subbandfilter_b0, self->subbandfilter_dn, self->subbandfilter_B0, numberofsubbands);
 8000c72:	4639      	mov	r1, r7
 8000c74:	464a      	mov	r2, r9
  arm_sub_f32(self->subbandfilter_B,self->subbandfilter_A, self->subbandfilter_output, numberofsubbands);
 8000c76:	f505 7790 	add.w	r7, r5, #288	; 0x120
  arm_mult_f32(subbandfilter_b0, self->subbandfilter_dn, self->subbandfilter_B0, numberofsubbands);
 8000c7a:	2337      	movs	r3, #55	; 0x37
 8000c7c:	483a      	ldr	r0, [pc, #232]	; (8000d68 <callback_octave_effect+0x1ac>)
 8000c7e:	f009 fa8f 	bl	800a1a0 <arm_mult_f32>
  arm_add_f32(self->subbandfilter_B, self->subbandfilter_B0, self->subbandfilter_B, numberofsubbands);
 8000c82:	4649      	mov	r1, r9
 8000c84:	4622      	mov	r2, r4
 8000c86:	4620      	mov	r0, r4
 8000c88:	2337      	movs	r3, #55	; 0x37
 8000c8a:	f009 fb3f 	bl	800a30c <arm_add_f32>
  arm_sub_f32(self->subbandfilter_B,self->subbandfilter_A, self->subbandfilter_output, numberofsubbands);
 8000c8e:	2337      	movs	r3, #55	; 0x37
 8000c90:	4641      	mov	r1, r8
 8000c92:	4620      	mov	r0, r4
 8000c94:	463a      	mov	r2, r7
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz, &octave1_up_1, &octave1_up_filtered, 1);
 8000c96:	4c35      	ldr	r4, [pc, #212]	; (8000d6c <callback_octave_effect+0x1b0>)
  arm_sub_f32(self->subbandfilter_B,self->subbandfilter_A, self->subbandfilter_output, numberofsubbands);
 8000c98:	f009 fa28 	bl	800a0ec <arm_sub_f32>
	  self->subbandfilter_yn2[i]		= self->subbandfilter_yn1[i];
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	22dc      	movs	r2, #220	; 0xdc
 8000ca0:	ee18 0a10 	vmov	r0, s16
 8000ca4:	f009 fd6b 	bl	800a77e <memcpy>
	  self->subbandfilter_yn1[i]		= self->subbandfilter_output[i];
 8000ca8:	4639      	mov	r1, r7
 8000caa:	22dc      	movs	r2, #220	; 0xdc
 8000cac:	4630      	mov	r0, r6
 8000cae:	f009 fd66 	bl	800a77e <memcpy>
	arm_abs_f32(self->subbandfilter_output, subband_absolute_value, numberofsubbands);
 8000cb2:	4638      	mov	r0, r7
 8000cb4:	2237      	movs	r2, #55	; 0x37
 8000cb6:	492e      	ldr	r1, [pc, #184]	; (8000d70 <callback_octave_effect+0x1b4>)
 8000cb8:	f009 fb82 	bl	800a3c0 <arm_abs_f32>
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up_1);
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <callback_octave_effect+0x1b8>)
 8000cbe:	2237      	movs	r2, #55	; 0x37
 8000cc0:	492d      	ldr	r1, [pc, #180]	; (8000d78 <callback_octave_effect+0x1bc>)
 8000cc2:	482b      	ldr	r0, [pc, #172]	; (8000d70 <callback_octave_effect+0x1b4>)
 8000cc4:	f009 fac6 	bl	800a254 <arm_dot_prod_f32>
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz, &octave1_up_1, &octave1_up_filtered, 1);
 8000cc8:	4622      	mov	r2, r4
 8000cca:	492a      	ldr	r1, [pc, #168]	; (8000d74 <callback_octave_effect+0x1b8>)
 8000ccc:	2301      	movs	r3, #1
 8000cce:	482b      	ldr	r0, [pc, #172]	; (8000d7c <callback_octave_effect+0x1c0>)
 8000cd0:	f009 f844 	bl	8009d5c <arm_biquad_cascade_df2T_f32>
	// +1 octave
	subbandfilter_calculation(self);
	octave1up(self);
	// save result
	self->octave_up_1_f32 = octave1_up_filtered;
 8000cd4:	6823      	ldr	r3, [r4, #0]
//
	// +2 octave
	subbandfilter_octave2_calculation(self);
 8000cd6:	4628      	mov	r0, r5
	self->octave_up_1_f32 = octave1_up_filtered;
 8000cd8:	61eb      	str	r3, [r5, #28]
	subbandfilter_octave2_calculation(self);
 8000cda:	f7ff feeb 	bl	8000ab4 <subbandfilter_octave2_calculation>
	arm_abs_f32(self->subbandfilter_output, subband_absolute_value, numberofsubbands);
 8000cde:	4638      	mov	r0, r7
 8000ce0:	2237      	movs	r2, #55	; 0x37
 8000ce2:	4923      	ldr	r1, [pc, #140]	; (8000d70 <callback_octave_effect+0x1b4>)
 8000ce4:	f009 fb6c 	bl	800a3c0 <arm_abs_f32>
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up_1);
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <callback_octave_effect+0x1b8>)
 8000cea:	2237      	movs	r2, #55	; 0x37
 8000cec:	4922      	ldr	r1, [pc, #136]	; (8000d78 <callback_octave_effect+0x1bc>)
 8000cee:	4820      	ldr	r0, [pc, #128]	; (8000d70 <callback_octave_effect+0x1b4>)
 8000cf0:	f009 fab0 	bl	800a254 <arm_dot_prod_f32>
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz_octave2, &octave1_up_1, &octave1_up_filtered, 1);
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	4622      	mov	r2, r4
 8000cf8:	491e      	ldr	r1, [pc, #120]	; (8000d74 <callback_octave_effect+0x1b8>)
 8000cfa:	4821      	ldr	r0, [pc, #132]	; (8000d80 <callback_octave_effect+0x1c4>)
 8000cfc:	f009 f82e 	bl	8009d5c <arm_biquad_cascade_df2T_f32>
	self->octave_up_2_f32 = octave1_up_filtered;

	// Write to DAC
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
						(int32_t)self->octave_up_2_f32*self->volumes_st.up_2_f32 +
						(int32_t)(self->input_f32*self->volumes_st.clean_f32);
 8000d00:	edd5 6a02 	vldr	s13, [r5, #8]
 8000d04:	edd5 7a05 	vldr	s15, [r5, #20]
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8000d08:	ed95 7a07 	vldr	s14, [r5, #28]
						(int32_t)(self->input_f32*self->volumes_st.clean_f32);
 8000d0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	self->octave_up_2_f32 = octave1_up_filtered;
 8000d10:	ed94 6a00 	vldr	s12, [r4]
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8000d14:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000d18:	ed95 5a03 	vldr	s10, [r5, #12]
						(int32_t)self->octave_up_2_f32*self->volumes_st.up_2_f32 +
 8000d1c:	eefd 6ac6 	vcvt.s32.f32	s13, s12
 8000d20:	edd5 5a04 	vldr	s11, [r5, #16]
						(int32_t)(self->input_f32*self->volumes_st.clean_f32);
 8000d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	self->octave_up_2_f32 = octave1_up_filtered;
 8000d28:	ed85 6a08 	vstr	s12, [r5, #32]
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8000d2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
						(int32_t)self->octave_up_2_f32*self->volumes_st.up_2_f32 +
 8000d30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d38:	eee7 7a05 	vfma.f32	s15, s14, s10
 8000d3c:	eee6 7aa5 	vfma.f32	s15, s13, s11
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8000d40:	edc5 7a06 	vstr	s15, [r5, #24]

	return self->output_f32;
}
 8000d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d48:	ee17 0a90 	vmov	r0, s15
 8000d4c:	b003      	add	sp, #12
 8000d4e:	ecbd 8b02 	vpop	{d8}
 8000d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d56:	bf00      	nop
 8000d58:	24000028 	.word	0x24000028
 8000d5c:	24000104 	.word	0x24000104
 8000d60:	24000778 	.word	0x24000778
 8000d64:	240002bc 	.word	0x240002bc
 8000d68:	240001e0 	.word	0x240001e0
 8000d6c:	240005bc 	.word	0x240005bc
 8000d70:	240005c0 	.word	0x240005c0
 8000d74:	240005b8 	.word	0x240005b8
 8000d78:	2400069c 	.word	0x2400069c
 8000d7c:	24000578 	.word	0x24000578
 8000d80:	24000584 	.word	0x24000584

08000d84 <init_guitar_effect_octave>:


void init_guitar_effect_octave(octave_effects_tst* self){
 8000d84:	b510      	push	{r4, lr}

	  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <init_guitar_effect_octave+0x94>)
void init_guitar_effect_octave(octave_effects_tst* self){
 8000d88:	4604      	mov	r4, r0
	  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000d8a:	4a24      	ldr	r2, [pc, #144]	; (8000e1c <init_guitar_effect_octave+0x98>)
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4824      	ldr	r0, [pc, #144]	; (8000e20 <init_guitar_effect_octave+0x9c>)
 8000d90:	f009 f9a0 	bl	800a0d4 <arm_biquad_cascade_df2T_init_f32>
	  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz_octave2, 1, &highpass_coeff, &highpass_state);
 8000d94:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <init_guitar_effect_octave+0x94>)
 8000d96:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <init_guitar_effect_octave+0x98>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4822      	ldr	r0, [pc, #136]	; (8000e24 <init_guitar_effect_octave+0xa0>)
 8000d9c:	f009 f99a 	bl	800a0d4 <arm_biquad_cascade_df2T_init_f32>
	// assign function pointers
	self->set_volumes			= set_volumes;
 8000da0:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8000da4:	4920      	ldr	r1, [pc, #128]	; (8000e28 <init_guitar_effect_octave+0xa4>)
	self->calc_octave_1_up 		= algorithm_octave_1_down;
	self->calc_octave_1_down 	= algorithm_octave_1_up;
	self->callback 				= callback_octave_effect;

	self->volumes_st.up_1_f32 = 1;
 8000da6:	f04f 5e7e 	mov.w	lr, #1065353216	; 0x3f800000
	self->calc_octave_1_up 		= algorithm_octave_1_down;
 8000daa:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <init_guitar_effect_octave+0xa8>)
	self->volumes_st.up_2_f32 = 1;
	self->volumes_st.clean_f32      = 1;
	for(int i=0; i<numberofsubbands;i++){
 8000dac:	f04f 0c00 	mov.w	ip, #0
	self->set_volumes			= set_volumes;
 8000db0:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
	self->calc_octave_1_up 		= algorithm_octave_1_down;
 8000db4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	self->calc_octave_1_down 	= algorithm_octave_1_up;
 8000db8:	491d      	ldr	r1, [pc, #116]	; (8000e30 <init_guitar_effect_octave+0xac>)
	self->callback 				= callback_octave_effect;
 8000dba:	4a1e      	ldr	r2, [pc, #120]	; (8000e34 <init_guitar_effect_octave+0xb0>)
	self->calc_octave_1_down 	= algorithm_octave_1_up;
 8000dbc:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	self->callback 				= callback_octave_effect;
 8000dc0:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
 8000dc4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	self->volumes_st.up_1_f32 = 1;
 8000dc8:	f504 62c9 	add.w	r2, r4, #1608	; 0x648
 8000dcc:	f8c4 e00c 	str.w	lr, [r4, #12]
		subband_ones[i] = 1;
		self->subbandfilter_dn2[i]		=	0;
 8000dd0:	2300      	movs	r3, #0
	self->volumes_st.up_2_f32 = 1;
 8000dd2:	f8c4 e010 	str.w	lr, [r4, #16]
	self->volumes_st.clean_f32      = 1;
 8000dd6:	f8c4 e008 	str.w	lr, [r4, #8]
	for(int i=0; i<numberofsubbands;i++){
 8000dda:	4c17      	ldr	r4, [pc, #92]	; (8000e38 <init_guitar_effect_octave+0xb4>)
		subband_ones[i] = 1;
 8000ddc:	eb04 008c 	add.w	r0, r4, ip, lsl #2
	for(int i=0; i<numberofsubbands;i++){
 8000de0:	f10c 0c01 	add.w	ip, ip, #1
 8000de4:	f1bc 0f37 	cmp.w	ip, #55	; 0x37
		subband_ones[i] = 1;
 8000de8:	f8c0 e000 	str.w	lr, [r0]
		self->subbandfilter_dn2[i]		=	0;
 8000dec:	f8c1 31b8 	str.w	r3, [r1, #440]	; 0x1b8
		self->subbandfilter_dn1[i]		=	0;
 8000df0:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
		self->subbandfilter_dn[i]		=	0;
 8000df4:	f841 3b04 	str.w	r3, [r1], #4
		self->subbandfilter_yn1[i] 		= 	0;
 8000df8:	f8c1 3290 	str.w	r3, [r1, #656]	; 0x290
		self->subbandfilter_yn2[i] 		= 	0;
 8000dfc:	f8c1 336c 	str.w	r3, [r1, #876]	; 0x36c

		self->subbandfilter_octave2_dn[i]		=	0;
 8000e00:	f842 3b04 	str.w	r3, [r2], #4
		self->subbandfilter_octave2_dn1[i]		=	0;
 8000e04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
		self->subbandfilter_octave2_dn2[i]		=	0;
 8000e08:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
		self->subbandfilter_octave2_yn1[i] 		= 	0;
 8000e0c:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		self->subbandfilter_octave2_yn2[i] 		= 	0;
 8000e10:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c
	for(int i=0; i<numberofsubbands;i++){
 8000e14:	d1e2      	bne.n	8000ddc <init_guitar_effect_octave+0x58>
	}

	// zero out the IIR filter states


}
 8000e16:	bd10      	pop	{r4, pc}
 8000e18:	24000590 	.word	0x24000590
 8000e1c:	24000014 	.word	0x24000014
 8000e20:	24000578 	.word	0x24000578
 8000e24:	24000584 	.word	0x24000584
 8000e28:	08000a81 	.word	0x08000a81
 8000e2c:	08000ab1 	.word	0x08000ab1
 8000e30:	08000aad 	.word	0x08000aad
 8000e34:	08000bbd 	.word	0x08000bbd
 8000e38:	2400069c 	.word	0x2400069c

08000e3c <IS42S16800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 8000e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = IS42S16800J_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S16800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 8000e3e:	680b      	ldr	r3, [r1, #0]
{
 8000e40:	460d      	mov	r5, r1
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = IS42S16800J_CLK_ENABLE_CMD;
 8000e42:	4c2a      	ldr	r4, [pc, #168]	; (8000eec <IS42S16800J_Init+0xb0>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8000e48:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
 8000e4a:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8000e4c:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000e4e:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
 8000e50:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = IS42S16800J_CLK_ENABLE_CMD;
 8000e52:	2301      	movs	r3, #1
 8000e54:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 8000e56:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000e58:	f006 fa92 	bl	8007380 <HAL_SDRAM_SendCommand>
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	d142      	bne.n	8000ee6 <IS42S16800J_Init+0xaa>
  * @retval IS42S16800J_OK
  */
static int32_t IS42S16800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000e60:	f000 ff6a 	bl	8001d38 <HAL_GetTick>
 8000e64:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000e66:	f000 ff67 	bl	8001d38 <HAL_GetTick>
 8000e6a:	4286      	cmp	r6, r0
 8000e6c:	d0fb      	beq.n	8000e66 <IS42S16800J_Init+0x2a>
  Command.CommandMode            = IS42S16800J_PALL_CMD;
 8000e6e:	2302      	movs	r3, #2
    if(IS42S16800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 8000e70:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
 8000e72:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000e74:	491d      	ldr	r1, [pc, #116]	; (8000eec <IS42S16800J_Init+0xb0>)
  Command.CommandMode            = IS42S16800J_PALL_CMD;
 8000e76:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
 8000e78:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 8000e7a:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 8000e82:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000e84:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000e86:	f006 fa7b 	bl	8007380 <HAL_SDRAM_SendCommand>
 8000e8a:	bb60      	cbnz	r0, 8000ee6 <IS42S16800J_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000e8c:	4917      	ldr	r1, [pc, #92]	; (8000eec <IS42S16800J_Init+0xb0>)
  Command.CommandMode            = RefreshMode;
 8000e8e:	e9d5 3200 	ldrd	r3, r2, [r5]
  Command.ModeRegisterDefinition = 0;
 8000e92:	60e0      	str	r0, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000e94:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
 8000e96:	e9c4 2300 	strd	r2, r3, [r4]
  Command.AutoRefreshNumber      = 8;
 8000e9a:	2308      	movs	r3, #8
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 8;
 8000ea0:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000ea2:	f006 fa6d 	bl	8007380 <HAL_SDRAM_SendCommand>
 8000ea6:	b9f0      	cbnz	r0, 8000ee6 <IS42S16800J_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000ea8:	4910      	ldr	r1, [pc, #64]	; (8000eec <IS42S16800J_Init+0xb0>)
 8000eaa:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000eac:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8000eb0:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 8000eb2:	696a      	ldr	r2, [r5, #20]
 8000eb4:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 8000eb6:	69aa      	ldr	r2, [r5, #24]
 8000eb8:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000eba:	69ea      	ldr	r2, [r5, #28]
 8000ebc:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
 8000ebe:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8000ec0:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = IS42S16800J_LOAD_MODE_CMD;
 8000ec2:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
 8000ec4:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S16800J_LOAD_MODE_CMD;
 8000ecc:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000ece:	f006 fa57 	bl	8007380 <HAL_SDRAM_SendCommand>
 8000ed2:	b940      	cbnz	r0, 8000ee6 <IS42S16800J_Init+0xaa>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000ed4:	68a9      	ldr	r1, [r5, #8]
 8000ed6:	4638      	mov	r0, r7
 8000ed8:	f006 fa72 	bl	80073c0 <HAL_SDRAM_ProgramRefreshRate>
 8000edc:	3800      	subs	r0, #0
 8000ede:	bf18      	it	ne
 8000ee0:	2001      	movne	r0, #1
 8000ee2:	4240      	negs	r0, r0
}
 8000ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S16800J_ERROR;
 8000ee6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eec:	24000854 	.word	0x24000854

08000ef0 <HAL_SAI_TxCpltCallback>:
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
	DAC_HALF_COMPLETE_FLAG = 0;
//	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
//	SCB_InvalidateDCache_by_Addr(&output_i2s_buffer_au32[8], sizeof(output_i2s_buffer_au32)/2);

	output_i2s_buffer_au32[8+OUT1_DAC_NUM] = effects_io_port.out1_i32>>8;
 8000ef0:	4912      	ldr	r1, [pc, #72]	; (8000f3c <HAL_SAI_TxCpltCallback+0x4c>)
	DAC_HALF_COMPLETE_FLAG = 0;
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_SAI_TxCpltCallback+0x50>)
	output_i2s_buffer_au32[8+OUT1_DAC_NUM] = effects_io_port.out1_i32>>8;
 8000ef6:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <HAL_SAI_TxCpltCallback+0x54>)
	DAC_HALF_COMPLETE_FLAG = 0;
 8000ef8:	7018      	strb	r0, [r3, #0]
	output_i2s_buffer_au32[8+OUT1_DAC_NUM] = effects_io_port.out1_i32>>8;
 8000efa:	690b      	ldr	r3, [r1, #16]
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000efc:	f002 0c1f 	and.w	ip, r2, #31
 8000f00:	121b      	asrs	r3, r3, #8
 8000f02:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f04:	f10c 0320 	add.w	r3, ip, #32
	output_i2s_buffer_au32[8+OUT2_DAC_NUM] = effects_io_port.out2_i32>>8;
 8000f08:	6948      	ldr	r0, [r1, #20]
 8000f0a:	1200      	asrs	r0, r0, #8
 8000f0c:	6390      	str	r0, [r2, #56]	; 0x38
	output_i2s_buffer_au32[8+OUT3_DAC_NUM] = effects_io_port.out3_i32>>8;
 8000f0e:	6988      	ldr	r0, [r1, #24]
 8000f10:	1200      	asrs	r0, r0, #8
 8000f12:	6310      	str	r0, [r2, #48]	; 0x30
	output_i2s_buffer_au32[8+OUT4_DAC_NUM] = effects_io_port.out4_i32>>8;
 8000f14:	69c9      	ldr	r1, [r1, #28]
 8000f16:	1209      	asrs	r1, r1, #8
 8000f18:	6351      	str	r1, [r2, #52]	; 0x34
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f1a:	f3bf 8f4f 	dsb	sy
 8000f1e:	3240      	adds	r2, #64	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000f20:	4809      	ldr	r0, [pc, #36]	; (8000f48 <HAL_SAI_TxCpltCallback+0x58>)
 8000f22:	4462      	add	r2, ip
 8000f24:	1ad1      	subs	r1, r2, r3
 8000f26:	3b20      	subs	r3, #32
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8000f28:	2b00      	cmp	r3, #0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000f2a:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
      } while ( op_size > 0 );
 8000f2e:	dcf9      	bgt.n	8000f24 <HAL_SAI_TxCpltCallback+0x34>
 8000f30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f34:	f3bf 8f6f 	isb	sy
	SCB_CleanDCache_by_Addr(&output_i2s_buffer_au32[8], sizeof(output_i2s_buffer_au32)/2);
}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	2400a50c 	.word	0x2400a50c
 8000f40:	2400a4ac 	.word	0x2400a4ac
 8000f44:	2400b628 	.word	0x2400b628
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <HAL_SAI_TxHalfCpltCallback>:
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
	DAC_HALF_COMPLETE_FLAG = 1;
//	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
//	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32)/2);

	output_i2s_buffer_au32[OUT1_DAC_NUM] = effects_io_port.out1_i32>>8;
 8000f4c:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <HAL_SAI_TxHalfCpltCallback+0x48>)
	DAC_HALF_COMPLETE_FLAG = 1;
 8000f4e:	2001      	movs	r0, #1
 8000f50:	4911      	ldr	r1, [pc, #68]	; (8000f98 <HAL_SAI_TxHalfCpltCallback+0x4c>)
	output_i2s_buffer_au32[OUT1_DAC_NUM] = effects_io_port.out1_i32>>8;
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_SAI_TxHalfCpltCallback+0x50>)
	DAC_HALF_COMPLETE_FLAG = 1;
 8000f54:	7008      	strb	r0, [r1, #0]
	output_i2s_buffer_au32[OUT1_DAC_NUM] = effects_io_port.out1_i32>>8;
 8000f56:	6911      	ldr	r1, [r2, #16]
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000f58:	f003 0c1f 	and.w	ip, r3, #31
 8000f5c:	1209      	asrs	r1, r1, #8
 8000f5e:	61d9      	str	r1, [r3, #28]
	output_i2s_buffer_au32[OUT2_DAC_NUM] = effects_io_port.out2_i32>>8;
 8000f60:	6951      	ldr	r1, [r2, #20]
 8000f62:	1209      	asrs	r1, r1, #8
 8000f64:	6199      	str	r1, [r3, #24]
	output_i2s_buffer_au32[OUT3_DAC_NUM] = effects_io_port.out3_i32>>8;
 8000f66:	6991      	ldr	r1, [r2, #24]
 8000f68:	1209      	asrs	r1, r1, #8
 8000f6a:	6119      	str	r1, [r3, #16]
	output_i2s_buffer_au32[OUT4_DAC_NUM] = effects_io_port.out4_i32>>8;
 8000f6c:	69d2      	ldr	r2, [r2, #28]
 8000f6e:	1212      	asrs	r2, r2, #8
 8000f70:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f72:	f3bf 8f4f 	dsb	sy
 8000f76:	f103 0120 	add.w	r1, r3, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000f7a:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <HAL_SAI_TxHalfCpltCallback+0x54>)
      } while ( op_size > 0 );
 8000f7c:	4461      	add	r1, ip
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000f7e:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000f82:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8000f84:	1aca      	subs	r2, r1, r3
 8000f86:	2a00      	cmp	r2, #0
 8000f88:	dcf9      	bgt.n	8000f7e <HAL_SAI_TxHalfCpltCallback+0x32>
 8000f8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f8e:	f3bf 8f6f 	isb	sy
	SCB_CleanDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32)/2);
}
 8000f92:	4770      	bx	lr
 8000f94:	2400a50c 	.word	0x2400a50c
 8000f98:	2400a4ac 	.word	0x2400a4ac
 8000f9c:	2400b628 	.word	0x2400b628
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <HAL_SAI_RxCpltCallback>:
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000fa4:	4a19      	ldr	r2, [pc, #100]	; (800100c <HAL_SAI_RxCpltCallback+0x68>)

volatile uint8_t 			ADC_READY_FLAG = 0;

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
	ADC_HALF_COMPLETE_FLAG = 0;
 8000fa6:	f04f 0c00 	mov.w	ip, #0
 8000faa:	4819      	ldr	r0, [pc, #100]	; (8001010 <HAL_SAI_RxCpltCallback+0x6c>)
	ADC_READY_FLAG = 1;
 8000fac:	2101      	movs	r1, #1
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_SAI_RxCpltCallback+0x70>)
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000fb0:	b500      	push	{lr}
 8000fb2:	f002 0e1f 	and.w	lr, r2, #31
	ADC_HALF_COMPLETE_FLAG = 0;
 8000fb6:	f880 c000 	strb.w	ip, [r0]
	ADC_READY_FLAG = 1;
 8000fba:	7019      	strb	r1, [r3, #0]
 8000fbc:	f10e 0320 	add.w	r3, lr, #32
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc0:	f3bf 8f4f 	dsb	sy
 8000fc4:	f102 0120 	add.w	r1, r2, #32
 8000fc8:	f1a2 0c20 	sub.w	ip, r2, #32
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000fcc:	4812      	ldr	r0, [pc, #72]	; (8001018 <HAL_SAI_RxCpltCallback+0x74>)
 8000fce:	4471      	add	r1, lr
 8000fd0:	1aca      	subs	r2, r1, r3
 8000fd2:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8000fd4:	2b00      	cmp	r3, #0
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000fd6:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
      } while ( op_size > 0 );
 8000fda:	dcf9      	bgt.n	8000fd0 <HAL_SAI_RxCpltCallback+0x2c>
 8000fdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fe0:	f3bf 8f6f 	isb	sy
//	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
//	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));

	SCB_InvalidateDCache_by_Addr(&input_i2s_buffer_au32[8], sizeof(input_i2s_buffer_au32)/2);
	effects_io_port.in1_i32 = input_i2s_buffer_au32[8+IN1_ADC_NUM]<<8;
 8000fe4:	f8dc 202c 	ldr.w	r2, [ip, #44]	; 0x2c
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_SAI_RxCpltCallback+0x78>)
 8000fea:	0212      	lsls	r2, r2, #8
 8000fec:	601a      	str	r2, [r3, #0]
	effects_io_port.in2_i32 = input_i2s_buffer_au32[8+IN2_ADC_NUM]<<8;
 8000fee:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8000ff2:	0212      	lsls	r2, r2, #8
 8000ff4:	605a      	str	r2, [r3, #4]
	effects_io_port.in3_i32 = input_i2s_buffer_au32[8+IN3_ADC_NUM]<<8;
 8000ff6:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 8000ffa:	0212      	lsls	r2, r2, #8
 8000ffc:	609a      	str	r2, [r3, #8]
	effects_io_port.in4_i32 = input_i2s_buffer_au32[8+IN4_ADC_NUM]<<8;
 8000ffe:	f8dc 2020 	ldr.w	r2, [ip, #32]
 8001002:	0212      	lsls	r2, r2, #8
 8001004:	60da      	str	r2, [r3, #12]

//	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
//	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8001006:	f85d fb04 	ldr.w	pc, [sp], #4
 800100a:	bf00      	nop
 800100c:	2400a55c 	.word	0x2400a55c
 8001010:	24000864 	.word	0x24000864
 8001014:	24000865 	.word	0x24000865
 8001018:	e000ed00 	.word	0xe000ed00
 800101c:	2400a50c 	.word	0x2400a50c

08001020 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8001020:	b410      	push	{r4}
	ADC_HALF_COMPLETE_FLAG = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	4a13      	ldr	r2, [pc, #76]	; (8001074 <HAL_SAI_RxHalfCpltCallback+0x54>)
	ADC_READY_FLAG = 1;
 8001026:	4914      	ldr	r1, [pc, #80]	; (8001078 <HAL_SAI_RxHalfCpltCallback+0x58>)
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001028:	4c14      	ldr	r4, [pc, #80]	; (800107c <HAL_SAI_RxHalfCpltCallback+0x5c>)
	ADC_HALF_COMPLETE_FLAG = 1;
 800102a:	7013      	strb	r3, [r2, #0]
 800102c:	f004 021f 	and.w	r2, r4, #31
	ADC_READY_FLAG = 1;
 8001030:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001032:	f3bf 8f4f 	dsb	sy
 8001036:	f104 0120 	add.w	r1, r4, #32
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800103a:	4623      	mov	r3, r4
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800103c:	4810      	ldr	r0, [pc, #64]	; (8001080 <HAL_SAI_RxHalfCpltCallback+0x60>)
      } while ( op_size > 0 );
 800103e:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001040:	f8c0 325c 	str.w	r3, [r0, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001044:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8001046:	1aca      	subs	r2, r1, r3
 8001048:	2a00      	cmp	r2, #0
 800104a:	dcf9      	bgt.n	8001040 <HAL_SAI_RxHalfCpltCallback+0x20>
 800104c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001050:	f3bf 8f6f 	isb	sy
//	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
//	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32)/2);
	effects_io_port.in1_i32 = input_i2s_buffer_au32[IN1_ADC_NUM]<<8;
 8001054:	68e2      	ldr	r2, [r4, #12]
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_SAI_RxHalfCpltCallback+0x64>)
 8001058:	0212      	lsls	r2, r2, #8
 800105a:	601a      	str	r2, [r3, #0]
	effects_io_port.in2_i32 = input_i2s_buffer_au32[IN2_ADC_NUM]<<8;
 800105c:	68a2      	ldr	r2, [r4, #8]
 800105e:	0212      	lsls	r2, r2, #8
 8001060:	605a      	str	r2, [r3, #4]
	effects_io_port.in3_i32 = input_i2s_buffer_au32[IN3_ADC_NUM]<<8;
 8001062:	6862      	ldr	r2, [r4, #4]
 8001064:	0212      	lsls	r2, r2, #8
 8001066:	609a      	str	r2, [r3, #8]
	effects_io_port.in4_i32 = input_i2s_buffer_au32[IN4_ADC_NUM]<<8;
 8001068:	6822      	ldr	r2, [r4, #0]

//	SCB_CleanDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));

}
 800106a:	f85d 4b04 	ldr.w	r4, [sp], #4
	effects_io_port.in4_i32 = input_i2s_buffer_au32[IN4_ADC_NUM]<<8;
 800106e:	0212      	lsls	r2, r2, #8
 8001070:	60da      	str	r2, [r3, #12]
}
 8001072:	4770      	bx	lr
 8001074:	24000864 	.word	0x24000864
 8001078:	24000865 	.word	0x24000865
 800107c:	2400a53c 	.word	0x2400a53c
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	2400a50c 	.word	0x2400a50c

08001088 <Do_PitchShift>:

	float inSampleF = (float)inSample;
	float outSampleF =
			a0 * inSampleF
			+ a1 * hp_in_z1
			+ a2 * hp_in_z2
 8001088:	4975      	ldr	r1, [pc, #468]	; (8001260 <Do_PitchShift+0x1d8>)
				a0 = 0.91157503;
 800108a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001264 <Do_PitchShift+0x1dc>
			+ a2 * hp_in_z2
 800108e:	edd1 7a00 	vldr	s15, [r1]
			+ a1 * hp_in_z1
 8001092:	4b75      	ldr	r3, [pc, #468]	; (8001268 <Do_PitchShift+0x1e0>)
			+ a2 * hp_in_z2
 8001094:	ee67 7a87 	vmul.f32	s15, s15, s14
				a1 = -1.82315007;
 8001098:	ed9f 6a74 	vldr	s12, [pc, #464]	; 800126c <Do_PitchShift+0x1e4>
			+ a1 * hp_in_z1
 800109c:	ed93 5a00 	vldr	s10, [r3]
				b1 = -1.81531792;
 80010a0:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001270 <Do_PitchShift+0x1e8>
 80010a4:	eee5 7a06 	vfma.f32	s15, s10, s12
			- b1 * hp_out_z1
			- b2 * hp_out_z2;
 80010a8:	4a72      	ldr	r2, [pc, #456]	; (8001274 <Do_PitchShift+0x1ec>)
				b2 = 0.83098222;
 80010aa:	eddf 5a73 	vldr	s11, [pc, #460]	; 8001278 <Do_PitchShift+0x1f0>
 80010ae:	ed92 4a00 	vldr	s8, [r2]
	hp_out_z1 = outSampleF;

	return (int) outSampleF;
}
float Shift = 0.5;//1.189207115002721;
int Do_PitchShift(int sample) {
 80010b2:	b4f0      	push	{r4, r5, r6, r7}
			- b1 * hp_out_z1
 80010b4:	4d71      	ldr	r5, [pc, #452]	; (800127c <Do_PitchShift+0x1f4>)
	hp_in_z2 = hp_in_z1;
 80010b6:	ed81 5a00 	vstr	s10, [r1]
	float inSampleF = (float)inSample;
 80010ba:	ee05 0a10 	vmov	s10, r0
			- b1 * hp_out_z1
 80010be:	edd5 4a00 	vldr	s9, [r5]
	float inSampleF = (float)inSample;
 80010c2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
//	 sum = sample;
	//sum up and do high-pass


	//write to ringbuffer
	Buf[WtrP] = sample;
 80010c6:	496e      	ldr	r1, [pc, #440]	; (8001280 <Do_PitchShift+0x1f8>)
 80010c8:	eee4 7ae6 	vfms.f32	s15, s9, s13
	hp_out_z2 = hp_out_z1;
 80010cc:	edc2 4a00 	vstr	s9, [r2]
	Buf[WtrP] = sample;
 80010d0:	4a6c      	ldr	r2, [pc, #432]	; (8001284 <Do_PitchShift+0x1fc>)
	hp_in_z1 = inSampleF;
 80010d2:	ed83 5a00 	vstr	s10, [r3]
	Buf[WtrP] = sample;
 80010d6:	680b      	ldr	r3, [r1, #0]
				b1 = -1.81531792;
 80010d8:	4c6b      	ldr	r4, [pc, #428]	; (8001288 <Do_PitchShift+0x200>)
	Buf[WtrP] = sample;
 80010da:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80010de:	eee4 7a65 	vfms.f32	s15, s8, s11
				b2 = 0.83098222;
 80010e2:	486a      	ldr	r0, [pc, #424]	; (800128c <Do_PitchShift+0x204>)
				b1 = -1.81531792;
 80010e4:	edc4 6a00 	vstr	s13, [r4]
				b2 = 0.83098222;
 80010e8:	edc0 5a00 	vstr	s11, [r0]
				a0 = 0.91157503;
 80010ec:	4868      	ldr	r0, [pc, #416]	; (8001290 <Do_PitchShift+0x208>)

	//read fractional readpointer and generate 0° and 180° read-pointer in integer
	int RdPtr_Int = roundf(Rd_P);
 80010ee:	4c69      	ldr	r4, [pc, #420]	; (8001294 <Do_PitchShift+0x20c>)
				a0 = 0.91157503;
 80010f0:	ed80 7a00 	vstr	s14, [r0]
	float outSampleF =
 80010f4:	eee5 7a07 	vfma.f32	s15, s10, s14
				a1 = -1.82315007;
 80010f8:	4867      	ldr	r0, [pc, #412]	; (8001298 <Do_PitchShift+0x210>)
	int RdPtr_Int = roundf(Rd_P);
 80010fa:	edd4 6a00 	vldr	s13, [r4]
				a1 = -1.82315007;
 80010fe:	ed80 6a00 	vstr	s12, [r0]
				a2 = 0.91157503;
 8001102:	4866      	ldr	r0, [pc, #408]	; (800129c <Do_PitchShift+0x214>)
	int RdPtr_Int = roundf(Rd_P);
 8001104:	fef8 6a66 	vrinta.f32	s13, s13
 8001108:	eefd 6ae6 	vcvt.s32.f32	s13, s13
				a2 = 0.91157503;
 800110c:	ed80 7a00 	vstr	s14, [r0]
	hp_out_z1 = outSampleF;
 8001110:	edc5 7a00 	vstr	s15, [r5]
	int RdPtr_Int2 = 0;
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 8001114:	4d62      	ldr	r5, [pc, #392]	; (80012a0 <Do_PitchShift+0x218>)
	int RdPtr_Int = roundf(Rd_P);
 8001116:	ee16 3a90 	vmov	r3, s13
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 800111a:	6828      	ldr	r0, [r5, #0]
 800111c:	2800      	cmp	r0, #0
 800111e:	bfb8      	it	lt
 8001120:	3001      	addlt	r0, #1
 8001122:	ebb3 0f60 	cmp.w	r3, r0, asr #1
 8001126:	6828      	ldr	r0, [r5, #0]
 8001128:	f2c0 8082 	blt.w	8001230 <Do_PitchShift+0x1a8>
 800112c:	2800      	cmp	r0, #0
 800112e:	bfb8      	it	lt
 8001130:	3001      	addlt	r0, #1
 8001132:	eba3 0060 	sub.w	r0, r3, r0, asr #1
	else RdPtr_Int2 = RdPtr_Int + (BufSize/2);

	//read the two samples...
	float Rd0 = (float) Buf[RdPtr_Int];
 8001136:	eb02 0683 	add.w	r6, r2, r3, lsl #2
	float Rd1 = (float) Buf[RdPtr_Int2];
 800113a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	float Rd0 = (float) Buf[RdPtr_Int];
 800113e:	ed96 7a00 	vldr	s14, [r6]
	float Rd1 = (float) Buf[RdPtr_Int2];
 8001142:	ed92 6a00 	vldr	s12, [r2]

	//Check if first readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to second read-pointer
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8001146:	4e57      	ldr	r6, [pc, #348]	; (80012a4 <Do_PitchShift+0x21c>)
	float Rd0 = (float) Buf[RdPtr_Int];
 8001148:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 800114c:	680a      	ldr	r2, [r1, #0]
	float Rd1 = (float) Buf[RdPtr_Int2];
 800114e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8001152:	6837      	ldr	r7, [r6, #0]
 8001154:	1ad2      	subs	r2, r2, r3
 8001156:	42ba      	cmp	r2, r7
 8001158:	dc60      	bgt.n	800121c <Do_PitchShift+0x194>
 800115a:	680a      	ldr	r2, [r1, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	db5d      	blt.n	800121c <Do_PitchShift+0x194>
 8001160:	4a51      	ldr	r2, [pc, #324]	; (80012a8 <Do_PitchShift+0x220>)
 8001162:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001166:	edd2 5a00 	vldr	s11, [r2]
 800116a:	eef4 5a67 	vcmp.f32	s11, s15
 800116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001172:	d056      	beq.n	8001222 <Do_PitchShift+0x19a>
		int rel = WtrP-RdPtr_Int;
 8001174:	680a      	ldr	r2, [r1, #0]
		CrossFade = ((float)rel)/(float)Overlap;
 8001176:	edd6 6a00 	vldr	s13, [r6]
		int rel = WtrP-RdPtr_Int;
 800117a:	1ad2      	subs	r2, r2, r3
		CrossFade = ((float)rel)/(float)Overlap;
 800117c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001180:	ee07 2a90 	vmov	s15, r2
 8001184:	4a49      	ldr	r2, [pc, #292]	; (80012ac <Do_PitchShift+0x224>)
 8001186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800118a:	ee87 5aa6 	vdiv.f32	s10, s15, s13
 800118e:	ed82 5a00 	vstr	s10, [r2]
	}
	else if (WtrP-RdPtr_Int == 0) CrossFade = 0.0f;

	//Check if second readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to first read-pointer
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 8001192:	680b      	ldr	r3, [r1, #0]
 8001194:	6837      	ldr	r7, [r6, #0]
 8001196:	1a1b      	subs	r3, r3, r0
 8001198:	42bb      	cmp	r3, r7
 800119a:	dc09      	bgt.n	80011b0 <Do_PitchShift+0x128>
 800119c:	680b      	ldr	r3, [r1, #0]
 800119e:	4283      	cmp	r3, r0
 80011a0:	db06      	blt.n	80011b0 <Do_PitchShift+0x128>
 80011a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80011a6:	eef4 5a67 	vcmp.f32	s11, s15
 80011aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ae:	d145      	bne.n	800123c <Do_PitchShift+0x1b4>
			int rel = WtrP-RdPtr_Int2;
			CrossFade = 1.0f - ((float)rel)/(float)Overlap;
		}
	else if (WtrP-RdPtr_Int2 == 0) CrossFade = 1.0f;
 80011b0:	680b      	ldr	r3, [r1, #0]
 80011b2:	4283      	cmp	r3, r0
 80011b4:	d102      	bne.n	80011bc <Do_PitchShift+0x134>
 80011b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011ba:	6013      	str	r3, [r2, #0]


	//do cross-fading and sum up
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 80011bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80011c0:	ed92 5a00 	vldr	s10, [r2]
 80011c4:	edd2 4a00 	vldr	s9, [r2]

	//increment fractional read-pointer and write-pointer
	Rd_P += Shift;
 80011c8:	edd4 6a00 	vldr	s13, [r4]
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 80011cc:	ee77 7ae4 	vsub.f32	s15, s15, s9
	Rd_P += Shift;
 80011d0:	ee76 6aa5 	vadd.f32	s13, s13, s11
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 80011d4:	ee67 7a86 	vmul.f32	s15, s15, s12
	Rd_P += Shift;
 80011d8:	edc4 6a00 	vstr	s13, [r4]
	WtrP++;
 80011dc:	680b      	ldr	r3, [r1, #0]
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 80011de:	eee5 7a07 	vfma.f32	s15, s10, s14
	WtrP++;
 80011e2:	3301      	adds	r3, #1
 80011e4:	600b      	str	r3, [r1, #0]
	if (WtrP == BufSize) WtrP = 0;
 80011e6:	680a      	ldr	r2, [r1, #0]
 80011e8:	682b      	ldr	r3, [r5, #0]
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 80011ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	if (WtrP == BufSize) WtrP = 0;
 80011ee:	429a      	cmp	r2, r3
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 80011f0:	ee17 0a90 	vmov	r0, s15
	if (WtrP == BufSize) WtrP = 0;
 80011f4:	d101      	bne.n	80011fa <Do_PitchShift+0x172>
 80011f6:	2300      	movs	r3, #0
 80011f8:	600b      	str	r3, [r1, #0]
	if (roundf(Rd_P) >= BufSize) Rd_P = 0.0f;
 80011fa:	ed94 7a00 	vldr	s14, [r4]
 80011fe:	edd5 7a00 	vldr	s15, [r5]
 8001202:	feb8 7a47 	vrinta.f32	s14, s14
 8001206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	db01      	blt.n	8001218 <Do_PitchShift+0x190>
 8001214:	2300      	movs	r3, #0
 8001216:	6023      	str	r3, [r4, #0]

	return sum;
}
 8001218:	bcf0      	pop	{r4, r5, r6, r7}
 800121a:	4770      	bx	lr
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 800121c:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <Do_PitchShift+0x220>)
 800121e:	edd2 5a00 	vldr	s11, [r2]
	else if (WtrP-RdPtr_Int == 0) CrossFade = 0.0f;
 8001222:	680a      	ldr	r2, [r1, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	4a21      	ldr	r2, [pc, #132]	; (80012ac <Do_PitchShift+0x224>)
 8001228:	d1b3      	bne.n	8001192 <Do_PitchShift+0x10a>
 800122a:	2300      	movs	r3, #0
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e7b0      	b.n	8001192 <Do_PitchShift+0x10a>
	else RdPtr_Int2 = RdPtr_Int + (BufSize/2);
 8001230:	2800      	cmp	r0, #0
 8001232:	bfb8      	it	lt
 8001234:	3001      	addlt	r0, #1
 8001236:	eb03 0060 	add.w	r0, r3, r0, asr #1
 800123a:	e77c      	b.n	8001136 <Do_PitchShift+0xae>
			int rel = WtrP-RdPtr_Int2;
 800123c:	680b      	ldr	r3, [r1, #0]
			CrossFade = 1.0f - ((float)rel)/(float)Overlap;
 800123e:	ed96 5a00 	vldr	s10, [r6]
			int rel = WtrP-RdPtr_Int2;
 8001242:	1a1b      	subs	r3, r3, r0
			CrossFade = 1.0f - ((float)rel)/(float)Overlap;
 8001244:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8001248:	ee06 3a90 	vmov	s13, r3
 800124c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001250:	eec6 4a85 	vdiv.f32	s9, s13, s10
 8001254:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8001258:	edc2 7a00 	vstr	s15, [r2]
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 800125c:	e7ae      	b.n	80011bc <Do_PitchShift+0x134>
 800125e:	bf00      	nop
 8001260:	2400a530 	.word	0x2400a530
 8001264:	3f695cfb 	.word	0x3f695cfb
 8001268:	2400a52c 	.word	0x2400a52c
 800126c:	bfe95cfb 	.word	0xbfe95cfb
 8001270:	bfe85c56 	.word	0xbfe85c56
 8001274:	2400a538 	.word	0x2400a538
 8001278:	3f54bb40 	.word	0x3f54bb40
 800127c:	2400a534 	.word	0x2400a534
 8001280:	2400a4b4 	.word	0x2400a4b4
 8001284:	24000868 	.word	0x24000868
 8001288:	2400a4c4 	.word	0x2400a4c4
 800128c:	2400a4c8 	.word	0x2400a4c8
 8001290:	2400a4b8 	.word	0x2400a4b8
 8001294:	2400a4b0 	.word	0x2400a4b0
 8001298:	2400a4bc 	.word	0x2400a4bc
 800129c:	2400a4c0 	.word	0x2400a4c0
 80012a0:	24000398 	.word	0x24000398
 80012a4:	2400039c 	.word	0x2400039c
 80012a8:	240003a0 	.word	0x240003a0
 80012ac:	2400a4a8 	.word	0x2400a4a8

080012b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b510      	push	{r4, lr}
 80012b2:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b4:	224c      	movs	r2, #76	; 0x4c
 80012b6:	2100      	movs	r1, #0
 80012b8:	a80a      	add	r0, sp, #40	; 0x28
 80012ba:	f009 f9e4 	bl	800a686 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012be:	2220      	movs	r2, #32
 80012c0:	2100      	movs	r1, #0
 80012c2:	a802      	add	r0, sp, #8
 80012c4:	f009 f9df 	bl	800a686 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80012c8:	2002      	movs	r0, #2
 80012ca:	f003 fc37 	bl	8004b3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012ce:	4a22      	ldr	r2, [pc, #136]	; (8001358 <SystemClock_Config+0xa8>)
 80012d0:	2300      	movs	r3, #0
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	6993      	ldr	r3, [r2, #24]
 80012d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	6993      	ldr	r3, [r2, #24]
 80012de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012e6:	6993      	ldr	r3, [r2, #24]
 80012e8:	049b      	lsls	r3, r3, #18
 80012ea:	d5fc      	bpl.n	80012e6 <SystemClock_Config+0x36>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ec:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012ee:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 44;
  RCC_OscInitStruct.PLL.PLLP = 1;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012f0:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012f4:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 1;
 80012f6:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012f8:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLM = 2;
 80012fa:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012fc:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80012fe:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8001350 <SystemClock_Config+0xa0>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001302:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001306:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLN = 44;
 800130a:	232c      	movs	r3, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800130c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001310:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001312:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	f003 fcc3 	bl	8004ca0 <HAL_RCC_OscConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	b108      	cbz	r0, 8001322 <SystemClock_Config+0x72>
  __ASM volatile ("cpsid i" : : : "memory");
 800131e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001322:	243f      	movs	r4, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001324:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001326:	2240      	movs	r2, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800132a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800132e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001330:	e9cd 4102 	strd	r4, r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001334:	2408      	movs	r4, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001336:	e9cd 2206 	strd	r2, r2, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800133a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800133c:	e9cd 3208 	strd	r3, r2, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001340:	f003 fffc 	bl	800533c <HAL_RCC_ClockConfig>
 8001344:	b108      	cbz	r0, 800134a <SystemClock_Config+0x9a>
 8001346:	b672      	cpsid	i
  while (1)
 8001348:	e7fe      	b.n	8001348 <SystemClock_Config+0x98>
}
 800134a:	b01e      	add	sp, #120	; 0x78
 800134c:	bd10      	pop	{r4, pc}
 800134e:	bf00      	nop
 8001350:	00000021 	.word	0x00000021
 8001354:	00010000 	.word	0x00010000
 8001358:	58024800 	.word	0x58024800
 800135c:	00000000 	.word	0x00000000

08001360 <PeriphCommonClock_Config>:
{
 8001360:	b500      	push	{lr}
 8001362:	b0af      	sub	sp, #188	; 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001364:	22b0      	movs	r2, #176	; 0xb0
 8001366:	2100      	movs	r1, #0
 8001368:	a802      	add	r0, sp, #8
 800136a:	f009 f98c 	bl	800a686 <memset>
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 800136e:	2302      	movs	r3, #2
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 8001370:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8001374:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 8001376:	220f      	movs	r2, #15
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001378:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800137a:	930c      	str	r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 800137c:	920b      	str	r2, [sp, #44]	; 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 800137e:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001380:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8001382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001386:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80013b0 <PeriphCommonClock_Config+0x50>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 800138a:	e9cd 0100 	strd	r0, r1, [sp]
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 800138e:	f640 3186 	movw	r1, #2950	; 0xb86
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001392:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001394:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 8001398:	9111      	str	r1, [sp, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 800139a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139e:	f004 fa71 	bl	8005884 <HAL_RCCEx_PeriphCLKConfig>
 80013a2:	b108      	cbz	r0, 80013a8 <PeriphCommonClock_Config+0x48>
 80013a4:	b672      	cpsid	i
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <PeriphCommonClock_Config+0x46>
}
 80013a8:	b02f      	add	sp, #188	; 0xbc
 80013aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80013ae:	bf00      	nop
 80013b0:	00000002 	.word	0x00000002
 80013b4:	00000c00 	.word	0x00000c00

080013b8 <main>:
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80013b8:	4a69      	ldr	r2, [pc, #420]	; (8001560 <main+0x1a8>)
 80013ba:	6953      	ldr	r3, [r2, #20]
 80013bc:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
{
 80013c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013c4:	d111      	bne.n	80013ea <main+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 80013c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013ca:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80013ce:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80013d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013d6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80013da:	6953      	ldr	r3, [r2, #20]
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013e6:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80013ea:	485d      	ldr	r0, [pc, #372]	; (8001560 <main+0x1a8>)
 80013ec:	6943      	ldr	r3, [r0, #20]
 80013ee:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80013f2:	d124      	bne.n	800143e <main+0x86>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80013f4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80013f8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80013fc:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001400:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001404:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001408:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 800140c:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800140e:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001412:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001414:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8001418:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800141a:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	d1f8      	bne.n	8001414 <main+0x5c>
    } while(sets-- != 0U);
 8001422:	3c20      	subs	r4, #32
 8001424:	f114 0f20 	cmn.w	r4, #32
 8001428:	d1f1      	bne.n	800140e <main+0x56>
 800142a:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800142e:	6943      	ldr	r3, [r0, #20]
 8001430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001434:	6143      	str	r3, [r0, #20]
 8001436:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800143a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800143e:	f000 fc3f 	bl	8001cc0 <HAL_Init>
  SystemClock_Config();
 8001442:	f7ff ff35 	bl	80012b0 <SystemClock_Config>
  PeriphCommonClock_Config();
 8001446:	f7ff ff8b 	bl	8001360 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 800144a:	f7ff f997 	bl	800077c <MX_GPIO_Init>
  MX_DMA_Init();
 800144e:	f7ff f869 	bl	8000524 <MX_DMA_Init>
  MX_SAI1_Init();
 8001452:	f000 f97d 	bl	8001750 <MX_SAI1_Init>
  MX_SPI1_Init();
 8001456:	f000 fa6d 	bl	8001934 <MX_SPI1_Init>
  MX_FMC_Init();
 800145a:	f7ff f895 	bl	8000588 <MX_FMC_Init>
  MX_OCTOSPI1_Init();
 800145e:	f000 f89f 	bl	80015a0 <MX_OCTOSPI1_Init>
  MX_USB_DEVICE_Init();
 8001462:	f008 f9f5 	bl	8009850 <MX_USB_DEVICE_Init>
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, output_i2s_buffer_au32, 	16);
 8001466:	2210      	movs	r2, #16
 8001468:	493e      	ldr	r1, [pc, #248]	; (8001564 <main+0x1ac>)
 800146a:	483f      	ldr	r0, [pc, #252]	; (8001568 <main+0x1b0>)
 800146c:	f005 fdba 	bl	8006fe4 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, input_i2s_buffer_au32, 	16);
 8001470:	2210      	movs	r2, #16
 8001472:	493e      	ldr	r1, [pc, #248]	; (800156c <main+0x1b4>)
 8001474:	483e      	ldr	r0, [pc, #248]	; (8001570 <main+0x1b8>)
 8001476:	f005 fe49 	bl	800710c <HAL_SAI_Receive_DMA>
	ad1939_init(&hspi1);
 800147a:	483e      	ldr	r0, [pc, #248]	; (8001574 <main+0x1bc>)
 800147c:	f7fe ff98 	bl	80003b0 <ad1939_init>
	init_guitar_effect_delay(&delay_effect);
 8001480:	483d      	ldr	r0, [pc, #244]	; (8001578 <main+0x1c0>)
 8001482:	f7ff facb 	bl	8000a1c <init_guitar_effect_delay>
	init_guitar_effect_octave(&octave_effects_st);
 8001486:	483d      	ldr	r0, [pc, #244]	; (800157c <main+0x1c4>)
 8001488:	f7ff fc7c 	bl	8000d84 <init_guitar_effect_octave>
	HAL_GPIO_WritePin(FSW_LED1_GPIO_Port, FSW_LED1_Pin, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001492:	483b      	ldr	r0, [pc, #236]	; (8001580 <main+0x1c8>)
 8001494:	f001 fe52 	bl	800313c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FSW_LED2_GPIO_Port, FSW_LED2_Pin, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800149e:	4838      	ldr	r0, [pc, #224]	; (8001580 <main+0x1c8>)
 80014a0:	f001 fe4c 	bl	800313c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FSW_LED3_GPIO_Port, FSW_LED3_Pin, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014aa:	4835      	ldr	r0, [pc, #212]	; (8001580 <main+0x1c8>)
 80014ac:	f001 fe46 	bl	800313c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FSW_LED4_GPIO_Port, FSW_LED4_Pin, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b6:	4833      	ldr	r0, [pc, #204]	; (8001584 <main+0x1cc>)
 80014b8:	f001 fe40 	bl	800313c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FSW_LED1_GPIO_Port, FSW_LED1_Pin, 1);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c2:	482f      	ldr	r0, [pc, #188]	; (8001580 <main+0x1c8>)
 80014c4:	f001 fe3a 	bl	800313c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FSW_LED2_GPIO_Port, FSW_LED2_Pin, 1);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ce:	482c      	ldr	r0, [pc, #176]	; (8001580 <main+0x1c8>)
 80014d0:	f001 fe34 	bl	800313c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FSW_LED3_GPIO_Port, FSW_LED3_Pin, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014da:	4829      	ldr	r0, [pc, #164]	; (8001580 <main+0x1c8>)
 80014dc:	f001 fe2e 	bl	800313c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FSW_LED4_GPIO_Port, FSW_LED4_Pin, 1);
 80014e0:	2201      	movs	r2, #1
 80014e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e6:	4827      	ldr	r0, [pc, #156]	; (8001584 <main+0x1cc>)
 80014e8:	f001 fe28 	bl	800313c <HAL_GPIO_WritePin>
 80014ec:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
		*(__IO uint32_t*) (0xC0000000 + 4*i) = 0x0A000B00;
 80014f0:	4925      	ldr	r1, [pc, #148]	; (8001588 <main+0x1d0>)
	for(int i = 0; i<100;i++){
 80014f2:	4a26      	ldr	r2, [pc, #152]	; (800158c <main+0x1d4>)
		*(__IO uint32_t*) (0xC0000000 + 4*i) = 0x0A000B00;
 80014f4:	f843 1b04 	str.w	r1, [r3], #4
	for(int i = 0; i<100;i++){
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d1fb      	bne.n	80014f4 <main+0x13c>
 80014fc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001598 <main+0x1e0>
		  ADC_READY_FLAG = 0;
 8001500:	f04f 0900 	mov.w	r9, #0
 8001504:	4d22      	ldr	r5, [pc, #136]	; (8001590 <main+0x1d8>)
 8001506:	4c23      	ldr	r4, [pc, #140]	; (8001594 <main+0x1dc>)
		  out = octave_effects_st.callback(&octave_effects_st,effects_io_port.in1_i32/2);
 8001508:	f5a8 5680 	sub.w	r6, r8, #4096	; 0x1000
 800150c:	4f1a      	ldr	r7, [pc, #104]	; (8001578 <main+0x1c0>)
	  if(ADC_READY_FLAG){
 800150e:	782b      	ldrb	r3, [r5, #0]
		  out = octave_effects_st.callback(&octave_effects_st,effects_io_port.in1_i32/2);
 8001510:	4630      	mov	r0, r6
	  if(ADC_READY_FLAG){
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0fb      	beq.n	800150e <main+0x156>
		  ADC_READY_FLAG = 0;
 8001516:	f885 9000 	strb.w	r9, [r5]
	  	  effects_io_port.out2_i32 = effects_io_port.in2_i32;
 800151a:	6863      	ldr	r3, [r4, #4]
 800151c:	6163      	str	r3, [r4, #20]
	  	  effects_io_port.out3_i32 = effects_io_port.in3_i32;
 800151e:	68a3      	ldr	r3, [r4, #8]
 8001520:	61a3      	str	r3, [r4, #24]
	  	  effects_io_port.out4_i32 = effects_io_port.in4_i32;
 8001522:	68e3      	ldr	r3, [r4, #12]
 8001524:	61e3      	str	r3, [r4, #28]
		  out = octave_effects_st.callback(&octave_effects_st,effects_io_port.in1_i32/2);
 8001526:	6821      	ldr	r1, [r4, #0]
 8001528:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 800152c:	2900      	cmp	r1, #0
 800152e:	bfb8      	it	lt
 8001530:	3101      	addlt	r1, #1
 8001532:	1049      	asrs	r1, r1, #1
 8001534:	4798      	blx	r3
		  out  = Do_PitchShift(effects_io_port.in1_i32/2) + effects_io_port.in1_i32 + out;
 8001536:	6823      	ldr	r3, [r4, #0]
		  out = octave_effects_st.callback(&octave_effects_st,effects_io_port.in1_i32/2);
 8001538:	4682      	mov	sl, r0
		  out  = Do_PitchShift(effects_io_port.in1_i32/2) + effects_io_port.in1_i32 + out;
 800153a:	2b00      	cmp	r3, #0
 800153c:	bfb8      	it	lt
 800153e:	3301      	addlt	r3, #1
 8001540:	1058      	asrs	r0, r3, #1
 8001542:	f7ff fda1 	bl	8001088 <Do_PitchShift>
 8001546:	6822      	ldr	r2, [r4, #0]
 8001548:	4601      	mov	r1, r0
		  effects_io_port.out1_i32 = delay_effect.callback(&delay_effect,out);
 800154a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800154c:	4638      	mov	r0, r7
		  out  = Do_PitchShift(effects_io_port.in1_i32/2) + effects_io_port.in1_i32 + out;
 800154e:	4411      	add	r1, r2
		  effects_io_port.out1_i32 = delay_effect.callback(&delay_effect,out);
 8001550:	4451      	add	r1, sl
 8001552:	4798      	blx	r3
 8001554:	6120      	str	r0, [r4, #16]
	  if(ADC_READY_FLAG){
 8001556:	782b      	ldrb	r3, [r5, #0]
		  out = octave_effects_st.callback(&octave_effects_st,effects_io_port.in1_i32/2);
 8001558:	4630      	mov	r0, r6
	  if(ADC_READY_FLAG){
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0d7      	beq.n	800150e <main+0x156>
 800155e:	e7da      	b.n	8001516 <main+0x15e>
 8001560:	e000ed00 	.word	0xe000ed00
 8001564:	2400b628 	.word	0x2400b628
 8001568:	2400b7b8 	.word	0x2400b7b8
 800156c:	2400a53c 	.word	0x2400a53c
 8001570:	2400b850 	.word	0x2400b850
 8001574:	2400b8e8 	.word	0x2400b8e8
 8001578:	2400a4cc 	.word	0x2400a4cc
 800157c:	2400a57c 	.word	0x2400a57c
 8001580:	58020000 	.word	0x58020000
 8001584:	58020800 	.word	0x58020800
 8001588:	0a000b00 	.word	0x0a000b00
 800158c:	c0000190 	.word	0xc0000190
 8001590:	24000865 	.word	0x24000865
 8001594:	2400a50c 	.word	0x2400a50c
 8001598:	2400b57c 	.word	0x2400b57c

0800159c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
  while (1)
 800159e:	e7fe      	b.n	800159e <Error_Handler+0x2>

080015a0 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80015a0:	b510      	push	{r4, lr}
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80015a2:	481f      	ldr	r0, [pc, #124]	; (8001620 <MX_OCTOSPI1_Init+0x80>)
  hospi1.Init.FifoThreshold = 4;
 80015a4:	2204      	movs	r2, #4
  hospi1.Instance = OCTOSPI1;
 80015a6:	4c1f      	ldr	r4, [pc, #124]	; (8001624 <MX_OCTOSPI1_Init+0x84>)
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
  hospi1.Init.DeviceSize = 24;
 80015a8:	2118      	movs	r1, #24
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80015aa:	2300      	movs	r3, #0
{
 80015ac:	b086      	sub	sp, #24
  hospi1.Init.DeviceSize = 24;
 80015ae:	6101      	str	r1, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 1;
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
  hospi1.Init.ClockPrescaler = 4;
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80015b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hospi1.Init.ClockPrescaler = 4;
 80015b4:	6242      	str	r2, [r0, #36]	; 0x24
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	9305      	str	r3, [sp, #20]
  hospi1.Init.FifoThreshold = 4;
 80015ba:	e9c0 4200 	strd	r4, r2, [r0]
  hospi1.Init.ChipSelectHighTime = 1;
 80015be:	2401      	movs	r4, #1
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
  hospi1.Init.ChipSelectBoundary = 0;
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80015c0:	2208      	movs	r2, #8
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80015c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hospi1.Init.ChipSelectHighTime = 1;
 80015c6:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80015ca:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80015ce:	e9c0 130a 	strd	r1, r3, [r0, #40]	; 0x28
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80015d2:	e9c0 320c 	strd	r3, r2, [r0, #48]	; 0x30
  hospi1.Init.MaxTran = 0;
  hospi1.Init.Refresh = 0;
 80015d6:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80015da:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80015de:	e9cd 3303 	strd	r3, r3, [sp, #12]
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80015e2:	f001 fdaf 	bl	8003144 <HAL_OSPI_Init>
 80015e6:	b970      	cbnz	r0, 8001606 <MX_OCTOSPI1_Init+0x66>
  {
    Error_Handler();
  }
  sOspiManagerCfg.ClkPort = 1;
 80015e8:	2301      	movs	r3, #1
  sOspiManagerCfg.NCSPort = 1;
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4669      	mov	r1, sp
 80015f0:	480b      	ldr	r0, [pc, #44]	; (8001620 <MX_OCTOSPI1_Init+0x80>)
  sOspiManagerCfg.ClkPort = 1;
 80015f2:	9300      	str	r3, [sp, #0]
  sOspiManagerCfg.NCSPort = 1;
 80015f4:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8001618 <MX_OCTOSPI1_Init+0x78>
 80015f8:	ed8d 7b02 	vstr	d7, [sp, #8]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015fc:	f001 fe20 	bl	8003240 <HAL_OSPIM_Config>
 8001600:	b920      	cbnz	r0, 800160c <MX_OCTOSPI1_Init+0x6c>
//	sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
//
//	HAL_OSPI_Command(&hospi1, &sCommand, 1000);
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001602:	b006      	add	sp, #24
 8001604:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001606:	f7ff ffc9 	bl	800159c <Error_Handler>
 800160a:	e7ed      	b.n	80015e8 <MX_OCTOSPI1_Init+0x48>
    Error_Handler();
 800160c:	f7ff ffc6 	bl	800159c <Error_Handler>
}
 8001610:	b006      	add	sp, #24
 8001612:	bd10      	pop	{r4, pc}
 8001614:	f3af 8000 	nop.w
 8001618:	00000001 	.word	0x00000001
 800161c:	00010001 	.word	0x00010001
 8001620:	2400b668 	.word	0x2400b668
 8001624:	52005000 	.word	0x52005000

08001628 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8001628:	b570      	push	{r4, r5, r6, lr}
 800162a:	b0b8      	sub	sp, #224	; 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	2100      	movs	r1, #0
{
 800162e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001630:	22b8      	movs	r2, #184	; 0xb8
 8001632:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	9108      	str	r1, [sp, #32]
 8001636:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800163a:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800163e:	f009 f822 	bl	800a686 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8001642:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <HAL_OSPI_MspInit+0x118>)
 8001644:	6822      	ldr	r2, [r4, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d001      	beq.n	800164e <HAL_OSPI_MspInit+0x26>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 800164a:	b038      	add	sp, #224	; 0xe0
 800164c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800164e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001652:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001654:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001656:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165a:	f004 f913 	bl	8005884 <HAL_RCCEx_PeriphCLKConfig>
 800165e:	2800      	cmp	r0, #0
 8001660:	d165      	bne.n	800172e <HAL_OSPI_MspInit+0x106>
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_OSPI_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001664:	2004      	movs	r0, #4
 8001666:	2102      	movs	r1, #2
 8001668:	2400      	movs	r4, #0
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800166a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800166e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001670:	2609      	movs	r6, #9
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001672:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001676:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800167a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800167e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001682:	9200      	str	r2, [sp, #0]
 8001684:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001686:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800168a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800168e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001692:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001696:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800169a:	9201      	str	r2, [sp, #4]
 800169c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800169e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016a2:	f042 0210 	orr.w	r2, r2, #16
 80016a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016ae:	f002 0210 	and.w	r2, r2, #16
 80016b2:	9202      	str	r2, [sp, #8]
 80016b4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016ba:	f042 0220 	orr.w	r2, r2, #32
 80016be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80016c6:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c8:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016d0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d2:	a904      	add	r1, sp, #16
 80016d4:	481c      	ldr	r0, [pc, #112]	; (8001748 <HAL_OSPI_MspInit+0x120>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016d6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016dc:	f001 fc06 	bl	8002eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80016e0:	f44f 7250 	mov.w	r2, #832	; 0x340
 80016e4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016e6:	a904      	add	r1, sp, #16
 80016e8:	4818      	ldr	r0, [pc, #96]	; (800174c <HAL_OSPI_MspInit+0x124>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80016ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80016ee:	230a      	movs	r3, #10
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80016f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80016f4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016f6:	f001 fbf9 	bl	8002eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016fe:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001700:	a904      	add	r1, sp, #16
 8001702:	4812      	ldr	r0, [pc, #72]	; (800174c <HAL_OSPI_MspInit+0x124>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001704:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001706:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800170a:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800170e:	f001 fbed 	bl	8002eec <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8001712:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001714:	a904      	add	r1, sp, #16
 8001716:	480c      	ldr	r0, [pc, #48]	; (8001748 <HAL_OSPI_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8001718:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800171a:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8001738 <HAL_OSPI_MspInit+0x110>
 800171e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001722:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001726:	f001 fbe1 	bl	8002eec <HAL_GPIO_Init>
}
 800172a:	b038      	add	sp, #224	; 0xe0
 800172c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800172e:	f7ff ff35 	bl	800159c <Error_Handler>
 8001732:	e796      	b.n	8001662 <HAL_OSPI_MspInit+0x3a>
 8001734:	f3af 8000 	nop.w
 8001738:	00000800 	.word	0x00000800
 800173c:	00000002 	.word	0x00000002
 8001740:	52005000 	.word	0x52005000
 8001744:	58024400 	.word	0x58024400
 8001748:	58021000 	.word	0x58021000
 800174c:	58021400 	.word	0x58021400

08001750 <MX_SAI1_Init>:

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001750:	4818      	ldr	r0, [pc, #96]	; (80017b4 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001752:	2100      	movs	r1, #0
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001754:	f64b 3280 	movw	r2, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001758:	2308      	movs	r3, #8
{
 800175a:	b510      	push	{r4, lr}
  hsai_BlockA1.Instance = SAI1_Block_A;
 800175c:	4c16      	ldr	r4, [pc, #88]	; (80017b8 <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800175e:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001760:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001762:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001764:	e9c0 1207 	strd	r1, r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001768:	2202      	movs	r2, #2
  hsai_BlockA1.Instance = SAI1_Block_A;
 800176a:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800176e:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001772:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001776:	f005 fb91 	bl	8006e9c <HAL_SAI_InitProtocol>
 800177a:	b998      	cbnz	r0, 80017a4 <MX_SAI1_Init+0x54>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800177c:	480f      	ldr	r0, [pc, #60]	; (80017bc <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800177e:	2303      	movs	r3, #3
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001780:	4a0f      	ldr	r2, [pc, #60]	; (80017c0 <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001782:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001784:	2401      	movs	r4, #1
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001786:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001788:	6084      	str	r4, [r0, #8]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800178a:	61c1      	str	r1, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800178c:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800178e:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001790:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001794:	2308      	movs	r3, #8
 8001796:	2202      	movs	r2, #2
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001798:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 800179c:	f005 fb7e 	bl	8006e9c <HAL_SAI_InitProtocol>
 80017a0:	b918      	cbnz	r0, 80017aa <MX_SAI1_Init+0x5a>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80017a2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80017a4:	f7ff fefa 	bl	800159c <Error_Handler>
 80017a8:	e7e8      	b.n	800177c <MX_SAI1_Init+0x2c>
}
 80017aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80017ae:	f7ff bef5 	b.w	800159c <Error_Handler>
 80017b2:	bf00      	nop
 80017b4:	2400b7b8 	.word	0x2400b7b8
 80017b8:	40015804 	.word	0x40015804
 80017bc:	2400b850 	.word	0x2400b850
 80017c0:	40015824 	.word	0x40015824
 80017c4:	00000000 	.word	0x00000000

080017c8 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80017c8:	4a51      	ldr	r2, [pc, #324]	; (8001910 <HAL_SAI_MspInit+0x148>)
 80017ca:	6803      	ldr	r3, [r0, #0]
 80017cc:	4293      	cmp	r3, r2
{
 80017ce:	b530      	push	{r4, r5, lr}
 80017d0:	4604      	mov	r4, r0
 80017d2:	b089      	sub	sp, #36	; 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 80017d4:	d004      	beq.n	80017e0 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80017d6:	4a4f      	ldr	r2, [pc, #316]	; (8001914 <HAL_SAI_MspInit+0x14c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d03c      	beq.n	8001856 <HAL_SAI_MspInit+0x8e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 80017dc:	b009      	add	sp, #36	; 0x24
 80017de:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 80017e0:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <HAL_SAI_MspInit+0x150>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2a00      	cmp	r2, #0
 80017e6:	d07a      	beq.n	80018de <HAL_SAI_MspInit+0x116>
    SAI1_client ++;
 80017e8:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80017ea:	2070      	movs	r0, #112	; 0x70
 80017ec:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream0;
 80017ee:	4d4b      	ldr	r5, [pc, #300]	; (800191c <HAL_SAI_MspInit+0x154>)
    SAI1_client ++;
 80017f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80017f2:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80017f4:	ed9f 7b44 	vldr	d7, [pc, #272]	; 8001908 <HAL_SAI_MspInit+0x140>
 80017f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017fc:	a902      	add	r1, sp, #8
 80017fe:	4848      	ldr	r0, [pc, #288]	; (8001920 <HAL_SAI_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001800:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001802:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001806:	f001 fb71 	bl	8002eec <HAL_GPIO_Init>
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800180a:	2300      	movs	r3, #0
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800180c:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Instance = DMA1_Stream0;
 800180e:	4945      	ldr	r1, [pc, #276]	; (8001924 <HAL_SAI_MspInit+0x15c>)
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001810:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001812:	4628      	mov	r0, r5
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001814:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001816:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800181a:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800181e:	2240      	movs	r2, #64	; 0x40
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001820:	612b      	str	r3, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001822:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001826:	60aa      	str	r2, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800182c:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001834:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001838:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800183c:	f000 fbea 	bl	8002014 <HAL_DMA_Init>
 8001840:	2800      	cmp	r0, #0
 8001842:	d15a      	bne.n	80018fa <HAL_SAI_MspInit+0x132>
    if(saiHandle->Instance==SAI1_Block_B)
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	4a33      	ldr	r2, [pc, #204]	; (8001914 <HAL_SAI_MspInit+0x14c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001848:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(saiHandle->Instance==SAI1_Block_B)
 800184c:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 800184e:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001850:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
 8001854:	d1c2      	bne.n	80017dc <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 8001856:	4b30      	ldr	r3, [pc, #192]	; (8001918 <HAL_SAI_MspInit+0x150>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	b392      	cbz	r2, 80018c2 <HAL_SAI_MspInit+0xfa>
    SAI1_client ++;
 800185c:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800185e:	2008      	movs	r0, #8
 8001860:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA2_Stream0;
 8001862:	4d31      	ldr	r5, [pc, #196]	; (8001928 <HAL_SAI_MspInit+0x160>)
    SAI1_client ++;
 8001864:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001866:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001868:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8001908 <HAL_SAI_MspInit+0x140>
 800186c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001870:	a902      	add	r1, sp, #8
 8001872:	482b      	ldr	r0, [pc, #172]	; (8001920 <HAL_SAI_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001874:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001876:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800187a:	f001 fb37 	bl	8002eec <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA2_Stream0;
 800187e:	492b      	ldr	r1, [pc, #172]	; (800192c <HAL_SAI_MspInit+0x164>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8001880:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001882:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001884:	4628      	mov	r0, r5
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001886:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8001888:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800188c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001890:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001894:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001898:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800189c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a4:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018a8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80018ac:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80018ae:	f000 fbb1 	bl	8002014 <HAL_DMA_Init>
 80018b2:	bb28      	cbnz	r0, 8001900 <HAL_SAI_MspInit+0x138>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 80018b4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 80018b8:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 80018ba:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 80018be:	b009      	add	sp, #36	; 0x24
 80018c0:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 80018c2:	491b      	ldr	r1, [pc, #108]	; (8001930 <HAL_SAI_MspInit+0x168>)
 80018c4:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 80018c8:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80018cc:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 80018d0:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 80018d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80018d8:	9101      	str	r1, [sp, #4]
 80018da:	9901      	ldr	r1, [sp, #4]
 80018dc:	e7be      	b.n	800185c <HAL_SAI_MspInit+0x94>
       __HAL_RCC_SAI1_CLK_ENABLE();
 80018de:	4914      	ldr	r1, [pc, #80]	; (8001930 <HAL_SAI_MspInit+0x168>)
 80018e0:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 80018e4:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80018e8:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 80018ec:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 80018f0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80018f4:	9100      	str	r1, [sp, #0]
 80018f6:	9900      	ldr	r1, [sp, #0]
 80018f8:	e776      	b.n	80017e8 <HAL_SAI_MspInit+0x20>
      Error_Handler();
 80018fa:	f7ff fe4f 	bl	800159c <Error_Handler>
 80018fe:	e7a1      	b.n	8001844 <HAL_SAI_MspInit+0x7c>
      Error_Handler();
 8001900:	f7ff fe4c 	bl	800159c <Error_Handler>
 8001904:	e7d6      	b.n	80018b4 <HAL_SAI_MspInit+0xec>
 8001906:	bf00      	nop
	...
 8001910:	40015804 	.word	0x40015804
 8001914:	40015824 	.word	0x40015824
 8001918:	2400b6c4 	.word	0x2400b6c4
 800191c:	2400b6c8 	.word	0x2400b6c8
 8001920:	58021000 	.word	0x58021000
 8001924:	40020010 	.word	0x40020010
 8001928:	2400b740 	.word	0x2400b740
 800192c:	40020410 	.word	0x40020410
 8001930:	58024400 	.word	0x58024400

08001934 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001934:	4814      	ldr	r0, [pc, #80]	; (8001988 <MX_SPI1_Init+0x54>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001936:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 8001938:	4914      	ldr	r1, [pc, #80]	; (800198c <MX_SPI1_Init+0x58>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800193a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
{
 800193e:	b510      	push	{r4, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001940:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001944:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001948:	2407      	movs	r4, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800194a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
 800194e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001950:	e9c0 3205 	strd	r3, r2, [r0, #20]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001954:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001958:	e9c0 4303 	strd	r4, r3, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800195c:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001960:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001964:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001968:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800196c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001970:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001974:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001978:	f005 fd96 	bl	80074a8 <HAL_SPI_Init>
 800197c:	b900      	cbnz	r0, 8001980 <MX_SPI1_Init+0x4c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800197e:	bd10      	pop	{r4, pc}
 8001980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001984:	f7ff be0a 	b.w	800159c <Error_Handler>
 8001988:	2400b8e8 	.word	0x2400b8e8
 800198c:	40013000 	.word	0x40013000

08001990 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_SPI_MspInit+0xc8>)
 8001992:	6802      	ldr	r2, [r0, #0]
{
 8001994:	b570      	push	{r4, r5, r6, lr}
  if(spiHandle->Instance==SPI1)
 8001996:	429a      	cmp	r2, r3
{
 8001998:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f04f 0400 	mov.w	r4, #0
 800199e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80019a2:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80019a6:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 80019a8:	d001      	beq.n	80019ae <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019aa:	b00a      	add	sp, #40	; 0x28
 80019ac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_SPI_MspInit+0xcc>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019b0:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	482b      	ldr	r0, [pc, #172]	; (8001a60 <HAL_SPI_MspInit+0xd0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2602      	movs	r6, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019b6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80019ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80019be:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80019c2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80019c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019ca:	9200      	str	r2, [sp, #0]
 80019cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80019da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019de:	f002 0201 	and.w	r2, r2, #1
 80019e2:	9201      	str	r2, [sp, #4]
 80019e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019ea:	f042 0208 	orr.w	r2, r2, #8
 80019ee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80019f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019f6:	f002 0208 	and.w	r2, r2, #8
 80019fa:	9202      	str	r2, [sp, #8]
 80019fc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 8001a0a:	f248 0240 	movw	r2, #32832	; 0x8040
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a12:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 8001a1a:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a1c:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 8001a20:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f001 fa62 	bl	8002eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a28:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2a:	a904      	add	r1, sp, #16
 8001a2c:	480d      	ldr	r0, [pc, #52]	; (8001a64 <HAL_SPI_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a2e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a32:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	e9cd 6405 	strd	r6, r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a38:	f001 fa58 	bl	8002eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a40:	a904      	add	r1, sp, #16
 8001a42:	4809      	ldr	r0, [pc, #36]	; (8001a68 <HAL_SPI_MspInit+0xd8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a46:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a48:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	e9cd 4406 	strd	r4, r4, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a4e:	f001 fa4d 	bl	8002eec <HAL_GPIO_Init>
}
 8001a52:	b00a      	add	sp, #40	; 0x28
 8001a54:	bd70      	pop	{r4, r5, r6, pc}
 8001a56:	bf00      	nop
 8001a58:	40013000 	.word	0x40013000
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	58020000 	.word	0x58020000
 8001a64:	58020c00 	.word	0x58020c00
 8001a68:	58021800 	.word	0x58021800

08001a6c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_MspInit+0x20>)
{
 8001a6e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a70:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001a74:	f042 0202 	orr.w	r2, r2, #2
 8001a78:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a88:	b002      	add	sp, #8
 8001a8a:	4770      	bx	lr
 8001a8c:	58024400 	.word	0x58024400

08001a90 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a90:	e7fe      	b.n	8001a90 <NMI_Handler>
 8001a92:	bf00      	nop

08001a94 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <HardFault_Handler>
 8001a96:	bf00      	nop

08001a98 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler>
 8001a9a:	bf00      	nop

08001a9c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <BusFault_Handler>
 8001a9e:	bf00      	nop

08001aa0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <UsageFault_Handler>
 8001aa2:	bf00      	nop

08001aa4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <DebugMon_Handler>:
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <PendSV_Handler>:
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop

08001ab0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab0:	f000 b936 	b.w	8001d20 <HAL_IncTick>

08001ab4 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001ab4:	4801      	ldr	r0, [pc, #4]	; (8001abc <DMA1_Stream0_IRQHandler+0x8>)
 8001ab6:	f000 bec9 	b.w	800284c <HAL_DMA_IRQHandler>
 8001aba:	bf00      	nop
 8001abc:	2400b6c8 	.word	0x2400b6c8

08001ac0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001ac0:	4801      	ldr	r0, [pc, #4]	; (8001ac8 <DMA2_Stream0_IRQHandler+0x8>)
 8001ac2:	f000 bec3 	b.w	800284c <HAL_DMA_IRQHandler>
 8001ac6:	bf00      	nop
 8001ac8:	2400b740 	.word	0x2400b740

08001acc <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001acc:	4801      	ldr	r0, [pc, #4]	; (8001ad4 <OTG_HS_IRQHandler+0x8>)
 8001ace:	f002 b937 	b.w	8003d40 <HAL_PCD_IRQHandler>
 8001ad2:	bf00      	nop
 8001ad4:	2400bf54 	.word	0x2400bf54

08001ad8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	1e16      	subs	r6, r2, #0
 8001adc:	dd07      	ble.n	8001aee <_read+0x16>
 8001ade:	460c      	mov	r4, r1
 8001ae0:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001ae2:	f3af 8000 	nop.w
 8001ae6:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	42a5      	cmp	r5, r4
 8001aec:	d1f9      	bne.n	8001ae2 <_read+0xa>
  }

  return len;
}
 8001aee:	4630      	mov	r0, r6
 8001af0:	bd70      	pop	{r4, r5, r6, pc}
 8001af2:	bf00      	nop

08001af4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af4:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	1e16      	subs	r6, r2, #0
 8001af8:	dd07      	ble.n	8001b0a <_write+0x16>
 8001afa:	460c      	mov	r4, r1
 8001afc:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001afe:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001b02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b06:	42ac      	cmp	r4, r5
 8001b08:	d1f9      	bne.n	8001afe <_write+0xa>
  }
  return len;
}
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	bd70      	pop	{r4, r5, r6, pc}
 8001b0e:	bf00      	nop

08001b10 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop

08001b18 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8001b1c:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001b1e:	604b      	str	r3, [r1, #4]
}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop

08001b24 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001b24:	2001      	movs	r0, #1
 8001b26:	4770      	bx	lr

08001b28 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001b28:	2000      	movs	r0, #0
 8001b2a:	4770      	bx	lr

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b2e:	4c0d      	ldr	r4, [pc, #52]	; (8001b64 <_sbrk+0x38>)
{
 8001b30:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b32:	490d      	ldr	r1, [pc, #52]	; (8001b68 <_sbrk+0x3c>)
 8001b34:	4d0d      	ldr	r5, [pc, #52]	; (8001b6c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001b36:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 8001b3a:	b12a      	cbz	r2, 8001b48 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3c:	4413      	add	r3, r2
 8001b3e:	428b      	cmp	r3, r1
 8001b40:	d808      	bhi.n	8001b54 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001b42:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8001b44:	6023      	str	r3, [r4, #0]
}
 8001b46:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8001b48:	4809      	ldr	r0, [pc, #36]	; (8001b70 <_sbrk+0x44>)
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4413      	add	r3, r2
 8001b50:	428b      	cmp	r3, r1
 8001b52:	d9f6      	bls.n	8001b42 <_sbrk+0x16>
    errno = ENOMEM;
 8001b54:	f008 fde6 	bl	800a724 <__errno>
 8001b58:	230c      	movs	r3, #12
    return (void *)-1;
 8001b5a:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8001b5e:	6003      	str	r3, [r0, #0]
}
 8001b60:	4610      	mov	r0, r2
 8001b62:	bd38      	pop	{r3, r4, r5, pc}
 8001b64:	2400b970 	.word	0x2400b970
 8001b68:	24050000 	.word	0x24050000
 8001b6c:	00004000 	.word	0x00004000
 8001b70:	2400c9a8 	.word	0x2400c9a8

08001b74 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b74:	4922      	ldr	r1, [pc, #136]	; (8001c00 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b76:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b78:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8001b80:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b86:	6813      	ldr	r3, [r2, #0]
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	2b06      	cmp	r3, #6
 8001b8e:	d805      	bhi.n	8001b9c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b90:	6813      	ldr	r3, [r2, #0]
 8001b92:	f023 030f 	bic.w	r3, r3, #15
 8001b96:	f043 0307 	orr.w	r3, r3, #7
 8001b9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b9e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ba0:	4a1a      	ldr	r2, [pc, #104]	; (8001c0c <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8001ba2:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ba4:	4817      	ldr	r0, [pc, #92]	; (8001c04 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8001ba6:	f041 0101 	orr.w	r1, r1, #1
 8001baa:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001bac:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001bae:	6819      	ldr	r1, [r3, #0]
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bb4:	6803      	ldr	r3, [r0, #0]
 8001bb6:	071b      	lsls	r3, r3, #28
 8001bb8:	d505      	bpl.n	8001bc6 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bba:	6803      	ldr	r3, [r0, #0]
 8001bbc:	f023 030f 	bic.w	r3, r3, #15
 8001bc0:	f043 0307 	orr.w	r3, r3, #7
 8001bc4:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <SystemInit+0x94>)
 8001bc8:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bca:	4911      	ldr	r1, [pc, #68]	; (8001c10 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8001bcc:	4c11      	ldr	r4, [pc, #68]	; (8001c14 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8001bce:	4812      	ldr	r0, [pc, #72]	; (8001c18 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 8001bd0:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001bd2:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001bd4:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001bd6:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bd8:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8001bdc:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001bde:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8001be0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 8001be2:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8001be6:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8001be8:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8001bea:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bec:	480b      	ldr	r0, [pc, #44]	; (8001c1c <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8001bee:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001bf2:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8001bf4:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bf6:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00
 8001c04:	52002000 	.word	0x52002000
 8001c08:	58024400 	.word	0x58024400
 8001c0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c10:	01010280 	.word	0x01010280
 8001c14:	02020200 	.word	0x02020200
 8001c18:	01ff0000 	.word	0x01ff0000
 8001c1c:	52004000 	.word	0x52004000

08001c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c24:	f7ff ffa6 	bl	8001b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c2a:	490d      	ldr	r1, [pc, #52]	; (8001c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c40:	4c0a      	ldr	r4, [pc, #40]	; (8001c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f008 fd6f 	bl	800a730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c52:	f7ff fbb1 	bl	80013b8 <main>
  bx  lr
 8001c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c58:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001c5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c60:	240004e4 	.word	0x240004e4
  ldr r2, =_sidata
 8001c64:	0800c258 	.word	0x0800c258
  ldr r2, =_sbss
 8001c68:	240004e4 	.word	0x240004e4
  ldr r4, =_ebss
 8001c6c:	2400c9a8 	.word	0x2400c9a8

08001c70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC3_IRQHandler>
	...

08001c74 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <HAL_InitTick+0x40>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b90b      	cbnz	r3, 8001c7e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001c7a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001c7c:	4770      	bx	lr
{
 8001c7e:	b510      	push	{r4, lr}
 8001c80:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c86:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <HAL_InitTick+0x44>)
 8001c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8c:	6810      	ldr	r0, [r2, #0]
 8001c8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c92:	f000 f8c7 	bl	8001e24 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c96:	2c0f      	cmp	r4, #15
 8001c98:	d800      	bhi.n	8001c9c <HAL_InitTick+0x28>
 8001c9a:	b108      	cbz	r0, 8001ca0 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001c9c:	2001      	movs	r0, #1
}
 8001c9e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f000 f870 	bl	8001d8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_InitTick+0x48>)
 8001cae:	2000      	movs	r0, #0
 8001cb0:	601c      	str	r4, [r3, #0]
}
 8001cb2:	bd10      	pop	{r4, pc}
 8001cb4:	240003ac 	.word	0x240003ac
 8001cb8:	240003a4 	.word	0x240003a4
 8001cbc:	240003b0 	.word	0x240003b0

08001cc0 <HAL_Init>:
{
 8001cc0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc2:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cc4:	4c12      	ldr	r4, [pc, #72]	; (8001d10 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc6:	f000 f84f 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cca:	f003 fa95 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_Init+0x54>)
 8001cd0:	4911      	ldr	r1, [pc, #68]	; (8001d18 <HAL_Init+0x58>)
 8001cd2:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cd4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cd6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cda:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cde:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ce0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ce2:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8001ce6:	490d      	ldr	r1, [pc, #52]	; (8001d1c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ce8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cec:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cee:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001cf2:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cf4:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cf6:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cf8:	f7ff ffbc 	bl	8001c74 <HAL_InitTick>
 8001cfc:	b110      	cbz	r0, 8001d04 <HAL_Init+0x44>
    return HAL_ERROR;
 8001cfe:	2401      	movs	r4, #1
}
 8001d00:	4620      	mov	r0, r4
 8001d02:	bd10      	pop	{r4, pc}
 8001d04:	4604      	mov	r4, r0
  HAL_MspInit();
 8001d06:	f7ff feb1 	bl	8001a6c <HAL_MspInit>
}
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	bd10      	pop	{r4, pc}
 8001d0e:	bf00      	nop
 8001d10:	240003a8 	.word	0x240003a8
 8001d14:	58024400 	.word	0x58024400
 8001d18:	0800bf40 	.word	0x0800bf40
 8001d1c:	240003a4 	.word	0x240003a4

08001d20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001d20:	4a03      	ldr	r2, [pc, #12]	; (8001d30 <HAL_IncTick+0x10>)
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <HAL_IncTick+0x14>)
 8001d24:	6811      	ldr	r1, [r2, #0]
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	440b      	add	r3, r1
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	2400b974 	.word	0x2400b974
 8001d34:	240003ac 	.word	0x240003ac

08001d38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d38:	4b01      	ldr	r3, [pc, #4]	; (8001d40 <HAL_GetTick+0x8>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	2400b974 	.word	0x2400b974

08001d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d44:	b538      	push	{r3, r4, r5, lr}
 8001d46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff fff6 	bl	8001d38 <HAL_GetTick>
 8001d4c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	1c63      	adds	r3, r4, #1
 8001d50:	d002      	beq.n	8001d58 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <HAL_Delay+0x20>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d58:	f7ff ffee 	bl	8001d38 <HAL_GetTick>
 8001d5c:	1b43      	subs	r3, r0, r5
 8001d5e:	42a3      	cmp	r3, r4
 8001d60:	d3fa      	bcc.n	8001d58 <HAL_Delay+0x14>
  {
  }
}
 8001d62:	bd38      	pop	{r3, r4, r5, pc}
 8001d64:	240003ac 	.word	0x240003ac

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4906      	ldr	r1, [pc, #24]	; (8001d84 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d72:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d74:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d78:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001d7e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001d80:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	05fa0000 	.word	0x05fa0000

08001d8c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_NVIC_SetPriority+0x70>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d96:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9e:	f1be 0f04 	cmp.w	lr, #4
 8001da2:	bf28      	it	cs
 8001da4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da8:	f1bc 0f06 	cmp.w	ip, #6
 8001dac:	d91a      	bls.n	8001de4 <HAL_NVIC_SetPriority+0x58>
 8001dae:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 3cff 	mov.w	ip, #4294967295
 8001db4:	fa0c fc03 	lsl.w	ip, ip, r3
 8001db8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc2:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001dc6:	ea21 010c 	bic.w	r1, r1, ip
 8001dca:	fa01 f103 	lsl.w	r1, r1, r3
 8001dce:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	db0a      	blt.n	8001dea <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	0109      	lsls	r1, r1, #4
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_NVIC_SetPriority+0x74>)
 8001dd8:	b2c9      	uxtb	r1, r1
 8001dda:	4403      	add	r3, r0
 8001ddc:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001de0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001de4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	4613      	mov	r3, r2
 8001de8:	e7e8      	b.n	8001dbc <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	f000 000f 	and.w	r0, r0, #15
 8001dee:	0109      	lsls	r1, r1, #4
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <HAL_NVIC_SetPriority+0x78>)
 8001df2:	b2c9      	uxtb	r1, r1
 8001df4:	4403      	add	r3, r0
 8001df6:	7619      	strb	r1, [r3, #24]
 8001df8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dfc:	e000ed00 	.word	0xe000ed00
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ecfc 	.word	0xe000ecfc

08001e08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	db07      	blt.n	8001e1c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f000 011f 	and.w	r1, r0, #31
 8001e12:	4a03      	ldr	r2, [pc, #12]	; (8001e20 <HAL_NVIC_EnableIRQ+0x18>)
 8001e14:	0940      	lsrs	r0, r0, #5
 8001e16:	408b      	lsls	r3, r1
 8001e18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100

08001e24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	1e43      	subs	r3, r0, #1
 8001e26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2a:	d20c      	bcs.n	8001e46 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	4906      	ldr	r1, [pc, #24]	; (8001e4c <HAL_SYSTICK_Config+0x28>)
 8001e34:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e38:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e42:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e46:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e50:	6802      	ldr	r2, [r0, #0]
{
 8001e52:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e54:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <DMA_CalcBaseAndBitshift+0xd0>)
 8001e56:	4833      	ldr	r0, [pc, #204]	; (8001f24 <DMA_CalcBaseAndBitshift+0xd4>)
{
 8001e58:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e5a:	4e33      	ldr	r6, [pc, #204]	; (8001f28 <DMA_CalcBaseAndBitshift+0xd8>)
 8001e5c:	4d33      	ldr	r5, [pc, #204]	; (8001f2c <DMA_CalcBaseAndBitshift+0xdc>)
 8001e5e:	42b2      	cmp	r2, r6
 8001e60:	bf18      	it	ne
 8001e62:	429a      	cmpne	r2, r3
 8001e64:	4c32      	ldr	r4, [pc, #200]	; (8001f30 <DMA_CalcBaseAndBitshift+0xe0>)
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	42aa      	cmp	r2, r5
 8001e6e:	bf08      	it	eq
 8001e70:	f043 0301 	orreq.w	r3, r3, #1
 8001e74:	42a2      	cmp	r2, r4
 8001e76:	bf08      	it	eq
 8001e78:	f043 0301 	orreq.w	r3, r3, #1
 8001e7c:	3430      	adds	r4, #48	; 0x30
 8001e7e:	4282      	cmp	r2, r0
 8001e80:	bf08      	it	eq
 8001e82:	f043 0301 	orreq.w	r3, r3, #1
 8001e86:	3030      	adds	r0, #48	; 0x30
 8001e88:	42a2      	cmp	r2, r4
 8001e8a:	bf08      	it	eq
 8001e8c:	f043 0301 	orreq.w	r3, r3, #1
 8001e90:	3430      	adds	r4, #48	; 0x30
 8001e92:	4282      	cmp	r2, r0
 8001e94:	bf08      	it	eq
 8001e96:	f043 0301 	orreq.w	r3, r3, #1
 8001e9a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8001e9e:	42a2      	cmp	r2, r4
 8001ea0:	bf08      	it	eq
 8001ea2:	f043 0301 	orreq.w	r3, r3, #1
 8001ea6:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8001eaa:	4282      	cmp	r2, r0
 8001eac:	bf08      	it	eq
 8001eae:	f043 0301 	orreq.w	r3, r3, #1
 8001eb2:	3030      	adds	r0, #48	; 0x30
 8001eb4:	42a2      	cmp	r2, r4
 8001eb6:	bf08      	it	eq
 8001eb8:	f043 0301 	orreq.w	r3, r3, #1
 8001ebc:	3430      	adds	r4, #48	; 0x30
 8001ebe:	4282      	cmp	r2, r0
 8001ec0:	bf08      	it	eq
 8001ec2:	f043 0301 	orreq.w	r3, r3, #1
 8001ec6:	3030      	adds	r0, #48	; 0x30
 8001ec8:	42a2      	cmp	r2, r4
 8001eca:	bf08      	it	eq
 8001ecc:	f043 0301 	orreq.w	r3, r3, #1
 8001ed0:	3430      	adds	r4, #48	; 0x30
 8001ed2:	4282      	cmp	r2, r0
 8001ed4:	bf08      	it	eq
 8001ed6:	f043 0301 	orreq.w	r3, r3, #1
 8001eda:	3030      	adds	r0, #48	; 0x30
 8001edc:	42a2      	cmp	r2, r4
 8001ede:	bf08      	it	eq
 8001ee0:	f043 0301 	orreq.w	r3, r3, #1
 8001ee4:	4282      	cmp	r2, r0
 8001ee6:	bf08      	it	eq
 8001ee8:	f043 0301 	orreq.w	r3, r3, #1
 8001eec:	b913      	cbnz	r3, 8001ef4 <DMA_CalcBaseAndBitshift+0xa4>
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <DMA_CalcBaseAndBitshift+0xe4>)
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d112      	bne.n	8001f1a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001ef4:	b2d3      	uxtb	r3, r2
 8001ef6:	4810      	ldr	r0, [pc, #64]	; (8001f38 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001ef8:	4c10      	ldr	r4, [pc, #64]	; (8001f3c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001efa:	3b10      	subs	r3, #16
 8001efc:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 8001f00:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001f02:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001f06:	5c20      	ldrb	r0, [r4, r0]
 8001f08:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001f0a:	480d      	ldr	r0, [pc, #52]	; (8001f40 <DMA_CalcBaseAndBitshift+0xf0>)
 8001f0c:	ea00 0002 	and.w	r0, r0, r2
 8001f10:	bf88      	it	hi
 8001f12:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001f14:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8001f16:	bc70      	pop	{r4, r5, r6}
 8001f18:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001f1a:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8001f1e:	e7f9      	b.n	8001f14 <DMA_CalcBaseAndBitshift+0xc4>
 8001f20:	40020010 	.word	0x40020010
 8001f24:	40020070 	.word	0x40020070
 8001f28:	40020028 	.word	0x40020028
 8001f2c:	40020040 	.word	0x40020040
 8001f30:	40020058 	.word	0x40020058
 8001f34:	400204b8 	.word	0x400204b8
 8001f38:	aaaaaaab 	.word	0xaaaaaaab
 8001f3c:	0800bf50 	.word	0x0800bf50
 8001f40:	fffffc00 	.word	0xfffffc00

08001f44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001f44:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f46:	4a27      	ldr	r2, [pc, #156]	; (8001fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8001f48:	4927      	ldr	r1, [pc, #156]	; (8001fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 8001f4a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f4c:	4d27      	ldr	r5, [pc, #156]	; (8001fec <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001f4e:	4c28      	ldr	r4, [pc, #160]	; (8001ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001f50:	42ab      	cmp	r3, r5
 8001f52:	bf18      	it	ne
 8001f54:	4293      	cmpne	r3, r2
 8001f56:	bf0c      	ite	eq
 8001f58:	2201      	moveq	r2, #1
 8001f5a:	2200      	movne	r2, #0
 8001f5c:	428b      	cmp	r3, r1
 8001f5e:	bf08      	it	eq
 8001f60:	f042 0201 	orreq.w	r2, r2, #1
 8001f64:	3128      	adds	r1, #40	; 0x28
 8001f66:	42a3      	cmp	r3, r4
 8001f68:	bf08      	it	eq
 8001f6a:	f042 0201 	orreq.w	r2, r2, #1
 8001f6e:	3428      	adds	r4, #40	; 0x28
 8001f70:	428b      	cmp	r3, r1
 8001f72:	bf08      	it	eq
 8001f74:	f042 0201 	orreq.w	r2, r2, #1
 8001f78:	3128      	adds	r1, #40	; 0x28
 8001f7a:	42a3      	cmp	r3, r4
 8001f7c:	bf08      	it	eq
 8001f7e:	f042 0201 	orreq.w	r2, r2, #1
 8001f82:	428b      	cmp	r3, r1
 8001f84:	bf08      	it	eq
 8001f86:	f042 0201 	orreq.w	r2, r2, #1
 8001f8a:	b912      	cbnz	r2, 8001f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8001f8c:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d113      	bne.n	8001fba <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	4918      	ldr	r1, [pc, #96]	; (8001ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001f96:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001f98:	3b08      	subs	r3, #8
 8001f9a:	4c19      	ldr	r4, [pc, #100]	; (8002000 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8001f9c:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001fa0:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001fa2:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001fa6:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001faa:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001fb2:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8001fb6:	bc30      	pop	{r4, r5}
 8001fb8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001fba:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001fbc:	4a11      	ldr	r2, [pc, #68]	; (8002004 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001fbe:	4c12      	ldr	r4, [pc, #72]	; (8002008 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8001fc0:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001fc2:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001fc4:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001fc8:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001fca:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001fce:	d800      	bhi.n	8001fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8001fd0:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001fd4:	f001 041f 	and.w	r4, r1, #31
 8001fd8:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001fda:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001fdc:	40a3      	lsls	r3, r4
 8001fde:	4c0c      	ldr	r4, [pc, #48]	; (8002010 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001fe0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001fe2:	e7e5      	b.n	8001fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8001fe4:	58025408 	.word	0x58025408
 8001fe8:	58025430 	.word	0x58025430
 8001fec:	5802541c 	.word	0x5802541c
 8001ff0:	58025444 	.word	0x58025444
 8001ff4:	58025494 	.word	0x58025494
 8001ff8:	cccccccd 	.word	0xcccccccd
 8001ffc:	16009600 	.word	0x16009600
 8002000:	58025880 	.word	0x58025880
 8002004:	bffdfbf0 	.word	0xbffdfbf0
 8002008:	aaaaaaab 	.word	0xaaaaaaab
 800200c:	10008200 	.word	0x10008200
 8002010:	40020880 	.word	0x40020880

08002014 <HAL_DMA_Init>:
{
 8002014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002018:	4605      	mov	r5, r0
 800201a:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff fe8c 	bl	8001d38 <HAL_GetTick>
  if(hdma == NULL)
 8002020:	2d00      	cmp	r5, #0
 8002022:	f000 8192 	beq.w	800234a <HAL_DMA_Init+0x336>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002026:	682c      	ldr	r4, [r5, #0]
 8002028:	4606      	mov	r6, r0
 800202a:	4ba9      	ldr	r3, [pc, #676]	; (80022d0 <HAL_DMA_Init+0x2bc>)
 800202c:	429c      	cmp	r4, r3
 800202e:	d048      	beq.n	80020c2 <HAL_DMA_Init+0xae>
 8002030:	3318      	adds	r3, #24
 8002032:	429c      	cmp	r4, r3
 8002034:	d045      	beq.n	80020c2 <HAL_DMA_Init+0xae>
 8002036:	3330      	adds	r3, #48	; 0x30
 8002038:	4aa6      	ldr	r2, [pc, #664]	; (80022d4 <HAL_DMA_Init+0x2c0>)
 800203a:	4294      	cmp	r4, r2
 800203c:	bf18      	it	ne
 800203e:	429c      	cmpne	r4, r3
 8002040:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002044:	bf0c      	ite	eq
 8002046:	2301      	moveq	r3, #1
 8002048:	2300      	movne	r3, #0
 800204a:	4294      	cmp	r4, r2
 800204c:	bf08      	it	eq
 800204e:	f043 0301 	orreq.w	r3, r3, #1
 8002052:	3218      	adds	r2, #24
 8002054:	4294      	cmp	r4, r2
 8002056:	bf08      	it	eq
 8002058:	f043 0301 	orreq.w	r3, r3, #1
 800205c:	3218      	adds	r2, #24
 800205e:	4294      	cmp	r4, r2
 8002060:	bf08      	it	eq
 8002062:	f043 0301 	orreq.w	r3, r3, #1
 8002066:	3218      	adds	r2, #24
 8002068:	4294      	cmp	r4, r2
 800206a:	bf08      	it	eq
 800206c:	f043 0301 	orreq.w	r3, r3, #1
 8002070:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002074:	4294      	cmp	r4, r2
 8002076:	bf08      	it	eq
 8002078:	f043 0301 	orreq.w	r3, r3, #1
 800207c:	3218      	adds	r2, #24
 800207e:	4294      	cmp	r4, r2
 8002080:	bf08      	it	eq
 8002082:	f043 0301 	orreq.w	r3, r3, #1
 8002086:	3218      	adds	r2, #24
 8002088:	4294      	cmp	r4, r2
 800208a:	bf08      	it	eq
 800208c:	f043 0301 	orreq.w	r3, r3, #1
 8002090:	3218      	adds	r2, #24
 8002092:	4294      	cmp	r4, r2
 8002094:	bf08      	it	eq
 8002096:	f043 0301 	orreq.w	r3, r3, #1
 800209a:	3218      	adds	r2, #24
 800209c:	4294      	cmp	r4, r2
 800209e:	bf08      	it	eq
 80020a0:	f043 0301 	orreq.w	r3, r3, #1
 80020a4:	3218      	adds	r2, #24
 80020a6:	4294      	cmp	r4, r2
 80020a8:	bf08      	it	eq
 80020aa:	f043 0301 	orreq.w	r3, r3, #1
 80020ae:	3218      	adds	r2, #24
 80020b0:	4294      	cmp	r4, r2
 80020b2:	bf08      	it	eq
 80020b4:	f043 0301 	orreq.w	r3, r3, #1
 80020b8:	b91b      	cbnz	r3, 80020c2 <HAL_DMA_Init+0xae>
 80020ba:	4b87      	ldr	r3, [pc, #540]	; (80022d8 <HAL_DMA_Init+0x2c4>)
 80020bc:	429c      	cmp	r4, r3
 80020be:	f040 818c 	bne.w	80023da <HAL_DMA_Init+0x3c6>
    hdma->State = HAL_DMA_STATE_BUSY;
 80020c2:	2302      	movs	r3, #2
 80020c4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80020c8:	2300      	movs	r3, #0
 80020ca:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	6023      	str	r3, [r4, #0]
 80020d6:	e006      	b.n	80020e6 <HAL_DMA_Init+0xd2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020d8:	f7ff fe2e 	bl	8001d38 <HAL_GetTick>
 80020dc:	1b80      	subs	r0, r0, r6
 80020de:	2805      	cmp	r0, #5
 80020e0:	f200 811f 	bhi.w	8002322 <HAL_DMA_Init+0x30e>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020e4:	682c      	ldr	r4, [r5, #0]
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	07df      	lsls	r7, r3, #31
 80020ea:	d4f5      	bmi.n	80020d8 <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 80020ec:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f0:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 80020f2:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f4:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020f6:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f8:	430b      	orrs	r3, r1
 80020fa:	6969      	ldr	r1, [r5, #20]
 80020fc:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fe:	69e9      	ldr	r1, [r5, #28]
 8002100:	4313      	orrs	r3, r2
 8002102:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002104:	4975      	ldr	r1, [pc, #468]	; (80022dc <HAL_DMA_Init+0x2c8>)
 8002106:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8002108:	6a28      	ldr	r0, [r5, #32]
 800210a:	4303      	orrs	r3, r0
    registerValue |=  hdma->Init.Direction           |
 800210c:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800210e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002110:	2904      	cmp	r1, #4
 8002112:	d103      	bne.n	800211c <HAL_DMA_Init+0x108>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002114:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	; 0x2c
 8002118:	4330      	orrs	r0, r6
 800211a:	4303      	orrs	r3, r0
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800211c:	6868      	ldr	r0, [r5, #4]
 800211e:	f1a0 0629 	sub.w	r6, r0, #41	; 0x29
 8002122:	2e1f      	cmp	r6, #31
 8002124:	f240 8106 	bls.w	8002334 <HAL_DMA_Init+0x320>
 8002128:	f1a0 064f 	sub.w	r6, r0, #79	; 0x4f
 800212c:	2e03      	cmp	r6, #3
 800212e:	f200 8107 	bhi.w	8002340 <HAL_DMA_Init+0x32c>
        registerValue |= DMA_SxCR_TRBUFF;
 8002132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002136:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002138:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800213a:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800213c:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002140:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002144:	d10d      	bne.n	8002162 <HAL_DMA_Init+0x14e>
      registerValue |= hdma->Init.FIFOThreshold;
 8002146:	6aa9      	ldr	r1, [r5, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002148:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800214a:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800214c:	b148      	cbz	r0, 8002162 <HAL_DMA_Init+0x14e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800214e:	2a00      	cmp	r2, #0
 8002150:	f040 811d 	bne.w	800238e <HAL_DMA_Init+0x37a>
    switch (hdma->Init.FIFOThreshold)
 8002154:	2901      	cmp	r1, #1
 8002156:	f000 813b 	beq.w	80023d0 <HAL_DMA_Init+0x3bc>
 800215a:	f031 0202 	bics.w	r2, r1, #2
 800215e:	f000 811e 	beq.w	800239e <HAL_DMA_Init+0x38a>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002162:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002164:	4628      	mov	r0, r5
 8002166:	f7ff fe73 	bl	8001e50 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800216a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800216c:	233f      	movs	r3, #63	; 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800216e:	4958      	ldr	r1, [pc, #352]	; (80022d0 <HAL_DMA_Init+0x2bc>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002170:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002174:	4e5a      	ldr	r6, [pc, #360]	; (80022e0 <HAL_DMA_Init+0x2cc>)
 8002176:	4f5b      	ldr	r7, [pc, #364]	; (80022e4 <HAL_DMA_Init+0x2d0>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002178:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800217a:	4a5b      	ldr	r2, [pc, #364]	; (80022e8 <HAL_DMA_Init+0x2d4>)
 800217c:	1ba6      	subs	r6, r4, r6
 800217e:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002180:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002182:	eba4 0b02 	sub.w	fp, r4, r2
 8002186:	4b59      	ldr	r3, [pc, #356]	; (80022ec <HAL_DMA_Init+0x2d8>)
 8002188:	fab6 f686 	clz	r6, r6
 800218c:	fabb fb8b 	clz	fp, fp
 8002190:	fab7 f787 	clz	r7, r7
 8002194:	eba4 0a03 	sub.w	sl, r4, r3
 8002198:	4b55      	ldr	r3, [pc, #340]	; (80022f0 <HAL_DMA_Init+0x2dc>)
 800219a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800219e:	4855      	ldr	r0, [pc, #340]	; (80022f4 <HAL_DMA_Init+0x2e0>)
 80021a0:	429c      	cmp	r4, r3
 80021a2:	bf18      	it	ne
 80021a4:	428c      	cmpne	r4, r1
 80021a6:	f103 0318 	add.w	r3, r3, #24
 80021aa:	faba fa8a 	clz	sl, sl
 80021ae:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80021b2:	bf0c      	ite	eq
 80021b4:	2101      	moveq	r1, #1
 80021b6:	2100      	movne	r1, #0
 80021b8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80021bc:	1a22      	subs	r2, r4, r0
 80021be:	429c      	cmp	r4, r3
 80021c0:	bf08      	it	eq
 80021c2:	f041 0101 	orreq.w	r1, r1, #1
 80021c6:	3318      	adds	r3, #24
 80021c8:	097f      	lsrs	r7, r7, #5
 80021ca:	fab2 f282 	clz	r2, r2
 80021ce:	429c      	cmp	r4, r3
 80021d0:	bf08      	it	eq
 80021d2:	f041 0101 	orreq.w	r1, r1, #1
 80021d6:	3318      	adds	r3, #24
 80021d8:	0952      	lsrs	r2, r2, #5
 80021da:	429c      	cmp	r4, r3
 80021dc:	bf08      	it	eq
 80021de:	f041 0101 	orreq.w	r1, r1, #1
 80021e2:	3318      	adds	r3, #24
 80021e4:	9201      	str	r2, [sp, #4]
 80021e6:	429c      	cmp	r4, r3
 80021e8:	bf08      	it	eq
 80021ea:	f041 0101 	orreq.w	r1, r1, #1
 80021ee:	3318      	adds	r3, #24
 80021f0:	429c      	cmp	r4, r3
 80021f2:	bf08      	it	eq
 80021f4:	f041 0101 	orreq.w	r1, r1, #1
 80021f8:	3318      	adds	r3, #24
 80021fa:	429c      	cmp	r4, r3
 80021fc:	bf08      	it	eq
 80021fe:	f041 0101 	orreq.w	r1, r1, #1
 8002202:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8002206:	429c      	cmp	r4, r3
 8002208:	bf08      	it	eq
 800220a:	f041 0101 	orreq.w	r1, r1, #1
 800220e:	3318      	adds	r3, #24
 8002210:	429c      	cmp	r4, r3
 8002212:	bf08      	it	eq
 8002214:	f041 0101 	orreq.w	r1, r1, #1
 8002218:	3318      	adds	r3, #24
 800221a:	429c      	cmp	r4, r3
 800221c:	bf08      	it	eq
 800221e:	f041 0101 	orreq.w	r1, r1, #1
 8002222:	3318      	adds	r3, #24
 8002224:	429c      	cmp	r4, r3
 8002226:	bf08      	it	eq
 8002228:	f041 0101 	orreq.w	r1, r1, #1
 800222c:	3318      	adds	r3, #24
 800222e:	429c      	cmp	r4, r3
 8002230:	bf08      	it	eq
 8002232:	f041 0101 	orreq.w	r1, r1, #1
 8002236:	3318      	adds	r3, #24
 8002238:	429c      	cmp	r4, r3
 800223a:	bf08      	it	eq
 800223c:	f041 0101 	orreq.w	r1, r1, #1
 8002240:	3318      	adds	r3, #24
 8002242:	429c      	cmp	r4, r3
 8002244:	bf08      	it	eq
 8002246:	f041 0101 	orreq.w	r1, r1, #1
 800224a:	3318      	adds	r3, #24
 800224c:	429c      	cmp	r4, r3
 800224e:	bf08      	it	eq
 8002250:	f041 0101 	orreq.w	r1, r1, #1
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_DMA_Init+0x2e4>)
 8002256:	ea4b 0101 	orr.w	r1, fp, r1
 800225a:	eba4 0803 	sub.w	r8, r4, r3
 800225e:	3314      	adds	r3, #20
 8002260:	ea4a 0101 	orr.w	r1, sl, r1
 8002264:	fab8 f888 	clz	r8, r8
 8002268:	eba4 0903 	sub.w	r9, r4, r3
 800226c:	3314      	adds	r3, #20
 800226e:	4331      	orrs	r1, r6
 8002270:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002274:	fab9 f989 	clz	r9, r9
 8002278:	1ae3      	subs	r3, r4, r3
 800227a:	4339      	orrs	r1, r7
 800227c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	ea48 0101 	orr.w	r1, r8, r1
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	ea49 0101 	orr.w	r1, r9, r1
 800228e:	4319      	orrs	r1, r3
 8002290:	d101      	bne.n	8002296 <HAL_DMA_Init+0x282>
 8002292:	2a00      	cmp	r2, #0
 8002294:	d03d      	beq.n	8002312 <HAL_DMA_Init+0x2fe>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002296:	4628      	mov	r0, r5
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	f7ff fe53 	bl	8001f44 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800229e:	68a9      	ldr	r1, [r5, #8]
 80022a0:	9b00      	ldr	r3, [sp, #0]
 80022a2:	2980      	cmp	r1, #128	; 0x80
 80022a4:	d02a      	beq.n	80022fc <HAL_DMA_Init+0x2e8>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022a6:	6868      	ldr	r0, [r5, #4]
 80022a8:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80022aa:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80022ac:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022ae:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80022b2:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022b4:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022b6:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80022ba:	d826      	bhi.n	800230a <HAL_DMA_Init+0x2f6>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80022bc:	1e61      	subs	r1, r4, #1
 80022be:	2907      	cmp	r1, #7
 80022c0:	d947      	bls.n	8002352 <HAL_DMA_Init+0x33e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022c2:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 80022c4:	e9d5 301b 	ldrd	r3, r0, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80022c8:	2100      	movs	r1, #0
 80022ca:	6019      	str	r1, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022cc:	6042      	str	r2, [r0, #4]
 80022ce:	e020      	b.n	8002312 <HAL_DMA_Init+0x2fe>
 80022d0:	40020010 	.word	0x40020010
 80022d4:	40020040 	.word	0x40020040
 80022d8:	400204b8 	.word	0x400204b8
 80022dc:	fe10803f 	.word	0xfe10803f
 80022e0:	58025430 	.word	0x58025430
 80022e4:	58025444 	.word	0x58025444
 80022e8:	58025408 	.word	0x58025408
 80022ec:	5802541c 	.word	0x5802541c
 80022f0:	40020028 	.word	0x40020028
 80022f4:	58025494 	.word	0x58025494
 80022f8:	58025458 	.word	0x58025458
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022fc:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022fe:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8002300:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002304:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002306:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002308:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 800230a:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800230c:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002310:	676b      	str	r3, [r5, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002312:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002314:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002316:	6568      	str	r0, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002318:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800231c:	b003      	add	sp, #12
 800231e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002322:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8002324:	2303      	movs	r3, #3
        return HAL_ERROR;
 8002326:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002328:	656a      	str	r2, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800232a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800232e:	b003      	add	sp, #12
 8002330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002334:	4f6c      	ldr	r7, [pc, #432]	; (80024e8 <HAL_DMA_Init+0x4d4>)
 8002336:	fa27 f606 	lsr.w	r6, r7, r6
 800233a:	07f6      	lsls	r6, r6, #31
 800233c:	f53f aef9 	bmi.w	8002132 <HAL_DMA_Init+0x11e>
 8002340:	3874      	subs	r0, #116	; 0x74
 8002342:	2803      	cmp	r0, #3
 8002344:	f63f aef7 	bhi.w	8002136 <HAL_DMA_Init+0x122>
 8002348:	e6f3      	b.n	8002132 <HAL_DMA_Init+0x11e>
    return HAL_ERROR;
 800234a:	2001      	movs	r0, #1
}
 800234c:	b003      	add	sp, #12
 800234e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002352:	9a01      	ldr	r2, [sp, #4]
 8002354:	431a      	orrs	r2, r3
 8002356:	ea49 0902 	orr.w	r9, r9, r2
 800235a:	ea48 0809 	orr.w	r8, r8, r9
 800235e:	ea47 0708 	orr.w	r7, r7, r8
 8002362:	433e      	orrs	r6, r7
 8002364:	ea5a 0606 	orrs.w	r6, sl, r6
 8002368:	d107      	bne.n	800237a <HAL_DMA_Init+0x366>
 800236a:	f1bb 0f00 	cmp.w	fp, #0
 800236e:	d104      	bne.n	800237a <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002370:	4b5e      	ldr	r3, [pc, #376]	; (80024ec <HAL_DMA_Init+0x4d8>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002372:	485f      	ldr	r0, [pc, #380]	; (80024f0 <HAL_DMA_Init+0x4dc>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002374:	4423      	add	r3, r4
 8002376:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002378:	e003      	b.n	8002382 <HAL_DMA_Init+0x36e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800237a:	4b5e      	ldr	r3, [pc, #376]	; (80024f4 <HAL_DMA_Init+0x4e0>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800237c:	485e      	ldr	r0, [pc, #376]	; (80024f8 <HAL_DMA_Init+0x4e4>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800237e:	4423      	add	r3, r4
 8002380:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002382:	2201      	movs	r2, #1
 8002384:	408a      	lsls	r2, r1
 8002386:	e9c5 301b 	strd	r3, r0, [r5, #108]	; 0x6c
 800238a:	676a      	str	r2, [r5, #116]	; 0x74
 800238c:	e79c      	b.n	80022c8 <HAL_DMA_Init+0x2b4>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800238e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002392:	d00e      	beq.n	80023b2 <HAL_DMA_Init+0x39e>
    switch (hdma->Init.FIFOThreshold)
 8002394:	2902      	cmp	r1, #2
 8002396:	d905      	bls.n	80023a4 <HAL_DMA_Init+0x390>
 8002398:	2903      	cmp	r1, #3
 800239a:	f47f aee2 	bne.w	8002162 <HAL_DMA_Init+0x14e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800239e:	01c2      	lsls	r2, r0, #7
 80023a0:	f57f aedf 	bpl.w	8002162 <HAL_DMA_Init+0x14e>
          hdma->State = HAL_DMA_STATE_READY;
 80023a4:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a6:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80023a8:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023aa:	656a      	str	r2, [r5, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80023ac:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
          return HAL_ERROR;
 80023b0:	e7b4      	b.n	800231c <HAL_DMA_Init+0x308>
    switch (hdma->Init.FIFOThreshold)
 80023b2:	2903      	cmp	r1, #3
 80023b4:	f63f aed5 	bhi.w	8002162 <HAL_DMA_Init+0x14e>
 80023b8:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <HAL_DMA_Init+0x3ac>)
 80023ba:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80023be:	bf00      	nop
 80023c0:	080023a5 	.word	0x080023a5
 80023c4:	0800239f 	.word	0x0800239f
 80023c8:	080023a5 	.word	0x080023a5
 80023cc:	080023d1 	.word	0x080023d1
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d0:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80023d4:	f47f aec5 	bne.w	8002162 <HAL_DMA_Init+0x14e>
 80023d8:	e7e4      	b.n	80023a4 <HAL_DMA_Init+0x390>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80023da:	4a48      	ldr	r2, [pc, #288]	; (80024fc <HAL_DMA_Init+0x4e8>)
 80023dc:	4b48      	ldr	r3, [pc, #288]	; (8002500 <HAL_DMA_Init+0x4ec>)
 80023de:	eba4 0b02 	sub.w	fp, r4, r2
 80023e2:	4e48      	ldr	r6, [pc, #288]	; (8002504 <HAL_DMA_Init+0x4f0>)
 80023e4:	eba4 0a03 	sub.w	sl, r4, r3
 80023e8:	4f47      	ldr	r7, [pc, #284]	; (8002508 <HAL_DMA_Init+0x4f4>)
 80023ea:	fabb fb8b 	clz	fp, fp
 80023ee:	1ba6      	subs	r6, r4, r6
 80023f0:	faba fa8a 	clz	sl, sl
 80023f4:	333c      	adds	r3, #60	; 0x3c
 80023f6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80023fa:	fab6 f686 	clz	r6, r6
 80023fe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8002402:	1be7      	subs	r7, r4, r7
 8002404:	eba4 0803 	sub.w	r8, r4, r3
 8002408:	0976      	lsrs	r6, r6, #5
 800240a:	3314      	adds	r3, #20
 800240c:	fab7 f787 	clz	r7, r7
 8002410:	ea4b 010a 	orr.w	r1, fp, sl
 8002414:	fab8 f888 	clz	r8, r8
 8002418:	eba4 0903 	sub.w	r9, r4, r3
 800241c:	097f      	lsrs	r7, r7, #5
 800241e:	4331      	orrs	r1, r6
 8002420:	3314      	adds	r3, #20
 8002422:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002426:	fab9 f989 	clz	r9, r9
 800242a:	4339      	orrs	r1, r7
 800242c:	1ae3      	subs	r3, r4, r3
 800242e:	4837      	ldr	r0, [pc, #220]	; (800250c <HAL_DMA_Init+0x4f8>)
 8002430:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002434:	ea48 0101 	orr.w	r1, r8, r1
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	1a22      	subs	r2, r4, r0
 800243e:	ea49 0101 	orr.w	r1, r9, r1
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	fab2 f282 	clz	r2, r2
 8002448:	4319      	orrs	r1, r3
 800244a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800244e:	9201      	str	r2, [sp, #4]
 8002450:	d101      	bne.n	8002456 <HAL_DMA_Init+0x442>
 8002452:	2a00      	cmp	r2, #0
 8002454:	d041      	beq.n	80024da <HAL_DMA_Init+0x4c6>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002456:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002458:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8002518 <HAL_DMA_Init+0x504>
    hdma->State = HAL_DMA_STATE_BUSY;
 800245c:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002460:	2100      	movs	r1, #0
 8002462:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002466:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002468:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800246c:	68a9      	ldr	r1, [r5, #8]
 800246e:	2940      	cmp	r1, #64	; 0x40
 8002470:	d030      	beq.n	80024d4 <HAL_DMA_Init+0x4c0>
 8002472:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 8002476:	fab1 f181 	clz	r1, r1
 800247a:	0949      	lsrs	r1, r1, #5
 800247c:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002480:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002482:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002484:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002486:	4a22      	ldr	r2, [pc, #136]	; (8002510 <HAL_DMA_Init+0x4fc>)
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800248e:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002490:	4422      	add	r2, r4
 8002492:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002496:	69a9      	ldr	r1, [r5, #24]
 8002498:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800249c:	69e9      	ldr	r1, [r5, #28]
 800249e:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80024a2:	6a29      	ldr	r1, [r5, #32]
 80024a4:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 80024a8:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024ac:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80024b0:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80024b2:	4918      	ldr	r1, [pc, #96]	; (8002514 <HAL_DMA_Init+0x500>)
 80024b4:	fba1 0102 	umull	r0, r1, r1, r2
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024b8:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80024ba:	0909      	lsrs	r1, r1, #4
 80024bc:	0089      	lsls	r1, r1, #2
 80024be:	65e9      	str	r1, [r5, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024c0:	f7ff fcc6 	bl	8001e50 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024c4:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80024c6:	9b00      	ldr	r3, [sp, #0]
 80024c8:	f001 041f 	and.w	r4, r1, #31
 80024cc:	2101      	movs	r1, #1
 80024ce:	40a1      	lsls	r1, r4
 80024d0:	6041      	str	r1, [r0, #4]
 80024d2:	e6e0      	b.n	8002296 <HAL_DMA_Init+0x282>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024d4:	f04f 0e10 	mov.w	lr, #16
 80024d8:	e7d2      	b.n	8002480 <HAL_DMA_Init+0x46c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024da:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80024dc:	2303      	movs	r3, #3
    return HAL_ERROR;
 80024de:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024e0:	656a      	str	r2, [r5, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80024e2:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    return HAL_ERROR;
 80024e6:	e719      	b.n	800231c <HAL_DMA_Init+0x308>
 80024e8:	c3c0003f 	.word	0xc3c0003f
 80024ec:	1000823f 	.word	0x1000823f
 80024f0:	40020940 	.word	0x40020940
 80024f4:	1600963f 	.word	0x1600963f
 80024f8:	58025940 	.word	0x58025940
 80024fc:	58025408 	.word	0x58025408
 8002500:	5802541c 	.word	0x5802541c
 8002504:	58025430 	.word	0x58025430
 8002508:	58025444 	.word	0x58025444
 800250c:	58025494 	.word	0x58025494
 8002510:	a7fdabf8 	.word	0xa7fdabf8
 8002514:	cccccccd 	.word	0xcccccccd
 8002518:	fffe000f 	.word	0xfffe000f

0800251c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800251c:	2800      	cmp	r0, #0
 800251e:	f000 8177 	beq.w	8002810 <HAL_DMA_Start_IT+0x2f4>
 8002522:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8002524:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002528:	2801      	cmp	r0, #1
 800252a:	f000 8173 	beq.w	8002814 <HAL_DMA_Start_IT+0x2f8>
 800252e:	2001      	movs	r0, #1
{
 8002530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8002534:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8002538:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800253c:	4284      	cmp	r4, r0
 800253e:	d008      	beq.n	8002552 <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002540:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8002544:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002546:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800254a:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 800254e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002552:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8002554:	f8dc 4000 	ldr.w	r4, [ip]
 8002558:	4d53      	ldr	r5, [pc, #332]	; (80026a8 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800255a:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002560:	4e52      	ldr	r6, [pc, #328]	; (80026ac <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002562:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8002566:	4852      	ldr	r0, [pc, #328]	; (80026b0 <HAL_DMA_Start_IT+0x194>)
 8002568:	42ac      	cmp	r4, r5
 800256a:	bf18      	it	ne
 800256c:	4284      	cmpne	r4, r0
 800256e:	f105 0518 	add.w	r5, r5, #24
 8002572:	bf0c      	ite	eq
 8002574:	2001      	moveq	r0, #1
 8002576:	2000      	movne	r0, #0
 8002578:	42ac      	cmp	r4, r5
 800257a:	bf08      	it	eq
 800257c:	f040 0001 	orreq.w	r0, r0, #1
 8002580:	3518      	adds	r5, #24
 8002582:	42ac      	cmp	r4, r5
 8002584:	bf08      	it	eq
 8002586:	f040 0001 	orreq.w	r0, r0, #1
 800258a:	3518      	adds	r5, #24
 800258c:	42ac      	cmp	r4, r5
 800258e:	bf08      	it	eq
 8002590:	f040 0001 	orreq.w	r0, r0, #1
 8002594:	3518      	adds	r5, #24
 8002596:	42ac      	cmp	r4, r5
 8002598:	bf08      	it	eq
 800259a:	f040 0001 	orreq.w	r0, r0, #1
 800259e:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80025a2:	42ac      	cmp	r4, r5
 80025a4:	bf08      	it	eq
 80025a6:	f040 0001 	orreq.w	r0, r0, #1
 80025aa:	3518      	adds	r5, #24
 80025ac:	42ac      	cmp	r4, r5
 80025ae:	bf08      	it	eq
 80025b0:	f040 0001 	orreq.w	r0, r0, #1
 80025b4:	3518      	adds	r5, #24
 80025b6:	42ac      	cmp	r4, r5
 80025b8:	bf08      	it	eq
 80025ba:	f040 0001 	orreq.w	r0, r0, #1
 80025be:	3518      	adds	r5, #24
 80025c0:	42ac      	cmp	r4, r5
 80025c2:	bf08      	it	eq
 80025c4:	f040 0001 	orreq.w	r0, r0, #1
 80025c8:	3518      	adds	r5, #24
 80025ca:	42ac      	cmp	r4, r5
 80025cc:	bf08      	it	eq
 80025ce:	f040 0001 	orreq.w	r0, r0, #1
 80025d2:	3518      	adds	r5, #24
 80025d4:	42ac      	cmp	r4, r5
 80025d6:	bf08      	it	eq
 80025d8:	f040 0001 	orreq.w	r0, r0, #1
 80025dc:	3518      	adds	r5, #24
 80025de:	42ac      	cmp	r4, r5
 80025e0:	bf08      	it	eq
 80025e2:	f040 0001 	orreq.w	r0, r0, #1
 80025e6:	3518      	adds	r5, #24
 80025e8:	42ac      	cmp	r4, r5
 80025ea:	bf14      	ite	ne
 80025ec:	4681      	movne	r9, r0
 80025ee:	f040 0901 	orreq.w	r9, r0, #1
 80025f2:	f5a5 6595 	sub.w	r5, r5, #1192	; 0x4a8
 80025f6:	42b4      	cmp	r4, r6
 80025f8:	bf18      	it	ne
 80025fa:	42ac      	cmpne	r4, r5
 80025fc:	bf0c      	ite	eq
 80025fe:	2501      	moveq	r5, #1
 8002600:	2500      	movne	r5, #0
 8002602:	d002      	beq.n	800260a <HAL_DMA_Start_IT+0xee>
 8002604:	f1b9 0f00 	cmp.w	r9, #0
 8002608:	d054      	beq.n	80026b4 <HAL_DMA_Start_IT+0x198>
 800260a:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800260c:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8002610:	f026 0601 	bic.w	r6, r6, #1
 8002614:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002616:	2d00      	cmp	r5, #0
 8002618:	d078      	beq.n	800270c <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800261a:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800261e:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002620:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8002624:	b117      	cbz	r7, 800262c <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002626:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 800262a:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800262c:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8002630:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8002634:	f006 081f 	and.w	r8, r6, #31
 8002638:	fa0e fe08 	lsl.w	lr, lr, r8
 800263c:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002640:	6826      	ldr	r6, [r4, #0]
 8002642:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8002646:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002648:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800264a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	f000 80e2 	beq.w	8002818 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002654:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002656:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002658:	b91d      	cbnz	r5, 8002662 <HAL_DMA_Start_IT+0x146>
 800265a:	f1b9 0f00 	cmp.w	r9, #0
 800265e:	f000 80e1 	beq.w	8002824 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	f023 031e 	bic.w	r3, r3, #30
 8002668:	f043 0316 	orr.w	r3, r3, #22
 800266c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800266e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8002672:	b11b      	cbz	r3, 800267c <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800267c:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	03d2      	lsls	r2, r2, #15
 8002684:	d503      	bpl.n	800268e <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800268c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800268e:	b11f      	cbz	r7, 8002698 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002696:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8002698:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6023      	str	r3, [r4, #0]
}
 80026a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026a6:	bf00      	nop
 80026a8:	40020058 	.word	0x40020058
 80026ac:	40020028 	.word	0x40020028
 80026b0:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026b4:	4f61      	ldr	r7, [pc, #388]	; (800283c <HAL_DMA_Start_IT+0x320>)
 80026b6:	4e62      	ldr	r6, [pc, #392]	; (8002840 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b8:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026bc:	42b4      	cmp	r4, r6
 80026be:	bf18      	it	ne
 80026c0:	42bc      	cmpne	r4, r7
 80026c2:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80026c6:	bf0c      	ite	eq
 80026c8:	2701      	moveq	r7, #1
 80026ca:	2700      	movne	r7, #0
 80026cc:	42b4      	cmp	r4, r6
 80026ce:	bf08      	it	eq
 80026d0:	f047 0701 	orreq.w	r7, r7, #1
 80026d4:	3614      	adds	r6, #20
 80026d6:	42b4      	cmp	r4, r6
 80026d8:	bf08      	it	eq
 80026da:	f047 0701 	orreq.w	r7, r7, #1
 80026de:	3614      	adds	r6, #20
 80026e0:	42b4      	cmp	r4, r6
 80026e2:	bf08      	it	eq
 80026e4:	f047 0701 	orreq.w	r7, r7, #1
 80026e8:	3614      	adds	r6, #20
 80026ea:	42b4      	cmp	r4, r6
 80026ec:	bf08      	it	eq
 80026ee:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 80026f2:	6826      	ldr	r6, [r4, #0]
 80026f4:	f026 0601 	bic.w	r6, r6, #1
 80026f8:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026fa:	4e52      	ldr	r6, [pc, #328]	; (8002844 <HAL_DMA_Start_IT+0x328>)
 80026fc:	42b4      	cmp	r4, r6
 80026fe:	bf08      	it	eq
 8002700:	f047 0701 	orreq.w	r7, r7, #1
 8002704:	b917      	cbnz	r7, 800270c <HAL_DMA_Start_IT+0x1f0>
 8002706:	4f50      	ldr	r7, [pc, #320]	; (8002848 <HAL_DMA_Start_IT+0x32c>)
 8002708:	42bc      	cmp	r4, r7
 800270a:	d10b      	bne.n	8002724 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800270c:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8002710:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002712:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8002716:	b117      	cbz	r7, 800271e <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002718:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 800271c:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800271e:	f1b9 0f00 	cmp.w	r9, #0
 8002722:	d183      	bne.n	800262c <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002724:	4f46      	ldr	r7, [pc, #280]	; (8002840 <HAL_DMA_Start_IT+0x324>)
 8002726:	f8df e114 	ldr.w	lr, [pc, #276]	; 800283c <HAL_DMA_Start_IT+0x320>
 800272a:	4574      	cmp	r4, lr
 800272c:	bf18      	it	ne
 800272e:	42bc      	cmpne	r4, r7
 8002730:	f10e 0e14 	add.w	lr, lr, #20
 8002734:	bf0c      	ite	eq
 8002736:	2701      	moveq	r7, #1
 8002738:	2700      	movne	r7, #0
 800273a:	4574      	cmp	r4, lr
 800273c:	bf08      	it	eq
 800273e:	f047 0701 	orreq.w	r7, r7, #1
 8002742:	f10e 0e14 	add.w	lr, lr, #20
 8002746:	4574      	cmp	r4, lr
 8002748:	bf08      	it	eq
 800274a:	f047 0701 	orreq.w	r7, r7, #1
 800274e:	f10e 0e14 	add.w	lr, lr, #20
 8002752:	4574      	cmp	r4, lr
 8002754:	bf08      	it	eq
 8002756:	f047 0701 	orreq.w	r7, r7, #1
 800275a:	f10e 0e14 	add.w	lr, lr, #20
 800275e:	4574      	cmp	r4, lr
 8002760:	bf08      	it	eq
 8002762:	f047 0701 	orreq.w	r7, r7, #1
 8002766:	f10e 0e14 	add.w	lr, lr, #20
 800276a:	4574      	cmp	r4, lr
 800276c:	bf08      	it	eq
 800276e:	f047 0701 	orreq.w	r7, r7, #1
 8002772:	b917      	cbnz	r7, 800277a <HAL_DMA_Start_IT+0x25e>
 8002774:	4f34      	ldr	r7, [pc, #208]	; (8002848 <HAL_DMA_Start_IT+0x32c>)
 8002776:	42bc      	cmp	r4, r7
 8002778:	d154      	bne.n	8002824 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800277a:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800277e:	2701      	movs	r7, #1
 8002780:	f000 0e1f 	and.w	lr, r0, #31
 8002784:	fa07 f70e 	lsl.w	r7, r7, lr
 8002788:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800278c:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800278e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8002792:	2b40      	cmp	r3, #64	; 0x40
 8002794:	d043      	beq.n	800281e <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002796:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002798:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	f023 030e 	bic.w	r3, r3, #14
 80027a0:	f043 030a 	orr.w	r3, r3, #10
 80027a4:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80027a6:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d02d      	beq.n	800280a <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_DMA_Start_IT+0x320>)
 80027b8:	4a21      	ldr	r2, [pc, #132]	; (8002840 <HAL_DMA_Start_IT+0x324>)
 80027ba:	4294      	cmp	r4, r2
 80027bc:	bf18      	it	ne
 80027be:	429c      	cmpne	r4, r3
 80027c0:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80027c4:	bf0c      	ite	eq
 80027c6:	2301      	moveq	r3, #1
 80027c8:	2300      	movne	r3, #0
 80027ca:	4294      	cmp	r4, r2
 80027cc:	bf08      	it	eq
 80027ce:	f043 0301 	orreq.w	r3, r3, #1
 80027d2:	3214      	adds	r2, #20
 80027d4:	4294      	cmp	r4, r2
 80027d6:	bf08      	it	eq
 80027d8:	f043 0301 	orreq.w	r3, r3, #1
 80027dc:	3214      	adds	r2, #20
 80027de:	4294      	cmp	r4, r2
 80027e0:	bf08      	it	eq
 80027e2:	f043 0301 	orreq.w	r3, r3, #1
 80027e6:	3214      	adds	r2, #20
 80027e8:	4294      	cmp	r4, r2
 80027ea:	bf08      	it	eq
 80027ec:	f043 0301 	orreq.w	r3, r3, #1
 80027f0:	3214      	adds	r2, #20
 80027f2:	4294      	cmp	r4, r2
 80027f4:	bf08      	it	eq
 80027f6:	f043 0301 	orreq.w	r3, r3, #1
 80027fa:	3214      	adds	r2, #20
 80027fc:	4294      	cmp	r4, r2
 80027fe:	bf08      	it	eq
 8002800:	f043 0301 	orreq.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	f43f af47 	beq.w	8002698 <HAL_DMA_Start_IT+0x17c>
 800280a:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800280e:	e735      	b.n	800267c <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8002810:	2001      	movs	r0, #1
 8002812:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002814:	2002      	movs	r0, #2
}
 8002816:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002818:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800281a:	60e1      	str	r1, [r4, #12]
 800281c:	e71c      	b.n	8002658 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800281e:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002820:	60e1      	str	r1, [r4, #12]
 8002822:	e7ba      	b.n	800279a <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	f023 030e 	bic.w	r3, r3, #14
 800282a:	f043 030a 	orr.w	r3, r3, #10
 800282e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002830:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ba      	bne.n	80027ae <HAL_DMA_Start_IT+0x292>
 8002838:	e7bd      	b.n	80027b6 <HAL_DMA_Start_IT+0x29a>
 800283a:	bf00      	nop
 800283c:	5802541c 	.word	0x5802541c
 8002840:	58025408 	.word	0x58025408
 8002844:	58025480 	.word	0x58025480
 8002848:	58025494 	.word	0x58025494

0800284c <HAL_DMA_IRQHandler>:
{
 800284c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8002850:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8002852:	4b9e      	ldr	r3, [pc, #632]	; (8002acc <HAL_DMA_IRQHandler+0x280>)
{
 8002854:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002856:	6d84      	ldr	r4, [r0, #88]	; 0x58
{
 8002858:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800285a:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 800285c:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800285e:	6803      	ldr	r3, [r0, #0]
 8002860:	4a9b      	ldr	r2, [pc, #620]	; (8002ad0 <HAL_DMA_IRQHandler+0x284>)
 8002862:	489c      	ldr	r0, [pc, #624]	; (8002ad4 <HAL_DMA_IRQHandler+0x288>)
  tmpisr_dma  = regs_dma->ISR;
 8002864:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002866:	4293      	cmp	r3, r2
 8002868:	bf18      	it	ne
 800286a:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 800286c:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800286e:	bf0c      	ite	eq
 8002870:	2001      	moveq	r0, #1
 8002872:	2000      	movne	r0, #0
 8002874:	d04f      	beq.n	8002916 <HAL_DMA_IRQHandler+0xca>
 8002876:	3218      	adds	r2, #24
 8002878:	f8df c260 	ldr.w	ip, [pc, #608]	; 8002adc <HAL_DMA_IRQHandler+0x290>
 800287c:	4563      	cmp	r3, ip
 800287e:	bf18      	it	ne
 8002880:	4293      	cmpne	r3, r2
 8002882:	f10c 0c18 	add.w	ip, ip, #24
 8002886:	bf0c      	ite	eq
 8002888:	2201      	moveq	r2, #1
 800288a:	2200      	movne	r2, #0
 800288c:	4563      	cmp	r3, ip
 800288e:	bf08      	it	eq
 8002890:	f042 0201 	orreq.w	r2, r2, #1
 8002894:	f10c 0c18 	add.w	ip, ip, #24
 8002898:	4563      	cmp	r3, ip
 800289a:	bf08      	it	eq
 800289c:	f042 0201 	orreq.w	r2, r2, #1
 80028a0:	f10c 0c18 	add.w	ip, ip, #24
 80028a4:	4563      	cmp	r3, ip
 80028a6:	bf08      	it	eq
 80028a8:	f042 0201 	orreq.w	r2, r2, #1
 80028ac:	f10c 0c18 	add.w	ip, ip, #24
 80028b0:	4563      	cmp	r3, ip
 80028b2:	bf08      	it	eq
 80028b4:	f042 0201 	orreq.w	r2, r2, #1
 80028b8:	f50c 7c56 	add.w	ip, ip, #856	; 0x358
 80028bc:	4563      	cmp	r3, ip
 80028be:	bf08      	it	eq
 80028c0:	f042 0201 	orreq.w	r2, r2, #1
 80028c4:	f10c 0c18 	add.w	ip, ip, #24
 80028c8:	4563      	cmp	r3, ip
 80028ca:	bf08      	it	eq
 80028cc:	f042 0201 	orreq.w	r2, r2, #1
 80028d0:	f10c 0c18 	add.w	ip, ip, #24
 80028d4:	4563      	cmp	r3, ip
 80028d6:	bf08      	it	eq
 80028d8:	f042 0201 	orreq.w	r2, r2, #1
 80028dc:	f10c 0c18 	add.w	ip, ip, #24
 80028e0:	4563      	cmp	r3, ip
 80028e2:	bf08      	it	eq
 80028e4:	f042 0201 	orreq.w	r2, r2, #1
 80028e8:	f10c 0c18 	add.w	ip, ip, #24
 80028ec:	4563      	cmp	r3, ip
 80028ee:	bf08      	it	eq
 80028f0:	f042 0201 	orreq.w	r2, r2, #1
 80028f4:	f10c 0c18 	add.w	ip, ip, #24
 80028f8:	4563      	cmp	r3, ip
 80028fa:	bf08      	it	eq
 80028fc:	f042 0201 	orreq.w	r2, r2, #1
 8002900:	f10c 0c18 	add.w	ip, ip, #24
 8002904:	4563      	cmp	r3, ip
 8002906:	bf08      	it	eq
 8002908:	f042 0201 	orreq.w	r2, r2, #1
 800290c:	b91a      	cbnz	r2, 8002916 <HAL_DMA_IRQHandler+0xca>
 800290e:	4a72      	ldr	r2, [pc, #456]	; (8002ad8 <HAL_DMA_IRQHandler+0x28c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	f040 824b 	bne.w	8002dac <HAL_DMA_IRQHandler+0x560>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002916:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8002918:	2208      	movs	r2, #8
 800291a:	f001 0c1f 	and.w	ip, r1, #31
 800291e:	fa02 f20c 	lsl.w	r2, r2, ip
 8002922:	4217      	tst	r7, r2
 8002924:	f040 817d 	bne.w	8002c22 <HAL_DMA_IRQHandler+0x3d6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002928:	fa27 f20c 	lsr.w	r2, r7, ip
 800292c:	07d2      	lsls	r2, r2, #31
 800292e:	d50a      	bpl.n	8002946 <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	0612      	lsls	r2, r2, #24
 8002934:	d507      	bpl.n	8002946 <HAL_DMA_IRQHandler+0xfa>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002936:	2201      	movs	r2, #1
 8002938:	fa02 f20c 	lsl.w	r2, r2, ip
 800293c:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800293e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002940:	f042 0202 	orr.w	r2, r2, #2
 8002944:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002946:	f04f 0e04 	mov.w	lr, #4
 800294a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800294e:	ea1e 0f07 	tst.w	lr, r7
 8002952:	d05a      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002954:	2800      	cmp	r0, #0
 8002956:	d14f      	bne.n	80029f8 <HAL_DMA_IRQHandler+0x1ac>
 8002958:	4a60      	ldr	r2, [pc, #384]	; (8002adc <HAL_DMA_IRQHandler+0x290>)
 800295a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8002ae0 <HAL_DMA_IRQHandler+0x294>
 800295e:	4543      	cmp	r3, r8
 8002960:	bf18      	it	ne
 8002962:	4293      	cmpne	r3, r2
 8002964:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8002968:	bf0c      	ite	eq
 800296a:	2201      	moveq	r2, #1
 800296c:	2200      	movne	r2, #0
 800296e:	4543      	cmp	r3, r8
 8002970:	bf08      	it	eq
 8002972:	f042 0201 	orreq.w	r2, r2, #1
 8002976:	f108 0818 	add.w	r8, r8, #24
 800297a:	4543      	cmp	r3, r8
 800297c:	bf08      	it	eq
 800297e:	f042 0201 	orreq.w	r2, r2, #1
 8002982:	f108 0818 	add.w	r8, r8, #24
 8002986:	4543      	cmp	r3, r8
 8002988:	bf08      	it	eq
 800298a:	f042 0201 	orreq.w	r2, r2, #1
 800298e:	f108 0818 	add.w	r8, r8, #24
 8002992:	4543      	cmp	r3, r8
 8002994:	bf08      	it	eq
 8002996:	f042 0201 	orreq.w	r2, r2, #1
 800299a:	f508 7856 	add.w	r8, r8, #856	; 0x358
 800299e:	4543      	cmp	r3, r8
 80029a0:	bf08      	it	eq
 80029a2:	f042 0201 	orreq.w	r2, r2, #1
 80029a6:	f108 0818 	add.w	r8, r8, #24
 80029aa:	4543      	cmp	r3, r8
 80029ac:	bf08      	it	eq
 80029ae:	f042 0201 	orreq.w	r2, r2, #1
 80029b2:	f108 0818 	add.w	r8, r8, #24
 80029b6:	4543      	cmp	r3, r8
 80029b8:	bf08      	it	eq
 80029ba:	f042 0201 	orreq.w	r2, r2, #1
 80029be:	f108 0818 	add.w	r8, r8, #24
 80029c2:	4543      	cmp	r3, r8
 80029c4:	bf08      	it	eq
 80029c6:	f042 0201 	orreq.w	r2, r2, #1
 80029ca:	f108 0818 	add.w	r8, r8, #24
 80029ce:	4543      	cmp	r3, r8
 80029d0:	bf08      	it	eq
 80029d2:	f042 0201 	orreq.w	r2, r2, #1
 80029d6:	f108 0818 	add.w	r8, r8, #24
 80029da:	4543      	cmp	r3, r8
 80029dc:	bf08      	it	eq
 80029de:	f042 0201 	orreq.w	r2, r2, #1
 80029e2:	f108 0818 	add.w	r8, r8, #24
 80029e6:	4543      	cmp	r3, r8
 80029e8:	bf08      	it	eq
 80029ea:	f042 0201 	orreq.w	r2, r2, #1
 80029ee:	b91a      	cbnz	r2, 80029f8 <HAL_DMA_IRQHandler+0x1ac>
 80029f0:	4a39      	ldr	r2, [pc, #228]	; (8002ad8 <HAL_DMA_IRQHandler+0x28c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	f040 8214 	bne.w	8002e20 <HAL_DMA_IRQHandler+0x5d4>
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	0792      	lsls	r2, r2, #30
 80029fc:	d505      	bpl.n	8002a0a <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029fe:	f8c4 e008 	str.w	lr, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a02:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002a04:	f042 0204 	orr.w	r2, r2, #4
 8002a08:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	fa02 fc0c 	lsl.w	ip, r2, ip
 8002a10:	ea1c 0f07 	tst.w	ip, r7
 8002a14:	d069      	beq.n	8002aea <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002a16:	2800      	cmp	r0, #0
 8002a18:	d145      	bne.n	8002aa6 <HAL_DMA_IRQHandler+0x25a>
 8002a1a:	4a30      	ldr	r2, [pc, #192]	; (8002adc <HAL_DMA_IRQHandler+0x290>)
 8002a1c:	4830      	ldr	r0, [pc, #192]	; (8002ae0 <HAL_DMA_IRQHandler+0x294>)
 8002a1e:	4283      	cmp	r3, r0
 8002a20:	bf18      	it	ne
 8002a22:	4293      	cmpne	r3, r2
 8002a24:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8002a28:	bf0c      	ite	eq
 8002a2a:	2201      	moveq	r2, #1
 8002a2c:	2200      	movne	r2, #0
 8002a2e:	4283      	cmp	r3, r0
 8002a30:	bf08      	it	eq
 8002a32:	f042 0201 	orreq.w	r2, r2, #1
 8002a36:	3018      	adds	r0, #24
 8002a38:	4283      	cmp	r3, r0
 8002a3a:	bf08      	it	eq
 8002a3c:	f042 0201 	orreq.w	r2, r2, #1
 8002a40:	3018      	adds	r0, #24
 8002a42:	4283      	cmp	r3, r0
 8002a44:	bf08      	it	eq
 8002a46:	f042 0201 	orreq.w	r2, r2, #1
 8002a4a:	3018      	adds	r0, #24
 8002a4c:	4283      	cmp	r3, r0
 8002a4e:	bf08      	it	eq
 8002a50:	f042 0201 	orreq.w	r2, r2, #1
 8002a54:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002a58:	4283      	cmp	r3, r0
 8002a5a:	bf08      	it	eq
 8002a5c:	f042 0201 	orreq.w	r2, r2, #1
 8002a60:	3018      	adds	r0, #24
 8002a62:	4283      	cmp	r3, r0
 8002a64:	bf08      	it	eq
 8002a66:	f042 0201 	orreq.w	r2, r2, #1
 8002a6a:	3018      	adds	r0, #24
 8002a6c:	4283      	cmp	r3, r0
 8002a6e:	bf08      	it	eq
 8002a70:	f042 0201 	orreq.w	r2, r2, #1
 8002a74:	3018      	adds	r0, #24
 8002a76:	4283      	cmp	r3, r0
 8002a78:	bf08      	it	eq
 8002a7a:	f042 0201 	orreq.w	r2, r2, #1
 8002a7e:	3018      	adds	r0, #24
 8002a80:	4283      	cmp	r3, r0
 8002a82:	bf08      	it	eq
 8002a84:	f042 0201 	orreq.w	r2, r2, #1
 8002a88:	3018      	adds	r0, #24
 8002a8a:	4283      	cmp	r3, r0
 8002a8c:	bf08      	it	eq
 8002a8e:	f042 0201 	orreq.w	r2, r2, #1
 8002a92:	3018      	adds	r0, #24
 8002a94:	4283      	cmp	r3, r0
 8002a96:	bf08      	it	eq
 8002a98:	f042 0201 	orreq.w	r2, r2, #1
 8002a9c:	b91a      	cbnz	r2, 8002aa6 <HAL_DMA_IRQHandler+0x25a>
 8002a9e:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <HAL_DMA_IRQHandler+0x28c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f040 81c5 	bne.w	8002e30 <HAL_DMA_IRQHandler+0x5e4>
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	0712      	lsls	r2, r2, #28
 8002aaa:	d51e      	bpl.n	8002aea <HAL_DMA_IRQHandler+0x29e>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002aac:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	0352      	lsls	r2, r2, #13
 8002ab4:	f100 814e 	bmi.w	8002d54 <HAL_DMA_IRQHandler+0x508>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	05d2      	lsls	r2, r2, #23
 8002abc:	d403      	bmi.n	8002ac6 <HAL_DMA_IRQHandler+0x27a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	f022 0208 	bic.w	r2, r2, #8
 8002ac4:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8002ac6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002ac8:	b17b      	cbz	r3, 8002aea <HAL_DMA_IRQHandler+0x29e>
 8002aca:	e00b      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x298>
 8002acc:	240003a4 	.word	0x240003a4
 8002ad0:	40020028 	.word	0x40020028
 8002ad4:	40020010 	.word	0x40020010
 8002ad8:	400204b8 	.word	0x400204b8
 8002adc:	40020058 	.word	0x40020058
 8002ae0:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8002ae4:	4630      	mov	r0, r6
 8002ae6:	4798      	blx	r3
 8002ae8:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002aea:	f001 011f 	and.w	r1, r1, #31
 8002aee:	2020      	movs	r0, #32
 8002af0:	4088      	lsls	r0, r1
 8002af2:	4238      	tst	r0, r7
 8002af4:	d066      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x378>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002af6:	6832      	ldr	r2, [r6, #0]
 8002af8:	4ba4      	ldr	r3, [pc, #656]	; (8002d8c <HAL_DMA_IRQHandler+0x540>)
 8002afa:	4fa5      	ldr	r7, [pc, #660]	; (8002d90 <HAL_DMA_IRQHandler+0x544>)
 8002afc:	42ba      	cmp	r2, r7
 8002afe:	bf18      	it	ne
 8002b00:	429a      	cmpne	r2, r3
 8002b02:	f107 0718 	add.w	r7, r7, #24
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	42ba      	cmp	r2, r7
 8002b0e:	bf08      	it	eq
 8002b10:	f043 0301 	orreq.w	r3, r3, #1
 8002b14:	3718      	adds	r7, #24
 8002b16:	42ba      	cmp	r2, r7
 8002b18:	bf08      	it	eq
 8002b1a:	f043 0301 	orreq.w	r3, r3, #1
 8002b1e:	3718      	adds	r7, #24
 8002b20:	42ba      	cmp	r2, r7
 8002b22:	bf08      	it	eq
 8002b24:	f043 0301 	orreq.w	r3, r3, #1
 8002b28:	3718      	adds	r7, #24
 8002b2a:	42ba      	cmp	r2, r7
 8002b2c:	bf08      	it	eq
 8002b2e:	f043 0301 	orreq.w	r3, r3, #1
 8002b32:	3718      	adds	r7, #24
 8002b34:	42ba      	cmp	r2, r7
 8002b36:	bf08      	it	eq
 8002b38:	f043 0301 	orreq.w	r3, r3, #1
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	42ba      	cmp	r2, r7
 8002b40:	bf08      	it	eq
 8002b42:	f043 0301 	orreq.w	r3, r3, #1
 8002b46:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8002b4a:	42ba      	cmp	r2, r7
 8002b4c:	bf08      	it	eq
 8002b4e:	f043 0301 	orreq.w	r3, r3, #1
 8002b52:	3718      	adds	r7, #24
 8002b54:	42ba      	cmp	r2, r7
 8002b56:	bf08      	it	eq
 8002b58:	f043 0301 	orreq.w	r3, r3, #1
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	42ba      	cmp	r2, r7
 8002b60:	bf08      	it	eq
 8002b62:	f043 0301 	orreq.w	r3, r3, #1
 8002b66:	3718      	adds	r7, #24
 8002b68:	42ba      	cmp	r2, r7
 8002b6a:	bf08      	it	eq
 8002b6c:	f043 0301 	orreq.w	r3, r3, #1
 8002b70:	3718      	adds	r7, #24
 8002b72:	42ba      	cmp	r2, r7
 8002b74:	bf08      	it	eq
 8002b76:	f043 0301 	orreq.w	r3, r3, #1
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	42ba      	cmp	r2, r7
 8002b7e:	bf08      	it	eq
 8002b80:	f043 0301 	orreq.w	r3, r3, #1
 8002b84:	3718      	adds	r7, #24
 8002b86:	42ba      	cmp	r2, r7
 8002b88:	bf08      	it	eq
 8002b8a:	f043 0301 	orreq.w	r3, r3, #1
 8002b8e:	b91b      	cbnz	r3, 8002b98 <HAL_DMA_IRQHandler+0x34c>
 8002b90:	4b80      	ldr	r3, [pc, #512]	; (8002d94 <HAL_DMA_IRQHandler+0x548>)
 8002b92:	429a      	cmp	r2, r3
 8002b94:	f040 8161 	bne.w	8002e5a <HAL_DMA_IRQHandler+0x60e>
 8002b98:	6813      	ldr	r3, [r2, #0]
 8002b9a:	06df      	lsls	r7, r3, #27
 8002b9c:	d512      	bpl.n	8002bc4 <HAL_DMA_IRQHandler+0x378>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b9e:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ba0:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8002ba4:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ba6:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ba8:	f000 80b6 	beq.w	8002d18 <HAL_DMA_IRQHandler+0x4cc>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002bac:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002bb0:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002bb2:	f000 80d8 	beq.w	8002d66 <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002bb6:	031f      	lsls	r7, r3, #12
 8002bb8:	f140 80e3 	bpl.w	8002d82 <HAL_DMA_IRQHandler+0x536>
          if(hdma->XferCpltCallback != NULL)
 8002bbc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8002bbe:	b10b      	cbz	r3, 8002bc4 <HAL_DMA_IRQHandler+0x378>
            hdma->XferCpltCallback(hdma);
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bc4:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80c1 	beq.w	8002d4e <HAL_DMA_IRQHandler+0x502>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002bcc:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002bce:	07dc      	lsls	r4, r3, #31
 8002bd0:	d51e      	bpl.n	8002c10 <HAL_DMA_IRQHandler+0x3c4>
        __HAL_DMA_DISABLE(hdma);
 8002bd2:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	f886 1035 	strb.w	r1, [r6, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bda:	496f      	ldr	r1, [pc, #444]	; (8002d98 <HAL_DMA_IRQHandler+0x54c>)
        __HAL_DMA_DISABLE(hdma);
 8002bdc:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bde:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 8002be2:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8002be6:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e002      	b.n	8002bf2 <HAL_DMA_IRQHandler+0x3a6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002bec:	6813      	ldr	r3, [r2, #0]
 8002bee:	07d8      	lsls	r0, r3, #31
 8002bf0:	d504      	bpl.n	8002bfc <HAL_DMA_IRQHandler+0x3b0>
          if (++count > timeout)
 8002bf2:	9b01      	ldr	r3, [sp, #4]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	428b      	cmp	r3, r1
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	d9f7      	bls.n	8002bec <HAL_DMA_IRQHandler+0x3a0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bfc:	6813      	ldr	r3, [r2, #0]
 8002bfe:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8002c00:	bf4c      	ite	mi
 8002c02:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8002c04:	2301      	movpl	r3, #1
 8002c06:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8002c10:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 809b 	beq.w	8002d4e <HAL_DMA_IRQHandler+0x502>
          hdma->XferCpltCallback(hdma);
 8002c18:	4630      	mov	r0, r6
}
 8002c1a:	b002      	add	sp, #8
 8002c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 8002c20:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002c22:	f8d3 e000 	ldr.w	lr, [r3]
 8002c26:	f01e 0f04 	tst.w	lr, #4
 8002c2a:	d00a      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x3f6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002c2c:	f8d3 e000 	ldr.w	lr, [r3]
 8002c30:	f02e 0e04 	bic.w	lr, lr, #4
 8002c34:	f8c3 e000 	str.w	lr, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c38:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c3a:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c42:	fa27 f20c 	lsr.w	r2, r7, ip
 8002c46:	07d2      	lsls	r2, r2, #31
 8002c48:	f57f ae7d 	bpl.w	8002946 <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002c4c:	4a53      	ldr	r2, [pc, #332]	; (8002d9c <HAL_DMA_IRQHandler+0x550>)
 8002c4e:	f8df e150 	ldr.w	lr, [pc, #336]	; 8002da0 <HAL_DMA_IRQHandler+0x554>
 8002c52:	4573      	cmp	r3, lr
 8002c54:	bf18      	it	ne
 8002c56:	4293      	cmpne	r3, r2
 8002c58:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002c5c:	bf0c      	ite	eq
 8002c5e:	2201      	moveq	r2, #1
 8002c60:	2200      	movne	r2, #0
 8002c62:	4573      	cmp	r3, lr
 8002c64:	bf08      	it	eq
 8002c66:	f042 0201 	orreq.w	r2, r2, #1
 8002c6a:	f10e 0e18 	add.w	lr, lr, #24
 8002c6e:	4573      	cmp	r3, lr
 8002c70:	bf08      	it	eq
 8002c72:	f042 0201 	orreq.w	r2, r2, #1
 8002c76:	f10e 0e18 	add.w	lr, lr, #24
 8002c7a:	4573      	cmp	r3, lr
 8002c7c:	bf08      	it	eq
 8002c7e:	f042 0201 	orreq.w	r2, r2, #1
 8002c82:	f10e 0e18 	add.w	lr, lr, #24
 8002c86:	4573      	cmp	r3, lr
 8002c88:	bf08      	it	eq
 8002c8a:	f042 0201 	orreq.w	r2, r2, #1
 8002c8e:	f50e 7e56 	add.w	lr, lr, #856	; 0x358
 8002c92:	4573      	cmp	r3, lr
 8002c94:	bf08      	it	eq
 8002c96:	f042 0201 	orreq.w	r2, r2, #1
 8002c9a:	f10e 0e18 	add.w	lr, lr, #24
 8002c9e:	4573      	cmp	r3, lr
 8002ca0:	bf08      	it	eq
 8002ca2:	f042 0201 	orreq.w	r2, r2, #1
 8002ca6:	f10e 0e18 	add.w	lr, lr, #24
 8002caa:	4573      	cmp	r3, lr
 8002cac:	bf08      	it	eq
 8002cae:	f042 0201 	orreq.w	r2, r2, #1
 8002cb2:	f10e 0e18 	add.w	lr, lr, #24
 8002cb6:	4573      	cmp	r3, lr
 8002cb8:	bf08      	it	eq
 8002cba:	f042 0201 	orreq.w	r2, r2, #1
 8002cbe:	f10e 0e18 	add.w	lr, lr, #24
 8002cc2:	4573      	cmp	r3, lr
 8002cc4:	bf08      	it	eq
 8002cc6:	f042 0201 	orreq.w	r2, r2, #1
 8002cca:	f10e 0e18 	add.w	lr, lr, #24
 8002cce:	4573      	cmp	r3, lr
 8002cd0:	bf08      	it	eq
 8002cd2:	f042 0201 	orreq.w	r2, r2, #1
 8002cd6:	f10e 0e18 	add.w	lr, lr, #24
 8002cda:	4573      	cmp	r3, lr
 8002cdc:	bf08      	it	eq
 8002cde:	f042 0201 	orreq.w	r2, r2, #1
 8002ce2:	f10e 0e18 	add.w	lr, lr, #24
 8002ce6:	4573      	cmp	r3, lr
 8002ce8:	bf08      	it	eq
 8002cea:	f042 0201 	orreq.w	r2, r2, #1
 8002cee:	2a00      	cmp	r2, #0
 8002cf0:	f47f ae1e 	bne.w	8002930 <HAL_DMA_IRQHandler+0xe4>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	f47f ae1b 	bne.w	8002930 <HAL_DMA_IRQHandler+0xe4>
 8002cfa:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	fa02 f20c 	lsl.w	r2, r2, ip
 8002d02:	423a      	tst	r2, r7
 8002d04:	f040 808c 	bne.w	8002e20 <HAL_DMA_IRQHandler+0x5d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d08:	2210      	movs	r2, #16
 8002d0a:	fa02 fc0c 	lsl.w	ip, r2, ip
 8002d0e:	ea17 0f0c 	tst.w	r7, ip
 8002d12:	f43f aeea 	beq.w	8002aea <HAL_DMA_IRQHandler+0x29e>
 8002d16:	e680      	b.n	8002a1a <HAL_DMA_IRQHandler+0x1ce>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d18:	f023 0316 	bic.w	r3, r3, #22
 8002d1c:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d1e:	6953      	ldr	r3, [r2, #20]
 8002d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d24:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d26:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d03b      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x558>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d2c:	6813      	ldr	r3, [r2, #0]
 8002d2e:	f023 0308 	bic.w	r3, r3, #8
 8002d32:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d34:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8002d36:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 8002d38:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d3a:	408b      	lsls	r3, r1
 8002d3c:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 8002d3e:	6d33      	ldr	r3, [r6, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8002d40:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002d44:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f47f af65 	bne.w	8002c18 <HAL_DMA_IRQHandler+0x3cc>
}
 8002d4e:	b002      	add	sp, #8
 8002d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	0318      	lsls	r0, r3, #12
 8002d58:	f57f aeb5 	bpl.w	8002ac6 <HAL_DMA_IRQHandler+0x27a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002d5c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f47f aec0 	bne.w	8002ae4 <HAL_DMA_IRQHandler+0x298>
 8002d64:	e6c1      	b.n	8002aea <HAL_DMA_IRQHandler+0x29e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d66:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002d6a:	f47f af27 	bne.w	8002bbc <HAL_DMA_IRQHandler+0x370>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002d6e:	6811      	ldr	r1, [r2, #0]
 8002d70:	f021 0110 	bic.w	r1, r1, #16
 8002d74:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8002d76:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8002d78:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8002d7c:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8002d80:	e71c      	b.n	8002bbc <HAL_DMA_IRQHandler+0x370>
            if(hdma->XferM1CpltCallback != NULL)
 8002d82:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f47f af1b 	bne.w	8002bc0 <HAL_DMA_IRQHandler+0x374>
 8002d8a:	e71b      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x378>
 8002d8c:	40020010 	.word	0x40020010
 8002d90:	40020028 	.word	0x40020028
 8002d94:	400204b8 	.word	0x400204b8
 8002d98:	1b4e81b5 	.word	0x1b4e81b5
 8002d9c:	40020058 	.word	0x40020058
 8002da0:	40020040 	.word	0x40020040
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002da4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1c0      	bne.n	8002d2c <HAL_DMA_IRQHandler+0x4e0>
 8002daa:	e7c3      	b.n	8002d34 <HAL_DMA_IRQHandler+0x4e8>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002dac:	4a4b      	ldr	r2, [pc, #300]	; (8002edc <HAL_DMA_IRQHandler+0x690>)
 8002dae:	484c      	ldr	r0, [pc, #304]	; (8002ee0 <HAL_DMA_IRQHandler+0x694>)
 8002db0:	4283      	cmp	r3, r0
 8002db2:	bf18      	it	ne
 8002db4:	4293      	cmpne	r3, r2
 8002db6:	f100 0014 	add.w	r0, r0, #20
 8002dba:	bf0c      	ite	eq
 8002dbc:	2201      	moveq	r2, #1
 8002dbe:	2200      	movne	r2, #0
 8002dc0:	4283      	cmp	r3, r0
 8002dc2:	bf08      	it	eq
 8002dc4:	f042 0201 	orreq.w	r2, r2, #1
 8002dc8:	3014      	adds	r0, #20
 8002dca:	4283      	cmp	r3, r0
 8002dcc:	bf08      	it	eq
 8002dce:	f042 0201 	orreq.w	r2, r2, #1
 8002dd2:	3014      	adds	r0, #20
 8002dd4:	4283      	cmp	r3, r0
 8002dd6:	bf08      	it	eq
 8002dd8:	f042 0201 	orreq.w	r2, r2, #1
 8002ddc:	3014      	adds	r0, #20
 8002dde:	4283      	cmp	r3, r0
 8002de0:	bf08      	it	eq
 8002de2:	f042 0201 	orreq.w	r2, r2, #1
 8002de6:	3014      	adds	r0, #20
 8002de8:	4283      	cmp	r3, r0
 8002dea:	bf08      	it	eq
 8002dec:	f042 0201 	orreq.w	r2, r2, #1
 8002df0:	b912      	cbnz	r2, 8002df8 <HAL_DMA_IRQHandler+0x5ac>
 8002df2:	4a3c      	ldr	r2, [pc, #240]	; (8002ee4 <HAL_DMA_IRQHandler+0x698>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d1aa      	bne.n	8002d4e <HAL_DMA_IRQHandler+0x502>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002df8:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 8002dfa:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002dfc:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002dfe:	f000 001f 	and.w	r0, r0, #31
 8002e02:	4085      	lsls	r5, r0
 8002e04:	420d      	tst	r5, r1
 8002e06:	d018      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x5ee>
 8002e08:	0757      	lsls	r7, r2, #29
 8002e0a:	d516      	bpl.n	8002e3a <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e0c:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002e0e:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e10:	d547      	bpl.n	8002ea2 <HAL_DMA_IRQHandler+0x656>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002e12:	03d1      	lsls	r1, r2, #15
 8002e14:	d44b      	bmi.n	8002eae <HAL_DMA_IRQHandler+0x662>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e16:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f47f aefd 	bne.w	8002c18 <HAL_DMA_IRQHandler+0x3cc>
 8002e1e:	e796      	b.n	8002d4e <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002e20:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e22:	2210      	movs	r2, #16
 8002e24:	fa02 fc0c 	lsl.w	ip, r2, ip
 8002e28:	ea17 0f0c 	tst.w	r7, ip
 8002e2c:	f43f ae5d 	beq.w	8002aea <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	0750      	lsls	r0, r2, #29
 8002e34:	f57f ae59 	bpl.w	8002aea <HAL_DMA_IRQHandler+0x29e>
 8002e38:	e638      	b.n	8002aac <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002e3a:	2502      	movs	r5, #2
 8002e3c:	4085      	lsls	r5, r0
 8002e3e:	420d      	tst	r5, r1
 8002e40:	d010      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x618>
 8002e42:	0797      	lsls	r7, r2, #30
 8002e44:	d50e      	bpl.n	8002e64 <HAL_DMA_IRQHandler+0x618>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002e46:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e48:	0414      	lsls	r4, r2, #16
 8002e4a:	d535      	bpl.n	8002eb8 <HAL_DMA_IRQHandler+0x66c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002e4c:	03d0      	lsls	r0, r2, #15
 8002e4e:	d43f      	bmi.n	8002ed0 <HAL_DMA_IRQHandler+0x684>
          if(hdma->XferM1CpltCallback != NULL)
 8002e50:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f47f aee0 	bne.w	8002c18 <HAL_DMA_IRQHandler+0x3cc>
 8002e58:	e779      	b.n	8002d4e <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002e5a:	6813      	ldr	r3, [r2, #0]
 8002e5c:	079b      	lsls	r3, r3, #30
 8002e5e:	f57f aeb1 	bpl.w	8002bc4 <HAL_DMA_IRQHandler+0x378>
 8002e62:	e69c      	b.n	8002b9e <HAL_DMA_IRQHandler+0x352>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002e64:	2508      	movs	r5, #8
 8002e66:	4085      	lsls	r5, r0
 8002e68:	420d      	tst	r5, r1
 8002e6a:	f43f af70 	beq.w	8002d4e <HAL_DMA_IRQHandler+0x502>
 8002e6e:	0711      	lsls	r1, r2, #28
 8002e70:	f57f af6d 	bpl.w	8002d4e <HAL_DMA_IRQHandler+0x502>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e74:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8002e76:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e78:	f022 020e 	bic.w	r2, r2, #14
 8002e7c:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002e7e:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8002e80:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002e82:	fa03 f000 	lsl.w	r0, r3, r0
 8002e86:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e88:	6573      	str	r3, [r6, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8002e8a:	f886 1034 	strb.w	r1, [r6, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002e8e:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8002e92:	2a00      	cmp	r2, #0
 8002e94:	f43f af5b 	beq.w	8002d4e <HAL_DMA_IRQHandler+0x502>
        hdma->XferErrorCallback(hdma);
 8002e98:	4630      	mov	r0, r6
}
 8002e9a:	b002      	add	sp, #8
 8002e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8002ea0:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ea2:	0692      	lsls	r2, r2, #26
 8002ea4:	d403      	bmi.n	8002eae <HAL_DMA_IRQHandler+0x662>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	f022 0204 	bic.w	r2, r2, #4
 8002eac:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002eae:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f47f aeb1 	bne.w	8002c18 <HAL_DMA_IRQHandler+0x3cc>
 8002eb6:	e74a      	b.n	8002d4e <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002eb8:	f012 0220 	ands.w	r2, r2, #32
 8002ebc:	d108      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x684>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ebe:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002ec0:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ec2:	f021 010a 	bic.w	r1, r1, #10
 8002ec6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002ec8:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002ecc:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002ed0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f47f aea0 	bne.w	8002c18 <HAL_DMA_IRQHandler+0x3cc>
 8002ed8:	e739      	b.n	8002d4e <HAL_DMA_IRQHandler+0x502>
 8002eda:	bf00      	nop
 8002edc:	58025408 	.word	0x58025408
 8002ee0:	5802541c 	.word	0x5802541c
 8002ee4:	58025494 	.word	0x58025494

08002ee8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002ee8:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8002eea:	4770      	bx	lr

08002eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ef0:	680c      	ldr	r4, [r1, #0]
{
 8002ef2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ef4:	2c00      	cmp	r4, #0
 8002ef6:	f000 80a3 	beq.w	8003040 <HAL_GPIO_Init+0x154>
 8002efa:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efe:	4f86      	ldr	r7, [pc, #536]	; (8003118 <HAL_GPIO_Init+0x22c>)
  uint32_t position = 0x00U;
 8002f00:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f02:	2201      	movs	r2, #1
 8002f04:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8002f06:	ea12 0e04 	ands.w	lr, r2, r4
 8002f0a:	f000 8092 	beq.w	8003032 <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f0e:	684d      	ldr	r5, [r1, #4]
 8002f10:	f005 0903 	and.w	r9, r5, #3
 8002f14:	f109 36ff 	add.w	r6, r9, #4294967295
 8002f18:	2e01      	cmp	r6, #1
 8002f1a:	f240 8094 	bls.w	8003046 <HAL_GPIO_Init+0x15a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f1e:	f1b9 0f03 	cmp.w	r9, #3
 8002f22:	f040 80ce 	bne.w	80030c2 <HAL_GPIO_Init+0x1d6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f26:	fa09 f20c 	lsl.w	r2, r9, ip
 8002f2a:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8002f2e:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f30:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f34:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f38:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8002f3c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f3e:	d078      	beq.n	8003032 <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f40:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002f44:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f48:	f003 0903 	and.w	r9, r3, #3
 8002f4c:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	f042 0202 	orr.w	r2, r2, #2
 8002f52:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f56:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002f5e:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8002f62:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f66:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6a:	f002 0202 	and.w	r2, r2, #2
 8002f6e:	9201      	str	r2, [sp, #4]
 8002f70:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f72:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f76:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f7a:	4e68      	ldr	r6, [pc, #416]	; (800311c <HAL_GPIO_Init+0x230>)
 8002f7c:	42b0      	cmp	r0, r6
 8002f7e:	d024      	beq.n	8002fca <HAL_GPIO_Init+0xde>
 8002f80:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002f84:	42b0      	cmp	r0, r6
 8002f86:	f000 80a8 	beq.w	80030da <HAL_GPIO_Init+0x1ee>
 8002f8a:	4e65      	ldr	r6, [pc, #404]	; (8003120 <HAL_GPIO_Init+0x234>)
 8002f8c:	42b0      	cmp	r0, r6
 8002f8e:	f000 80a9 	beq.w	80030e4 <HAL_GPIO_Init+0x1f8>
 8002f92:	4e64      	ldr	r6, [pc, #400]	; (8003124 <HAL_GPIO_Init+0x238>)
 8002f94:	42b0      	cmp	r0, r6
 8002f96:	f000 809b 	beq.w	80030d0 <HAL_GPIO_Init+0x1e4>
 8002f9a:	4e63      	ldr	r6, [pc, #396]	; (8003128 <HAL_GPIO_Init+0x23c>)
 8002f9c:	42b0      	cmp	r0, r6
 8002f9e:	f000 80ab 	beq.w	80030f8 <HAL_GPIO_Init+0x20c>
 8002fa2:	4e62      	ldr	r6, [pc, #392]	; (800312c <HAL_GPIO_Init+0x240>)
 8002fa4:	42b0      	cmp	r0, r6
 8002fa6:	f000 80ac 	beq.w	8003102 <HAL_GPIO_Init+0x216>
 8002faa:	4e61      	ldr	r6, [pc, #388]	; (8003130 <HAL_GPIO_Init+0x244>)
 8002fac:	42b0      	cmp	r0, r6
 8002fae:	f000 809e 	beq.w	80030ee <HAL_GPIO_Init+0x202>
 8002fb2:	4e60      	ldr	r6, [pc, #384]	; (8003134 <HAL_GPIO_Init+0x248>)
 8002fb4:	42b0      	cmp	r0, r6
 8002fb6:	f000 80a9 	beq.w	800310c <HAL_GPIO_Init+0x220>
 8002fba:	4e5f      	ldr	r6, [pc, #380]	; (8003138 <HAL_GPIO_Init+0x24c>)
 8002fbc:	42b0      	cmp	r0, r6
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2609      	moveq	r6, #9
 8002fc2:	260a      	movne	r6, #10
 8002fc4:	fa06 f609 	lsl.w	r6, r6, r9
 8002fc8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fca:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fd2:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002fd6:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 8002fda:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002fdc:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002fe0:	bf0c      	ite	eq
 8002fe2:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8002fe4:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe8:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8002fec:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 8002ff0:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002ff4:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002ff8:	bf0c      	ite	eq
 8002ffa:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8002ffc:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003000:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8003004:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003008:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800300c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003010:	bf0c      	ite	eq
 8003012:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8003014:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003018:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800301a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 800301e:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003022:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 8003026:	bf54      	ite	pl
 8003028:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800302a:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800302e:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8003032:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003034:	f10c 0c02 	add.w	ip, ip, #2
 8003038:	fa34 f203 	lsrs.w	r2, r4, r3
 800303c:	f47f af61 	bne.w	8002f02 <HAL_GPIO_Init+0x16>
  }
}
 8003040:	b003      	add	sp, #12
 8003042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003046:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 800304a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800304c:	fa08 f80c 	lsl.w	r8, r8, ip
 8003050:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003054:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003056:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305a:	fa06 f60c 	lsl.w	r6, r6, ip
 800305e:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8003062:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003064:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003068:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800306c:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800306e:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003072:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8003074:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003076:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003078:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800307c:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800307e:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003082:	fa06 f60c 	lsl.w	r6, r6, ip
 8003086:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 800308a:	fa09 f20c 	lsl.w	r2, r9, ip
 800308e:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003090:	f47f af4d 	bne.w	8002f2e <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8003094:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003098:	f003 0b07 	and.w	fp, r3, #7
 800309c:	260f      	movs	r6, #15
 800309e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 80030a2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80030a6:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030aa:	fa06 f60b 	lsl.w	r6, r6, fp
 80030ae:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030b2:	690e      	ldr	r6, [r1, #16]
 80030b4:	fa06 f60b 	lsl.w	r6, r6, fp
 80030b8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 80030bc:	f8c9 6020 	str.w	r6, [r9, #32]
 80030c0:	e735      	b.n	8002f2e <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030c2:	f04f 0803 	mov.w	r8, #3
 80030c6:	fa08 f80c 	lsl.w	r8, r8, ip
 80030ca:	ea6f 0808 	mvn.w	r8, r8
 80030ce:	e7d2      	b.n	8003076 <HAL_GPIO_Init+0x18a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030d0:	2603      	movs	r6, #3
 80030d2:	fa06 f609 	lsl.w	r6, r6, r9
 80030d6:	4332      	orrs	r2, r6
 80030d8:	e777      	b.n	8002fca <HAL_GPIO_Init+0xde>
 80030da:	2601      	movs	r6, #1
 80030dc:	fa06 f609 	lsl.w	r6, r6, r9
 80030e0:	4332      	orrs	r2, r6
 80030e2:	e772      	b.n	8002fca <HAL_GPIO_Init+0xde>
 80030e4:	2602      	movs	r6, #2
 80030e6:	fa06 f609 	lsl.w	r6, r6, r9
 80030ea:	4332      	orrs	r2, r6
 80030ec:	e76d      	b.n	8002fca <HAL_GPIO_Init+0xde>
 80030ee:	2606      	movs	r6, #6
 80030f0:	fa06 f609 	lsl.w	r6, r6, r9
 80030f4:	4332      	orrs	r2, r6
 80030f6:	e768      	b.n	8002fca <HAL_GPIO_Init+0xde>
 80030f8:	2604      	movs	r6, #4
 80030fa:	fa06 f609 	lsl.w	r6, r6, r9
 80030fe:	4332      	orrs	r2, r6
 8003100:	e763      	b.n	8002fca <HAL_GPIO_Init+0xde>
 8003102:	2605      	movs	r6, #5
 8003104:	fa06 f609 	lsl.w	r6, r6, r9
 8003108:	4332      	orrs	r2, r6
 800310a:	e75e      	b.n	8002fca <HAL_GPIO_Init+0xde>
 800310c:	2607      	movs	r6, #7
 800310e:	fa06 f609 	lsl.w	r6, r6, r9
 8003112:	4332      	orrs	r2, r6
 8003114:	e759      	b.n	8002fca <HAL_GPIO_Init+0xde>
 8003116:	bf00      	nop
 8003118:	58024400 	.word	0x58024400
 800311c:	58020000 	.word	0x58020000
 8003120:	58020800 	.word	0x58020800
 8003124:	58020c00 	.word	0x58020c00
 8003128:	58021000 	.word	0x58021000
 800312c:	58021400 	.word	0x58021400
 8003130:	58021800 	.word	0x58021800
 8003134:	58021c00 	.word	0x58021c00
 8003138:	58022400 	.word	0x58022400

0800313c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800313c:	b902      	cbnz	r2, 8003140 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800313e:	0409      	lsls	r1, r1, #16
 8003140:	6181      	str	r1, [r0, #24]
  }
}
 8003142:	4770      	bx	lr

08003144 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tickstart = HAL_GetTick();
 8003148:	f7fe fdf6 	bl	8001d38 <HAL_GetTick>

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800314c:	2c00      	cmp	r4, #0
 800314e:	d065      	beq.n	800321c <HAL_OSPI_Init+0xd8>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003150:	4605      	mov	r5, r0
 8003152:	2000      	movs	r0, #0
 8003154:	6560      	str	r0, [r4, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003156:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003158:	b103      	cbz	r3, 800315c <HAL_OSPI_Init+0x18>
    }
  }

  /* Return function status */
  return status;
}
 800315a:	bd70      	pop	{r4, r5, r6, pc}
      HAL_OSPI_MspInit(hospi);
 800315c:	4620      	mov	r0, r4
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
  hospi->Timeout = Timeout;
 800315e:	f241 3688 	movw	r6, #5000	; 0x1388
      HAL_OSPI_MspInit(hospi);
 8003162:	f7fe fa61 	bl	8001628 <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 8003166:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003168:	68e2      	ldr	r2, [r4, #12]
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	69e1      	ldr	r1, [r4, #28]
 8003170:	6898      	ldr	r0, [r3, #8]
 8003172:	430a      	orrs	r2, r1
 8003174:	4931      	ldr	r1, [pc, #196]	; (800323c <HAL_OSPI_Init+0xf8>)
  hospi->Timeout = Timeout;
 8003176:	65a6      	str	r6, [r4, #88]	; 0x58
      MODIFY_REG(hospi->Instance->DCR1,
 8003178:	4001      	ands	r1, r0
 800317a:	430a      	orrs	r2, r1
 800317c:	6921      	ldr	r1, [r4, #16]
 800317e:	3901      	subs	r1, #1
 8003180:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003184:	6961      	ldr	r1, [r4, #20]
 8003186:	3901      	subs	r1, #1
 8003188:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800318c:	6a21      	ldr	r1, [r4, #32]
      MODIFY_REG(hospi->Instance->DCR1,
 800318e:	609a      	str	r2, [r3, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8003196:	430a      	orrs	r2, r1
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8003198:	6b21      	ldr	r1, [r4, #48]	; 0x30
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800319a:	60da      	str	r2, [r3, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800319c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800319e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80031a2:	6861      	ldr	r1, [r4, #4]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80031a4:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80031a6:	3901      	subs	r1, #1
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80031a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80031aa:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80031b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031b6:	601a      	str	r2, [r3, #0]
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80031b8:	e005      	b.n	80031c6 <HAL_OSPI_Init+0x82>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7fe fdbd 	bl	8001d38 <HAL_GetTick>
 80031be:	1b43      	subs	r3, r0, r5
 80031c0:	42b3      	cmp	r3, r6
 80031c2:	d82d      	bhi.n	8003220 <HAL_OSPI_Init+0xdc>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	6a1a      	ldr	r2, [r3, #32]
 80031c8:	0692      	lsls	r2, r2, #26
 80031ca:	d4f6      	bmi.n	80031ba <HAL_OSPI_Init+0x76>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80031cc:	68d9      	ldr	r1, [r3, #12]
 80031ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031d0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80031d4:	68a0      	ldr	r0, [r4, #8]
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80031d6:	3a01      	subs	r2, #1
 80031d8:	430a      	orrs	r2, r1
 80031da:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80031dc:	6819      	ldr	r1, [r3, #0]
 80031de:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80031e2:	4301      	orrs	r1, r0
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80031e4:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80031e8:	6019      	str	r1, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80031ea:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80031ee:	4302      	orrs	r2, r0
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80031f0:	69a0      	ldr	r0, [r4, #24]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80031f2:	f021 41a0 	bic.w	r1, r1, #1342177280	; 0x50000000
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80031f6:	2802      	cmp	r0, #2
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80031f8:	ea42 0201 	orr.w	r2, r2, r1
 80031fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003208:	d012      	beq.n	8003230 <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800320a:	68e3      	ldr	r3, [r4, #12]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800320c:	2000      	movs	r0, #0
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800320e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
          hospi->State = HAL_OSPI_STATE_READY;
 8003216:	2302      	movne	r3, #2
 8003218:	6523      	str	r3, [r4, #80]	; 0x50
}
 800321a:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_ERROR;
 800321c:	2001      	movs	r0, #1
}
 800321e:	bd70      	pop	{r4, r5, r6, pc}
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003220:	f44f 7300 	mov.w	r3, #512	; 0x200
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003224:	2001      	movs	r0, #1
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003226:	6523      	str	r3, [r4, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003228:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800322a:	4303      	orrs	r3, r0
 800322c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800322e:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	f042 0202 	orr.w	r2, r2, #2
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	e7e7      	b.n	800320a <HAL_OSPI_Init+0xc6>
 800323a:	bf00      	nop
 800323c:	f8e0f8f4 	.word	0xf8e0f8f4

08003240 <HAL_OSPIM_Config>:
  if (hospi->Instance == OCTOSPI1)
 8003240:	4b93      	ldr	r3, [pc, #588]	; (8003490 <HAL_OSPIM_Config+0x250>)
 8003242:	6802      	ldr	r2, [r0, #0]
 8003244:	429a      	cmp	r2, r3
{
 8003246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800324a:	b091      	sub	sp, #68	; 0x44
  if (hospi->Instance == OCTOSPI1)
 800324c:	f000 813e 	beq.w	80034cc <HAL_OSPIM_Config+0x28c>
 8003250:	2200      	movs	r2, #0
 8003252:	f44f 7600 	mov.w	r6, #512	; 0x200
    instance = 1U;
 8003256:	2401      	movs	r4, #1
    other_instance = 0U;
 8003258:	4615      	mov	r5, r2
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
    cfg->DQSPort    = 0U;
    cfg->NCSPort    = 0U;
    cfg->IOLowPort  = 0U;
    cfg->IOHighPort = 0U;
 800325a:	2300      	movs	r3, #0
    cfg->ClkPort    = 0U;
 800325c:	f04f 0800 	mov.w	r8, #0
 8003260:	f04f 0900 	mov.w	r9, #0
    cfg->IOHighPort = 0U;
 8003264:	9308      	str	r3, [sp, #32]
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
    {
      reg = OCTOSPIM->PCR[index];
 8003266:	4b8b      	ldr	r3, [pc, #556]	; (8003494 <HAL_OSPIM_Config+0x254>)
    cfg->ClkPort    = 0U;
 8003268:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800326c:	e9cd 8906 	strd	r8, r9, [sp, #24]
      reg = OCTOSPIM->PCR[index];
 8003270:	685b      	ldr	r3, [r3, #4]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003272:	07d8      	lsls	r0, r3, #31
 8003274:	d503      	bpl.n	800327e <HAL_OSPIM_Config+0x3e>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003276:	079f      	lsls	r7, r3, #30
 8003278:	d401      	bmi.n	800327e <HAL_OSPIM_Config+0x3e>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800327a:	2001      	movs	r0, #1
 800327c:	9004      	str	r0, [sp, #16]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800327e:	06d8      	lsls	r0, r3, #27
 8003280:	d503      	bpl.n	800328a <HAL_OSPIM_Config+0x4a>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003282:	069f      	lsls	r7, r3, #26
 8003284:	d401      	bmi.n	800328a <HAL_OSPIM_Config+0x4a>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003286:	2001      	movs	r0, #1
 8003288:	9005      	str	r0, [sp, #20]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800328a:	05d8      	lsls	r0, r3, #23
 800328c:	d503      	bpl.n	8003296 <HAL_OSPIM_Config+0x56>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800328e:	059f      	lsls	r7, r3, #22
 8003290:	d401      	bmi.n	8003296 <HAL_OSPIM_Config+0x56>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003292:	2001      	movs	r0, #1
 8003294:	9006      	str	r0, [sp, #24]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003296:	03d8      	lsls	r0, r3, #15
 8003298:	d507      	bpl.n	80032aa <HAL_OSPIM_Config+0x6a>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800329a:	035f      	lsls	r7, r3, #13
 800329c:	d405      	bmi.n	80032aa <HAL_OSPIM_Config+0x6a>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800329e:	0398      	lsls	r0, r3, #14
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80032a0:	bf54      	ite	pl
 80032a2:	f04f 1001 	movpl.w	r0, #65537	; 0x10001
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80032a6:	487c      	ldrmi	r0, [pc, #496]	; (8003498 <HAL_OSPIM_Config+0x258>)
 80032a8:	9007      	str	r0, [sp, #28]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80032aa:	01df      	lsls	r7, r3, #7
 80032ac:	d507      	bpl.n	80032be <HAL_OSPIM_Config+0x7e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80032ae:	0158      	lsls	r0, r3, #5
 80032b0:	d405      	bmi.n	80032be <HAL_OSPIM_Config+0x7e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80032b2:	019f      	lsls	r7, r3, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80032b4:	bf54      	ite	pl
 80032b6:	f04f 1301 	movpl.w	r3, #65537	; 0x10001
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80032ba:	4b77      	ldrmi	r3, [pc, #476]	; (8003498 <HAL_OSPIM_Config+0x258>)
 80032bc:	9308      	str	r3, [sp, #32]
      reg = OCTOSPIM->PCR[index];
 80032be:	4b75      	ldr	r3, [pc, #468]	; (8003494 <HAL_OSPIM_Config+0x254>)
 80032c0:	689b      	ldr	r3, [r3, #8]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80032c2:	07d8      	lsls	r0, r3, #31
 80032c4:	d503      	bpl.n	80032ce <HAL_OSPIM_Config+0x8e>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80032c6:	079f      	lsls	r7, r3, #30
 80032c8:	d401      	bmi.n	80032ce <HAL_OSPIM_Config+0x8e>
          cfg->ClkPort = index + 1U;
 80032ca:	2002      	movs	r0, #2
 80032cc:	9004      	str	r0, [sp, #16]
      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80032ce:	06d8      	lsls	r0, r3, #27
 80032d0:	d503      	bpl.n	80032da <HAL_OSPIM_Config+0x9a>
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80032d2:	069f      	lsls	r7, r3, #26
 80032d4:	d401      	bmi.n	80032da <HAL_OSPIM_Config+0x9a>
          cfg->DQSPort = index + 1U;
 80032d6:	2002      	movs	r0, #2
 80032d8:	9005      	str	r0, [sp, #20]
      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80032da:	05d8      	lsls	r0, r3, #23
 80032dc:	d503      	bpl.n	80032e6 <HAL_OSPIM_Config+0xa6>
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80032de:	059f      	lsls	r7, r3, #22
 80032e0:	d401      	bmi.n	80032e6 <HAL_OSPIM_Config+0xa6>
          cfg->NCSPort = index + 1U;
 80032e2:	2002      	movs	r0, #2
 80032e4:	9006      	str	r0, [sp, #24]
      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80032e6:	03d8      	lsls	r0, r3, #15
 80032e8:	d506      	bpl.n	80032f8 <HAL_OSPIM_Config+0xb8>
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80032ea:	035f      	lsls	r7, r3, #13
 80032ec:	d404      	bmi.n	80032f8 <HAL_OSPIM_Config+0xb8>
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80032ee:	0398      	lsls	r0, r3, #14
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80032f0:	bf54      	ite	pl
 80032f2:	486a      	ldrpl	r0, [pc, #424]	; (800349c <HAL_OSPIM_Config+0x25c>)
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80032f4:	486a      	ldrmi	r0, [pc, #424]	; (80034a0 <HAL_OSPIM_Config+0x260>)
 80032f6:	9007      	str	r0, [sp, #28]
      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80032f8:	01df      	lsls	r7, r3, #7
 80032fa:	f100 80d7 	bmi.w	80034ac <HAL_OSPIM_Config+0x26c>
    cfg->ClkPort    = 0U;
 80032fe:	f04f 0800 	mov.w	r8, #0
 8003302:	f04f 0900 	mov.w	r9, #0
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8003306:	4863      	ldr	r0, [pc, #396]	; (8003494 <HAL_OSPIM_Config+0x254>)
    cfg->IOHighPort = 0U;
 8003308:	2700      	movs	r7, #0
        value = OCTOSPIM_PCR_NCSSRC;
 800330a:	4b66      	ldr	r3, [pc, #408]	; (80034a4 <HAL_OSPIM_Config+0x264>)
    cfg->IOHighPort = 0U;
 800330c:	970e      	str	r7, [sp, #56]	; 0x38
    cfg->ClkPort    = 0U;
 800330e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8003312:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8003316:	6807      	ldr	r7, [r0, #0]
      reg = OCTOSPIM->PCR[index];
 8003318:	6840      	ldr	r0, [r0, #4]
        value = OCTOSPIM_PCR_NCSSRC;
 800331a:	f017 0f01 	tst.w	r7, #1
 800331e:	bf18      	it	ne
 8003320:	f44f 7300 	movne.w	r3, #512	; 0x200
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003324:	07c7      	lsls	r7, r0, #31
 8003326:	d505      	bpl.n	8003334 <HAL_OSPIM_Config+0xf4>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003328:	ea80 0703 	eor.w	r7, r0, r3
 800332c:	07bf      	lsls	r7, r7, #30
 800332e:	d401      	bmi.n	8003334 <HAL_OSPIM_Config+0xf4>
          cfg->ClkPort = index + 1U;
 8003330:	2701      	movs	r7, #1
 8003332:	970a      	str	r7, [sp, #40]	; 0x28
      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003334:	06c7      	lsls	r7, r0, #27
 8003336:	d505      	bpl.n	8003344 <HAL_OSPIM_Config+0x104>
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003338:	ea80 0703 	eor.w	r7, r0, r3
 800333c:	06bf      	lsls	r7, r7, #26
 800333e:	d401      	bmi.n	8003344 <HAL_OSPIM_Config+0x104>
          cfg->DQSPort = index + 1U;
 8003340:	2701      	movs	r7, #1
 8003342:	970b      	str	r7, [sp, #44]	; 0x2c
      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003344:	05c7      	lsls	r7, r0, #23
 8003346:	d505      	bpl.n	8003354 <HAL_OSPIM_Config+0x114>
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003348:	ea80 0703 	eor.w	r7, r0, r3
 800334c:	05bf      	lsls	r7, r7, #22
 800334e:	d401      	bmi.n	8003354 <HAL_OSPIM_Config+0x114>
          cfg->NCSPort = index + 1U;
 8003350:	2701      	movs	r7, #1
 8003352:	970c      	str	r7, [sp, #48]	; 0x30
      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003354:	03c7      	lsls	r7, r0, #15
 8003356:	d509      	bpl.n	800336c <HAL_OSPIM_Config+0x12c>
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003358:	ea80 0703 	eor.w	r7, r0, r3
 800335c:	037f      	lsls	r7, r7, #13
 800335e:	d405      	bmi.n	800336c <HAL_OSPIM_Config+0x12c>
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003360:	0387      	lsls	r7, r0, #14
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003362:	bf4c      	ite	mi
 8003364:	4f4c      	ldrmi	r7, [pc, #304]	; (8003498 <HAL_OSPIM_Config+0x258>)
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003366:	f04f 1701 	movpl.w	r7, #65537	; 0x10001
 800336a:	970d      	str	r7, [sp, #52]	; 0x34
      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800336c:	01c7      	lsls	r7, r0, #7
 800336e:	d509      	bpl.n	8003384 <HAL_OSPIM_Config+0x144>
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003370:	ea80 0703 	eor.w	r7, r0, r3
 8003374:	017f      	lsls	r7, r7, #5
 8003376:	d405      	bmi.n	8003384 <HAL_OSPIM_Config+0x144>
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003378:	0180      	lsls	r0, r0, #6
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800337a:	bf4c      	ite	mi
 800337c:	4846      	ldrmi	r0, [pc, #280]	; (8003498 <HAL_OSPIM_Config+0x258>)
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800337e:	f04f 1001 	movpl.w	r0, #65537	; 0x10001
 8003382:	900e      	str	r0, [sp, #56]	; 0x38
      reg = OCTOSPIM->PCR[index];
 8003384:	4843      	ldr	r0, [pc, #268]	; (8003494 <HAL_OSPIM_Config+0x254>)
 8003386:	6880      	ldr	r0, [r0, #8]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003388:	07c7      	lsls	r7, r0, #31
 800338a:	d505      	bpl.n	8003398 <HAL_OSPIM_Config+0x158>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800338c:	ea80 0703 	eor.w	r7, r0, r3
 8003390:	07bf      	lsls	r7, r7, #30
 8003392:	d401      	bmi.n	8003398 <HAL_OSPIM_Config+0x158>
          cfg->ClkPort = index + 1U;
 8003394:	2702      	movs	r7, #2
 8003396:	970a      	str	r7, [sp, #40]	; 0x28
      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003398:	06c7      	lsls	r7, r0, #27
 800339a:	d505      	bpl.n	80033a8 <HAL_OSPIM_Config+0x168>
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800339c:	ea80 0703 	eor.w	r7, r0, r3
 80033a0:	06bf      	lsls	r7, r7, #26
 80033a2:	d401      	bmi.n	80033a8 <HAL_OSPIM_Config+0x168>
          cfg->DQSPort = index + 1U;
 80033a4:	2702      	movs	r7, #2
 80033a6:	970b      	str	r7, [sp, #44]	; 0x2c
      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80033a8:	05c7      	lsls	r7, r0, #23
 80033aa:	d505      	bpl.n	80033b8 <HAL_OSPIM_Config+0x178>
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80033ac:	ea80 0703 	eor.w	r7, r0, r3
 80033b0:	05bf      	lsls	r7, r7, #22
 80033b2:	d401      	bmi.n	80033b8 <HAL_OSPIM_Config+0x178>
          cfg->NCSPort = index + 1U;
 80033b4:	2702      	movs	r7, #2
 80033b6:	970c      	str	r7, [sp, #48]	; 0x30
      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80033b8:	03c7      	lsls	r7, r0, #15
 80033ba:	d508      	bpl.n	80033ce <HAL_OSPIM_Config+0x18e>
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80033bc:	ea80 0703 	eor.w	r7, r0, r3
 80033c0:	037f      	lsls	r7, r7, #13
 80033c2:	d404      	bmi.n	80033ce <HAL_OSPIM_Config+0x18e>
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80033c4:	0387      	lsls	r7, r0, #14
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80033c6:	bf4c      	ite	mi
 80033c8:	4f35      	ldrmi	r7, [pc, #212]	; (80034a0 <HAL_OSPIM_Config+0x260>)
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80033ca:	4f34      	ldrpl	r7, [pc, #208]	; (800349c <HAL_OSPIM_Config+0x25c>)
 80033cc:	970d      	str	r7, [sp, #52]	; 0x34
      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80033ce:	01c7      	lsls	r7, r0, #7
 80033d0:	d455      	bmi.n	800347e <HAL_OSPIM_Config+0x23e>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80033d2:	482f      	ldr	r0, [pc, #188]	; (8003490 <HAL_OSPIM_Config+0x250>)
 80033d4:	6803      	ldr	r3, [r0, #0]
 80033d6:	f013 0301 	ands.w	r3, r3, #1
 80033da:	d004      	beq.n	80033e6 <HAL_OSPIM_Config+0x1a6>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80033dc:	6803      	ldr	r3, [r0, #0]
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	6003      	str	r3, [r0, #0]
      ospi_enabled |= 0x1U;
 80033e4:	2301      	movs	r3, #1
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80033e6:	4f30      	ldr	r7, [pc, #192]	; (80034a8 <HAL_OSPIM_Config+0x268>)
 80033e8:	6838      	ldr	r0, [r7, #0]
 80033ea:	f010 0001 	ands.w	r0, r0, #1
 80033ee:	d166      	bne.n	80034be <HAL_OSPIM_Config+0x27e>
 80033f0:	9001      	str	r0, [sp, #4]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80033f2:	a810      	add	r0, sp, #64	; 0x40
 80033f4:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 80033f8:	4f26      	ldr	r7, [pc, #152]	; (8003494 <HAL_OSPIM_Config+0x254>)
 80033fa:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80033fe:	0060      	lsls	r0, r4, #1
 8003400:	9002      	str	r0, [sp, #8]
 8003402:	f85c 0c28 	ldr.w	r0, [ip, #-40]
 8003406:	3801      	subs	r0, #1
 8003408:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800340c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8003410:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 8003414:	f8c0 e004 	str.w	lr, [r0, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003418:	6838      	ldr	r0, [r7, #0]
 800341a:	07c0      	lsls	r0, r0, #31
 800341c:	d55b      	bpl.n	80034d6 <HAL_OSPIM_Config+0x296>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800341e:	6838      	ldr	r0, [r7, #0]
 8003420:	f020 0001 	bic.w	r0, r0, #1
 8003424:	6038      	str	r0, [r7, #0]
      if (other_instance == 1U)
 8003426:	2d00      	cmp	r5, #0
 8003428:	f040 81d9 	bne.w	80037de <HAL_OSPIM_Config+0x59e>
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800342c:	a810      	add	r0, sp, #64	; 0x40
 800342e:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8003432:	680d      	ldr	r5, [r1, #0]
 8003434:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8003438:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 800343c:	9502      	str	r5, [sp, #8]
 800343e:	f85e 0c30 	ldr.w	r0, [lr, #-48]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003442:	f85e 7c2c 	ldr.w	r7, [lr, #-44]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003446:	4285      	cmp	r5, r0
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003448:	684d      	ldr	r5, [r1, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800344a:	f000 81fa 	beq.w	8003842 <HAL_OSPIM_Config+0x602>
 800344e:	42bd      	cmp	r5, r7
 8003450:	d07d      	beq.n	800354e <HAL_OSPIM_Config+0x30e>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003452:	f8d1 b008 	ldr.w	fp, [r1, #8]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003456:	f85e 7c28 	ldr.w	r7, [lr, #-40]
 800345a:	45bb      	cmp	fp, r7
 800345c:	f000 81eb 	beq.w	8003836 <HAL_OSPIM_Config+0x5f6>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003460:	f85e 7c24 	ldr.w	r7, [lr, #-36]
 8003464:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8003468:	45b8      	cmp	r8, r7
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800346a:	f85e 7c20 	ldr.w	r7, [lr, #-32]
 800346e:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8003472:	9703      	str	r7, [sp, #12]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003474:	d072      	beq.n	800355c <HAL_OSPIM_Config+0x31c>
 8003476:	45be      	cmp	lr, r7
 8003478:	f040 80b4 	bne.w	80035e4 <HAL_OSPIM_Config+0x3a4>
 800347c:	e06e      	b.n	800355c <HAL_OSPIM_Config+0x31c>
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800347e:	4043      	eors	r3, r0
 8003480:	015b      	lsls	r3, r3, #5
 8003482:	d4a6      	bmi.n	80033d2 <HAL_OSPIM_Config+0x192>
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003484:	0187      	lsls	r7, r0, #6
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003486:	bf4c      	ite	mi
 8003488:	4b05      	ldrmi	r3, [pc, #20]	; (80034a0 <HAL_OSPIM_Config+0x260>)
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800348a:	4b04      	ldrpl	r3, [pc, #16]	; (800349c <HAL_OSPIM_Config+0x25c>)
 800348c:	930e      	str	r3, [sp, #56]	; 0x38
      }
    }
  }

  /* Return function status */
  return status;
 800348e:	e7a0      	b.n	80033d2 <HAL_OSPIM_Config+0x192>
 8003490:	52005000 	.word	0x52005000
 8003494:	5200b400 	.word	0x5200b400
 8003498:	01000001 	.word	0x01000001
 800349c:	00010002 	.word	0x00010002
 80034a0:	01000002 	.word	0x01000002
 80034a4:	04040222 	.word	0x04040222
 80034a8:	5200a000 	.word	0x5200a000
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80034ac:	0158      	lsls	r0, r3, #5
 80034ae:	f53f af26 	bmi.w	80032fe <HAL_OSPIM_Config+0xbe>
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80034b2:	019b      	lsls	r3, r3, #6
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80034b4:	bf54      	ite	pl
 80034b6:	4bb3      	ldrpl	r3, [pc, #716]	; (8003784 <HAL_OSPIM_Config+0x544>)
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80034b8:	4bb3      	ldrmi	r3, [pc, #716]	; (8003788 <HAL_OSPIM_Config+0x548>)
 80034ba:	9308      	str	r3, [sp, #32]
  return status;
 80034bc:	e71f      	b.n	80032fe <HAL_OSPIM_Config+0xbe>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80034be:	6838      	ldr	r0, [r7, #0]
 80034c0:	f020 0001 	bic.w	r0, r0, #1
 80034c4:	6038      	str	r0, [r7, #0]
 80034c6:	2002      	movs	r0, #2
 80034c8:	9001      	str	r0, [sp, #4]
 80034ca:	e792      	b.n	80033f2 <HAL_OSPIM_Config+0x1b2>
 80034cc:	2600      	movs	r6, #0
 80034ce:	2201      	movs	r2, #1
    instance = 0U;
 80034d0:	4634      	mov	r4, r6
    other_instance = 1U;
 80034d2:	4615      	mov	r5, r2
 80034d4:	e6c1      	b.n	800325a <HAL_OSPIM_Config+0x1a>
      if (IOM_cfg[instance].ClkPort != 0U)
 80034d6:	f85c 0c30 	ldr.w	r0, [ip, #-48]
 80034da:	2800      	cmp	r0, #0
 80034dc:	d0a6      	beq.n	800342c <HAL_OSPIM_Config+0x1ec>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80034de:	3801      	subs	r0, #1
 80034e0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80034e4:	6845      	ldr	r5, [r0, #4]
 80034e6:	f025 0501 	bic.w	r5, r5, #1
 80034ea:	6045      	str	r5, [r0, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80034ec:	f85c 0c2c 	ldr.w	r0, [ip, #-44]
 80034f0:	b130      	cbz	r0, 8003500 <HAL_OSPIM_Config+0x2c0>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80034f2:	3801      	subs	r0, #1
 80034f4:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f020 0010 	bic.w	r0, r0, #16
 80034fe:	6078      	str	r0, [r7, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003500:	0060      	lsls	r0, r4, #1
 8003502:	ad10      	add	r5, sp, #64	; 0x40
 8003504:	4420      	add	r0, r4
 8003506:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 800350a:	f850 0c24 	ldr.w	r0, [r0, #-36]
 800350e:	b148      	cbz	r0, 8003524 <HAL_OSPIM_Config+0x2e4>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003510:	3801      	subs	r0, #1
 8003512:	4d9e      	ldr	r5, [pc, #632]	; (800378c <HAL_OSPIM_Config+0x54c>)
 8003514:	f000 0001 	and.w	r0, r0, #1
 8003518:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800351c:	6845      	ldr	r5, [r0, #4]
 800351e:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 8003522:	6045      	str	r5, [r0, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003524:	0060      	lsls	r0, r4, #1
 8003526:	ad10      	add	r5, sp, #64	; 0x40
 8003528:	4420      	add	r0, r4
 800352a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 800352e:	f850 0c20 	ldr.w	r0, [r0, #-32]
 8003532:	2800      	cmp	r0, #0
 8003534:	f43f af7a 	beq.w	800342c <HAL_OSPIM_Config+0x1ec>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003538:	3801      	subs	r0, #1
 800353a:	4d94      	ldr	r5, [pc, #592]	; (800378c <HAL_OSPIM_Config+0x54c>)
 800353c:	f000 0001 	and.w	r0, r0, #1
 8003540:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8003544:	6845      	ldr	r5, [r0, #4]
 8003546:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 800354a:	6045      	str	r5, [r0, #4]
 800354c:	e76e      	b.n	800342c <HAL_OSPIM_Config+0x1ec>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800354e:	f85e 7c20 	ldr.w	r7, [lr, #-32]
 8003552:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8003556:	9703      	str	r7, [sp, #12]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003558:	e9d1 b802 	ldrd	fp, r8, [r1, #8]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800355c:	3801      	subs	r0, #1
 800355e:	4f8b      	ldr	r7, [pc, #556]	; (800378c <HAL_OSPIM_Config+0x54c>)
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003560:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
 8003564:	eb0c 0902 	add.w	r9, ip, r2
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003568:	eb07 0080 	add.w	r0, r7, r0, lsl #2
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800356c:	eb0a 09c9 	add.w	r9, sl, r9, lsl #3
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003570:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8003574:	f02a 0a01 	bic.w	sl, sl, #1
 8003578:	f8c0 a004 	str.w	sl, [r0, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800357c:	f859 0c2c 	ldr.w	r0, [r9, #-44]
 8003580:	b140      	cbz	r0, 8003594 <HAL_OSPIM_Config+0x354>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003582:	3801      	subs	r0, #1
 8003584:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8003588:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800358c:	f029 0910 	bic.w	r9, r9, #16
 8003590:	f8c0 9004 	str.w	r9, [r0, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003594:	4494      	add	ip, r2
 8003596:	aa10      	add	r2, sp, #64	; 0x40
 8003598:	487c      	ldr	r0, [pc, #496]	; (800378c <HAL_OSPIM_Config+0x54c>)
 800359a:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
 800359e:	f85c 2c28 	ldr.w	r2, [ip, #-40]
 80035a2:	3a01      	subs	r2, #1
 80035a4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80035a8:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80035ac:	f429 7980 	bic.w	r9, r9, #256	; 0x100
 80035b0:	f8c2 9004 	str.w	r9, [r2, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80035b4:	f85c 2c24 	ldr.w	r2, [ip, #-36]
 80035b8:	b142      	cbz	r2, 80035cc <HAL_OSPIM_Config+0x38c>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80035ba:	3a01      	subs	r2, #1
 80035bc:	f002 0201 	and.w	r2, r2, #1
 80035c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80035c4:	6850      	ldr	r0, [r2, #4]
 80035c6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80035ca:	6050      	str	r0, [r2, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80035cc:	9a03      	ldr	r2, [sp, #12]
 80035ce:	b14a      	cbz	r2, 80035e4 <HAL_OSPIM_Config+0x3a4>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80035d0:	3a01      	subs	r2, #1
 80035d2:	486e      	ldr	r0, [pc, #440]	; (800378c <HAL_OSPIM_Config+0x54c>)
 80035d4:	f002 0201 	and.w	r2, r2, #1
 80035d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80035dc:	6850      	ldr	r0, [r2, #4]
 80035de:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 80035e2:	6050      	str	r0, [r2, #4]
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80035e4:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800378c <HAL_OSPIM_Config+0x54c>
 80035e8:	f10b 30ff 	add.w	r0, fp, #4294967295
 80035ec:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 80035f0:	6842      	ldr	r2, [r0, #4]
 80035f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80035f6:	4332      	orrs	r2, r6
 80035f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035fc:	6042      	str	r2, [r0, #4]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80035fe:	694a      	ldr	r2, [r1, #20]
 8003600:	f8dc 1000 	ldr.w	r1, [ip]
 8003604:	3a01      	subs	r2, #1
 8003606:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800360a:	428a      	cmp	r2, r1
 800360c:	d907      	bls.n	800361e <HAL_OSPIM_Config+0x3de>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800360e:	f8dc 1000 	ldr.w	r1, [ip]
 8003612:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 8003616:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800361a:	f8cc 2000 	str.w	r2, [ip]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800361e:	4a5b      	ldr	r2, [pc, #364]	; (800378c <HAL_OSPIM_Config+0x54c>)
 8003620:	6811      	ldr	r1, [r2, #0]
 8003622:	f011 0f01 	tst.w	r1, #1
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8003626:	9902      	ldr	r1, [sp, #8]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003628:	d048      	beq.n	80036bc <HAL_OSPIM_Config+0x47c>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800362a:	1e48      	subs	r0, r1, #1
 800362c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8003630:	6841      	ldr	r1, [r0, #4]
 8003632:	f021 0103 	bic.w	r1, r1, #3
 8003636:	f041 0101 	orr.w	r1, r1, #1
 800363a:	6041      	str	r1, [r0, #4]
      if (cfg->DQSPort != 0U)
 800363c:	b145      	cbz	r5, 8003650 <HAL_OSPIM_Config+0x410>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800363e:	3d01      	subs	r5, #1
 8003640:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8003644:	686a      	ldr	r2, [r5, #4]
 8003646:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800364a:	f042 0210 	orr.w	r2, r2, #16
 800364e:	606a      	str	r2, [r5, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003650:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 8003654:	f040 80a0 	bne.w	8003798 <HAL_OSPIM_Config+0x558>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003658:	f1b8 0f00 	cmp.w	r8, #0
 800365c:	d00c      	beq.n	8003678 <HAL_OSPIM_Config+0x438>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800365e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003662:	494a      	ldr	r1, [pc, #296]	; (800378c <HAL_OSPIM_Config+0x54c>)
 8003664:	f008 0801 	and.w	r8, r8, #1
 8003668:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800366c:	684a      	ldr	r2, [r1, #4]
 800366e:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8003672:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003676:	604a      	str	r2, [r1, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003678:	f41e 3f80 	tst.w	lr, #65536	; 0x10000
 800367c:	f000 809d 	beq.w	80037ba <HAL_OSPIM_Config+0x57a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003680:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003684:	4941      	ldr	r1, [pc, #260]	; (800378c <HAL_OSPIM_Config+0x54c>)
 8003686:	f00e 0e01 	and.w	lr, lr, #1
 800368a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800368e:	684a      	ldr	r2, [r1, #4]
 8003690:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8003694:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003698:	604a      	str	r2, [r1, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 800369a:	b123      	cbz	r3, 80036a6 <HAL_OSPIM_Config+0x466>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800369c:	4a3c      	ldr	r2, [pc, #240]	; (8003790 <HAL_OSPIM_Config+0x550>)
 800369e:	6813      	ldr	r3, [r2, #0]
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 80036a6:	9b01      	ldr	r3, [sp, #4]
 80036a8:	b123      	cbz	r3, 80036b4 <HAL_OSPIM_Config+0x474>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80036aa:	4a3a      	ldr	r2, [pc, #232]	; (8003794 <HAL_OSPIM_Config+0x554>)
 80036ac:	6813      	ldr	r3, [r2, #0]
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6013      	str	r3, [r2, #0]
}
 80036b4:	2000      	movs	r0, #0
 80036b6:	b011      	add	sp, #68	; 0x44
 80036b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80036bc:	1e4f      	subs	r7, r1, #1
 80036be:	0060      	lsls	r0, r4, #1
 80036c0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	f021 0103 	bic.w	r1, r1, #3
 80036ca:	4301      	orrs	r1, r0
 80036cc:	f041 0101 	orr.w	r1, r1, #1
 80036d0:	6079      	str	r1, [r7, #4]
      if (cfg->DQSPort != 0U)
 80036d2:	b155      	cbz	r5, 80036ea <HAL_OSPIM_Config+0x4aa>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80036d4:	3d01      	subs	r5, #1
 80036d6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80036da:	6851      	ldr	r1, [r2, #4]
 80036dc:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80036e0:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 80036e4:	f041 0110 	orr.w	r1, r1, #16
 80036e8:	6051      	str	r1, [r2, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80036ea:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 80036ee:	d124      	bne.n	800373a <HAL_OSPIM_Config+0x4fa>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80036f0:	f1b8 0f00 	cmp.w	r8, #0
 80036f4:	d00e      	beq.n	8003714 <HAL_OSPIM_Config+0x4d4>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80036f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80036fa:	4924      	ldr	r1, [pc, #144]	; (800378c <HAL_OSPIM_Config+0x54c>)
 80036fc:	f008 0801 	and.w	r8, r8, #1
 8003700:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8003704:	684a      	ldr	r2, [r1, #4]
 8003706:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800370a:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 800370e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003712:	604a      	str	r2, [r1, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003714:	f41e 3f80 	tst.w	lr, #65536	; 0x10000
 8003718:	d021      	beq.n	800375e <HAL_OSPIM_Config+0x51e>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800371a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800371e:	491b      	ldr	r1, [pc, #108]	; (800378c <HAL_OSPIM_Config+0x54c>)
 8003720:	f00e 0e01 	and.w	lr, lr, #1
 8003724:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8003728:	684a      	ldr	r2, [r1, #4]
 800372a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800372e:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
 8003732:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003736:	604a      	str	r2, [r1, #4]
 8003738:	e7af      	b.n	800369a <HAL_OSPIM_Config+0x45a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800373a:	f108 38ff 	add.w	r8, r8, #4294967295
 800373e:	4913      	ldr	r1, [pc, #76]	; (800378c <HAL_OSPIM_Config+0x54c>)
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003740:	f41e 3f80 	tst.w	lr, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003744:	f008 0801 	and.w	r8, r8, #1
 8003748:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800374c:	684a      	ldr	r2, [r1, #4]
 800374e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8003752:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
 8003756:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800375a:	604a      	str	r2, [r1, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800375c:	d1dd      	bne.n	800371a <HAL_OSPIM_Config+0x4da>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800375e:	f1be 0f00 	cmp.w	lr, #0
 8003762:	d09a      	beq.n	800369a <HAL_OSPIM_Config+0x45a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003764:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003768:	4908      	ldr	r1, [pc, #32]	; (800378c <HAL_OSPIM_Config+0x54c>)
 800376a:	f00e 0e01 	and.w	lr, lr, #1
 800376e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8003772:	684a      	ldr	r2, [r1, #4]
 8003774:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8003778:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 800377c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003780:	604a      	str	r2, [r1, #4]
 8003782:	e78a      	b.n	800369a <HAL_OSPIM_Config+0x45a>
 8003784:	00010002 	.word	0x00010002
 8003788:	01000002 	.word	0x01000002
 800378c:	5200b400 	.word	0x5200b400
 8003790:	52005000 	.word	0x52005000
 8003794:	5200a000 	.word	0x5200a000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003798:	f108 38ff 	add.w	r8, r8, #4294967295
 800379c:	4939      	ldr	r1, [pc, #228]	; (8003884 <HAL_OSPIM_Config+0x644>)
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800379e:	f41e 3f80 	tst.w	lr, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037a2:	f008 0801 	and.w	r8, r8, #1
 80037a6:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80037aa:	684a      	ldr	r2, [r1, #4]
 80037ac:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80037b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037b4:	604a      	str	r2, [r1, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80037b6:	f47f af63 	bne.w	8003680 <HAL_OSPIM_Config+0x440>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80037ba:	f1be 0f00 	cmp.w	lr, #0
 80037be:	f43f af6c 	beq.w	800369a <HAL_OSPIM_Config+0x45a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037c2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80037c6:	492f      	ldr	r1, [pc, #188]	; (8003884 <HAL_OSPIM_Config+0x644>)
 80037c8:	f00e 0e01 	and.w	lr, lr, #1
 80037cc:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80037d0:	684a      	ldr	r2, [r1, #4]
 80037d2:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80037d6:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80037da:	604a      	str	r2, [r1, #4]
 80037dc:	e75d      	b.n	800369a <HAL_OSPIM_Config+0x45a>
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80037de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80037e0:	3801      	subs	r0, #1
 80037e2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80037e6:	6845      	ldr	r5, [r0, #4]
 80037e8:	f045 0502 	orr.w	r5, r5, #2
 80037ec:	6045      	str	r5, [r0, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80037ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80037f0:	b130      	cbz	r0, 8003800 <HAL_OSPIM_Config+0x5c0>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80037f2:	3801      	subs	r0, #1
 80037f4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80037f8:	6845      	ldr	r5, [r0, #4]
 80037fa:	f045 0520 	orr.w	r5, r5, #32
 80037fe:	6045      	str	r5, [r0, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003800:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003802:	b148      	cbz	r0, 8003818 <HAL_OSPIM_Config+0x5d8>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8003804:	3801      	subs	r0, #1
 8003806:	4d1f      	ldr	r5, [pc, #124]	; (8003884 <HAL_OSPIM_Config+0x644>)
 8003808:	f000 0001 	and.w	r0, r0, #1
 800380c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8003810:	6845      	ldr	r5, [r0, #4]
 8003812:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 8003816:	6045      	str	r5, [r0, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003818:	980e      	ldr	r0, [sp, #56]	; 0x38
 800381a:	2800      	cmp	r0, #0
 800381c:	f43f ae06 	beq.w	800342c <HAL_OSPIM_Config+0x1ec>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8003820:	3801      	subs	r0, #1
 8003822:	4d18      	ldr	r5, [pc, #96]	; (8003884 <HAL_OSPIM_Config+0x644>)
 8003824:	f000 0001 	and.w	r0, r0, #1
 8003828:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800382c:	6845      	ldr	r5, [r0, #4]
 800382e:	f045 6580 	orr.w	r5, r5, #67108864	; 0x4000000
 8003832:	6045      	str	r5, [r0, #4]
 8003834:	e5fa      	b.n	800342c <HAL_OSPIM_Config+0x1ec>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003836:	f85e 7c20 	ldr.w	r7, [lr, #-32]
 800383a:	e9d1 8e03 	ldrd	r8, lr, [r1, #12]
 800383e:	9703      	str	r7, [sp, #12]
 8003840:	e68c      	b.n	800355c <HAL_OSPIM_Config+0x31c>
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003842:	42bd      	cmp	r5, r7
 8003844:	f47f ae83 	bne.w	800354e <HAL_OSPIM_Config+0x30e>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003848:	f85e 7c24 	ldr.w	r7, [lr, #-36]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800384c:	f8d1 800c 	ldr.w	r8, [r1, #12]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003850:	45b8      	cmp	r8, r7
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003852:	f85e 7c20 	ldr.w	r7, [lr, #-32]
 8003856:	9703      	str	r7, [sp, #12]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003858:	d004      	beq.n	8003864 <HAL_OSPIM_Config+0x624>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800385a:	f8d1 b008 	ldr.w	fp, [r1, #8]
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800385e:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8003862:	e67b      	b.n	800355c <HAL_OSPIM_Config+0x31c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003864:	f8d1 e010 	ldr.w	lr, [r1, #16]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003868:	45be      	cmp	lr, r7
 800386a:	d002      	beq.n	8003872 <HAL_OSPIM_Config+0x632>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800386c:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8003870:	e674      	b.n	800355c <HAL_OSPIM_Config+0x31c>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003872:	4804      	ldr	r0, [pc, #16]	; (8003884 <HAL_OSPIM_Config+0x644>)
 8003874:	6802      	ldr	r2, [r0, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	6002      	str	r2, [r0, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800387c:	f8d1 b008 	ldr.w	fp, [r1, #8]
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003880:	e6b0      	b.n	80035e4 <HAL_OSPIM_Config+0x3a4>
 8003882:	bf00      	nop
 8003884:	5200b400 	.word	0x5200b400

08003888 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	b082      	sub	sp, #8
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800388c:	2800      	cmp	r0, #0
 800388e:	f000 81f9 	beq.w	8003c84 <HAL_PCD_Init+0x3fc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003892:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 8003896:	4604      	mov	r4, r0
 8003898:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 81ec 	beq.w	8003c7a <HAL_PCD_Init+0x3f2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038a2:	2603      	movs	r6, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038a4:	6820      	ldr	r0, [r4, #0]

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038a6:	1d25      	adds	r5, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80038a8:	f884 6495 	strb.w	r6, [r4, #1173]	; 0x495
  __HAL_PCD_DISABLE(hpcd);
 80038ac:	f004 fa72 	bl	8007d94 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038b0:	7c23      	ldrb	r3, [r4, #16]
 80038b2:	f88d 3000 	strb.w	r3, [sp]
 80038b6:	6820      	ldr	r0, [r4, #0]
 80038b8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80038bc:	f004 f95a 	bl	8007b74 <USB_CoreInit>
 80038c0:	b130      	cbz	r0, 80038d0 <HAL_PCD_Init+0x48>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 80038c2:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038c4:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80038c6:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038c8:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
}
 80038cc:	b002      	add	sp, #8
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80038d0:	4601      	mov	r1, r0
 80038d2:	6820      	ldr	r0, [r4, #0]
 80038d4:	f004 fa66 	bl	8007da4 <USB_SetCurrentMode>
 80038d8:	2800      	cmp	r0, #0
 80038da:	d1f2      	bne.n	80038c2 <HAL_PCD_Init+0x3a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038dc:	7922      	ldrb	r2, [r4, #4]
 80038de:	2a00      	cmp	r2, #0
 80038e0:	f000 81b2 	beq.w	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->IN_ep[i].num = i;
 80038e4:	f44f 7380 	mov.w	r3, #256	; 0x100
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e8:	2a01      	cmp	r2, #1
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038ea:	85e0      	strh	r0, [r4, #46]	; 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038ec:	7620      	strb	r0, [r4, #24]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038ee:	6260      	str	r0, [r4, #36]	; 0x24
    hpcd->IN_ep[i].num = i;
 80038f0:	82a3      	strh	r3, [r4, #20]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038f2:	e9c4 0007 	strd	r0, r0, [r4, #28]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f6:	f000 81cd 	beq.w	8003c94 <HAL_PCD_Init+0x40c>
    hpcd->IN_ep[i].num = i;
 80038fa:	f240 1301 	movw	r3, #257	; 0x101
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038fe:	2a02      	cmp	r2, #2
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003900:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hpcd->IN_ep[i].num = i;
 8003904:	8723      	strh	r3, [r4, #56]	; 0x38
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003906:	f04f 0301 	mov.w	r3, #1
    hpcd->IN_ep[i].xfer_len = 0U;
 800390a:	64a0      	str	r0, [r4, #72]	; 0x48
    hpcd->IN_ep[i].tx_fifo_num = i;
 800390c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003910:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003914:	f000 80e0 	beq.w	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 8003918:	f44f 7381 	mov.w	r3, #258	; 0x102
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800391c:	2a03      	cmp	r2, #3
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800391e:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
    hpcd->IN_ep[i].num = i;
 8003922:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003926:	f04f 0302 	mov.w	r3, #2
    hpcd->IN_ep[i].xfer_len = 0U;
 800392a:	66e0      	str	r0, [r4, #108]	; 0x6c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800392c:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003930:	e9c4 0019 	strd	r0, r0, [r4, #100]	; 0x64
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003934:	f000 80d0 	beq.w	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 8003938:	f240 1303 	movw	r3, #259	; 0x103
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800393c:	2a04      	cmp	r2, #4
    hpcd->IN_ep[i].tx_fifo_num = i;
 800393e:	f8a4 609a 	strh.w	r6, [r4, #154]	; 0x9a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003942:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    hpcd->IN_ep[i].xfer_len = 0U;
 8003946:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    hpcd->IN_ep[i].num = i;
 800394a:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
    hpcd->IN_ep[i].xfer_buff = 0U;
 800394e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003952:	f000 80c1 	beq.w	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 8003956:	f44f 7382 	mov.w	r3, #260	; 0x104
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395a:	2a05      	cmp	r2, #5
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800395c:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    hpcd->IN_ep[i].num = i;
 8003960:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003964:	f04f 0304 	mov.w	r3, #4
    hpcd->IN_ep[i].xfer_len = 0U;
 8003968:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    hpcd->IN_ep[i].tx_fifo_num = i;
 800396c:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003970:	e9c4 002b 	strd	r0, r0, [r4, #172]	; 0xac
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003974:	f000 80b0 	beq.w	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 8003978:	f240 1305 	movw	r3, #261	; 0x105
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397c:	2a06      	cmp	r2, #6
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800397e:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
    hpcd->IN_ep[i].num = i;
 8003982:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003986:	f04f 0305 	mov.w	r3, #5
    hpcd->IN_ep[i].xfer_len = 0U;
 800398a:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    hpcd->IN_ep[i].tx_fifo_num = i;
 800398e:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003992:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003996:	f000 809f 	beq.w	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 800399a:	f44f 7383 	mov.w	r3, #262	; 0x106
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800399e:	2a07      	cmp	r2, #7
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039a0:	f884 00f0 	strb.w	r0, [r4, #240]	; 0xf0
    hpcd->IN_ep[i].num = i;
 80039a4:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039a8:	f04f 0306 	mov.w	r3, #6
    hpcd->IN_ep[i].xfer_len = 0U;
 80039ac:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039b0:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039b4:	e9c4 003d 	strd	r0, r0, [r4, #244]	; 0xf4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b8:	f000 808e 	beq.w	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 80039bc:	f240 1107 	movw	r1, #263	; 0x107
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039c0:	2300      	movs	r3, #0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c2:	2a08      	cmp	r2, #8
    hpcd->IN_ep[i].num = i;
 80039c4:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039c8:	f04f 0107 	mov.w	r1, #7
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039cc:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
    hpcd->IN_ep[i].xfer_len = 0U;
 80039d0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039d4:	f8a4 112a 	strh.w	r1, [r4, #298]	; 0x12a
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039d8:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039dc:	d07c      	beq.n	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 80039de:	f44f 7184 	mov.w	r1, #264	; 0x108
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e2:	2a09      	cmp	r2, #9
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039e4:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
    hpcd->IN_ep[i].num = i;
 80039e8:	f8a4 1134 	strh.w	r1, [r4, #308]	; 0x134
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039ec:	f04f 0108 	mov.w	r1, #8
    hpcd->IN_ep[i].xfer_len = 0U;
 80039f0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039f4:	f8a4 114e 	strh.w	r1, [r4, #334]	; 0x14e
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039f8:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039fc:	d06c      	beq.n	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 80039fe:	f240 1109 	movw	r1, #265	; 0x109
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a02:	2a0a      	cmp	r2, #10
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a04:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
    hpcd->IN_ep[i].num = i;
 8003a08:	f8a4 1158 	strh.w	r1, [r4, #344]	; 0x158
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a0c:	f04f 0109 	mov.w	r1, #9
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a10:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a14:	f8a4 1172 	strh.w	r1, [r4, #370]	; 0x172
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a18:	e9c4 3358 	strd	r3, r3, [r4, #352]	; 0x160
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1c:	d05c      	beq.n	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 8003a1e:	f44f 7185 	mov.w	r1, #266	; 0x10a
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a22:	2a0b      	cmp	r2, #11
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a24:	f884 3180 	strb.w	r3, [r4, #384]	; 0x180
    hpcd->IN_ep[i].num = i;
 8003a28:	f8a4 117c 	strh.w	r1, [r4, #380]	; 0x17c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a2c:	f04f 010a 	mov.w	r1, #10
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a30:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a34:	f8a4 1196 	strh.w	r1, [r4, #406]	; 0x196
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a38:	e9c4 3361 	strd	r3, r3, [r4, #388]	; 0x184
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a3c:	d04c      	beq.n	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 8003a3e:	f240 110b 	movw	r1, #267	; 0x10b
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a42:	2a0c      	cmp	r2, #12
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a44:	f884 31a4 	strb.w	r3, [r4, #420]	; 0x1a4
    hpcd->IN_ep[i].num = i;
 8003a48:	f8a4 11a0 	strh.w	r1, [r4, #416]	; 0x1a0
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a4c:	f04f 010b 	mov.w	r1, #11
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a50:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a54:	f8a4 11ba 	strh.w	r1, [r4, #442]	; 0x1ba
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a58:	e9c4 336a 	strd	r3, r3, [r4, #424]	; 0x1a8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5c:	d03c      	beq.n	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 8003a5e:	f44f 7186 	mov.w	r1, #268	; 0x10c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a62:	2a0d      	cmp	r2, #13
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a64:	f884 31c8 	strb.w	r3, [r4, #456]	; 0x1c8
    hpcd->IN_ep[i].num = i;
 8003a68:	f8a4 11c4 	strh.w	r1, [r4, #452]	; 0x1c4
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a6c:	f04f 010c 	mov.w	r1, #12
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a70:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a74:	f8a4 11de 	strh.w	r1, [r4, #478]	; 0x1de
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a78:	e9c4 3373 	strd	r3, r3, [r4, #460]	; 0x1cc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a7c:	d02c      	beq.n	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 8003a7e:	f240 110d 	movw	r1, #269	; 0x10d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a82:	2a0e      	cmp	r2, #14
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a84:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
    hpcd->IN_ep[i].num = i;
 8003a88:	f8a4 11e8 	strh.w	r1, [r4, #488]	; 0x1e8
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a8c:	f04f 010d 	mov.w	r1, #13
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a90:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a94:	f8a4 1202 	strh.w	r1, [r4, #514]	; 0x202
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a98:	e9c4 337c 	strd	r3, r3, [r4, #496]	; 0x1f0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a9c:	d01c      	beq.n	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 8003a9e:	f44f 7187 	mov.w	r1, #270	; 0x10e
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa2:	2a0f      	cmp	r2, #15
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003aa4:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
    hpcd->IN_ep[i].num = i;
 8003aa8:	f8a4 120c 	strh.w	r1, [r4, #524]	; 0x20c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003aac:	f04f 010e 	mov.w	r1, #14
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ab0:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ab4:	f8a4 1226 	strh.w	r1, [r4, #550]	; 0x226
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ab8:	e9c4 3385 	strd	r3, r3, [r4, #532]	; 0x214
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003abc:	d00c      	beq.n	8003ad8 <HAL_PCD_Init+0x250>
    hpcd->IN_ep[i].num = i;
 8003abe:	f240 110f 	movw	r1, #271	; 0x10f
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ac2:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ac6:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
    hpcd->IN_ep[i].num = i;
 8003aca:	f8a4 1230 	strh.w	r1, [r4, #560]	; 0x230
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ace:	210f      	movs	r1, #15
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ad0:	e9c4 338e 	strd	r3, r3, [r4, #568]	; 0x238
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ad4:	f8a4 124a 	strh.w	r1, [r4, #586]	; 0x24a
    hpcd->OUT_ep[i].num = i;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2101      	movs	r1, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003adc:	2a02      	cmp	r2, #2
    hpcd->OUT_ep[i].num = i;
 8003ade:	f8a4 3254 	strh.w	r3, [r4, #596]	; 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ae2:	f884 3258 	strb.w	r3, [r4, #600]	; 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ae6:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
    hpcd->OUT_ep[i].num = i;
 8003aea:	f8a4 1278 	strh.w	r1, [r4, #632]	; 0x278
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003aee:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003af2:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003af6:	e9c4 3397 	strd	r3, r3, [r4, #604]	; 0x25c
 8003afa:	e9c4 33a0 	strd	r3, r3, [r4, #640]	; 0x280
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003afe:	f000 80a3 	beq.w	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].num = i;
 8003b02:	2102      	movs	r1, #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b04:	2a03      	cmp	r2, #3
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b06:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    hpcd->OUT_ep[i].num = i;
 8003b0a:	f8a4 129c 	strh.w	r1, [r4, #668]	; 0x29c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b0e:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b12:	e9c4 33a9 	strd	r3, r3, [r4, #676]	; 0x2a4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b16:	f000 8097 	beq.w	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].num = i;
 8003b1a:	2103      	movs	r1, #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b1c:	2a04      	cmp	r2, #4
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b1e:	f884 32c4 	strb.w	r3, [r4, #708]	; 0x2c4
    hpcd->OUT_ep[i].num = i;
 8003b22:	f8a4 12c0 	strh.w	r1, [r4, #704]	; 0x2c0
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b26:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b2a:	e9c4 33b2 	strd	r3, r3, [r4, #712]	; 0x2c8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b2e:	f000 808b 	beq.w	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].num = i;
 8003b32:	2104      	movs	r1, #4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b34:	2a05      	cmp	r2, #5
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b36:	f884 32e8 	strb.w	r3, [r4, #744]	; 0x2e8
    hpcd->OUT_ep[i].num = i;
 8003b3a:	f8a4 12e4 	strh.w	r1, [r4, #740]	; 0x2e4
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b3e:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b42:	e9c4 33bb 	strd	r3, r3, [r4, #748]	; 0x2ec
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b46:	d07f      	beq.n	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].num = i;
 8003b48:	2105      	movs	r1, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4a:	2a06      	cmp	r2, #6
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b4c:	f884 330c 	strb.w	r3, [r4, #780]	; 0x30c
    hpcd->OUT_ep[i].num = i;
 8003b50:	f8a4 1308 	strh.w	r1, [r4, #776]	; 0x308
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b54:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b58:	e9c4 33c4 	strd	r3, r3, [r4, #784]	; 0x310
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b5c:	d074      	beq.n	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].num = i;
 8003b5e:	2106      	movs	r1, #6
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b60:	2a07      	cmp	r2, #7
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b62:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    hpcd->OUT_ep[i].num = i;
 8003b66:	f8a4 132c 	strh.w	r1, [r4, #812]	; 0x32c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b6a:	f8c4 333c 	str.w	r3, [r4, #828]	; 0x33c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b6e:	e9c4 33cd 	strd	r3, r3, [r4, #820]	; 0x334
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b72:	d069      	beq.n	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].num = i;
 8003b74:	2107      	movs	r1, #7
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b76:	2a08      	cmp	r2, #8
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b78:	f884 3354 	strb.w	r3, [r4, #852]	; 0x354
    hpcd->OUT_ep[i].num = i;
 8003b7c:	f8a4 1350 	strh.w	r1, [r4, #848]	; 0x350
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b80:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b84:	e9c4 33d6 	strd	r3, r3, [r4, #856]	; 0x358
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b88:	d05e      	beq.n	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].num = i;
 8003b8a:	2108      	movs	r1, #8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b8c:	2a09      	cmp	r2, #9
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b8e:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378
    hpcd->OUT_ep[i].num = i;
 8003b92:	f8a4 1374 	strh.w	r1, [r4, #884]	; 0x374
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b96:	f8c4 3384 	str.w	r3, [r4, #900]	; 0x384
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b9a:	e9c4 33df 	strd	r3, r3, [r4, #892]	; 0x37c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b9e:	d053      	beq.n	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].num = i;
 8003ba0:	2109      	movs	r1, #9
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba2:	2a0a      	cmp	r2, #10
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ba4:	f884 339c 	strb.w	r3, [r4, #924]	; 0x39c
    hpcd->OUT_ep[i].num = i;
 8003ba8:	f8a4 1398 	strh.w	r1, [r4, #920]	; 0x398
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bac:	f8c4 33a8 	str.w	r3, [r4, #936]	; 0x3a8
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bb0:	e9c4 33e8 	strd	r3, r3, [r4, #928]	; 0x3a0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb4:	d048      	beq.n	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].num = i;
 8003bb6:	210a      	movs	r1, #10
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb8:	2a0b      	cmp	r2, #11
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bba:	f884 33c0 	strb.w	r3, [r4, #960]	; 0x3c0
    hpcd->OUT_ep[i].num = i;
 8003bbe:	f8a4 13bc 	strh.w	r1, [r4, #956]	; 0x3bc
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bc2:	f8c4 33cc 	str.w	r3, [r4, #972]	; 0x3cc
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bc6:	e9c4 33f1 	strd	r3, r3, [r4, #964]	; 0x3c4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bca:	d03d      	beq.n	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bcc:	2300      	movs	r3, #0
    hpcd->OUT_ep[i].num = i;
 8003bce:	210b      	movs	r1, #11
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd0:	2a0c      	cmp	r2, #12
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bd2:	f884 33e4 	strb.w	r3, [r4, #996]	; 0x3e4
    hpcd->OUT_ep[i].num = i;
 8003bd6:	f8a4 13e0 	strh.w	r1, [r4, #992]	; 0x3e0
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bda:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bde:	e9c4 33fa 	strd	r3, r3, [r4, #1000]	; 0x3e8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be2:	d031      	beq.n	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].num = i;
 8003be4:	210c      	movs	r1, #12
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be6:	2a0d      	cmp	r2, #13
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003be8:	f884 3408 	strb.w	r3, [r4, #1032]	; 0x408
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bec:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bf0:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
    hpcd->OUT_ep[i].num = i;
 8003bf4:	f8a4 1404 	strh.w	r1, [r4, #1028]	; 0x404
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bf8:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bfc:	d024      	beq.n	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].num = i;
 8003bfe:	210d      	movs	r1, #13
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c00:	2a0e      	cmp	r2, #14
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c02:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c06:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c0a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    hpcd->OUT_ep[i].num = i;
 8003c0e:	f8a4 1428 	strh.w	r1, [r4, #1064]	; 0x428
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c12:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c16:	d017      	beq.n	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].num = i;
 8003c18:	210e      	movs	r1, #14
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c1a:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c1c:	f884 3450 	strb.w	r3, [r4, #1104]	; 0x450
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c20:	f8c4 3454 	str.w	r3, [r4, #1108]	; 0x454
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c24:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    hpcd->OUT_ep[i].num = i;
 8003c28:	f8a4 144c 	strh.w	r1, [r4, #1100]	; 0x44c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c2c:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c30:	d00a      	beq.n	8003c48 <HAL_PCD_Init+0x3c0>
    hpcd->OUT_ep[i].num = i;
 8003c32:	220f      	movs	r2, #15
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c34:	f884 3474 	strb.w	r3, [r4, #1140]	; 0x474
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c38:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c3c:	f8c4 347c 	str.w	r3, [r4, #1148]	; 0x47c
    hpcd->OUT_ep[i].num = i;
 8003c40:	f8a4 2470 	strh.w	r2, [r4, #1136]	; 0x470
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c44:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c48:	7c20      	ldrb	r0, [r4, #16]
 8003c4a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003c4e:	f88d 0000 	strb.w	r0, [sp]
 8003c52:	6820      	ldr	r0, [r4, #0]
 8003c54:	f004 f8dc 	bl	8007e10 <USB_DevInit>
 8003c58:	4605      	mov	r5, r0
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	f47f ae31 	bne.w	80038c2 <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 8003c60:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8003c62:	7b23      	ldrb	r3, [r4, #12]
  hpcd->USB_Address = 0U;
 8003c64:	7460      	strb	r0, [r4, #17]
  if (hpcd->Init.lpm_enable == 1U)
 8003c66:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8003c68:	f884 2495 	strb.w	r2, [r4, #1173]	; 0x495
  if (hpcd->Init.lpm_enable == 1U)
 8003c6c:	d00e      	beq.n	8003c8c <HAL_PCD_Init+0x404>
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c6e:	6820      	ldr	r0, [r4, #0]
 8003c70:	f004 fcb8 	bl	80085e4 <USB_DevDisconnect>
}
 8003c74:	4628      	mov	r0, r5
 8003c76:	b002      	add	sp, #8
 8003c78:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8003c7a:	f880 2494 	strb.w	r2, [r0, #1172]	; 0x494
    HAL_PCD_MspInit(hpcd);
 8003c7e:	f005 ff07 	bl	8009a90 <HAL_PCD_MspInit>
 8003c82:	e60e      	b.n	80038a2 <HAL_PCD_Init+0x1a>
    return HAL_ERROR;
 8003c84:	2501      	movs	r5, #1
}
 8003c86:	4628      	mov	r0, r5
 8003c88:	b002      	add	sp, #8
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f000 ff3b 	bl	8004b08 <HAL_PCDEx_ActivateLPM>
 8003c92:	e7ec      	b.n	8003c6e <HAL_PCD_Init+0x3e6>
    hpcd->OUT_ep[i].num = i;
 8003c94:	f8a4 0254 	strh.w	r0, [r4, #596]	; 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c98:	f884 0258 	strb.w	r0, [r4, #600]	; 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c9c:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ca0:	e9c4 0097 	strd	r0, r0, [r4, #604]	; 0x25c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ca4:	e7d0      	b.n	8003c48 <HAL_PCD_Init+0x3c0>
 8003ca6:	bf00      	nop

08003ca8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ca8:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8003caa:	f890 3494 	ldrb.w	r3, [r0, #1172]	; 0x494
{
 8003cae:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cb0:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d017      	beq.n	8003ce6 <HAL_PCD_Start+0x3e>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f884 3494 	strb.w	r3, [r4, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003cbc:	68c3      	ldr	r3, [r0, #12]
 8003cbe:	065b      	lsls	r3, r3, #25
 8003cc0:	d502      	bpl.n	8003cc8 <HAL_PCD_Start+0x20>
 8003cc2:	7b63      	ldrb	r3, [r4, #13]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d009      	beq.n	8003cdc <HAL_PCD_Start+0x34>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8003cc8:	f004 f85c 	bl	8007d84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ccc:	6820      	ldr	r0, [r4, #0]
 8003cce:	f004 fc79 	bl	80085c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003cd2:	2300      	movs	r3, #0

  return HAL_OK;
 8003cd4:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8003cd6:	f884 3494 	strb.w	r3, [r4, #1172]	; 0x494
}
 8003cda:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cdc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce2:	6383      	str	r3, [r0, #56]	; 0x38
 8003ce4:	e7f0      	b.n	8003cc8 <HAL_PCD_Start+0x20>
  __HAL_LOCK(hpcd);
 8003ce6:	2002      	movs	r0, #2
}
 8003ce8:	bd10      	pop	{r4, pc}
 8003cea:	bf00      	nop

08003cec <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8003cec:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8003cee:	f890 3494 	ldrb.w	r3, [r0, #1172]	; 0x494
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d019      	beq.n	8003d2a <HAL_PCD_Stop+0x3e>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cfa:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hpcd);
 8003cfc:	f884 3494 	strb.w	r3, [r4, #1172]	; 0x494
  __HAL_PCD_DISABLE(hpcd);
 8003d00:	4628      	mov	r0, r5
 8003d02:	f004 f847 	bl	8007d94 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d06:	6820      	ldr	r0, [r4, #0]
 8003d08:	f004 fc6c 	bl	80085e4 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d0c:	2110      	movs	r1, #16
 8003d0e:	6820      	ldr	r0, [r4, #0]
 8003d10:	f004 f9a8 	bl	8008064 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003d14:	68eb      	ldr	r3, [r5, #12]
 8003d16:	065b      	lsls	r3, r3, #25
 8003d18:	d502      	bpl.n	8003d20 <HAL_PCD_Stop+0x34>
 8003d1a:	7b63      	ldrb	r3, [r4, #13]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d006      	beq.n	8003d2e <HAL_PCD_Stop+0x42>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }

  __HAL_UNLOCK(hpcd);
 8003d20:	2300      	movs	r3, #0

  return HAL_OK;
 8003d22:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8003d24:	f884 3494 	strb.w	r3, [r4, #1172]	; 0x494
}
 8003d28:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003d2a:	2002      	movs	r0, #2
}
 8003d2c:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d34:	63ab      	str	r3, [r5, #56]	; 0x38
  __HAL_UNLOCK(hpcd);
 8003d36:	2300      	movs	r3, #0
  return HAL_OK;
 8003d38:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8003d3a:	f884 3494 	strb.w	r3, [r4, #1172]	; 0x494
  return HAL_OK;
 8003d3e:	e7f3      	b.n	8003d28 <HAL_PCD_Stop+0x3c>

08003d40 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d44:	6805      	ldr	r5, [r0, #0]
{
 8003d46:	b089      	sub	sp, #36	; 0x24
 8003d48:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f004 fc88 	bl	8008660 <USB_GetMode>
 8003d50:	b110      	cbz	r0, 8003d58 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 8003d52:	b009      	add	sp, #36	; 0x24
 8003d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d58:	4683      	mov	fp, r0
 8003d5a:	6820      	ldr	r0, [r4, #0]
 8003d5c:	f004 fc52 	bl	8008604 <USB_ReadInterrupts>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d0f6      	beq.n	8003d52 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003d64:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8003d68:	f505 6200 	add.w	r2, r5, #2048	; 0x800
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d6c:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003d6e:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8003d72:	9202      	str	r2, [sp, #8]
 8003d74:	f8c4 34d4 	str.w	r3, [r4, #1236]	; 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d78:	f004 fc44 	bl	8008604 <USB_ReadInterrupts>
 8003d7c:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d80:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d82:	d003      	beq.n	8003d8c <HAL_PCD_IRQHandler+0x4c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d84:	6943      	ldr	r3, [r0, #20]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d8c:	f004 fc3a 	bl	8008604 <USB_ReadInterrupts>
 8003d90:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d94:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d96:	d012      	beq.n	8003dbe <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d98:	6983      	ldr	r3, [r0, #24]
 8003d9a:	f023 0310 	bic.w	r3, r3, #16
 8003d9e:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 8003da0:	6a2e      	ldr	r6, [r5, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003da2:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003da6:	f006 070f 	and.w	r7, r6, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	f000 83e5 	beq.w	800457a <HAL_PCD_IRQHandler+0x83a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003db0:	2b06      	cmp	r3, #6
 8003db2:	f000 8324 	beq.w	80043fe <HAL_PCD_IRQHandler+0x6be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003db6:	6983      	ldr	r3, [r0, #24]
 8003db8:	f043 0310 	orr.w	r3, r3, #16
 8003dbc:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003dbe:	f004 fc21 	bl	8008604 <USB_ReadInterrupts>
 8003dc2:	0307      	lsls	r7, r0, #12
 8003dc4:	f100 8282 	bmi.w	80042cc <HAL_PCD_IRQHandler+0x58c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003dc8:	6820      	ldr	r0, [r4, #0]
 8003dca:	f004 fc1b 	bl	8008604 <USB_ReadInterrupts>
 8003dce:	0346      	lsls	r6, r0, #13
 8003dd0:	f100 8229 	bmi.w	8004226 <HAL_PCD_IRQHandler+0x4e6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003dd4:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003dd6:	f004 fc15 	bl	8008604 <USB_ReadInterrupts>
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	f2c0 819a 	blt.w	8004114 <HAL_PCD_IRQHandler+0x3d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003de0:	6820      	ldr	r0, [r4, #0]
 8003de2:	f004 fc0f 	bl	8008604 <USB_ReadInterrupts>
 8003de6:	0503      	lsls	r3, r0, #20
 8003de8:	f100 8157 	bmi.w	800409a <HAL_PCD_IRQHandler+0x35a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003dec:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003dee:	f004 fc09 	bl	8008604 <USB_ReadInterrupts>
 8003df2:	0106      	lsls	r6, r0, #4
 8003df4:	d514      	bpl.n	8003e20 <HAL_PCD_IRQHandler+0xe0>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003df6:	6822      	ldr	r2, [r4, #0]
 8003df8:	6953      	ldr	r3, [r2, #20]
 8003dfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dfe:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8003e00:	f894 34cc 	ldrb.w	r3, [r4, #1228]	; 0x4cc
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f040 82ad 	bne.w	8004364 <HAL_PCD_IRQHandler+0x624>
        hpcd->LPM_State = LPM_L1;
 8003e0a:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e0c:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8003e0e:	f884 14cc 	strb.w	r1, [r4, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e12:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003e14:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8003e18:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e1c:	f000 fe8c 	bl	8004b38 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e20:	6820      	ldr	r0, [r4, #0]
 8003e22:	f004 fbef 	bl	8008604 <USB_ReadInterrupts>
 8003e26:	04c0      	lsls	r0, r0, #19
 8003e28:	f100 819e 	bmi.w	8004168 <HAL_PCD_IRQHandler+0x428>
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e2c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e2e:	f004 fbe9 	bl	8008604 <USB_ReadInterrupts>
 8003e32:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e36:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e38:	f040 817f 	bne.w	800413a <HAL_PCD_IRQHandler+0x3fa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e3c:	f004 fbe2 	bl	8008604 <USB_ReadInterrupts>
 8003e40:	0701      	lsls	r1, r0, #28
 8003e42:	f100 81e7 	bmi.w	8004214 <HAL_PCD_IRQHandler+0x4d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e46:	6820      	ldr	r0, [r4, #0]
 8003e48:	f004 fbdc 	bl	8008604 <USB_ReadInterrupts>
 8003e4c:	0602      	lsls	r2, r0, #24
 8003e4e:	d571      	bpl.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e50:	69ab      	ldr	r3, [r5, #24]
 8003e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e56:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e58:	7923      	ldrb	r3, [r4, #4]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d96a      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e5e:	f894 227b 	ldrb.w	r2, [r4, #635]	; 0x27b
 8003e62:	2a01      	cmp	r2, #1
 8003e64:	f000 83ea 	beq.w	800463c <HAL_PCD_IRQHandler+0x8fc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d963      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e6c:	f894 229f 	ldrb.w	r2, [r4, #671]	; 0x29f
 8003e70:	2a01      	cmp	r2, #1
 8003e72:	f000 83fe 	beq.w	8004672 <HAL_PCD_IRQHandler+0x932>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d95c      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e7a:	f894 22c3 	ldrb.w	r2, [r4, #707]	; 0x2c3
 8003e7e:	2a01      	cmp	r2, #1
 8003e80:	f000 82b6 	beq.w	80043f0 <HAL_PCD_IRQHandler+0x6b0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d955      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e88:	f894 22e7 	ldrb.w	r2, [r4, #743]	; 0x2e7
 8003e8c:	2a01      	cmp	r2, #1
 8003e8e:	f000 82c9 	beq.w	8004424 <HAL_PCD_IRQHandler+0x6e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	d94e      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e96:	f894 230b 	ldrb.w	r2, [r4, #779]	; 0x30b
 8003e9a:	2a01      	cmp	r2, #1
 8003e9c:	f000 8425 	beq.w	80046ea <HAL_PCD_IRQHandler+0x9aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ea0:	2b06      	cmp	r3, #6
 8003ea2:	d947      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ea4:	f894 232f 	ldrb.w	r2, [r4, #815]	; 0x32f
 8003ea8:	2a01      	cmp	r2, #1
 8003eaa:	f000 8432 	beq.w	8004712 <HAL_PCD_IRQHandler+0x9d2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eae:	2b07      	cmp	r3, #7
 8003eb0:	d940      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003eb2:	f894 2353 	ldrb.w	r2, [r4, #851]	; 0x353
 8003eb6:	2a01      	cmp	r2, #1
 8003eb8:	f000 8448 	beq.w	800474c <HAL_PCD_IRQHandler+0xa0c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d939      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ec0:	f894 2377 	ldrb.w	r2, [r4, #887]	; 0x377
 8003ec4:	2a01      	cmp	r2, #1
 8003ec6:	f000 8455 	beq.w	8004774 <HAL_PCD_IRQHandler+0xa34>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eca:	2b09      	cmp	r3, #9
 8003ecc:	d932      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ece:	f894 239b 	ldrb.w	r2, [r4, #923]	; 0x39b
 8003ed2:	2a01      	cmp	r2, #1
 8003ed4:	f000 8462 	beq.w	800479c <HAL_PCD_IRQHandler+0xa5c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ed8:	2b0a      	cmp	r3, #10
 8003eda:	d92b      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003edc:	f894 23bf 	ldrb.w	r2, [r4, #959]	; 0x3bf
 8003ee0:	2a01      	cmp	r2, #1
 8003ee2:	f000 846f 	beq.w	80047c4 <HAL_PCD_IRQHandler+0xa84>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ee6:	2b0b      	cmp	r3, #11
 8003ee8:	d924      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003eea:	f894 23e3 	ldrb.w	r2, [r4, #995]	; 0x3e3
 8003eee:	2a01      	cmp	r2, #1
 8003ef0:	f000 847c 	beq.w	80047ec <HAL_PCD_IRQHandler+0xaac>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ef4:	2b0c      	cmp	r3, #12
 8003ef6:	d91d      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ef8:	f894 2407 	ldrb.w	r2, [r4, #1031]	; 0x407
 8003efc:	2a01      	cmp	r2, #1
 8003efe:	f000 847d 	beq.w	80047fc <HAL_PCD_IRQHandler+0xabc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f02:	2b0d      	cmp	r3, #13
 8003f04:	d916      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f06:	f894 242b 	ldrb.w	r2, [r4, #1067]	; 0x42b
 8003f0a:	2a01      	cmp	r2, #1
 8003f0c:	f000 849d 	beq.w	800484a <HAL_PCD_IRQHandler+0xb0a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f10:	2b0e      	cmp	r3, #14
 8003f12:	d90f      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f14:	f894 244f 	ldrb.w	r2, [r4, #1103]	; 0x44f
 8003f18:	2a01      	cmp	r2, #1
 8003f1a:	f000 84a4 	beq.w	8004866 <HAL_PCD_IRQHandler+0xb26>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f1e:	2b0f      	cmp	r3, #15
 8003f20:	d908      	bls.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f22:	f894 3473 	ldrb.w	r3, [r4, #1139]	; 0x473
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d104      	bne.n	8003f34 <HAL_PCD_IRQHandler+0x1f4>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f2a:	f504 618e 	add.w	r1, r4, #1136	; 0x470
 8003f2e:	6820      	ldr	r0, [r4, #0]
 8003f30:	f004 fa58 	bl	80083e4 <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f34:	6820      	ldr	r0, [r4, #0]
 8003f36:	f004 fb65 	bl	8008604 <USB_ReadInterrupts>
 8003f3a:	02c3      	lsls	r3, r0, #11
 8003f3c:	f140 80ab 	bpl.w	8004096 <HAL_PCD_IRQHandler+0x356>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f40:	7923      	ldrb	r3, [r4, #4]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	f240 8089 	bls.w	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f48:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f4c:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f50:	2a01      	cmp	r2, #1
 8003f52:	f000 8216 	beq.w	8004382 <HAL_PCD_IRQHandler+0x642>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d97f      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f5a:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f5e:	f8d5 1940 	ldr.w	r1, [r5, #2368]	; 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f62:	2a01      	cmp	r2, #1
 8003f64:	f000 8220 	beq.w	80043a8 <HAL_PCD_IRQHandler+0x668>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d976      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f6c:	f894 2084 	ldrb.w	r2, [r4, #132]	; 0x84
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f70:	f8d5 1960 	ldr.w	r1, [r5, #2400]	; 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f74:	2a01      	cmp	r2, #1
 8003f76:	f000 8223 	beq.w	80043c0 <HAL_PCD_IRQHandler+0x680>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d96d      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f7e:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f82:	f8d5 1980 	ldr.w	r1, [r5, #2432]	; 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f86:	2a01      	cmp	r2, #1
 8003f88:	f000 8226 	beq.w	80043d8 <HAL_PCD_IRQHandler+0x698>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f8c:	2b05      	cmp	r3, #5
 8003f8e:	d964      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f90:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f94:	f8d5 19a0 	ldr.w	r1, [r5, #2464]	; 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f98:	2a01      	cmp	r2, #1
 8003f9a:	f000 8343 	beq.w	8004624 <HAL_PCD_IRQHandler+0x8e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d95b      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fa2:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003fa6:	f8d5 19c0 	ldr.w	r1, [r5, #2496]	; 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003faa:	2a01      	cmp	r2, #1
 8003fac:	f000 8355 	beq.w	800465a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fb0:	2b07      	cmp	r3, #7
 8003fb2:	d952      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fb4:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003fb8:	f8d5 19e0 	ldr.w	r1, [r5, #2528]	; 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fbc:	2a01      	cmp	r2, #1
 8003fbe:	f000 8360 	beq.w	8004682 <HAL_PCD_IRQHandler+0x942>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d949      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fc6:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003fca:	f8d5 1a00 	ldr.w	r1, [r5, #2560]	; 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fce:	2a01      	cmp	r2, #1
 8003fd0:	f000 8363 	beq.w	800469a <HAL_PCD_IRQHandler+0x95a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fd4:	2b09      	cmp	r3, #9
 8003fd6:	d940      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fd8:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003fdc:	f8d5 1a20 	ldr.w	r1, [r5, #2592]	; 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fe0:	2a01      	cmp	r2, #1
 8003fe2:	f000 8376 	beq.w	80046d2 <HAL_PCD_IRQHandler+0x992>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fe6:	2b0a      	cmp	r3, #10
 8003fe8:	d937      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fea:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003fee:	f8d5 1a40 	ldr.w	r1, [r5, #2624]	; 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ff2:	2a01      	cmp	r2, #1
 8003ff4:	f000 8381 	beq.w	80046fa <HAL_PCD_IRQHandler+0x9ba>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ff8:	2b0b      	cmp	r3, #11
 8003ffa:	d92e      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ffc:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004000:	f8d5 1a60 	ldr.w	r1, [r5, #2656]	; 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004004:	2a01      	cmp	r2, #1
 8004006:	f000 8395 	beq.w	8004734 <HAL_PCD_IRQHandler+0x9f4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800400a:	2b0c      	cmp	r3, #12
 800400c:	d925      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800400e:	f894 21c8 	ldrb.w	r2, [r4, #456]	; 0x1c8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004012:	f8d5 1a80 	ldr.w	r1, [r5, #2688]	; 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004016:	2a01      	cmp	r2, #1
 8004018:	f000 83a0 	beq.w	800475c <HAL_PCD_IRQHandler+0xa1c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800401c:	2b0d      	cmp	r3, #13
 800401e:	d91c      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004020:	f894 21ec 	ldrb.w	r2, [r4, #492]	; 0x1ec
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004024:	f8d5 1aa0 	ldr.w	r1, [r5, #2720]	; 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004028:	2a01      	cmp	r2, #1
 800402a:	f000 83ab 	beq.w	8004784 <HAL_PCD_IRQHandler+0xa44>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800402e:	2b0e      	cmp	r3, #14
 8004030:	d913      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004032:	f894 2210 	ldrb.w	r2, [r4, #528]	; 0x210
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004036:	f8d5 1ac0 	ldr.w	r1, [r5, #2752]	; 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800403a:	2a01      	cmp	r2, #1
 800403c:	f000 83b6 	beq.w	80047ac <HAL_PCD_IRQHandler+0xa6c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004040:	2b0f      	cmp	r3, #15
 8004042:	d90a      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004044:	f894 2234 	ldrb.w	r2, [r4, #564]	; 0x234
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004048:	f8d5 1ae0 	ldr.w	r1, [r5, #2784]	; 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800404c:	2a01      	cmp	r2, #1
 800404e:	f000 83c1 	beq.w	80047d4 <HAL_PCD_IRQHandler+0xa94>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004052:	2b10      	cmp	r3, #16
 8004054:	d901      	bls.n	800405a <HAL_PCD_IRQHandler+0x31a>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004056:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800405a:	6820      	ldr	r0, [r4, #0]
 800405c:	6943      	ldr	r3, [r0, #20]
 800405e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004062:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004064:	f004 face 	bl	8008604 <USB_ReadInterrupts>
 8004068:	0287      	lsls	r7, r0, #10
 800406a:	d421      	bmi.n	80040b0 <HAL_PCD_IRQHandler+0x370>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800406c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800406e:	f004 fac9 	bl	8008604 <USB_ReadInterrupts>
 8004072:	0040      	lsls	r0, r0, #1
 8004074:	f100 80c5 	bmi.w	8004202 <HAL_PCD_IRQHandler+0x4c2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004078:	6820      	ldr	r0, [r4, #0]
 800407a:	f004 fac3 	bl	8008604 <USB_ReadInterrupts>
 800407e:	0741      	lsls	r1, r0, #29
 8004080:	f57f ae67 	bpl.w	8003d52 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004088:	076a      	lsls	r2, r5, #29
 800408a:	f100 8297 	bmi.w	80045bc <HAL_PCD_IRQHandler+0x87c>
      hpcd->Instance->GOTGINT |= RegVal;
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	432a      	orrs	r2, r5
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	e65d      	b.n	8003d52 <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004096:	6820      	ldr	r0, [r4, #0]
 8004098:	e7e4      	b.n	8004064 <HAL_PCD_IRQHandler+0x324>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800409a:	9b02      	ldr	r3, [sp, #8]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	07df      	lsls	r7, r3, #31
 80040a0:	f100 8288 	bmi.w	80045b4 <HAL_PCD_IRQHandler+0x874>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80040a4:	6820      	ldr	r0, [r4, #0]
 80040a6:	6943      	ldr	r3, [r0, #20]
 80040a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ac:	6143      	str	r3, [r0, #20]
 80040ae:	e69e      	b.n	8003dee <HAL_PCD_IRQHandler+0xae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040b0:	f894 c004 	ldrb.w	ip, [r4, #4]
 80040b4:	f1bc 0f01 	cmp.w	ip, #1
 80040b8:	d926      	bls.n	8004108 <HAL_PCD_IRQHandler+0x3c8>
 80040ba:	f505 6232 	add.w	r2, r5, #2848	; 0xb20
 80040be:	4623      	mov	r3, r4
 80040c0:	2101      	movs	r1, #1
 80040c2:	e004      	b.n	80040ce <HAL_PCD_IRQHandler+0x38e>
 80040c4:	3101      	adds	r1, #1
 80040c6:	3220      	adds	r2, #32
 80040c8:	3324      	adds	r3, #36	; 0x24
 80040ca:	4561      	cmp	r1, ip
 80040cc:	d01c      	beq.n	8004108 <HAL_PCD_IRQHandler+0x3c8>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040ce:	f893 027c 	ldrb.w	r0, [r3, #636]	; 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80040d2:	6816      	ldr	r6, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040d4:	2801      	cmp	r0, #1
 80040d6:	d1f5      	bne.n	80040c4 <HAL_PCD_IRQHandler+0x384>
 80040d8:	2e00      	cmp	r6, #0
 80040da:	daf3      	bge.n	80040c4 <HAL_PCD_IRQHandler+0x384>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80040dc:	f8d4 74d4 	ldr.w	r7, [r4, #1236]	; 0x4d4
 80040e0:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
 80040e4:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040e8:	42be      	cmp	r6, r7
 80040ea:	d1eb      	bne.n	80040c4 <HAL_PCD_IRQHandler+0x384>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80040ec:	f883 027b 	strb.w	r0, [r3, #635]	; 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80040f0:	69a8      	ldr	r0, [r5, #24]
 80040f2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80040f6:	61a8      	str	r0, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80040f8:	6968      	ldr	r0, [r5, #20]
 80040fa:	0606      	lsls	r6, r0, #24
 80040fc:	d4e2      	bmi.n	80040c4 <HAL_PCD_IRQHandler+0x384>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80040fe:	9a02      	ldr	r2, [sp, #8]
 8004100:	6853      	ldr	r3, [r2, #4]
 8004102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004106:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	6943      	ldr	r3, [r0, #20]
 800410c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004110:	6143      	str	r3, [r0, #20]
 8004112:	e7ac      	b.n	800406e <HAL_PCD_IRQHandler+0x32e>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004114:	9a02      	ldr	r2, [sp, #8]
 8004116:	6853      	ldr	r3, [r2, #4]
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 800411e:	f894 34cc 	ldrb.w	r3, [r4, #1228]	; 0x4cc
 8004122:	2b01      	cmp	r3, #1
 8004124:	f000 8139 	beq.w	800439a <HAL_PCD_IRQHandler+0x65a>
        HAL_PCD_ResumeCallback(hpcd);
 8004128:	4620      	mov	r0, r4
 800412a:	f005 fd3d 	bl	8009ba8 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800412e:	6820      	ldr	r0, [r4, #0]
 8004130:	6943      	ldr	r3, [r0, #20]
 8004132:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004136:	6143      	str	r3, [r0, #20]
 8004138:	e653      	b.n	8003de2 <HAL_PCD_IRQHandler+0xa2>
      (void)USB_ActivateSetup(hpcd->Instance);
 800413a:	f004 fa95 	bl	8008668 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800413e:	6820      	ldr	r0, [r4, #0]
 8004140:	f003 ffb8 	bl	80080b4 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004144:	6826      	ldr	r6, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004146:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004148:	f001 fa20 	bl	800558c <HAL_RCC_GetHCLKFreq>
 800414c:	79e2      	ldrb	r2, [r4, #7]
 800414e:	4601      	mov	r1, r0
 8004150:	4630      	mov	r0, r6
 8004152:	f003 fd9d 	bl	8007c90 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8004156:	4620      	mov	r0, r4
 8004158:	f005 fcf8 	bl	8009b4c <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800415c:	6820      	ldr	r0, [r4, #0]
 800415e:	6943      	ldr	r3, [r0, #20]
 8004160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004164:	6143      	str	r3, [r0, #20]
 8004166:	e669      	b.n	8003e3c <HAL_PCD_IRQHandler+0xfc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004168:	9a02      	ldr	r2, [sp, #8]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800416a:	2110      	movs	r1, #16
 800416c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800416e:	6853      	ldr	r3, [r2, #4]
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004176:	f003 ff75 	bl	8008064 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417a:	7920      	ldrb	r0, [r4, #4]
 800417c:	b1e0      	cbz	r0, 80041b8 <HAL_PCD_IRQHandler+0x478>
 800417e:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004182:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8004186:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004188:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800418c:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418e:	3320      	adds	r3, #32
 8004190:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004192:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004196:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800419a:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800419e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80041a2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80041a6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041aa:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80041ae:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80041b2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041b6:	d1e6      	bne.n	8004186 <HAL_PCD_IRQHandler+0x446>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80041b8:	9a02      	ldr	r2, [sp, #8]
 80041ba:	69d3      	ldr	r3, [r2, #28]
 80041bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80041c0:	61d3      	str	r3, [r2, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80041c2:	7be3      	ldrb	r3, [r4, #15]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f040 80d1 	bne.w	800436c <HAL_PCD_IRQHandler+0x62c>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80041ca:	4611      	mov	r1, r2
 80041cc:	f242 032b 	movw	r3, #8235	; 0x202b
 80041d0:	6952      	ldr	r2, [r2, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	614b      	str	r3, [r1, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80041d6:	690b      	ldr	r3, [r1, #16]
 80041d8:	f043 030b 	orr.w	r3, r3, #11
 80041dc:	610b      	str	r3, [r1, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80041de:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041e2:	f204 429c 	addw	r2, r4, #1180	; 0x49c
 80041e6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80041e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041ec:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041f0:	79a1      	ldrb	r1, [r4, #6]
 80041f2:	f004 fa4f 	bl	8008694 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80041f6:	6820      	ldr	r0, [r4, #0]
 80041f8:	6943      	ldr	r3, [r0, #20]
 80041fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041fe:	6143      	str	r3, [r0, #20]
 8004200:	e615      	b.n	8003e2e <HAL_PCD_IRQHandler+0xee>
      HAL_PCD_ConnectCallback(hpcd);
 8004202:	4620      	mov	r0, r4
 8004204:	f005 fcdc 	bl	8009bc0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004208:	6820      	ldr	r0, [r4, #0]
 800420a:	6943      	ldr	r3, [r0, #20]
 800420c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004210:	6143      	str	r3, [r0, #20]
 8004212:	e732      	b.n	800407a <HAL_PCD_IRQHandler+0x33a>
      HAL_PCD_SOFCallback(hpcd);
 8004214:	4620      	mov	r0, r4
 8004216:	f005 fc95 	bl	8009b44 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800421a:	6820      	ldr	r0, [r4, #0]
 800421c:	6943      	ldr	r3, [r0, #20]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	6143      	str	r3, [r0, #20]
 8004224:	e610      	b.n	8003e48 <HAL_PCD_IRQHandler+0x108>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004226:	6820      	ldr	r0, [r4, #0]
 8004228:	f004 f9f8 	bl	800861c <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800422c:	4680      	mov	r8, r0
 800422e:	2800      	cmp	r0, #0
 8004230:	f43f add0 	beq.w	8003dd4 <HAL_PCD_IRQHandler+0x94>
      epnum = 0U;
 8004234:	f04f 0a00 	mov.w	sl, #0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004238:	6820      	ldr	r0, [r4, #0]
 800423a:	4627      	mov	r7, r4
 800423c:	f505 6910 	add.w	r9, r5, #2304	; 0x900
              ep->is_iso_incomplete = 0U;
 8004240:	4656      	mov	r6, sl
 8004242:	9503      	str	r5, [sp, #12]
 8004244:	f8cd b010 	str.w	fp, [sp, #16]
 8004248:	e009      	b.n	800425e <HAL_PCD_IRQHandler+0x51e>
      while (ep_intr != 0U)
 800424a:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800424e:	f106 0601 	add.w	r6, r6, #1
      while (ep_intr != 0U)
 8004252:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8004256:	f109 0920 	add.w	r9, r9, #32
 800425a:	f000 80ed 	beq.w	8004438 <HAL_PCD_IRQHandler+0x6f8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800425e:	f018 0f01 	tst.w	r8, #1
 8004262:	d0f2      	beq.n	800424a <HAL_PCD_IRQHandler+0x50a>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004264:	fa5f fa86 	uxtb.w	sl, r6
 8004268:	4651      	mov	r1, sl
 800426a:	f004 f9e9 	bl	8008640 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800426e:	07c1      	lsls	r1, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004270:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004272:	d514      	bpl.n	800429e <HAL_PCD_IRQHandler+0x55e>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004274:	9902      	ldr	r1, [sp, #8]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004276:	2301      	movs	r3, #1
 8004278:	f006 020f 	and.w	r2, r6, #15
 800427c:	fa03 f202 	lsl.w	r2, r3, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004280:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004282:	ea23 0302 	bic.w	r3, r3, r2
 8004286:	634b      	str	r3, [r1, #52]	; 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004288:	2301      	movs	r3, #1
 800428a:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800428e:	79a1      	ldrb	r1, [r4, #6]
 8004290:	4299      	cmp	r1, r3
 8004292:	f000 8198 	beq.w	80045c6 <HAL_PCD_IRQHandler+0x886>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004296:	4651      	mov	r1, sl
 8004298:	4620      	mov	r0, r4
 800429a:	f005 fc49 	bl	8009b30 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800429e:	072a      	lsls	r2, r5, #28
 80042a0:	d502      	bpl.n	80042a8 <HAL_PCD_IRQHandler+0x568>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80042a2:	2308      	movs	r3, #8
 80042a4:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80042a8:	06eb      	lsls	r3, r5, #27
 80042aa:	d502      	bpl.n	80042b2 <HAL_PCD_IRQHandler+0x572>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80042ac:	2310      	movs	r3, #16
 80042ae:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80042b2:	0668      	lsls	r0, r5, #25
 80042b4:	d502      	bpl.n	80042bc <HAL_PCD_IRQHandler+0x57c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80042b6:	2340      	movs	r3, #64	; 0x40
 80042b8:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80042bc:	07a9      	lsls	r1, r5, #30
 80042be:	f100 8150 	bmi.w	8004562 <HAL_PCD_IRQHandler+0x822>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042c2:	062a      	lsls	r2, r5, #24
 80042c4:	f100 80f9 	bmi.w	80044ba <HAL_PCD_IRQHandler+0x77a>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042c8:	6820      	ldr	r0, [r4, #0]
 80042ca:	e7be      	b.n	800424a <HAL_PCD_IRQHandler+0x50a>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042cc:	6820      	ldr	r0, [r4, #0]
 80042ce:	f004 f99d 	bl	800860c <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80042d2:	4606      	mov	r6, r0
 80042d4:	2800      	cmp	r0, #0
 80042d6:	f43f ad77 	beq.w	8003dc8 <HAL_PCD_IRQHandler+0x88>
 80042da:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 80042de:	46a2      	mov	sl, r4
      epnum = 0U;
 80042e0:	f04f 0900 	mov.w	r9, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042e4:	f8cd b00c 	str.w	fp, [sp, #12]
 80042e8:	e008      	b.n	80042fc <HAL_PCD_IRQHandler+0x5bc>
      while (ep_intr != 0U)
 80042ea:	0876      	lsrs	r6, r6, #1
        epnum++;
 80042ec:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 80042f0:	f107 0720 	add.w	r7, r7, #32
 80042f4:	f10a 0a24 	add.w	sl, sl, #36	; 0x24
 80042f8:	f000 809b 	beq.w	8004432 <HAL_PCD_IRQHandler+0x6f2>
        if ((ep_intr & 0x1U) != 0U)
 80042fc:	07f0      	lsls	r0, r6, #31
 80042fe:	d5f4      	bpl.n	80042ea <HAL_PCD_IRQHandler+0x5aa>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004300:	fa5f fb89 	uxtb.w	fp, r9
 8004304:	6820      	ldr	r0, [r4, #0]
 8004306:	4659      	mov	r1, fp
 8004308:	f004 f990 	bl	800862c <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800430c:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004310:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004312:	f040 80b3 	bne.w	800447c <HAL_PCD_IRQHandler+0x73c>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004316:	f018 0f08 	tst.w	r8, #8
 800431a:	f040 8090 	bne.w	800443e <HAL_PCD_IRQHandler+0x6fe>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800431e:	f018 0f10 	tst.w	r8, #16
 8004322:	d001      	beq.n	8004328 <HAL_PCD_IRQHandler+0x5e8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004324:	2210      	movs	r2, #16
 8004326:	60ba      	str	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004328:	f018 0f02 	tst.w	r8, #2
 800432c:	d00e      	beq.n	800434c <HAL_PCD_IRQHandler+0x60c>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800432e:	696a      	ldr	r2, [r5, #20]
 8004330:	0610      	lsls	r0, r2, #24
 8004332:	d504      	bpl.n	800433e <HAL_PCD_IRQHandler+0x5fe>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004334:	9b02      	ldr	r3, [sp, #8]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800433c:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 800433e:	f89a 2257 	ldrb.w	r2, [sl, #599]	; 0x257
 8004342:	2a01      	cmp	r2, #1
 8004344:	f000 8181 	beq.w	800464a <HAL_PCD_IRQHandler+0x90a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004348:	2302      	movs	r3, #2
 800434a:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800434c:	f018 0f20 	tst.w	r8, #32
 8004350:	d001      	beq.n	8004356 <HAL_PCD_IRQHandler+0x616>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004352:	2320      	movs	r3, #32
 8004354:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004356:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 800435a:	d0c6      	beq.n	80042ea <HAL_PCD_IRQHandler+0x5aa>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800435c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	e7c2      	b.n	80042ea <HAL_PCD_IRQHandler+0x5aa>
        HAL_PCD_SuspendCallback(hpcd);
 8004364:	4620      	mov	r0, r4
 8004366:	f005 fc07 	bl	8009b78 <HAL_PCD_SuspendCallback>
 800436a:	e559      	b.n	8003e20 <HAL_PCD_IRQHandler+0xe0>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800436c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8004370:	f043 030b 	orr.w	r3, r3, #11
 8004374:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004378:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800437a:	f043 030b 	orr.w	r3, r3, #11
 800437e:	6453      	str	r3, [r2, #68]	; 0x44
 8004380:	e72d      	b.n	80041de <HAL_PCD_IRQHandler+0x49e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004382:	2900      	cmp	r1, #0
 8004384:	f6bf ade7 	bge.w	8003f56 <HAL_PCD_IRQHandler+0x216>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004388:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800438a:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800438e:	f851 0b38 	ldr.w	r0, [r1], #56
 8004392:	f004 f827 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004396:	7923      	ldrb	r3, [r4, #4]
 8004398:	e5dd      	b.n	8003f56 <HAL_PCD_IRQHandler+0x216>
        hpcd->LPM_State = LPM_L0;
 800439a:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800439c:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800439e:	f884 14cc 	strb.w	r1, [r4, #1228]	; 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80043a2:	f000 fbc9 	bl	8004b38 <HAL_PCDEx_LPM_Callback>
 80043a6:	e6c2      	b.n	800412e <HAL_PCD_IRQHandler+0x3ee>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043a8:	2900      	cmp	r1, #0
 80043aa:	f6bf addd 	bge.w	8003f68 <HAL_PCD_IRQHandler+0x228>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ae:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043b0:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043b4:	f851 0b5c 	ldr.w	r0, [r1], #92
 80043b8:	f004 f814 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043bc:	7923      	ldrb	r3, [r4, #4]
 80043be:	e5d3      	b.n	8003f68 <HAL_PCD_IRQHandler+0x228>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043c0:	2900      	cmp	r1, #0
 80043c2:	f6bf adda 	bge.w	8003f7a <HAL_PCD_IRQHandler+0x23a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c6:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043c8:	f884 2083 	strb.w	r2, [r4, #131]	; 0x83
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043cc:	f851 0b80 	ldr.w	r0, [r1], #128
 80043d0:	f004 f808 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043d4:	7923      	ldrb	r3, [r4, #4]
 80043d6:	e5d0      	b.n	8003f7a <HAL_PCD_IRQHandler+0x23a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043d8:	2900      	cmp	r1, #0
 80043da:	f6bf add7 	bge.w	8003f8c <HAL_PCD_IRQHandler+0x24c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043de:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043e0:	f884 20a7 	strb.w	r2, [r4, #167]	; 0xa7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043e4:	f851 0ba4 	ldr.w	r0, [r1], #164
 80043e8:	f003 fffc 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043ec:	7923      	ldrb	r3, [r4, #4]
 80043ee:	e5cd      	b.n	8003f8c <HAL_PCD_IRQHandler+0x24c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043f0:	f504 7130 	add.w	r1, r4, #704	; 0x2c0
 80043f4:	6820      	ldr	r0, [r4, #0]
 80043f6:	f003 fff5 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043fa:	7923      	ldrb	r3, [r4, #4]
 80043fc:	e542      	b.n	8003e84 <HAL_PCD_IRQHandler+0x144>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043fe:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004402:	2208      	movs	r2, #8
 8004404:	f204 419c 	addw	r1, r4, #1180	; 0x49c
 8004408:	4628      	mov	r0, r5
 800440a:	f004 f845 	bl	8008498 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800440e:	f3c6 130a 	ubfx	r3, r6, #4, #11
 8004412:	eb04 0287 	add.w	r2, r4, r7, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004416:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004418:	f8d2 1268 	ldr.w	r1, [r2, #616]	; 0x268
 800441c:	440b      	add	r3, r1
 800441e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
 8004422:	e4c8      	b.n	8003db6 <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004424:	f504 7139 	add.w	r1, r4, #740	; 0x2e4
 8004428:	6820      	ldr	r0, [r4, #0]
 800442a:	f003 ffdb 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800442e:	7923      	ldrb	r3, [r4, #4]
 8004430:	e52f      	b.n	8003e92 <HAL_PCD_IRQHandler+0x152>
 8004432:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004436:	e4c7      	b.n	8003dc8 <HAL_PCD_IRQHandler+0x88>
 8004438:	e9dd 5b03 	ldrd	r5, fp, [sp, #12]
 800443c:	e4cb      	b.n	8003dd6 <HAL_PCD_IRQHandler+0x96>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800443e:	6821      	ldr	r1, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004440:	2208      	movs	r2, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004442:	4bba      	ldr	r3, [pc, #744]	; (800472c <HAL_PCD_IRQHandler+0x9ec>)
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004444:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004446:	f501 6230 	add.w	r2, r1, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800444a:	6c09      	ldr	r1, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800444c:	eb02 1249 	add.w	r2, r2, r9, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004450:	4299      	cmp	r1, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004452:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004454:	f240 80c8 	bls.w	80045e8 <HAL_PCD_IRQHandler+0x8a8>
 8004458:	0403      	lsls	r3, r0, #16
 800445a:	d502      	bpl.n	8004462 <HAL_PCD_IRQHandler+0x722>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800445c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004460:	6091      	str	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004462:	4620      	mov	r0, r4
 8004464:	f005 fb54 	bl	8009b10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004468:	79a1      	ldrb	r1, [r4, #6]
 800446a:	2901      	cmp	r1, #1
 800446c:	f47f af57 	bne.w	800431e <HAL_PCD_IRQHandler+0x5de>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004470:	f204 429c 	addw	r2, r4, #1180	; 0x49c
 8004474:	6820      	ldr	r0, [r4, #0]
 8004476:	f004 f90d 	bl	8008694 <USB_EP0_OutStart>
 800447a:	e750      	b.n	800431e <HAL_PCD_IRQHandler+0x5de>
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800447c:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800447e:	2201      	movs	r2, #1
 8004480:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004482:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8004486:	79a1      	ldrb	r1, [r4, #6]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004488:	eb02 1249 	add.w	r2, r2, r9, lsl #5
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800448c:	f8d0 e040 	ldr.w	lr, [r0, #64]	; 0x40
  if (hpcd->Init.dma_enable == 1U)
 8004490:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004492:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8004494:	f000 80ac 	beq.w	80045f0 <HAL_PCD_IRQHandler+0x8b0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004498:	49a5      	ldr	r1, [pc, #660]	; (8004730 <HAL_PCD_IRQHandler+0x9f0>)
 800449a:	458e      	cmp	lr, r1
 800449c:	f000 8109 	beq.w	80046b2 <HAL_PCD_IRQHandler+0x972>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044a0:	f1b9 0f00 	cmp.w	r9, #0
 80044a4:	d104      	bne.n	80044b0 <HAL_PCD_IRQHandler+0x770>
 80044a6:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 80044aa:	2a00      	cmp	r2, #0
 80044ac:	f000 81d5 	beq.w	800485a <HAL_PCD_IRQHandler+0xb1a>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044b0:	4659      	mov	r1, fp
 80044b2:	4620      	mov	r0, r4
 80044b4:	f005 fb32 	bl	8009b1c <HAL_PCD_DataOutStageCallback>
 80044b8:	e72d      	b.n	8004316 <HAL_PCD_IRQHandler+0x5d6>
  if (ep->xfer_count > ep->xfer_len)
 80044ba:	e9d7 5309 	ldrd	r5, r3, [r7, #36]	; 0x24
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044be:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 80044c2:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044c4:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 80044c6:	f63f aec0 	bhi.w	800424a <HAL_PCD_IRQHandler+0x50a>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044ca:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80044ce:	69f9      	ldr	r1, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d0:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044d4:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 80044d8:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 80044da:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 80044dc:	428a      	cmp	r2, r1
 80044de:	bf28      	it	cs
 80044e0:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044e2:	9905      	ldr	r1, [sp, #20]
 80044e4:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 80044e6:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044e8:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044ea:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 80044ee:	f0c0 8095 	bcc.w	800461c <HAL_PCD_IRQHandler+0x8dc>
 80044f2:	4652      	mov	r2, sl
 80044f4:	9606      	str	r6, [sp, #24]
 80044f6:	46ca      	mov	sl, r9
 80044f8:	4626      	mov	r6, r4
 80044fa:	46c1      	mov	r9, r8
 80044fc:	9c05      	ldr	r4, [sp, #20]
 80044fe:	4690      	mov	r8, r2
 8004500:	e019      	b.n	8004536 <HAL_PCD_IRQHandler+0x7f6>
    len = ep->xfer_len - ep->xfer_count;
 8004502:	1aed      	subs	r5, r5, r3
 8004504:	69fb      	ldr	r3, [r7, #28]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004506:	6a39      	ldr	r1, [r7, #32]
 8004508:	4642      	mov	r2, r8
 800450a:	429d      	cmp	r5, r3
 800450c:	4658      	mov	r0, fp
 800450e:	bf28      	it	cs
 8004510:	461d      	movcs	r5, r3
 8004512:	79b3      	ldrb	r3, [r6, #6]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	b2ab      	uxth	r3, r5
 8004518:	f003 ffa8 	bl	800846c <USB_WritePacket>
    ep->xfer_buff  += len;
 800451c:	6a3b      	ldr	r3, [r7, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800451e:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 8004520:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004522:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 8004524:	623b      	str	r3, [r7, #32]
    ep->xfer_count += len;
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800452a:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800452c:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004532:	d36b      	bcc.n	800460c <HAL_PCD_IRQHandler+0x8cc>
  if (ep->xfer_len <= ep->xfer_count)
 8004534:	6a7d      	ldr	r5, [r7, #36]	; 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004536:	42ab      	cmp	r3, r5
 8004538:	d3e3      	bcc.n	8004502 <HAL_PCD_IRQHandler+0x7c2>
 800453a:	4634      	mov	r4, r6
 800453c:	46c8      	mov	r8, r9
 800453e:	9e06      	ldr	r6, [sp, #24]
 8004540:	46d1      	mov	r9, sl
 8004542:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004546:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004548:	f006 020f 	and.w	r2, r6, #15
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800454c:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800454e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004552:	2301      	movs	r3, #1
 8004554:	fa03 f202 	lsl.w	r2, r3, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004558:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800455a:	ea23 0302 	bic.w	r3, r3, r2
 800455e:	634b      	str	r3, [r1, #52]	; 0x34
 8004560:	e673      	b.n	800424a <HAL_PCD_IRQHandler+0x50a>
            (void)USB_FlushTxFifo(USBx, epnum);
 8004562:	4631      	mov	r1, r6
 8004564:	9803      	ldr	r0, [sp, #12]
 8004566:	f003 fd7d 	bl	8008064 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	2b01      	cmp	r3, #1
 800456e:	f000 80a8 	beq.w	80046c2 <HAL_PCD_IRQHandler+0x982>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004572:	2302      	movs	r3, #2
 8004574:	f8c9 3008 	str.w	r3, [r9, #8]
 8004578:	e6a3      	b.n	80042c2 <HAL_PCD_IRQHandler+0x582>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800457a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800457e:	421e      	tst	r6, r3
 8004580:	f43f ac19 	beq.w	8003db6 <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004584:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 8004588:	f3c6 120a 	ubfx	r2, r6, #4, #11
 800458c:	4628      	mov	r0, r5
 800458e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004592:	4616      	mov	r6, r2
 8004594:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8004598:	f003 ff7e 	bl	8008498 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800459c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045a0:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045a2:	4433      	add	r3, r6
 80045a4:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045a8:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80045ac:	4433      	add	r3, r6
 80045ae:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80045b2:	e400      	b.n	8003db6 <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 80045b4:	4620      	mov	r0, r4
 80045b6:	f005 fadf 	bl	8009b78 <HAL_PCD_SuspendCallback>
 80045ba:	e573      	b.n	80040a4 <HAL_PCD_IRQHandler+0x364>
        HAL_PCD_DisconnectCallback(hpcd);
 80045bc:	4620      	mov	r0, r4
 80045be:	f005 fb03 	bl	8009bc8 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	e563      	b.n	800408e <HAL_PCD_IRQHandler+0x34e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80045c6:	e9d7 2307 	ldrd	r2, r3, [r7, #28]
 80045ca:	4413      	add	r3, r2
 80045cc:	623b      	str	r3, [r7, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80045ce:	2e00      	cmp	r6, #0
 80045d0:	f47f ae61 	bne.w	8004296 <HAL_PCD_IRQHandler+0x556>
 80045d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f47f ae5d 	bne.w	8004296 <HAL_PCD_IRQHandler+0x556>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045dc:	f204 429c 	addw	r2, r4, #1180	; 0x49c
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	f004 f857 	bl	8008694 <USB_EP0_OutStart>
 80045e6:	e656      	b.n	8004296 <HAL_PCD_IRQHandler+0x556>
  HAL_PCD_SetupStageCallback(hpcd);
 80045e8:	4620      	mov	r0, r4
 80045ea:	f005 fa91 	bl	8009b10 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045ee:	e696      	b.n	800431e <HAL_PCD_IRQHandler+0x5de>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045f0:	0719      	lsls	r1, r3, #28
 80045f2:	f140 8096 	bpl.w	8004722 <HAL_PCD_IRQHandler+0x9e2>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f6:	494d      	ldr	r1, [pc, #308]	; (800472c <HAL_PCD_IRQHandler+0x9ec>)
 80045f8:	458e      	cmp	lr, r1
 80045fa:	f67f ae8c 	bls.w	8004316 <HAL_PCD_IRQHandler+0x5d6>
 80045fe:	0418      	lsls	r0, r3, #16
 8004600:	f57f ae89 	bpl.w	8004316 <HAL_PCD_IRQHandler+0x5d6>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004608:	6091      	str	r1, [r2, #8]
 800460a:	e684      	b.n	8004316 <HAL_PCD_IRQHandler+0x5d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800460c:	4634      	mov	r4, r6
 800460e:	46c8      	mov	r8, r9
 8004610:	9e06      	ldr	r6, [sp, #24]
 8004612:	46d1      	mov	r9, sl
 8004614:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 8004618:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800461a:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800461c:	429d      	cmp	r5, r3
 800461e:	f63f ae14 	bhi.w	800424a <HAL_PCD_IRQHandler+0x50a>
 8004622:	e790      	b.n	8004546 <HAL_PCD_IRQHandler+0x806>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004624:	2900      	cmp	r1, #0
 8004626:	f6bf acba 	bge.w	8003f9e <HAL_PCD_IRQHandler+0x25e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800462a:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800462c:	f884 20cb 	strb.w	r2, [r4, #203]	; 0xcb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004630:	f851 0bc8 	ldr.w	r0, [r1], #200
 8004634:	f003 fed6 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004638:	7923      	ldrb	r3, [r4, #4]
 800463a:	e4b0      	b.n	8003f9e <HAL_PCD_IRQHandler+0x25e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800463c:	f504 711e 	add.w	r1, r4, #632	; 0x278
 8004640:	6820      	ldr	r0, [r4, #0]
 8004642:	f003 fecf 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004646:	7923      	ldrb	r3, [r4, #4]
 8004648:	e40e      	b.n	8003e68 <HAL_PCD_IRQHandler+0x128>
              ep->is_iso_incomplete = 0U;
 800464a:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800464c:	4659      	mov	r1, fp
 800464e:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 8004650:	f88a 3257 	strb.w	r3, [sl, #599]	; 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004654:	f005 faac 	bl	8009bb0 <HAL_PCD_ISOOUTIncompleteCallback>
 8004658:	e676      	b.n	8004348 <HAL_PCD_IRQHandler+0x608>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800465a:	2900      	cmp	r1, #0
 800465c:	f6bf aca8 	bge.w	8003fb0 <HAL_PCD_IRQHandler+0x270>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004660:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004662:	f884 20ef 	strb.w	r2, [r4, #239]	; 0xef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004666:	f851 0bec 	ldr.w	r0, [r1], #236
 800466a:	f003 febb 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800466e:	7923      	ldrb	r3, [r4, #4]
 8004670:	e49e      	b.n	8003fb0 <HAL_PCD_IRQHandler+0x270>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004672:	f504 7127 	add.w	r1, r4, #668	; 0x29c
 8004676:	6820      	ldr	r0, [r4, #0]
 8004678:	f003 feb4 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800467c:	7923      	ldrb	r3, [r4, #4]
 800467e:	f7ff bbfa 	b.w	8003e76 <HAL_PCD_IRQHandler+0x136>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004682:	2900      	cmp	r1, #0
 8004684:	f6bf ac9d 	bge.w	8003fc2 <HAL_PCD_IRQHandler+0x282>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004688:	f504 7188 	add.w	r1, r4, #272	; 0x110
 800468c:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800468e:	f884 2113 	strb.w	r2, [r4, #275]	; 0x113
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004692:	f003 fea7 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004696:	7923      	ldrb	r3, [r4, #4]
 8004698:	e493      	b.n	8003fc2 <HAL_PCD_IRQHandler+0x282>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800469a:	2900      	cmp	r1, #0
 800469c:	f6bf ac9a 	bge.w	8003fd4 <HAL_PCD_IRQHandler+0x294>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046a0:	f504 719a 	add.w	r1, r4, #308	; 0x134
 80046a4:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80046a6:	f884 2137 	strb.w	r2, [r4, #311]	; 0x137
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046aa:	f003 fe9b 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046ae:	7923      	ldrb	r3, [r4, #4]
 80046b0:	e490      	b.n	8003fd4 <HAL_PCD_IRQHandler+0x294>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046b2:	0418      	lsls	r0, r3, #16
 80046b4:	d4a6      	bmi.n	8004604 <HAL_PCD_IRQHandler+0x8c4>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046b6:	0699      	lsls	r1, r3, #26
 80046b8:	f57f aefa 	bpl.w	80044b0 <HAL_PCD_IRQHandler+0x770>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046bc:	2120      	movs	r1, #32
 80046be:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046c0:	e6f6      	b.n	80044b0 <HAL_PCD_IRQHandler+0x770>
              ep->is_iso_incomplete = 0U;
 80046c2:	f04f 0300 	mov.w	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80046c6:	4651      	mov	r1, sl
 80046c8:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 80046ca:	75fb      	strb	r3, [r7, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80046cc:	f005 fa74 	bl	8009bb8 <HAL_PCD_ISOINIncompleteCallback>
 80046d0:	e74f      	b.n	8004572 <HAL_PCD_IRQHandler+0x832>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046d2:	2900      	cmp	r1, #0
 80046d4:	f6bf ac87 	bge.w	8003fe6 <HAL_PCD_IRQHandler+0x2a6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046d8:	f504 71ac 	add.w	r1, r4, #344	; 0x158
 80046dc:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80046de:	f884 215b 	strb.w	r2, [r4, #347]	; 0x15b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046e2:	f003 fe7f 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046e6:	7923      	ldrb	r3, [r4, #4]
 80046e8:	e47d      	b.n	8003fe6 <HAL_PCD_IRQHandler+0x2a6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046ea:	f504 7142 	add.w	r1, r4, #776	; 0x308
 80046ee:	6820      	ldr	r0, [r4, #0]
 80046f0:	f003 fe78 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046f4:	7923      	ldrb	r3, [r4, #4]
 80046f6:	f7ff bbd3 	b.w	8003ea0 <HAL_PCD_IRQHandler+0x160>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046fa:	2900      	cmp	r1, #0
 80046fc:	f6bf ac7c 	bge.w	8003ff8 <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004700:	f504 71be 	add.w	r1, r4, #380	; 0x17c
 8004704:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004706:	f884 217f 	strb.w	r2, [r4, #383]	; 0x17f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800470a:	f003 fe6b 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800470e:	7923      	ldrb	r3, [r4, #4]
 8004710:	e472      	b.n	8003ff8 <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004712:	f504 714b 	add.w	r1, r4, #812	; 0x32c
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	f003 fe64 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800471c:	7923      	ldrb	r3, [r4, #4]
 800471e:	f7ff bbc6 	b.w	8003eae <HAL_PCD_IRQHandler+0x16e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004722:	0699      	lsls	r1, r3, #26
 8004724:	d572      	bpl.n	800480c <HAL_PCD_IRQHandler+0xacc>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004726:	2120      	movs	r1, #32
 8004728:	6091      	str	r1, [r2, #8]
 800472a:	e5f4      	b.n	8004316 <HAL_PCD_IRQHandler+0x5d6>
 800472c:	4f54300a 	.word	0x4f54300a
 8004730:	4f54310a 	.word	0x4f54310a
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004734:	2900      	cmp	r1, #0
 8004736:	f6bf ac68 	bge.w	800400a <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800473a:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
 800473e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004740:	f884 21a3 	strb.w	r2, [r4, #419]	; 0x1a3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004744:	f003 fe4e 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004748:	7923      	ldrb	r3, [r4, #4]
 800474a:	e45e      	b.n	800400a <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800474c:	f504 7154 	add.w	r1, r4, #848	; 0x350
 8004750:	6820      	ldr	r0, [r4, #0]
 8004752:	f003 fe47 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004756:	7923      	ldrb	r3, [r4, #4]
 8004758:	f7ff bbb0 	b.w	8003ebc <HAL_PCD_IRQHandler+0x17c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800475c:	2900      	cmp	r1, #0
 800475e:	f6bf ac5d 	bge.w	800401c <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004762:	f504 71e2 	add.w	r1, r4, #452	; 0x1c4
 8004766:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004768:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800476c:	f003 fe3a 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004770:	7923      	ldrb	r3, [r4, #4]
 8004772:	e453      	b.n	800401c <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004774:	f504 715d 	add.w	r1, r4, #884	; 0x374
 8004778:	6820      	ldr	r0, [r4, #0]
 800477a:	f003 fe33 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800477e:	7923      	ldrb	r3, [r4, #4]
 8004780:	f7ff bba3 	b.w	8003eca <HAL_PCD_IRQHandler+0x18a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004784:	2900      	cmp	r1, #0
 8004786:	f6bf ac52 	bge.w	800402e <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800478a:	f504 71f4 	add.w	r1, r4, #488	; 0x1e8
 800478e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004790:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004794:	f003 fe26 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004798:	7923      	ldrb	r3, [r4, #4]
 800479a:	e448      	b.n	800402e <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800479c:	f504 7166 	add.w	r1, r4, #920	; 0x398
 80047a0:	6820      	ldr	r0, [r4, #0]
 80047a2:	f003 fe1f 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047a6:	7923      	ldrb	r3, [r4, #4]
 80047a8:	f7ff bb96 	b.w	8003ed8 <HAL_PCD_IRQHandler+0x198>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047ac:	2900      	cmp	r1, #0
 80047ae:	f6bf ac47 	bge.w	8004040 <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047b2:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80047b6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80047b8:	f884 220f 	strb.w	r2, [r4, #527]	; 0x20f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047bc:	f003 fe12 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047c0:	7923      	ldrb	r3, [r4, #4]
 80047c2:	e43d      	b.n	8004040 <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047c4:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 80047c8:	6820      	ldr	r0, [r4, #0]
 80047ca:	f003 fe0b 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047ce:	7923      	ldrb	r3, [r4, #4]
 80047d0:	f7ff bb89 	b.w	8003ee6 <HAL_PCD_IRQHandler+0x1a6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047d4:	2900      	cmp	r1, #0
 80047d6:	f6bf ac3c 	bge.w	8004052 <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047da:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80047de:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80047e0:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047e4:	f003 fdfe 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047e8:	7923      	ldrb	r3, [r4, #4]
 80047ea:	e432      	b.n	8004052 <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047ec:	f504 7178 	add.w	r1, r4, #992	; 0x3e0
 80047f0:	6820      	ldr	r0, [r4, #0]
 80047f2:	f003 fdf7 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f6:	7923      	ldrb	r3, [r4, #4]
 80047f8:	f7ff bb7c 	b.w	8003ef4 <HAL_PCD_IRQHandler+0x1b4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047fc:	f204 4104 	addw	r1, r4, #1028	; 0x404
 8004800:	6820      	ldr	r0, [r4, #0]
 8004802:	f003 fdef 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004806:	7923      	ldrb	r3, [r4, #4]
 8004808:	f7ff bb7b 	b.w	8003f02 <HAL_PCD_IRQHandler+0x1c2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800480c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8004810:	f47f ad81 	bne.w	8004316 <HAL_PCD_IRQHandler+0x5d6>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004814:	491b      	ldr	r1, [pc, #108]	; (8004884 <HAL_PCD_IRQHandler+0xb44>)
 8004816:	458e      	cmp	lr, r1
 8004818:	d902      	bls.n	8004820 <HAL_PCD_IRQHandler+0xae0>
 800481a:	041b      	lsls	r3, r3, #16
 800481c:	f53f aef2 	bmi.w	8004604 <HAL_PCD_IRQHandler+0x8c4>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004820:	6911      	ldr	r1, [r2, #16]
 8004822:	f8da 2274 	ldr.w	r2, [sl, #628]	; 0x274
 8004826:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800482a:	1a52      	subs	r2, r2, r1
 800482c:	f8ca 2268 	str.w	r2, [sl, #616]	; 0x268
        if (epnum == 0U)
 8004830:	f1b9 0f00 	cmp.w	r9, #0
 8004834:	f47f ae3c 	bne.w	80044b0 <HAL_PCD_IRQHandler+0x770>
          if (ep->xfer_len == 0U)
 8004838:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 800483c:	b1d9      	cbz	r1, 8004876 <HAL_PCD_IRQHandler+0xb36>
            ep->xfer_buff += ep->xfer_count;
 800483e:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
 8004842:	4411      	add	r1, r2
 8004844:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004848:	e632      	b.n	80044b0 <HAL_PCD_IRQHandler+0x770>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800484a:	f504 6185 	add.w	r1, r4, #1064	; 0x428
 800484e:	6820      	ldr	r0, [r4, #0]
 8004850:	f003 fdc8 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004854:	7923      	ldrb	r3, [r4, #4]
 8004856:	f7ff bb5b 	b.w	8003f10 <HAL_PCD_IRQHandler+0x1d0>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800485a:	f204 429c 	addw	r2, r4, #1180	; 0x49c
 800485e:	4649      	mov	r1, r9
 8004860:	f003 ff18 	bl	8008694 <USB_EP0_OutStart>
 8004864:	e624      	b.n	80044b0 <HAL_PCD_IRQHandler+0x770>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004866:	f204 414c 	addw	r1, r4, #1100	; 0x44c
 800486a:	6820      	ldr	r0, [r4, #0]
 800486c:	f003 fdba 	bl	80083e4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004870:	7923      	ldrb	r3, [r4, #4]
 8004872:	f7ff bb54 	b.w	8003f1e <HAL_PCD_IRQHandler+0x1de>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004876:	f204 429c 	addw	r2, r4, #1180	; 0x49c
 800487a:	2101      	movs	r1, #1
 800487c:	f003 ff0a 	bl	8008694 <USB_EP0_OutStart>
 8004880:	e616      	b.n	80044b0 <HAL_PCD_IRQHandler+0x770>
 8004882:	bf00      	nop
 8004884:	4f54300a 	.word	0x4f54300a

08004888 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8004888:	f890 2494 	ldrb.w	r2, [r0, #1172]	; 0x494
 800488c:	2a01      	cmp	r2, #1
 800488e:	d00d      	beq.n	80048ac <HAL_PCD_SetAddress+0x24>
 8004890:	2201      	movs	r2, #1
{
 8004892:	b510      	push	{r4, lr}
 8004894:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004896:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8004898:	7461      	strb	r1, [r4, #17]
  __HAL_LOCK(hpcd);
 800489a:	f884 2494 	strb.w	r2, [r4, #1172]	; 0x494
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800489e:	f003 fe7f 	bl	80085a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048a2:	2300      	movs	r3, #0
  return HAL_OK;
 80048a4:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80048a6:	f884 3494 	strb.w	r3, [r4, #1172]	; 0x494
}
 80048aa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80048ac:	2002      	movs	r0, #2
}
 80048ae:	4770      	bx	lr

080048b0 <HAL_PCD_EP_Open>:
{
 80048b0:	b510      	push	{r4, lr}
 80048b2:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 80048b6:	0609      	lsls	r1, r1, #24
{
 80048b8:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80048ba:	d427      	bmi.n	800490c <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048bc:	f04f 0c24 	mov.w	ip, #36	; 0x24
 80048c0:	fb0c 0c0e 	mla	ip, ip, lr, r0
 80048c4:	f50c 7115 	add.w	r1, ip, #596	; 0x254
    ep->is_in = 0U;
 80048c8:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 80048cc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80048d0:	2000      	movs	r0, #0
 80048d2:	f88c 0255 	strb.w	r0, [ip, #597]	; 0x255
  ep->maxpacket = ep_mps;
 80048d6:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80048d8:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048da:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 80048de:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80048e0:	b10a      	cbz	r2, 80048e6 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 80048e2:	f8a1 e01a 	strh.w	lr, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d101      	bne.n	80048ee <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	714b      	strb	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 80048ee:	f894 3494 	ldrb.w	r3, [r4, #1172]	; 0x494
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d018      	beq.n	8004928 <HAL_PCD_EP_Open+0x78>
 80048f6:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048f8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80048fa:	f884 3494 	strb.w	r3, [r4, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048fe:	f003 fbe5 	bl	80080cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004902:	2300      	movs	r3, #0
  return ret;
 8004904:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8004906:	f884 3494 	strb.w	r3, [r4, #1172]	; 0x494
}
 800490a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800490c:	2024      	movs	r0, #36	; 0x24
    ep->is_in = 1U;
 800490e:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004912:	fb00 400e 	mla	r0, r0, lr, r4
 8004916:	f100 0114 	add.w	r1, r0, #20
    ep->is_in = 1U;
 800491a:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 800491e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004922:	f880 c015 	strb.w	ip, [r0, #21]
 8004926:	e7d6      	b.n	80048d6 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8004928:	2002      	movs	r0, #2
}
 800492a:	bd10      	pop	{r4, pc}

0800492c <HAL_PCD_EP_Receive>:
{
 800492c:	b508      	push	{r3, lr}
 800492e:	f001 0e0f 	and.w	lr, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004932:	2124      	movs	r1, #36	; 0x24
  ep->xfer_buff = pBuf;
 8004934:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004938:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 800493c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004940:	f501 7115 	add.w	r1, r1, #596	; 0x254
  ep->xfer_len = len;
 8004944:	f8cc 3264 	str.w	r3, [ip, #612]	; 0x264
  ep->xfer_count = 0U;
 8004948:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800494a:	f8cc 2260 	str.w	r2, [ip, #608]	; 0x260
  ep->num = ep_addr & EP_ADDR_MSK;
 800494e:	f88c e254 	strb.w	lr, [ip, #596]	; 0x254
  ep->xfer_count = 0U;
 8004952:	f8cc 3268 	str.w	r3, [ip, #616]	; 0x268
  ep->is_in = 0U;
 8004956:	f88c 3255 	strb.w	r3, [ip, #597]	; 0x255
  if (hpcd->Init.dma_enable == 1U)
 800495a:	7983      	ldrb	r3, [r0, #6]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800495c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800495e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8004960:	bf08      	it	eq
 8004962:	f8cc 2270 	streq.w	r2, [ip, #624]	; 0x270
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004966:	461a      	mov	r2, r3
 8004968:	f003 fbf8 	bl	800815c <USB_EPStartXfer>
}
 800496c:	2000      	movs	r0, #0
 800496e:	bd08      	pop	{r3, pc}

08004970 <HAL_PCD_EP_Transmit>:
{
 8004970:	b508      	push	{r3, lr}
 8004972:	f001 0e0f 	and.w	lr, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004976:	2124      	movs	r1, #36	; 0x24
  ep->xfer_buff = pBuf;
 8004978:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800497c:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 8004980:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004984:	3114      	adds	r1, #20
  ep->xfer_len = len;
 8004986:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  ep->xfer_count = 0U;
 800498a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800498c:	f8cc 2020 	str.w	r2, [ip, #32]
  ep->xfer_count = 0U;
 8004990:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  ep->is_in = 1U;
 8004994:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8004996:	f88c e014 	strb.w	lr, [ip, #20]
  ep->is_in = 1U;
 800499a:	f88c 3015 	strb.w	r3, [ip, #21]
  if (hpcd->Init.dma_enable == 1U)
 800499e:	7983      	ldrb	r3, [r0, #6]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049a0:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80049a2:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80049a4:	bf08      	it	eq
 80049a6:	f8cc 2030 	streq.w	r2, [ip, #48]	; 0x30
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049aa:	461a      	mov	r2, r3
 80049ac:	f003 fbd6 	bl	800815c <USB_EPStartXfer>
}
 80049b0:	2000      	movs	r0, #0
 80049b2:	bd08      	pop	{r3, pc}

080049b4 <HAL_PCD_EP_SetStall>:
{
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049ba:	7903      	ldrb	r3, [r0, #4]
 80049bc:	42ab      	cmp	r3, r5
 80049be:	d333      	bcc.n	8004a28 <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 80049c0:	060b      	lsls	r3, r1, #24
 80049c2:	4604      	mov	r4, r0
 80049c4:	d41d      	bmi.n	8004a02 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 80049c6:	2224      	movs	r2, #36	; 0x24
    ep->is_in = 0U;
 80049c8:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 80049cc:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 80049d0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80049d4:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80049d6:	f501 7115 	add.w	r1, r1, #596	; 0x254
    ep->is_in = 0U;
 80049da:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
  ep->is_stall = 1U;
 80049de:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80049e0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80049e2:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80049e4:	f894 2494 	ldrb.w	r2, [r4, #1172]	; 0x494
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d01b      	beq.n	8004a24 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80049ec:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80049ee:	f884 3494 	strb.w	r3, [r4, #1172]	; 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80049f2:	f003 fd75 	bl	80084e0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049f6:	b1cd      	cbz	r5, 8004a2c <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 80049f8:	2300      	movs	r3, #0
  return HAL_OK;
 80049fa:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80049fc:	f884 3494 	strb.w	r3, [r4, #1172]	; 0x494
}
 8004a00:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a02:	2124      	movs	r1, #36	; 0x24
    ep->is_in = 1U;
 8004a04:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8004a08:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a0a:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8004a0e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a12:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8004a14:	755a      	strb	r2, [r3, #21]
  ep->is_stall = 1U;
 8004a16:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a18:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8004a1a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8004a1c:	f894 2494 	ldrb.w	r2, [r4, #1172]	; 0x494
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d1e3      	bne.n	80049ec <HAL_PCD_EP_SetStall+0x38>
 8004a24:	2002      	movs	r0, #2
}
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004a28:	2001      	movs	r0, #1
}
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a2c:	f204 429c 	addw	r2, r4, #1180	; 0x49c
 8004a30:	79a1      	ldrb	r1, [r4, #6]
 8004a32:	6820      	ldr	r0, [r4, #0]
 8004a34:	f003 fe2e 	bl	8008694 <USB_EP0_OutStart>
 8004a38:	e7de      	b.n	80049f8 <HAL_PCD_EP_SetStall+0x44>
 8004a3a:	bf00      	nop

08004a3c <HAL_PCD_EP_ClrStall>:
{
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a42:	7902      	ldrb	r2, [r0, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d331      	bcc.n	8004aac <HAL_PCD_EP_ClrStall+0x70>
  if ((0x80U & ep_addr) == 0x80U)
 8004a48:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004a4c:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a4e:	f04f 0124 	mov.w	r1, #36	; 0x24
    ep->is_in = 1U;
 8004a52:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8004a56:	d119      	bne.n	8004a8c <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a58:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8004a62:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a64:	f501 7115 	add.w	r1, r1, #596	; 0x254
    ep->is_in = 0U;
 8004a68:	f882 0255 	strb.w	r0, [r2, #597]	; 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a6c:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8004a6e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8004a70:	f894 3494 	ldrb.w	r3, [r4, #1172]	; 0x494
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d017      	beq.n	8004aa8 <HAL_PCD_EP_ClrStall+0x6c>
 8004a78:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a7a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004a7c:	f884 3494 	strb.w	r3, [r4, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a80:	f003 fd62 	bl	8008548 <USB_EPClearStall>
  return HAL_OK;
 8004a84:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8004a86:	f884 5494 	strb.w	r5, [r4, #1172]	; 0x494
}
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a8c:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8004a90:	2001      	movs	r0, #1
 8004a92:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8004a96:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a98:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8004a9a:	7550      	strb	r0, [r2, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a9c:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8004a9e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8004aa0:	f894 3494 	ldrb.w	r3, [r4, #1172]	; 0x494
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d1e7      	bne.n	8004a78 <HAL_PCD_EP_ClrStall+0x3c>
 8004aa8:	2002      	movs	r0, #2
}
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004aac:	2001      	movs	r0, #1
}
 8004aae:	bd38      	pop	{r3, r4, r5, pc}

08004ab0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ab0:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ab2:	6804      	ldr	r4, [r0, #0]
 8004ab4:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8004ab6:	b931      	cbnz	r1, 8004ac6 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8004abc:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004abe:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8004ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ac4:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ac6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8004ac8:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004aca:	eb03 4c10 	add.w	ip, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8004ace:	d00b      	beq.n	8004ae8 <HAL_PCDEx_SetTxFiFo+0x38>
 8004ad0:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ad2:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8004ad6:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ad8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8004adc:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ade:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ae0:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ae2:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8004ae6:	d3f4      	bcc.n	8004ad2 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ae8:	3140      	adds	r1, #64	; 0x40
 8004aea:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
}
 8004aee:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004af0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8004af4:	6062      	str	r2, [r4, #4]
}
 8004af6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004afc:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 8004afe:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6259      	str	r1, [r3, #36]	; 0x24
}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop

08004b08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b08:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8004b0a:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b0e:	4909      	ldr	r1, [pc, #36]	; (8004b34 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b10:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 8004b12:	4660      	mov	r0, ip
{
 8004b14:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 8004b16:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 8004b18:	f883 c4cc 	strb.w	ip, [r3, #1228]	; 0x4cc
  hpcd->lpm_active = 1U;
 8004b1c:	f8c3 44d8 	str.w	r4, [r3, #1240]	; 0x4d8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b20:	6993      	ldr	r3, [r2, #24]
}
 8004b22:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b2a:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b2c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004b2e:	4319      	orrs	r1, r3
 8004b30:	6551      	str	r1, [r2, #84]	; 0x54
}
 8004b32:	4770      	bx	lr
 8004b34:	10000003 	.word	0x10000003

08004b38 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop

08004b3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b3c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b3e:	4c10      	ldr	r4, [pc, #64]	; (8004b80 <HAL_PWREx_ConfigSupply+0x44>)
 8004b40:	68e3      	ldr	r3, [r4, #12]
 8004b42:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b46:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b48:	d105      	bne.n	8004b56 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b4a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b4e:	1a18      	subs	r0, r3, r0
 8004b50:	bf18      	it	ne
 8004b52:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8004b54:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b56:	f023 0307 	bic.w	r3, r3, #7
 8004b5a:	4303      	orrs	r3, r0
 8004b5c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8004b5e:	f7fd f8eb 	bl	8001d38 <HAL_GetTick>
 8004b62:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b64:	e005      	b.n	8004b72 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b66:	f7fd f8e7 	bl	8001d38 <HAL_GetTick>
 8004b6a:	1b40      	subs	r0, r0, r5
 8004b6c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004b70:	d804      	bhi.n	8004b7c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b72:	6863      	ldr	r3, [r4, #4]
 8004b74:	049b      	lsls	r3, r3, #18
 8004b76:	d5f6      	bpl.n	8004b66 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8004b78:	2000      	movs	r0, #0
}
 8004b7a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004b7c:	2001      	movs	r0, #1
}
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	58024800 	.word	0x58024800

08004b84 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004b84:	4a02      	ldr	r2, [pc, #8]	; (8004b90 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8004b86:	68d3      	ldr	r3, [r2, #12]
 8004b88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b8c:	60d3      	str	r3, [r2, #12]
}
 8004b8e:	4770      	bx	lr
 8004b90:	58024800 	.word	0x58024800

08004b94 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b94:	4b3c      	ldr	r3, [pc, #240]	; (8004c88 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8004b96:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b9a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b9c:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8004b9e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004ba2:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004ba4:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004ba8:	d038      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004baa:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004bae:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bb2:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004bb6:	fb05 f101 	mul.w	r1, r5, r1
 8004bba:	2a01      	cmp	r2, #1
 8004bbc:	ee07 1a90 	vmov	s15, r1
 8004bc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8004bc4:	d002      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8004bc6:	2a02      	cmp	r2, #2
 8004bc8:	d050      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 8004bca:	b34a      	cbz	r2, 8004c20 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bcc:	ee07 0a90 	vmov	s15, r0
 8004bd0:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 8004c8c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8004bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004bde:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8004c90 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8004be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bf2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004bf6:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004bfa:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004bfe:	4b22      	ldr	r3, [pc, #136]	; (8004c88 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004c06:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004c08:	ee07 3a90 	vmov	s15, r3
 8004c0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c18:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8004c1c:	bc30      	pop	{r4, r5}
 8004c1e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	0692      	lsls	r2, r2, #26
 8004c24:	d529      	bpl.n	8004c7a <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c26:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c28:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c2c:	4a19      	ldr	r2, [pc, #100]	; (8004c94 <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c34:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c3c:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8004c90 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8004c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c44:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c46:	ee06 3a10 	vmov	s12, r3
 8004c4a:	ee05 2a90 	vmov	s11, r2
 8004c4e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004c52:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004c56:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004c5a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004c5e:	eef0 7a46 	vmov.f32	s15, s12
 8004c62:	eee7 7a05 	vfma.f32	s15, s14, s10
 8004c66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004c6a:	e7c8      	b.n	8004bfe <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c6c:	ee07 0a90 	vmov	s15, r0
 8004c70:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004c98 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8004c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c78:	e7ae      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c7a:	ee07 0a90 	vmov	s15, r0
 8004c7e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004c9c <HAL_RCC_GetSysClockFreq.part.0+0x108>
 8004c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c86:	e7a7      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8004c88:	58024400 	.word	0x58024400
 8004c8c:	4a742400 	.word	0x4a742400
 8004c90:	39000000 	.word	0x39000000
 8004c94:	03d09000 	.word	0x03d09000
 8004c98:	4bbebc20 	.word	0x4bbebc20
 8004c9c:	4c742400 	.word	0x4c742400

08004ca0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	f000 81bd 	beq.w	8005020 <HAL_RCC_OscConfig+0x380>
{
 8004ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca8:	6803      	ldr	r3, [r0, #0]
 8004caa:	4604      	mov	r4, r0
 8004cac:	07d9      	lsls	r1, r3, #31
 8004cae:	d52e      	bpl.n	8004d0e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb0:	4993      	ldr	r1, [pc, #588]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
 8004cb2:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cb4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb6:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cba:	2a10      	cmp	r2, #16
 8004cbc:	f000 80f0 	beq.w	8004ea0 <HAL_RCC_OscConfig+0x200>
 8004cc0:	2a18      	cmp	r2, #24
 8004cc2:	f000 80e8 	beq.w	8004e96 <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc6:	6863      	ldr	r3, [r4, #4]
 8004cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ccc:	f000 8108 	beq.w	8004ee0 <HAL_RCC_OscConfig+0x240>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8146 	beq.w	8004f62 <HAL_RCC_OscConfig+0x2c2>
 8004cd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cda:	4b89      	ldr	r3, [pc, #548]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	f000 8254 	beq.w	800518a <HAL_RCC_OscConfig+0x4ea>
 8004ce2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004cf0:	f7fd f822 	bl	8001d38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cf4:	4e82      	ldr	r6, [pc, #520]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8004cf6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cf8:	e005      	b.n	8004d06 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cfa:	f7fd f81d 	bl	8001d38 <HAL_GetTick>
 8004cfe:	1b40      	subs	r0, r0, r5
 8004d00:	2864      	cmp	r0, #100	; 0x64
 8004d02:	f200 812c 	bhi.w	8004f5e <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d06:	6833      	ldr	r3, [r6, #0]
 8004d08:	039b      	lsls	r3, r3, #14
 8004d0a:	d5f6      	bpl.n	8004cfa <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	079d      	lsls	r5, r3, #30
 8004d10:	d47e      	bmi.n	8004e10 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d12:	06d9      	lsls	r1, r3, #27
 8004d14:	d528      	bpl.n	8004d68 <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d16:	497a      	ldr	r1, [pc, #488]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
 8004d18:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d1a:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d1c:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d20:	2a08      	cmp	r2, #8
 8004d22:	f000 80cd 	beq.w	8004ec0 <HAL_RCC_OscConfig+0x220>
 8004d26:	2a18      	cmp	r2, #24
 8004d28:	f000 80c5 	beq.w	8004eb6 <HAL_RCC_OscConfig+0x216>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d2c:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8004d2e:	4d74      	ldr	r5, [pc, #464]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 814e 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_CSI_ENABLE();
 8004d36:	682b      	ldr	r3, [r5, #0]
 8004d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004d3e:	f7fc fffb 	bl	8001d38 <HAL_GetTick>
 8004d42:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d44:	e005      	b.n	8004d52 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d46:	f7fc fff7 	bl	8001d38 <HAL_GetTick>
 8004d4a:	1b80      	subs	r0, r0, r6
 8004d4c:	2802      	cmp	r0, #2
 8004d4e:	f200 8106 	bhi.w	8004f5e <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d52:	682b      	ldr	r3, [r5, #0]
 8004d54:	05db      	lsls	r3, r3, #23
 8004d56:	d5f6      	bpl.n	8004d46 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d58:	68eb      	ldr	r3, [r5, #12]
 8004d5a:	6a22      	ldr	r2, [r4, #32]
 8004d5c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004d60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004d64:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	071d      	lsls	r5, r3, #28
 8004d6a:	d516      	bpl.n	8004d9a <HAL_RCC_OscConfig+0xfa>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d6c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004d6e:	4d64      	ldr	r5, [pc, #400]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 810c 	beq.w	8004f8e <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_ENABLE();
 8004d76:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004d78:	f043 0301 	orr.w	r3, r3, #1
 8004d7c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004d7e:	f7fc ffdb 	bl	8001d38 <HAL_GetTick>
 8004d82:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d84:	e005      	b.n	8004d92 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d86:	f7fc ffd7 	bl	8001d38 <HAL_GetTick>
 8004d8a:	1b80      	subs	r0, r0, r6
 8004d8c:	2802      	cmp	r0, #2
 8004d8e:	f200 80e6 	bhi.w	8004f5e <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d92:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004d94:	0798      	lsls	r0, r3, #30
 8004d96:	d5f6      	bpl.n	8004d86 <HAL_RCC_OscConfig+0xe6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	069a      	lsls	r2, r3, #26
 8004d9c:	d516      	bpl.n	8004dcc <HAL_RCC_OscConfig+0x12c>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004d9e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8004da0:	4d57      	ldr	r5, [pc, #348]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 8104 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_HSI48_ENABLE();
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004db0:	f7fc ffc2 	bl	8001d38 <HAL_GetTick>
 8004db4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004db6:	e005      	b.n	8004dc4 <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004db8:	f7fc ffbe 	bl	8001d38 <HAL_GetTick>
 8004dbc:	1b80      	subs	r0, r0, r6
 8004dbe:	2802      	cmp	r0, #2
 8004dc0:	f200 80cd 	bhi.w	8004f5e <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	049f      	lsls	r7, r3, #18
 8004dc8:	d5f6      	bpl.n	8004db8 <HAL_RCC_OscConfig+0x118>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	0759      	lsls	r1, r3, #29
 8004dce:	f100 808d 	bmi.w	8004eec <HAL_RCC_OscConfig+0x24c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004dd4:	b1d0      	cbz	r0, 8004e0c <HAL_RCC_OscConfig+0x16c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004dd6:	4d4a      	ldr	r5, [pc, #296]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
 8004dd8:	692b      	ldr	r3, [r5, #16]
 8004dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dde:	2b18      	cmp	r3, #24
 8004de0:	f000 8185 	beq.w	80050ee <HAL_RCC_OscConfig+0x44e>
        __HAL_RCC_PLL_DISABLE();
 8004de4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004de6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004de8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dec:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dee:	f000 8119 	beq.w	8005024 <HAL_RCC_OscConfig+0x384>
        tickstart = HAL_GetTick();
 8004df2:	f7fc ffa1 	bl	8001d38 <HAL_GetTick>
 8004df6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004df8:	e005      	b.n	8004e06 <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfa:	f7fc ff9d 	bl	8001d38 <HAL_GetTick>
 8004dfe:	1b00      	subs	r0, r0, r4
 8004e00:	2802      	cmp	r0, #2
 8004e02:	f200 80ac 	bhi.w	8004f5e <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e06:	682b      	ldr	r3, [r5, #0]
 8004e08:	019b      	lsls	r3, r3, #6
 8004e0a:	d4f6      	bmi.n	8004dfa <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 8004e0c:	2000      	movs	r0, #0
}
 8004e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e10:	4a3b      	ldr	r2, [pc, #236]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
 8004e12:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e14:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e16:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8004e1a:	d122      	bne.n	8004e62 <HAL_RCC_OscConfig+0x1c2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e1c:	4b38      	ldr	r3, [pc, #224]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
 8004e1e:	68e2      	ldr	r2, [r4, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	0759      	lsls	r1, r3, #29
 8004e24:	d501      	bpl.n	8004e2a <HAL_RCC_OscConfig+0x18a>
 8004e26:	2a00      	cmp	r2, #0
 8004e28:	d043      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e2a:	4d35      	ldr	r5, [pc, #212]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	f023 0319 	bic.w	r3, r3, #25
 8004e32:	4313      	orrs	r3, r2
 8004e34:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e36:	f7fc ff7f 	bl	8001d38 <HAL_GetTick>
 8004e3a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e3c:	e005      	b.n	8004e4a <HAL_RCC_OscConfig+0x1aa>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3e:	f7fc ff7b 	bl	8001d38 <HAL_GetTick>
 8004e42:	1b80      	subs	r0, r0, r6
 8004e44:	2802      	cmp	r0, #2
 8004e46:	f200 808a 	bhi.w	8004f5e <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e4a:	682b      	ldr	r3, [r5, #0]
 8004e4c:	075b      	lsls	r3, r3, #29
 8004e4e:	d5f6      	bpl.n	8004e3e <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e50:	686b      	ldr	r3, [r5, #4]
 8004e52:	6922      	ldr	r2, [r4, #16]
 8004e54:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e5c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	e757      	b.n	8004d12 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e62:	2b18      	cmp	r3, #24
 8004e64:	f000 80d8 	beq.w	8005018 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e68:	4d25      	ldr	r5, [pc, #148]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e6a:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e6c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e6e:	2a00      	cmp	r2, #0
 8004e70:	f000 80c1 	beq.w	8004ff6 <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e74:	f023 0319 	bic.w	r3, r3, #25
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e7c:	f7fc ff5c 	bl	8001d38 <HAL_GetTick>
 8004e80:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e82:	e004      	b.n	8004e8e <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e84:	f7fc ff58 	bl	8001d38 <HAL_GetTick>
 8004e88:	1b80      	subs	r0, r0, r6
 8004e8a:	2802      	cmp	r0, #2
 8004e8c:	d867      	bhi.n	8004f5e <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e8e:	682b      	ldr	r3, [r5, #0]
 8004e90:	075f      	lsls	r7, r3, #29
 8004e92:	d5f7      	bpl.n	8004e84 <HAL_RCC_OscConfig+0x1e4>
 8004e94:	e7dc      	b.n	8004e50 <HAL_RCC_OscConfig+0x1b0>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e96:	f001 0103 	and.w	r1, r1, #3
 8004e9a:	2902      	cmp	r1, #2
 8004e9c:	f47f af13 	bne.w	8004cc6 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea0:	4a17      	ldr	r2, [pc, #92]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	0392      	lsls	r2, r2, #14
 8004ea6:	f57f af32 	bpl.w	8004d0e <HAL_RCC_OscConfig+0x6e>
 8004eaa:	6862      	ldr	r2, [r4, #4]
 8004eac:	2a00      	cmp	r2, #0
 8004eae:	f47f af2e 	bne.w	8004d0e <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8004eb2:	2001      	movs	r0, #1
}
 8004eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004eb6:	f001 0103 	and.w	r1, r1, #3
 8004eba:	2901      	cmp	r1, #1
 8004ebc:	f47f af36 	bne.w	8004d2c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ec0:	4a0f      	ldr	r2, [pc, #60]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	05d2      	lsls	r2, r2, #23
 8004ec6:	d502      	bpl.n	8004ece <HAL_RCC_OscConfig+0x22e>
 8004ec8:	69e2      	ldr	r2, [r4, #28]
 8004eca:	2a80      	cmp	r2, #128	; 0x80
 8004ecc:	d1f1      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ece:	490c      	ldr	r1, [pc, #48]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
 8004ed0:	6a20      	ldr	r0, [r4, #32]
 8004ed2:	68ca      	ldr	r2, [r1, #12]
 8004ed4:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8004ed8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8004edc:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ede:	e743      	b.n	8004d68 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee0:	4a07      	ldr	r2, [pc, #28]	; (8004f00 <HAL_RCC_OscConfig+0x260>)
 8004ee2:	6813      	ldr	r3, [r2, #0]
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004eea:	e701      	b.n	8004cf0 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8004eec:	4d05      	ldr	r5, [pc, #20]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004eee:	682b      	ldr	r3, [r5, #0]
 8004ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004ef6:	f7fc ff1f 	bl	8001d38 <HAL_GetTick>
 8004efa:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004efc:	e009      	b.n	8004f12 <HAL_RCC_OscConfig+0x272>
 8004efe:	bf00      	nop
 8004f00:	58024400 	.word	0x58024400
 8004f04:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f08:	f7fc ff16 	bl	8001d38 <HAL_GetTick>
 8004f0c:	1b80      	subs	r0, r0, r6
 8004f0e:	2864      	cmp	r0, #100	; 0x64
 8004f10:	d825      	bhi.n	8004f5e <HAL_RCC_OscConfig+0x2be>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f12:	682b      	ldr	r3, [r5, #0]
 8004f14:	05da      	lsls	r2, r3, #23
 8004f16:	d5f7      	bpl.n	8004f08 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f18:	68a3      	ldr	r3, [r4, #8]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	f000 815c 	beq.w	80051d8 <HAL_RCC_OscConfig+0x538>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 813a 	beq.w	800519a <HAL_RCC_OscConfig+0x4fa>
 8004f26:	2b05      	cmp	r3, #5
 8004f28:	4ba8      	ldr	r3, [pc, #672]	; (80051cc <HAL_RCC_OscConfig+0x52c>)
 8004f2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f2c:	f000 815a 	beq.w	80051e4 <HAL_RCC_OscConfig+0x544>
 8004f30:	f022 0201 	bic.w	r2, r2, #1
 8004f34:	671a      	str	r2, [r3, #112]	; 0x70
 8004f36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f38:	f022 0204 	bic.w	r2, r2, #4
 8004f3c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004f3e:	f7fc fefb 	bl	8001d38 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f42:	4ea2      	ldr	r6, [pc, #648]	; (80051cc <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f44:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004f48:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f4a:	e004      	b.n	8004f56 <HAL_RCC_OscConfig+0x2b6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4c:	f7fc fef4 	bl	8001d38 <HAL_GetTick>
 8004f50:	1b40      	subs	r0, r0, r5
 8004f52:	42b8      	cmp	r0, r7
 8004f54:	d803      	bhi.n	8004f5e <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f56:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004f58:	079b      	lsls	r3, r3, #30
 8004f5a:	d5f7      	bpl.n	8004f4c <HAL_RCC_OscConfig+0x2ac>
 8004f5c:	e739      	b.n	8004dd2 <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 8004f5e:	2003      	movs	r0, #3
}
 8004f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f62:	4d9a      	ldr	r5, [pc, #616]	; (80051cc <HAL_RCC_OscConfig+0x52c>)
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6a:	602b      	str	r3, [r5, #0]
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004f74:	f7fc fee0 	bl	8001d38 <HAL_GetTick>
 8004f78:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f7a:	e004      	b.n	8004f86 <HAL_RCC_OscConfig+0x2e6>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f7c:	f7fc fedc 	bl	8001d38 <HAL_GetTick>
 8004f80:	1b80      	subs	r0, r0, r6
 8004f82:	2864      	cmp	r0, #100	; 0x64
 8004f84:	d8eb      	bhi.n	8004f5e <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f86:	682b      	ldr	r3, [r5, #0]
 8004f88:	039f      	lsls	r7, r3, #14
 8004f8a:	d4f7      	bmi.n	8004f7c <HAL_RCC_OscConfig+0x2dc>
 8004f8c:	e6be      	b.n	8004d0c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8004f8e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004f96:	f7fc fecf 	bl	8001d38 <HAL_GetTick>
 8004f9a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f9c:	e004      	b.n	8004fa8 <HAL_RCC_OscConfig+0x308>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f9e:	f7fc fecb 	bl	8001d38 <HAL_GetTick>
 8004fa2:	1b80      	subs	r0, r0, r6
 8004fa4:	2802      	cmp	r0, #2
 8004fa6:	d8da      	bhi.n	8004f5e <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fa8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004faa:	0799      	lsls	r1, r3, #30
 8004fac:	d4f7      	bmi.n	8004f9e <HAL_RCC_OscConfig+0x2fe>
 8004fae:	e6f3      	b.n	8004d98 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fb6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004fb8:	f7fc febe 	bl	8001d38 <HAL_GetTick>
 8004fbc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fbe:	e004      	b.n	8004fca <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fc0:	f7fc feba 	bl	8001d38 <HAL_GetTick>
 8004fc4:	1b80      	subs	r0, r0, r6
 8004fc6:	2802      	cmp	r0, #2
 8004fc8:	d8c9      	bhi.n	8004f5e <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fca:	682b      	ldr	r3, [r5, #0]
 8004fcc:	0498      	lsls	r0, r3, #18
 8004fce:	d4f7      	bmi.n	8004fc0 <HAL_RCC_OscConfig+0x320>
 8004fd0:	e6fb      	b.n	8004dca <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8004fd2:	682b      	ldr	r3, [r5, #0]
 8004fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fd8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004fda:	f7fc fead 	bl	8001d38 <HAL_GetTick>
 8004fde:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fe0:	e004      	b.n	8004fec <HAL_RCC_OscConfig+0x34c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fe2:	f7fc fea9 	bl	8001d38 <HAL_GetTick>
 8004fe6:	1b80      	subs	r0, r0, r6
 8004fe8:	2802      	cmp	r0, #2
 8004fea:	d8b8      	bhi.n	8004f5e <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	05df      	lsls	r7, r3, #23
 8004ff0:	d4f7      	bmi.n	8004fe2 <HAL_RCC_OscConfig+0x342>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	e6b8      	b.n	8004d68 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 8004ff6:	f023 0301 	bic.w	r3, r3, #1
 8004ffa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004ffc:	f7fc fe9c 	bl	8001d38 <HAL_GetTick>
 8005000:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005002:	e004      	b.n	800500e <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005004:	f7fc fe98 	bl	8001d38 <HAL_GetTick>
 8005008:	1b80      	subs	r0, r0, r6
 800500a:	2802      	cmp	r0, #2
 800500c:	d8a7      	bhi.n	8004f5e <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800500e:	682b      	ldr	r3, [r5, #0]
 8005010:	0758      	lsls	r0, r3, #29
 8005012:	d4f7      	bmi.n	8005004 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	e67c      	b.n	8004d12 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005018:	0790      	lsls	r0, r2, #30
 800501a:	f47f af25 	bne.w	8004e68 <HAL_RCC_OscConfig+0x1c8>
 800501e:	e6fd      	b.n	8004e1c <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 8005020:	2001      	movs	r0, #1
}
 8005022:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005024:	f7fc fe88 	bl	8001d38 <HAL_GetTick>
 8005028:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800502a:	e004      	b.n	8005036 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502c:	f7fc fe84 	bl	8001d38 <HAL_GetTick>
 8005030:	1b80      	subs	r0, r0, r6
 8005032:	2802      	cmp	r0, #2
 8005034:	d893      	bhi.n	8004f5e <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005036:	682b      	ldr	r3, [r5, #0]
 8005038:	0199      	lsls	r1, r3, #6
 800503a:	d4f7      	bmi.n	800502c <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800503c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800503e:	4b64      	ldr	r3, [pc, #400]	; (80051d0 <HAL_RCC_OscConfig+0x530>)
 8005040:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005042:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005044:	4963      	ldr	r1, [pc, #396]	; (80051d4 <HAL_RCC_OscConfig+0x534>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005046:	4e61      	ldr	r6, [pc, #388]	; (80051cc <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005048:	4313      	orrs	r3, r2
 800504a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800504c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005050:	62ab      	str	r3, [r5, #40]	; 0x28
 8005052:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8005056:	3b01      	subs	r3, #1
 8005058:	3a01      	subs	r2, #1
 800505a:	025b      	lsls	r3, r3, #9
 800505c:	0412      	lsls	r2, r2, #16
 800505e:	b29b      	uxth	r3, r3
 8005060:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005064:	4313      	orrs	r3, r2
 8005066:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005068:	3a01      	subs	r2, #1
 800506a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800506e:	4313      	orrs	r3, r2
 8005070:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005072:	3a01      	subs	r2, #1
 8005074:	0612      	lsls	r2, r2, #24
 8005076:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800507a:	4313      	orrs	r3, r2
 800507c:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800507e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005086:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005088:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800508a:	4011      	ands	r1, r2
 800508c:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8005090:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005092:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005094:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005096:	f023 030c 	bic.w	r3, r3, #12
 800509a:	4313      	orrs	r3, r2
 800509c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800509e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80050a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80050a2:	f023 0302 	bic.w	r3, r3, #2
 80050a6:	4313      	orrs	r3, r2
 80050a8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80050b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050b8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80050bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80050c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80050ca:	682b      	ldr	r3, [r5, #0]
 80050cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80050d2:	f7fc fe31 	bl	8001d38 <HAL_GetTick>
 80050d6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050d8:	e005      	b.n	80050e6 <HAL_RCC_OscConfig+0x446>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050da:	f7fc fe2d 	bl	8001d38 <HAL_GetTick>
 80050de:	1b00      	subs	r0, r0, r4
 80050e0:	2802      	cmp	r0, #2
 80050e2:	f63f af3c 	bhi.w	8004f5e <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050e6:	6833      	ldr	r3, [r6, #0]
 80050e8:	019a      	lsls	r2, r3, #6
 80050ea:	d5f6      	bpl.n	80050da <HAL_RCC_OscConfig+0x43a>
 80050ec:	e68e      	b.n	8004e0c <HAL_RCC_OscConfig+0x16c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ee:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80050f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050f2:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f4:	f43f ae8b 	beq.w	8004e0e <HAL_RCC_OscConfig+0x16e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f8:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80050fe:	428b      	cmp	r3, r1
 8005100:	f47f aed7 	bne.w	8004eb2 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005104:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005108:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800510a:	429a      	cmp	r2, r3
 800510c:	f47f aed1 	bne.w	8004eb2 <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005110:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005112:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8005116:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005118:	429a      	cmp	r2, r3
 800511a:	f47f aeca 	bne.w	8004eb2 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800511e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005120:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8005124:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005126:	429a      	cmp	r2, r3
 8005128:	f47f aec3 	bne.w	8004eb2 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800512c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800512e:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8005132:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	f47f aebc 	bne.w	8004eb2 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800513a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800513c:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8005140:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005142:	429e      	cmp	r6, r3
 8005144:	f47f aeb5 	bne.w	8004eb2 <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005148:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800514a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800514c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005150:	429a      	cmp	r2, r3
 8005152:	f43f ae5b 	beq.w	8004e0c <HAL_RCC_OscConfig+0x16c>
          __HAL_RCC_PLLFRACN_DISABLE();
 8005156:	4a1d      	ldr	r2, [pc, #116]	; (80051cc <HAL_RCC_OscConfig+0x52c>)
 8005158:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8005160:	f7fc fdea 	bl	8001d38 <HAL_GetTick>
 8005164:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005166:	f7fc fde7 	bl	8001d38 <HAL_GetTick>
 800516a:	42a8      	cmp	r0, r5
 800516c:	d0fb      	beq.n	8005166 <HAL_RCC_OscConfig+0x4c6>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800516e:	4a17      	ldr	r2, [pc, #92]	; (80051cc <HAL_RCC_OscConfig+0x52c>)
  return HAL_OK;
 8005170:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005172:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005174:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <HAL_RCC_OscConfig+0x534>)
 8005176:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005178:	4023      	ands	r3, r4
 800517a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800517e:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8005180:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8005188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800518a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	e5aa      	b.n	8004cf0 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800519a:	4d0c      	ldr	r5, [pc, #48]	; (80051cc <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519c:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	672b      	str	r3, [r5, #112]	; 0x70
 80051a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80051aa:	f023 0304 	bic.w	r3, r3, #4
 80051ae:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80051b0:	f7fc fdc2 	bl	8001d38 <HAL_GetTick>
 80051b4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051b6:	e005      	b.n	80051c4 <HAL_RCC_OscConfig+0x524>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b8:	f7fc fdbe 	bl	8001d38 <HAL_GetTick>
 80051bc:	1b80      	subs	r0, r0, r6
 80051be:	42b8      	cmp	r0, r7
 80051c0:	f63f aecd 	bhi.w	8004f5e <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80051c6:	0798      	lsls	r0, r3, #30
 80051c8:	d4f6      	bmi.n	80051b8 <HAL_RCC_OscConfig+0x518>
 80051ca:	e602      	b.n	8004dd2 <HAL_RCC_OscConfig+0x132>
 80051cc:	58024400 	.word	0x58024400
 80051d0:	fffffc0c 	.word	0xfffffc0c
 80051d4:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051d8:	4a06      	ldr	r2, [pc, #24]	; (80051f4 <HAL_RCC_OscConfig+0x554>)
 80051da:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051e2:	e6ac      	b.n	8004f3e <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e4:	f042 0204 	orr.w	r2, r2, #4
 80051e8:	671a      	str	r2, [r3, #112]	; 0x70
 80051ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051ec:	f042 0201 	orr.w	r2, r2, #1
 80051f0:	671a      	str	r2, [r3, #112]	; 0x70
 80051f2:	e6a4      	b.n	8004f3e <HAL_RCC_OscConfig+0x29e>
 80051f4:	58024400 	.word	0x58024400

080051f8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051f8:	4a48      	ldr	r2, [pc, #288]	; (800531c <HAL_RCC_GetSysClockFreq+0x124>)
 80051fa:	6913      	ldr	r3, [r2, #16]
 80051fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005200:	2b10      	cmp	r3, #16
 8005202:	d004      	beq.n	800520e <HAL_RCC_GetSysClockFreq+0x16>
 8005204:	2b18      	cmp	r3, #24
 8005206:	d00d      	beq.n	8005224 <HAL_RCC_GetSysClockFreq+0x2c>
 8005208:	b11b      	cbz	r3, 8005212 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800520a:	4845      	ldr	r0, [pc, #276]	; (8005320 <HAL_RCC_GetSysClockFreq+0x128>)
 800520c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800520e:	4845      	ldr	r0, [pc, #276]	; (8005324 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005210:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005212:	6813      	ldr	r3, [r2, #0]
 8005214:	0699      	lsls	r1, r3, #26
 8005216:	d54a      	bpl.n	80052ae <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005218:	6813      	ldr	r3, [r2, #0]
 800521a:	4843      	ldr	r0, [pc, #268]	; (8005328 <HAL_RCC_GetSysClockFreq+0x130>)
 800521c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005220:	40d8      	lsrs	r0, r3
 8005222:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005224:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8005226:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005228:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800522a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 800522c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005230:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005232:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8005236:	d038      	beq.n	80052aa <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005238:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800523c:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005240:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005244:	fb05 f101 	mul.w	r1, r5, r1
 8005248:	2b01      	cmp	r3, #1
 800524a:	ee07 1a90 	vmov	s15, r1
 800524e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 8005252:	d002      	beq.n	800525a <HAL_RCC_GetSysClockFreq+0x62>
 8005254:	2b02      	cmp	r3, #2
 8005256:	d02c      	beq.n	80052b2 <HAL_RCC_GetSysClockFreq+0xba>
 8005258:	b393      	cbz	r3, 80052c0 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800525a:	ee07 0a90 	vmov	s15, r0
 800525e:	ed9f 5a33 	vldr	s10, [pc, #204]	; 800532c <HAL_RCC_GetSysClockFreq+0x134>
 8005262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005266:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005268:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800526c:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8005330 <HAL_RCC_GetSysClockFreq+0x138>
 8005270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005274:	ee07 3a90 	vmov	s15, r3
 8005278:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800527c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005280:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005284:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005288:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800528c:	4b23      	ldr	r3, [pc, #140]	; (800531c <HAL_RCC_GetSysClockFreq+0x124>)
 800528e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005290:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005294:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800529e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a6:	ee17 0a90 	vmov	r0, s15
}
 80052aa:	bc30      	pop	{r4, r5}
 80052ac:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052ae:	481e      	ldr	r0, [pc, #120]	; (8005328 <HAL_RCC_GetSysClockFreq+0x130>)
}
 80052b0:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052b2:	ee07 0a90 	vmov	s15, r0
 80052b6:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8005334 <HAL_RCC_GetSysClockFreq+0x13c>
 80052ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052be:	e7d2      	b.n	8005266 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c0:	6813      	ldr	r3, [r2, #0]
 80052c2:	069b      	lsls	r3, r3, #26
 80052c4:	d522      	bpl.n	800530c <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052c6:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052c8:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052cc:	4916      	ldr	r1, [pc, #88]	; (8005328 <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052d4:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052dc:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005330 <HAL_RCC_GetSysClockFreq+0x138>
 80052e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052e4:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052e6:	ee06 3a10 	vmov	s12, r3
 80052ea:	ee05 1a90 	vmov	s11, r1
 80052ee:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80052f2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80052f6:	ee36 6a26 	vadd.f32	s12, s12, s13
 80052fa:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80052fe:	eef0 7a46 	vmov.f32	s15, s12
 8005302:	eee7 7a05 	vfma.f32	s15, s14, s10
 8005306:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800530a:	e7bf      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800530c:	ee07 0a90 	vmov	s15, r0
 8005310:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8005338 <HAL_RCC_GetSysClockFreq+0x140>
 8005314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005318:	e7a5      	b.n	8005266 <HAL_RCC_GetSysClockFreq+0x6e>
 800531a:	bf00      	nop
 800531c:	58024400 	.word	0x58024400
 8005320:	003d0900 	.word	0x003d0900
 8005324:	017d7840 	.word	0x017d7840
 8005328:	03d09000 	.word	0x03d09000
 800532c:	4a742400 	.word	0x4a742400
 8005330:	39000000 	.word	0x39000000
 8005334:	4bbebc20 	.word	0x4bbebc20
 8005338:	4c742400 	.word	0x4c742400

0800533c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800533c:	2800      	cmp	r0, #0
 800533e:	f000 810c 	beq.w	800555a <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005342:	4a8c      	ldr	r2, [pc, #560]	; (8005574 <HAL_RCC_ClockConfig+0x238>)
 8005344:	6813      	ldr	r3, [r2, #0]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	428b      	cmp	r3, r1
{
 800534c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005350:	4604      	mov	r4, r0
 8005352:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005354:	d20c      	bcs.n	8005370 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005356:	6813      	ldr	r3, [r2, #0]
 8005358:	f023 030f 	bic.w	r3, r3, #15
 800535c:	430b      	orrs	r3, r1
 800535e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005360:	6813      	ldr	r3, [r2, #0]
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	428b      	cmp	r3, r1
 8005368:	d002      	beq.n	8005370 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800536a:	2001      	movs	r0, #1
}
 800536c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	075f      	lsls	r7, r3, #29
 8005374:	d50b      	bpl.n	800538e <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005376:	4980      	ldr	r1, [pc, #512]	; (8005578 <HAL_RCC_ClockConfig+0x23c>)
 8005378:	6920      	ldr	r0, [r4, #16]
 800537a:	698a      	ldr	r2, [r1, #24]
 800537c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005380:	4290      	cmp	r0, r2
 8005382:	d904      	bls.n	800538e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005384:	698a      	ldr	r2, [r1, #24]
 8005386:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800538a:	4302      	orrs	r2, r0
 800538c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800538e:	071e      	lsls	r6, r3, #28
 8005390:	d50b      	bpl.n	80053aa <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005392:	4979      	ldr	r1, [pc, #484]	; (8005578 <HAL_RCC_ClockConfig+0x23c>)
 8005394:	6960      	ldr	r0, [r4, #20]
 8005396:	69ca      	ldr	r2, [r1, #28]
 8005398:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800539c:	4290      	cmp	r0, r2
 800539e:	d904      	bls.n	80053aa <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053a0:	69ca      	ldr	r2, [r1, #28]
 80053a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80053a6:	4302      	orrs	r2, r0
 80053a8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053aa:	06d8      	lsls	r0, r3, #27
 80053ac:	d50b      	bpl.n	80053c6 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053ae:	4972      	ldr	r1, [pc, #456]	; (8005578 <HAL_RCC_ClockConfig+0x23c>)
 80053b0:	69a0      	ldr	r0, [r4, #24]
 80053b2:	69ca      	ldr	r2, [r1, #28]
 80053b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80053b8:	4290      	cmp	r0, r2
 80053ba:	d904      	bls.n	80053c6 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053bc:	69ca      	ldr	r2, [r1, #28]
 80053be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053c2:	4302      	orrs	r2, r0
 80053c4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053c6:	0699      	lsls	r1, r3, #26
 80053c8:	d50b      	bpl.n	80053e2 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053ca:	496b      	ldr	r1, [pc, #428]	; (8005578 <HAL_RCC_ClockConfig+0x23c>)
 80053cc:	69e0      	ldr	r0, [r4, #28]
 80053ce:	6a0a      	ldr	r2, [r1, #32]
 80053d0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80053d4:	4290      	cmp	r0, r2
 80053d6:	d904      	bls.n	80053e2 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053d8:	6a0a      	ldr	r2, [r1, #32]
 80053da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80053de:	4302      	orrs	r2, r0
 80053e0:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053e2:	079a      	lsls	r2, r3, #30
 80053e4:	f140 80ab 	bpl.w	800553e <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053e8:	4863      	ldr	r0, [pc, #396]	; (8005578 <HAL_RCC_ClockConfig+0x23c>)
 80053ea:	68e1      	ldr	r1, [r4, #12]
 80053ec:	6982      	ldr	r2, [r0, #24]
 80053ee:	f002 020f 	and.w	r2, r2, #15
 80053f2:	4291      	cmp	r1, r2
 80053f4:	d904      	bls.n	8005400 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f6:	6982      	ldr	r2, [r0, #24]
 80053f8:	f022 020f 	bic.w	r2, r2, #15
 80053fc:	430a      	orrs	r2, r1
 80053fe:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005400:	07d8      	lsls	r0, r3, #31
 8005402:	d530      	bpl.n	8005466 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005404:	4a5c      	ldr	r2, [pc, #368]	; (8005578 <HAL_RCC_ClockConfig+0x23c>)
 8005406:	68a1      	ldr	r1, [r4, #8]
 8005408:	6993      	ldr	r3, [r2, #24]
 800540a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800540e:	430b      	orrs	r3, r1
 8005410:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005412:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005414:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005416:	2902      	cmp	r1, #2
 8005418:	f000 80a1 	beq.w	800555e <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800541c:	2903      	cmp	r1, #3
 800541e:	f000 8098 	beq.w	8005552 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005422:	2901      	cmp	r1, #1
 8005424:	f000 80a1 	beq.w	800556a <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005428:	0758      	lsls	r0, r3, #29
 800542a:	d59e      	bpl.n	800536a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800542c:	4e52      	ldr	r6, [pc, #328]	; (8005578 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800542e:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005432:	6933      	ldr	r3, [r6, #16]
 8005434:	f023 0307 	bic.w	r3, r3, #7
 8005438:	430b      	orrs	r3, r1
 800543a:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800543c:	f7fc fc7c 	bl	8001d38 <HAL_GetTick>
 8005440:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005442:	e005      	b.n	8005450 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005444:	f7fc fc78 	bl	8001d38 <HAL_GetTick>
 8005448:	1bc0      	subs	r0, r0, r7
 800544a:	4540      	cmp	r0, r8
 800544c:	f200 808b 	bhi.w	8005566 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005450:	6933      	ldr	r3, [r6, #16]
 8005452:	6862      	ldr	r2, [r4, #4]
 8005454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005458:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800545c:	d1f2      	bne.n	8005444 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	0799      	lsls	r1, r3, #30
 8005462:	d506      	bpl.n	8005472 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005464:	68e1      	ldr	r1, [r4, #12]
 8005466:	4844      	ldr	r0, [pc, #272]	; (8005578 <HAL_RCC_ClockConfig+0x23c>)
 8005468:	6982      	ldr	r2, [r0, #24]
 800546a:	f002 020f 	and.w	r2, r2, #15
 800546e:	428a      	cmp	r2, r1
 8005470:	d869      	bhi.n	8005546 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005472:	4940      	ldr	r1, [pc, #256]	; (8005574 <HAL_RCC_ClockConfig+0x238>)
 8005474:	680a      	ldr	r2, [r1, #0]
 8005476:	f002 020f 	and.w	r2, r2, #15
 800547a:	42aa      	cmp	r2, r5
 800547c:	d90a      	bls.n	8005494 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547e:	680a      	ldr	r2, [r1, #0]
 8005480:	f022 020f 	bic.w	r2, r2, #15
 8005484:	432a      	orrs	r2, r5
 8005486:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005488:	680a      	ldr	r2, [r1, #0]
 800548a:	f002 020f 	and.w	r2, r2, #15
 800548e:	42aa      	cmp	r2, r5
 8005490:	f47f af6b 	bne.w	800536a <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005494:	075a      	lsls	r2, r3, #29
 8005496:	d50b      	bpl.n	80054b0 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005498:	4937      	ldr	r1, [pc, #220]	; (8005578 <HAL_RCC_ClockConfig+0x23c>)
 800549a:	6920      	ldr	r0, [r4, #16]
 800549c:	698a      	ldr	r2, [r1, #24]
 800549e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80054a2:	4290      	cmp	r0, r2
 80054a4:	d204      	bcs.n	80054b0 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054a6:	698a      	ldr	r2, [r1, #24]
 80054a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80054ac:	4302      	orrs	r2, r0
 80054ae:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b0:	071f      	lsls	r7, r3, #28
 80054b2:	d50b      	bpl.n	80054cc <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054b4:	4930      	ldr	r1, [pc, #192]	; (8005578 <HAL_RCC_ClockConfig+0x23c>)
 80054b6:	6960      	ldr	r0, [r4, #20]
 80054b8:	69ca      	ldr	r2, [r1, #28]
 80054ba:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80054be:	4290      	cmp	r0, r2
 80054c0:	d204      	bcs.n	80054cc <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054c2:	69ca      	ldr	r2, [r1, #28]
 80054c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80054c8:	4302      	orrs	r2, r0
 80054ca:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054cc:	06de      	lsls	r6, r3, #27
 80054ce:	d50b      	bpl.n	80054e8 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054d0:	4929      	ldr	r1, [pc, #164]	; (8005578 <HAL_RCC_ClockConfig+0x23c>)
 80054d2:	69a0      	ldr	r0, [r4, #24]
 80054d4:	69ca      	ldr	r2, [r1, #28]
 80054d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80054da:	4290      	cmp	r0, r2
 80054dc:	d204      	bcs.n	80054e8 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054de:	69ca      	ldr	r2, [r1, #28]
 80054e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054e4:	4302      	orrs	r2, r0
 80054e6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054e8:	069d      	lsls	r5, r3, #26
 80054ea:	d50b      	bpl.n	8005504 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <HAL_RCC_ClockConfig+0x23c>)
 80054ee:	69e1      	ldr	r1, [r4, #28]
 80054f0:	6a13      	ldr	r3, [r2, #32]
 80054f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054f6:	4299      	cmp	r1, r3
 80054f8:	d204      	bcs.n	8005504 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054fa:	6a13      	ldr	r3, [r2, #32]
 80054fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005500:	430b      	orrs	r3, r1
 8005502:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005504:	f7ff fe78 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8005508:	4a1b      	ldr	r2, [pc, #108]	; (8005578 <HAL_RCC_ClockConfig+0x23c>)
 800550a:	4603      	mov	r3, r0
 800550c:	481b      	ldr	r0, [pc, #108]	; (800557c <HAL_RCC_ClockConfig+0x240>)
 800550e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005510:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005512:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8005516:	4d1a      	ldr	r5, [pc, #104]	; (8005580 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005518:	f002 020f 	and.w	r2, r2, #15
 800551c:	4c19      	ldr	r4, [pc, #100]	; (8005584 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800551e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005520:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005522:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8005526:	4818      	ldr	r0, [pc, #96]	; (8005588 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005528:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800552c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800552e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8005530:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005532:	40d3      	lsrs	r3, r2
 8005534:	6023      	str	r3, [r4, #0]
}
 8005536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800553a:	f7fc bb9b 	b.w	8001c74 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800553e:	07da      	lsls	r2, r3, #31
 8005540:	f53f af60 	bmi.w	8005404 <HAL_RCC_ClockConfig+0xc8>
 8005544:	e795      	b.n	8005472 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005546:	6982      	ldr	r2, [r0, #24]
 8005548:	f022 020f 	bic.w	r2, r2, #15
 800554c:	430a      	orrs	r2, r1
 800554e:	6182      	str	r2, [r0, #24]
 8005550:	e78f      	b.n	8005472 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005552:	019f      	lsls	r7, r3, #6
 8005554:	f53f af6a 	bmi.w	800542c <HAL_RCC_ClockConfig+0xf0>
 8005558:	e707      	b.n	800536a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800555a:	2001      	movs	r0, #1
}
 800555c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800555e:	039b      	lsls	r3, r3, #14
 8005560:	f53f af64 	bmi.w	800542c <HAL_RCC_ClockConfig+0xf0>
 8005564:	e701      	b.n	800536a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8005566:	2003      	movs	r0, #3
 8005568:	e700      	b.n	800536c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800556a:	05de      	lsls	r6, r3, #23
 800556c:	f53f af5e 	bmi.w	800542c <HAL_RCC_ClockConfig+0xf0>
 8005570:	e6fb      	b.n	800536a <HAL_RCC_ClockConfig+0x2e>
 8005572:	bf00      	nop
 8005574:	52002000 	.word	0x52002000
 8005578:	58024400 	.word	0x58024400
 800557c:	0800bf40 	.word	0x0800bf40
 8005580:	240003a4 	.word	0x240003a4
 8005584:	240003a8 	.word	0x240003a8
 8005588:	240003b0 	.word	0x240003b0

0800558c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800558c:	4a18      	ldr	r2, [pc, #96]	; (80055f0 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800558e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005590:	6913      	ldr	r3, [r2, #16]
 8005592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005596:	2b10      	cmp	r3, #16
 8005598:	d01a      	beq.n	80055d0 <HAL_RCC_GetHCLKFreq+0x44>
 800559a:	2b18      	cmp	r3, #24
 800559c:	d023      	beq.n	80055e6 <HAL_RCC_GetHCLKFreq+0x5a>
 800559e:	b1cb      	cbz	r3, 80055d4 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 80055a0:	4814      	ldr	r0, [pc, #80]	; (80055f4 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80055a2:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <HAL_RCC_GetHCLKFreq+0x64>)
 80055a4:	4914      	ldr	r1, [pc, #80]	; (80055f8 <HAL_RCC_GetHCLKFreq+0x6c>)
 80055a6:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055a8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80055aa:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055ae:	4c13      	ldr	r4, [pc, #76]	; (80055fc <HAL_RCC_GetHCLKFreq+0x70>)
 80055b0:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055b4:	4d12      	ldr	r5, [pc, #72]	; (8005600 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80055b6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055b8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80055ba:	f002 021f 	and.w	r2, r2, #31
 80055be:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055c2:	f003 001f 	and.w	r0, r3, #31
 80055c6:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 80055ca:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055cc:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055d0:	480c      	ldr	r0, [pc, #48]	; (8005604 <HAL_RCC_GetHCLKFreq+0x78>)
 80055d2:	e7e6      	b.n	80055a2 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055d4:	6813      	ldr	r3, [r2, #0]
 80055d6:	069b      	lsls	r3, r3, #26
 80055d8:	d508      	bpl.n	80055ec <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055da:	6813      	ldr	r3, [r2, #0]
 80055dc:	480a      	ldr	r0, [pc, #40]	; (8005608 <HAL_RCC_GetHCLKFreq+0x7c>)
 80055de:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80055e2:	40d8      	lsrs	r0, r3
 80055e4:	e7dd      	b.n	80055a2 <HAL_RCC_GetHCLKFreq+0x16>
 80055e6:	f7ff fad5 	bl	8004b94 <HAL_RCC_GetSysClockFreq.part.0>
 80055ea:	e7da      	b.n	80055a2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80055ec:	4806      	ldr	r0, [pc, #24]	; (8005608 <HAL_RCC_GetHCLKFreq+0x7c>)
 80055ee:	e7d8      	b.n	80055a2 <HAL_RCC_GetHCLKFreq+0x16>
 80055f0:	58024400 	.word	0x58024400
 80055f4:	003d0900 	.word	0x003d0900
 80055f8:	0800bf40 	.word	0x0800bf40
 80055fc:	240003a8 	.word	0x240003a8
 8005600:	240003a4 	.word	0x240003a4
 8005604:	017d7840 	.word	0x017d7840
 8005608:	03d09000 	.word	0x03d09000

0800560c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800560c:	4a1c      	ldr	r2, [pc, #112]	; (8005680 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800560e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005610:	6913      	ldr	r3, [r2, #16]
 8005612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005616:	2b10      	cmp	r3, #16
 8005618:	d021      	beq.n	800565e <HAL_RCC_GetPCLK1Freq+0x52>
 800561a:	2b18      	cmp	r3, #24
 800561c:	d02a      	beq.n	8005674 <HAL_RCC_GetPCLK1Freq+0x68>
 800561e:	b303      	cbz	r3, 8005662 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8005620:	4818      	ldr	r0, [pc, #96]	; (8005684 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005622:	4a17      	ldr	r2, [pc, #92]	; (8005680 <HAL_RCC_GetPCLK1Freq+0x74>)
 8005624:	4918      	ldr	r1, [pc, #96]	; (8005688 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8005626:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005628:	4c18      	ldr	r4, [pc, #96]	; (800568c <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800562a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 800562e:	4d18      	ldr	r5, [pc, #96]	; (8005690 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005630:	5ccb      	ldrb	r3, [r1, r3]
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005638:	6993      	ldr	r3, [r2, #24]
 800563a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 800563e:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005640:	5ccb      	ldrb	r3, [r1, r3]
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	fa20 f303 	lsr.w	r3, r0, r3
 800564a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800564c:	69d2      	ldr	r2, [r2, #28]
 800564e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005652:	5c88      	ldrb	r0, [r1, r2]
 8005654:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005658:	fa23 f000 	lsr.w	r0, r3, r0
 800565c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800565e:	480d      	ldr	r0, [pc, #52]	; (8005694 <HAL_RCC_GetPCLK1Freq+0x88>)
 8005660:	e7df      	b.n	8005622 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	069b      	lsls	r3, r3, #26
 8005666:	d508      	bpl.n	800567a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005668:	6813      	ldr	r3, [r2, #0]
 800566a:	480b      	ldr	r0, [pc, #44]	; (8005698 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800566c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005670:	40d8      	lsrs	r0, r3
 8005672:	e7d6      	b.n	8005622 <HAL_RCC_GetPCLK1Freq+0x16>
 8005674:	f7ff fa8e 	bl	8004b94 <HAL_RCC_GetSysClockFreq.part.0>
 8005678:	e7d3      	b.n	8005622 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800567a:	4807      	ldr	r0, [pc, #28]	; (8005698 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800567c:	e7d1      	b.n	8005622 <HAL_RCC_GetPCLK1Freq+0x16>
 800567e:	bf00      	nop
 8005680:	58024400 	.word	0x58024400
 8005684:	003d0900 	.word	0x003d0900
 8005688:	0800bf40 	.word	0x0800bf40
 800568c:	240003a8 	.word	0x240003a8
 8005690:	240003a4 	.word	0x240003a4
 8005694:	017d7840 	.word	0x017d7840
 8005698:	03d09000 	.word	0x03d09000

0800569c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800569e:	4c3a      	ldr	r4, [pc, #232]	; (8005788 <RCCEx_PLL2_Config+0xec>)
 80056a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d067      	beq.n	800577a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	4606      	mov	r6, r0
 80056ae:	460f      	mov	r7, r1
 80056b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056b4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b6:	f7fc fb3f 	bl	8001d38 <HAL_GetTick>
 80056ba:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056bc:	e004      	b.n	80056c8 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056be:	f7fc fb3b 	bl	8001d38 <HAL_GetTick>
 80056c2:	1b43      	subs	r3, r0, r5
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d856      	bhi.n	8005776 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	011a      	lsls	r2, r3, #4
 80056cc:	d4f7      	bmi.n	80056be <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80056ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80056d0:	6832      	ldr	r2, [r6, #0]
 80056d2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80056d6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80056da:	62a3      	str	r3, [r4, #40]	; 0x28
 80056dc:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	3a01      	subs	r2, #1
 80056e4:	025b      	lsls	r3, r3, #9
 80056e6:	0412      	lsls	r2, r2, #16
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80056ee:	4313      	orrs	r3, r2
 80056f0:	6872      	ldr	r2, [r6, #4]
 80056f2:	3a01      	subs	r2, #1
 80056f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f8:	4313      	orrs	r3, r2
 80056fa:	6932      	ldr	r2, [r6, #16]
 80056fc:	3a01      	subs	r2, #1
 80056fe:	0612      	lsls	r2, r2, #24
 8005700:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005704:	4313      	orrs	r3, r2
 8005706:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005708:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800570a:	6972      	ldr	r2, [r6, #20]
 800570c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005710:	4313      	orrs	r3, r2
 8005712:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005714:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005716:	69b3      	ldr	r3, [r6, #24]
 8005718:	f022 0220 	bic.w	r2, r2, #32
 800571c:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800571e:	4b1b      	ldr	r3, [pc, #108]	; (800578c <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005720:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005722:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005724:	f022 0210 	bic.w	r2, r2, #16
 8005728:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800572a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800572c:	69f2      	ldr	r2, [r6, #28]
 800572e:	400b      	ands	r3, r1
 8005730:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005734:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005736:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005738:	f043 0310 	orr.w	r3, r3, #16
 800573c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800573e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8005740:	b1ef      	cbz	r7, 800577e <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005742:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005744:	bf0c      	ite	eq
 8005746:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800574a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800574e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005750:	4c0d      	ldr	r4, [pc, #52]	; (8005788 <RCCEx_PLL2_Config+0xec>)
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005758:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575a:	f7fc faed 	bl	8001d38 <HAL_GetTick>
 800575e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005760:	e004      	b.n	800576c <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005762:	f7fc fae9 	bl	8001d38 <HAL_GetTick>
 8005766:	1b40      	subs	r0, r0, r5
 8005768:	2802      	cmp	r0, #2
 800576a:	d804      	bhi.n	8005776 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	d5f7      	bpl.n	8005762 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8005772:	2000      	movs	r0, #0
}
 8005774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005776:	2003      	movs	r0, #3
}
 8005778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800577a:	2001      	movs	r0, #1
}
 800577c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800577e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005782:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005784:	e7e4      	b.n	8005750 <RCCEx_PLL2_Config+0xb4>
 8005786:	bf00      	nop
 8005788:	58024400 	.word	0x58024400
 800578c:	ffff0007 	.word	0xffff0007

08005790 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005792:	4c3a      	ldr	r4, [pc, #232]	; (800587c <RCCEx_PLL3_Config+0xec>)
 8005794:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b03      	cmp	r3, #3
 800579c:	d067      	beq.n	800586e <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	4606      	mov	r6, r0
 80057a2:	460f      	mov	r7, r1
 80057a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057aa:	f7fc fac5 	bl	8001d38 <HAL_GetTick>
 80057ae:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057b0:	e004      	b.n	80057bc <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057b2:	f7fc fac1 	bl	8001d38 <HAL_GetTick>
 80057b6:	1b43      	subs	r3, r0, r5
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d856      	bhi.n	800586a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	009a      	lsls	r2, r3, #2
 80057c0:	d4f7      	bmi.n	80057b2 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80057c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80057c4:	6832      	ldr	r2, [r6, #0]
 80057c6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80057ca:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80057ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80057d0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	3a01      	subs	r2, #1
 80057d8:	025b      	lsls	r3, r3, #9
 80057da:	0412      	lsls	r2, r2, #16
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80057e2:	4313      	orrs	r3, r2
 80057e4:	6872      	ldr	r2, [r6, #4]
 80057e6:	3a01      	subs	r2, #1
 80057e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057ec:	4313      	orrs	r3, r2
 80057ee:	6932      	ldr	r2, [r6, #16]
 80057f0:	3a01      	subs	r2, #1
 80057f2:	0612      	lsls	r2, r2, #24
 80057f4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80057f8:	4313      	orrs	r3, r2
 80057fa:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80057fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80057fe:	6972      	ldr	r2, [r6, #20]
 8005800:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005804:	4313      	orrs	r3, r2
 8005806:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005808:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800580a:	69b3      	ldr	r3, [r6, #24]
 800580c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005810:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005812:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005814:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005816:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800581c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800581e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005820:	69f2      	ldr	r2, [r6, #28]
 8005822:	400b      	ands	r3, r1
 8005824:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005828:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800582a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800582c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005830:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005832:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8005834:	b1ef      	cbz	r7, 8005872 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005836:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005838:	bf0c      	ite	eq
 800583a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800583e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8005842:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005844:	4c0d      	ldr	r4, [pc, #52]	; (800587c <RCCEx_PLL3_Config+0xec>)
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800584e:	f7fc fa73 	bl	8001d38 <HAL_GetTick>
 8005852:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005854:	e004      	b.n	8005860 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005856:	f7fc fa6f 	bl	8001d38 <HAL_GetTick>
 800585a:	1b40      	subs	r0, r0, r5
 800585c:	2802      	cmp	r0, #2
 800585e:	d804      	bhi.n	800586a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	d5f7      	bpl.n	8005856 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8005866:	2000      	movs	r0, #0
}
 8005868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800586a:	2003      	movs	r0, #3
}
 800586c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800586e:	2001      	movs	r0, #1
}
 8005870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005872:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005876:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005878:	e7e4      	b.n	8005844 <RCCEx_PLL3_Config+0xb4>
 800587a:	bf00      	nop
 800587c:	58024400 	.word	0x58024400
 8005880:	ffff0007 	.word	0xffff0007

08005884 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005888:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800588c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800588e:	0118      	lsls	r0, r3, #4
 8005890:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8005894:	d51e      	bpl.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005896:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005898:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800589c:	f000 84f6 	beq.w	800628c <HAL_RCCEx_PeriphCLKConfig+0xa08>
 80058a0:	d825      	bhi.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80058a2:	2900      	cmp	r1, #0
 80058a4:	f000 8422 	beq.w	80060ec <HAL_RCCEx_PeriphCLKConfig+0x868>
 80058a8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80058ac:	d122      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058ae:	2102      	movs	r1, #2
 80058b0:	f104 0008 	add.w	r0, r4, #8
 80058b4:	f7ff fef2 	bl	800569c <RCCEx_PLL2_Config>
 80058b8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80058ba:	2e00      	cmp	r6, #0
 80058bc:	f040 8527 	bne.w	800630e <HAL_RCCEx_PeriphCLKConfig+0xa8a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80058c0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058c2:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80058c6:	4d9e      	ldr	r5, [pc, #632]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058c8:	2600      	movs	r6, #0
 80058ca:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80058cc:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 80058d0:	4301      	orrs	r1, r0
 80058d2:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058d4:	05d9      	lsls	r1, r3, #23
 80058d6:	d511      	bpl.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 80058d8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80058da:	2904      	cmp	r1, #4
 80058dc:	f200 857a 	bhi.w	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
 80058e0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80058e4:	04e504de 	.word	0x04e504de
 80058e8:	02f604ee 	.word	0x02f604ee
 80058ec:	02f6      	.short	0x02f6
    switch (PeriphClkInit->SpdifrxClockSelection)
 80058ee:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80058f2:	d0e8      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058f4:	05d9      	lsls	r1, r3, #23
    switch (PeriphClkInit->SpdifrxClockSelection)
 80058f6:	f04f 0601 	mov.w	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058fa:	d4ed      	bmi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch (PeriphClkInit->Sai1ClockSelection)
 80058fc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80058fe:	055f      	lsls	r7, r3, #21
 8005900:	d521      	bpl.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    switch (PeriphClkInit->Sai4AClockSelection)
 8005902:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8005906:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800590a:	f000 84f6 	beq.w	80062fa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800590e:	f200 80d6 	bhi.w	8005abe <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8005912:	2900      	cmp	r1, #0
 8005914:	f000 83fd 	beq.w	8006112 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8005918:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800591c:	f040 80d9 	bne.w	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005920:	2100      	movs	r1, #0
 8005922:	f104 0008 	add.w	r0, r4, #8
 8005926:	f7ff feb9 	bl	800569c <RCCEx_PLL2_Config>
 800592a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800592c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005930:	2d00      	cmp	r5, #0
 8005932:	f040 83c3 	bne.w	80060bc <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005936:	4f82      	ldr	r7, [pc, #520]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005938:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800593c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800593e:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 8005942:	4301      	orrs	r1, r0
 8005944:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005946:	0518      	lsls	r0, r3, #20
 8005948:	d521      	bpl.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch (PeriphClkInit->Sai4BClockSelection)
 800594a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800594e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8005952:	f000 84be 	beq.w	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 8005956:	f200 80bf 	bhi.w	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800595a:	2900      	cmp	r1, #0
 800595c:	f000 83cd 	beq.w	80060fa <HAL_RCCEx_PeriphCLKConfig+0x876>
 8005960:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8005964:	f040 80c2 	bne.w	8005aec <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005968:	2100      	movs	r1, #0
 800596a:	f104 0008 	add.w	r0, r4, #8
 800596e:	f7ff fe95 	bl	800569c <RCCEx_PLL2_Config>
 8005972:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005974:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005978:	2d00      	cmp	r5, #0
 800597a:	f040 83a3 	bne.w	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800597e:	4f70      	ldr	r7, [pc, #448]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005980:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8005984:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005986:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800598a:	4301      	orrs	r1, r0
 800598c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800598e:	0199      	lsls	r1, r3, #6
 8005990:	d518      	bpl.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
    switch (PeriphClkInit->OspiClockSelection)
 8005992:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005994:	2920      	cmp	r1, #32
 8005996:	f000 8447 	beq.w	8006228 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 800599a:	f200 80aa 	bhi.w	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800599e:	b139      	cbz	r1, 80059b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80059a0:	2910      	cmp	r1, #16
 80059a2:	f040 80a9 	bne.w	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x274>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a6:	4866      	ldr	r0, [pc, #408]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80059a8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80059aa:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80059ae:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	f040 83b6 	bne.w	8006122 <HAL_RCCEx_PeriphCLKConfig+0x89e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80059b6:	4f62      	ldr	r7, [pc, #392]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80059b8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80059ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80059bc:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80059c0:	4301      	orrs	r1, r0
 80059c2:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80059c4:	04df      	lsls	r7, r3, #19
 80059c6:	d51f      	bpl.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch (PeriphClkInit->Spi123ClockSelection)
 80059c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80059ca:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80059ce:	f000 848a 	beq.w	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80059d2:	f200 8094 	bhi.w	8005afe <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80059d6:	2900      	cmp	r1, #0
 80059d8:	f000 8395 	beq.w	8006106 <HAL_RCCEx_PeriphCLKConfig+0x882>
 80059dc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80059e0:	f040 8095 	bne.w	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x28a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059e4:	2100      	movs	r1, #0
 80059e6:	f104 0008 	add.w	r0, r4, #8
 80059ea:	f7ff fe57 	bl	800569c <RCCEx_PLL2_Config>
 80059ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059f0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	f040 8363 	bne.w	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059fa:	4f51      	ldr	r7, [pc, #324]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80059fc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80059fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a00:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8005a04:	4301      	orrs	r1, r0
 8005a06:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a08:	0498      	lsls	r0, r3, #18
 8005a0a:	d51c      	bpl.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a0c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005a0e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8005a12:	f000 83f3 	beq.w	80061fc <HAL_RCCEx_PeriphCLKConfig+0x978>
 8005a16:	d87d      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8005a18:	b159      	cbz	r1, 8005a32 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005a1a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005a1e:	f040 8081 	bne.w	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a22:	2101      	movs	r1, #1
 8005a24:	f104 0008 	add.w	r0, r4, #8
 8005a28:	f7ff fe38 	bl	800569c <RCCEx_PLL2_Config>
 8005a2c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a2e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005a32:	2d00      	cmp	r5, #0
 8005a34:	f040 8385 	bne.w	8006142 <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a38:	4f41      	ldr	r7, [pc, #260]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005a3a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005a3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a3e:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8005a42:	4301      	orrs	r1, r0
 8005a44:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a46:	0459      	lsls	r1, r3, #17
 8005a48:	d51d      	bpl.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a4a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8005a4e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005a52:	f000 83de 	beq.w	8006212 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 8005a56:	d868      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005a58:	b151      	cbz	r1, 8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8005a5a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8005a5e:	d16c      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a60:	2101      	movs	r1, #1
 8005a62:	f104 0008 	add.w	r0, r4, #8
 8005a66:	f7ff fe19 	bl	800569c <RCCEx_PLL2_Config>
 8005a6a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a6c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005a70:	2d00      	cmp	r5, #0
 8005a72:	f040 8364 	bne.w	800613e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a76:	4f32      	ldr	r7, [pc, #200]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005a78:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8005a7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a7e:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8005a82:	4301      	orrs	r1, r0
 8005a84:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a86:	041f      	lsls	r7, r3, #16
 8005a88:	d50d      	bpl.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch (PeriphClkInit->FdcanClockSelection)
 8005a8a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005a8c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8005a90:	f000 8386 	beq.w	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 8005a94:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005a98:	f000 823c 	beq.w	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	f000 8241 	beq.w	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8005aa2:	2601      	movs	r6, #1
 8005aa4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005aa6:	01d8      	lsls	r0, r3, #7
 8005aa8:	d55b      	bpl.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FmcClockSelection)
 8005aaa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005aac:	2903      	cmp	r1, #3
 8005aae:	f200 8494 	bhi.w	80063da <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8005ab2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005ab6:	004c      	.short	0x004c
 8005ab8:	037d0047 	.word	0x037d0047
 8005abc:	004c      	.short	0x004c
    switch (PeriphClkInit->Sai4AClockSelection)
 8005abe:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 8005ac2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005ac6:	f43f af33 	beq.w	8005930 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005aca:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8005ace:	f43f af2f 	beq.w	8005930 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005ad2:	2601      	movs	r6, #1
 8005ad4:	4635      	mov	r5, r6
 8005ad6:	e736      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005ad8:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8005adc:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8005ae0:	f43f af4a 	beq.w	8005978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ae4:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8005ae8:	f43f af46 	beq.w	8005978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005aec:	2601      	movs	r6, #1
 8005aee:	4635      	mov	r5, r6
 8005af0:	e74d      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch (PeriphClkInit->OspiClockSelection)
 8005af2:	2930      	cmp	r1, #48	; 0x30
 8005af4:	f43f af5c 	beq.w	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8005af8:	2601      	movs	r6, #1
 8005afa:	4635      	mov	r5, r6
 8005afc:	e762      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005afe:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8005b02:	f43f af77 	beq.w	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8005b06:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005b0a:	f43f af73 	beq.w	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8005b0e:	2601      	movs	r6, #1
 8005b10:	4635      	mov	r5, r6
 8005b12:	e779      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b14:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8005b18:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8005b1c:	d089      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005b1e:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8005b22:	d086      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005b24:	2601      	movs	r6, #1
 8005b26:	4635      	mov	r5, r6
 8005b28:	e78d      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005b2a:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8005b2e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005b32:	d09d      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8005b34:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8005b38:	d09a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8005b3a:	2601      	movs	r6, #1
 8005b3c:	4635      	mov	r5, r6
 8005b3e:	e7a2      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005b40:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b44:	4839      	ldr	r0, [pc, #228]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005b46:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005b48:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005b4c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	f040 82f9 	bne.w	8006146 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b54:	4f35      	ldr	r7, [pc, #212]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005b56:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005b58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005b5a:	f021 0103 	bic.w	r1, r1, #3
 8005b5e:	4301      	orrs	r1, r0
 8005b60:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b62:	0259      	lsls	r1, r3, #9
 8005b64:	f100 8210 	bmi.w	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x704>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b68:	07d9      	lsls	r1, r3, #31
 8005b6a:	d52f      	bpl.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x348>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005b6c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005b6e:	2928      	cmp	r1, #40	; 0x28
 8005b70:	d82a      	bhi.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005b72:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005b76:	01fe      	.short	0x01fe
 8005b78:	00290029 	.word	0x00290029
 8005b7c:	00290029 	.word	0x00290029
 8005b80:	00290029 	.word	0x00290029
 8005b84:	01f60029 	.word	0x01f60029
 8005b88:	00290029 	.word	0x00290029
 8005b8c:	00290029 	.word	0x00290029
 8005b90:	00290029 	.word	0x00290029
 8005b94:	03e80029 	.word	0x03e80029
 8005b98:	00290029 	.word	0x00290029
 8005b9c:	00290029 	.word	0x00290029
 8005ba0:	00290029 	.word	0x00290029
 8005ba4:	01fe0029 	.word	0x01fe0029
 8005ba8:	00290029 	.word	0x00290029
 8005bac:	00290029 	.word	0x00290029
 8005bb0:	00290029 	.word	0x00290029
 8005bb4:	01fe0029 	.word	0x01fe0029
 8005bb8:	00290029 	.word	0x00290029
 8005bbc:	00290029 	.word	0x00290029
 8005bc0:	00290029 	.word	0x00290029
 8005bc4:	01fe0029 	.word	0x01fe0029
 8005bc8:	2601      	movs	r6, #1
 8005bca:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bcc:	079f      	lsls	r7, r3, #30
 8005bce:	d51d      	bpl.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x388>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005bd0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005bd2:	2905      	cmp	r1, #5
 8005bd4:	f200 83fb 	bhi.w	80063ce <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 8005bd8:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005bdc:	0006000e 	.word	0x0006000e
 8005be0:	000e03a9 	.word	0x000e03a9
 8005be4:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005be8:	2101      	movs	r1, #1
 8005bea:	f104 0008 	add.w	r0, r4, #8
 8005bee:	f7ff fd55 	bl	800569c <RCCEx_PLL2_Config>
 8005bf2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bf4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005bf8:	2d00      	cmp	r5, #0
 8005bfa:	f040 829c 	bne.w	8006136 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005bfe:	4f0b      	ldr	r7, [pc, #44]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005c00:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005c02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c04:	f021 0107 	bic.w	r1, r1, #7
 8005c08:	4301      	orrs	r1, r0
 8005c0a:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c0c:	0758      	lsls	r0, r3, #29
 8005c0e:	d522      	bpl.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005c10:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005c14:	2905      	cmp	r1, #5
 8005c16:	f200 83d7 	bhi.w	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8005c1a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005c1e:	0011      	.short	0x0011
 8005c20:	037c0009 	.word	0x037c0009
 8005c24:	00110011 	.word	0x00110011
 8005c28:	0011      	.short	0x0011
 8005c2a:	bf00      	nop
 8005c2c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c30:	2101      	movs	r1, #1
 8005c32:	f104 0008 	add.w	r0, r4, #8
 8005c36:	f7ff fd31 	bl	800569c <RCCEx_PLL2_Config>
 8005c3a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c40:	2d00      	cmp	r5, #0
 8005c42:	f040 8276 	bne.w	8006132 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c46:	4fa8      	ldr	r7, [pc, #672]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005c48:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8005c4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c4e:	f021 0107 	bic.w	r1, r1, #7
 8005c52:	4301      	orrs	r1, r0
 8005c54:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c56:	0699      	lsls	r1, r3, #26
 8005c58:	d51f      	bpl.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c5a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005c5e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005c62:	f000 82ee 	beq.w	8006242 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005c66:	f200 8100 	bhi.w	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8005c6a:	b159      	cbz	r1, 8005c84 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005c6c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8005c70:	f040 8105 	bne.w	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x5fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c74:	2100      	movs	r1, #0
 8005c76:	f104 0008 	add.w	r0, r4, #8
 8005c7a:	f7ff fd0f 	bl	800569c <RCCEx_PLL2_Config>
 8005c7e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c80:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	f040 8250 	bne.w	800612a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c8a:	4f97      	ldr	r7, [pc, #604]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005c8c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8005c90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c92:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8005c96:	4301      	orrs	r1, r0
 8005c98:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c9a:	065f      	lsls	r7, r3, #25
 8005c9c:	d51f      	bpl.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x45a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005c9e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8005ca2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8005ca6:	f000 829e 	beq.w	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8005caa:	f200 80eb 	bhi.w	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8005cae:	b159      	cbz	r1, 8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8005cb0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005cb4:	f040 80f0 	bne.w	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x614>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cb8:	2100      	movs	r1, #0
 8005cba:	f104 0008 	add.w	r0, r4, #8
 8005cbe:	f7ff fced 	bl	800569c <RCCEx_PLL2_Config>
 8005cc2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005cc4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005cc8:	2d00      	cmp	r5, #0
 8005cca:	f040 8236 	bne.w	800613a <HAL_RCCEx_PeriphCLKConfig+0x8b6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cce:	4f86      	ldr	r7, [pc, #536]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005cd0:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8005cd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cd6:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8005cda:	4301      	orrs	r1, r0
 8005cdc:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005cde:	0618      	lsls	r0, r3, #24
 8005ce0:	d51f      	bpl.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ce2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005ce6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005cea:	f000 8271 	beq.w	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8005cee:	f200 80d6 	bhi.w	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8005cf2:	b159      	cbz	r1, 8005d0c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005cf4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005cf8:	f040 80db 	bne.w	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	f104 0008 	add.w	r0, r4, #8
 8005d02:	f7ff fccb 	bl	800569c <RCCEx_PLL2_Config>
 8005d06:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005d08:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005d0c:	2d00      	cmp	r5, #0
 8005d0e:	f040 820a 	bne.w	8006126 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d12:	4f75      	ldr	r7, [pc, #468]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005d14:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8005d18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d1a:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8005d1e:	4301      	orrs	r1, r0
 8005d20:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005d22:	0719      	lsls	r1, r3, #28
 8005d24:	d50b      	bpl.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005d26:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005d2a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8005d2e:	f000 82a1 	beq.w	8006274 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005d32:	4f6d      	ldr	r7, [pc, #436]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005d34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d36:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005d3a:	4301      	orrs	r1, r0
 8005d3c:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d3e:	06df      	lsls	r7, r3, #27
 8005d40:	d50b      	bpl.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005d42:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8005d46:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005d4a:	f000 8286 	beq.w	800625a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d4e:	4f66      	ldr	r7, [pc, #408]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005d50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d52:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8005d56:	4301      	orrs	r1, r0
 8005d58:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d5a:	0318      	lsls	r0, r3, #12
 8005d5c:	d50e      	bpl.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    switch (PeriphClkInit->AdcClockSelection)
 8005d5e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005d62:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005d66:	f000 80c1 	beq.w	8005eec <HAL_RCCEx_PeriphCLKConfig+0x668>
 8005d6a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8005d6e:	f000 80c5 	beq.w	8005efc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005d72:	2900      	cmp	r1, #0
 8005d74:	f000 8200 	beq.w	8006178 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005d78:	2601      	movs	r6, #1
 8005d7a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d7c:	0359      	lsls	r1, r3, #13
 8005d7e:	d50f      	bpl.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    switch (PeriphClkInit->UsbClockSelection)
 8005d80:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005d84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005d88:	f000 80d7 	beq.w	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8005d8c:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8005d90:	f000 80db 	beq.w	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8005d94:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005d98:	f000 81f8 	beq.w	800618c <HAL_RCCEx_PeriphCLKConfig+0x908>
 8005d9c:	2601      	movs	r6, #1
 8005d9e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005da0:	03df      	lsls	r7, r3, #15
 8005da2:	d509      	bpl.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    switch (PeriphClkInit->SdmmcClockSelection)
 8005da4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005da6:	2900      	cmp	r1, #0
 8005da8:	f000 81dd 	beq.w	8006166 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005dac:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005db0:	f000 818a 	beq.w	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8005db4:	2601      	movs	r6, #1
 8005db6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005db8:	0098      	lsls	r0, r3, #2
 8005dba:	f100 8165 	bmi.w	8006088 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005dbe:	0399      	lsls	r1, r3, #14
 8005dc0:	d50b      	bpl.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->RngClockSelection)
 8005dc2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005dc4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005dc8:	f000 81c5 	beq.w	8006156 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8005dcc:	d974      	bls.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005dce:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8005dd2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005dd6:	d071      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x638>
 8005dd8:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005dda:	02df      	lsls	r7, r3, #11
 8005ddc:	d506      	bpl.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x568>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005dde:	4842      	ldr	r0, [pc, #264]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005de0:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8005de2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005de4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005de8:	4329      	orrs	r1, r5
 8005dea:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dec:	029d      	lsls	r5, r3, #10
 8005dee:	d506      	bpl.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x57a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005df0:	483d      	ldr	r0, [pc, #244]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005df2:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8005df4:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005df6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005dfa:	4329      	orrs	r1, r5
 8005dfc:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005dfe:	0058      	lsls	r0, r3, #1
 8005e00:	d509      	bpl.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e02:	4939      	ldr	r1, [pc, #228]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005e04:	6908      	ldr	r0, [r1, #16]
 8005e06:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8005e0a:	6108      	str	r0, [r1, #16]
 8005e0c:	6908      	ldr	r0, [r1, #16]
 8005e0e:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8005e12:	4328      	orrs	r0, r5
 8005e14:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da06      	bge.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e1a:	4833      	ldr	r0, [pc, #204]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005e1c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005e1e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005e20:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8005e24:	4329      	orrs	r1, r5
 8005e26:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e28:	0219      	lsls	r1, r3, #8
 8005e2a:	d507      	bpl.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e2c:	492e      	ldr	r1, [pc, #184]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005e2e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8005e32:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8005e34:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005e38:	4303      	orrs	r3, r0
 8005e3a:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005e3c:	07d3      	lsls	r3, r2, #31
 8005e3e:	f100 80fe 	bmi.w	800603e <HAL_RCCEx_PeriphCLKConfig+0x7ba>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005e42:	0797      	lsls	r7, r2, #30
 8005e44:	f100 8108 	bmi.w	8006058 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005e48:	0755      	lsls	r5, r2, #29
 8005e4a:	f100 8112 	bmi.w	8006072 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005e4e:	0710      	lsls	r0, r2, #28
 8005e50:	f100 80ea 	bmi.w	8006028 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005e54:	06d1      	lsls	r1, r2, #27
 8005e56:	f100 80d9 	bmi.w	800600c <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005e5a:	0692      	lsls	r2, r2, #26
 8005e5c:	f100 8120 	bmi.w	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    return HAL_OK;
 8005e60:	1e30      	subs	r0, r6, #0
 8005e62:	bf18      	it	ne
 8005e64:	2001      	movne	r0, #1
}
 8005e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005e6a:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8005e6e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005e72:	f43f af07 	beq.w	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005e76:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8005e7a:	f43f af03 	beq.w	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005e7e:	2601      	movs	r6, #1
 8005e80:	4635      	mov	r5, r6
 8005e82:	e70a      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005e84:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8005e88:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8005e8c:	f43f af1c 	beq.w	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8005e90:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8005e94:	f43f af18 	beq.w	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8005e98:	2601      	movs	r6, #1
 8005e9a:	4635      	mov	r5, r6
 8005e9c:	e71f      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x45a>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005e9e:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8005ea2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005ea6:	f43f af31 	beq.w	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005eaa:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8005eae:	f43f af2d 	beq.w	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005eb2:	2601      	movs	r6, #1
 8005eb4:	4635      	mov	r5, r6
 8005eb6:	e734      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (PeriphClkInit->RngClockSelection)
 8005eb8:	2900      	cmp	r1, #0
 8005eba:	d18d      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    if (ret == HAL_OK)
 8005ebc:	2d00      	cmp	r5, #0
 8005ebe:	f040 8148 	bne.w	8006152 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ec2:	4d09      	ldr	r5, [pc, #36]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005ec4:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8005ec6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8005eca:	4301      	orrs	r1, r0
 8005ecc:	6569      	str	r1, [r5, #84]	; 0x54
 8005ece:	e784      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005ed0:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8005ed2:	2d00      	cmp	r5, #0
 8005ed4:	f040 80f0 	bne.w	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ed8:	4f03      	ldr	r7, [pc, #12]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8005eda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005edc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ede:	f021 0107 	bic.w	r1, r1, #7
 8005ee2:	4301      	orrs	r1, r0
 8005ee4:	6539      	str	r1, [r7, #80]	; 0x50
 8005ee6:	e50a      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ee8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005eec:	2102      	movs	r1, #2
 8005eee:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005ef2:	f7ff fc4d 	bl	8005790 <RCCEx_PLL3_Config>
 8005ef6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ef8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005efc:	2d00      	cmp	r5, #0
 8005efe:	f040 810e 	bne.w	800611e <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f02:	4fb1      	ldr	r7, [pc, #708]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005f04:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8005f08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f0a:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8005f0e:	4301      	orrs	r1, r0
 8005f10:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f12:	e733      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f14:	2101      	movs	r1, #1
 8005f16:	f104 0008 	add.w	r0, r4, #8
 8005f1a:	f7ff fbbf 	bl	800569c <RCCEx_PLL2_Config>
 8005f1e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f20:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005f24:	2d00      	cmp	r5, #0
 8005f26:	f040 8112 	bne.w	800614e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f2a:	4fa7      	ldr	r7, [pc, #668]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005f2c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005f2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f30:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8005f34:	4301      	orrs	r1, r0
 8005f36:	6539      	str	r1, [r7, #80]	; 0x50
 8005f38:	e5b5      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005f40:	f7ff fc26 	bl	8005790 <RCCEx_PLL3_Config>
 8005f44:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005f46:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005f4a:	2d00      	cmp	r5, #0
 8005f4c:	f040 80fd 	bne.w	800614a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f50:	4f9d      	ldr	r7, [pc, #628]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005f52:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8005f56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f58:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8005f5c:	4301      	orrs	r1, r0
 8005f5e:	6579      	str	r1, [r7, #84]	; 0x54
 8005f60:	e71e      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f62:	2101      	movs	r1, #1
 8005f64:	f104 0008 	add.w	r0, r4, #8
 8005f68:	f7ff fb98 	bl	800569c <RCCEx_PLL2_Config>
 8005f6c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f6e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005f72:	2d00      	cmp	r5, #0
 8005f74:	f040 80db 	bne.w	800612e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f78:	4f93      	ldr	r7, [pc, #588]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005f7a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005f7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f7e:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8005f82:	4301      	orrs	r1, r0
 8005f84:	6579      	str	r1, [r7, #84]	; 0x54
 8005f86:	e621      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x348>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f88:	4f90      	ldr	r7, [pc, #576]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f90:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8005f92:	f7fb fed1 	bl	8001d38 <HAL_GetTick>
 8005f96:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f98:	e006      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x724>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f9a:	f7fb fecd 	bl	8001d38 <HAL_GetTick>
 8005f9e:	eba0 0008 	sub.w	r0, r0, r8
 8005fa2:	2864      	cmp	r0, #100	; 0x64
 8005fa4:	f200 81db 	bhi.w	800635e <HAL_RCCEx_PeriphCLKConfig+0xada>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	05db      	lsls	r3, r3, #23
 8005fac:	d5f5      	bpl.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x716>
    if (ret == HAL_OK)
 8005fae:	2d00      	cmp	r5, #0
 8005fb0:	f040 8205 	bne.w	80063be <HAL_RCCEx_PeriphCLKConfig+0xb3a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005fb4:	4a84      	ldr	r2, [pc, #528]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005fb6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005fba:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005fbc:	4059      	eors	r1, r3
 8005fbe:	f411 7f40 	tst.w	r1, #768	; 0x300
 8005fc2:	d00b      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x758>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fc4:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fc6:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fc8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fcc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8005fd0:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fd2:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8005fd4:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8005fd8:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8005fda:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe0:	f000 81cf 	beq.w	8006382 <HAL_RCCEx_PeriphCLKConfig+0xafe>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fe4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005fe8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005fec:	f000 81dd 	beq.w	80063aa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005ff0:	4975      	ldr	r1, [pc, #468]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005ff2:	690a      	ldr	r2, [r1, #16]
 8005ff4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005ff8:	610a      	str	r2, [r1, #16]
 8005ffa:	4873      	ldr	r0, [pc, #460]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8005ffc:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8006000:	6f07      	ldr	r7, [r0, #112]	; 0x70
 8006002:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006004:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006008:	6701      	str	r1, [r0, #112]	; 0x70
 800600a:	e5ad      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800600c:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8006010:	2101      	movs	r1, #1
 8006012:	4628      	mov	r0, r5
 8006014:	f7ff fbbc 	bl	8005790 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8006018:	2800      	cmp	r0, #0
 800601a:	f000 80bf 	beq.w	800619c <HAL_RCCEx_PeriphCLKConfig+0x918>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800601e:	6863      	ldr	r3, [r4, #4]
 8006020:	069b      	lsls	r3, r3, #26
 8006022:	d546      	bpl.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006024:	4606      	mov	r6, r0
 8006026:	e03d      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006028:	2100      	movs	r1, #0
 800602a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800602e:	f7ff fbaf 	bl	8005790 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006032:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8006034:	2800      	cmp	r0, #0
 8006036:	f43f af0d 	beq.w	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800603a:	4606      	mov	r6, r0
 800603c:	e70a      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800603e:	2100      	movs	r1, #0
 8006040:	f104 0008 	add.w	r0, r4, #8
 8006044:	f7ff fb2a 	bl	800569c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006048:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800604a:	2800      	cmp	r0, #0
 800604c:	f43f aef9 	beq.w	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006050:	0797      	lsls	r7, r2, #30
 8006052:	4606      	mov	r6, r0
 8006054:	f57f aef8 	bpl.w	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006058:	2101      	movs	r1, #1
 800605a:	f104 0008 	add.w	r0, r4, #8
 800605e:	f7ff fb1d 	bl	800569c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006062:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8006064:	2800      	cmp	r0, #0
 8006066:	f43f aeef 	beq.w	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800606a:	0755      	lsls	r5, r2, #29
 800606c:	4606      	mov	r6, r0
 800606e:	f57f aeee 	bpl.w	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006072:	2102      	movs	r1, #2
 8006074:	f104 0008 	add.w	r0, r4, #8
 8006078:	f7ff fb10 	bl	800569c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800607c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800607e:	2800      	cmp	r0, #0
 8006080:	f43f aee5 	beq.w	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006084:	4606      	mov	r6, r0
 8006086:	e6e2      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006088:	2102      	movs	r1, #2
 800608a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800608e:	f7ff fb7f 	bl	8005790 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006092:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006096:	2800      	cmp	r0, #0
 8006098:	f43f ae91 	beq.w	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x53a>
      status = HAL_ERROR;
 800609c:	2601      	movs	r6, #1
 800609e:	e68e      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x53a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060a0:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060a4:	2102      	movs	r1, #2
 80060a6:	4628      	mov	r0, r5
 80060a8:	f7ff fb72 	bl	8005790 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80060ac:	2800      	cmp	r0, #0
 80060ae:	f43f aed7 	beq.w	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
  return HAL_ERROR;
 80060b2:	2001      	movs	r0, #1
}
 80060b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b8:	462e      	mov	r6, r5
 80060ba:	e420      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060bc:	462e      	mov	r6, r5
 80060be:	e442      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80060c0:	462e      	mov	r6, r5
 80060c2:	e4a1      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x184>
 80060c4:	462e      	mov	r6, r5
 80060c6:	e462      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060c8:	2102      	movs	r1, #2
 80060ca:	f104 0008 	add.w	r0, r4, #8
 80060ce:	f7ff fae5 	bl	800569c <RCCEx_PLL2_Config>
 80060d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80060d8:	2d00      	cmp	r5, #0
 80060da:	d14b      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80060dc:	4f3a      	ldr	r7, [pc, #232]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80060de:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80060e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80060e2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80060e6:	4301      	orrs	r1, r0
 80060e8:	64f9      	str	r1, [r7, #76]	; 0x4c
 80060ea:	e665      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x534>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ec:	4d36      	ldr	r5, [pc, #216]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80060ee:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80060f0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80060f4:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 80060f6:	f7ff bbe6 	b.w	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060fa:	4833      	ldr	r0, [pc, #204]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80060fc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80060fe:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006102:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8006104:	e438      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006106:	4830      	ldr	r0, [pc, #192]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8006108:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800610a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800610e:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8006110:	e470      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006112:	482d      	ldr	r0, [pc, #180]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8006114:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006116:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800611a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800611c:	e408      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800611e:	462e      	mov	r6, r5
 8006120:	e62c      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8006122:	462e      	mov	r6, r5
 8006124:	e44e      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8006126:	462e      	mov	r6, r5
 8006128:	e5fb      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x49e>
 800612a:	462e      	mov	r6, r5
 800612c:	e5b5      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800612e:	462e      	mov	r6, r5
 8006130:	e54c      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006132:	462e      	mov	r6, r5
 8006134:	e58f      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8006136:	462e      	mov	r6, r5
 8006138:	e568      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x388>
 800613a:	462e      	mov	r6, r5
 800613c:	e5cf      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800613e:	462e      	mov	r6, r5
 8006140:	e4a1      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006142:	462e      	mov	r6, r5
 8006144:	e47f      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006146:	462e      	mov	r6, r5
 8006148:	e50b      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800614a:	462e      	mov	r6, r5
 800614c:	e628      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 800614e:	462e      	mov	r6, r5
 8006150:	e4a9      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006152:	462e      	mov	r6, r5
 8006154:	e641      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x556>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006156:	4f1c      	ldr	r7, [pc, #112]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8006158:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800615a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800615e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 8006160:	2d00      	cmp	r5, #0
 8006162:	d1f6      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8006164:	e6ad      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006166:	4818      	ldr	r0, [pc, #96]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8006168:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800616a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800616e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8006170:	2d00      	cmp	r5, #0
 8006172:	d0b3      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x858>
 8006174:	462e      	mov	r6, r5
 8006176:	e61f      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x534>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006178:	f104 0008 	add.w	r0, r4, #8
 800617c:	f7ff fa8e 	bl	800569c <RCCEx_PLL2_Config>
 8006180:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006182:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006186:	2d00      	cmp	r5, #0
 8006188:	d1c9      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800618a:	e6ba      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800618c:	480e      	ldr	r0, [pc, #56]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 800618e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006190:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006194:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8006196:	2d00      	cmp	r5, #0
 8006198:	d1d7      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 800619a:	e6d9      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800619c:	6862      	ldr	r2, [r4, #4]
 800619e:	e65c      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a0:	4809      	ldr	r0, [pc, #36]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80061a2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80061a4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80061a8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	d1cf      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80061ae:	e6bc      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061b0:	2102      	movs	r1, #2
 80061b2:	f104 0008 	add.w	r0, r4, #8
 80061b6:	f7ff fa71 	bl	800569c <RCCEx_PLL2_Config>
 80061ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061bc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80061c0:	2d00      	cmp	r5, #0
 80061c2:	d1c0      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 80061c4:	e4c6      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80061c6:	bf00      	nop
 80061c8:	58024400 	.word	0x58024400
 80061cc:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061d0:	2102      	movs	r1, #2
 80061d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80061d6:	f7ff fadb 	bl	8005790 <RCCEx_PLL3_Config>
 80061da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80061dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80061e0:	2d00      	cmp	r5, #0
 80061e2:	d1a0      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80061e4:	e595      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x48e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061e6:	2102      	movs	r1, #2
 80061e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80061ec:	f7ff fad0 	bl	8005790 <RCCEx_PLL3_Config>
 80061f0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061f2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80061f6:	2d00      	cmp	r5, #0
 80061f8:	d19f      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 80061fa:	e568      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x44a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061fc:	2101      	movs	r1, #1
 80061fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006202:	f7ff fac5 	bl	8005790 <RCCEx_PLL3_Config>
 8006206:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006208:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800620c:	2d00      	cmp	r5, #0
 800620e:	d198      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8006210:	e412      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006212:	2101      	movs	r1, #1
 8006214:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006218:	f7ff faba 	bl	8005790 <RCCEx_PLL3_Config>
 800621c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800621e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006222:	2d00      	cmp	r5, #0
 8006224:	d18b      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8006226:	e426      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006228:	2102      	movs	r1, #2
 800622a:	f104 0008 	add.w	r0, r4, #8
 800622e:	f7ff fa35 	bl	800569c <RCCEx_PLL2_Config>
 8006232:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006234:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006238:	2d00      	cmp	r5, #0
 800623a:	f47f af72 	bne.w	8006122 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800623e:	f7ff bbba 	b.w	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006242:	2102      	movs	r1, #2
 8006244:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006248:	f7ff faa2 	bl	8005790 <RCCEx_PLL3_Config>
 800624c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800624e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006252:	2d00      	cmp	r5, #0
 8006254:	f47f af69 	bne.w	800612a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8006258:	e517      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x406>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800625a:	2102      	movs	r1, #2
 800625c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006260:	f7ff fa96 	bl	8005790 <RCCEx_PLL3_Config>
 8006264:	2800      	cmp	r0, #0
 8006266:	f040 8086 	bne.w	8006376 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800626a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800626e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006272:	e56c      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006274:	2102      	movs	r1, #2
 8006276:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800627a:	f7ff fa89 	bl	8005790 <RCCEx_PLL3_Config>
 800627e:	2800      	cmp	r0, #0
 8006280:	d173      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xae6>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006282:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006286:	e9d4 3200 	ldrd	r3, r2, [r4]
 800628a:	e552      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800628c:	2102      	movs	r1, #2
 800628e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006292:	f7ff fa7d 	bl	8005790 <RCCEx_PLL3_Config>
 8006296:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8006298:	2e00      	cmp	r6, #0
 800629a:	f43f ab11 	beq.w	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800629e:	e036      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xa8a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a0:	4850      	ldr	r0, [pc, #320]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xb60>)
        break;
 80062a2:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80062a6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80062aa:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80062ac:	e611      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062ae:	2100      	movs	r1, #0
 80062b0:	f104 0008 	add.w	r0, r4, #8
 80062b4:	f7ff f9f2 	bl	800569c <RCCEx_PLL2_Config>
 80062b8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062ba:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80062be:	e608      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062c0:	2100      	movs	r1, #0
 80062c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80062c6:	f7ff fa63 	bl	8005790 <RCCEx_PLL3_Config>
 80062ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062cc:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80062d0:	e5ff      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062d2:	2100      	movs	r1, #0
 80062d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80062d8:	f7ff fa5a 	bl	8005790 <RCCEx_PLL3_Config>
 80062dc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80062de:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80062e2:	f7ff bb49 	b.w	8005978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062e6:	2100      	movs	r1, #0
 80062e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80062ec:	f7ff fa50 	bl	8005790 <RCCEx_PLL3_Config>
 80062f0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80062f2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80062f6:	f7ff bb7d 	b.w	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062fa:	2100      	movs	r1, #0
 80062fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006300:	f7ff fa46 	bl	8005790 <RCCEx_PLL3_Config>
 8006304:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006306:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800630a:	f7ff bb11 	b.w	8005930 <HAL_RCCEx_PeriphCLKConfig+0xac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800630e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006312:	f7ff badf 	b.w	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006316:	2101      	movs	r1, #1
 8006318:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800631c:	f7ff fa38 	bl	8005790 <RCCEx_PLL3_Config>
 8006320:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006322:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006326:	2d00      	cmp	r5, #0
 8006328:	f47f af03 	bne.w	8006132 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 800632c:	e48b      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800632e:	2101      	movs	r1, #1
 8006330:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006334:	f7ff fa2c 	bl	8005790 <RCCEx_PLL3_Config>
 8006338:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800633a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800633e:	2d00      	cmp	r5, #0
 8006340:	f47f aef9 	bne.w	8006136 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8006344:	e45b      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x37a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006346:	2101      	movs	r1, #1
 8006348:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800634c:	f7ff fa20 	bl	8005790 <RCCEx_PLL3_Config>
 8006350:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006352:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006356:	2d00      	cmp	r5, #0
 8006358:	f47f aee9 	bne.w	800612e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 800635c:	e60c      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        status = ret;
 800635e:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006360:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006364:	4635      	mov	r5, r6
 8006366:	f7ff bbff 	b.w	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800636a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
        status = HAL_ERROR;
 800636e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006370:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006374:	e4dd      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006376:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
        status = HAL_ERROR;
 800637a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800637c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006380:	e4e5      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
        tickstart = HAL_GetTick();
 8006382:	f7fb fcd9 	bl	8001d38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006386:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80063e4 <HAL_RCCEx_PeriphCLKConfig+0xb60>
        tickstart = HAL_GetTick();
 800638a:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800638c:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006390:	e004      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xb18>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006392:	f7fb fcd1 	bl	8001d38 <HAL_GetTick>
 8006396:	1bc0      	subs	r0, r0, r7
 8006398:	4548      	cmp	r0, r9
 800639a:	d8e0      	bhi.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xada>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800639c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80063a0:	0798      	lsls	r0, r3, #30
 80063a2:	d5f6      	bpl.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063a4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80063a8:	e61c      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80063aa:	480e      	ldr	r0, [pc, #56]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xb60>)
 80063ac:	4a0e      	ldr	r2, [pc, #56]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0xb64>)
 80063ae:	6901      	ldr	r1, [r0, #16]
 80063b0:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80063b4:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80063b8:	430a      	orrs	r2, r1
 80063ba:	6102      	str	r2, [r0, #16]
 80063bc:	e61d      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x776>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80063be:	e9d4 3200 	ldrd	r3, r2, [r4]
 80063c2:	462e      	mov	r6, r5
 80063c4:	f7ff bbd0 	b.w	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80063c8:	2601      	movs	r6, #1
 80063ca:	4635      	mov	r5, r6
 80063cc:	e443      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80063ce:	2601      	movs	r6, #1
 80063d0:	4635      	mov	r5, r6
 80063d2:	e41b      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x388>
    switch (PeriphClkInit->Sai1ClockSelection)
 80063d4:	2601      	movs	r6, #1
 80063d6:	f7ff ba91 	b.w	80058fc <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->FmcClockSelection)
 80063da:	2601      	movs	r6, #1
 80063dc:	4635      	mov	r5, r6
 80063de:	f7ff bbc0 	b.w	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80063e2:	bf00      	nop
 80063e4:	58024400 	.word	0x58024400
 80063e8:	00ffffcf 	.word	0x00ffffcf

080063ec <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063ec:	4a50      	ldr	r2, [pc, #320]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 80063ee:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80063f2:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80063f4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 80063f6:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80063fa:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80063fe:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8006400:	d05d      	beq.n	80064be <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006402:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006406:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800640a:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800640e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8006412:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006414:	ee07 4a90 	vmov	s15, r4
 8006418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800641c:	d003      	beq.n	8006426 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800641e:	2902      	cmp	r1, #2
 8006420:	d078      	beq.n	8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 8006422:	2900      	cmp	r1, #0
 8006424:	d050      	beq.n	80064c8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8006534 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800642e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006432:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006434:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8006438:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8006538 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800643c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006440:	ee07 3a90 	vmov	s15, r3
 8006444:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800644c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006450:	eee7 7a06 	vfma.f32	s15, s14, s12
 8006454:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006458:	4a35      	ldr	r2, [pc, #212]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 800645a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800645e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006460:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006464:	ee07 3a90 	vmov	s15, r3
 8006468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800646c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800646e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006476:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800647a:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800647e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006480:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006484:	ee07 3a90 	vmov	s15, r3
 8006488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800648c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006494:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006498:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800649c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800649e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80064a2:	ee07 3a10 	vmov	s14, r3
 80064a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80064aa:	ee37 7a06 	vadd.f32	s14, s14, s12
 80064ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064b6:	ee17 3a90 	vmov	r3, s15
 80064ba:	6083      	str	r3, [r0, #8]
}
 80064bc:	4770      	bx	lr
 80064be:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80064c0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80064c4:	6083      	str	r3, [r0, #8]
}
 80064c6:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064c8:	6811      	ldr	r1, [r2, #0]
 80064ca:	0689      	lsls	r1, r1, #26
 80064cc:	d529      	bpl.n	8006522 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064ce:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064d0:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064d4:	4919      	ldr	r1, [pc, #100]	; (800653c <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064da:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064dc:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064e4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8006538 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80064e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064ec:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064ee:	ee06 3a10 	vmov	s12, r3
 80064f2:	ee05 1a90 	vmov	s11, r1
 80064f6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80064fa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80064fe:	ee36 6a26 	vadd.f32	s12, s12, s13
 8006502:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006506:	eef0 7a46 	vmov.f32	s15, s12
 800650a:	eee7 7a05 	vfma.f32	s15, s14, s10
 800650e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006512:	e7a1      	b.n	8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006514:	ee07 3a90 	vmov	s15, r3
 8006518:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800651c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006520:	e787      	b.n	8006432 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8006544 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 800652a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800652e:	e780      	b.n	8006432 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8006530:	58024400 	.word	0x58024400
 8006534:	4a742400 	.word	0x4a742400
 8006538:	39000000 	.word	0x39000000
 800653c:	03d09000 	.word	0x03d09000
 8006540:	4bbebc20 	.word	0x4bbebc20
 8006544:	4c742400 	.word	0x4c742400

08006548 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006548:	4a50      	ldr	r2, [pc, #320]	; (800668c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 800654a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800654c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800654e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006550:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 8006552:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006556:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800655a:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800655c:	d05d      	beq.n	800661a <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800655e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006562:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006566:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800656a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800656e:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006570:	ee07 4a90 	vmov	s15, r4
 8006574:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8006578:	d003      	beq.n	8006582 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800657a:	2902      	cmp	r1, #2
 800657c:	d078      	beq.n	8006670 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 800657e:	2900      	cmp	r1, #0
 8006580:	d050      	beq.n	8006624 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800658a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800658e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006590:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8006594:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8006598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659c:	ee07 3a90 	vmov	s15, r3
 80065a0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80065a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065a8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80065ac:	eee7 7a06 	vfma.f32	s15, s14, s12
 80065b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80065b4:	4a35      	ldr	r2, [pc, #212]	; (800668c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 80065b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80065ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80065bc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80065c0:	ee07 3a90 	vmov	s15, r3
 80065c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80065c8:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80065ca:	ee77 7a86 	vadd.f32	s15, s15, s12
 80065ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065d2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80065d6:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80065da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80065dc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80065e0:	ee07 3a90 	vmov	s15, r3
 80065e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065e8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80065ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80065f4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80065f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80065fa:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80065fe:	ee07 3a10 	vmov	s14, r3
 8006602:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006606:	ee37 7a06 	vadd.f32	s14, s14, s12
 800660a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800660e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006612:	ee17 3a90 	vmov	r3, s15
 8006616:	6083      	str	r3, [r0, #8]
}
 8006618:	4770      	bx	lr
 800661a:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800661c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006620:	6083      	str	r3, [r0, #8]
}
 8006622:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006624:	6811      	ldr	r1, [r2, #0]
 8006626:	0689      	lsls	r1, r1, #26
 8006628:	d529      	bpl.n	800667e <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800662a:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800662c:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006630:	4919      	ldr	r1, [pc, #100]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006636:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006638:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800663c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006640:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8006644:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006648:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800664a:	ee06 3a10 	vmov	s12, r3
 800664e:	ee05 1a90 	vmov	s11, r1
 8006652:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006656:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800665a:	ee36 6a26 	vadd.f32	s12, s12, s13
 800665e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006662:	eef0 7a46 	vmov.f32	s15, s12
 8006666:	eee7 7a05 	vfma.f32	s15, s14, s10
 800666a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800666e:	e7a1      	b.n	80065b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006670:	ee07 3a90 	vmov	s15, r3
 8006674:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800669c <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8006678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800667c:	e787      	b.n	800658e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	ed9f 5a07 	vldr	s10, [pc, #28]	; 80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 8006686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800668a:	e780      	b.n	800658e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800668c:	58024400 	.word	0x58024400
 8006690:	4a742400 	.word	0x4a742400
 8006694:	39000000 	.word	0x39000000
 8006698:	03d09000 	.word	0x03d09000
 800669c:	4bbebc20 	.word	0x4bbebc20
 80066a0:	4c742400 	.word	0x4c742400

080066a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066a4:	4a51      	ldr	r2, [pc, #324]	; (80067ec <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 80066a6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80066aa:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80066ac:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 80066ae:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80066b2:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066b6:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 80066b8:	d05e      	beq.n	8006778 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066ba:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80066be:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066c2:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066c6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80066ca:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066cc:	ee07 4a90 	vmov	s15, r4
 80066d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80066d4:	f000 8082 	beq.w	80067dc <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 80066d8:	2902      	cmp	r1, #2
 80066da:	d078      	beq.n	80067ce <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 80066dc:	2900      	cmp	r1, #0
 80066de:	d050      	beq.n	8006782 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066e0:	ee07 3a90 	vmov	s15, r3
 80066e4:	ed9f 5a42 	vldr	s10, [pc, #264]	; 80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80066e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80066ee:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80066f2:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80067f4 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 80066f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006706:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800670a:	eee7 7a06 	vfma.f32	s15, s14, s12
 800670e:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006712:	4a36      	ldr	r2, [pc, #216]	; (80067ec <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 8006714:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006718:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800671a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8006726:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006728:	ee77 7a86 	vadd.f32	s15, s15, s12
 800672c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006730:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006734:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006738:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800673a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006746:	ee77 7a86 	vadd.f32	s15, s15, s12
 800674a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006752:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006756:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006758:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800675c:	ee07 3a10 	vmov	s14, r3
 8006760:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006764:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800676c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006770:	ee17 3a90 	vmov	r3, s15
 8006774:	6083      	str	r3, [r0, #8]
}
 8006776:	4770      	bx	lr
 8006778:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800677a:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800677e:	6083      	str	r3, [r0, #8]
}
 8006780:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006782:	6811      	ldr	r1, [r2, #0]
 8006784:	0689      	lsls	r1, r1, #26
 8006786:	d5ab      	bpl.n	80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006788:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800678a:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800678e:	491a      	ldr	r1, [pc, #104]	; (80067f8 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006794:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006796:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800679a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800679e:	ed9f 5a15 	vldr	s10, [pc, #84]	; 80067f4 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 80067a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067a6:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067a8:	ee06 3a10 	vmov	s12, r3
 80067ac:	ee05 1a90 	vmov	s11, r1
 80067b0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80067b4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80067b8:	ee36 6a26 	vadd.f32	s12, s12, s13
 80067bc:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80067c0:	eef0 7a46 	vmov.f32	s15, s12
 80067c4:	eee7 7a05 	vfma.f32	s15, s14, s10
 80067c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80067cc:	e7a1      	b.n	8006712 <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 80067d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067da:	e787      	b.n	80066ec <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067dc:	ee07 3a90 	vmov	s15, r3
 80067e0:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8006800 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 80067e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067e8:	e780      	b.n	80066ec <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 80067ea:	bf00      	nop
 80067ec:	58024400 	.word	0x58024400
 80067f0:	4c742400 	.word	0x4c742400
 80067f4:	39000000 	.word	0x39000000
 80067f8:	03d09000 	.word	0x03d09000
 80067fc:	4bbebc20 	.word	0x4bbebc20
 8006800:	4a742400 	.word	0x4a742400

08006804 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006804:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8006808:	430b      	orrs	r3, r1
{
 800680a:	b500      	push	{lr}
 800680c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800680e:	d075      	beq.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006810:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8006814:	430b      	orrs	r3, r1
 8006816:	d034      	beq.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006818:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800681c:	430b      	orrs	r3, r1
 800681e:	f000 80ca 	beq.w	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006822:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8006826:	430b      	orrs	r3, r1
 8006828:	d07c      	beq.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800682a:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800682e:	430b      	orrs	r3, r1
 8006830:	f000 80d7 	beq.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006834:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8006838:	430b      	orrs	r3, r1
 800683a:	f000 8130 	beq.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800683e:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8006842:	430b      	orrs	r3, r1
 8006844:	f000 8144 	beq.w	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006848:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800684c:	430b      	orrs	r3, r1
 800684e:	f000 8107 	beq.w	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006852:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8006856:	4308      	orrs	r0, r1
 8006858:	d13a      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800685a:	4b98      	ldr	r3, [pc, #608]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800685c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800685e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8006862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006866:	f000 8083 	beq.w	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800686a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800686e:	f000 815f 	beq.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8006872:	bb6b      	cbnz	r3, 80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006874:	4b91      	ldr	r3, [pc, #580]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800687c:	d03b      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          frequency = HSE_VALUE;
 800687e:	4890      	ldr	r0, [pc, #576]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006880:	e039      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006882:	4a8e      	ldr	r2, [pc, #568]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006884:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006886:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800688a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800688e:	f000 808d 	beq.w	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8006892:	d921      	bls.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8006894:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006898:	d02c      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 800689a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800689e:	d117      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068a0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068a2:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068a8:	0749      	lsls	r1, r1, #29
 80068aa:	d502      	bpl.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 80ca 	beq.w	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068b2:	4a82      	ldr	r2, [pc, #520]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	05d0      	lsls	r0, r2, #23
 80068b8:	d503      	bpl.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80068ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068be:	f000 80cd 	beq.w	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068c2:	4a7e      	ldr	r2, [pc, #504]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	0391      	lsls	r1, r2, #14
 80068c8:	d502      	bpl.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80068ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ce:	d0d6      	beq.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    switch (srcclk)
 80068d0:	2000      	movs	r0, #0
}
 80068d2:	b005      	add	sp, #20
 80068d4:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d040      	beq.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80068dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068e0:	d1f6      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068e2:	6810      	ldr	r0, [r2, #0]
 80068e4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80068e8:	d005      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ea:	a801      	add	r0, sp, #4
 80068ec:	f7ff fd7e 	bl	80063ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068f0:	9801      	ldr	r0, [sp, #4]
 80068f2:	e000      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = EXTERNAL_CLOCK_VALUE;
 80068f4:	4873      	ldr	r0, [pc, #460]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 80068f6:	b005      	add	sp, #20
 80068f8:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80068fc:	4b6f      	ldr	r3, [pc, #444]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80068fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006900:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8006904:	2b04      	cmp	r3, #4
 8006906:	d8e3      	bhi.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8006908:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 800690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690e:	bf00      	nop
 8006910:	08006971 	.word	0x08006971
 8006914:	0800697d 	.word	0x0800697d
 8006918:	0800698d 	.word	0x0800698d
 800691c:	080068f5 	.word	0x080068f5
 8006920:	08006989 	.word	0x08006989
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006924:	4a65      	ldr	r2, [pc, #404]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006926:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006928:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800692c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006930:	d03c      	beq.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8006932:	d935      	bls.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8006934:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006938:	d0dc      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 800693a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800693e:	d1c7      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006940:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006942:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006948:	0752      	lsls	r2, r2, #29
 800694a:	d5b2      	bpl.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1b0      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006950:	4b5a      	ldr	r3, [pc, #360]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006952:	485d      	ldr	r0, [pc, #372]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800695a:	40d8      	lsrs	r0, r3
 800695c:	e7cb      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800695e:	6810      	ldr	r0, [r2, #0]
 8006960:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8006964:	d0c7      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006966:	a801      	add	r0, sp, #4
 8006968:	f7ff fe9c 	bl	80066a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800696c:	9802      	ldr	r0, [sp, #8]
 800696e:	e7c2      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006970:	4b52      	ldr	r3, [pc, #328]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8006978:	d0bd      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800697a:	e7f4      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800697c:	4b4f      	ldr	r3, [pc, #316]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800697e:	6818      	ldr	r0, [r3, #0]
 8006980:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006984:	d0b7      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006986:	e7b0      	b.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006988:	4a4c      	ldr	r2, [pc, #304]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800698a:	e789      	b.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800698c:	4b4b      	ldr	r3, [pc, #300]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800698e:	6818      	ldr	r0, [r3, #0]
 8006990:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006994:	d0af      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006996:	a801      	add	r0, sp, #4
 8006998:	f7ff fdd6 	bl	8006548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800699c:	9801      	ldr	r0, [sp, #4]
 800699e:	e7aa      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    switch (srcclk)
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0dc      	beq.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80069a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a8:	d09b      	beq.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 80069aa:	e791      	b.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069ac:	6810      	ldr	r0, [r2, #0]
 80069ae:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80069b2:	d0a0      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80069b4:	e7ef      	b.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80069b6:	4a41      	ldr	r2, [pc, #260]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80069b8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80069ba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 80069be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069c2:	d0f3      	beq.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80069c4:	d805      	bhi.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0c9      	beq.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80069ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069ce:	d088      	beq.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 80069d0:	e77e      	b.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80069d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069d6:	d08d      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 80069d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069dc:	f43f af60 	beq.w	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80069e0:	e776      	b.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80069e2:	4a36      	ldr	r2, [pc, #216]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80069e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80069e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 80069ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069ee:	d025      	beq.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 80069f0:	d80f      	bhi.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80069f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f6:	d048      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 80069f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069fc:	d116      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069fe:	6810      	ldr	r0, [r2, #0]
 8006a00:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006a04:	f43f af77 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a08:	a801      	add	r0, sp, #4
 8006a0a:	f7ff fd9d 	bl	8006548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a0e:	9802      	ldr	r0, [sp, #8]
 8006a10:	e771      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    switch (srcclk)
 8006a12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a16:	d01c      	beq.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
 8006a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a1c:	f47f af58 	bne.w	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a20:	6810      	ldr	r0, [r2, #0]
 8006a22:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8006a26:	f43f af66 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006a2a:	e728      	b.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    switch (srcclk)
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f47f af4f 	bne.w	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
}
 8006a32:	b005      	add	sp, #20
 8006a34:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8006a38:	f7fe bde8 	b.w	800560c <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a3c:	6810      	ldr	r0, [r2, #0]
 8006a3e:	f010 0004 	ands.w	r0, r0, #4
 8006a42:	f43f af58 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a46:	6813      	ldr	r3, [r2, #0]
 8006a48:	481f      	ldr	r0, [pc, #124]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006a4a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006a4e:	40d8      	lsrs	r0, r3
 8006a50:	e751      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a52:	6810      	ldr	r0, [r2, #0]
 8006a54:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8006a58:	f43f af4d 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          frequency = CSI_VALUE;
 8006a5c:	481b      	ldr	r0, [pc, #108]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006a5e:	e74a      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006a60:	4a16      	ldr	r2, [pc, #88]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a62:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006a64:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8006a68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a6c:	d067      	beq.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8006a6e:	d83e      	bhi.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006a70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a74:	d05c      	beq.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8006a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a7a:	d140      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a7c:	4b0f      	ldr	r3, [pc, #60]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006a84:	f43f af37 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006a88:	e7be      	b.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a8a:	6810      	ldr	r0, [r2, #0]
 8006a8c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006a90:	f43f af31 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a94:	a801      	add	r0, sp, #4
 8006a96:	f7ff fca9 	bl	80063ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a9a:	9802      	ldr	r0, [sp, #8]
 8006a9c:	e72b      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006a9e:	4a07      	ldr	r2, [pc, #28]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006aa0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006aa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8006aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aaa:	d037      	beq.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006aac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ab0:	f43f af46 	beq.w	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f47f af0b 	bne.w	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8006aba:	e712      	b.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8006abc:	58024400 	.word	0x58024400
 8006ac0:	017d7840 	.word	0x017d7840
 8006ac4:	00bb8000 	.word	0x00bb8000
 8006ac8:	03d09000 	.word	0x03d09000
 8006acc:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006ad0:	4b21      	ldr	r3, [pc, #132]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8006ad4:	03d2      	lsls	r2, r2, #15
 8006ad6:	f57f af4c 	bpl.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006ae0:	f43f af09 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ae4:	a801      	add	r0, sp, #4
 8006ae6:	f7ff fc81 	bl	80063ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006aea:	9803      	ldr	r0, [sp, #12]
 8006aec:	e703      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    switch (srcclk)
 8006aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af2:	d02a      	beq.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8006af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006af8:	f43f aebc 	beq.w	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
 8006afc:	e6e8      	b.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f47f aee6 	bne.w	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b04:	f7fe fd42 	bl	800558c <HAL_RCC_GetHCLKFreq>
 8006b08:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006b0a:	4a14      	ldr	r2, [pc, #80]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006b12:	5cd3      	ldrb	r3, [r2, r3]
 8006b14:	f003 031f 	and.w	r3, r3, #31
 8006b18:	40d8      	lsrs	r0, r3
        break;
 8006b1a:	e6ec      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b1c:	6810      	ldr	r0, [r2, #0]
 8006b1e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006b22:	f43f aee8 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b26:	a801      	add	r0, sp, #4
 8006b28:	f7ff fd0e 	bl	8006548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b2c:	9803      	ldr	r0, [sp, #12]
 8006b2e:	e6e2      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b30:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006b38:	f43f aedd 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006b3c:	e7aa      	b.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b3e:	6810      	ldr	r0, [r2, #0]
 8006b40:	f010 0004 	ands.w	r0, r0, #4
 8006b44:	f43f aed7 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006b48:	e702      	b.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b4a:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8006b52:	f43f aed0 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006b56:	e781      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	0800bf40 	.word	0x0800bf40

08006b60 <HAL_SAI_Init>:
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006b60:	2800      	cmp	r0, #0
 8006b62:	f000 8133 	beq.w	8006dcc <HAL_SAI_Init+0x26c>
{
 8006b66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b6a:	4604      	mov	r4, r0
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006b6c:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8006b70:	2801      	cmp	r0, #1
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006b72:	6823      	ldr	r3, [r4, #0]
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006b74:	f000 8085 	beq.w	8006c82 <HAL_SAI_Init+0x122>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006b78:	4ab4      	ldr	r2, [pc, #720]	; (8006e4c <HAL_SAI_Init+0x2ec>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00d      	beq.n	8006b9a <HAL_SAI_Init+0x3a>
 8006b7e:	3220      	adds	r2, #32
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00a      	beq.n	8006b9a <HAL_SAI_Init+0x3a>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8006b84:	4ab2      	ldr	r2, [pc, #712]	; (8006e50 <HAL_SAI_Init+0x2f0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	f000 810a 	beq.w	8006da0 <HAL_SAI_Init+0x240>
 8006b8c:	3220      	adds	r2, #32
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	f000 8106 	beq.w	8006da0 <HAL_SAI_Init+0x240>
    return HAL_ERROR;
 8006b94:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 8006b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (hsai->State == HAL_SAI_STATE_RESET)
 8006b9a:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
    SaiBaseAddress = SAI1;
 8006b9e:	4ead      	ldr	r6, [pc, #692]	; (8006e54 <HAL_SAI_Init+0x2f4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8006ba0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8006ba4:	2a00      	cmp	r2, #0
 8006ba6:	f000 8103 	beq.w	8006db0 <HAL_SAI_Init+0x250>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006baa:	4aab      	ldr	r2, [pc, #684]	; (8006e58 <HAL_SAI_Init+0x2f8>)
 8006bac:	49ab      	ldr	r1, [pc, #684]	; (8006e5c <HAL_SAI_Init+0x2fc>)
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	fba1 1202 	umull	r1, r2, r1, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006bb4:	6819      	ldr	r1, [r3, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006bb6:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 8006bb8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006bbc:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8006bbe:	6019      	str	r1, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006bc0:	2a00      	cmp	r2, #0
 8006bc2:	d06f      	beq.n	8006ca4 <HAL_SAI_Init+0x144>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006bc4:	6819      	ldr	r1, [r3, #0]
    count--;
 8006bc6:	3a01      	subs	r2, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006bc8:	f411 3180 	ands.w	r1, r1, #65536	; 0x10000
 8006bcc:	d1f8      	bne.n	8006bc0 <HAL_SAI_Init+0x60>
  hsai->State = HAL_SAI_STATE_BUSY;
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8006bd4:	68e2      	ldr	r2, [r4, #12]
 8006bd6:	2a01      	cmp	r2, #1
 8006bd8:	f000 80f5 	beq.w	8006dc6 <HAL_SAI_Init+0x266>
 8006bdc:	2a02      	cmp	r2, #2
 8006bde:	bf15      	itete	ne
 8006be0:	2003      	movne	r0, #3
 8006be2:	2023      	moveq	r0, #35	; 0x23
 8006be4:	2200      	movne	r2, #0
 8006be6:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
 8006be8:	68a5      	ldr	r5, [r4, #8]
 8006bea:	2d02      	cmp	r5, #2
 8006bec:	f000 80e8 	beq.w	8006dc0 <HAL_SAI_Init+0x260>
 8006bf0:	2d05      	cmp	r5, #5
 8006bf2:	f000 80e4 	beq.w	8006dbe <HAL_SAI_Init+0x25e>
 8006bf6:	f1a5 0501 	sub.w	r5, r5, #1
 8006bfa:	fab5 f585 	clz	r5, r5
 8006bfe:	096d      	lsrs	r5, r5, #5
 8006c00:	02ad      	lsls	r5, r5, #10
  SaiBaseAddress->GCR = tmpregisterGCR;
 8006c02:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006c04:	6a22      	ldr	r2, [r4, #32]
 8006c06:	2a00      	cmp	r2, #0
 8006c08:	d055      	beq.n	8006cb6 <HAL_SAI_Init+0x156>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006c0a:	4a90      	ldr	r2, [pc, #576]	; (8006e4c <HAL_SAI_Init+0x2ec>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	f000 810d 	beq.w	8006e2c <HAL_SAI_Init+0x2cc>
 8006c12:	3220      	adds	r2, #32
 8006c14:	4293      	cmp	r3, r2
 8006c16:	f000 8109 	beq.w	8006e2c <HAL_SAI_Init+0x2cc>
    if (hsai->Instance == SAI4_Block_A)
 8006c1a:	4a8d      	ldr	r2, [pc, #564]	; (8006e50 <HAL_SAI_Init+0x2f0>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	f000 812b 	beq.w	8006e78 <HAL_SAI_Init+0x318>
    if (hsai->Instance == SAI4_Block_B)
 8006c22:	4a8f      	ldr	r2, [pc, #572]	; (8006e60 <HAL_SAI_Init+0x300>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	f000 8109 	beq.w	8006e3c <HAL_SAI_Init+0x2dc>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006c2a:	69a0      	ldr	r0, [r4, #24]
 8006c2c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8006c30:	f000 80e9 	beq.w	8006e06 <HAL_SAI_Init+0x2a6>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006c34:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006c38:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006c3c:	6a22      	ldr	r2, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006c3e:	f1bc 6f80 	cmp.w	ip, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006c42:	ea4f 0141 	mov.w	r1, r1, lsl #1
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c46:	6c67      	ldr	r7, [r4, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006c48:	bf14      	ite	ne
 8006c4a:	f04f 0801 	movne.w	r8, #1
 8006c4e:	f04f 0802 	moveq.w	r8, #2
        tmpframelength = hsai->FrameInit.FrameLength;
 8006c52:	f8d4 e054 	ldr.w	lr, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006c56:	fb02 f208 	mul.w	r2, r2, r8
 8006c5a:	0212      	lsls	r2, r2, #8
 8006c5c:	fbb1 f1f2 	udiv	r1, r1, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 8006c60:	4a80      	ldr	r2, [pc, #512]	; (8006e64 <HAL_SAI_Init+0x304>)
 8006c62:	fba2 8201 	umull	r8, r2, r2, r1
 8006c66:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 8006c68:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 8006c6c:	eba1 0148 	sub.w	r1, r1, r8, lsl #1
 8006c70:	2909      	cmp	r1, #9
      hsai->Init.Mckdiv += 1U;
 8006c72:	bf08      	it	eq
 8006c74:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c76:	2f04      	cmp	r7, #4
      hsai->Init.Mckdiv += 1U;
 8006c78:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c7a:	d122      	bne.n	8006cc2 <HAL_SAI_Init+0x162>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006c7c:	0852      	lsrs	r2, r2, #1
 8006c7e:	6262      	str	r2, [r4, #36]	; 0x24
 8006c80:	e01f      	b.n	8006cc2 <HAL_SAI_Init+0x162>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006c82:	4a72      	ldr	r2, [pc, #456]	; (8006e4c <HAL_SAI_Init+0x2ec>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d005      	beq.n	8006c94 <HAL_SAI_Init+0x134>
 8006c88:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8006c8c:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d10e      	bne.n	8006cb2 <HAL_SAI_Init+0x152>
 8006c94:	6862      	ldr	r2, [r4, #4]
 8006c96:	2a01      	cmp	r2, #1
 8006c98:	d10b      	bne.n	8006cb2 <HAL_SAI_Init+0x152>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006c9a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006c9c:	2a00      	cmp	r2, #0
 8006c9e:	f43f af6b 	beq.w	8006b78 <HAL_SAI_Init+0x18>
 8006ca2:	e006      	b.n	8006cb2 <HAL_SAI_Init+0x152>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006ca4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 8006ca8:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8006cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006cb6:	6c67      	ldr	r7, [r4, #68]	; 0x44
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006cb8:	69a0      	ldr	r0, [r4, #24]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006cba:	f8d4 e054 	ldr.w	lr, [r4, #84]	; 0x54
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006cbe:	e9d4 2c09 	ldrd	r2, ip, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006cc2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8006cc6:	f038 0102 	bics.w	r1, r8, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006cca:	6d21      	ldr	r1, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006ccc:	f040 8093 	bne.w	8006df6 <HAL_SAI_Init+0x296>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006cd0:	3901      	subs	r1, #1
 8006cd2:	bf18      	it	ne
 8006cd4:	2101      	movne	r1, #1
 8006cd6:	ea4f 2941 	mov.w	r9, r1, lsl #9
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006cda:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006cdc:	f10e 3eff 	add.w	lr, lr, #4294967295
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ce0:	ea48 0801 	orr.w	r8, r8, r1
 8006ce4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006ce6:	ea48 0801 	orr.w	r8, r8, r1
 8006cea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006cec:	ea48 0801 	orr.w	r8, r8, r1
 8006cf0:	6961      	ldr	r1, [r4, #20]
 8006cf2:	ea48 0801 	orr.w	r8, r8, r1
 8006cf6:	6921      	ldr	r1, [r4, #16]
 8006cf8:	ea48 0801 	orr.w	r8, r8, r1
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006cfc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006cfe:	ea48 0505 	orr.w	r5, r8, r5
 8006d02:	433d      	orrs	r5, r7
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006d04:	681f      	ldr	r7, [r3, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d06:	4328      	orrs	r0, r5
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006d08:	4d57      	ldr	r5, [pc, #348]	; (8006e68 <HAL_SAI_Init+0x308>)
 8006d0a:	403d      	ands	r5, r7
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d0c:	ea40 000c 	orr.w	r0, r0, ip
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006d10:	601d      	str	r5, [r3, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d12:	681d      	ldr	r5, [r3, #0]
 8006d14:	4328      	orrs	r0, r5
 8006d16:	ea40 5202 	orr.w	r2, r0, r2, lsl #20
 8006d1a:	ea42 0209 	orr.w	r2, r2, r9
 8006d1e:	601a      	str	r2, [r3, #0]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006d20:	69e2      	ldr	r2, [r4, #28]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006d22:	6858      	ldr	r0, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006d24:	430a      	orrs	r2, r1
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006d26:	4951      	ldr	r1, [pc, #324]	; (8006e6c <HAL_SAI_Init+0x30c>)
 8006d28:	4001      	ands	r1, r0
 8006d2a:	6059      	str	r1, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	6859      	ldr	r1, [r3, #4]
 8006d32:	430a      	orrs	r2, r1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006d36:	605a      	str	r2, [r3, #4]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d38:	6e62      	ldr	r2, [r4, #100]	; 0x64
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006d3a:	6898      	ldr	r0, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8006d40:	430a      	orrs	r2, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006d42:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006d44:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006d4a:	4949      	ldr	r1, [pc, #292]	; (8006e70 <HAL_SAI_Init+0x310>)
 8006d4c:	4001      	ands	r1, r0
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006d4e:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006d52:	6099      	str	r1, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d54:	6899      	ldr	r1, [r3, #8]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	ea42 020e 	orr.w	r2, r2, lr
 8006d5c:	609a      	str	r2, [r3, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006d5e:	68d9      	ldr	r1, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d60:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006d62:	4001      	ands	r1, r0
 8006d64:	60d9      	str	r1, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d66:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006d68:	68d8      	ldr	r0, [r3, #12]
 8006d6a:	430a      	orrs	r2, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006d6c:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d6e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006d72:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006d74:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006d7a:	4934      	ldr	r1, [pc, #208]	; (8006e4c <HAL_SAI_Init+0x2ec>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d7c:	4302      	orrs	r2, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006d7e:	428b      	cmp	r3, r1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d80:	60da      	str	r2, [r3, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006d82:	d025      	beq.n	8006dd0 <HAL_SAI_Init+0x270>
 8006d84:	4a32      	ldr	r2, [pc, #200]	; (8006e50 <HAL_SAI_Init+0x2f0>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d022      	beq.n	8006dd0 <HAL_SAI_Init+0x270>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006d8a:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8006d8c:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006d8e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 8006d92:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 8006d94:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8006d98:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8006d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (hsai->State == HAL_SAI_STATE_RESET)
 8006da0:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
    SaiBaseAddress = SAI4;
 8006da4:	4e33      	ldr	r6, [pc, #204]	; (8006e74 <HAL_SAI_Init+0x314>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8006da6:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	f47f aefd 	bne.w	8006baa <HAL_SAI_Init+0x4a>
    HAL_SAI_MspInit(hsai);
 8006db0:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
 8006db2:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8006db6:	f7fa fd07 	bl	80017c8 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	e6f5      	b.n	8006baa <HAL_SAI_Init+0x4a>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8006dbe:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006dc0:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006dc4:	e71d      	b.n	8006c02 <HAL_SAI_Init+0xa2>
  switch (hsai->Init.SynchroExt)
 8006dc6:	2013      	movs	r0, #19
 8006dc8:	2210      	movs	r2, #16
 8006dca:	e70d      	b.n	8006be8 <HAL_SAI_Init+0x88>
    return HAL_ERROR;
 8006dcc:	2001      	movs	r0, #1
}
 8006dce:	4770      	bx	lr
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006dd0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8006dd2:	f023 0301 	bic.w	r3, r3, #1
 8006dd6:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006dd8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d1d4      	bne.n	8006d8a <HAL_SAI_Init+0x22a>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006de0:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006de4:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006de6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006dea:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8006dec:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8006dee:	f043 0301 	orr.w	r3, r3, #1
 8006df2:	6473      	str	r3, [r6, #68]	; 0x44
 8006df4:	e7c9      	b.n	8006d8a <HAL_SAI_Init+0x22a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006df6:	f1a1 0101 	sub.w	r1, r1, #1
 8006dfa:	fab1 f181 	clz	r1, r1
 8006dfe:	0949      	lsrs	r1, r1, #5
 8006e00:	ea4f 2941 	mov.w	r9, r1, lsl #9
 8006e04:	e769      	b.n	8006cda <HAL_SAI_Init+0x17a>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006e06:	6c67      	ldr	r7, [r4, #68]	; 0x44
 8006e08:	2f04      	cmp	r7, #4
 8006e0a:	d03d      	beq.n	8006e88 <HAL_SAI_Init+0x328>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006e0c:	2f08      	cmp	r7, #8
 8006e0e:	d03f      	beq.n	8006e90 <HAL_SAI_Init+0x330>
        tmpframelength = hsai->FrameInit.FrameLength;
 8006e10:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006e12:	4696      	mov	lr, r2
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006e14:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006e18:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8006e1c:	6a21      	ldr	r1, [r4, #32]
 8006e1e:	fb01 fc02 	mul.w	ip, r1, r2
 8006e22:	fbb8 f1fc 	udiv	r1, r8, ip
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006e26:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006e2a:	e719      	b.n	8006c60 <HAL_SAI_Init+0x100>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006e32:	f7ff fce7 	bl	8006804 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 8006e36:	6823      	ldr	r3, [r4, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006e38:	4601      	mov	r1, r0
 8006e3a:	e6ee      	b.n	8006c1a <HAL_SAI_Init+0xba>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006e42:	f7ff fcdf 	bl	8006804 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	4601      	mov	r1, r0
 8006e4a:	e6ee      	b.n	8006c2a <HAL_SAI_Init+0xca>
 8006e4c:	40015804 	.word	0x40015804
 8006e50:	58005404 	.word	0x58005404
 8006e54:	40015800 	.word	0x40015800
 8006e58:	240003a4 	.word	0x240003a4
 8006e5c:	95cbec1b 	.word	0x95cbec1b
 8006e60:	58005424 	.word	0x58005424
 8006e64:	cccccccd 	.word	0xcccccccd
 8006e68:	f005c010 	.word	0xf005c010
 8006e6c:	ffff1ff0 	.word	0xffff1ff0
 8006e70:	fff88000 	.word	0xfff88000
 8006e74:	58005400 	.word	0x58005400
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006e78:	2100      	movs	r1, #0
 8006e7a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006e7e:	f7ff fcc1 	bl	8006804 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 8006e82:	6823      	ldr	r3, [r4, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006e84:	4601      	mov	r1, r0
 8006e86:	e6cc      	b.n	8006c22 <HAL_SAI_Init+0xc2>
        tmpframelength = hsai->FrameInit.FrameLength;
 8006e88:	f8d4 e054 	ldr.w	lr, [r4, #84]	; 0x54
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8006e8c:	2240      	movs	r2, #64	; 0x40
 8006e8e:	e7c1      	b.n	8006e14 <HAL_SAI_Init+0x2b4>
        tmpframelength = hsai->FrameInit.FrameLength;
 8006e90:	f8d4 e054 	ldr.w	lr, [r4, #84]	; 0x54
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8006e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e98:	e7bc      	b.n	8006e14 <HAL_SAI_Init+0x2b4>
 8006e9a:	bf00      	nop

08006e9c <HAL_SAI_InitProtocol>:
  switch (protocol)
 8006e9c:	2902      	cmp	r1, #2
{
 8006e9e:	b430      	push	{r4, r5}
  switch (protocol)
 8006ea0:	d928      	bls.n	8006ef4 <HAL_SAI_InitProtocol+0x58>
 8006ea2:	f1a1 0c03 	sub.w	ip, r1, #3
 8006ea6:	f1bc 0f01 	cmp.w	ip, #1
 8006eaa:	d820      	bhi.n	8006eee <HAL_SAI_InitProtocol+0x52>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006eac:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8006eae:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006eb0:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006eb2:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006eb4:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 8006eb6:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006eb8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8006ebc:	6744      	str	r4, [r0, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006ebe:	6844      	ldr	r4, [r0, #4]
 8006ec0:	f034 0402 	bics.w	r4, r4, #2
 8006ec4:	bf0c      	ite	eq
 8006ec6:	2501      	moveq	r5, #1
 8006ec8:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 8006eca:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006ecc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8006ed0:	6505      	str	r5, [r0, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 8006ed2:	bf0c      	ite	eq
 8006ed4:	2401      	moveq	r4, #1
 8006ed6:	240d      	movne	r4, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006ed8:	6601      	str	r1, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006eda:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8006ede:	6584      	str	r4, [r0, #88]	; 0x58
 8006ee0:	6641      	str	r1, [r0, #100]	; 0x64
  switch (datasize)
 8006ee2:	2a03      	cmp	r2, #3
 8006ee4:	d803      	bhi.n	8006eee <HAL_SAI_InitProtocol+0x52>
 8006ee6:	e8df f002 	tbb	[pc, r2]
 8006eea:	382f      	.short	0x382f
 8006eec:	473e      	.short	0x473e
}
 8006eee:	2001      	movs	r0, #1
 8006ef0:	bc30      	pop	{r4, r5}
 8006ef2:	4770      	bx	lr
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006ef4:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8006ef6:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006ef8:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006efa:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 8006efc:	6684      	str	r4, [r0, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006efe:	6844      	ldr	r4, [r0, #4]
 8006f00:	f034 0402 	bics.w	r4, r4, #2
 8006f04:	bf14      	ite	ne
 8006f06:	2401      	movne	r4, #1
 8006f08:	2400      	moveq	r4, #0
 8006f0a:	6504      	str	r4, [r0, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006f0c:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8006f10:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006f12:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8006f16:	6744      	str	r4, [r0, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 8006f18:	f013 0401 	ands.w	r4, r3, #1
 8006f1c:	d1e7      	bne.n	8006eee <HAL_SAI_InitProtocol+0x52>
  if (protocol == SAI_I2S_STANDARD)
 8006f1e:	b949      	cbnz	r1, 8006f34 <HAL_SAI_InitProtocol+0x98>
 8006f20:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8006f24:	e9c0 1418 	strd	r1, r4, [r0, #96]	; 0x60
  switch (datasize)
 8006f28:	2a03      	cmp	r2, #3
 8006f2a:	d8e0      	bhi.n	8006eee <HAL_SAI_InitProtocol+0x52>
 8006f2c:	e8df f002 	tbb	[pc, r2]
 8006f30:	2630404f 	.word	0x2630404f
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006f34:	6644      	str	r4, [r0, #100]	; 0x64
 8006f36:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8006f3a:	6604      	str	r4, [r0, #96]	; 0x60
  switch (datasize)
 8006f3c:	2a03      	cmp	r2, #3
 8006f3e:	d8d6      	bhi.n	8006eee <HAL_SAI_InitProtocol+0x52>
 8006f40:	e8df f002 	tbb	[pc, r2]
 8006f44:	1c263645 	.word	0x1c263645
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f48:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006f4a:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006f4c:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f4e:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006f50:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006f52:	66c2      	str	r2, [r0, #108]	; 0x6c
}
 8006f54:	bc30      	pop	{r4, r5}
    status = HAL_SAI_Init(hsai);
 8006f56:	f7ff be03 	b.w	8006b60 <HAL_SAI_Init>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f5a:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006f5c:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f5e:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006f60:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f62:	66c2      	str	r2, [r0, #108]	; 0x6c
  if (status == HAL_OK)
 8006f64:	e7f6      	b.n	8006f54 <HAL_SAI_InitProtocol+0xb8>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006f66:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006f68:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f6a:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006f6c:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006f6e:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f70:	66c2      	str	r2, [r0, #108]	; 0x6c
}
 8006f72:	bc30      	pop	{r4, r5}
    status = HAL_SAI_Init(hsai);
 8006f74:	f7ff bdf4 	b.w	8006b60 <HAL_SAI_Init>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006f78:	21e0      	movs	r1, #224	; 0xe0
 8006f7a:	e7f5      	b.n	8006f68 <HAL_SAI_InitProtocol+0xcc>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006f7c:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006f7e:	24e0      	movs	r4, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f80:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006f82:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006f84:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006f86:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f88:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006f8a:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006f8e:	e7e1      	b.n	8006f54 <HAL_SAI_InitProtocol+0xb8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006f90:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006f92:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f94:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006f96:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006f98:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006f9c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006f9e:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fa2:	66c5      	str	r5, [r0, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006fa4:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006fa6:	6583      	str	r3, [r0, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006fa8:	d1d4      	bne.n	8006f54 <HAL_SAI_InitProtocol+0xb8>
      hsai->SlotInit.FirstBitOffset = 8;
 8006faa:	2308      	movs	r3, #8
 8006fac:	6683      	str	r3, [r0, #104]	; 0x68
  if (status == HAL_OK)
 8006fae:	e7d1      	b.n	8006f54 <HAL_SAI_InitProtocol+0xb8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006fb0:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006fb2:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006fb4:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006fb6:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006fba:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006fbc:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fc0:	66c2      	str	r2, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006fc2:	e9c0 4315 	strd	r4, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006fc6:	d1c5      	bne.n	8006f54 <HAL_SAI_InitProtocol+0xb8>
      hsai->SlotInit.FirstBitOffset = 16;
 8006fc8:	2310      	movs	r3, #16
 8006fca:	6683      	str	r3, [r0, #104]	; 0x68
  if (status == HAL_OK)
 8006fcc:	e7c2      	b.n	8006f54 <HAL_SAI_InitProtocol+0xb8>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006fce:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006fd0:	2480      	movs	r4, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006fd2:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006fd4:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006fd6:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006fd8:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006fda:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006fdc:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006fe0:	e7b8      	b.n	8006f54 <HAL_SAI_InitProtocol+0xb8>
 8006fe2:	bf00      	nop

08006fe4 <HAL_SAI_Transmit_DMA>:
{
 8006fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe8:	4615      	mov	r5, r2
 8006fea:	f04f 0800 	mov.w	r8, #0
 8006fee:	460f      	mov	r7, r1
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	f365 080f 	bfi	r8, r5, #0, #16
  uint32_t tickstart = HAL_GetTick();
 8006ff6:	f7fa fe9f 	bl	8001d38 <HAL_GetTick>
 8006ffa:	f365 481f 	bfi	r8, r5, #16, #16
  if ((pData == NULL) || (Size == 0U))
 8006ffe:	2f00      	cmp	r7, #0
 8007000:	d05d      	beq.n	80070be <HAL_SAI_Transmit_DMA+0xda>
 8007002:	fab5 f985 	clz	r9, r5
 8007006:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800700a:	2d00      	cmp	r5, #0
 800700c:	d057      	beq.n	80070be <HAL_SAI_Transmit_DMA+0xda>
  if (hsai->State == HAL_SAI_STATE_READY)
 800700e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8007012:	2b01      	cmp	r3, #1
 8007014:	fa5f fa83 	uxtb.w	sl, r3
 8007018:	d14c      	bne.n	80070b4 <HAL_SAI_Transmit_DMA+0xd0>
    __HAL_LOCK(hsai);
 800701a:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800701e:	2b01      	cmp	r3, #1
 8007020:	d048      	beq.n	80070b4 <HAL_SAI_Transmit_DMA+0xd0>
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007022:	462b      	mov	r3, r5
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007024:	2512      	movs	r5, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007026:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
 800702a:	4606      	mov	r6, r0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800702c:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007030:	4639      	mov	r1, r7
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007032:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007036:	4d32      	ldr	r5, [pc, #200]	; (8007100 <HAL_SAI_Transmit_DMA+0x11c>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007038:	6822      	ldr	r2, [r4, #0]
    hsai->XferSize = Size;
 800703a:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
    __HAL_LOCK(hsai);
 800703e:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007042:	321c      	adds	r2, #28
    hsai->pBuffPtr = pData;
 8007044:	67a7      	str	r7, [r4, #120]	; 0x78
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007046:	6405      	str	r5, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007048:	4d2e      	ldr	r5, [pc, #184]	; (8007104 <HAL_SAI_Transmit_DMA+0x120>)
    hsai->hdmatx->XferAbortCallback = NULL;
 800704a:	f8c0 9050 	str.w	r9, [r0, #80]	; 0x50
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800704e:	63c5      	str	r5, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007050:	4d2d      	ldr	r5, [pc, #180]	; (8007108 <HAL_SAI_Transmit_DMA+0x124>)
 8007052:	64c5      	str	r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007054:	f7fb fa62 	bl	800251c <HAL_DMA_Start_IT>
 8007058:	2800      	cmp	r0, #0
 800705a:	d13e      	bne.n	80070da <HAL_SAI_Transmit_DMA+0xf6>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800705c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800705e:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007060:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007062:	d031      	beq.n	80070c8 <HAL_SAI_Transmit_DMA+0xe4>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007064:	2105      	movs	r1, #5
 8007066:	2261      	movs	r2, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007068:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800706a:	2b01      	cmp	r3, #1
 800706c:	bf98      	it	ls
 800706e:	4611      	movls	r1, r2
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007070:	6822      	ldr	r2, [r4, #0]
 8007072:	6913      	ldr	r3, [r2, #16]
 8007074:	430b      	orrs	r3, r1
 8007076:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007078:	6813      	ldr	r3, [r2, #0]
 800707a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800707e:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007080:	e006      	b.n	8007090 <HAL_SAI_Transmit_DMA+0xac>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007082:	f7fa fe59 	bl	8001d38 <HAL_GetTick>
 8007086:	1b83      	subs	r3, r0, r6
 8007088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800708c:	d82a      	bhi.n	80070e4 <HAL_SAI_Transmit_DMA+0x100>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800708e:	6822      	ldr	r2, [r4, #0]
 8007090:	6955      	ldr	r5, [r2, #20]
 8007092:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8007096:	d0f4      	beq.n	8007082 <HAL_SAI_Transmit_DMA+0x9e>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007098:	6813      	ldr	r3, [r2, #0]
 800709a:	03db      	lsls	r3, r3, #15
 800709c:	d403      	bmi.n	80070a6 <HAL_SAI_Transmit_DMA+0xc2>
      __HAL_SAI_ENABLE(hsai);
 800709e:	6813      	ldr	r3, [r2, #0]
 80070a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070a4:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 80070a6:	2300      	movs	r3, #0
    return HAL_OK;
 80070a8:	469a      	mov	sl, r3
    __HAL_UNLOCK(hsai);
 80070aa:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 80070ae:	4650      	mov	r0, sl
 80070b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 80070b4:	f04f 0a02 	mov.w	sl, #2
}
 80070b8:	4650      	mov	r0, sl
 80070ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return  HAL_ERROR;
 80070be:	f04f 0a01 	mov.w	sl, #1
}
 80070c2:	4650      	mov	r0, sl
 80070c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80070c8:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80070cc:	2a01      	cmp	r2, #1
 80070ce:	bf0b      	itete	eq
 80070d0:	2115      	moveq	r1, #21
 80070d2:	2105      	movne	r1, #5
 80070d4:	2271      	moveq	r2, #113	; 0x71
 80070d6:	2261      	movne	r2, #97	; 0x61
 80070d8:	e7c6      	b.n	8007068 <HAL_SAI_Transmit_DMA+0x84>
}
 80070da:	4650      	mov	r0, sl
      __HAL_UNLOCK(hsai);
 80070dc:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
}
 80070e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80070e4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 80070e8:	f04f 0a03 	mov.w	sl, #3
        __HAL_UNLOCK(hsai);
 80070ec:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80070f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 80070f4:	4650      	mov	r0, sl
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80070f6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 80070fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fe:	bf00      	nop
 8007100:	08007241 	.word	0x08007241
 8007104:	080071dd 	.word	0x080071dd
 8007108:	080072c1 	.word	0x080072c1

0800710c <HAL_SAI_Receive_DMA>:
{
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	2500      	movs	r5, #0
 8007110:	f362 050f 	bfi	r5, r2, #0, #16
 8007114:	f362 451f 	bfi	r5, r2, #16, #16
  if ((pData == NULL) || (Size == 0U))
 8007118:	2900      	cmp	r1, #0
 800711a:	d049      	beq.n	80071b0 <HAL_SAI_Receive_DMA+0xa4>
 800711c:	fab2 f682 	clz	r6, r2
 8007120:	4613      	mov	r3, r2
 8007122:	0976      	lsrs	r6, r6, #5
 8007124:	2a00      	cmp	r2, #0
 8007126:	d043      	beq.n	80071b0 <HAL_SAI_Receive_DMA+0xa4>
  if (hsai->State == HAL_SAI_STATE_READY)
 8007128:	f890 2091 	ldrb.w	r2, [r0, #145]	; 0x91
 800712c:	4604      	mov	r4, r0
 800712e:	2a01      	cmp	r2, #1
 8007130:	b2d7      	uxtb	r7, r2
 8007132:	d13a      	bne.n	80071aa <HAL_SAI_Receive_DMA+0x9e>
    __HAL_LOCK(hsai);
 8007134:	f890 2090 	ldrb.w	r2, [r0, #144]	; 0x90
 8007138:	2a01      	cmp	r2, #1
 800713a:	d036      	beq.n	80071aa <HAL_SAI_Receive_DMA+0x9e>
    hsai->XferSize = Size;
 800713c:	67c5      	str	r5, [r0, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800713e:	2522      	movs	r5, #34	; 0x22
    __HAL_LOCK(hsai);
 8007140:	f880 7090 	strb.w	r7, [r0, #144]	; 0x90
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007144:	460a      	mov	r2, r1
    hsai->pBuffPtr = pData;
 8007146:	6781      	str	r1, [r0, #120]	; 0x78
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007148:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800714c:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007150:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007154:	4d1e      	ldr	r5, [pc, #120]	; (80071d0 <HAL_SAI_Receive_DMA+0xc4>)
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007156:	6821      	ldr	r1, [r4, #0]
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007158:	6405      	str	r5, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800715a:	4d1e      	ldr	r5, [pc, #120]	; (80071d4 <HAL_SAI_Receive_DMA+0xc8>)
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800715c:	311c      	adds	r1, #28
    hsai->hdmarx->XferAbortCallback = NULL;
 800715e:	6506      	str	r6, [r0, #80]	; 0x50
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007160:	63c5      	str	r5, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007162:	4d1d      	ldr	r5, [pc, #116]	; (80071d8 <HAL_SAI_Receive_DMA+0xcc>)
 8007164:	64c5      	str	r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007166:	f7fb f9d9 	bl	800251c <HAL_DMA_Start_IT>
 800716a:	bb20      	cbnz	r0, 80071b6 <HAL_SAI_Receive_DMA+0xaa>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800716c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800716e:	6862      	ldr	r2, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007170:	2b08      	cmp	r3, #8
 8007172:	d024      	beq.n	80071be <HAL_SAI_Receive_DMA+0xb2>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007174:	2105      	movs	r1, #5
 8007176:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007178:	6823      	ldr	r3, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800717a:	3a02      	subs	r2, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800717c:	2a01      	cmp	r2, #1
 800717e:	bf98      	it	ls
 8007180:	4601      	movls	r1, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007182:	691a      	ldr	r2, [r3, #16]
 8007184:	430a      	orrs	r2, r1
 8007186:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800718e:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	03d2      	lsls	r2, r2, #15
 8007194:	d403      	bmi.n	800719e <HAL_SAI_Receive_DMA+0x92>
      __HAL_SAI_ENABLE(hsai);
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800719c:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800719e:	2300      	movs	r3, #0
    return HAL_OK;
 80071a0:	461f      	mov	r7, r3
    __HAL_UNLOCK(hsai);
 80071a2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 80071a6:	4638      	mov	r0, r7
 80071a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80071aa:	2702      	movs	r7, #2
}
 80071ac:	4638      	mov	r0, r7
 80071ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 80071b0:	2701      	movs	r7, #1
}
 80071b2:	4638      	mov	r0, r7
 80071b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b6:	4638      	mov	r0, r7
      __HAL_UNLOCK(hsai);
 80071b8:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
}
 80071bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80071be:	f022 0302 	bic.w	r3, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	bf0b      	itete	eq
 80071c6:	2115      	moveq	r1, #21
 80071c8:	2105      	movne	r1, #5
 80071ca:	2071      	moveq	r0, #113	; 0x71
 80071cc:	2061      	movne	r0, #97	; 0x61
 80071ce:	e7d3      	b.n	8007178 <HAL_SAI_Receive_DMA+0x6c>
 80071d0:	080072b1 	.word	0x080072b1
 80071d4:	0800724d 	.word	0x0800724d
 80071d8:	080072c1 	.word	0x080072c1

080071dc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80071dc:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80071de:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80071e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e6:	d01b      	beq.n	8007220 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80071e8:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
 80071ea:	f04f 0c00 	mov.w	ip, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80071ee:	6c41      	ldr	r1, [r0, #68]	; 0x44
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80071f0:	681a      	ldr	r2, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80071f2:	2908      	cmp	r1, #8
    hsai->XferCount = 0;
 80071f4:	f8a0 c07e 	strh.w	ip, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80071f8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80071fc:	601a      	str	r2, [r3, #0]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80071fe:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007200:	d011      	beq.n	8007226 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007202:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 8007206:	f06f 0105 	mvn.w	r1, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800720a:	3a02      	subs	r2, #2
 800720c:	2a01      	cmp	r2, #1
 800720e:	bf98      	it	ls
 8007210:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007212:	691a      	ldr	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007214:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007218:	400a      	ands	r2, r1
 800721a:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800721c:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8007220:	f7f9 fe66 	bl	8000ef0 <HAL_SAI_TxCpltCallback>
#endif
}
 8007224:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007226:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800722a:	2901      	cmp	r1, #1
 800722c:	bf0b      	itete	eq
 800722e:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 8007232:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 8007236:	f06f 0115 	mvneq.w	r1, #21
 800723a:	f06f 0105 	mvnne.w	r1, #5
 800723e:	e7e4      	b.n	800720a <SAI_DMATxCplt+0x2e>

08007240 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8007240:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007242:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 8007244:	f7f9 fe82 	bl	8000f4c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8007248:	bd08      	pop	{r3, pc}
 800724a:	bf00      	nop

0800724c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800724c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800724e:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007250:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007256:	d01b      	beq.n	8007290 <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007258:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
 800725a:	f04f 0c00 	mov.w	ip, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800725e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007260:	681a      	ldr	r2, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007262:	2908      	cmp	r1, #8
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007264:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007268:	601a      	str	r2, [r3, #0]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800726a:	6842      	ldr	r2, [r0, #4]
    hsai->XferCount = 0;
 800726c:	f8a0 c07e 	strh.w	ip, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007270:	d011      	beq.n	8007296 <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007272:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 8007276:	f06f 0105 	mvn.w	r1, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800727a:	3a02      	subs	r2, #2
 800727c:	2a01      	cmp	r2, #1
 800727e:	bf98      	it	ls
 8007280:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007282:	691a      	ldr	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007284:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007288:	400a      	ands	r2, r1
 800728a:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800728c:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8007290:	f7f9 fe88 	bl	8000fa4 <HAL_SAI_RxCpltCallback>
#endif
}
 8007294:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007296:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800729a:	2901      	cmp	r1, #1
 800729c:	bf0b      	itete	eq
 800729e:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 80072a2:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 80072a6:	f06f 0115 	mvneq.w	r1, #21
 80072aa:	f06f 0105 	mvnne.w	r1, #5
 80072ae:	e7e4      	b.n	800727a <SAI_DMARxCplt+0x2e>

080072b0 <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80072b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80072b2:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
 80072b4:	f7f9 feb4 	bl	8001020 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80072b8:	bd08      	pop	{r3, pc}
 80072ba:	bf00      	nop

080072bc <HAL_SAI_ErrorCallback>:
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop

080072c0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80072c0:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072c2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80072c4:	f7fb fe10 	bl	8002ee8 <HAL_DMA_GetError>
 80072c8:	2802      	cmp	r0, #2
 80072ca:	d023      	beq.n	8007314 <SAI_DMAError+0x54>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80072cc:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80072d0:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80072d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80072d6:	4b13      	ldr	r3, [pc, #76]	; (8007324 <SAI_DMAError+0x64>)
 80072d8:	4813      	ldr	r0, [pc, #76]	; (8007328 <SAI_DMAError+0x68>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80072da:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80072de:	681b      	ldr	r3, [r3, #0]
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80072e0:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80072e2:	fba0 0303 	umull	r0, r3, r0, r3
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80072e6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80072ea:	0b1b      	lsrs	r3, r3, #12
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80072ec:	600a      	str	r2, [r1, #0]
  __HAL_SAI_DISABLE(hsai);
 80072ee:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80072f0:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80072f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80072f6:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 80072f8:	b16b      	cbz	r3, 8007316 <SAI_DMAError+0x56>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80072fa:	680a      	ldr	r2, [r1, #0]
    count--;
 80072fc:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80072fe:	03d2      	lsls	r2, r2, #15
 8007300:	d4fa      	bmi.n	80072f8 <SAI_DMAError+0x38>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007302:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007304:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8007306:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 8007308:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 800730c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 8007310:	f7ff ffd4 	bl	80072bc <HAL_SAI_ErrorCallback>
#endif
  }
}
 8007314:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007316:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800731a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800731e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 8007322:	e7ee      	b.n	8007302 <SAI_DMAError+0x42>
 8007324:	240003a4 	.word	0x240003a4
 8007328:	95cbec1b 	.word	0x95cbec1b

0800732c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800732c:	b318      	cbz	r0, 8007376 <HAL_SDRAM_Init+0x4a>
{
 800732e:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007330:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007334:	4604      	mov	r4, r0
 8007336:	460d      	mov	r5, r1
 8007338:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800733c:	b1b3      	cbz	r3, 800736c <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800733e:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007340:	2302      	movs	r3, #2
 8007342:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007346:	f851 0b04 	ldr.w	r0, [r1], #4
 800734a:	f000 fb61 	bl	8007a10 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800734e:	6862      	ldr	r2, [r4, #4]
 8007350:	4629      	mov	r1, r5
 8007352:	6820      	ldr	r0, [r4, #0]
 8007354:	f000 fb9a 	bl	8007a8c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007358:	4a08      	ldr	r2, [pc, #32]	; (800737c <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800735a:	2101      	movs	r1, #1

  return HAL_OK;
 800735c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800735e:	6813      	ldr	r3, [r2, #0]
 8007360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007364:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007366:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800736a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800736c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8007370:	f7f9 f952 	bl	8000618 <HAL_SDRAM_MspInit>
 8007374:	e7e3      	b.n	800733e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8007376:	2001      	movs	r0, #1
}
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	52004000 	.word	0x52004000

08007380 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007380:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007382:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8007386:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007388:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800738a:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800738c:	d004      	beq.n	8007398 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800738e:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 8007392:	2e01      	cmp	r6, #1
 8007394:	d001      	beq.n	800739a <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8007396:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8007398:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800739a:	2302      	movs	r3, #2
 800739c:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800739e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073a0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80073a4:	f000 fbc0 	bl	8007b28 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d003      	beq.n	80073b6 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 80073ae:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 80073b0:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 80073b4:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80073b6:	2305      	movs	r3, #5
  return HAL_OK;
 80073b8:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80073ba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80073be:	bd70      	pop	{r4, r5, r6, pc}

080073c0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80073c0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80073c2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80073c6:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	b2d8      	uxtb	r0, r3
 80073cc:	d005      	beq.n	80073da <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80073ce:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	b2dd      	uxtb	r5, r3
 80073d6:	d001      	beq.n	80073dc <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 80073d8:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80073da:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073dc:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80073de:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073e0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80073e4:	f000 fbb8 	bl	8007b58 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 80073e8:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 80073ea:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 80073ee:	bd38      	pop	{r3, r4, r5, pc}

080073f0 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 80073f0:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80073f2:	492c      	ldr	r1, [pc, #176]	; (80074a4 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 80073f4:	695a      	ldr	r2, [r3, #20]
{
 80073f6:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80073f8:	699c      	ldr	r4, [r3, #24]
 80073fa:	f044 0408 	orr.w	r4, r4, #8
 80073fe:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007400:	699c      	ldr	r4, [r3, #24]
 8007402:	f044 0410 	orr.w	r4, r4, #16
 8007406:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8007408:	681c      	ldr	r4, [r3, #0]
 800740a:	f024 0401 	bic.w	r4, r4, #1
 800740e:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007410:	691c      	ldr	r4, [r3, #16]
 8007412:	4021      	ands	r1, r4
 8007414:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007416:	6899      	ldr	r1, [r3, #8]
 8007418:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 800741c:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800741e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8007422:	2904      	cmp	r1, #4
 8007424:	d001      	beq.n	800742a <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007426:	0691      	lsls	r1, r2, #26
 8007428:	d430      	bmi.n	800748c <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800742a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 800742e:	2903      	cmp	r1, #3
 8007430:	d001      	beq.n	8007436 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007432:	0654      	lsls	r4, r2, #25
 8007434:	d41f      	bmi.n	8007476 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007436:	0591      	lsls	r1, r2, #22
 8007438:	d509      	bpl.n	800744e <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800743a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800743e:	f041 0101 	orr.w	r1, r1, #1
 8007442:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007446:	6999      	ldr	r1, [r3, #24]
 8007448:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800744c:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800744e:	05d2      	lsls	r2, r2, #23
 8007450:	d509      	bpl.n	8007466 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007452:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8007456:	f042 0208 	orr.w	r2, r2, #8
 800745a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800745e:	699a      	ldr	r2, [r3, #24]
 8007460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007464:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007466:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8007468:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800746c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007470:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8007474:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007476:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800747a:	f041 0104 	orr.w	r1, r1, #4
 800747e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007482:	6999      	ldr	r1, [r3, #24]
 8007484:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007488:	6199      	str	r1, [r3, #24]
 800748a:	e7d4      	b.n	8007436 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800748c:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8007490:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007494:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007498:	6999      	ldr	r1, [r3, #24]
 800749a:	f041 0120 	orr.w	r1, r1, #32
 800749e:	6199      	str	r1, [r3, #24]
 80074a0:	e7c3      	b.n	800742a <SPI_CloseTransfer+0x3a>
 80074a2:	bf00      	nop
 80074a4:	fffffc90 	.word	0xfffffc90

080074a8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80074a8:	2800      	cmp	r0, #0
 80074aa:	f000 80c9 	beq.w	8007640 <HAL_SPI_Init+0x198>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80074ae:	4a66      	ldr	r2, [pc, #408]	; (8007648 <HAL_SPI_Init+0x1a0>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074b0:	2100      	movs	r1, #0
{
 80074b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80074b6:	6803      	ldr	r3, [r0, #0]
 80074b8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074ba:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80074bc:	4293      	cmp	r3, r2
 80074be:	d017      	beq.n	80074f0 <HAL_SPI_Init+0x48>
 80074c0:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d013      	beq.n	80074f0 <HAL_SPI_Init+0x48>
 80074c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074cc:	4293      	cmp	r3, r2
 80074ce:	68c2      	ldr	r2, [r0, #12]
 80074d0:	f000 80ae 	beq.w	8007630 <HAL_SPI_Init+0x188>
 80074d4:	2a0f      	cmp	r2, #15
 80074d6:	d808      	bhi.n	80074ea <HAL_SPI_Init+0x42>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80074d8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80074da:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80074de:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 80074e0:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
 80074e2:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80074e6:	2908      	cmp	r1, #8
 80074e8:	d916      	bls.n	8007518 <HAL_SPI_Init+0x70>
    return HAL_ERROR;
 80074ea:	2001      	movs	r0, #1
}
 80074ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80074f0:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80074f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80074f4:	f102 0108 	add.w	r1, r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074f8:	4e53      	ldr	r6, [pc, #332]	; (8007648 <HAL_SPI_Init+0x1a0>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80074fa:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 80074fc:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 80074fe:	fb05 1101 	mla	r1, r5, r1, r1
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007502:	4d52      	ldr	r5, [pc, #328]	; (800764c <HAL_SPI_Init+0x1a4>)
 8007504:	42ab      	cmp	r3, r5
 8007506:	bf18      	it	ne
 8007508:	42b3      	cmpne	r3, r6
 800750a:	d003      	beq.n	8007514 <HAL_SPI_Init+0x6c>
 800750c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007510:	42ab      	cmp	r3, r5
 8007512:	d101      	bne.n	8007518 <HAL_SPI_Init+0x70>
 8007514:	2910      	cmp	r1, #16
 8007516:	d8e8      	bhi.n	80074ea <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007518:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 800751c:	f001 05ff 	and.w	r5, r1, #255	; 0xff
 8007520:	2900      	cmp	r1, #0
 8007522:	d07a      	beq.n	800761a <HAL_SPI_Init+0x172>
 8007524:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8007528:	2102      	movs	r1, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800752a:	69a7      	ldr	r7, [r4, #24]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800752c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 800752e:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007532:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 8007536:	6819      	ldr	r1, [r3, #0]
 8007538:	f021 0101 	bic.w	r1, r1, #1
 800753c:	6019      	str	r1, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800753e:	6899      	ldr	r1, [r3, #8]
 8007540:	f401 1cf8 	and.w	ip, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007544:	6861      	ldr	r1, [r4, #4]
 8007546:	d058      	beq.n	80075fa <HAL_SPI_Init+0x152>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007548:	f411 0980 	ands.w	r9, r1, #4194304	; 0x400000
 800754c:	d001      	beq.n	8007552 <HAL_SPI_Init+0xaa>
 800754e:	2a06      	cmp	r2, #6
 8007550:	d849      	bhi.n	80075e6 <HAL_SPI_Init+0x13e>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007552:	f8d3 e000 	ldr.w	lr, [r3]
 8007556:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 800755a:	f8c3 e000 	str.w	lr, [r3]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800755e:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007560:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007564:	4337      	orrs	r7, r6
 8007566:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007568:	4337      	orrs	r7, r6
 800756a:	6926      	ldr	r6, [r4, #16]
 800756c:	4337      	orrs	r7, r6
 800756e:	6966      	ldr	r6, [r4, #20]
 8007570:	4337      	orrs	r7, r6
 8007572:	6a26      	ldr	r6, [r4, #32]
 8007574:	4337      	orrs	r7, r6
 8007576:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8007578:	4337      	orrs	r7, r6
 800757a:	68a6      	ldr	r6, [r4, #8]
 800757c:	4337      	orrs	r7, r6
 800757e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8007580:	4337      	orrs	r7, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007582:	69e6      	ldr	r6, [r4, #28]
 8007584:	4332      	orrs	r2, r6
 8007586:	4302      	orrs	r2, r0
 8007588:	ea42 020c 	orr.w	r2, r2, ip
 800758c:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800758e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007590:	433a      	orrs	r2, r7
 8007592:	430a      	orrs	r2, r1
 8007594:	432a      	orrs	r2, r5
 8007596:	60da      	str	r2, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007598:	b9b9      	cbnz	r1, 80075ca <HAL_SPI_Init+0x122>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80075a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075a4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80075ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075b0:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075b4:	f022 0201 	bic.w	r2, r2, #1
 80075b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075ba:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80075bc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075be:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80075c2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80075c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075cc:	f022 0201 	bic.w	r2, r2, #1
 80075d0:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80075d2:	f1b9 0f00 	cmp.w	r9, #0
 80075d6:	d0f0      	beq.n	80075ba <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80075dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80075e0:	430a      	orrs	r2, r1
 80075e2:	60da      	str	r2, [r3, #12]
 80075e4:	e7e9      	b.n	80075ba <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80075e6:	f8d3 e000 	ldr.w	lr, [r3]
 80075ea:	6d26      	ldr	r6, [r4, #80]	; 0x50
 80075ec:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 80075f0:	ea4e 0e06 	orr.w	lr, lr, r6
 80075f4:	f8c3 e000 	str.w	lr, [r3]
 80075f8:	e7b1      	b.n	800755e <HAL_SPI_Init+0xb6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80075fa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80075fe:	d006      	beq.n	800760e <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007600:	2900      	cmp	r1, #0
 8007602:	d1a1      	bne.n	8007548 <HAL_SPI_Init+0xa0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007604:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8007608:	d002      	beq.n	8007610 <HAL_SPI_Init+0x168>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800760a:	4689      	mov	r9, r1
 800760c:	e7a1      	b.n	8007552 <HAL_SPI_Init+0xaa>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800760e:	b9cd      	cbnz	r5, 8007644 <HAL_SPI_Init+0x19c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007610:	681e      	ldr	r6, [r3, #0]
 8007612:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 8007616:	601e      	str	r6, [r3, #0]
 8007618:	e796      	b.n	8007548 <HAL_SPI_Init+0xa0>
    HAL_SPI_MspInit(hspi);
 800761a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800761c:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8007620:	f7fa f9b6 	bl	8001990 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8007624:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007626:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007628:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 800762c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800762e:	e77b      	b.n	8007528 <HAL_SPI_Init+0x80>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007630:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8007632:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007636:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8007638:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 800763a:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800763e:	e769      	b.n	8007514 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 8007640:	2001      	movs	r0, #1
}
 8007642:	4770      	bx	lr
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007644:	4689      	mov	r9, r1
 8007646:	e782      	b.n	800754e <HAL_SPI_Init+0xa6>
 8007648:	40013000 	.word	0x40013000
 800764c:	40003800 	.word	0x40003800

08007650 <HAL_SPI_TransmitReceive>:
{
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	4604      	mov	r4, r0
 8007656:	b083      	sub	sp, #12
 8007658:	4693      	mov	fp, r2
 800765a:	468a      	mov	sl, r1
 800765c:	461d      	mov	r5, r3
 800765e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007660:	f8d0 9000 	ldr.w	r9, [r0]
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007664:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
  tickstart = HAL_GetTick();
 8007668:	f7fa fb66 	bl	8001d38 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800766c:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8007670:	2a01      	cmp	r2, #1
 8007672:	d177      	bne.n	8007764 <HAL_SPI_TransmitReceive+0x114>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007674:	f1bb 0f00 	cmp.w	fp, #0
 8007678:	bf18      	it	ne
 800767a:	f1ba 0f00 	cmpne.w	sl, #0
 800767e:	b2d3      	uxtb	r3, r2
 8007680:	d071      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x116>
 8007682:	fab5 f185 	clz	r1, r5
 8007686:	0949      	lsrs	r1, r1, #5
 8007688:	2d00      	cmp	r5, #0
 800768a:	d06c      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x116>
  __HAL_LOCK(hspi);
 800768c:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
 8007690:	2a01      	cmp	r2, #1
 8007692:	d067      	beq.n	8007764 <HAL_SPI_TransmitReceive+0x114>
  SPI_2LINES(hspi);
 8007694:	6822      	ldr	r2, [r4, #0]
 8007696:	4606      	mov	r6, r0
  __HAL_LOCK(hspi);
 8007698:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800769c:	2305      	movs	r3, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800769e:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80076a2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076a6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 80076aa:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
 80076ae:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  SPI_2LINES(hspi);
 80076b2:	68d3      	ldr	r3, [r2, #12]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80076b4:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
  SPI_2LINES(hspi);
 80076b8:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 80076bc:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->TxXferSize  = Size;
 80076c0:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 80076c4:	e9c4 111c 	strd	r1, r1, [r4, #112]	; 0x70
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80076c8:	49ac      	ldr	r1, [pc, #688]	; (800797c <HAL_SPI_TransmitReceive+0x32c>)
  SPI_2LINES(hspi);
 80076ca:	60d3      	str	r3, [r2, #12]
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80076cc:	4bac      	ldr	r3, [pc, #688]	; (8007980 <HAL_SPI_TransmitReceive+0x330>)
 80076ce:	429a      	cmp	r2, r3
 80076d0:	bf18      	it	ne
 80076d2:	428a      	cmpne	r2, r1
 80076d4:	f000 8196 	beq.w	8007a04 <HAL_SPI_TransmitReceive+0x3b4>
 80076d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076dc:	429a      	cmp	r2, r3
 80076de:	f000 8191 	beq.w	8007a04 <HAL_SPI_TransmitReceive+0x3b4>
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80076e2:	2308      	movs	r3, #8
 80076e4:	f04f 0a02 	mov.w	sl, #2
 80076e8:	2104      	movs	r1, #4
 80076ea:	9301      	str	r3, [sp, #4]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80076ec:	6850      	ldr	r0, [r2, #4]
 80076ee:	4ba5      	ldr	r3, [pc, #660]	; (8007984 <HAL_SPI_TransmitReceive+0x334>)
 80076f0:	4003      	ands	r3, r0
 80076f2:	432b      	orrs	r3, r5
 80076f4:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 80076f6:	6813      	ldr	r3, [r2, #0]
 80076f8:	f043 0301 	orr.w	r3, r3, #1
 80076fc:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076fe:	6863      	ldr	r3, [r4, #4]
 8007700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007704:	f000 80f6 	beq.w	80078f4 <HAL_SPI_TransmitReceive+0x2a4>
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007708:	ea4f 1358 	mov.w	r3, r8, lsr #5
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800770c:	68e0      	ldr	r0, [r4, #12]
 800770e:	46a8      	mov	r8, r5
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007710:	3301      	adds	r3, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007712:	280f      	cmp	r0, #15
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007714:	fa1f fb83 	uxth.w	fp, r3
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007718:	d846      	bhi.n	80077a8 <HAL_SPI_TransmitReceive+0x158>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800771a:	2807      	cmp	r0, #7
 800771c:	f240 80c8 	bls.w	80078b0 <HAL_SPI_TransmitReceive+0x260>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007720:	6950      	ldr	r0, [r2, #20]
 8007722:	0780      	lsls	r0, r0, #30
 8007724:	d515      	bpl.n	8007752 <HAL_SPI_TransmitReceive+0x102>
 8007726:	2d00      	cmp	r5, #0
 8007728:	f000 80e9 	beq.w	80078fe <HAL_SPI_TransmitReceive+0x2ae>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800772c:	1868      	adds	r0, r5, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800772e:	4580      	cmp	r8, r0
 8007730:	f080 814a 	bcs.w	80079c8 <HAL_SPI_TransmitReceive+0x378>
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007734:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8007736:	f830 5b02 	ldrh.w	r5, [r0], #2
 800773a:	f8a9 5020 	strh.w	r5, [r9, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800773e:	65e0      	str	r0, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8007740:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
 8007744:	3801      	subs	r0, #1
 8007746:	b280      	uxth	r0, r0
 8007748:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800774c:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8007750:	b2ad      	uxth	r5, r5
      temp_sr_reg = hspi->Instance->SR;
 8007752:	6950      	ldr	r0, [r2, #20]
      if (initial_RxXferCount > 0UL)
 8007754:	f1b8 0f00 	cmp.w	r8, #0
 8007758:	f040 80d6 	bne.w	8007908 <HAL_SPI_TransmitReceive+0x2b8>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800775c:	4628      	mov	r0, r5
 800775e:	2800      	cmp	r0, #0
 8007760:	d1de      	bne.n	8007720 <HAL_SPI_TransmitReceive+0xd0>
 8007762:	e049      	b.n	80077f8 <HAL_SPI_TransmitReceive+0x1a8>
    return HAL_BUSY;
 8007764:	2302      	movs	r3, #2
}
 8007766:	4618      	mov	r0, r3
 8007768:	b003      	add	sp, #12
 800776a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp_sr_reg = hspi->Instance->SR;
 800776e:	6951      	ldr	r1, [r2, #20]
      if (initial_RxXferCount > 0UL)
 8007770:	f1b8 0f00 	cmp.w	r8, #0
 8007774:	d040      	beq.n	80077f8 <HAL_SPI_TransmitReceive+0x1a8>
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007776:	6950      	ldr	r0, [r2, #20]
 8007778:	07c0      	lsls	r0, r0, #31
 800777a:	d403      	bmi.n	8007784 <HAL_SPI_TransmitReceive+0x134>
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800777c:	45c3      	cmp	fp, r8
 800777e:	d950      	bls.n	8007822 <HAL_SPI_TransmitReceive+0x1d2>
 8007780:	0409      	lsls	r1, r1, #16
 8007782:	d54e      	bpl.n	8007822 <HAL_SPI_TransmitReceive+0x1d2>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007784:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hspi->RxXferCount--;
 8007786:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800778a:	6e60      	ldr	r0, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800778c:	3901      	subs	r1, #1
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800778e:	f840 3b04 	str.w	r3, [r0], #4
          hspi->RxXferCount--;
 8007792:	b289      	uxth	r1, r1
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007794:	6660      	str	r0, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8007796:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800779a:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800779e:	fa1f f888 	uxth.w	r8, r8
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80077a2:	ea48 0105 	orr.w	r1, r8, r5
 80077a6:	b339      	cbz	r1, 80077f8 <HAL_SPI_TransmitReceive+0x1a8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80077a8:	6951      	ldr	r1, [r2, #20]
 80077aa:	078b      	lsls	r3, r1, #30
 80077ac:	d513      	bpl.n	80077d6 <HAL_SPI_TransmitReceive+0x186>
 80077ae:	2d00      	cmp	r5, #0
 80077b0:	d0dd      	beq.n	800776e <HAL_SPI_TransmitReceive+0x11e>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80077b2:	eb05 010a 	add.w	r1, r5, sl
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80077b6:	4588      	cmp	r8, r1
 80077b8:	d23d      	bcs.n	8007836 <HAL_SPI_TransmitReceive+0x1e6>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80077ba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80077bc:	f851 0b04 	ldr.w	r0, [r1], #4
 80077c0:	6210      	str	r0, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80077c2:	65e1      	str	r1, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 80077c4:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80077c8:	3901      	subs	r1, #1
 80077ca:	b289      	uxth	r1, r1
 80077cc:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80077d0:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 80077d4:	b2ad      	uxth	r5, r5
      temp_sr_reg = hspi->Instance->SR;
 80077d6:	6951      	ldr	r1, [r2, #20]
      if (initial_RxXferCount > 0UL)
 80077d8:	f1b8 0f00 	cmp.w	r8, #0
 80077dc:	d1cb      	bne.n	8007776 <HAL_SPI_TransmitReceive+0x126>
 80077de:	4629      	mov	r1, r5
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80077e0:	2900      	cmp	r1, #0
 80077e2:	d1e1      	bne.n	80077a8 <HAL_SPI_TransmitReceive+0x158>
 80077e4:	e008      	b.n	80077f8 <HAL_SPI_TransmitReceive+0x1a8>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077e6:	f7fa faa7 	bl	8001d38 <HAL_GetTick>
 80077ea:	1b83      	subs	r3, r0, r6
 80077ec:	429f      	cmp	r7, r3
 80077ee:	d802      	bhi.n	80077f6 <HAL_SPI_TransmitReceive+0x1a6>
 80077f0:	1c7a      	adds	r2, r7, #1
 80077f2:	f040 80ef 	bne.w	80079d4 <HAL_SPI_TransmitReceive+0x384>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80077f6:	6822      	ldr	r2, [r4, #0]
 80077f8:	6953      	ldr	r3, [r2, #20]
 80077fa:	071b      	lsls	r3, r3, #28
 80077fc:	d5f3      	bpl.n	80077e6 <HAL_SPI_TransmitReceive+0x196>
  SPI_CloseTransfer(hspi);
 80077fe:	4620      	mov	r0, r4
 8007800:	f7ff fdf6 	bl	80073f0 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8007804:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 8007806:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 8007808:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800780c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8007810:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    return HAL_BUSY;
 8007814:	1a9b      	subs	r3, r3, r2
 8007816:	bf18      	it	ne
 8007818:	2301      	movne	r3, #1
}
 800781a:	4618      	mov	r0, r3
 800781c:	b003      	add	sp, #12
 800781e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007822:	f7fa fa89 	bl	8001d38 <HAL_GetTick>
 8007826:	1b80      	subs	r0, r0, r6
 8007828:	42b8      	cmp	r0, r7
 800782a:	d302      	bcc.n	8007832 <HAL_SPI_TransmitReceive+0x1e2>
 800782c:	1c7b      	adds	r3, r7, #1
 800782e:	f040 80d8 	bne.w	80079e2 <HAL_SPI_TransmitReceive+0x392>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007832:	6822      	ldr	r2, [r4, #0]
 8007834:	e7b8      	b.n	80077a8 <HAL_SPI_TransmitReceive+0x158>
      temp_sr_reg = hspi->Instance->SR;
 8007836:	6951      	ldr	r1, [r2, #20]
      if (initial_RxXferCount > 0UL)
 8007838:	f1b8 0f00 	cmp.w	r8, #0
 800783c:	d19b      	bne.n	8007776 <HAL_SPI_TransmitReceive+0x126>
 800783e:	e7b3      	b.n	80077a8 <HAL_SPI_TransmitReceive+0x158>
      temp_sr_reg = hspi->Instance->SR;
 8007840:	6951      	ldr	r1, [r2, #20]
      if (initial_RxXferCount > 0UL)
 8007842:	f1b8 0f00 	cmp.w	r8, #0
 8007846:	d0d7      	beq.n	80077f8 <HAL_SPI_TransmitReceive+0x1a8>
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007848:	6950      	ldr	r0, [r2, #20]
 800784a:	07c3      	lsls	r3, r0, #31
 800784c:	d47e      	bmi.n	800794c <HAL_SPI_TransmitReceive+0x2fc>
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800784e:	45c3      	cmp	fp, r8
 8007850:	f240 809a 	bls.w	8007988 <HAL_SPI_TransmitReceive+0x338>
 8007854:	0408      	lsls	r0, r1, #16
 8007856:	f140 8097 	bpl.w	8007988 <HAL_SPI_TransmitReceive+0x338>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800785a:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 800785e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007860:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007862:	6e62      	ldr	r2, [r4, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007864:	6821      	ldr	r1, [r4, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007866:	1c50      	adds	r0, r2, #1
 8007868:	6660      	str	r0, [r4, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800786a:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 800786e:	7051      	strb	r1, [r2, #1]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007870:	6e62      	ldr	r2, [r4, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007872:	6821      	ldr	r1, [r4, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007874:	1c50      	adds	r0, r2, #1
 8007876:	6660      	str	r0, [r4, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007878:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 800787c:	7051      	strb	r1, [r2, #1]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800787e:	6e62      	ldr	r2, [r4, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007880:	6821      	ldr	r1, [r4, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007882:	1c50      	adds	r0, r2, #1
 8007884:	6660      	str	r0, [r4, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007886:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 800788a:	7051      	strb	r1, [r2, #1]
          hspi->RxXferCount -= (uint16_t)4UL;
 800788c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8007890:	3a04      	subs	r2, #4
 8007892:	b292      	uxth	r2, r2
 8007894:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007898:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800789c:	6e62      	ldr	r2, [r4, #100]	; 0x64
          initial_RxXferCount = hspi->RxXferCount;
 800789e:	fa1f f888 	uxth.w	r8, r8
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80078a2:	3201      	adds	r2, #1
 80078a4:	ea48 0105 	orr.w	r1, r8, r5
 80078a8:	6662      	str	r2, [r4, #100]	; 0x64
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80078aa:	6822      	ldr	r2, [r4, #0]
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80078ac:	2900      	cmp	r1, #0
 80078ae:	d0a3      	beq.n	80077f8 <HAL_SPI_TransmitReceive+0x1a8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80078b0:	6951      	ldr	r1, [r2, #20]
 80078b2:	0789      	lsls	r1, r1, #30
 80078b4:	d516      	bpl.n	80078e4 <HAL_SPI_TransmitReceive+0x294>
 80078b6:	2d00      	cmp	r5, #0
 80078b8:	d0c2      	beq.n	8007840 <HAL_SPI_TransmitReceive+0x1f0>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80078ba:	9b01      	ldr	r3, [sp, #4]
 80078bc:	18e9      	adds	r1, r5, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80078be:	4588      	cmp	r8, r1
 80078c0:	d27c      	bcs.n	80079bc <HAL_SPI_TransmitReceive+0x36c>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80078c2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80078c4:	7809      	ldrb	r1, [r1, #0]
 80078c6:	f882 1020 	strb.w	r1, [r2, #32]
        hspi->TxXferCount--;
 80078ca:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80078ce:	3a01      	subs	r2, #1
 80078d0:	b292      	uxth	r2, r2
 80078d2:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80078d6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        initial_TxXferCount = hspi->TxXferCount;
 80078d8:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80078dc:	3201      	adds	r2, #1
        initial_TxXferCount = hspi->TxXferCount;
 80078de:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80078e0:	65e2      	str	r2, [r4, #92]	; 0x5c
      temp_sr_reg = hspi->Instance->SR;
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	6951      	ldr	r1, [r2, #20]
      if (initial_RxXferCount > 0UL)
 80078e6:	f1b8 0f00 	cmp.w	r8, #0
 80078ea:	d1ad      	bne.n	8007848 <HAL_SPI_TransmitReceive+0x1f8>
 80078ec:	4629      	mov	r1, r5
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80078ee:	2900      	cmp	r1, #0
 80078f0:	d1de      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x260>
 80078f2:	e781      	b.n	80077f8 <HAL_SPI_TransmitReceive+0x1a8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80078f4:	6813      	ldr	r3, [r2, #0]
 80078f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	e704      	b.n	8007708 <HAL_SPI_TransmitReceive+0xb8>
      temp_sr_reg = hspi->Instance->SR;
 80078fe:	6950      	ldr	r0, [r2, #20]
      if (initial_RxXferCount > 0UL)
 8007900:	f1b8 0f00 	cmp.w	r8, #0
 8007904:	f43f af78 	beq.w	80077f8 <HAL_SPI_TransmitReceive+0x1a8>
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007908:	6953      	ldr	r3, [r2, #20]
 800790a:	07db      	lsls	r3, r3, #31
 800790c:	d42b      	bmi.n	8007966 <HAL_SPI_TransmitReceive+0x316>
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800790e:	45c3      	cmp	fp, r8
 8007910:	d924      	bls.n	800795c <HAL_SPI_TransmitReceive+0x30c>
 8007912:	0403      	lsls	r3, r0, #16
 8007914:	d522      	bpl.n	800795c <HAL_SPI_TransmitReceive+0x30c>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007916:	f8b9 c030 	ldrh.w	ip, [r9, #48]	; 0x30
 800791a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800791c:	f8a0 c000 	strh.w	ip, [r0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007920:	3004      	adds	r0, #4
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007922:	f8b9 c030 	ldrh.w	ip, [r9, #48]	; 0x30
 8007926:	f820 cc02 	strh.w	ip, [r0, #-2]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800792a:	6660      	str	r0, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800792c:	f8b4 006a 	ldrh.w	r0, [r4, #106]	; 0x6a
 8007930:	3802      	subs	r0, #2
 8007932:	b280      	uxth	r0, r0
 8007934:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007938:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800793c:	fa1f f888 	uxth.w	r8, r8
 8007940:	ea48 0005 	orr.w	r0, r8, r5
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007944:	2800      	cmp	r0, #0
 8007946:	f47f aeeb 	bne.w	8007720 <HAL_SPI_TransmitReceive+0xd0>
 800794a:	e755      	b.n	80077f8 <HAL_SPI_TransmitReceive+0x1a8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800794c:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 8007950:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007952:	7011      	strb	r1, [r2, #0]
          hspi->RxXferCount--;
 8007954:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8007958:	3a01      	subs	r2, #1
 800795a:	e79a      	b.n	8007892 <HAL_SPI_TransmitReceive+0x242>
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800795c:	f1b8 0f01 	cmp.w	r8, #1
 8007960:	d121      	bne.n	80079a6 <HAL_SPI_TransmitReceive+0x356>
 8007962:	0483      	lsls	r3, r0, #18
 8007964:	d51f      	bpl.n	80079a6 <HAL_SPI_TransmitReceive+0x356>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007966:	f8b9 c030 	ldrh.w	ip, [r9, #48]	; 0x30
 800796a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800796c:	f820 cb02 	strh.w	ip, [r0], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007970:	6660      	str	r0, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8007972:	f8b4 006a 	ldrh.w	r0, [r4, #106]	; 0x6a
 8007976:	3801      	subs	r0, #1
 8007978:	e7db      	b.n	8007932 <HAL_SPI_TransmitReceive+0x2e2>
 800797a:	bf00      	nop
 800797c:	40013000 	.word	0x40013000
 8007980:	40003800 	.word	0x40003800
 8007984:	ffff0000 	.word	0xffff0000
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007988:	f1b8 0f03 	cmp.w	r8, #3
 800798c:	d802      	bhi.n	8007994 <HAL_SPI_TransmitReceive+0x344>
 800798e:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
 8007992:	d1db      	bne.n	800794c <HAL_SPI_TransmitReceive+0x2fc>
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007994:	f7fa f9d0 	bl	8001d38 <HAL_GetTick>
 8007998:	1b80      	subs	r0, r0, r6
 800799a:	42b8      	cmp	r0, r7
 800799c:	d301      	bcc.n	80079a2 <HAL_SPI_TransmitReceive+0x352>
 800799e:	1c79      	adds	r1, r7, #1
 80079a0:	d11f      	bne.n	80079e2 <HAL_SPI_TransmitReceive+0x392>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80079a2:	6822      	ldr	r2, [r4, #0]
 80079a4:	e784      	b.n	80078b0 <HAL_SPI_TransmitReceive+0x260>
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079a6:	9101      	str	r1, [sp, #4]
 80079a8:	f7fa f9c6 	bl	8001d38 <HAL_GetTick>
 80079ac:	1b80      	subs	r0, r0, r6
 80079ae:	9901      	ldr	r1, [sp, #4]
 80079b0:	42b8      	cmp	r0, r7
 80079b2:	d301      	bcc.n	80079b8 <HAL_SPI_TransmitReceive+0x368>
 80079b4:	1c78      	adds	r0, r7, #1
 80079b6:	d114      	bne.n	80079e2 <HAL_SPI_TransmitReceive+0x392>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80079b8:	6822      	ldr	r2, [r4, #0]
 80079ba:	e6b1      	b.n	8007720 <HAL_SPI_TransmitReceive+0xd0>
      temp_sr_reg = hspi->Instance->SR;
 80079bc:	6951      	ldr	r1, [r2, #20]
      if (initial_RxXferCount > 0UL)
 80079be:	f1b8 0f00 	cmp.w	r8, #0
 80079c2:	f43f af75 	beq.w	80078b0 <HAL_SPI_TransmitReceive+0x260>
 80079c6:	e73f      	b.n	8007848 <HAL_SPI_TransmitReceive+0x1f8>
      temp_sr_reg = hspi->Instance->SR;
 80079c8:	6950      	ldr	r0, [r2, #20]
      if (initial_RxXferCount > 0UL)
 80079ca:	f1b8 0f00 	cmp.w	r8, #0
 80079ce:	f43f aea7 	beq.w	8007720 <HAL_SPI_TransmitReceive+0xd0>
 80079d2:	e799      	b.n	8007908 <HAL_SPI_TransmitReceive+0x2b8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079d4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80079d8:	f043 0320 	orr.w	r3, r3, #32
 80079dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80079e0:	e70d      	b.n	80077fe <HAL_SPI_TransmitReceive+0x1ae>
            SPI_CloseTransfer(hspi);
 80079e2:	4620      	mov	r0, r4
            __HAL_UNLOCK(hspi);
 80079e4:	2500      	movs	r5, #0
            SPI_CloseTransfer(hspi);
 80079e6:	f7ff fd03 	bl	80073f0 <SPI_CloseTransfer>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079ea:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80079ee:	2101      	movs	r1, #1
            return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
            __HAL_UNLOCK(hspi);
 80079f6:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079fa:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80079fe:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
            return HAL_TIMEOUT;
 8007a02:	e6b0      	b.n	8007766 <HAL_SPI_TransmitReceive+0x116>
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8007a04:	2310      	movs	r3, #16
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8007a06:	f04f 0a04 	mov.w	sl, #4
 8007a0a:	2108      	movs	r1, #8
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	e66d      	b.n	80076ec <HAL_SPI_TransmitReceive+0x9c>

08007a10 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007a10:	680b      	ldr	r3, [r1, #0]
{
 8007a12:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007a14:	b9d3      	cbnz	r3, 8007a4c <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007a16:	6804      	ldr	r4, [r0, #0]
 8007a18:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8007a1c:	684a      	ldr	r2, [r1, #4]
 8007a1e:	4023      	ands	r3, r4
 8007a20:	4313      	orrs	r3, r2
 8007a22:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8007a26:	4323      	orrs	r3, r4
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 8007a2e:	4323      	orrs	r3, r4
 8007a30:	4313      	orrs	r3, r2
 8007a32:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 8007a36:	4323      	orrs	r3, r4
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 8007a3e:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8007a40:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007a44:	4313      	orrs	r3, r2
 8007a46:	6003      	str	r3, [r0, #0]
}
 8007a48:	2000      	movs	r0, #0
 8007a4a:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007a4c:	6802      	ldr	r2, [r0, #0]
 8007a4e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8007a52:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007a56:	4322      	orrs	r2, r4
 8007a58:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8007a5a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007a5e:	4322      	orrs	r2, r4
 8007a60:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007a62:	6842      	ldr	r2, [r0, #4]
 8007a64:	4013      	ands	r3, r2
 8007a66:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8007a6a:	4323      	orrs	r3, r4
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 8007a72:	4323      	orrs	r3, r4
 8007a74:	4313      	orrs	r3, r2
 8007a76:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 8007a7a:	4323      	orrs	r3, r4
}
 8007a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007a80:	4313      	orrs	r3, r2
 8007a82:	6043      	str	r3, [r0, #4]
}
 8007a84:	2000      	movs	r0, #0
 8007a86:	4770      	bx	lr
 8007a88:	ffff8000 	.word	0xffff8000

08007a8c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007a8c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007a8e:	bb0a      	cbnz	r2, 8007ad4 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007a90:	6883      	ldr	r3, [r0, #8]
 8007a92:	e9d1 2400 	ldrd	r2, r4, [r1]
 8007a96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007a9a:	3c01      	subs	r4, #1
 8007a9c:	3a01      	subs	r2, #1
 8007a9e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8007aa8:	3c01      	subs	r4, #1
 8007aaa:	3a01      	subs	r2, #1
 8007aac:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8007ab0:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 8007ab4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007ab8:	698a      	ldr	r2, [r1, #24]
 8007aba:	3d01      	subs	r5, #1
 8007abc:	1e61      	subs	r1, r4, #1
 8007abe:	3a01      	subs	r2, #1
 8007ac0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8007ac4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8007ac8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8007acc:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007ace:	6083      	str	r3, [r0, #8]
}
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007ad4:	6885      	ldr	r5, [r0, #8]
 8007ad6:	68ca      	ldr	r2, [r1, #12]
 8007ad8:	4b12      	ldr	r3, [pc, #72]	; (8007b24 <FMC_SDRAM_Timing_Init+0x98>)
 8007ada:	1e54      	subs	r4, r2, #1
 8007adc:	694a      	ldr	r2, [r1, #20]
 8007ade:	402b      	ands	r3, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007ae0:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007ae2:	3a01      	subs	r2, #1
 8007ae4:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007ae8:	f105 3cff 	add.w	ip, r5, #4294967295
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007aec:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007af0:	e9d1 2400 	ldrd	r2, r4, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007af4:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007af6:	68c3      	ldr	r3, [r0, #12]
 8007af8:	3c01      	subs	r4, #1
 8007afa:	3a01      	subs	r2, #1
 8007afc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b00:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8007b04:	690c      	ldr	r4, [r1, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	698a      	ldr	r2, [r1, #24]
 8007b0a:	1e61      	subs	r1, r4, #1
 8007b0c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007b10:	3a01      	subs	r2, #1
 8007b12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007b16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
}
 8007b1a:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007b1c:	60c3      	str	r3, [r0, #12]
}
 8007b1e:	2000      	movs	r0, #0
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	ff0f0fff 	.word	0xff0f0fff

08007b28 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007b28:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007b2a:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 8007b2e:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007b30:	6900      	ldr	r0, [r0, #16]
 8007b32:	4323      	orrs	r3, r4
 8007b34:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 8007b38:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8007b3c:	4c05      	ldr	r4, [pc, #20]	; (8007b54 <FMC_SDRAM_SendCommand+0x2c>)
 8007b3e:	3901      	subs	r1, #1
 8007b40:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8007b42:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007b44:	4323      	orrs	r3, r4
}
 8007b46:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007b4a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8007b4e:	6113      	str	r3, [r2, #16]
}
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	ffc00000 	.word	0xffc00000

08007b58 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007b58:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007b5a:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 8007b5c:	2000      	movs	r0, #0
{
 8007b5e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007b60:	6954      	ldr	r4, [r2, #20]
 8007b62:	4023      	ands	r3, r4
}
 8007b64:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007b68:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8007b6c:	6151      	str	r1, [r2, #20]
}
 8007b6e:	4770      	bx	lr
 8007b70:	ffffc001 	.word	0xffffc001

08007b74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b74:	b084      	sub	sp, #16
 8007b76:	b082      	sub	sp, #8
 8007b78:	f10d 0c0c 	add.w	ip, sp, #12
 8007b7c:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b80:	f89d 2011 	ldrb.w	r2, [sp, #17]
{
 8007b84:	4603      	mov	r3, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b86:	2a01      	cmp	r2, #1
 8007b88:	d135      	bne.n	8007bf6 <USB_CoreInit+0x82>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b8a:	6b81      	ldr	r1, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b8c:	f1a2 1242 	sub.w	r2, r2, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8007b90:	f89d 0018 	ldrb.w	r0, [sp, #24]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b94:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8007b98:	2801      	cmp	r0, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b9a:	6399      	str	r1, [r3, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b9c:	68d9      	ldr	r1, [r3, #12]
 8007b9e:	ea02 0201 	and.w	r2, r2, r1
 8007ba2:	60da      	str	r2, [r3, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007baa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007bac:	d068      	beq.n	8007c80 <USB_CoreInit+0x10c>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 8007bae:	2200      	movs	r2, #0
 8007bb0:	9200      	str	r2, [sp, #0]
 8007bb2:	e002      	b.n	8007bba <USB_CoreInit+0x46>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bb4:	691a      	ldr	r2, [r3, #16]
 8007bb6:	2a00      	cmp	r2, #0
 8007bb8:	db37      	blt.n	8007c2a <USB_CoreInit+0xb6>
    count++;
 8007bba:	9a00      	ldr	r2, [sp, #0]
 8007bbc:	3201      	adds	r2, #1
 8007bbe:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8007bc0:	9a00      	ldr	r2, [sp, #0]
 8007bc2:	f1b2 6f70 	cmp.w	r2, #251658240	; 0xf000000
 8007bc6:	d9f5      	bls.n	8007bb4 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 8007bc8:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 8007bca:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8007bce:	2a01      	cmp	r2, #1
 8007bd0:	d10e      	bne.n	8007bf0 <USB_CoreInit+0x7c>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007bd2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007bd4:	4a2d      	ldr	r2, [pc, #180]	; (8007c8c <USB_CoreInit+0x118>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007bd6:	b289      	uxth	r1, r1
 8007bd8:	65d9      	str	r1, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007bda:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007be0:	689a      	ldr	r2, [r3, #8]
 8007be2:	f042 0206 	orr.w	r2, r2, #6
 8007be6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	f042 0220 	orr.w	r2, r2, #32
 8007bee:	609a      	str	r2, [r3, #8]
}
 8007bf0:	b002      	add	sp, #8
 8007bf2:	b004      	add	sp, #16
 8007bf4:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007bf6:	68c2      	ldr	r2, [r0, #12]
  __IO uint32_t count = 0U;
 8007bf8:	2100      	movs	r1, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bfe:	60c2      	str	r2, [r0, #12]
  __IO uint32_t count = 0U;
 8007c00:	9101      	str	r1, [sp, #4]
 8007c02:	e002      	b.n	8007c0a <USB_CoreInit+0x96>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c04:	691a      	ldr	r2, [r3, #16]
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	db27      	blt.n	8007c5a <USB_CoreInit+0xe6>
    count++;
 8007c0a:	9a01      	ldr	r2, [sp, #4]
 8007c0c:	3201      	adds	r2, #1
 8007c0e:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8007c10:	9a01      	ldr	r2, [sp, #4]
 8007c12:	f1b2 6f70 	cmp.w	r2, #251658240	; 0xf000000
 8007c16:	d9f5      	bls.n	8007c04 <USB_CoreInit+0x90>
      return HAL_TIMEOUT;
 8007c18:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 8007c1a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8007c1e:	b9ba      	cbnz	r2, 8007c50 <USB_CoreInit+0xdc>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38
 8007c28:	e7cf      	b.n	8007bca <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c2e:	691a      	ldr	r2, [r3, #16]
 8007c30:	f042 0201 	orr.w	r2, r2, #1
 8007c34:	611a      	str	r2, [r3, #16]
 8007c36:	e003      	b.n	8007c40 <USB_CoreInit+0xcc>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c38:	6918      	ldr	r0, [r3, #16]
 8007c3a:	f010 0001 	ands.w	r0, r0, #1
 8007c3e:	d0c4      	beq.n	8007bca <USB_CoreInit+0x56>
    count++;
 8007c40:	9a00      	ldr	r2, [sp, #0]
 8007c42:	3201      	adds	r2, #1
 8007c44:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8007c46:	9a00      	ldr	r2, [sp, #0]
 8007c48:	f1b2 6f70 	cmp.w	r2, #251658240	; 0xf000000
 8007c4c:	d9f4      	bls.n	8007c38 <USB_CoreInit+0xc4>
 8007c4e:	e7bb      	b.n	8007bc8 <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c56:	639a      	str	r2, [r3, #56]	; 0x38
 8007c58:	e7b7      	b.n	8007bca <USB_CoreInit+0x56>
  count = 0U;
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	f042 0201 	orr.w	r2, r2, #1
 8007c64:	611a      	str	r2, [r3, #16]
 8007c66:	e003      	b.n	8007c70 <USB_CoreInit+0xfc>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c68:	6918      	ldr	r0, [r3, #16]
 8007c6a:	f010 0001 	ands.w	r0, r0, #1
 8007c6e:	d0d4      	beq.n	8007c1a <USB_CoreInit+0xa6>
    count++;
 8007c70:	9a01      	ldr	r2, [sp, #4]
 8007c72:	3201      	adds	r2, #1
 8007c74:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8007c76:	9a01      	ldr	r2, [sp, #4]
 8007c78:	f1b2 6f70 	cmp.w	r2, #251658240	; 0xf000000
 8007c7c:	d9f4      	bls.n	8007c68 <USB_CoreInit+0xf4>
 8007c7e:	e7cb      	b.n	8007c18 <USB_CoreInit+0xa4>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c86:	60da      	str	r2, [r3, #12]
 8007c88:	e791      	b.n	8007bae <USB_CoreInit+0x3a>
 8007c8a:	bf00      	nop
 8007c8c:	03ee0000 	.word	0x03ee0000

08007c90 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8007c90:	2a02      	cmp	r2, #2
{
 8007c92:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8007c94:	d00a      	beq.n	8007cac <USB_SetTurnaroundTime+0x1c>
 8007c96:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c9a:	68da      	ldr	r2, [r3, #12]
}
 8007c9c:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c9e:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8007ca2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	60da      	str	r2, [r3, #12]
}
 8007caa:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007cac:	4a23      	ldr	r2, [pc, #140]	; (8007d3c <USB_SetTurnaroundTime+0xac>)
 8007cae:	4824      	ldr	r0, [pc, #144]	; (8007d40 <USB_SetTurnaroundTime+0xb0>)
 8007cb0:	440a      	add	r2, r1
 8007cb2:	4282      	cmp	r2, r0
 8007cb4:	d92c      	bls.n	8007d10 <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007cb6:	4a23      	ldr	r2, [pc, #140]	; (8007d44 <USB_SetTurnaroundTime+0xb4>)
 8007cb8:	4823      	ldr	r0, [pc, #140]	; (8007d48 <USB_SetTurnaroundTime+0xb8>)
 8007cba:	440a      	add	r2, r1
 8007cbc:	4282      	cmp	r2, r0
 8007cbe:	d92a      	bls.n	8007d16 <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007cc0:	4a22      	ldr	r2, [pc, #136]	; (8007d4c <USB_SetTurnaroundTime+0xbc>)
 8007cc2:	4823      	ldr	r0, [pc, #140]	; (8007d50 <USB_SetTurnaroundTime+0xc0>)
 8007cc4:	440a      	add	r2, r1
 8007cc6:	4282      	cmp	r2, r0
 8007cc8:	d928      	bls.n	8007d1c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007cca:	4a22      	ldr	r2, [pc, #136]	; (8007d54 <USB_SetTurnaroundTime+0xc4>)
 8007ccc:	4822      	ldr	r0, [pc, #136]	; (8007d58 <USB_SetTurnaroundTime+0xc8>)
 8007cce:	440a      	add	r2, r1
 8007cd0:	4282      	cmp	r2, r0
 8007cd2:	d326      	bcc.n	8007d22 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007cd4:	4a21      	ldr	r2, [pc, #132]	; (8007d5c <USB_SetTurnaroundTime+0xcc>)
 8007cd6:	4822      	ldr	r0, [pc, #136]	; (8007d60 <USB_SetTurnaroundTime+0xd0>)
 8007cd8:	440a      	add	r2, r1
 8007cda:	4282      	cmp	r2, r0
 8007cdc:	d924      	bls.n	8007d28 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007cde:	4a21      	ldr	r2, [pc, #132]	; (8007d64 <USB_SetTurnaroundTime+0xd4>)
 8007ce0:	4821      	ldr	r0, [pc, #132]	; (8007d68 <USB_SetTurnaroundTime+0xd8>)
 8007ce2:	440a      	add	r2, r1
 8007ce4:	4282      	cmp	r2, r0
 8007ce6:	d322      	bcc.n	8007d2e <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ce8:	4a20      	ldr	r2, [pc, #128]	; (8007d6c <USB_SetTurnaroundTime+0xdc>)
 8007cea:	4821      	ldr	r0, [pc, #132]	; (8007d70 <USB_SetTurnaroundTime+0xe0>)
 8007cec:	440a      	add	r2, r1
 8007cee:	4282      	cmp	r2, r0
 8007cf0:	d3d1      	bcc.n	8007c96 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007cf2:	4a20      	ldr	r2, [pc, #128]	; (8007d74 <USB_SetTurnaroundTime+0xe4>)
 8007cf4:	4820      	ldr	r0, [pc, #128]	; (8007d78 <USB_SetTurnaroundTime+0xe8>)
 8007cf6:	440a      	add	r2, r1
 8007cf8:	4282      	cmp	r2, r0
 8007cfa:	d31b      	bcc.n	8007d34 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007cfc:	4a1f      	ldr	r2, [pc, #124]	; (8007d7c <USB_SetTurnaroundTime+0xec>)
 8007cfe:	4820      	ldr	r0, [pc, #128]	; (8007d80 <USB_SetTurnaroundTime+0xf0>)
 8007d00:	440a      	add	r2, r1
 8007d02:	4282      	cmp	r2, r0
 8007d04:	bf34      	ite	cc
 8007d06:	f44f 51e0 	movcc.w	r1, #7168	; 0x1c00
 8007d0a:	f44f 51c0 	movcs.w	r1, #6144	; 0x1800
 8007d0e:	e7c4      	b.n	8007c9a <USB_SetTurnaroundTime+0xa>
 8007d10:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8007d14:	e7c1      	b.n	8007c9a <USB_SetTurnaroundTime+0xa>
 8007d16:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8007d1a:	e7be      	b.n	8007c9a <USB_SetTurnaroundTime+0xa>
 8007d1c:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 8007d20:	e7bb      	b.n	8007c9a <USB_SetTurnaroundTime+0xa>
 8007d22:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8007d26:	e7b8      	b.n	8007c9a <USB_SetTurnaroundTime+0xa>
 8007d28:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8007d2c:	e7b5      	b.n	8007c9a <USB_SetTurnaroundTime+0xa>
 8007d2e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8007d32:	e7b2      	b.n	8007c9a <USB_SetTurnaroundTime+0xa>
 8007d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007d38:	e7af      	b.n	8007c9a <USB_SetTurnaroundTime+0xa>
 8007d3a:	bf00      	nop
 8007d3c:	ff275340 	.word	0xff275340
 8007d40:	000c34ff 	.word	0x000c34ff
 8007d44:	ff1b1e40 	.word	0xff1b1e40
 8007d48:	000f423f 	.word	0x000f423f
 8007d4c:	ff0bdc00 	.word	0xff0bdc00
 8007d50:	00124f7f 	.word	0x00124f7f
 8007d54:	fef98c80 	.word	0xfef98c80
 8007d58:	0013d620 	.word	0x0013d620
 8007d5c:	fee5b660 	.word	0xfee5b660
 8007d60:	0016e35f 	.word	0x0016e35f
 8007d64:	feced300 	.word	0xfeced300
 8007d68:	001b7740 	.word	0x001b7740
 8007d6c:	feb35bc0 	.word	0xfeb35bc0
 8007d70:	002191c0 	.word	0x002191c0
 8007d74:	fe91ca00 	.word	0xfe91ca00
 8007d78:	00387520 	.word	0x00387520
 8007d7c:	fe5954e0 	.word	0xfe5954e0
 8007d80:	00419ce0 	.word	0x00419ce0

08007d84 <USB_EnableGlobalInt>:
{
 8007d84:	4603      	mov	r3, r0
}
 8007d86:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	f042 0201 	orr.w	r2, r2, #1
 8007d8e:	609a      	str	r2, [r3, #8]
}
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop

08007d94 <USB_DisableGlobalInt>:
{
 8007d94:	4603      	mov	r3, r0
}
 8007d96:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d98:	689a      	ldr	r2, [r3, #8]
 8007d9a:	f022 0201 	bic.w	r2, r2, #1
 8007d9e:	609a      	str	r2, [r3, #8]
}
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop

08007da4 <USB_SetCurrentMode>:
{
 8007da4:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007da6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007da8:	2901      	cmp	r1, #1
{
 8007daa:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007dac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007db0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007db2:	d017      	beq.n	8007de4 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8007db4:	b9a1      	cbnz	r1, 8007de0 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007db6:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8007db8:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dbe:	60c3      	str	r3, [r0, #12]
 8007dc0:	e001      	b.n	8007dc6 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007dc2:	2cc8      	cmp	r4, #200	; 0xc8
 8007dc4:	d00c      	beq.n	8007de0 <USB_SetCurrentMode+0x3c>
      HAL_Delay(10U);
 8007dc6:	200a      	movs	r0, #10
      ms += 10U;
 8007dc8:	4404      	add	r4, r0
      HAL_Delay(10U);
 8007dca:	f7f9 ffbb 	bl	8001d44 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8007dce:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007dd0:	07db      	lsls	r3, r3, #31
 8007dd2:	d4f6      	bmi.n	8007dc2 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8007dd4:	f1a4 00c8 	sub.w	r0, r4, #200	; 0xc8
 8007dd8:	fab0 f080 	clz	r0, r0
 8007ddc:	0940      	lsrs	r0, r0, #5
}
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007de0:	2001      	movs	r0, #1
}
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007de4:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8007de6:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007de8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dec:	60c3      	str	r3, [r0, #12]
 8007dee:	e001      	b.n	8007df4 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007df0:	2cc8      	cmp	r4, #200	; 0xc8
 8007df2:	d0f5      	beq.n	8007de0 <USB_SetCurrentMode+0x3c>
      HAL_Delay(10U);
 8007df4:	200a      	movs	r0, #10
      ms += 10U;
 8007df6:	4404      	add	r4, r0
      HAL_Delay(10U);
 8007df8:	f7f9 ffa4 	bl	8001d44 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8007dfc:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007dfe:	07da      	lsls	r2, r3, #31
 8007e00:	d5f6      	bpl.n	8007df0 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 8007e02:	f1a4 00c8 	sub.w	r0, r4, #200	; 0xc8
 8007e06:	fab0 f080 	clz	r0, r0
 8007e0a:	0940      	lsrs	r0, r0, #5
 8007e0c:	e7e7      	b.n	8007dde <USB_SetCurrentMode+0x3a>
 8007e0e:	bf00      	nop

08007e10 <USB_DevInit>:
{
 8007e10:	b084      	sub	sp, #16
 8007e12:	4684      	mov	ip, r0
 8007e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	ac0b      	add	r4, sp, #44	; 0x2c
 8007e1c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	f89d 4036 	ldrb.w	r4, [sp, #54]	; 0x36
 8007e26:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8007e2a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8007e2e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8007e32:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8007e36:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8007e3a:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8007e3e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8007e42:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 8007e46:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8007e4a:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8007e4e:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8007e52:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 8007e56:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 8007e5a:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 8007e5e:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 8007e62:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8007e66:	2c00      	cmp	r4, #0
 8007e68:	f040 80b3 	bne.w	8007fd2 <USB_DevInit+0x1c2>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e6c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007e70:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8007e74:	f043 0302 	orr.w	r3, r3, #2
 8007e78:	f8ce 3004 	str.w	r3, [lr, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007e7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e82:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e84:	6803      	ldr	r3, [r0, #0]
 8007e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e8a:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e8c:	6803      	ldr	r3, [r0, #0]
 8007e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e92:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	f8cc 3e00 	str.w	r3, [ip, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e9a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	f000 80a5 	beq.w	8007fee <USB_DevInit+0x1de>
  USBx_DEVICE->DCFG |= speed;
 8007ea4:	f8de 3000 	ldr.w	r3, [lr]
 8007ea8:	f043 0303 	orr.w	r3, r3, #3
 8007eac:	f8ce 3000 	str.w	r3, [lr]
  __IO uint32_t count = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	e004      	b.n	8007ec0 <USB_DevInit+0xb0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eb6:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f2c0 80b2 	blt.w	8008024 <USB_DevInit+0x214>
    count++;
 8007ec0:	9b00      	ldr	r3, [sp, #0]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	9300      	str	r3, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8007ec6:	9b00      	ldr	r3, [sp, #0]
 8007ec8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007ecc:	d9f3      	bls.n	8007eb6 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8007ece:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	e004      	b.n	8007ee0 <USB_DevInit+0xd0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ed6:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f2c0 808f 	blt.w	8007ffe <USB_DevInit+0x1ee>
    count++;
 8007ee0:	9b01      	ldr	r3, [sp, #4]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007eec:	d9f3      	bls.n	8007ed6 <USB_DevInit+0xc6>
    ret = HAL_ERROR;
 8007eee:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8ce 2010 	str.w	r2, [lr, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ef6:	f8ce 2014 	str.w	r2, [lr, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007efa:	f8ce 201c 	str.w	r2, [lr, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007efe:	b1d1      	cbz	r1, 8007f36 <USB_DevInit+0x126>
 8007f00:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f04:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f08:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f0c:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f0e:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 8007f12:	e006      	b.n	8007f22 <USB_DevInit+0x112>
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f14:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f16:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f18:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f1a:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f1c:	3320      	adds	r3, #32
 8007f1e:	428a      	cmp	r2, r1
 8007f20:	d03b      	beq.n	8007f9a <USB_DevInit+0x18a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f22:	681d      	ldr	r5, [r3, #0]
 8007f24:	2d00      	cmp	r5, #0
 8007f26:	daf5      	bge.n	8007f14 <USB_DevInit+0x104>
      if (i == 0U)
 8007f28:	b912      	cbnz	r2, 8007f30 <USB_DevInit+0x120>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f2a:	f8c3 8000 	str.w	r8, [r3]
 8007f2e:	e7f2      	b.n	8007f16 <USB_DevInit+0x106>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f30:	f8c3 9000 	str.w	r9, [r3]
 8007f34:	e7ef      	b.n	8007f16 <USB_DevInit+0x106>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f36:	f8de 3010 	ldr.w	r3, [lr, #16]
  USBx->GINTMSK = 0U;
 8007f3a:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f40:	f8ce 3010 	str.w	r3, [lr, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f44:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8007f48:	f8cc 2018 	str.w	r2, [ip, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f4c:	f8cc 3014 	str.w	r3, [ip, #20]
  if (cfg.dma_enable == 0U)
 8007f50:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8007f54:	b92b      	cbnz	r3, 8007f62 <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f56:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8007f5a:	f043 0310 	orr.w	r3, r3, #16
 8007f5e:	f8cc 3018 	str.w	r3, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f62:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8007f66:	4b3d      	ldr	r3, [pc, #244]	; (800805c <USB_DevInit+0x24c>)
 8007f68:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8007f6a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f6e:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.Sof_enable != 0U)
 8007f72:	b12a      	cbz	r2, 8007f80 <USB_DevInit+0x170>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f74:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8007f78:	f043 0308 	orr.w	r3, r3, #8
 8007f7c:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8007f80:	2c01      	cmp	r4, #1
 8007f82:	d105      	bne.n	8007f90 <USB_DevInit+0x180>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f84:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8007f88:	4b35      	ldr	r3, [pc, #212]	; (8008060 <USB_DevInit+0x250>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	f8cc 3018 	str.w	r3, [ip, #24]
}
 8007f90:	b003      	add	sp, #12
 8007f92:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f96:	b004      	add	sp, #16
 8007f98:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fa0:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fa4:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fa8:	4616      	mov	r6, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007faa:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 8007fae:	e006      	b.n	8007fbe <USB_DevInit+0x1ae>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fb0:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fb2:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fb4:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fb6:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fb8:	3320      	adds	r3, #32
 8007fba:	428a      	cmp	r2, r1
 8007fbc:	d0bb      	beq.n	8007f36 <USB_DevInit+0x126>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fbe:	681d      	ldr	r5, [r3, #0]
 8007fc0:	2d00      	cmp	r5, #0
 8007fc2:	daf5      	bge.n	8007fb0 <USB_DevInit+0x1a0>
      if (i == 0U)
 8007fc4:	b112      	cbz	r2, 8007fcc <USB_DevInit+0x1bc>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fc6:	f8c3 8000 	str.w	r8, [r3]
 8007fca:	e7f2      	b.n	8007fb2 <USB_DevInit+0x1a2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fcc:	f8c3 9000 	str.w	r9, [r3]
 8007fd0:	e7ef      	b.n	8007fb2 <USB_DevInit+0x1a2>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007fd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007fd4:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007fd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fdc:	6383      	str	r3, [r0, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f8cc 3e00 	str.w	r3, [ip, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fe4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	f47f af5b 	bne.w	8007ea4 <USB_DevInit+0x94>
    if (cfg.speed == USBD_HS_SPEED)
 8007fee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8007ff2:	bb63      	cbnz	r3, 800804e <USB_DevInit+0x23e>
  USBx_DEVICE->DCFG |= speed;
 8007ff4:	f8de 3000 	ldr.w	r3, [lr]
 8007ff8:	f8ce 3000 	str.w	r3, [lr]
  return HAL_OK;
 8007ffc:	e758      	b.n	8007eb0 <USB_DevInit+0xa0>
  count = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008002:	2310      	movs	r3, #16
 8008004:	f8cc 3010 	str.w	r3, [ip, #16]
 8008008:	e004      	b.n	8008014 <USB_DevInit+0x204>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800800a:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800800e:	06db      	lsls	r3, r3, #27
 8008010:	f57f af6e 	bpl.w	8007ef0 <USB_DevInit+0xe0>
    count++;
 8008014:	9b01      	ldr	r3, [sp, #4]
 8008016:	3301      	adds	r3, #1
 8008018:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800801a:	9b01      	ldr	r3, [sp, #4]
 800801c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008020:	d9f3      	bls.n	800800a <USB_DevInit+0x1fa>
 8008022:	e764      	b.n	8007eee <USB_DevInit+0xde>
  count = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008028:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800802c:	f8cc 3010 	str.w	r3, [ip, #16]
 8008030:	e005      	b.n	800803e <USB_DevInit+0x22e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008032:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8008036:	f010 0020 	ands.w	r0, r0, #32
 800803a:	f43f af49 	beq.w	8007ed0 <USB_DevInit+0xc0>
    count++;
 800803e:	9b00      	ldr	r3, [sp, #0]
 8008040:	3301      	adds	r3, #1
 8008042:	9300      	str	r3, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8008044:	9b00      	ldr	r3, [sp, #0]
 8008046:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800804a:	d9f2      	bls.n	8008032 <USB_DevInit+0x222>
 800804c:	e73f      	b.n	8007ece <USB_DevInit+0xbe>
  USBx_DEVICE->DCFG |= speed;
 800804e:	f8de 3000 	ldr.w	r3, [lr]
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	f8ce 3000 	str.w	r3, [lr]
  return HAL_OK;
 800805a:	e729      	b.n	8007eb0 <USB_DevInit+0xa0>
 800805c:	803c3800 	.word	0x803c3800
 8008060:	40000004 	.word	0x40000004

08008064 <USB_FlushTxFifo>:
{
 8008064:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	e002      	b.n	8008072 <USB_FlushTxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800806c:	6903      	ldr	r3, [r0, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	db09      	blt.n	8008086 <USB_FlushTxFifo+0x22>
    count++;
 8008072:	9b01      	ldr	r3, [sp, #4]
 8008074:	3301      	adds	r3, #1
 8008076:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8008078:	9b01      	ldr	r3, [sp, #4]
 800807a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800807e:	d9f5      	bls.n	800806c <USB_FlushTxFifo+0x8>
      return HAL_TIMEOUT;
 8008080:	2003      	movs	r0, #3
}
 8008082:	b002      	add	sp, #8
 8008084:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008086:	0189      	lsls	r1, r1, #6
  count = 0U;
 8008088:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800808a:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800808e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008090:	6101      	str	r1, [r0, #16]
 8008092:	e003      	b.n	800809c <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008094:	6903      	ldr	r3, [r0, #16]
 8008096:	f013 0320 	ands.w	r3, r3, #32
 800809a:	d007      	beq.n	80080ac <USB_FlushTxFifo+0x48>
    count++;
 800809c:	9b01      	ldr	r3, [sp, #4]
 800809e:	3301      	adds	r3, #1
 80080a0:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80080a2:	9b01      	ldr	r3, [sp, #4]
 80080a4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80080a8:	d9f4      	bls.n	8008094 <USB_FlushTxFifo+0x30>
 80080aa:	e7e9      	b.n	8008080 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 80080ac:	4618      	mov	r0, r3
}
 80080ae:	b002      	add	sp, #8
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop

080080b4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80080b4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80080b8:	f013 0006 	ands.w	r0, r3, #6
 80080bc:	d004      	beq.n	80080c8 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 80080be:	f013 0f02 	tst.w	r3, #2
 80080c2:	bf14      	ite	ne
 80080c4:	2002      	movne	r0, #2
 80080c6:	200f      	moveq	r0, #15
}
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop

080080cc <USB_ActivateEndpoint>:
{
 80080cc:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 80080ce:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80080d0:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d020      	beq.n	8008118 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80080d6:	f002 0c0f 	and.w	ip, r2, #15
 80080da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080de:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80080e2:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80080e6:	fa03 f30c 	lsl.w	r3, r3, ip
 80080ea:	4323      	orrs	r3, r4
 80080ec:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80080f0:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80080f4:	041b      	lsls	r3, r3, #16
 80080f6:	d40c      	bmi.n	8008112 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80080f8:	688b      	ldr	r3, [r1, #8]
 80080fa:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 80080fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008102:	7908      	ldrb	r0, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008104:	4914      	ldr	r1, [pc, #80]	; (8008158 <USB_ActivateEndpoint+0x8c>)
 8008106:	4323      	orrs	r3, r4
 8008108:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 800810c:	4319      	orrs	r1, r3
 800810e:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 8008112:	2000      	movs	r0, #0
 8008114:	bc30      	pop	{r4, r5}
 8008116:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008118:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800811c:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008120:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008124:	40ab      	lsls	r3, r5
 8008126:	69e5      	ldr	r5, [r4, #28]
 8008128:	432b      	orrs	r3, r5
 800812a:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800812c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008130:	041c      	lsls	r4, r3, #16
 8008132:	d4ee      	bmi.n	8008112 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008134:	688b      	ldr	r3, [r1, #8]
 8008136:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 800813a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800813e:	790c      	ldrb	r4, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008140:	4905      	ldr	r1, [pc, #20]	; (8008158 <USB_ActivateEndpoint+0x8c>)
 8008142:	432b      	orrs	r3, r5
 8008144:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8008148:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800814c:	4319      	orrs	r1, r3
}
 800814e:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008150:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8008154:	2000      	movs	r0, #0
 8008156:	4770      	bx	lr
 8008158:	10008000 	.word	0x10008000

0800815c <USB_EPStartXfer>:
{
 800815c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8008160:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8008162:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8008164:	2b01      	cmp	r3, #1
 8008166:	d045      	beq.n	80081f4 <USB_EPStartXfer+0x98>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008168:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800816c:	4e9a      	ldr	r6, [pc, #616]	; (80083d8 <USB_EPStartXfer+0x27c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800816e:	4d9b      	ldr	r5, [pc, #620]	; (80083dc <USB_EPStartXfer+0x280>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008170:	f8d3 7b10 	ldr.w	r7, [r3, #2832]	; 0xb10
 8008174:	f503 6c30 	add.w	ip, r3, #2816	; 0xb00
 8008178:	403e      	ands	r6, r7
 800817a:	f8c3 6b10 	str.w	r6, [r3, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800817e:	f8d3 6b10 	ldr.w	r6, [r3, #2832]	; 0xb10
 8008182:	4035      	ands	r5, r6
 8008184:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    if (epnum == 0U)
 8008188:	bb7c      	cbnz	r4, 80081ea <USB_EPStartXfer+0x8e>
      if (ep->xfer_len > 0U)
 800818a:	690c      	ldr	r4, [r1, #16]
 800818c:	2c00      	cmp	r4, #0
 800818e:	f040 8093 	bne.w	80082b8 <USB_EPStartXfer+0x15c>
        if (ep->xfer_len > ep->maxpacket)
 8008192:	688c      	ldr	r4, [r1, #8]
      ep->xfer_size = ep->maxpacket;
 8008194:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008196:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800819a:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800819e:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80081a0:	ea44 0405 	orr.w	r4, r4, r5
 80081a4:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081a8:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80081ac:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80081b0:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 80081b4:	f000 80a1 	beq.w	80082fa <USB_EPStartXfer+0x19e>
    if (ep->type == EP_TYPE_ISOC)
 80081b8:	790a      	ldrb	r2, [r1, #4]
 80081ba:	2a01      	cmp	r2, #1
 80081bc:	d10c      	bne.n	80081d8 <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081be:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 80081c2:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80081c6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80081ca:	bf0c      	ite	eq
 80081cc:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80081d0:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 80081d4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80081d8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
}
 80081dc:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80081de:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80081e2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 80081e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->xfer_len == 0U)
 80081ea:	690c      	ldr	r4, [r1, #16]
 80081ec:	2c00      	cmp	r4, #0
 80081ee:	d166      	bne.n	80082be <USB_EPStartXfer+0x162>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80081f0:	688c      	ldr	r4, [r1, #8]
 80081f2:	e7d0      	b.n	8008196 <USB_EPStartXfer+0x3a>
    if (ep->xfer_len == 0U)
 80081f4:	690b      	ldr	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081f6:	eb00 1644 	add.w	r6, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 80081fa:	bb2b      	cbnz	r3, 8008248 <USB_EPStartXfer+0xec>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081fc:	f8d6 c910 	ldr.w	ip, [r6, #2320]	; 0x910
    if (dma == 1U)
 8008200:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008202:	4f76      	ldr	r7, [pc, #472]	; (80083dc <USB_EPStartXfer+0x280>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008204:	4d74      	ldr	r5, [pc, #464]	; (80083d8 <USB_EPStartXfer+0x27c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008206:	ea0c 0707 	and.w	r7, ip, r7
 800820a:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800820e:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 8008212:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8008216:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800821a:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 800821e:	ea05 0507 	and.w	r5, r5, r7
 8008222:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008226:	f506 6510 	add.w	r5, r6, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800822a:	790f      	ldrb	r7, [r1, #4]
    if (dma == 1U)
 800822c:	f000 80b1 	beq.w	8008392 <USB_EPStartXfer+0x236>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008230:	f8d6 c900 	ldr.w	ip, [r6, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8008234:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008236:	f04c 4c04 	orr.w	ip, ip, #2214592512	; 0x84000000
 800823a:	f8c6 c900 	str.w	ip, [r6, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800823e:	f000 8088 	beq.w	8008352 <USB_EPStartXfer+0x1f6>
}
 8008242:	2000      	movs	r0, #0
 8008244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008248:	f8d6 c910 	ldr.w	ip, [r6, #2320]	; 0x910
 800824c:	4f62      	ldr	r7, [pc, #392]	; (80083d8 <USB_EPStartXfer+0x27c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800824e:	4d63      	ldr	r5, [pc, #396]	; (80083dc <USB_EPStartXfer+0x280>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008250:	ea0c 0707 	and.w	r7, ip, r7
 8008254:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008258:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 800825c:	403d      	ands	r5, r7
 800825e:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008262:	f506 6510 	add.w	r5, r6, #2304	; 0x900
      if (epnum == 0U)
 8008266:	2c00      	cmp	r4, #0
 8008268:	d14e      	bne.n	8008308 <USB_EPStartXfer+0x1ac>
        if (ep->xfer_len > ep->maxpacket)
 800826a:	688f      	ldr	r7, [r1, #8]
 800826c:	42bb      	cmp	r3, r7
 800826e:	f200 80a0 	bhi.w	80083b2 <USB_EPStartXfer+0x256>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008272:	692f      	ldr	r7, [r5, #16]
 8008274:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8008278:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800827a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800827e:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8008282:	ea47 070c 	orr.w	r7, r7, ip
 8008286:	612f      	str	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 8008288:	790f      	ldrb	r7, [r1, #4]
 800828a:	2f01      	cmp	r7, #1
 800828c:	d04d      	beq.n	800832a <USB_EPStartXfer+0x1ce>
    if (dma == 1U)
 800828e:	2a01      	cmp	r2, #1
 8008290:	f000 808a 	beq.w	80083a8 <USB_EPStartXfer+0x24c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008294:	f8d6 2900 	ldr.w	r2, [r6, #2304]	; 0x900
 8008298:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800829c:	f8c6 2900 	str.w	r2, [r6, #2304]	; 0x900
        if (ep->xfer_len > 0U)
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d0ce      	beq.n	8008242 <USB_EPStartXfer+0xe6>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80082a4:	f004 040f 	and.w	r4, r4, #15
 80082a8:	2301      	movs	r3, #1
 80082aa:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80082ae:	40a3      	lsls	r3, r4
 80082b0:	4313      	orrs	r3, r2
 80082b2:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80082b6:	e7c4      	b.n	8008242 <USB_EPStartXfer+0xe6>
        ep->xfer_len = ep->maxpacket;
 80082b8:	688c      	ldr	r4, [r1, #8]
 80082ba:	610c      	str	r4, [r1, #16]
 80082bc:	e76a      	b.n	8008194 <USB_EPStartXfer+0x38>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80082be:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 80082c0:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80082c2:	4e47      	ldr	r6, [pc, #284]	; (80083e0 <USB_EPStartXfer+0x284>)
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80082c4:	442c      	add	r4, r5
 80082c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80082ca:	fbb4 f4f5 	udiv	r4, r4, r5
 80082ce:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
 80082d0:	fb04 f505 	mul.w	r5, r4, r5
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80082d4:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 80082d8:	f8dc 6010 	ldr.w	r6, [ip, #16]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80082dc:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80082de:	f3c5 0512 	ubfx	r5, r5, #0, #19
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80082e2:	ea44 0406 	orr.w	r4, r4, r6
 80082e6:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80082ea:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80082ee:	ea45 0504 	orr.w	r5, r5, r4
 80082f2:	f8cc 5010 	str.w	r5, [ip, #16]
    if (dma == 1U)
 80082f6:	f47f af5f 	bne.w	80081b8 <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 80082fa:	68ca      	ldr	r2, [r1, #12]
 80082fc:	2a00      	cmp	r2, #0
 80082fe:	f43f af5b 	beq.w	80081b8 <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008302:	f8cc 2014 	str.w	r2, [ip, #20]
 8008306:	e757      	b.n	80081b8 <USB_EPStartXfer+0x5c>
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008308:	f8d1 e008 	ldr.w	lr, [r1, #8]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800830c:	4f34      	ldr	r7, [pc, #208]	; (80083e0 <USB_EPStartXfer+0x284>)
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800830e:	eb03 0c0e 	add.w	ip, r3, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008312:	f8d5 8010 	ldr.w	r8, [r5, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008316:	f10c 3cff 	add.w	ip, ip, #4294967295
 800831a:	fbbc fcfe 	udiv	ip, ip, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800831e:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 8008322:	ea47 0708 	orr.w	r7, r7, r8
 8008326:	612f      	str	r7, [r5, #16]
 8008328:	e7a7      	b.n	800827a <USB_EPStartXfer+0x11e>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800832a:	f8d5 c010 	ldr.w	ip, [r5, #16]
    if (dma == 1U)
 800832e:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008330:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 8008334:	f8c5 c010 	str.w	ip, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008338:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800833c:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 8008340:	f8c5 c010 	str.w	ip, [r5, #16]
    if (dma == 1U)
 8008344:	d038      	beq.n	80083b8 <USB_EPStartXfer+0x25c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008346:	f8d6 7900 	ldr.w	r7, [r6, #2304]	; 0x900
 800834a:	f047 4704 	orr.w	r7, r7, #2214592512	; 0x84000000
 800834e:	f8c6 7900 	str.w	r7, [r6, #2304]	; 0x900
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008352:	f8d0 6808 	ldr.w	r6, [r0, #2056]	; 0x808
 8008356:	f416 7f80 	tst.w	r6, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800835a:	682e      	ldr	r6, [r5, #0]
 800835c:	bf0c      	ite	eq
 800835e:	f046 5600 	orreq.w	r6, r6, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008362:	f046 5680 	orrne.w	r6, r6, #268435456	; 0x10000000
 8008366:	602e      	str	r6, [r5, #0]
  if (dma == 0U)
 8008368:	2a00      	cmp	r2, #0
 800836a:	f47f af6a 	bne.w	8008242 <USB_EPStartXfer+0xe6>
    count32b = ((uint32_t)len + 3U) / 4U;
 800836e:	b29b      	uxth	r3, r3
 8008370:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8008372:	089a      	lsrs	r2, r3, #2
 8008374:	f43f af65 	beq.w	8008242 <USB_EPStartXfer+0xe6>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008378:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800837a:	eb00 3404 	add.w	r4, r0, r4, lsl #12
 800837e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8008382:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8008386:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800838a:	4299      	cmp	r1, r3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800838c:	6022      	str	r2, [r4, #0]
    for (i = 0U; i < count32b; i++)
 800838e:	d1fa      	bne.n	8008386 <USB_EPStartXfer+0x22a>
 8008390:	e757      	b.n	8008242 <USB_EPStartXfer+0xe6>
      if ((uint32_t)ep->dma_addr != 0U)
 8008392:	69cb      	ldr	r3, [r1, #28]
 8008394:	b95b      	cbnz	r3, 80083ae <USB_EPStartXfer+0x252>
      if (ep->type == EP_TYPE_ISOC)
 8008396:	2f01      	cmp	r7, #1
 8008398:	d011      	beq.n	80083be <USB_EPStartXfer+0x262>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800839a:	682b      	ldr	r3, [r5, #0]
}
 800839c:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800839e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083a2:	602b      	str	r3, [r5, #0]
}
 80083a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 80083a8:	69cb      	ldr	r3, [r1, #28]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0f5      	beq.n	800839a <USB_EPStartXfer+0x23e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083ae:	616b      	str	r3, [r5, #20]
 80083b0:	e7f1      	b.n	8008396 <USB_EPStartXfer+0x23a>
          ep->xfer_len = ep->maxpacket;
 80083b2:	463b      	mov	r3, r7
 80083b4:	610f      	str	r7, [r1, #16]
 80083b6:	e75c      	b.n	8008272 <USB_EPStartXfer+0x116>
      if ((uint32_t)ep->dma_addr != 0U)
 80083b8:	69cb      	ldr	r3, [r1, #28]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1f7      	bne.n	80083ae <USB_EPStartXfer+0x252>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083be:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80083c2:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083c6:	682b      	ldr	r3, [r5, #0]
 80083c8:	bf0c      	ite	eq
 80083ca:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083ce:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80083d2:	602b      	str	r3, [r5, #0]
 80083d4:	e7e1      	b.n	800839a <USB_EPStartXfer+0x23e>
 80083d6:	bf00      	nop
 80083d8:	fff80000 	.word	0xfff80000
 80083dc:	e007ffff 	.word	0xe007ffff
 80083e0:	1ff80000 	.word	0x1ff80000

080083e4 <USB_EPStopXfer>:
  __IO uint32_t count = 0U;
 80083e4:	2300      	movs	r3, #0
{
 80083e6:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80083e8:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 80083ea:	784b      	ldrb	r3, [r1, #1]
 80083ec:	2b01      	cmp	r3, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083ee:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80083f0:	d020      	beq.n	8008434 <USB_EPStopXfer+0x50>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083f2:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80083f6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80083fa:	6803      	ldr	r3, [r0, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	db02      	blt.n	8008406 <USB_EPStopXfer+0x22>
  HAL_StatusTypeDef ret = HAL_OK;
 8008400:	2000      	movs	r0, #0
}
 8008402:	b002      	add	sp, #8
 8008404:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008406:	6803      	ldr	r3, [r0, #0]
        if (count > 10000U)
 8008408:	f242 7210 	movw	r2, #10000	; 0x2710
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800840c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008410:	6003      	str	r3, [r0, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008412:	6803      	ldr	r3, [r0, #0]
 8008414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008418:	6003      	str	r3, [r0, #0]
 800841a:	e002      	b.n	8008422 <USB_EPStopXfer+0x3e>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800841c:	6803      	ldr	r3, [r0, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	daee      	bge.n	8008400 <USB_EPStopXfer+0x1c>
        count++;
 8008422:	9b01      	ldr	r3, [sp, #4]
 8008424:	3301      	adds	r3, #1
 8008426:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8008428:	9b01      	ldr	r3, [sp, #4]
 800842a:	4293      	cmp	r3, r2
 800842c:	d9f6      	bls.n	800841c <USB_EPStopXfer+0x38>
          ret = HAL_ERROR;
 800842e:	2001      	movs	r0, #1
}
 8008430:	b002      	add	sp, #8
 8008432:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008434:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8008438:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	2a00      	cmp	r2, #0
 8008440:	dade      	bge.n	8008400 <USB_EPStopXfer+0x1c>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008442:	681a      	ldr	r2, [r3, #0]
        if (count > 10000U)
 8008444:	f242 7110 	movw	r1, #10000	; 0x2710
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008448:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800844c:	601a      	str	r2, [r3, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	e002      	b.n	800845e <USB_EPStopXfer+0x7a>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	2a00      	cmp	r2, #0
 800845c:	dad0      	bge.n	8008400 <USB_EPStopXfer+0x1c>
        count++;
 800845e:	9a01      	ldr	r2, [sp, #4]
 8008460:	3201      	adds	r2, #1
 8008462:	9201      	str	r2, [sp, #4]
        if (count > 10000U)
 8008464:	9a01      	ldr	r2, [sp, #4]
 8008466:	428a      	cmp	r2, r1
 8008468:	d9f6      	bls.n	8008458 <USB_EPStopXfer+0x74>
 800846a:	e7e0      	b.n	800842e <USB_EPStopXfer+0x4a>

0800846c <USB_WritePacket>:
{
 800846c:	b410      	push	{r4}
 800846e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8008472:	b964      	cbnz	r4, 800848e <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8008474:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8008476:	089b      	lsrs	r3, r3, #2
 8008478:	d009      	beq.n	800848e <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800847a:	3201      	adds	r2, #1
 800847c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008480:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8008484:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8008488:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800848a:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800848c:	d1fa      	bne.n	8008484 <USB_WritePacket+0x18>
}
 800848e:	2000      	movs	r0, #0
 8008490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop

08008498 <USB_ReadPacket>:
{
 8008498:	b530      	push	{r4, r5, lr}
  for (i = 0U; i < count32b; i++)
 800849a:	ea5f 0e92 	movs.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 800849e:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 80084a2:	d00b      	beq.n	80084bc <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084a4:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 80084a8:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 80084aa:	2300      	movs	r3, #0
 80084ac:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80084ae:	6822      	ldr	r2, [r4, #0]
  for (i = 0U; i < count32b; i++)
 80084b0:	459e      	cmp	lr, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80084b2:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 80084b6:	d1f9      	bne.n	80084ac <USB_ReadPacket+0x14>
    pDest++;
 80084b8:	eb01 018e 	add.w	r1, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 80084bc:	b16d      	cbz	r5, 80084da <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084be:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      remaining_bytes--;
 80084c2:	1e6b      	subs	r3, r5, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084c4:	6802      	ldr	r2, [r0, #0]
      remaining_bytes--;
 80084c6:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084c8:	700a      	strb	r2, [r1, #0]
    } while (remaining_bytes != 0U);
 80084ca:	b12b      	cbz	r3, 80084d8 <USB_ReadPacket+0x40>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084cc:	0a10      	lsrs	r0, r2, #8
    } while (remaining_bytes != 0U);
 80084ce:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084d0:	7048      	strb	r0, [r1, #1]
    } while (remaining_bytes != 0U);
 80084d2:	d001      	beq.n	80084d8 <USB_ReadPacket+0x40>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084d4:	0c12      	lsrs	r2, r2, #16
 80084d6:	708a      	strb	r2, [r1, #2]
      pDest++;
 80084d8:	4429      	add	r1, r5
}
 80084da:	4608      	mov	r0, r1
 80084dc:	bd30      	pop	{r4, r5, pc}
 80084de:	bf00      	nop

080084e0 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80084e0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80084e2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80084e4:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80084e6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80084ea:	d00c      	beq.n	8008506 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80084ec:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80084f0:	b10b      	cbz	r3, 80084f6 <USB_EPSetStall+0x16>
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	da14      	bge.n	8008520 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80084f6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80084fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084fe:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8008502:	2000      	movs	r0, #0
 8008504:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008506:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800850a:	2a00      	cmp	r2, #0
 800850c:	db00      	blt.n	8008510 <USB_EPSetStall+0x30>
 800850e:	b973      	cbnz	r3, 800852e <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008510:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008518:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800851c:	2000      	movs	r0, #0
 800851e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008520:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8008524:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008528:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800852c:	e7e3      	b.n	80084f6 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800852e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008532:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008536:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800853a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800853e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008542:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8008546:	e7e9      	b.n	800851c <USB_EPSetStall+0x3c>

08008548 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8008548:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800854a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800854c:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800854e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8008552:	d013      	beq.n	800857c <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008554:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8008558:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800855c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008560:	790b      	ldrb	r3, [r1, #4]
 8008562:	3b02      	subs	r3, #2
 8008564:	2b01      	cmp	r3, #1
 8008566:	d901      	bls.n	800856c <USB_EPClearStall+0x24>
}
 8008568:	2000      	movs	r0, #0
 800856a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800856c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8008570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008574:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8008578:	2000      	movs	r0, #0
 800857a:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800857c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008580:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008584:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008588:	790b      	ldrb	r3, [r1, #4]
 800858a:	3b02      	subs	r3, #2
 800858c:	2b01      	cmp	r3, #1
 800858e:	d8eb      	bhi.n	8008568 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008590:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008598:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800859c:	2000      	movs	r0, #0
 800859e:	4770      	bx	lr

080085a0 <USB_SetDevAddress>:
{
 80085a0:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085a2:	0109      	lsls	r1, r1, #4
}
 80085a4:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80085a6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085aa:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80085ae:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 80085b2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085b6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80085ba:	4311      	orrs	r1, r2
 80085bc:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop

080085c4 <USB_DevConnect>:
{
 80085c4:	4603      	mov	r3, r0
}
 80085c6:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085c8:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80085cc:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085d0:	f022 0203 	bic.w	r2, r2, #3
 80085d4:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80085d8:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80085dc:	f023 0302 	bic.w	r3, r3, #2
 80085e0:	604b      	str	r3, [r1, #4]
}
 80085e2:	4770      	bx	lr

080085e4 <USB_DevDisconnect>:
{
 80085e4:	4603      	mov	r3, r0
}
 80085e6:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085e8:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085ec:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085f0:	f022 0203 	bic.w	r2, r2, #3
 80085f4:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085f8:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80085fc:	f043 0302 	orr.w	r3, r3, #2
 8008600:	604b      	str	r3, [r1, #4]
}
 8008602:	4770      	bx	lr

08008604 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8008604:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8008606:	6980      	ldr	r0, [r0, #24]
}
 8008608:	4010      	ands	r0, r2
 800860a:	4770      	bx	lr

0800860c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800860c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008610:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8008614:	4018      	ands	r0, r3
}
 8008616:	0c00      	lsrs	r0, r0, #16
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop

0800861c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800861c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008620:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8008624:	4018      	ands	r0, r3
}
 8008626:	b280      	uxth	r0, r0
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop

0800862c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800862c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008630:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008634:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008638:	6940      	ldr	r0, [r0, #20]
}
 800863a:	4010      	ands	r0, r2
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop

08008640 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8008640:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008644:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008648:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800864c:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008650:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008654:	40cb      	lsrs	r3, r1
 8008656:	01db      	lsls	r3, r3, #7
 8008658:	b2db      	uxtb	r3, r3
 800865a:	4313      	orrs	r3, r2
}
 800865c:	4018      	ands	r0, r3
 800865e:	4770      	bx	lr

08008660 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8008660:	6940      	ldr	r0, [r0, #20]
}
 8008662:	f000 0001 	and.w	r0, r0, #1
 8008666:	4770      	bx	lr

08008668 <USB_ActivateSetup>:
{
 8008668:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800866a:	4a09      	ldr	r2, [pc, #36]	; (8008690 <USB_ActivateSetup+0x28>)
}
 800866c:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800866e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 8008672:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008674:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8008678:	4022      	ands	r2, r4
}
 800867a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800867e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008682:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8008686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800868a:	604b      	str	r3, [r1, #4]
}
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	fffff800 	.word	0xfffff800

08008694 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008694:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <USB_EP0_OutStart+0x54>)
{
 8008696:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008698:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800869a:	429c      	cmp	r4, r3
 800869c:	d81a      	bhi.n	80086d4 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800869e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80086a2:	2300      	movs	r3, #0
  if (dma == 1U)
 80086a4:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80086a6:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086a8:	6903      	ldr	r3, [r0, #16]
 80086aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086ae:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80086b0:	6903      	ldr	r3, [r0, #16]
 80086b2:	f043 0318 	orr.w	r3, r3, #24
 80086b6:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80086b8:	6903      	ldr	r3, [r0, #16]
 80086ba:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80086be:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 80086c0:	d104      	bne.n	80086cc <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80086c2:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80086c4:	6803      	ldr	r3, [r0, #0]
 80086c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80086ca:	6003      	str	r3, [r0, #0]
}
 80086cc:	2000      	movs	r0, #0
 80086ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086d2:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086d4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80086d8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80086dc:	2b00      	cmp	r3, #0
 80086de:	dae0      	bge.n	80086a2 <USB_EP0_OutStart+0xe>
}
 80086e0:	2000      	movs	r0, #0
 80086e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	4f54300a 	.word	0x4f54300a

080086ec <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 80086ec:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 80086ee:	221b      	movs	r2, #27

  return USBD_DFU_CfgDesc;
}
 80086f0:	4801      	ldr	r0, [pc, #4]	; (80086f8 <USBD_DFU_GetCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 80086f2:	801a      	strh	r2, [r3, #0]
}
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	240003f0 	.word	0x240003f0

080086fc <USBD_DFU_EP0_RxReady>:
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 80086fc:	2000      	movs	r0, #0
 80086fe:	4770      	bx	lr

08008700 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8008700:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8008702:	220a      	movs	r2, #10

  return USBD_DFU_DeviceQualifierDesc;
}
 8008704:	4801      	ldr	r0, [pc, #4]	; (800870c <USBD_DFU_GetDeviceQualifierDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8008706:	801a      	strh	r2, [r3, #0]
}
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	2400040c 	.word	0x2400040c

08008710 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008710:	b510      	push	{r4, lr}
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8008712:	f8d0 42d4 	ldr.w	r4, [r0, #724]	; 0x2d4

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8008716:	2906      	cmp	r1, #6
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8008718:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800871c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8008720:	d805      	bhi.n	800872e <USBD_DFU_GetUsrStringDesc+0x1e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8008722:	4905      	ldr	r1, [pc, #20]	; (8008738 <USBD_DFU_GetUsrStringDesc+0x28>)
 8008724:	6800      	ldr	r0, [r0, #0]
 8008726:	f001 f81d 	bl	8009764 <USBD_GetString>
    return USBD_StrDesc;
 800872a:	4803      	ldr	r0, [pc, #12]	; (8008738 <USBD_DFU_GetUsrStringDesc+0x28>)
  {
    /* Not supported Interface Descriptor index */
    *length = 0U;
    return NULL;
  }
}
 800872c:	bd10      	pop	{r4, pc}
 800872e:	4613      	mov	r3, r2
    *length = 0U;
 8008730:	2200      	movs	r2, #0
    return NULL;
 8008732:	4610      	mov	r0, r2
    *length = 0U;
 8008734:	801a      	strh	r2, [r3, #0]
}
 8008736:	bd10      	pop	{r4, pc}
 8008738:	2400b978 	.word	0x2400b978

0800873c <USBD_DFU_DeInit>:
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800873c:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8008740:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 8008744:	b538      	push	{r3, r4, r5, lr}
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008746:	f8d2 32c0 	ldr.w	r3, [r2, #704]	; 0x2c0
 800874a:	b303      	cbz	r3, 800878e <USBD_DFU_DeInit+0x52>
  hdfu->wblock_num = 0U;
 800874c:	2500      	movs	r5, #0
  hdfu->dev_state = DFU_STATE_IDLE;
 800874e:	2102      	movs	r1, #2
 8008750:	4604      	mov	r4, r0
 8008752:	f883 141c 	strb.w	r1, [r3, #1052]	; 0x41c
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8008756:	f883 1418 	strb.w	r1, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800875a:	f883 5414 	strb.w	r5, [r3, #1044]	; 0x414
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800875e:	f8d2 22c4 	ldr.w	r2, [r2, #708]	; 0x2c4
  hdfu->wblock_num = 0U;
 8008762:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8008766:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800876a:	6893      	ldr	r3, [r2, #8]
 800876c:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800876e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8008772:	33b0      	adds	r3, #176	; 0xb0
 8008774:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8008778:	f001 faee 	bl	8009d58 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 800877c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  return (uint8_t)USBD_OK;
 8008780:	4628      	mov	r0, r5
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008782:	33b0      	adds	r3, #176	; 0xb0
 8008784:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = NULL;
 8008788:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800878c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_EMEM;
 800878e:	2002      	movs	r0, #2
}
 8008790:	bd38      	pop	{r3, r4, r5, pc}
 8008792:	bf00      	nop

08008794 <USBD_DFU_Init>:
{
 8008794:	b510      	push	{r4, lr}
 8008796:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8008798:	f44f 6084 	mov.w	r0, #1056	; 0x420
 800879c:	f001 fad8 	bl	8009d50 <USBD_static_malloc>
  if (hdfu == NULL)
 80087a0:	4603      	mov	r3, r0
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087a2:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
  if (hdfu == NULL)
 80087a6:	b300      	cbz	r0, 80087ea <USBD_DFU_Init+0x56>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 80087a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80087ac:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  hdfu->alt_setting = 0U;
 80087b0:	2100      	movs	r1, #0
  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 80087b2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80087b6:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80087ba:	f8c3 0408 	str.w	r0, [r3, #1032]	; 0x408
  hdfu->dev_state = DFU_STATE_IDLE;
 80087be:	2002      	movs	r0, #2
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80087c0:	f8c3 1414 	str.w	r1, [r3, #1044]	; 0x414
  hdfu->alt_setting = 0U;
 80087c4:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
  hdfu->wblock_num = 0U;
 80087c8:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 80087cc:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
  hdfu->dev_state = DFU_STATE_IDLE;
 80087d0:	f8a3 041c 	strh.w	r0, [r3, #1052]	; 0x41c
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80087d4:	f8a3 0418 	strh.w	r0, [r3, #1048]	; 0x418
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 80087d8:	f8d2 32c4 	ldr.w	r3, [r2, #708]	; 0x2c4
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	4798      	blx	r3
    return (uint8_t)USBD_FAIL;
 80087e0:	2800      	cmp	r0, #0
 80087e2:	bf0c      	ite	eq
 80087e4:	2000      	moveq	r0, #0
 80087e6:	2003      	movne	r0, #3
}
 80087e8:	bd10      	pop	{r4, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087ea:	32b0      	adds	r2, #176	; 0xb0
    return (uint8_t)USBD_EMEM;
 80087ec:	2002      	movs	r0, #2
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087ee:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 80087f2:	bd10      	pop	{r4, pc}

080087f4 <USBD_DFU_SOF>:
 80087f4:	2000      	movs	r0, #0
 80087f6:	4770      	bx	lr

080087f8 <USBD_DFU_EP0_TxReady>:
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087f8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80087fc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
{
 8008800:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8008802:	e9d3 46b0 	ldrd	r4, r6, [r3, #704]	; 0x2c0
{
 8008806:	b083      	sub	sp, #12
  if (hdfu == NULL)
 8008808:	b12c      	cbz	r4, 8008816 <USBD_DFU_EP0_TxReady+0x1e>
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800880a:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 800880e:	2b04      	cmp	r3, #4
 8008810:	d01c      	beq.n	800884c <USBD_DFU_EP0_TxReady+0x54>
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8008812:	2b07      	cmp	r3, #7
 8008814:	d002      	beq.n	800881c <USBD_DFU_EP0_TxReady+0x24>
    return (uint8_t)USBD_FAIL;
 8008816:	2003      	movs	r0, #3
}
 8008818:	b003      	add	sp, #12
 800881a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800881c:	f8d0 72d0 	ldr.w	r7, [r0, #720]	; 0x2d0
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  uint8_t *pDfuDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008820:	4605      	mov	r5, r0
 8008822:	783b      	ldrb	r3, [r7, #0]
 8008824:	887a      	ldrh	r2, [r7, #2]
 8008826:	429a      	cmp	r2, r3
 8008828:	d90d      	bls.n	8008846 <USBD_DFU_EP0_TxReady+0x4e>
  {
    ptr = desc->bLength;
 800882a:	4638      	mov	r0, r7
 800882c:	f8ad 3000 	strh.w	r3, [sp]

    while (ptr < desc->wTotalLength)
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008830:	4669      	mov	r1, sp
 8008832:	f000 fcad 	bl	8009190 <USBD_GetNextDesc>

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 8008836:	7843      	ldrb	r3, [r0, #1]
 8008838:	2b21      	cmp	r3, #33	; 0x21
 800883a:	d049      	beq.n	80088d0 <USBD_DFU_EP0_TxReady+0xd8>
    while (ptr < desc->wTotalLength)
 800883c:	887a      	ldrh	r2, [r7, #2]
 800883e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008842:	429a      	cmp	r2, r3
 8008844:	d8f4      	bhi.n	8008830 <USBD_DFU_EP0_TxReady+0x38>
  return (uint8_t)USBD_OK;
 8008846:	2000      	movs	r0, #0
}
 8008848:	b003      	add	sp, #12
 800884a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hdfu->wblock_num == 0U)
 800884c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8008850:	bb0b      	cbnz	r3, 8008896 <USBD_DFU_EP0_TxReady+0x9e>
      if (hdfu->wlength == 1U)
 8008852:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
 8008856:	2a01      	cmp	r2, #1
 8008858:	d02b      	beq.n	80088b2 <USBD_DFU_EP0_TxReady+0xba>
      else if (hdfu->wlength == 5U)
 800885a:	2a05      	cmp	r2, #5
 800885c:	d157      	bne.n	800890e <USBD_DFU_EP0_TxReady+0x116>
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800885e:	7823      	ldrb	r3, [r4, #0]
 8008860:	2b21      	cmp	r3, #33	; 0x21
 8008862:	d047      	beq.n	80088f4 <USBD_DFU_EP0_TxReady+0xfc>
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8008864:	2b41      	cmp	r3, #65	; 0x41
 8008866:	d1d6      	bne.n	8008816 <USBD_DFU_EP0_TxReady+0x1e>
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008868:	78e3      	ldrb	r3, [r4, #3]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800886a:	78a0      	ldrb	r0, [r4, #2]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800886c:	041b      	lsls	r3, r3, #16
          app_addr_ptr = hdfu->buffer.d8[1];
 800886e:	7861      	ldrb	r1, [r4, #1]
          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8008870:	68f2      	ldr	r2, [r6, #12]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008872:	eb03 2300 	add.w	r3, r3, r0, lsl #8
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008876:	7920      	ldrb	r0, [r4, #4]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008878:	440b      	add	r3, r1
          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 800887a:	eb03 6000 	add.w	r0, r3, r0, lsl #24
 800887e:	4790      	blx	r2
 8008880:	b1b8      	cbz	r0, 80088b2 <USBD_DFU_EP0_TxReady+0xba>
          hdfu->dev_state = DFU_STATE_ERROR;
 8008882:	230a      	movs	r3, #10
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8008884:	220b      	movs	r2, #11
          return (uint8_t)USBD_FAIL;
 8008886:	2003      	movs	r0, #3
          hdfu->dev_state = DFU_STATE_ERROR;
 8008888:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 800888c:	f8c4 2414 	str.w	r2, [r4, #1044]	; 0x414
          hdfu->dev_status[4] = hdfu->dev_state;
 8008890:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
          return (uint8_t)USBD_FAIL;
 8008894:	e7c0      	b.n	8008818 <USBD_DFU_EP0_TxReady+0x20>
      if (hdfu->wblock_num > 1U)
 8008896:	2b01      	cmp	r3, #1
 8008898:	d00b      	beq.n	80088b2 <USBD_DFU_EP0_TxReady+0xba>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800889a:	3b02      	subs	r3, #2
 800889c:	f8d4 1408 	ldr.w	r1, [r4, #1032]	; 0x408
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80088a0:	6935      	ldr	r5, [r6, #16]
 80088a2:	4620      	mov	r0, r4
 80088a4:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
 80088a8:	eb01 2183 	add.w	r1, r1, r3, lsl #10
 80088ac:	47a8      	blx	r5
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d1e7      	bne.n	8008882 <USBD_DFU_EP0_TxReady+0x8a>
    hdfu->wlength = 0U;
 80088b2:	2300      	movs	r3, #0
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80088b4:	2103      	movs	r1, #3
    hdfu->dev_status[1] = 0U;
 80088b6:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  return (uint8_t)USBD_OK;
 80088ba:	4618      	mov	r0, r3
    hdfu->wlength = 0U;
 80088bc:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 80088c0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80088c4:	f884 141c 	strb.w	r1, [r4, #1052]	; 0x41c
    hdfu->dev_status[1] = 0U;
 80088c8:	f8c4 2415 	str.w	r2, [r4, #1045]	; 0x415
}
 80088cc:	b003      	add	sp, #12
 80088ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 80088d0:	2e00      	cmp	r6, #0
 80088d2:	d0b8      	beq.n	8008846 <USBD_DFU_EP0_TxReady+0x4e>
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80088d4:	2300      	movs	r3, #0
 80088d6:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 80088da:	7882      	ldrb	r2, [r0, #2]
 80088dc:	0752      	lsls	r2, r2, #29
 80088de:	d521      	bpl.n	8008924 <USBD_DFU_EP0_TxReady+0x12c>
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80088e0:	2106      	movs	r1, #6
    hdfu->dev_status[1] = 0U;
 80088e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
  return (uint8_t)USBD_OK;
 80088e6:	4618      	mov	r0, r3
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80088e8:	f884 141c 	strb.w	r1, [r4, #1052]	; 0x41c
    hdfu->dev_status[1] = 0U;
 80088ec:	f8c4 2415 	str.w	r2, [r4, #1045]	; 0x415
}
 80088f0:	b003      	add	sp, #12
 80088f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80088f4:	78e3      	ldrb	r3, [r4, #3]
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80088f6:	78a0      	ldrb	r0, [r4, #2]
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80088f8:	041b      	lsls	r3, r3, #16
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80088fa:	7861      	ldrb	r1, [r4, #1]
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80088fc:	7922      	ldrb	r2, [r4, #4]
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80088fe:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8008902:	440b      	add	r3, r1
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008904:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8008908:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
 800890c:	e7d1      	b.n	80088b2 <USBD_DFU_EP0_TxReady+0xba>
        req.wLength = 1U;
 800890e:	2201      	movs	r2, #1
        hdfu->wlength = 0U;
 8008910:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
        USBD_CtlError(pdev, &req);
 8008914:	4669      	mov	r1, sp
        req.bmRequest = 0U;
 8008916:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1U;
 800891a:	f8ad 2006 	strh.w	r2, [sp, #6]
        USBD_CtlError(pdev, &req);
 800891e:	f000 ff15 	bl	800974c <USBD_CtlError>
 8008922:	e7c6      	b.n	80088b2 <USBD_DFU_EP0_TxReady+0xba>
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8008924:	2208      	movs	r2, #8
    hdfu->dev_status[1] = 0U;
 8008926:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    (void)USBD_Stop(pdev);
 800892a:	4628      	mov	r0, r5
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800892c:	f884 241c 	strb.w	r2, [r4, #1052]	; 0x41c
    hdfu->dev_status[1] = 0U;
 8008930:	f8c4 3415 	str.w	r3, [r4, #1045]	; 0x415
    (void)USBD_Stop(pdev);
 8008934:	f000 faa0 	bl	8008e78 <USBD_Stop>
  __ASM volatile ("dsb 0xF":::"memory");
 8008938:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800893c:	4905      	ldr	r1, [pc, #20]	; (8008954 <USBD_DFU_EP0_TxReady+0x15c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800893e:	4b06      	ldr	r3, [pc, #24]	; (8008958 <USBD_DFU_EP0_TxReady+0x160>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008940:	68ca      	ldr	r2, [r1, #12]
 8008942:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008946:	4313      	orrs	r3, r2
 8008948:	60cb      	str	r3, [r1, #12]
 800894a:	f3bf 8f4f 	dsb	sy
    __NOP();
 800894e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8008950:	e7fd      	b.n	800894e <USBD_DFU_EP0_TxReady+0x156>
 8008952:	bf00      	nop
 8008954:	e000ed00 	.word	0xe000ed00
 8008958:	05fa0004 	.word	0x05fa0004

0800895c <USBD_DFU_Setup>:
{
 800895c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint16_t status_info = 0U;
 8008960:	2300      	movs	r3, #0
{
 8008962:	b083      	sub	sp, #12
  uint16_t status_info = 0U;
 8008964:	f8ad 3004 	strh.w	r3, [sp, #4]
 8008968:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800896c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008970:	f8d3 72c0 	ldr.w	r7, [r3, #704]	; 0x2c0
  if (hdfu == NULL)
 8008974:	2f00      	cmp	r7, #0
 8008976:	d037      	beq.n	80089e8 <USBD_DFU_Setup+0x8c>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008978:	780c      	ldrb	r4, [r1, #0]
 800897a:	4605      	mov	r5, r0
 800897c:	460e      	mov	r6, r1
 800897e:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8008982:	d013      	beq.n	80089ac <USBD_DFU_Setup+0x50>
 8008984:	2c20      	cmp	r4, #32
 8008986:	d008      	beq.n	800899a <USBD_DFU_Setup+0x3e>
            USBD_CtlError(pdev, req);
 8008988:	4631      	mov	r1, r6
 800898a:	4628      	mov	r0, r5
            ret = USBD_FAIL;
 800898c:	2403      	movs	r4, #3
            USBD_CtlError(pdev, req);
 800898e:	f000 fedd 	bl	800974c <USBD_CtlError>
}
 8008992:	4620      	mov	r0, r4
 8008994:	b003      	add	sp, #12
 8008996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      switch (req->bRequest)
 800899a:	784c      	ldrb	r4, [r1, #1]
 800899c:	2c06      	cmp	r4, #6
 800899e:	d8f3      	bhi.n	8008988 <USBD_DFU_Setup+0x2c>
 80089a0:	e8df f004 	tbb	[pc, r4]
 80089a4:	8569c42e 	.word	0x8569c42e
 80089a8:	279e      	.short	0x279e
 80089aa:	ad          	.byte	0xad
 80089ab:	00          	.byte	0x00
      switch (req->bRequest)
 80089ac:	784b      	ldrb	r3, [r1, #1]
 80089ae:	2b0b      	cmp	r3, #11
 80089b0:	d8ea      	bhi.n	8008988 <USBD_DFU_Setup+0x2c>
 80089b2:	a201      	add	r2, pc, #4	; (adr r2, 80089b8 <USBD_DFU_Setup+0x5c>)
 80089b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b8:	08008b65 	.word	0x08008b65
 80089bc:	08008993 	.word	0x08008993
 80089c0:	08008989 	.word	0x08008989
 80089c4:	08008989 	.word	0x08008989
 80089c8:	08008989 	.word	0x08008989
 80089cc:	08008989 	.word	0x08008989
 80089d0:	08008b7b 	.word	0x08008b7b
 80089d4:	08008989 	.word	0x08008989
 80089d8:	08008989 	.word	0x08008989
 80089dc:	08008989 	.word	0x08008989
 80089e0:	08008b87 	.word	0x08008b87
 80089e4:	08008b4d 	.word	0x08008b4d
    return (uint8_t)USBD_FAIL;
 80089e8:	2403      	movs	r4, #3
}
 80089ea:	4620      	mov	r0, r4
 80089ec:	b003      	add	sp, #12
 80089ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80089f2:	2201      	movs	r2, #1
 80089f4:	f207 411c 	addw	r1, r7, #1052	; 0x41c
  USBD_StatusTypeDef ret = USBD_OK;
 80089f8:	2400      	movs	r4, #0
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80089fa:	f000 fee1 	bl	80097c0 <USBD_CtlSendData>
 80089fe:	e7c8      	b.n	8008992 <USBD_DFU_Setup+0x36>
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8008a00:	f8d0 92d0 	ldr.w	r9, [r0, #720]	; 0x2d0
  if (desc->wTotalLength > desc->bLength)
 8008a04:	f899 3000 	ldrb.w	r3, [r9]
 8008a08:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d9c0      	bls.n	8008992 <USBD_DFU_Setup+0x36>
    ptr = desc->bLength;
 8008a10:	4648      	mov	r0, r9
 8008a12:	f10d 0806 	add.w	r8, sp, #6
 8008a16:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8008a1a:	e005      	b.n	8008a28 <USBD_DFU_Setup+0xcc>
 8008a1c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8008a20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d9b4      	bls.n	8008992 <USBD_DFU_Setup+0x36>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008a28:	4641      	mov	r1, r8
 8008a2a:	f000 fbb1 	bl	8009190 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 8008a2e:	7843      	ldrb	r3, [r0, #1]
 8008a30:	2b21      	cmp	r3, #33	; 0x21
 8008a32:	d1f3      	bne.n	8008a1c <USBD_DFU_Setup+0xc0>
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008a34:	f897 241c 	ldrb.w	r2, [r7, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008a38:	2a09      	cmp	r2, #9
 8008a3a:	d810      	bhi.n	8008a5e <USBD_DFU_Setup+0x102>
 8008a3c:	f46f 731b 	mvn.w	r3, #620	; 0x26c
 8008a40:	4113      	asrs	r3, r2
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008a42:	f013 0301 	ands.w	r3, r3, #1
 8008a46:	d10a      	bne.n	8008a5e <USBD_DFU_Setup+0x102>
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008a48:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    hdfu->wblock_num = 0U;
 8008a4c:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
    hdfu->wlength = 0U;
 8008a50:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
    hdfu->dev_state = DFU_STATE_IDLE;
 8008a54:	2302      	movs	r3, #2
 8008a56:	f887 341c 	strb.w	r3, [r7, #1052]	; 0x41c
    hdfu->dev_status[4] = hdfu->dev_state;
 8008a5a:	f8a7 3418 	strh.w	r3, [r7, #1048]	; 0x418
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 8008a5e:	7883      	ldrb	r3, [r0, #2]
 8008a60:	f013 0308 	ands.w	r3, r3, #8
 8008a64:	f000 80d4 	beq.w	8008c10 <USBD_DFU_Setup+0x2b4>
    (void)USBD_Stop(pdev);
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f000 fa05 	bl	8008e78 <USBD_Stop>
    (void)USBD_Start(pdev);
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f000 fa00 	bl	8008e74 <USBD_Start>
 8008a74:	e78d      	b.n	8008992 <USBD_DFU_Setup+0x36>
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8008a76:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
  if (req->wLength > 0U)
 8008a7a:	88f3      	ldrh	r3, [r6, #6]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 809b 	beq.w	8008bb8 <USBD_DFU_Setup+0x25c>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008a82:	f897 241c 	ldrb.w	r2, [r7, #1052]	; 0x41c
 8008a86:	2a02      	cmp	r2, #2
 8008a88:	f000 80d1 	beq.w	8008c2e <USBD_DFU_Setup+0x2d2>
 8008a8c:	f1a2 0209 	sub.w	r2, r2, #9
 8008a90:	fab2 f282 	clz	r2, r2
 8008a94:	0952      	lsrs	r2, r2, #5
 8008a96:	2a00      	cmp	r2, #0
 8008a98:	f040 80c9 	bne.w	8008c2e <USBD_DFU_Setup+0x2d2>
      USBD_CtlError(pdev, req);
 8008a9c:	4631      	mov	r1, r6
      hdfu->wlength = 0U;
 8008a9e:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8008aa2:	f8c7 2400 	str.w	r2, [r7, #1024]	; 0x400
  USBD_StatusTypeDef ret = USBD_OK;
 8008aa6:	4614      	mov	r4, r2
      USBD_CtlError(pdev, req);
 8008aa8:	f000 fe50 	bl	800974c <USBD_CtlError>
 8008aac:	e771      	b.n	8008992 <USBD_DFU_Setup+0x36>
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8008aae:	f8d0 42d0 	ldr.w	r4, [r0, #720]	; 0x2d0
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8008ab2:	f8d3 62c4 	ldr.w	r6, [r3, #708]	; 0x2c4
  if (desc->wTotalLength > desc->bLength)
 8008ab6:	8862      	ldrh	r2, [r4, #2]
 8008ab8:	7823      	ldrb	r3, [r4, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d961      	bls.n	8008b82 <USBD_DFU_Setup+0x226>
    ptr = desc->bLength;
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f10d 0806 	add.w	r8, sp, #6
 8008ac4:	f8ad 3006 	strh.w	r3, [sp, #6]
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008ac8:	4641      	mov	r1, r8
 8008aca:	f000 fb61 	bl	8009190 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 8008ace:	7843      	ldrb	r3, [r0, #1]
 8008ad0:	2b21      	cmp	r3, #33	; 0x21
 8008ad2:	d07a      	beq.n	8008bca <USBD_DFU_Setup+0x26e>
    while (ptr < desc->wTotalLength)
 8008ad4:	8862      	ldrh	r2, [r4, #2]
 8008ad6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d8f4      	bhi.n	8008ac8 <USBD_DFU_Setup+0x16c>
 8008ade:	e050      	b.n	8008b82 <USBD_DFU_Setup+0x226>
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8008ae0:	f897 341c 	ldrb.w	r3, [r7, #1052]	; 0x41c
 8008ae4:	2b0a      	cmp	r3, #10
 8008ae6:	f000 8098 	beq.w	8008c1a <USBD_DFU_Setup+0x2be>
    hdfu->dev_state = DFU_STATE_ERROR;
 8008aea:	230a      	movs	r3, #10
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8008aec:	220e      	movs	r2, #14
  USBD_StatusTypeDef ret = USBD_OK;
 8008aee:	2400      	movs	r4, #0
    hdfu->dev_state = DFU_STATE_ERROR;
 8008af0:	f887 341c 	strb.w	r3, [r7, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8008af4:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008af8:	f8a7 3418 	strh.w	r3, [r7, #1048]	; 0x418
 8008afc:	e749      	b.n	8008992 <USBD_DFU_Setup+0x36>
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008afe:	f897 241c 	ldrb.w	r2, [r7, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008b02:	2a09      	cmp	r2, #9
 8008b04:	d83d      	bhi.n	8008b82 <USBD_DFU_Setup+0x226>
 8008b06:	f46f 731b 	mvn.w	r3, #620	; 0x26c
 8008b0a:	4113      	asrs	r3, r2
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008b0c:	f013 0301 	ands.w	r3, r3, #1
 8008b10:	d137      	bne.n	8008b82 <USBD_DFU_Setup+0x226>
    hdfu->dev_state = DFU_STATE_IDLE;
 8008b12:	2202      	movs	r2, #2
  USBD_StatusTypeDef ret = USBD_OK;
 8008b14:	461c      	mov	r4, r3
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008b16:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    hdfu->wblock_num = 0U;
 8008b1a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
    hdfu->dev_state = DFU_STATE_IDLE;
 8008b1e:	f887 241c 	strb.w	r2, [r7, #1052]	; 0x41c
    hdfu->dev_status[4] = hdfu->dev_state;
 8008b22:	f8a7 2418 	strh.w	r2, [r7, #1048]	; 0x418
    hdfu->wlength = 0U;
 8008b26:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8008b2a:	e732      	b.n	8008992 <USBD_DFU_Setup+0x36>
  if (req->wLength > 0U)
 8008b2c:	88ca      	ldrh	r2, [r1, #6]
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8008b2e:	f897 341c 	ldrb.w	r3, [r7, #1052]	; 0x41c
  if (req->wLength > 0U)
 8008b32:	b39a      	cbz	r2, 8008b9c <USBD_DFU_Setup+0x240>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	f000 80c5 	beq.w	8008cc4 <USBD_DFU_Setup+0x368>
 8008b3a:	2b05      	cmp	r3, #5
 8008b3c:	f000 80c2 	beq.w	8008cc4 <USBD_DFU_Setup+0x368>
      USBD_CtlError(pdev, req);
 8008b40:	4631      	mov	r1, r6
 8008b42:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8008b44:	2400      	movs	r4, #0
      USBD_CtlError(pdev, req);
 8008b46:	f000 fe01 	bl	800974c <USBD_CtlError>
 8008b4a:	e722      	b.n	8008992 <USBD_DFU_Setup+0x36>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8008b4c:	788c      	ldrb	r4, [r1, #2]
 8008b4e:	2c00      	cmp	r4, #0
 8008b50:	f47f af1a 	bne.w	8008988 <USBD_DFU_Setup+0x2c>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b54:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	f47f af15 	bne.w	8008988 <USBD_DFU_Setup+0x2c>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8008b5e:	f8c7 4410 	str.w	r4, [r7, #1040]	; 0x410
 8008b62:	e716      	b.n	8008992 <USBD_DFU_Setup+0x36>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b64:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008b68:	2a03      	cmp	r2, #3
 8008b6a:	f47f af0d 	bne.w	8008988 <USBD_DFU_Setup+0x2c>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b6e:	2202      	movs	r2, #2
 8008b70:	a901      	add	r1, sp, #4
  USBD_StatusTypeDef ret = USBD_OK;
 8008b72:	461c      	mov	r4, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b74:	f000 fe24 	bl	80097c0 <USBD_CtlSendData>
 8008b78:	e70b      	b.n	8008992 <USBD_DFU_Setup+0x36>
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8008b7a:	884b      	ldrh	r3, [r1, #2]
 8008b7c:	0a1b      	lsrs	r3, r3, #8
 8008b7e:	2b21      	cmp	r3, #33	; 0x21
 8008b80:	d07c      	beq.n	8008c7c <USBD_DFU_Setup+0x320>
  USBD_StatusTypeDef ret = USBD_OK;
 8008b82:	2400      	movs	r4, #0
 8008b84:	e705      	b.n	8008992 <USBD_DFU_Setup+0x36>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	f47f aefc 	bne.w	8008988 <USBD_DFU_Setup+0x2c>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8008b90:	2201      	movs	r2, #1
 8008b92:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8008b96:	f000 fe13 	bl	80097c0 <USBD_CtlSendData>
 8008b9a:	e6fa      	b.n	8008992 <USBD_DFU_Setup+0x36>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8008b9c:	2b05      	cmp	r3, #5
 8008b9e:	d001      	beq.n	8008ba4 <USBD_DFU_Setup+0x248>
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d1cd      	bne.n	8008b40 <USBD_DFU_Setup+0x1e4>
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008ba4:	f44f 7283 	mov.w	r2, #262	; 0x106
        hdfu->dev_status[1] = 0U;
 8008ba8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
  USBD_StatusTypeDef ret = USBD_OK;
 8008bac:	2400      	movs	r4, #0
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008bae:	f8a7 241c 	strh.w	r2, [r7, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 8008bb2:	f8c7 3415 	str.w	r3, [r7, #1045]	; 0x415
 8008bb6:	e6ec      	b.n	8008992 <USBD_DFU_Setup+0x36>
    hdfu->dev_state = DFU_STATE_IDLE;
 8008bb8:	2102      	movs	r1, #2
    hdfu->dev_status[1] = 0U;
 8008bba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  USBD_StatusTypeDef ret = USBD_OK;
 8008bbe:	461c      	mov	r4, r3
    hdfu->dev_state = DFU_STATE_IDLE;
 8008bc0:	f887 141c 	strb.w	r1, [r7, #1052]	; 0x41c
    hdfu->dev_status[1] = 0U;
 8008bc4:	f8c7 2415 	str.w	r2, [r7, #1045]	; 0x415
 8008bc8:	e6e3      	b.n	8008992 <USBD_DFU_Setup+0x36>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	d0d9      	beq.n	8008b82 <USBD_DFU_Setup+0x226>
  switch (hdfu->dev_state)
 8008bce:	f897 341c 	ldrb.w	r3, [r7, #1052]	; 0x41c
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	f000 808c 	beq.w	8008cf0 <USBD_DFU_Setup+0x394>
 8008bd8:	2b06      	cmp	r3, #6
 8008bda:	d167      	bne.n	8008cac <USBD_DFU_Setup+0x350>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8008bdc:	f897 341d 	ldrb.w	r3, [r7, #1053]	; 0x41d
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	f000 80c5 	beq.w	8008d70 <USBD_DFU_Setup+0x414>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d160      	bne.n	8008cac <USBD_DFU_Setup+0x350>
 8008bea:	7883      	ldrb	r3, [r0, #2]
 8008bec:	075b      	lsls	r3, r3, #29
 8008bee:	d55d      	bpl.n	8008cac <USBD_DFU_Setup+0x350>
          hdfu->dev_state = DFU_STATE_IDLE;
 8008bf0:	2202      	movs	r2, #2
          hdfu->dev_status[1] = 0U;
 8008bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8008bf6:	f207 4414 	addw	r4, r7, #1044	; 0x414
          hdfu->dev_state = DFU_STATE_IDLE;
 8008bfa:	f887 241c 	strb.w	r2, [r7, #1052]	; 0x41c
          hdfu->dev_status[1] = 0U;
 8008bfe:	f8c7 3415 	str.w	r3, [r7, #1045]	; 0x415
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8008c02:	4621      	mov	r1, r4
 8008c04:	2206      	movs	r2, #6
 8008c06:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8008c08:	2400      	movs	r4, #0
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8008c0a:	f000 fdd9 	bl	80097c0 <USBD_CtlSendData>
 8008c0e:	e6c0      	b.n	8008992 <USBD_DFU_Setup+0x36>
    USBD_Delay((uint32_t)req->wValue);
 8008c10:	8870      	ldrh	r0, [r6, #2]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c12:	461c      	mov	r4, r3
    USBD_Delay((uint32_t)req->wValue);
 8008c14:	f7f9 f896 	bl	8001d44 <HAL_Delay>
 8008c18:	e6bb      	b.n	8008992 <USBD_DFU_Setup+0x36>
    hdfu->dev_state = DFU_STATE_IDLE;
 8008c1a:	2302      	movs	r3, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8008c1c:	2200      	movs	r2, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 8008c1e:	f887 341c 	strb.w	r3, [r7, #1052]	; 0x41c
  USBD_StatusTypeDef ret = USBD_OK;
 8008c22:	4614      	mov	r4, r2
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8008c24:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008c28:	f8a7 3418 	strh.w	r3, [r7, #1048]	; 0x418
 8008c2c:	e6b1      	b.n	8008992 <USBD_DFU_Setup+0x36>
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8008c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      hdfu->wblock_num = req->wValue;
 8008c32:	f8b6 c002 	ldrh.w	ip, [r6, #2]
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8008c36:	461a      	mov	r2, r3
 8008c38:	bf28      	it	cs
 8008c3a:	f44f 6280 	movcs.w	r2, #1024	; 0x400
      hdfu->wblock_num = req->wValue;
 8008c3e:	f8c7 c400 	str.w	ip, [r7, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8008c42:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
      if (hdfu->wblock_num == 0U)
 8008c46:	f1bc 0f00 	cmp.w	ip, #0
 8008c4a:	d16a      	bne.n	8008d22 <USBD_DFU_Setup+0x3c6>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8008c4c:	2b03      	cmp	r3, #3
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8008c4e:	f44f 5304 	mov.w	r3, #8448	; 0x2100
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 8008c52:	4628      	mov	r0, r5
 8008c54:	f04f 0203 	mov.w	r2, #3
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8008c58:	bf98      	it	ls
 8008c5a:	2409      	movls	r4, #9
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8008c5c:	803b      	strh	r3, [r7, #0]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8008c5e:	2341      	movs	r3, #65	; 0x41
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 8008c60:	4639      	mov	r1, r7
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8008c62:	f887 441c 	strb.w	r4, [r7, #1052]	; 0x41c
        hdfu->dev_status[4] = hdfu->dev_state;
 8008c66:	f887 4418 	strb.w	r4, [r7, #1048]	; 0x418
  USBD_StatusTypeDef ret = USBD_OK;
 8008c6a:	4664      	mov	r4, ip
        hdfu->dev_status[1] = 0U;
 8008c6c:	f8a7 c415 	strh.w	ip, [r7, #1045]	; 0x415
        hdfu->dev_status[3] = 0U;
 8008c70:	f887 c417 	strb.w	ip, [r7, #1047]	; 0x417
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8008c74:	70bb      	strb	r3, [r7, #2]
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 8008c76:	f000 fda3 	bl	80097c0 <USBD_CtlSendData>
 8008c7a:	e68a      	b.n	8008992 <USBD_DFU_Setup+0x36>
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8008c7c:	f8d0 72d0 	ldr.w	r7, [r0, #720]	; 0x2d0
  if (desc->wTotalLength > desc->bLength)
 8008c80:	783b      	ldrb	r3, [r7, #0]
 8008c82:	887a      	ldrh	r2, [r7, #2]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	f67f ae7f 	bls.w	8008988 <USBD_DFU_Setup+0x2c>
    ptr = desc->bLength;
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	f10d 0806 	add.w	r8, sp, #6
 8008c90:	f8ad 3006 	strh.w	r3, [sp, #6]
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c94:	4641      	mov	r1, r8
 8008c96:	f000 fa7b 	bl	8009190 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 8008c9a:	7843      	ldrb	r3, [r0, #1]
 8008c9c:	2b21      	cmp	r3, #33	; 0x21
 8008c9e:	d008      	beq.n	8008cb2 <USBD_DFU_Setup+0x356>
    while (ptr < desc->wTotalLength)
 8008ca0:	887a      	ldrh	r2, [r7, #2]
 8008ca2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d8f4      	bhi.n	8008c94 <USBD_DFU_Setup+0x338>
 8008caa:	e66d      	b.n	8008988 <USBD_DFU_Setup+0x2c>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8008cac:	f207 4414 	addw	r4, r7, #1044	; 0x414
 8008cb0:	e7a7      	b.n	8008c02 <USBD_DFU_Setup+0x2a6>
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8008cb2:	88f2      	ldrh	r2, [r6, #6]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cb4:	4601      	mov	r1, r0
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	2a09      	cmp	r2, #9
 8008cba:	bf28      	it	cs
 8008cbc:	2209      	movcs	r2, #9
 8008cbe:	f000 fd7f 	bl	80097c0 <USBD_CtlSendData>
 8008cc2:	e666      	b.n	8008992 <USBD_DFU_Setup+0x36>
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8008cc4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      hdfu->wblock_num = req->wValue;
 8008cc8:	8871      	ldrh	r1, [r6, #2]
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8008cca:	f04f 0303 	mov.w	r3, #3
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8008cce:	4628      	mov	r0, r5
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8008cd0:	bf28      	it	cs
 8008cd2:	f44f 6280 	movcs.w	r2, #1024	; 0x400
      hdfu->wblock_num = req->wValue;
 8008cd6:	f8c7 1400 	str.w	r1, [r7, #1024]	; 0x400
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8008cda:	f887 341c 	strb.w	r3, [r7, #1052]	; 0x41c
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8008cde:	4639      	mov	r1, r7
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8008ce0:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
  USBD_StatusTypeDef ret = USBD_OK;
 8008ce4:	2400      	movs	r4, #0
      hdfu->dev_status[4] = hdfu->dev_state;
 8008ce6:	f887 3418 	strb.w	r3, [r7, #1048]	; 0x418
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8008cea:	f000 fd81 	bl	80097f0 <USBD_CtlPrepareRx>
 8008cee:	e650      	b.n	8008992 <USBD_DFU_Setup+0x36>
      if (hdfu->wlength != 0U)
 8008cf0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8008cf4:	b393      	cbz	r3, 8008d5c <USBD_DFU_Setup+0x400>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8008cf6:	2204      	movs	r2, #4
        hdfu->dev_status[1] = 0U;
 8008cf8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8008cfc:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8008d00:	f207 4414 	addw	r4, r7, #1044	; 0x414
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8008d04:	f887 241c 	strb.w	r2, [r7, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 8008d08:	f8c7 3415 	str.w	r3, [r7, #1045]	; 0x415
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8008d0c:	b911      	cbnz	r1, 8008d14 <USBD_DFU_Setup+0x3b8>
 8008d0e:	783b      	ldrb	r3, [r7, #0]
 8008d10:	2b41      	cmp	r3, #65	; 0x41
 8008d12:	d050      	beq.n	8008db6 <USBD_DFU_Setup+0x45a>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8008d14:	69b3      	ldr	r3, [r6, #24]
 8008d16:	4622      	mov	r2, r4
 8008d18:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	4798      	blx	r3
 8008d20:	e76f      	b.n	8008c02 <USBD_DFU_Setup+0x2a6>
      else if (hdfu->wblock_num > 1U)
 8008d22:	f1bc 0f01 	cmp.w	ip, #1
 8008d26:	d039      	beq.n	8008d9c <USBD_DFU_Setup+0x440>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8008d28:	2309      	movs	r3, #9
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008d2a:	f1ac 0c02 	sub.w	ip, ip, #2
 8008d2e:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8008d32:	f887 341c 	strb.w	r3, [r7, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 8008d36:	f04f 6310 	mov.w	r3, #150994944	; 0x9000000
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8008d3a:	eb00 208c 	add.w	r0, r0, ip, lsl #10
        hdfu->dev_status[1] = 0U;
 8008d3e:	f8c7 3415 	str.w	r3, [r7, #1045]	; 0x415
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8008d42:	694b      	ldr	r3, [r1, #20]
 8008d44:	4639      	mov	r1, r7
 8008d46:	4798      	blx	r3
          if (phaddr == NULL)
 8008d48:	4604      	mov	r4, r0
 8008d4a:	b1d8      	cbz	r0, 8008d84 <USBD_DFU_Setup+0x428>
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8008d4c:	4601      	mov	r1, r0
 8008d4e:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 8008d52:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8008d54:	2400      	movs	r4, #0
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8008d56:	f000 fd33 	bl	80097c0 <USBD_CtlSendData>
 8008d5a:	e61a      	b.n	8008992 <USBD_DFU_Setup+0x36>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8008d5c:	2205      	movs	r2, #5
        hdfu->dev_status[1] = 0U;
 8008d5e:	f04f 63a0 	mov.w	r3, #83886080	; 0x5000000
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8008d62:	f207 4414 	addw	r4, r7, #1044	; 0x414
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8008d66:	f887 241c 	strb.w	r2, [r7, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 8008d6a:	f8c7 3415 	str.w	r3, [r7, #1045]	; 0x415
 8008d6e:	e748      	b.n	8008c02 <USBD_DFU_Setup+0x2a6>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8008d70:	2207      	movs	r2, #7
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 8008d72:	f103 63e0 	add.w	r3, r3, #117440512	; 0x7000000
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8008d76:	f207 4414 	addw	r4, r7, #1044	; 0x414
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8008d7a:	f887 241c 	strb.w	r2, [r7, #1052]	; 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 8008d7e:	f8c7 3415 	str.w	r3, [r7, #1045]	; 0x415
 8008d82:	e73e      	b.n	8008c02 <USBD_DFU_Setup+0x2a6>
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8008d84:	230f      	movs	r3, #15
            USBD_CtlError(pdev, req);
 8008d86:	4631      	mov	r1, r6
 8008d88:	4628      	mov	r0, r5
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8008d8a:	f887 341c 	strb.w	r3, [r7, #1052]	; 0x41c
            hdfu->dev_status[1] = 0U;
 8008d8e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8008d92:	f8c7 3415 	str.w	r3, [r7, #1045]	; 0x415
            USBD_CtlError(pdev, req);
 8008d96:	f000 fcd9 	bl	800974c <USBD_CtlError>
 8008d9a:	e5fa      	b.n	8008992 <USBD_DFU_Setup+0x36>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8008d9c:	220f      	movs	r2, #15
        hdfu->dev_status[1] = 0U;
 8008d9e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
        USBD_CtlError(pdev, req);
 8008da2:	4631      	mov	r1, r6
 8008da4:	4628      	mov	r0, r5
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8008da6:	f887 241c 	strb.w	r2, [r7, #1052]	; 0x41c
  USBD_StatusTypeDef ret = USBD_OK;
 8008daa:	2400      	movs	r4, #0
        hdfu->dev_status[1] = 0U;
 8008dac:	f8c7 3415 	str.w	r3, [r7, #1045]	; 0x415
        USBD_CtlError(pdev, req);
 8008db0:	f000 fccc 	bl	800974c <USBD_CtlError>
 8008db4:	e5ed      	b.n	8008992 <USBD_DFU_Setup+0x36>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8008db6:	69b3      	ldr	r3, [r6, #24]
 8008db8:	4622      	mov	r2, r4
 8008dba:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
 8008dbe:	4798      	blx	r3
 8008dc0:	e71f      	b.n	8008c02 <USBD_DFU_Setup+0x2a6>
 8008dc2:	bf00      	nop

08008dc4 <USBD_DFU_RegisterMedia>:
{
 8008dc4:	4603      	mov	r3, r0
  if (fops == NULL)
 8008dc6:	b139      	cbz	r1, 8008dd8 <USBD_DFU_RegisterMedia+0x14>
  pdev->pUserData[pdev->classId] = fops;
 8008dc8:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
  return (uint8_t)USBD_OK;
 8008dcc:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 8008dce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008dd2:	f8c3 12c4 	str.w	r1, [r3, #708]	; 0x2c4
  return (uint8_t)USBD_OK;
 8008dd6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8008dd8:	2003      	movs	r0, #3
}
 8008dda:	4770      	bx	lr

08008ddc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ddc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008dde:	b188      	cbz	r0, 8008e04 <USBD_Init+0x28>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008de0:	2300      	movs	r3, #0
 8008de2:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008de6:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008dea:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008dee:	b109      	cbz	r1, 8008df4 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8008df0:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008df4:	2301      	movs	r3, #1
  pdev->id = id;
 8008df6:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008df8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);

  return ret;
}
 8008dfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ret = USBD_LL_Init(pdev);
 8008e00:	f000 bee6 	b.w	8009bd0 <USBD_LL_Init>
    USBD_ErrLog("Invalid Device handle");
 8008e04:	4805      	ldr	r0, [pc, #20]	; (8008e1c <USBD_Init+0x40>)
 8008e06:	f001 fbe1 	bl	800a5cc <iprintf>
 8008e0a:	4805      	ldr	r0, [pc, #20]	; (8008e20 <USBD_Init+0x44>)
 8008e0c:	f001 fbde 	bl	800a5cc <iprintf>
 8008e10:	200a      	movs	r0, #10
 8008e12:	f001 fbed 	bl	800a5f0 <putchar>
}
 8008e16:	2003      	movs	r0, #3
 8008e18:	bd08      	pop	{r3, pc}
 8008e1a:	bf00      	nop
 8008e1c:	0800bf58 	.word	0x0800bf58
 8008e20:	0800bf60 	.word	0x0800bf60

08008e24 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e24:	b510      	push	{r4, lr}
  uint16_t len = 0U;
 8008e26:	2300      	movs	r3, #0
{
 8008e28:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8008e2a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8008e2e:	b189      	cbz	r1, 8008e54 <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008e30:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008e32:	4604      	mov	r4, r0
  pdev->pClass[0] = pclass;
 8008e34:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008e38:	b123      	cbz	r3, 8008e44 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008e3a:	f10d 0006 	add.w	r0, sp, #6
 8008e3e:	4798      	blx	r3
 8008e40:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008e44:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 8008e48:	2000      	movs	r0, #0
  pdev->NumClasses++;
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
}
 8008e50:	b002      	add	sp, #8
 8008e52:	bd10      	pop	{r4, pc}
    USBD_ErrLog("Invalid Class handle");
 8008e54:	4805      	ldr	r0, [pc, #20]	; (8008e6c <USBD_RegisterClass+0x48>)
 8008e56:	f001 fbb9 	bl	800a5cc <iprintf>
 8008e5a:	4805      	ldr	r0, [pc, #20]	; (8008e70 <USBD_RegisterClass+0x4c>)
 8008e5c:	f001 fbb6 	bl	800a5cc <iprintf>
 8008e60:	200a      	movs	r0, #10
 8008e62:	f001 fbc5 	bl	800a5f0 <putchar>
    return USBD_FAIL;
 8008e66:	2003      	movs	r0, #3
 8008e68:	e7f2      	b.n	8008e50 <USBD_RegisterClass+0x2c>
 8008e6a:	bf00      	nop
 8008e6c:	0800bf58 	.word	0x0800bf58
 8008e70:	0800bf78 	.word	0x0800bf78

08008e74 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008e74:	f000 bee4 	b.w	8009c40 <USBD_LL_Start>

08008e78 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8008e78:	b510      	push	{r4, lr}
 8008e7a:	4604      	mov	r4, r0
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8008e7c:	f000 feee 	bl	8009c5c <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8008e80:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8008e84:	b11b      	cbz	r3, 8008e8e <USBD_Stop+0x16>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	4620      	mov	r0, r4
 8008e8a:	7921      	ldrb	r1, [r4, #4]
 8008e8c:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
}
 8008e8e:	2000      	movs	r0, #0
 8008e90:	bd10      	pop	{r4, pc}
 8008e92:	bf00      	nop

08008e94 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008e94:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008e98:	b10b      	cbz	r3, 8008e9e <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop

08008ea4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ea4:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008ea6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8008eae:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8008eb0:	bf18      	it	ne
 8008eb2:	2003      	movne	r0, #3
 8008eb4:	bd08      	pop	{r3, pc}
 8008eb6:	bf00      	nop

08008eb8 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008eb8:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008eba:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 8008ebe:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	f000 fc37 	bl	8009734 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 8008ec6:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 8008eca:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8008ece:	2201      	movs	r2, #1
  pdev->ep0_data_len = pdev->request.wLength;
 8008ed0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8008ed4:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 8008ed8:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d009      	beq.n	8008ef4 <USBD_LL_SetupStage+0x3c>
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d013      	beq.n	8008f0c <USBD_LL_SetupStage+0x54>
 8008ee4:	b163      	cbz	r3, 8008f00 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8008eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ef0:	f000 bed4 	b.w	8009c9c <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	4620      	mov	r0, r4
}
 8008ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008efc:	f000 bb2a 	b.w	8009554 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008f00:	4629      	mov	r1, r5
 8008f02:	4620      	mov	r0, r4
}
 8008f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008f08:	f000 b948 	b.w	800919c <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	4620      	mov	r0, r4
}
 8008f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008f14:	f000 bb60 	b.w	80095d8 <USBD_StdEPReq>

08008f18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8008f1c:	b931      	cbnz	r1, 8008f2c <USBD_LL_DataOutStage+0x14>
 8008f1e:	460b      	mov	r3, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f20:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 8008f24:	2903      	cmp	r1, #3
 8008f26:	d010      	beq.n	8008f4a <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 8008f28:	2000      	movs	r0, #0
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f2c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d1f9      	bne.n	8008f28 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f34:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0f4      	beq.n	8008f28 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 8008f3e:	2200      	movs	r2, #0
}
 8008f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8008f44:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f48:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8008f4a:	e9d0 1557 	ldrd	r1, r5, [r0, #348]	; 0x15c
 8008f4e:	42a9      	cmp	r1, r5
 8008f50:	d808      	bhi.n	8008f64 <USBD_LL_DataOutStage+0x4c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f52:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008f56:	2a03      	cmp	r2, #3
 8008f58:	d00f      	beq.n	8008f7a <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f000 fc60 	bl	8009820 <USBD_CtlSendStatus>
}
 8008f60:	2000      	movs	r0, #0
 8008f62:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8008f64:	1b4b      	subs	r3, r1, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008f66:	4611      	mov	r1, r2
 8008f68:	462a      	mov	r2, r5
 8008f6a:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 8008f6c:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008f70:	bf28      	it	cs
 8008f72:	461a      	movcs	r2, r3
 8008f74:	f000 fc4a 	bl	800980c <USBD_CtlContinueRx>
 8008f78:	e7d6      	b.n	8008f28 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008f7a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8008f7e:	6912      	ldr	r2, [r2, #16]
 8008f80:	2a00      	cmp	r2, #0
 8008f82:	d0ea      	beq.n	8008f5a <USBD_LL_DataOutStage+0x42>
              pdev->classId = idx;
 8008f84:	f8c0 32d4 	str.w	r3, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008f88:	4790      	blx	r2
 8008f8a:	e7e6      	b.n	8008f5a <USBD_LL_DataOutStage+0x42>

08008f8c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f90:	b959      	cbnz	r1, 8008faa <USBD_LL_DataInStage+0x1e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f92:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d016      	beq.n	8008fc8 <USBD_LL_DataInStage+0x3c>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008f9a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8008f9e:	b113      	cbz	r3, 8008fa6 <USBD_LL_DataInStage+0x1a>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008faa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d1f9      	bne.n	8008fa6 <USBD_LL_DataInStage+0x1a>
        if (pdev->pClass[idx]->DataIn != NULL)
 8008fb2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0f4      	beq.n	8008fa6 <USBD_LL_DataInStage+0x1a>
          pdev->classId = idx;
 8008fbc:	2200      	movs	r2, #0
}
 8008fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8008fc2:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008fc6:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8008fc8:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 8008fcc:	460d      	mov	r5, r1
 8008fce:	42b3      	cmp	r3, r6
 8008fd0:	d810      	bhi.n	8008ff4 <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 8008fd2:	d01c      	beq.n	800900e <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d02b      	beq.n	8009034 <USBD_LL_DataInStage+0xa8>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fdc:	2180      	movs	r1, #128	; 0x80
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f000 fe5c 	bl	8009c9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f000 fc27 	bl	8009838 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 8008fea:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0d9      	beq.n	8008fa6 <USBD_LL_DataInStage+0x1a>
 8008ff2:	e7d5      	b.n	8008fa0 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8008ff4:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ff6:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8008ff8:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f000 fbee 	bl	80097dc <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009000:	462b      	mov	r3, r5
 8009002:	462a      	mov	r2, r5
 8009004:	4629      	mov	r1, r5
 8009006:	4620      	mov	r0, r4
 8009008:	f000 fe94 	bl	8009d34 <USBD_LL_PrepareReceive>
 800900c:	e7c5      	b.n	8008f9a <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800900e:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8009010:	4293      	cmp	r3, r2
 8009012:	d8df      	bhi.n	8008fd4 <USBD_LL_DataInStage+0x48>
            (pep->total_length >= pep->maxpacket) &&
 8009014:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8009018:	429a      	cmp	r2, r3
 800901a:	d2db      	bcs.n	8008fd4 <USBD_LL_DataInStage+0x48>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800901c:	460a      	mov	r2, r1
 800901e:	f000 fbdd 	bl	80097dc <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009022:	462b      	mov	r3, r5
 8009024:	462a      	mov	r2, r5
 8009026:	4629      	mov	r1, r5
 8009028:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800902a:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800902e:	f000 fe81 	bl	8009d34 <USBD_LL_PrepareReceive>
 8009032:	e7b2      	b.n	8008f9a <USBD_LL_DataInStage+0xe>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009034:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d0ce      	beq.n	8008fdc <USBD_LL_DataInStage+0x50>
              pdev->classId = 0U;
 800903e:	2200      	movs	r2, #0
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009040:	4620      	mov	r0, r4
              pdev->classId = 0U;
 8009042:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009046:	4798      	blx	r3
 8009048:	e7c8      	b.n	8008fdc <USBD_LL_DataInStage+0x50>
 800904a:	bf00      	nop

0800904c <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800904e:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009050:	2201      	movs	r2, #1
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009052:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
{
 8009056:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009058:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800905c:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800905e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 8009062:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009066:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 800906a:	b11b      	cbz	r3, 8009074 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	b10b      	cbz	r3, 8009074 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009070:	4798      	blx	r3
 8009072:	b9b0      	cbnz	r0, 80090a2 <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 8009074:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009076:	2340      	movs	r3, #64	; 0x40
 8009078:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800907a:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800907c:	4620      	mov	r0, r4

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800907e:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009080:	4611      	mov	r1, r2
 8009082:	f000 fdf9 	bl	8009c78 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009086:	2200      	movs	r2, #0
 8009088:	462b      	mov	r3, r5
 800908a:	2180      	movs	r1, #128	; 0x80
 800908c:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800908e:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009092:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009096:	f000 fdef 	bl	8009c78 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return ret;
}
 800909a:	4638      	mov	r0, r7
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800909c:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800909e:	6225      	str	r5, [r4, #32]
}
 80090a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 80090a2:	2703      	movs	r7, #3
 80090a4:	e7e7      	b.n	8009076 <USBD_LL_Reset+0x2a>
 80090a6:	bf00      	nop

080090a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80090a8:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 80090aa:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 80090ac:	7419      	strb	r1, [r3, #16]
}
 80090ae:	4770      	bx	lr

080090b0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80090b0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 80090b4:	4603      	mov	r3, r0
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80090b6:	2a04      	cmp	r2, #4
 80090b8:	d004      	beq.n	80090c4 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 80090ba:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80090be:	b2d2      	uxtb	r2, r2
 80090c0:	f880 229d 	strb.w	r2, [r0, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80090c4:	2204      	movs	r2, #4

  return USBD_OK;
}
 80090c6:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80090c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop

080090d0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80090d4:	2b04      	cmp	r3, #4
 80090d6:	d104      	bne.n	80090e2 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090d8:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80090e2:	2000      	movs	r0, #0
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop

080090e8 <USBD_LL_SOF>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80090ec:	2a03      	cmp	r2, #3
 80090ee:	d001      	beq.n	80090f4 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 80090f0:	2000      	movs	r0, #0
 80090f2:	4770      	bx	lr
{
 80090f4:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 80090f6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80090fa:	b113      	cbz	r3, 8009102 <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 80090fc:	69db      	ldr	r3, [r3, #28]
 80090fe:	b103      	cbz	r3, 8009102 <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 8009100:	4798      	blx	r3
}
 8009102:	2000      	movs	r0, #0
 8009104:	bd08      	pop	{r3, pc}
 8009106:	bf00      	nop

08009108 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8009108:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 800910c:	32ae      	adds	r2, #174	; 0xae
 800910e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8009112:	b15a      	cbz	r2, 800912c <USBD_LL_IsoINIncomplete+0x24>
{
 8009114:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009116:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800911a:	2b03      	cmp	r3, #3
 800911c:	d001      	beq.n	8009122 <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800911e:	2000      	movs	r0, #0
}
 8009120:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009122:	6a13      	ldr	r3, [r2, #32]
 8009124:	b123      	cbz	r3, 8009130 <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009126:	4798      	blx	r3
  return USBD_OK;
 8009128:	2000      	movs	r0, #0
}
 800912a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800912c:	2003      	movs	r0, #3
}
 800912e:	4770      	bx	lr
  return USBD_OK;
 8009130:	4618      	mov	r0, r3
}
 8009132:	bd08      	pop	{r3, pc}

08009134 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8009134:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8009138:	32ae      	adds	r2, #174	; 0xae
 800913a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800913e:	b15a      	cbz	r2, 8009158 <USBD_LL_IsoOUTIncomplete+0x24>
{
 8009140:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009142:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009146:	2b03      	cmp	r3, #3
 8009148:	d001      	beq.n	800914e <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800914a:	2000      	movs	r0, #0
}
 800914c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800914e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8009150:	b123      	cbz	r3, 800915c <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009152:	4798      	blx	r3
  return USBD_OK;
 8009154:	2000      	movs	r0, #0
}
 8009156:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8009158:	2003      	movs	r0, #3
}
 800915a:	4770      	bx	lr
  return USBD_OK;
 800915c:	4618      	mov	r0, r3
}
 800915e:	bd08      	pop	{r3, pc}

08009160 <USBD_LL_DevConnected>:
 8009160:	2000      	movs	r0, #0
 8009162:	4770      	bx	lr

08009164 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009164:	2101      	movs	r1, #1
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009166:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800916a:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass[0] != NULL)
 800916e:	b142      	cbz	r2, 8009182 <USBD_LL_DevDisconnected+0x1e>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009170:	6852      	ldr	r2, [r2, #4]
 8009172:	7901      	ldrb	r1, [r0, #4]
{
 8009174:	b508      	push	{r3, lr}
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009176:	4790      	blx	r2
 8009178:	b908      	cbnz	r0, 800917e <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 800917a:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800917c:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 800917e:	2003      	movs	r0, #3
}
 8009180:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8009182:	2000      	movs	r0, #0
}
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop

08009188 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8009188:	2000      	movs	r0, #0
 800918a:	4770      	bx	lr

0800918c <USBD_CoreFindEP>:
 800918c:	2000      	movs	r0, #0
 800918e:	4770      	bx	lr

08009190 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8009190:	7802      	ldrb	r2, [r0, #0]
 8009192:	880b      	ldrh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);

  return (pnext);
}
 8009194:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 8009196:	4413      	add	r3, r2
 8009198:	800b      	strh	r3, [r1, #0]
}
 800919a:	4770      	bx	lr

0800919c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919e:	780c      	ldrb	r4, [r1, #0]
 80091a0:	b083      	sub	sp, #12
 80091a2:	460e      	mov	r6, r1
 80091a4:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091a6:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80091aa:	2c20      	cmp	r4, #32
 80091ac:	d00e      	beq.n	80091cc <USBD_StdDevReq+0x30>
 80091ae:	2c40      	cmp	r4, #64	; 0x40
 80091b0:	d00c      	beq.n	80091cc <USBD_StdDevReq+0x30>
 80091b2:	b1bc      	cbz	r4, 80091e4 <USBD_StdDevReq+0x48>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091b4:	2180      	movs	r1, #128	; 0x80
 80091b6:	4628      	mov	r0, r5
 80091b8:	f000 fd70 	bl	8009c9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091bc:	2100      	movs	r1, #0
 80091be:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 80091c0:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 80091c2:	f000 fd6b 	bl	8009c9c <USBD_LL_StallEP>
}
 80091c6:	4620      	mov	r0, r4
 80091c8:	b003      	add	sp, #12
 80091ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80091cc:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
 80091d0:	4631      	mov	r1, r6
 80091d2:	4628      	mov	r0, r5
 80091d4:	33ae      	adds	r3, #174	; 0xae
 80091d6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80091da:	689b      	ldr	r3, [r3, #8]
}
 80091dc:	b003      	add	sp, #12
 80091de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80091e2:	4718      	bx	r3
      switch (req->bRequest)
 80091e4:	784b      	ldrb	r3, [r1, #1]
 80091e6:	2b09      	cmp	r3, #9
 80091e8:	d8e4      	bhi.n	80091b4 <USBD_StdDevReq+0x18>
 80091ea:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <USBD_StdDevReq+0x54>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009251 	.word	0x08009251
 80091f4:	0800927b 	.word	0x0800927b
 80091f8:	080091b5 	.word	0x080091b5
 80091fc:	08009299 	.word	0x08009299
 8009200:	080091b5 	.word	0x080091b5
 8009204:	080092bb 	.word	0x080092bb
 8009208:	080092f3 	.word	0x080092f3
 800920c:	080091b5 	.word	0x080091b5
 8009210:	08009345 	.word	0x08009345
 8009214:	08009219 	.word	0x08009219
  cfgidx = (uint8_t)(req->wValue);
 8009218:	7889      	ldrb	r1, [r1, #2]
 800921a:	4eb5      	ldr	r6, [pc, #724]	; (80094f0 <USBD_StdDevReq+0x354>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800921c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800921e:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009220:	f200 8168 	bhi.w	80094f4 <USBD_StdDevReq+0x358>
  switch (pdev->dev_state)
 8009224:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009228:	2b02      	cmp	r3, #2
 800922a:	b2df      	uxtb	r7, r3
 800922c:	f000 8123 	beq.w	8009476 <USBD_StdDevReq+0x2da>
 8009230:	2f03      	cmp	r7, #3
 8009232:	f000 8134 	beq.w	800949e <USBD_StdDevReq+0x302>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009236:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 8009238:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800923a:	f000 fd2f 	bl	8009c9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800923e:	2100      	movs	r1, #0
 8009240:	4628      	mov	r0, r5
 8009242:	f000 fd2b 	bl	8009c9c <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009246:	7831      	ldrb	r1, [r6, #0]
 8009248:	4628      	mov	r0, r5
 800924a:	f7ff fe2b 	bl	8008ea4 <USBD_ClrClassConfig>
      break;
 800924e:	e7ba      	b.n	80091c6 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8009250:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8009254:	3a01      	subs	r2, #1
 8009256:	2a02      	cmp	r2, #2
 8009258:	d824      	bhi.n	80092a4 <USBD_StdDevReq+0x108>
      if (req->wLength != 0x2U)
 800925a:	88ca      	ldrh	r2, [r1, #6]
 800925c:	2a02      	cmp	r2, #2
 800925e:	d121      	bne.n	80092a4 <USBD_StdDevReq+0x108>
      if (pdev->dev_remote_wakeup != 0U)
 8009260:	f8d0 42a4 	ldr.w	r4, [r0, #676]	; 0x2a4
 8009264:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009266:	2c00      	cmp	r4, #0
  USBD_StatusTypeDef ret = USBD_OK;
 8009268:	461c      	mov	r4, r3
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800926a:	bf14      	ite	ne
 800926c:	2303      	movne	r3, #3
 800926e:	2301      	moveq	r3, #1
 8009270:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009274:	f000 faa4 	bl	80097c0 <USBD_CtlSendData>
      break;
 8009278:	e7a5      	b.n	80091c6 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800927a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800927e:	3b01      	subs	r3, #1
 8009280:	2b02      	cmp	r3, #2
 8009282:	d80f      	bhi.n	80092a4 <USBD_StdDevReq+0x108>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009284:	884b      	ldrh	r3, [r1, #2]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d19d      	bne.n	80091c6 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800928a:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 800928c:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 800928e:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009292:	f000 fac5 	bl	8009820 <USBD_CtlSendStatus>
  return ret;
 8009296:	e796      	b.n	80091c6 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009298:	884b      	ldrh	r3, [r1, #2]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d0f6      	beq.n	800928c <USBD_StdDevReq+0xf0>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800929e:	2b02      	cmp	r3, #2
 80092a0:	f000 811e 	beq.w	80094e0 <USBD_StdDevReq+0x344>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092a4:	2180      	movs	r1, #128	; 0x80
 80092a6:	4628      	mov	r0, r5
 80092a8:	f000 fcf8 	bl	8009c9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092ac:	2100      	movs	r1, #0
 80092ae:	4628      	mov	r0, r5
 80092b0:	f000 fcf4 	bl	8009c9c <USBD_LL_StallEP>
}
 80092b4:	4620      	mov	r0, r4
 80092b6:	b003      	add	sp, #12
 80092b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092ba:	888b      	ldrh	r3, [r1, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1f1      	bne.n	80092a4 <USBD_StdDevReq+0x108>
 80092c0:	88cb      	ldrh	r3, [r1, #6]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1ee      	bne.n	80092a4 <USBD_StdDevReq+0x108>
 80092c6:	884e      	ldrh	r6, [r1, #2]
 80092c8:	2e7f      	cmp	r6, #127	; 0x7f
 80092ca:	d8eb      	bhi.n	80092a4 <USBD_StdDevReq+0x108>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d0e7      	beq.n	80092a4 <USBD_StdDevReq+0x108>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092d4:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80092d6:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092da:	f000 fd0f 	bl	8009cfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80092de:	4628      	mov	r0, r5
 80092e0:	f000 fa9e 	bl	8009820 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80092e4:	2e00      	cmp	r6, #0
 80092e6:	f040 80f7 	bne.w	80094d8 <USBD_StdDevReq+0x33c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092ea:	2301      	movs	r3, #1
 80092ec:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80092f0:	e769      	b.n	80091c6 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 80092f2:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 80092f4:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 80092f6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80092fa:	0a13      	lsrs	r3, r2, #8
 80092fc:	3b01      	subs	r3, #1
 80092fe:	2b0e      	cmp	r3, #14
 8009300:	d8d0      	bhi.n	80092a4 <USBD_StdDevReq+0x108>
 8009302:	a101      	add	r1, pc, #4	; (adr r1, 8009308 <USBD_StdDevReq+0x16c>)
 8009304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009308:	080093fb 	.word	0x080093fb
 800930c:	080093e1 	.word	0x080093e1
 8009310:	080093cf 	.word	0x080093cf
 8009314:	080092a5 	.word	0x080092a5
 8009318:	080092a5 	.word	0x080092a5
 800931c:	080093b9 	.word	0x080093b9
 8009320:	0800939f 	.word	0x0800939f
 8009324:	080092a5 	.word	0x080092a5
 8009328:	080092a5 	.word	0x080092a5
 800932c:	080092a5 	.word	0x080092a5
 8009330:	080092a5 	.word	0x080092a5
 8009334:	080092a5 	.word	0x080092a5
 8009338:	080092a5 	.word	0x080092a5
 800933c:	080092a5 	.word	0x080092a5
 8009340:	0800936b 	.word	0x0800936b
  if (req->wLength != 1U)
 8009344:	88ca      	ldrh	r2, [r1, #6]
 8009346:	2a01      	cmp	r2, #1
 8009348:	d1ac      	bne.n	80092a4 <USBD_StdDevReq+0x108>
    switch (pdev->dev_state)
 800934a:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800934e:	2902      	cmp	r1, #2
 8009350:	b2cb      	uxtb	r3, r1
 8009352:	f200 8089 	bhi.w	8009468 <USBD_StdDevReq+0x2cc>
 8009356:	2b00      	cmp	r3, #0
 8009358:	f43f af2c 	beq.w	80091b4 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800935c:	4601      	mov	r1, r0
 800935e:	2300      	movs	r3, #0
 8009360:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009364:	f000 fa2c 	bl	80097c0 <USBD_CtlSendData>
        break;
 8009368:	e72d      	b.n	80091c6 <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800936a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800936e:	69db      	ldr	r3, [r3, #28]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d097      	beq.n	80092a4 <USBD_StdDevReq+0x108>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009374:	f10d 0106 	add.w	r1, sp, #6
 8009378:	7c28      	ldrb	r0, [r5, #16]
 800937a:	4798      	blx	r3
  if (req->wLength != 0U)
 800937c:	88f2      	ldrh	r2, [r6, #6]
 800937e:	2a00      	cmp	r2, #0
 8009380:	d06e      	beq.n	8009460 <USBD_StdDevReq+0x2c4>
    if (len != 0U)
 8009382:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d08c      	beq.n	80092a4 <USBD_StdDevReq+0x108>
      len = MIN(len, req->wLength);
 800938a:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800938c:	4601      	mov	r1, r0
 800938e:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 8009390:	bf28      	it	cs
 8009392:	461a      	movcs	r2, r3
 8009394:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009398:	f000 fa12 	bl	80097c0 <USBD_CtlSendData>
 800939c:	e713      	b.n	80091c6 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800939e:	7c03      	ldrb	r3, [r0, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f47f af7f 	bne.w	80092a4 <USBD_StdDevReq+0x108>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80093a6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80093aa:	f10d 0006 	add.w	r0, sp, #6
 80093ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093b2:	2307      	movs	r3, #7
 80093b4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80093b6:	e7e1      	b.n	800937c <USBD_StdDevReq+0x1e0>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093b8:	7c03      	ldrb	r3, [r0, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f47f af72 	bne.w	80092a4 <USBD_StdDevReq+0x108>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80093c0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80093c4:	f10d 0006 	add.w	r0, sp, #6
 80093c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ca:	4798      	blx	r3
  if (err != 0U)
 80093cc:	e7d6      	b.n	800937c <USBD_StdDevReq+0x1e0>
      switch ((uint8_t)(req->wValue))
 80093ce:	b2d1      	uxtb	r1, r2
 80093d0:	2905      	cmp	r1, #5
 80093d2:	f200 80a8 	bhi.w	8009526 <USBD_StdDevReq+0x38a>
 80093d6:	e8df f001 	tbb	[pc, r1]
 80093da:	1e24      	.short	0x1e24
 80093dc:	362a3018 	.word	0x362a3018
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093e0:	7c03      	ldrb	r3, [r0, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f040 808f 	bne.w	8009506 <USBD_StdDevReq+0x36a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80093e8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80093ec:	f10d 0006 	add.w	r0, sp, #6
 80093f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093f4:	2302      	movs	r3, #2
 80093f6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80093f8:	e7c0      	b.n	800937c <USBD_StdDevReq+0x1e0>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80093fe:	f10d 0106 	add.w	r1, sp, #6
 8009402:	7c00      	ldrb	r0, [r0, #16]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4798      	blx	r3
  if (err != 0U)
 8009408:	e7b8      	b.n	800937c <USBD_StdDevReq+0x1e0>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800940a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1af      	bne.n	8009374 <USBD_StdDevReq+0x1d8>
 8009414:	e746      	b.n	80092a4 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009416:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1a9      	bne.n	8009374 <USBD_StdDevReq+0x1d8>
 8009420:	e740      	b.n	80092a4 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009422:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1a3      	bne.n	8009374 <USBD_StdDevReq+0x1d8>
 800942c:	e73a      	b.n	80092a4 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800942e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d19d      	bne.n	8009374 <USBD_StdDevReq+0x1d8>
 8009438:	e734      	b.n	80092a4 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800943a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d197      	bne.n	8009374 <USBD_StdDevReq+0x1d8>
 8009444:	e72e      	b.n	80092a4 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009446:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d191      	bne.n	8009374 <USBD_StdDevReq+0x1d8>
 8009450:	e728      	b.n	80092a4 <USBD_StdDevReq+0x108>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009452:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8009454:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009456:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009458:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800945c:	f7ff fd22 	bl	8008ea4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009460:	4628      	mov	r0, r5
 8009462:	f000 f9dd 	bl	8009820 <USBD_CtlSendStatus>
 8009466:	e6ae      	b.n	80091c6 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8009468:	2b03      	cmp	r3, #3
 800946a:	f47f aea3 	bne.w	80091b4 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800946e:	1d01      	adds	r1, r0, #4
 8009470:	f000 f9a6 	bl	80097c0 <USBD_CtlSendData>
        break;
 8009474:	e6a7      	b.n	80091c6 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 8009476:	2900      	cmp	r1, #0
 8009478:	d0f2      	beq.n	8009460 <USBD_StdDevReq+0x2c4>
        pdev->dev_config = cfgidx;
 800947a:	2101      	movs	r1, #1
 800947c:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800947e:	f7ff fd09 	bl	8008e94 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8009482:	4604      	mov	r4, r0
 8009484:	2800      	cmp	r0, #0
 8009486:	d047      	beq.n	8009518 <USBD_StdDevReq+0x37c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009488:	2180      	movs	r1, #128	; 0x80
 800948a:	4628      	mov	r0, r5
 800948c:	f000 fc06 	bl	8009c9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009490:	2100      	movs	r1, #0
 8009492:	4628      	mov	r0, r5
 8009494:	f000 fc02 	bl	8009c9c <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009498:	f885 729c 	strb.w	r7, [r5, #668]	; 0x29c
 800949c:	e693      	b.n	80091c6 <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800949e:	2900      	cmp	r1, #0
 80094a0:	d0d7      	beq.n	8009452 <USBD_StdDevReq+0x2b6>
      else if (cfgidx != pdev->dev_config)
 80094a2:	6841      	ldr	r1, [r0, #4]
 80094a4:	2901      	cmp	r1, #1
 80094a6:	d0db      	beq.n	8009460 <USBD_StdDevReq+0x2c4>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094a8:	b2c9      	uxtb	r1, r1
 80094aa:	f7ff fcfb 	bl	8008ea4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80094ae:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094b0:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 80094b2:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094b4:	f7ff fcee 	bl	8008e94 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80094b8:	4606      	mov	r6, r0
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d0d0      	beq.n	8009460 <USBD_StdDevReq+0x2c4>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094be:	2180      	movs	r1, #128	; 0x80
 80094c0:	4628      	mov	r0, r5
 80094c2:	f000 fbeb 	bl	8009c9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80094c6:	2100      	movs	r1, #0
 80094c8:	4628      	mov	r0, r5
 80094ca:	4634      	mov	r4, r6
 80094cc:	f000 fbe6 	bl	8009c9c <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094d0:	7929      	ldrb	r1, [r5, #4]
 80094d2:	4628      	mov	r0, r5
 80094d4:	f7ff fce6 	bl	8008ea4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094d8:	2302      	movs	r3, #2
 80094da:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80094de:	e672      	b.n	80091c6 <USBD_StdDevReq+0x2a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80094e0:	888b      	ldrh	r3, [r1, #4]
 80094e2:	0a1b      	lsrs	r3, r3, #8
 80094e4:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80094e8:	f000 f99a 	bl	8009820 <USBD_CtlSendStatus>
 80094ec:	e66b      	b.n	80091c6 <USBD_StdDevReq+0x2a>
 80094ee:	bf00      	nop
 80094f0:	2400ba77 	.word	0x2400ba77
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f4:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 80094f6:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f8:	f000 fbd0 	bl	8009c9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80094fc:	2100      	movs	r1, #0
 80094fe:	4628      	mov	r0, r5
 8009500:	f000 fbcc 	bl	8009c9c <USBD_LL_StallEP>
    return USBD_FAIL;
 8009504:	e65f      	b.n	80091c6 <USBD_StdDevReq+0x2a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009506:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800950a:	f10d 0006 	add.w	r0, sp, #6
 800950e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009510:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009512:	2302      	movs	r3, #2
 8009514:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8009516:	e731      	b.n	800937c <USBD_StdDevReq+0x1e0>
          (void)USBD_CtlSendStatus(pdev);
 8009518:	4628      	mov	r0, r5
 800951a:	f000 f981 	bl	8009820 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800951e:	2303      	movs	r3, #3
 8009520:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8009524:	e64f      	b.n	80091c6 <USBD_StdDevReq+0x2a>
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8009526:	f8d0 32d8 	ldr.w	r3, [r0, #728]	; 0x2d8
 800952a:	b173      	cbz	r3, 800954a <USBD_StdDevReq+0x3ae>
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 800952c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8009530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009532:	b143      	cbz	r3, 8009546 <USBD_StdDevReq+0x3aa>
              pdev->classId = idx;
 8009534:	2200      	movs	r2, #0
 8009536:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 800953a:	f10d 0206 	add.w	r2, sp, #6
 800953e:	4798      	blx	r3
              if (pbuf == NULL) /* This means that no class recognized the string index */
 8009540:	2800      	cmp	r0, #0
 8009542:	f47f af1b 	bne.w	800937c <USBD_StdDevReq+0x1e0>
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8009546:	2000      	movs	r0, #0
 8009548:	e718      	b.n	800937c <USBD_StdDevReq+0x1e0>
  if (req->wLength != 0U)
 800954a:	88f3      	ldrh	r3, [r6, #6]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f47f aea9 	bne.w	80092a4 <USBD_StdDevReq+0x108>
 8009552:	e785      	b.n	8009460 <USBD_StdDevReq+0x2c4>

08009554 <USBD_StdItfReq>:
{
 8009554:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009556:	780b      	ldrb	r3, [r1, #0]
{
 8009558:	460d      	mov	r5, r1
 800955a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800955c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8009560:	2a40      	cmp	r2, #64	; 0x40
 8009562:	d00b      	beq.n	800957c <USBD_StdItfReq+0x28>
 8009564:	065b      	lsls	r3, r3, #25
 8009566:	d509      	bpl.n	800957c <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 8009568:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800956a:	2180      	movs	r1, #128	; 0x80
 800956c:	f000 fb96 	bl	8009c9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009570:	4620      	mov	r0, r4
 8009572:	4629      	mov	r1, r5
 8009574:	f000 fb92 	bl	8009c9c <USBD_LL_StallEP>
}
 8009578:	4628      	mov	r0, r5
 800957a:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800957c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8009580:	3b01      	subs	r3, #1
 8009582:	2b02      	cmp	r3, #2
 8009584:	d802      	bhi.n	800958c <USBD_StdItfReq+0x38>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009586:	7929      	ldrb	r1, [r5, #4]
 8009588:	2901      	cmp	r1, #1
 800958a:	d90a      	bls.n	80095a2 <USBD_StdItfReq+0x4e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800958c:	2180      	movs	r1, #128	; 0x80
 800958e:	4620      	mov	r0, r4
 8009590:	f000 fb84 	bl	8009c9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009594:	2100      	movs	r1, #0
 8009596:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8009598:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800959a:	f000 fb7f 	bl	8009c9c <USBD_LL_StallEP>
}
 800959e:	4628      	mov	r0, r5
 80095a0:	bd38      	pop	{r3, r4, r5, pc}
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80095a2:	4620      	mov	r0, r4
 80095a4:	f7ff fdf0 	bl	8009188 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095a8:	b990      	cbnz	r0, 80095d0 <USBD_StdItfReq+0x7c>
              if (pdev->pClass[idx]->Setup != NULL)
 80095aa:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	b173      	cbz	r3, 80095d0 <USBD_StdItfReq+0x7c>
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095b2:	4629      	mov	r1, r5
                pdev->classId = idx;
 80095b4:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095b8:	4620      	mov	r0, r4
 80095ba:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095bc:	88eb      	ldrh	r3, [r5, #6]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095be:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1d9      	bne.n	8009578 <USBD_StdItfReq+0x24>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d1d7      	bne.n	8009578 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 f929 	bl	8009820 <USBD_CtlSendStatus>
 80095ce:	e7d3      	b.n	8009578 <USBD_StdItfReq+0x24>
              ret = USBD_FAIL;
 80095d0:	2503      	movs	r5, #3
}
 80095d2:	4628      	mov	r0, r5
 80095d4:	bd38      	pop	{r3, r4, r5, pc}
 80095d6:	bf00      	nop

080095d8 <USBD_StdEPReq>:
{
 80095d8:	b530      	push	{r4, r5, lr}
 80095da:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 80095dc:	888a      	ldrh	r2, [r1, #4]
{
 80095de:	b083      	sub	sp, #12
 80095e0:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 80095e2:	7823      	ldrb	r3, [r4, #0]
 80095e4:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d01e      	beq.n	800962c <USBD_StdEPReq+0x54>
 80095ee:	2b40      	cmp	r3, #64	; 0x40
 80095f0:	d01c      	beq.n	800962c <USBD_StdEPReq+0x54>
 80095f2:	b36b      	cbz	r3, 8009650 <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80095f4:	2180      	movs	r1, #128	; 0x80
 80095f6:	4628      	mov	r0, r5
 80095f8:	f000 fb50 	bl	8009c9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095fc:	2100      	movs	r1, #0
 80095fe:	4628      	mov	r0, r5
 8009600:	f000 fb4c 	bl	8009c9c <USBD_LL_StallEP>
}
 8009604:	2000      	movs	r0, #0
 8009606:	b003      	add	sp, #12
 8009608:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 800960a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800960e:	2b02      	cmp	r3, #2
 8009610:	b2da      	uxtb	r2, r3
 8009612:	d059      	beq.n	80096c8 <USBD_StdEPReq+0xf0>
 8009614:	2a03      	cmp	r2, #3
 8009616:	d1ed      	bne.n	80095f4 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009618:	8863      	ldrh	r3, [r4, #2]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1f2      	bne.n	8009604 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800961e:	064b      	lsls	r3, r1, #25
 8009620:	d17f      	bne.n	8009722 <USBD_StdEPReq+0x14a>
                (void)USBD_CtlSendStatus(pdev);
 8009622:	4628      	mov	r0, r5
 8009624:	9101      	str	r1, [sp, #4]
 8009626:	f000 f8fb 	bl	8009820 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800962a:	9901      	ldr	r1, [sp, #4]
 800962c:	4628      	mov	r0, r5
 800962e:	f7ff fdad 	bl	800918c <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009632:	2800      	cmp	r0, #0
 8009634:	d1e6      	bne.n	8009604 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 8009636:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
                  pdev->classId = idx;
 800963a:	f8c5 02d4 	str.w	r0, [r5, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d0df      	beq.n	8009604 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009644:	4621      	mov	r1, r4
 8009646:	4628      	mov	r0, r5
}
 8009648:	b003      	add	sp, #12
 800964a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800964e:	4718      	bx	r3
      switch (req->bRequest)
 8009650:	7863      	ldrb	r3, [r4, #1]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d0d9      	beq.n	800960a <USBD_StdEPReq+0x32>
 8009656:	2b03      	cmp	r3, #3
 8009658:	d024      	beq.n	80096a4 <USBD_StdEPReq+0xcc>
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1ca      	bne.n	80095f4 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 800965e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009662:	2b02      	cmp	r3, #2
 8009664:	b2d8      	uxtb	r0, r3
 8009666:	d038      	beq.n	80096da <USBD_StdEPReq+0x102>
 8009668:	2803      	cmp	r0, #3
 800966a:	d1c3      	bne.n	80095f4 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800966c:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8009670:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009672:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009676:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800967a:	d43f      	bmi.n	80096fc <USBD_StdEPReq+0x124>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800967c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8009680:	2b00      	cmp	r3, #0
 8009682:	d0b7      	beq.n	80095f4 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009684:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8009688:	2414      	movs	r4, #20
 800968a:	fb04 5403 	mla	r4, r4, r3, r5
 800968e:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009692:	2b00      	cmp	r3, #0
 8009694:	d13e      	bne.n	8009714 <USBD_StdEPReq+0x13c>
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009696:	2202      	movs	r2, #2
 8009698:	4621      	mov	r1, r4
 800969a:	4628      	mov	r0, r5
                pep->status = 0x0000U;
 800969c:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800969e:	f000 f88f 	bl	80097c0 <USBD_CtlSendData>
              break;
 80096a2:	e7af      	b.n	8009604 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 80096a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	d00c      	beq.n	80096c8 <USBD_StdEPReq+0xf0>
 80096ae:	2a03      	cmp	r2, #3
 80096b0:	d1a0      	bne.n	80095f4 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096b2:	8863      	ldrh	r3, [r4, #2]
 80096b4:	b923      	cbnz	r3, 80096c0 <USBD_StdEPReq+0xe8>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096b6:	0648      	lsls	r0, r1, #25
 80096b8:	d002      	beq.n	80096c0 <USBD_StdEPReq+0xe8>
 80096ba:	88e3      	ldrh	r3, [r4, #6]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d035      	beq.n	800972c <USBD_StdEPReq+0x154>
              (void)USBD_CtlSendStatus(pdev);
 80096c0:	4628      	mov	r0, r5
 80096c2:	f000 f8ad 	bl	8009820 <USBD_CtlSendStatus>
              break;
 80096c6:	e79d      	b.n	8009604 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096c8:	064a      	lsls	r2, r1, #25
 80096ca:	d093      	beq.n	80095f4 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096cc:	f000 fae6 	bl	8009c9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096d0:	2180      	movs	r1, #128	; 0x80
 80096d2:	4628      	mov	r0, r5
 80096d4:	f000 fae2 	bl	8009c9c <USBD_LL_StallEP>
 80096d8:	e794      	b.n	8009604 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096da:	0648      	lsls	r0, r1, #25
 80096dc:	d18a      	bne.n	80095f4 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096de:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 80096e0:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096e4:	f04f 0202 	mov.w	r2, #2
 80096e8:	4628      	mov	r0, r5
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096ea:	bf4c      	ite	mi
 80096ec:	f105 0114 	addmi.w	r1, r5, #20
 80096f0:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
              pep->status = 0x0000U;
 80096f4:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096f6:	f000 f863 	bl	80097c0 <USBD_CtlSendData>
              break;
 80096fa:	e783      	b.n	8009604 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f43f af78 	beq.w	80095f4 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009704:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8009708:	1c5c      	adds	r4, r3, #1
 800970a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800970e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8009712:	e7be      	b.n	8009692 <USBD_StdEPReq+0xba>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009714:	4628      	mov	r0, r5
 8009716:	f000 fadd 	bl	8009cd4 <USBD_LL_IsStallEP>
 800971a:	1e03      	subs	r3, r0, #0
 800971c:	bf18      	it	ne
 800971e:	2301      	movne	r3, #1
 8009720:	e7b9      	b.n	8009696 <USBD_StdEPReq+0xbe>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009722:	9101      	str	r1, [sp, #4]
 8009724:	f000 fac8 	bl	8009cb8 <USBD_LL_ClearStallEP>
 8009728:	9901      	ldr	r1, [sp, #4]
 800972a:	e77a      	b.n	8009622 <USBD_StdEPReq+0x4a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800972c:	4628      	mov	r0, r5
 800972e:	f000 fab5 	bl	8009c9c <USBD_LL_StallEP>
 8009732:	e7c5      	b.n	80096c0 <USBD_StdEPReq+0xe8>

08009734 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8009734:	780b      	ldrb	r3, [r1, #0]
 8009736:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8009738:	784b      	ldrb	r3, [r1, #1]
 800973a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 800973c:	884b      	ldrh	r3, [r1, #2]
 800973e:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8009740:	888b      	ldrh	r3, [r1, #4]
 8009742:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8009744:	88cb      	ldrh	r3, [r1, #6]
 8009746:	80c3      	strh	r3, [r0, #6]
}
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop

0800974c <USBD_CtlError>:
{
 800974c:	b510      	push	{r4, lr}
 800974e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009750:	2180      	movs	r1, #128	; 0x80
 8009752:	f000 faa3 	bl	8009c9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009756:	2100      	movs	r1, #0
 8009758:	4620      	mov	r0, r4
}
 800975a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800975e:	f000 ba9d 	b.w	8009c9c <USBD_LL_StallEP>
 8009762:	bf00      	nop

08009764 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8009764:	b340      	cbz	r0, 80097b8 <USBD_GetString+0x54>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8009766:	7803      	ldrb	r3, [r0, #0]
{
 8009768:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 800976a:	b333      	cbz	r3, 80097ba <USBD_GetString+0x56>
 800976c:	4603      	mov	r3, r0
 800976e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8009772:	2c00      	cmp	r4, #0
 8009774:	d1fb      	bne.n	800976e <USBD_GetString+0xa>
 8009776:	4604      	mov	r4, r0
 8009778:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 800977c:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 8009780:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2d00      	cmp	r5, #0
 8009788:	d1f8      	bne.n	800977c <USBD_GetString+0x18>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800978a:	3301      	adds	r3, #1
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	b2dc      	uxtb	r4, r3
 8009790:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009792:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8009794:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009796:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8009798:	7804      	ldrb	r4, [r0, #0]
 800979a:	b15c      	cbz	r4, 80097b4 <USBD_GetString+0x50>
  idx++;
 800979c:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800979e:	2500      	movs	r5, #0
    idx++;
 80097a0:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 80097a2:	54cc      	strb	r4, [r1, r3]
    idx++;
 80097a4:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80097a6:	b2d2      	uxtb	r2, r2
    idx++;
 80097a8:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 80097aa:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 80097ac:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80097b0:	2c00      	cmp	r4, #0
 80097b2:	d1f5      	bne.n	80097a0 <USBD_GetString+0x3c>
}
 80097b4:	bc30      	pop	{r4, r5}
 80097b6:	4770      	bx	lr
 80097b8:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80097ba:	2402      	movs	r4, #2
 80097bc:	4623      	mov	r3, r4
 80097be:	e7e7      	b.n	8009790 <USBD_GetString+0x2c>

080097c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80097c0:	b510      	push	{r4, lr}
 80097c2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097c4:	2402      	movs	r4, #2
{
 80097c6:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097c8:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097ca:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 80097ce:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097d2:	f000 faa1 	bl	8009d18 <USBD_LL_Transmit>

  return USBD_OK;
}
 80097d6:	2000      	movs	r0, #0
 80097d8:	bd10      	pop	{r4, pc}
 80097da:	bf00      	nop

080097dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80097dc:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097de:	2100      	movs	r1, #0
{
 80097e0:	b508      	push	{r3, lr}
 80097e2:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097e4:	4662      	mov	r2, ip
 80097e6:	f000 fa97 	bl	8009d18 <USBD_LL_Transmit>

  return USBD_OK;
}
 80097ea:	2000      	movs	r0, #0
 80097ec:	bd08      	pop	{r3, pc}
 80097ee:	bf00      	nop

080097f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80097f0:	b510      	push	{r4, lr}
 80097f2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097f4:	2403      	movs	r4, #3
{
 80097f6:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097f8:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097fa:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 80097fe:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009802:	f000 fa97 	bl	8009d34 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009806:	2000      	movs	r0, #0
 8009808:	bd10      	pop	{r4, pc}
 800980a:	bf00      	nop

0800980c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800980c:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800980e:	2100      	movs	r1, #0
{
 8009810:	b508      	push	{r3, lr}
 8009812:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009814:	4662      	mov	r2, ip
 8009816:	f000 fa8d 	bl	8009d34 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800981a:	2000      	movs	r0, #0
 800981c:	bd08      	pop	{r3, pc}
 800981e:	bf00      	nop

08009820 <USBD_CtlSendStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009820:	2300      	movs	r3, #0
{
 8009822:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009824:	2404      	movs	r4, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009826:	461a      	mov	r2, r3
 8009828:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800982a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800982e:	f000 fa73 	bl	8009d18 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009832:	2000      	movs	r0, #0
 8009834:	bd10      	pop	{r4, pc}
 8009836:	bf00      	nop

08009838 <USBD_CtlReceiveStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009838:	2300      	movs	r3, #0
{
 800983a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800983c:	2405      	movs	r4, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800983e:	461a      	mov	r2, r3
 8009840:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009842:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009846:	f000 fa75 	bl	8009d34 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800984a:	2000      	movs	r0, #0
 800984c:	bd10      	pop	{r4, pc}
 800984e:	bf00      	nop

08009850 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009850:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009852:	2201      	movs	r2, #1
 8009854:	4919      	ldr	r1, [pc, #100]	; (80098bc <MX_USB_DEVICE_Init+0x6c>)
 8009856:	481a      	ldr	r0, [pc, #104]	; (80098c0 <MX_USB_DEVICE_Init+0x70>)
 8009858:	f7ff fac0 	bl	8008ddc <USBD_Init>
 800985c:	b988      	cbnz	r0, 8009882 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_DFU) != USBD_OK)
 800985e:	4919      	ldr	r1, [pc, #100]	; (80098c4 <MX_USB_DEVICE_Init+0x74>)
 8009860:	4817      	ldr	r0, [pc, #92]	; (80098c0 <MX_USB_DEVICE_Init+0x70>)
 8009862:	f7ff fadf 	bl	8008e24 <USBD_RegisterClass>
 8009866:	b9a0      	cbnz	r0, 8009892 <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceHS, &USBD_DFU_fops_HS) != USBD_OK)
 8009868:	4917      	ldr	r1, [pc, #92]	; (80098c8 <MX_USB_DEVICE_Init+0x78>)
 800986a:	4815      	ldr	r0, [pc, #84]	; (80098c0 <MX_USB_DEVICE_Init+0x70>)
 800986c:	f7ff faaa 	bl	8008dc4 <USBD_DFU_RegisterMedia>
 8009870:	b9b8      	cbnz	r0, 80098a2 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009872:	4813      	ldr	r0, [pc, #76]	; (80098c0 <MX_USB_DEVICE_Init+0x70>)
 8009874:	f7ff fafe 	bl	8008e74 <USBD_Start>
 8009878:	b9d0      	cbnz	r0, 80098b0 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800987a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800987e:	f7fb b981 	b.w	8004b84 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 8009882:	f7f7 fe8b 	bl	800159c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_DFU) != USBD_OK)
 8009886:	490f      	ldr	r1, [pc, #60]	; (80098c4 <MX_USB_DEVICE_Init+0x74>)
 8009888:	480d      	ldr	r0, [pc, #52]	; (80098c0 <MX_USB_DEVICE_Init+0x70>)
 800988a:	f7ff facb 	bl	8008e24 <USBD_RegisterClass>
 800988e:	2800      	cmp	r0, #0
 8009890:	d0ea      	beq.n	8009868 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8009892:	f7f7 fe83 	bl	800159c <Error_Handler>
  if (USBD_DFU_RegisterMedia(&hUsbDeviceHS, &USBD_DFU_fops_HS) != USBD_OK)
 8009896:	490c      	ldr	r1, [pc, #48]	; (80098c8 <MX_USB_DEVICE_Init+0x78>)
 8009898:	4809      	ldr	r0, [pc, #36]	; (80098c0 <MX_USB_DEVICE_Init+0x70>)
 800989a:	f7ff fa93 	bl	8008dc4 <USBD_DFU_RegisterMedia>
 800989e:	2800      	cmp	r0, #0
 80098a0:	d0e7      	beq.n	8009872 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80098a2:	f7f7 fe7b 	bl	800159c <Error_Handler>
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80098a6:	4806      	ldr	r0, [pc, #24]	; (80098c0 <MX_USB_DEVICE_Init+0x70>)
 80098a8:	f7ff fae4 	bl	8008e74 <USBD_Start>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d0e4      	beq.n	800987a <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 80098b0:	f7f7 fe74 	bl	800159c <Error_Handler>
}
 80098b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 80098b8:	f7fb b964 	b.w	8004b84 <HAL_PWREx_EnableUSBVoltageDetector>
 80098bc:	24000418 	.word	0x24000418
 80098c0:	2400ba78 	.word	0x2400ba78
 80098c4:	240003b4 	.word	0x240003b4
 80098c8:	2400046c 	.word	0x2400046c

080098cc <USBD_HS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80098cc:	2312      	movs	r3, #18
  return USBD_HS_DeviceDesc;
}
 80098ce:	4801      	ldr	r0, [pc, #4]	; (80098d4 <USBD_HS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_HS_DeviceDesc);
 80098d0:	800b      	strh	r3, [r1, #0]
}
 80098d2:	4770      	bx	lr
 80098d4:	24000438 	.word	0x24000438

080098d8 <USBD_HS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80098d8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80098da:	4801      	ldr	r0, [pc, #4]	; (80098e0 <USBD_HS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80098dc:	800b      	strh	r3, [r1, #0]
}
 80098de:	4770      	bx	lr
 80098e0:	2400044c 	.word	0x2400044c

080098e4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e4:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098e6:	4c04      	ldr	r4, [pc, #16]	; (80098f8 <USBD_HS_ManufacturerStrDescriptor+0x14>)
{
 80098e8:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098ea:	4804      	ldr	r0, [pc, #16]	; (80098fc <USBD_HS_ManufacturerStrDescriptor+0x18>)
 80098ec:	4621      	mov	r1, r4
 80098ee:	f7ff ff39 	bl	8009764 <USBD_GetString>
  return USBD_StrDesc;
}
 80098f2:	4620      	mov	r0, r4
 80098f4:	bd10      	pop	{r4, pc}
 80098f6:	bf00      	nop
 80098f8:	2400bd54 	.word	0x2400bd54
 80098fc:	0800bf90 	.word	0x0800bf90

08009900 <USBD_HS_ProductStrDescriptor>:
{
 8009900:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009902:	4c04      	ldr	r4, [pc, #16]	; (8009914 <USBD_HS_ProductStrDescriptor+0x14>)
{
 8009904:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009906:	4804      	ldr	r0, [pc, #16]	; (8009918 <USBD_HS_ProductStrDescriptor+0x18>)
 8009908:	4621      	mov	r1, r4
 800990a:	f7ff ff2b 	bl	8009764 <USBD_GetString>
}
 800990e:	4620      	mov	r0, r4
 8009910:	bd10      	pop	{r4, pc}
 8009912:	bf00      	nop
 8009914:	2400bd54 	.word	0x2400bd54
 8009918:	0800bfa4 	.word	0x0800bfa4

0800991c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800991c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800991e:	4c04      	ldr	r4, [pc, #16]	; (8009930 <USBD_HS_ConfigStrDescriptor+0x14>)
{
 8009920:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009922:	4804      	ldr	r0, [pc, #16]	; (8009934 <USBD_HS_ConfigStrDescriptor+0x18>)
 8009924:	4621      	mov	r1, r4
 8009926:	f7ff ff1d 	bl	8009764 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800992a:	4620      	mov	r0, r4
 800992c:	bd10      	pop	{r4, pc}
 800992e:	bf00      	nop
 8009930:	2400bd54 	.word	0x2400bd54
 8009934:	0800bfc4 	.word	0x0800bfc4

08009938 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009938:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800993a:	4c04      	ldr	r4, [pc, #16]	; (800994c <USBD_HS_InterfaceStrDescriptor+0x14>)
{
 800993c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800993e:	4804      	ldr	r0, [pc, #16]	; (8009950 <USBD_HS_InterfaceStrDescriptor+0x18>)
 8009940:	4621      	mov	r1, r4
 8009942:	f7ff ff0f 	bl	8009764 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8009946:	4620      	mov	r0, r4
 8009948:	bd10      	pop	{r4, pc}
 800994a:	bf00      	nop
 800994c:	2400bd54 	.word	0x2400bd54
 8009950:	0800bfd0 	.word	0x0800bfd0

08009954 <USBD_HS_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009954:	4a46      	ldr	r2, [pc, #280]	; (8009a70 <USBD_HS_SerialStrDescriptor+0x11c>)
  *length = USB_SIZ_STRING_SERIAL;
 8009956:	f04f 0c1a 	mov.w	ip, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800995a:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800995e:	f8d2 0808 	ldr.w	r0, [r2, #2056]	; 0x808
  *length = USB_SIZ_STRING_SERIAL;
 8009962:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 8009966:	181b      	adds	r3, r3, r0
 8009968:	d101      	bne.n	800996e <USBD_HS_SerialStrDescriptor+0x1a>
}
 800996a:	4842      	ldr	r0, [pc, #264]	; (8009a74 <USBD_HS_SerialStrDescriptor+0x120>)
 800996c:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800996e:	0f18      	lsrs	r0, r3, #28
 8009970:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009974:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8009978:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800997c:	4a3d      	ldr	r2, [pc, #244]	; (8009a74 <USBD_HS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800997e:	bf2c      	ite	cs
 8009980:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8009982:	3030      	addcc	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8009984:	f882 c003 	strb.w	ip, [r2, #3]
 8009988:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800998c:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800998e:	f3c3 6003 	ubfx	r0, r3, #24, #4
    pbuf[2 * idx + 1] = 0;
 8009992:	f882 c005 	strb.w	ip, [r2, #5]
 8009996:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800999a:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800999c:	f882 c007 	strb.w	ip, [r2, #7]
 80099a0:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099a4:	bf8c      	ite	hi
 80099a6:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80099a8:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 80099aa:	f882 c009 	strb.w	ip, [r2, #9]
 80099ae:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80099b2:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 80099b4:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 80099b8:	f882 c00b 	strb.w	ip, [r2, #11]
 80099bc:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 80099c0:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 80099c2:	f882 c00d 	strb.w	ip, [r2, #13]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099c6:	bf8c      	ite	hi
 80099c8:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80099ca:	3030      	addls	r0, #48	; 0x30
 80099cc:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 80099ce:	f3c3 4003 	ubfx	r0, r3, #16, #4
 80099d2:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099d4:	bf8c      	ite	hi
 80099d6:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80099d8:	3030      	addls	r0, #48	; 0x30
 80099da:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 80099dc:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80099e0:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099e2:	bf8c      	ite	hi
 80099e4:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80099e6:	3030      	addls	r0, #48	; 0x30
 80099e8:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 80099ea:	f3c3 2003 	ubfx	r0, r3, #8, #4
 80099ee:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099f0:	bf8c      	ite	hi
 80099f2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80099f4:	3030      	addls	r0, #48	; 0x30
 80099f6:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 80099f8:	f3c3 1003 	ubfx	r0, r3, #4, #4
 80099fc:	f003 030f 	and.w	r3, r3, #15
 8009a00:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a02:	bf8c      	ite	hi
 8009a04:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a06:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 8009a08:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a0a:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 8009a0c:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a10:	bf94      	ite	ls
 8009a12:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a14:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8009a16:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 8009a1a:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a1c:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 8009a1e:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 8009a22:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a26:	bf2c      	ite	cs
 8009a28:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a2a:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8009a2c:	7450      	strb	r0, [r2, #17]
 8009a2e:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a30:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 8009a32:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 8009a36:	74d0      	strb	r0, [r2, #19]
 8009a38:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8009a3a:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8009a3c:	7550      	strb	r0, [r2, #21]
 8009a3e:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a42:	bf8c      	ite	hi
 8009a44:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a46:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8009a48:	75d0      	strb	r0, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a4a:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 8009a4c:	f3c1 5303 	ubfx	r3, r1, #20, #4
}
 8009a50:	4808      	ldr	r0, [pc, #32]	; (8009a74 <USBD_HS_SerialStrDescriptor+0x120>)
    if (((value >> 28)) < 0xA)
 8009a52:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a54:	bf8c      	ite	hi
 8009a56:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a58:	3330      	addls	r3, #48	; 0x30
 8009a5a:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 8009a5c:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8009a60:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a62:	bf94      	ite	ls
 8009a64:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a66:	3337      	addhi	r3, #55	; 0x37
 8009a68:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	7653      	strb	r3, [r2, #25]
}
 8009a6e:	4770      	bx	lr
 8009a70:	1ff1e000 	.word	0x1ff1e000
 8009a74:	24000450 	.word	0x24000450

08009a78 <MEM_If_Init_HS>:
uint16_t MEM_If_Init_HS(void)
{
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8009a78:	2000      	movs	r0, #0
 8009a7a:	4770      	bx	lr

08009a7c <MEM_If_Erase_HS>:
  /* USER CODE BEGIN 8 */
  UNUSED(Add);

  return (USBD_OK);
  /* USER CODE END 8 */
}
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	4770      	bx	lr

08009a80 <MEM_If_Write_HS>:
  UNUSED(dest);
  UNUSED(Len);

  return (USBD_OK);
  /* USER CODE END 9 */
}
 8009a80:	2000      	movs	r0, #0
 8009a82:	4770      	bx	lr

08009a84 <MEM_If_Read_HS>:
  UNUSED(dest);
  UNUSED(Len);

  return (uint8_t*)(USBD_OK);
  /* USER CODE END 10 */
}
 8009a84:	2000      	movs	r0, #0
 8009a86:	4770      	bx	lr

08009a88 <MEM_If_GetStatus_HS>:

    break;
  }
  return  (USBD_OK);
  /* USER CODE END 11 */
}
 8009a88:	2000      	movs	r0, #0
 8009a8a:	4770      	bx	lr

08009a8c <MEM_If_DeInit_HS>:
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	4770      	bx	lr

08009a90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a90:	b510      	push	{r4, lr}
 8009a92:	b0b0      	sub	sp, #192	; 0xc0
 8009a94:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009a96:	22b8      	movs	r2, #184	; 0xb8
 8009a98:	2100      	movs	r1, #0
 8009a9a:	a802      	add	r0, sp, #8
 8009a9c:	f000 fdf3 	bl	800a686 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8009aa0:	4b19      	ldr	r3, [pc, #100]	; (8009b08 <HAL_PCD_MspInit+0x78>)
 8009aa2:	6822      	ldr	r2, [r4, #0]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d001      	beq.n	8009aac <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009aa8:	b030      	add	sp, #192	; 0xc0
 8009aaa:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009aac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009b00 <HAL_PCD_MspInit+0x70>
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009ab0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009ab4:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009ab6:	ed8d 7b02 	vstr	d7, [sp, #8]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009aba:	9323      	str	r3, [sp, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009abc:	f7fb fee2 	bl	8005884 <HAL_RCCEx_PeriphCLKConfig>
 8009ac0:	b9c0      	cbnz	r0, 8009af4 <HAL_PCD_MspInit+0x64>
    HAL_PWREx_EnableUSBVoltageDetector();
 8009ac2:	f7fb f85f 	bl	8004b84 <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009ac6:	4b11      	ldr	r3, [pc, #68]	; (8009b0c <HAL_PCD_MspInit+0x7c>)
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009ac8:	2200      	movs	r2, #0
 8009aca:	204d      	movs	r0, #77	; 0x4d
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009acc:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009ad0:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009ad2:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8009ad6:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8009ada:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ae2:	9301      	str	r3, [sp, #4]
 8009ae4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009ae6:	f7f8 f951 	bl	8001d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009aea:	204d      	movs	r0, #77	; 0x4d
 8009aec:	f7f8 f98c 	bl	8001e08 <HAL_NVIC_EnableIRQ>
}
 8009af0:	b030      	add	sp, #192	; 0xc0
 8009af2:	bd10      	pop	{r4, pc}
      Error_Handler();
 8009af4:	f7f7 fd52 	bl	800159c <Error_Handler>
 8009af8:	e7e3      	b.n	8009ac2 <HAL_PCD_MspInit+0x32>
 8009afa:	bf00      	nop
 8009afc:	f3af 8000 	nop.w
 8009b00:	00040000 	.word	0x00040000
 8009b04:	00000000 	.word	0x00000000
 8009b08:	40040000 	.word	0x40040000
 8009b0c:	58024400 	.word	0x58024400

08009b10 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b10:	f200 419c 	addw	r1, r0, #1180	; 0x49c
 8009b14:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	; 0x4e0
 8009b18:	f7ff b9ce 	b.w	8008eb8 <USBD_LL_SetupStage>

08009b1c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b1c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8009b20:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009b24:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	; 0x4e0
 8009b28:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8009b2c:	f7ff b9f4 	b.w	8008f18 <USBD_LL_DataOutStage>

08009b30 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b30:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8009b34:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009b38:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	; 0x4e0
 8009b3c:	6a1a      	ldr	r2, [r3, #32]
 8009b3e:	f7ff ba25 	b.w	8008f8c <USBD_LL_DataInStage>
 8009b42:	bf00      	nop

08009b44 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b44:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	; 0x4e0
 8009b48:	f7ff bace 	b.w	80090e8 <USBD_LL_SOF>

08009b4c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b4c:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009b4e:	79c1      	ldrb	r1, [r0, #7]
{
 8009b50:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009b52:	b111      	cbz	r1, 8009b5a <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009b54:	2902      	cmp	r1, #2
 8009b56:	d10a      	bne.n	8009b6e <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8009b58:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b5a:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	; 0x4e0
 8009b5e:	f7ff faa3 	bl	80090a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b62:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	; 0x4e0
}
 8009b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b6a:	f7ff ba6f 	b.w	800904c <USBD_LL_Reset>
    Error_Handler();
 8009b6e:	f7f7 fd15 	bl	800159c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b72:	2101      	movs	r1, #1
 8009b74:	e7f1      	b.n	8009b5a <HAL_PCD_ResetCallback+0xe>
 8009b76:	bf00      	nop

08009b78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b7c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	; 0x4e0
 8009b80:	f7ff fa96 	bl	80090b0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b84:	6822      	ldr	r2, [r4, #0]
 8009b86:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8009b8a:	f043 0301 	orr.w	r3, r3, #1
 8009b8e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b92:	7ae3      	ldrb	r3, [r4, #11]
 8009b94:	b123      	cbz	r3, 8009ba0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b96:	4a03      	ldr	r2, [pc, #12]	; (8009ba4 <HAL_PCD_SuspendCallback+0x2c>)
 8009b98:	6913      	ldr	r3, [r2, #16]
 8009b9a:	f043 0306 	orr.w	r3, r3, #6
 8009b9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	bf00      	nop
 8009ba4:	e000ed00 	.word	0xe000ed00

08009ba8 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ba8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	; 0x4e0
 8009bac:	f7ff ba90 	b.w	80090d0 <USBD_LL_Resume>

08009bb0 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009bb0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	; 0x4e0
 8009bb4:	f7ff babe 	b.w	8009134 <USBD_LL_IsoOUTIncomplete>

08009bb8 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009bb8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	; 0x4e0
 8009bbc:	f7ff baa4 	b.w	8009108 <USBD_LL_IsoINIncomplete>

08009bc0 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bc0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	; 0x4e0
 8009bc4:	f7ff bacc 	b.w	8009160 <USBD_LL_DevConnected>

08009bc8 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bc8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	; 0x4e0
 8009bcc:	f7ff baca 	b.w	8009164 <USBD_LL_DevDisconnected>

08009bd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bd0:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8009bd2:	7803      	ldrb	r3, [r0, #0]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d001      	beq.n	8009bdc <USBD_LL_Init+0xc>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
}
 8009bd8:	2000      	movs	r0, #0
 8009bda:	bd08      	pop	{r3, pc}
  hpcd_USB_OTG_HS.pData = pdev;
 8009bdc:	4b16      	ldr	r3, [pc, #88]	; (8009c38 <USBD_LL_Init+0x68>)
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009bde:	2200      	movs	r2, #0
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009be0:	4916      	ldr	r1, [pc, #88]	; (8009c3c <USBD_LL_Init+0x6c>)
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8009be2:	f04f 0c09 	mov.w	ip, #9
  hpcd_USB_OTG_HS.pData = pdev;
 8009be6:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009bea:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8009bec:	2102      	movs	r1, #2
  pdev->pData = &hpcd_USB_OTG_HS;
 8009bee:	f8c0 32c8 	str.w	r3, [r0, #712]	; 0x2c8
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009bf2:	f44f 7000 	mov.w	r0, #512	; 0x200
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8009bf6:	f8c3 1009 	str.w	r1, [r3, #9]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009bfa:	80d8      	strh	r0, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8009bfc:	4618      	mov	r0, r3
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009bfe:	81da      	strh	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8009c00:	f883 c004 	strb.w	ip, [r3, #4]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009c04:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8009c06:	f7f9 fe3f 	bl	8003888 <HAL_PCD_Init>
 8009c0a:	b988      	cbnz	r0, 8009c30 <USBD_LL_Init+0x60>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8009c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c10:	4809      	ldr	r0, [pc, #36]	; (8009c38 <USBD_LL_Init+0x68>)
 8009c12:	f7fa ff73 	bl	8004afc <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8009c16:	2280      	movs	r2, #128	; 0x80
 8009c18:	2100      	movs	r1, #0
 8009c1a:	4807      	ldr	r0, [pc, #28]	; (8009c38 <USBD_LL_Init+0x68>)
 8009c1c:	f7fa ff48 	bl	8004ab0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8009c20:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8009c24:	2101      	movs	r1, #1
 8009c26:	4804      	ldr	r0, [pc, #16]	; (8009c38 <USBD_LL_Init+0x68>)
 8009c28:	f7fa ff42 	bl	8004ab0 <HAL_PCDEx_SetTxFiFo>
}
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	bd08      	pop	{r3, pc}
    Error_Handler( );
 8009c30:	f7f7 fcb4 	bl	800159c <Error_Handler>
 8009c34:	e7ea      	b.n	8009c0c <USBD_LL_Init+0x3c>
 8009c36:	bf00      	nop
 8009c38:	2400bf54 	.word	0x2400bf54
 8009c3c:	40040000 	.word	0x40040000

08009c40 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c40:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8009c44:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8009c46:	f7fa f82f 	bl	8003ca8 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8009c4a:	2803      	cmp	r0, #3
 8009c4c:	d802      	bhi.n	8009c54 <USBD_LL_Start+0x14>
 8009c4e:	4b02      	ldr	r3, [pc, #8]	; (8009c58 <USBD_LL_Start+0x18>)
 8009c50:	5c18      	ldrb	r0, [r3, r0]
}
 8009c52:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8009c54:	2003      	movs	r0, #3
}
 8009c56:	bd08      	pop	{r3, pc}
 8009c58:	0800c040 	.word	0x0800c040

08009c5c <USBD_LL_Stop>:
  hal_status = HAL_PCD_Stop(pdev->pData);
 8009c5c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8009c60:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8009c62:	f7fa f843 	bl	8003cec <HAL_PCD_Stop>
  switch (hal_status)
 8009c66:	2803      	cmp	r0, #3
 8009c68:	d802      	bhi.n	8009c70 <USBD_LL_Stop+0x14>
 8009c6a:	4b02      	ldr	r3, [pc, #8]	; (8009c74 <USBD_LL_Stop+0x18>)
 8009c6c:	5c18      	ldrb	r0, [r3, r0]
}
 8009c6e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8009c70:	2003      	movs	r0, #3
}
 8009c72:	bd08      	pop	{r3, pc}
 8009c74:	0800c040 	.word	0x0800c040

08009c78 <USBD_LL_OpenEP>:
{
 8009c78:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c7a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8009c7e:	461a      	mov	r2, r3
 8009c80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c82:	4663      	mov	r3, ip
 8009c84:	f7fa fe14 	bl	80048b0 <HAL_PCD_EP_Open>
  switch (hal_status)
 8009c88:	2803      	cmp	r0, #3
 8009c8a:	d802      	bhi.n	8009c92 <USBD_LL_OpenEP+0x1a>
 8009c8c:	4b02      	ldr	r3, [pc, #8]	; (8009c98 <USBD_LL_OpenEP+0x20>)
 8009c8e:	5c18      	ldrb	r0, [r3, r0]
}
 8009c90:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c92:	2003      	movs	r0, #3
}
 8009c94:	bd08      	pop	{r3, pc}
 8009c96:	bf00      	nop
 8009c98:	0800c040 	.word	0x0800c040

08009c9c <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c9c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8009ca0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ca2:	f7fa fe87 	bl	80049b4 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8009ca6:	2803      	cmp	r0, #3
 8009ca8:	d802      	bhi.n	8009cb0 <USBD_LL_StallEP+0x14>
 8009caa:	4b02      	ldr	r3, [pc, #8]	; (8009cb4 <USBD_LL_StallEP+0x18>)
 8009cac:	5c18      	ldrb	r0, [r3, r0]
}
 8009cae:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009cb0:	2003      	movs	r0, #3
}
 8009cb2:	bd08      	pop	{r3, pc}
 8009cb4:	0800c040 	.word	0x0800c040

08009cb8 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cb8:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8009cbc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cbe:	f7fa febd 	bl	8004a3c <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8009cc2:	2803      	cmp	r0, #3
 8009cc4:	d802      	bhi.n	8009ccc <USBD_LL_ClearStallEP+0x14>
 8009cc6:	4b02      	ldr	r3, [pc, #8]	; (8009cd0 <USBD_LL_ClearStallEP+0x18>)
 8009cc8:	5c18      	ldrb	r0, [r3, r0]
}
 8009cca:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ccc:	2003      	movs	r0, #3
}
 8009cce:	bd08      	pop	{r3, pc}
 8009cd0:	0800c040 	.word	0x0800c040

08009cd4 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8009cd4:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cd6:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8009cda:	d406      	bmi.n	8009cea <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009cdc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8009ce0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009ce4:	f893 0256 	ldrb.w	r0, [r3, #598]	; 0x256
}
 8009ce8:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009cea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009cee:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8009cf2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009cf6:	7d98      	ldrb	r0, [r3, #22]
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop

08009cfc <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cfc:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8009d00:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d02:	f7fa fdc1 	bl	8004888 <HAL_PCD_SetAddress>
  switch (hal_status)
 8009d06:	2803      	cmp	r0, #3
 8009d08:	d802      	bhi.n	8009d10 <USBD_LL_SetUSBAddress+0x14>
 8009d0a:	4b02      	ldr	r3, [pc, #8]	; (8009d14 <USBD_LL_SetUSBAddress+0x18>)
 8009d0c:	5c18      	ldrb	r0, [r3, r0]
}
 8009d0e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d10:	2003      	movs	r0, #3
}
 8009d12:	bd08      	pop	{r3, pc}
 8009d14:	0800c040 	.word	0x0800c040

08009d18 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d18:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8009d1c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d1e:	f7fa fe27 	bl	8004970 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8009d22:	2803      	cmp	r0, #3
 8009d24:	d802      	bhi.n	8009d2c <USBD_LL_Transmit+0x14>
 8009d26:	4b02      	ldr	r3, [pc, #8]	; (8009d30 <USBD_LL_Transmit+0x18>)
 8009d28:	5c18      	ldrb	r0, [r3, r0]
}
 8009d2a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d2c:	2003      	movs	r0, #3
}
 8009d2e:	bd08      	pop	{r3, pc}
 8009d30:	0800c040 	.word	0x0800c040

08009d34 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d34:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8009d38:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d3a:	f7fa fdf7 	bl	800492c <HAL_PCD_EP_Receive>
  switch (hal_status)
 8009d3e:	2803      	cmp	r0, #3
 8009d40:	d802      	bhi.n	8009d48 <USBD_LL_PrepareReceive+0x14>
 8009d42:	4b02      	ldr	r3, [pc, #8]	; (8009d4c <USBD_LL_PrepareReceive+0x18>)
 8009d44:	5c18      	ldrb	r0, [r3, r0]
}
 8009d46:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d48:	2003      	movs	r0, #3
}
 8009d4a:	bd08      	pop	{r3, pc}
 8009d4c:	0800c040 	.word	0x0800c040

08009d50 <USBD_static_malloc>:
}
 8009d50:	4800      	ldr	r0, [pc, #0]	; (8009d54 <USBD_static_malloc+0x4>)
 8009d52:	4770      	bx	lr
 8009d54:	2400c438 	.word	0x2400c438

08009d58 <USBD_static_free>:
}
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop

08009d5c <arm_biquad_cascade_df2T_f32>:
 8009d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d60:	7807      	ldrb	r7, [r0, #0]
 8009d62:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 8009d66:	6885      	ldr	r5, [r0, #8]
 8009d68:	3514      	adds	r5, #20
 8009d6a:	6846      	ldr	r6, [r0, #4]
 8009d6c:	3608      	adds	r6, #8
 8009d6e:	ea4f 198e 	mov.w	r9, lr, lsl #6
 8009d72:	eb02 0b09 	add.w	fp, r2, r9
 8009d76:	f003 080f 	and.w	r8, r3, #15
 8009d7a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8009d7e:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8009d82:	ed15 7a04 	vldr	s14, [r5, #-16]
 8009d86:	ed55 6a03 	vldr	s13, [r5, #-12]
 8009d8a:	ed15 6a02 	vldr	s12, [r5, #-8]
 8009d8e:	ed55 5a01 	vldr	s11, [r5, #-4]
 8009d92:	46b4      	mov	ip, r6
 8009d94:	ed56 3a02 	vldr	s7, [r6, #-8]
 8009d98:	ed16 4a01 	vldr	s8, [r6, #-4]
 8009d9c:	f1be 0f00 	cmp.w	lr, #0
 8009da0:	f000 8195 	beq.w	800a0ce <arm_biquad_cascade_df2T_f32+0x372>
 8009da4:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8009da8:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8009dac:	4674      	mov	r4, lr
 8009dae:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8009db2:	ee27 5a83 	vmul.f32	s10, s15, s6
 8009db6:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009dba:	ee67 4a03 	vmul.f32	s9, s14, s6
 8009dbe:	ee34 4a84 	vadd.f32	s8, s9, s8
 8009dc2:	ee66 4a05 	vmul.f32	s9, s12, s10
 8009dc6:	ee34 4a84 	vadd.f32	s8, s9, s8
 8009dca:	ee26 3a83 	vmul.f32	s6, s13, s6
 8009dce:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 8009dd2:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 8009dd6:	ee67 4aa3 	vmul.f32	s9, s15, s7
 8009dda:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009dde:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009de2:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009de6:	ee27 4a23 	vmul.f32	s8, s14, s7
 8009dea:	ee35 5a04 	vadd.f32	s10, s10, s8
 8009dee:	ee26 3a24 	vmul.f32	s6, s12, s9
 8009df2:	ee33 3a05 	vadd.f32	s6, s6, s10
 8009df6:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8009dfa:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 8009dfe:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 8009e02:	ee27 5a84 	vmul.f32	s10, s15, s8
 8009e06:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009e0a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8009e0e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8009e12:	ee67 3a04 	vmul.f32	s7, s14, s8
 8009e16:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8009e1a:	ee26 3a05 	vmul.f32	s6, s12, s10
 8009e1e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8009e22:	ee66 3a84 	vmul.f32	s7, s13, s8
 8009e26:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8009e2a:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8009e2e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8009e32:	ee74 4a83 	vadd.f32	s9, s9, s6
 8009e36:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009e3a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009e3e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8009e42:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009e46:	ee26 3a24 	vmul.f32	s6, s12, s9
 8009e4a:	ee33 3a05 	vadd.f32	s6, s6, s10
 8009e4e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8009e52:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 8009e56:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 8009e5a:	ee27 5a84 	vmul.f32	s10, s15, s8
 8009e5e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009e62:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8009e66:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8009e6a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8009e6e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8009e72:	ee26 3a05 	vmul.f32	s6, s12, s10
 8009e76:	ee33 3a24 	vadd.f32	s6, s6, s9
 8009e7a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8009e7e:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 8009e82:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 8009e86:	ee67 4a84 	vmul.f32	s9, s15, s8
 8009e8a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8009e8e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009e92:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009e96:	ee67 3a04 	vmul.f32	s7, s14, s8
 8009e9a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009e9e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8009ea2:	ee33 3a05 	vadd.f32	s6, s6, s10
 8009ea6:	ee66 3a84 	vmul.f32	s7, s13, s8
 8009eaa:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 8009eae:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 8009eb2:	ee27 5a84 	vmul.f32	s10, s15, s8
 8009eb6:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009eba:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8009ebe:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8009ec2:	ee67 3a04 	vmul.f32	s7, s14, s8
 8009ec6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8009eca:	ee26 3a05 	vmul.f32	s6, s12, s10
 8009ece:	ee33 3a24 	vadd.f32	s6, s6, s9
 8009ed2:	ee66 3a84 	vmul.f32	s7, s13, s8
 8009ed6:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 8009eda:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8009ede:	ee67 4a84 	vmul.f32	s9, s15, s8
 8009ee2:	ee74 4a83 	vadd.f32	s9, s9, s6
 8009ee6:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009eea:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009eee:	ee67 3a04 	vmul.f32	s7, s14, s8
 8009ef2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009ef6:	ee26 3a24 	vmul.f32	s6, s12, s9
 8009efa:	ee33 3a05 	vadd.f32	s6, s6, s10
 8009efe:	ee66 3a84 	vmul.f32	s7, s13, s8
 8009f02:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 8009f06:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 8009f0a:	ee27 5a84 	vmul.f32	s10, s15, s8
 8009f0e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009f12:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8009f16:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8009f1a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8009f1e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8009f22:	ee26 3a05 	vmul.f32	s6, s12, s10
 8009f26:	ee33 3a24 	vadd.f32	s6, s6, s9
 8009f2a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8009f2e:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8009f32:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 8009f36:	ee67 4a84 	vmul.f32	s9, s15, s8
 8009f3a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8009f3e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009f42:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009f46:	ee67 3a04 	vmul.f32	s7, s14, s8
 8009f4a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009f4e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8009f52:	ee33 3a05 	vadd.f32	s6, s6, s10
 8009f56:	ee66 3a84 	vmul.f32	s7, s13, s8
 8009f5a:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8009f5e:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8009f62:	ee27 5a84 	vmul.f32	s10, s15, s8
 8009f66:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009f6a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8009f6e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8009f72:	ee67 3a04 	vmul.f32	s7, s14, s8
 8009f76:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8009f7a:	ee26 3a05 	vmul.f32	s6, s12, s10
 8009f7e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8009f82:	ee66 3a84 	vmul.f32	s7, s13, s8
 8009f86:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8009f8a:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 8009f8e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8009f92:	ee74 4a83 	vadd.f32	s9, s9, s6
 8009f96:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009f9a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009f9e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8009fa2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009fa6:	ee26 3a24 	vmul.f32	s6, s12, s9
 8009faa:	ee33 3a05 	vadd.f32	s6, s6, s10
 8009fae:	ee66 3a84 	vmul.f32	s7, s13, s8
 8009fb2:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 8009fb6:	ed10 4a04 	vldr	s8, [r0, #-16]
 8009fba:	ee27 5a84 	vmul.f32	s10, s15, s8
 8009fbe:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009fc2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8009fc6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8009fca:	ee67 3a04 	vmul.f32	s7, s14, s8
 8009fce:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8009fd2:	ee26 3a05 	vmul.f32	s6, s12, s10
 8009fd6:	ee33 3a24 	vadd.f32	s6, s6, s9
 8009fda:	ee66 3a84 	vmul.f32	s7, s13, s8
 8009fde:	ed03 5a04 	vstr	s10, [r3, #-16]
 8009fe2:	ed10 4a03 	vldr	s8, [r0, #-12]
 8009fe6:	ee67 4a84 	vmul.f32	s9, s15, s8
 8009fea:	ee74 4a83 	vadd.f32	s9, s9, s6
 8009fee:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009ff2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009ff6:	ee67 3a04 	vmul.f32	s7, s14, s8
 8009ffa:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009ffe:	ee26 3a24 	vmul.f32	s6, s12, s9
 800a002:	ee33 3a05 	vadd.f32	s6, s6, s10
 800a006:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a00a:	ed43 4a03 	vstr	s9, [r3, #-12]
 800a00e:	ed10 4a02 	vldr	s8, [r0, #-8]
 800a012:	ee27 5a84 	vmul.f32	s10, s15, s8
 800a016:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a01a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800a01e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a022:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a026:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a02a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800a02e:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a032:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a036:	ed03 5a02 	vstr	s10, [r3, #-8]
 800a03a:	ed10 4a01 	vldr	s8, [r0, #-4]
 800a03e:	ee67 4a84 	vmul.f32	s9, s15, s8
 800a042:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a046:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a04a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a04e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a052:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a056:	ee66 3a24 	vmul.f32	s7, s12, s9
 800a05a:	ee73 3a85 	vadd.f32	s7, s7, s10
 800a05e:	ee26 5a84 	vmul.f32	s10, s13, s8
 800a062:	ee25 4aa4 	vmul.f32	s8, s11, s9
 800a066:	ee34 4a05 	vadd.f32	s8, s8, s10
 800a06a:	ed43 4a01 	vstr	s9, [r3, #-4]
 800a06e:	3040      	adds	r0, #64	; 0x40
 800a070:	3340      	adds	r3, #64	; 0x40
 800a072:	3c01      	subs	r4, #1
 800a074:	f47f ae9b 	bne.w	8009dae <arm_biquad_cascade_df2T_f32+0x52>
 800a078:	4449      	add	r1, r9
 800a07a:	465b      	mov	r3, fp
 800a07c:	f1b8 0f00 	cmp.w	r8, #0
 800a080:	d019      	beq.n	800a0b6 <arm_biquad_cascade_df2T_f32+0x35a>
 800a082:	eb01 000a 	add.w	r0, r1, sl
 800a086:	ecf1 2a01 	vldmia	r1!, {s5}
 800a08a:	ee27 3aa2 	vmul.f32	s6, s15, s5
 800a08e:	ee33 3a23 	vadd.f32	s6, s6, s7
 800a092:	ee67 3a22 	vmul.f32	s7, s14, s5
 800a096:	ee33 4a84 	vadd.f32	s8, s7, s8
 800a09a:	ee26 5a03 	vmul.f32	s10, s12, s6
 800a09e:	ee75 3a04 	vadd.f32	s7, s10, s8
 800a0a2:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800a0a6:	ee25 4a83 	vmul.f32	s8, s11, s6
 800a0aa:	ee34 4a22 	vadd.f32	s8, s8, s5
 800a0ae:	eca3 3a01 	vstmia	r3!, {s6}
 800a0b2:	4281      	cmp	r1, r0
 800a0b4:	d1e7      	bne.n	800a086 <arm_biquad_cascade_df2T_f32+0x32a>
 800a0b6:	ed4c 3a02 	vstr	s7, [ip, #-8]
 800a0ba:	ed0c 4a01 	vstr	s8, [ip, #-4]
 800a0be:	3514      	adds	r5, #20
 800a0c0:	3608      	adds	r6, #8
 800a0c2:	4611      	mov	r1, r2
 800a0c4:	3f01      	subs	r7, #1
 800a0c6:	f47f ae5a 	bne.w	8009d7e <arm_biquad_cascade_df2T_f32+0x22>
 800a0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	e7d4      	b.n	800a07c <arm_biquad_cascade_df2T_f32+0x320>
	...

0800a0d4 <arm_biquad_cascade_df2T_init_f32>:
 800a0d4:	b510      	push	{r4, lr}
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	4608      	mov	r0, r1
 800a0da:	2100      	movs	r1, #0
 800a0dc:	60a2      	str	r2, [r4, #8]
 800a0de:	00c2      	lsls	r2, r0, #3
 800a0e0:	7020      	strb	r0, [r4, #0]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 facf 	bl	800a686 <memset>
 800a0e8:	6060      	str	r0, [r4, #4]
 800a0ea:	bd10      	pop	{r4, pc}

0800a0ec <arm_sub_f32>:
 800a0ec:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800a0f0:	b4f0      	push	{r4, r5, r6, r7}
 800a0f2:	d033      	beq.n	800a15c <arm_sub_f32+0x70>
 800a0f4:	f100 0610 	add.w	r6, r0, #16
 800a0f8:	f101 0510 	add.w	r5, r1, #16
 800a0fc:	f102 0410 	add.w	r4, r2, #16
 800a100:	4667      	mov	r7, ip
 800a102:	ed15 7a04 	vldr	s14, [r5, #-16]
 800a106:	3f01      	subs	r7, #1
 800a108:	ed56 7a04 	vldr	s15, [r6, #-16]
 800a10c:	f105 0510 	add.w	r5, r5, #16
 800a110:	f106 0610 	add.w	r6, r6, #16
 800a114:	f104 0410 	add.w	r4, r4, #16
 800a118:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a11c:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 800a120:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 800a124:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 800a128:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a12c:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 800a130:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 800a134:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800a138:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a13c:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800a140:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800a144:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800a148:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a14c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800a150:	d1d7      	bne.n	800a102 <arm_sub_f32+0x16>
 800a152:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800a156:	4420      	add	r0, r4
 800a158:	4421      	add	r1, r4
 800a15a:	4422      	add	r2, r4
 800a15c:	f013 0303 	ands.w	r3, r3, #3
 800a160:	d01b      	beq.n	800a19a <arm_sub_f32+0xae>
 800a162:	edd0 7a00 	vldr	s15, [r0]
 800a166:	3b01      	subs	r3, #1
 800a168:	ed91 7a00 	vldr	s14, [r1]
 800a16c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a170:	edc2 7a00 	vstr	s15, [r2]
 800a174:	d011      	beq.n	800a19a <arm_sub_f32+0xae>
 800a176:	edd0 7a01 	vldr	s15, [r0, #4]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	ed91 7a01 	vldr	s14, [r1, #4]
 800a180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a184:	edc2 7a01 	vstr	s15, [r2, #4]
 800a188:	d007      	beq.n	800a19a <arm_sub_f32+0xae>
 800a18a:	edd0 7a02 	vldr	s15, [r0, #8]
 800a18e:	ed91 7a02 	vldr	s14, [r1, #8]
 800a192:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a196:	edc2 7a02 	vstr	s15, [r2, #8]
 800a19a:	bcf0      	pop	{r4, r5, r6, r7}
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop

0800a1a0 <arm_mult_f32>:
 800a1a0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800a1a4:	b4f0      	push	{r4, r5, r6, r7}
 800a1a6:	d033      	beq.n	800a210 <arm_mult_f32+0x70>
 800a1a8:	f100 0610 	add.w	r6, r0, #16
 800a1ac:	f101 0510 	add.w	r5, r1, #16
 800a1b0:	f102 0410 	add.w	r4, r2, #16
 800a1b4:	4667      	mov	r7, ip
 800a1b6:	ed15 7a04 	vldr	s14, [r5, #-16]
 800a1ba:	3f01      	subs	r7, #1
 800a1bc:	ed56 7a04 	vldr	s15, [r6, #-16]
 800a1c0:	f105 0510 	add.w	r5, r5, #16
 800a1c4:	f106 0610 	add.w	r6, r6, #16
 800a1c8:	f104 0410 	add.w	r4, r4, #16
 800a1cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1d0:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 800a1d4:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 800a1d8:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 800a1dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1e0:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 800a1e4:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 800a1e8:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800a1ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1f0:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800a1f4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800a1f8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800a1fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a200:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800a204:	d1d7      	bne.n	800a1b6 <arm_mult_f32+0x16>
 800a206:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800a20a:	4420      	add	r0, r4
 800a20c:	4421      	add	r1, r4
 800a20e:	4422      	add	r2, r4
 800a210:	f013 0303 	ands.w	r3, r3, #3
 800a214:	d01b      	beq.n	800a24e <arm_mult_f32+0xae>
 800a216:	edd1 7a00 	vldr	s15, [r1]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	ed90 7a00 	vldr	s14, [r0]
 800a220:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a224:	edc2 7a00 	vstr	s15, [r2]
 800a228:	d011      	beq.n	800a24e <arm_mult_f32+0xae>
 800a22a:	edd0 7a01 	vldr	s15, [r0, #4]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	ed91 7a01 	vldr	s14, [r1, #4]
 800a234:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a238:	edc2 7a01 	vstr	s15, [r2, #4]
 800a23c:	d007      	beq.n	800a24e <arm_mult_f32+0xae>
 800a23e:	edd0 7a02 	vldr	s15, [r0, #8]
 800a242:	ed91 7a02 	vldr	s14, [r1, #8]
 800a246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a24a:	edc2 7a02 	vstr	s15, [r2, #8]
 800a24e:	bcf0      	pop	{r4, r5, r6, r7}
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop

0800a254 <arm_dot_prod_f32>:
 800a254:	b4f0      	push	{r4, r5, r6, r7}
 800a256:	0897      	lsrs	r7, r2, #2
 800a258:	d052      	beq.n	800a300 <arm_dot_prod_f32+0xac>
 800a25a:	f100 0510 	add.w	r5, r0, #16
 800a25e:	f101 0410 	add.w	r4, r1, #16
 800a262:	463e      	mov	r6, r7
 800a264:	eddf 7a28 	vldr	s15, [pc, #160]	; 800a308 <arm_dot_prod_f32+0xb4>
 800a268:	ed14 7a04 	vldr	s14, [r4, #-16]
 800a26c:	3e01      	subs	r6, #1
 800a26e:	ed15 6a04 	vldr	s12, [r5, #-16]
 800a272:	f104 0410 	add.w	r4, r4, #16
 800a276:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
 800a27a:	f105 0510 	add.w	r5, r5, #16
 800a27e:	ee26 6a07 	vmul.f32	s12, s12, s14
 800a282:	ed55 6a07 	vldr	s13, [r5, #-28]	; 0xffffffe4
 800a286:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 800a28a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a28e:	ed54 5a06 	vldr	s11, [r4, #-24]	; 0xffffffe8
 800a292:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a296:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800a29a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a29e:	ed54 5a05 	vldr	s11, [r4, #-20]	; 0xffffffec
 800a2a2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a2a6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a2aa:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a2ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2b2:	d1d9      	bne.n	800a268 <arm_dot_prod_f32+0x14>
 800a2b4:	013f      	lsls	r7, r7, #4
 800a2b6:	4438      	add	r0, r7
 800a2b8:	4439      	add	r1, r7
 800a2ba:	f012 0203 	ands.w	r2, r2, #3
 800a2be:	d01b      	beq.n	800a2f8 <arm_dot_prod_f32+0xa4>
 800a2c0:	ed91 7a00 	vldr	s14, [r1]
 800a2c4:	3a01      	subs	r2, #1
 800a2c6:	edd0 6a00 	vldr	s13, [r0]
 800a2ca:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a2ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2d2:	d011      	beq.n	800a2f8 <arm_dot_prod_f32+0xa4>
 800a2d4:	ed91 7a01 	vldr	s14, [r1, #4]
 800a2d8:	2a01      	cmp	r2, #1
 800a2da:	edd0 6a01 	vldr	s13, [r0, #4]
 800a2de:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a2e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2e6:	d007      	beq.n	800a2f8 <arm_dot_prod_f32+0xa4>
 800a2e8:	ed90 7a02 	vldr	s14, [r0, #8]
 800a2ec:	edd1 6a02 	vldr	s13, [r1, #8]
 800a2f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a2f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2f8:	edc3 7a00 	vstr	s15, [r3]
 800a2fc:	bcf0      	pop	{r4, r5, r6, r7}
 800a2fe:	4770      	bx	lr
 800a300:	eddf 7a01 	vldr	s15, [pc, #4]	; 800a308 <arm_dot_prod_f32+0xb4>
 800a304:	e7d9      	b.n	800a2ba <arm_dot_prod_f32+0x66>
 800a306:	bf00      	nop
 800a308:	00000000 	.word	0x00000000

0800a30c <arm_add_f32>:
 800a30c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800a310:	b4f0      	push	{r4, r5, r6, r7}
 800a312:	d033      	beq.n	800a37c <arm_add_f32+0x70>
 800a314:	f100 0610 	add.w	r6, r0, #16
 800a318:	f101 0510 	add.w	r5, r1, #16
 800a31c:	f102 0410 	add.w	r4, r2, #16
 800a320:	4667      	mov	r7, ip
 800a322:	ed15 7a04 	vldr	s14, [r5, #-16]
 800a326:	3f01      	subs	r7, #1
 800a328:	ed56 7a04 	vldr	s15, [r6, #-16]
 800a32c:	f105 0510 	add.w	r5, r5, #16
 800a330:	f106 0610 	add.w	r6, r6, #16
 800a334:	f104 0410 	add.w	r4, r4, #16
 800a338:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a33c:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 800a340:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 800a344:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 800a348:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a34c:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 800a350:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 800a354:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800a358:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a35c:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800a360:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800a364:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800a368:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a36c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800a370:	d1d7      	bne.n	800a322 <arm_add_f32+0x16>
 800a372:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800a376:	4420      	add	r0, r4
 800a378:	4421      	add	r1, r4
 800a37a:	4422      	add	r2, r4
 800a37c:	f013 0303 	ands.w	r3, r3, #3
 800a380:	d01b      	beq.n	800a3ba <arm_add_f32+0xae>
 800a382:	edd1 7a00 	vldr	s15, [r1]
 800a386:	3b01      	subs	r3, #1
 800a388:	ed90 7a00 	vldr	s14, [r0]
 800a38c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a390:	edc2 7a00 	vstr	s15, [r2]
 800a394:	d011      	beq.n	800a3ba <arm_add_f32+0xae>
 800a396:	edd0 7a01 	vldr	s15, [r0, #4]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	ed91 7a01 	vldr	s14, [r1, #4]
 800a3a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3a4:	edc2 7a01 	vstr	s15, [r2, #4]
 800a3a8:	d007      	beq.n	800a3ba <arm_add_f32+0xae>
 800a3aa:	edd0 7a02 	vldr	s15, [r0, #8]
 800a3ae:	ed91 7a02 	vldr	s14, [r1, #8]
 800a3b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3b6:	edc2 7a02 	vstr	s15, [r2, #8]
 800a3ba:	bcf0      	pop	{r4, r5, r6, r7}
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop

0800a3c0 <arm_abs_f32>:
 800a3c0:	b470      	push	{r4, r5, r6}
 800a3c2:	0896      	lsrs	r6, r2, #2
 800a3c4:	d025      	beq.n	800a412 <arm_abs_f32+0x52>
 800a3c6:	f100 0410 	add.w	r4, r0, #16
 800a3ca:	f101 0310 	add.w	r3, r1, #16
 800a3ce:	4635      	mov	r5, r6
 800a3d0:	ed54 7a04 	vldr	s15, [r4, #-16]
 800a3d4:	3d01      	subs	r5, #1
 800a3d6:	f104 0410 	add.w	r4, r4, #16
 800a3da:	f103 0310 	add.w	r3, r3, #16
 800a3de:	eef0 7ae7 	vabs.f32	s15, s15
 800a3e2:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800a3e6:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800a3ea:	eef0 7ae7 	vabs.f32	s15, s15
 800a3ee:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 800a3f2:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800a3f6:	eef0 7ae7 	vabs.f32	s15, s15
 800a3fa:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800a3fe:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800a402:	eef0 7ae7 	vabs.f32	s15, s15
 800a406:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800a40a:	d1e1      	bne.n	800a3d0 <arm_abs_f32+0x10>
 800a40c:	0136      	lsls	r6, r6, #4
 800a40e:	4430      	add	r0, r6
 800a410:	4431      	add	r1, r6
 800a412:	f012 0203 	ands.w	r2, r2, #3
 800a416:	d015      	beq.n	800a444 <arm_abs_f32+0x84>
 800a418:	edd0 7a00 	vldr	s15, [r0]
 800a41c:	3a01      	subs	r2, #1
 800a41e:	eef0 7ae7 	vabs.f32	s15, s15
 800a422:	edc1 7a00 	vstr	s15, [r1]
 800a426:	d00d      	beq.n	800a444 <arm_abs_f32+0x84>
 800a428:	edd0 7a01 	vldr	s15, [r0, #4]
 800a42c:	2a01      	cmp	r2, #1
 800a42e:	eef0 7ae7 	vabs.f32	s15, s15
 800a432:	edc1 7a01 	vstr	s15, [r1, #4]
 800a436:	d005      	beq.n	800a444 <arm_abs_f32+0x84>
 800a438:	edd0 7a02 	vldr	s15, [r0, #8]
 800a43c:	eef0 7ae7 	vabs.f32	s15, s15
 800a440:	edc1 7a02 	vstr	s15, [r1, #8]
 800a444:	bc70      	pop	{r4, r5, r6}
 800a446:	4770      	bx	lr

0800a448 <std>:
 800a448:	2300      	movs	r3, #0
 800a44a:	b510      	push	{r4, lr}
 800a44c:	4604      	mov	r4, r0
 800a44e:	e9c0 3300 	strd	r3, r3, [r0]
 800a452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a456:	6083      	str	r3, [r0, #8]
 800a458:	8181      	strh	r1, [r0, #12]
 800a45a:	6643      	str	r3, [r0, #100]	; 0x64
 800a45c:	81c2      	strh	r2, [r0, #14]
 800a45e:	6183      	str	r3, [r0, #24]
 800a460:	4619      	mov	r1, r3
 800a462:	2208      	movs	r2, #8
 800a464:	305c      	adds	r0, #92	; 0x5c
 800a466:	f000 f90e 	bl	800a686 <memset>
 800a46a:	4b0d      	ldr	r3, [pc, #52]	; (800a4a0 <std+0x58>)
 800a46c:	6263      	str	r3, [r4, #36]	; 0x24
 800a46e:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <std+0x5c>)
 800a470:	62a3      	str	r3, [r4, #40]	; 0x28
 800a472:	4b0d      	ldr	r3, [pc, #52]	; (800a4a8 <std+0x60>)
 800a474:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a476:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <std+0x64>)
 800a478:	6323      	str	r3, [r4, #48]	; 0x30
 800a47a:	4b0d      	ldr	r3, [pc, #52]	; (800a4b0 <std+0x68>)
 800a47c:	6224      	str	r4, [r4, #32]
 800a47e:	429c      	cmp	r4, r3
 800a480:	d006      	beq.n	800a490 <std+0x48>
 800a482:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a486:	4294      	cmp	r4, r2
 800a488:	d002      	beq.n	800a490 <std+0x48>
 800a48a:	33d0      	adds	r3, #208	; 0xd0
 800a48c:	429c      	cmp	r4, r3
 800a48e:	d105      	bne.n	800a49c <std+0x54>
 800a490:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a498:	f000 b96e 	b.w	800a778 <__retarget_lock_init_recursive>
 800a49c:	bd10      	pop	{r4, pc}
 800a49e:	bf00      	nop
 800a4a0:	0800a601 	.word	0x0800a601
 800a4a4:	0800a623 	.word	0x0800a623
 800a4a8:	0800a65b 	.word	0x0800a65b
 800a4ac:	0800a67f 	.word	0x0800a67f
 800a4b0:	2400c85c 	.word	0x2400c85c

0800a4b4 <stdio_exit_handler>:
 800a4b4:	4a02      	ldr	r2, [pc, #8]	; (800a4c0 <stdio_exit_handler+0xc>)
 800a4b6:	4903      	ldr	r1, [pc, #12]	; (800a4c4 <stdio_exit_handler+0x10>)
 800a4b8:	4803      	ldr	r0, [pc, #12]	; (800a4c8 <stdio_exit_handler+0x14>)
 800a4ba:	f000 b869 	b.w	800a590 <_fwalk_sglue>
 800a4be:	bf00      	nop
 800a4c0:	24000488 	.word	0x24000488
 800a4c4:	0800b041 	.word	0x0800b041
 800a4c8:	24000494 	.word	0x24000494

0800a4cc <cleanup_stdio>:
 800a4cc:	6841      	ldr	r1, [r0, #4]
 800a4ce:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <cleanup_stdio+0x34>)
 800a4d0:	4299      	cmp	r1, r3
 800a4d2:	b510      	push	{r4, lr}
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	d001      	beq.n	800a4dc <cleanup_stdio+0x10>
 800a4d8:	f000 fdb2 	bl	800b040 <_fflush_r>
 800a4dc:	68a1      	ldr	r1, [r4, #8]
 800a4de:	4b09      	ldr	r3, [pc, #36]	; (800a504 <cleanup_stdio+0x38>)
 800a4e0:	4299      	cmp	r1, r3
 800a4e2:	d002      	beq.n	800a4ea <cleanup_stdio+0x1e>
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f000 fdab 	bl	800b040 <_fflush_r>
 800a4ea:	68e1      	ldr	r1, [r4, #12]
 800a4ec:	4b06      	ldr	r3, [pc, #24]	; (800a508 <cleanup_stdio+0x3c>)
 800a4ee:	4299      	cmp	r1, r3
 800a4f0:	d004      	beq.n	800a4fc <cleanup_stdio+0x30>
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4f8:	f000 bda2 	b.w	800b040 <_fflush_r>
 800a4fc:	bd10      	pop	{r4, pc}
 800a4fe:	bf00      	nop
 800a500:	2400c85c 	.word	0x2400c85c
 800a504:	2400c8c4 	.word	0x2400c8c4
 800a508:	2400c92c 	.word	0x2400c92c

0800a50c <global_stdio_init.part.0>:
 800a50c:	b510      	push	{r4, lr}
 800a50e:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <global_stdio_init.part.0+0x30>)
 800a510:	4c0b      	ldr	r4, [pc, #44]	; (800a540 <global_stdio_init.part.0+0x34>)
 800a512:	4a0c      	ldr	r2, [pc, #48]	; (800a544 <global_stdio_init.part.0+0x38>)
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	4620      	mov	r0, r4
 800a518:	2200      	movs	r2, #0
 800a51a:	2104      	movs	r1, #4
 800a51c:	f7ff ff94 	bl	800a448 <std>
 800a520:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a524:	2201      	movs	r2, #1
 800a526:	2109      	movs	r1, #9
 800a528:	f7ff ff8e 	bl	800a448 <std>
 800a52c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a530:	2202      	movs	r2, #2
 800a532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a536:	2112      	movs	r1, #18
 800a538:	f7ff bf86 	b.w	800a448 <std>
 800a53c:	2400c994 	.word	0x2400c994
 800a540:	2400c85c 	.word	0x2400c85c
 800a544:	0800a4b5 	.word	0x0800a4b5

0800a548 <__sfp_lock_acquire>:
 800a548:	4801      	ldr	r0, [pc, #4]	; (800a550 <__sfp_lock_acquire+0x8>)
 800a54a:	f000 b916 	b.w	800a77a <__retarget_lock_acquire_recursive>
 800a54e:	bf00      	nop
 800a550:	2400c99d 	.word	0x2400c99d

0800a554 <__sfp_lock_release>:
 800a554:	4801      	ldr	r0, [pc, #4]	; (800a55c <__sfp_lock_release+0x8>)
 800a556:	f000 b911 	b.w	800a77c <__retarget_lock_release_recursive>
 800a55a:	bf00      	nop
 800a55c:	2400c99d 	.word	0x2400c99d

0800a560 <__sinit>:
 800a560:	b510      	push	{r4, lr}
 800a562:	4604      	mov	r4, r0
 800a564:	f7ff fff0 	bl	800a548 <__sfp_lock_acquire>
 800a568:	6a23      	ldr	r3, [r4, #32]
 800a56a:	b11b      	cbz	r3, 800a574 <__sinit+0x14>
 800a56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a570:	f7ff bff0 	b.w	800a554 <__sfp_lock_release>
 800a574:	4b04      	ldr	r3, [pc, #16]	; (800a588 <__sinit+0x28>)
 800a576:	6223      	str	r3, [r4, #32]
 800a578:	4b04      	ldr	r3, [pc, #16]	; (800a58c <__sinit+0x2c>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1f5      	bne.n	800a56c <__sinit+0xc>
 800a580:	f7ff ffc4 	bl	800a50c <global_stdio_init.part.0>
 800a584:	e7f2      	b.n	800a56c <__sinit+0xc>
 800a586:	bf00      	nop
 800a588:	0800a4cd 	.word	0x0800a4cd
 800a58c:	2400c994 	.word	0x2400c994

0800a590 <_fwalk_sglue>:
 800a590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a594:	4607      	mov	r7, r0
 800a596:	4688      	mov	r8, r1
 800a598:	4614      	mov	r4, r2
 800a59a:	2600      	movs	r6, #0
 800a59c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a5a4:	d505      	bpl.n	800a5b2 <_fwalk_sglue+0x22>
 800a5a6:	6824      	ldr	r4, [r4, #0]
 800a5a8:	2c00      	cmp	r4, #0
 800a5aa:	d1f7      	bne.n	800a59c <_fwalk_sglue+0xc>
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b2:	89ab      	ldrh	r3, [r5, #12]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d907      	bls.n	800a5c8 <_fwalk_sglue+0x38>
 800a5b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	d003      	beq.n	800a5c8 <_fwalk_sglue+0x38>
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	4638      	mov	r0, r7
 800a5c4:	47c0      	blx	r8
 800a5c6:	4306      	orrs	r6, r0
 800a5c8:	3568      	adds	r5, #104	; 0x68
 800a5ca:	e7e9      	b.n	800a5a0 <_fwalk_sglue+0x10>

0800a5cc <iprintf>:
 800a5cc:	b40f      	push	{r0, r1, r2, r3}
 800a5ce:	b507      	push	{r0, r1, r2, lr}
 800a5d0:	4906      	ldr	r1, [pc, #24]	; (800a5ec <iprintf+0x20>)
 800a5d2:	ab04      	add	r3, sp, #16
 800a5d4:	6808      	ldr	r0, [r1, #0]
 800a5d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5da:	6881      	ldr	r1, [r0, #8]
 800a5dc:	9301      	str	r3, [sp, #4]
 800a5de:	f000 f9ff 	bl	800a9e0 <_vfiprintf_r>
 800a5e2:	b003      	add	sp, #12
 800a5e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5e8:	b004      	add	sp, #16
 800a5ea:	4770      	bx	lr
 800a5ec:	240004e0 	.word	0x240004e0

0800a5f0 <putchar>:
 800a5f0:	4b02      	ldr	r3, [pc, #8]	; (800a5fc <putchar+0xc>)
 800a5f2:	4601      	mov	r1, r0
 800a5f4:	6818      	ldr	r0, [r3, #0]
 800a5f6:	6882      	ldr	r2, [r0, #8]
 800a5f8:	f000 bd4a 	b.w	800b090 <_putc_r>
 800a5fc:	240004e0 	.word	0x240004e0

0800a600 <__sread>:
 800a600:	b510      	push	{r4, lr}
 800a602:	460c      	mov	r4, r1
 800a604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a608:	f000 f868 	bl	800a6dc <_read_r>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	bfab      	itete	ge
 800a610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a612:	89a3      	ldrhlt	r3, [r4, #12]
 800a614:	181b      	addge	r3, r3, r0
 800a616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a61a:	bfac      	ite	ge
 800a61c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a61e:	81a3      	strhlt	r3, [r4, #12]
 800a620:	bd10      	pop	{r4, pc}

0800a622 <__swrite>:
 800a622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a626:	461f      	mov	r7, r3
 800a628:	898b      	ldrh	r3, [r1, #12]
 800a62a:	05db      	lsls	r3, r3, #23
 800a62c:	4605      	mov	r5, r0
 800a62e:	460c      	mov	r4, r1
 800a630:	4616      	mov	r6, r2
 800a632:	d505      	bpl.n	800a640 <__swrite+0x1e>
 800a634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a638:	2302      	movs	r3, #2
 800a63a:	2200      	movs	r2, #0
 800a63c:	f000 f83c 	bl	800a6b8 <_lseek_r>
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a64a:	81a3      	strh	r3, [r4, #12]
 800a64c:	4632      	mov	r2, r6
 800a64e:	463b      	mov	r3, r7
 800a650:	4628      	mov	r0, r5
 800a652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a656:	f000 b853 	b.w	800a700 <_write_r>

0800a65a <__sseek>:
 800a65a:	b510      	push	{r4, lr}
 800a65c:	460c      	mov	r4, r1
 800a65e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a662:	f000 f829 	bl	800a6b8 <_lseek_r>
 800a666:	1c43      	adds	r3, r0, #1
 800a668:	89a3      	ldrh	r3, [r4, #12]
 800a66a:	bf15      	itete	ne
 800a66c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a66e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a676:	81a3      	strheq	r3, [r4, #12]
 800a678:	bf18      	it	ne
 800a67a:	81a3      	strhne	r3, [r4, #12]
 800a67c:	bd10      	pop	{r4, pc}

0800a67e <__sclose>:
 800a67e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a682:	f000 b809 	b.w	800a698 <_close_r>

0800a686 <memset>:
 800a686:	4402      	add	r2, r0
 800a688:	4603      	mov	r3, r0
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d100      	bne.n	800a690 <memset+0xa>
 800a68e:	4770      	bx	lr
 800a690:	f803 1b01 	strb.w	r1, [r3], #1
 800a694:	e7f9      	b.n	800a68a <memset+0x4>
	...

0800a698 <_close_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4d06      	ldr	r5, [pc, #24]	; (800a6b4 <_close_r+0x1c>)
 800a69c:	2300      	movs	r3, #0
 800a69e:	4604      	mov	r4, r0
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	602b      	str	r3, [r5, #0]
 800a6a4:	f7f7 fa34 	bl	8001b10 <_close>
 800a6a8:	1c43      	adds	r3, r0, #1
 800a6aa:	d102      	bne.n	800a6b2 <_close_r+0x1a>
 800a6ac:	682b      	ldr	r3, [r5, #0]
 800a6ae:	b103      	cbz	r3, 800a6b2 <_close_r+0x1a>
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	2400c998 	.word	0x2400c998

0800a6b8 <_lseek_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4d07      	ldr	r5, [pc, #28]	; (800a6d8 <_lseek_r+0x20>)
 800a6bc:	4604      	mov	r4, r0
 800a6be:	4608      	mov	r0, r1
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	602a      	str	r2, [r5, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f7f7 fa2e 	bl	8001b28 <_lseek>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_lseek_r+0x1e>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_lseek_r+0x1e>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	2400c998 	.word	0x2400c998

0800a6dc <_read_r>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	4d07      	ldr	r5, [pc, #28]	; (800a6fc <_read_r+0x20>)
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	4608      	mov	r0, r1
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	602a      	str	r2, [r5, #0]
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	f7f7 f9f4 	bl	8001ad8 <_read>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	d102      	bne.n	800a6fa <_read_r+0x1e>
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	b103      	cbz	r3, 800a6fa <_read_r+0x1e>
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}
 800a6fc:	2400c998 	.word	0x2400c998

0800a700 <_write_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4d07      	ldr	r5, [pc, #28]	; (800a720 <_write_r+0x20>)
 800a704:	4604      	mov	r4, r0
 800a706:	4608      	mov	r0, r1
 800a708:	4611      	mov	r1, r2
 800a70a:	2200      	movs	r2, #0
 800a70c:	602a      	str	r2, [r5, #0]
 800a70e:	461a      	mov	r2, r3
 800a710:	f7f7 f9f0 	bl	8001af4 <_write>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	d102      	bne.n	800a71e <_write_r+0x1e>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	b103      	cbz	r3, 800a71e <_write_r+0x1e>
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	2400c998 	.word	0x2400c998

0800a724 <__errno>:
 800a724:	4b01      	ldr	r3, [pc, #4]	; (800a72c <__errno+0x8>)
 800a726:	6818      	ldr	r0, [r3, #0]
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	240004e0 	.word	0x240004e0

0800a730 <__libc_init_array>:
 800a730:	b570      	push	{r4, r5, r6, lr}
 800a732:	4d0d      	ldr	r5, [pc, #52]	; (800a768 <__libc_init_array+0x38>)
 800a734:	4c0d      	ldr	r4, [pc, #52]	; (800a76c <__libc_init_array+0x3c>)
 800a736:	1b64      	subs	r4, r4, r5
 800a738:	10a4      	asrs	r4, r4, #2
 800a73a:	2600      	movs	r6, #0
 800a73c:	42a6      	cmp	r6, r4
 800a73e:	d109      	bne.n	800a754 <__libc_init_array+0x24>
 800a740:	4d0b      	ldr	r5, [pc, #44]	; (800a770 <__libc_init_array+0x40>)
 800a742:	4c0c      	ldr	r4, [pc, #48]	; (800a774 <__libc_init_array+0x44>)
 800a744:	f001 fbf0 	bl	800bf28 <_init>
 800a748:	1b64      	subs	r4, r4, r5
 800a74a:	10a4      	asrs	r4, r4, #2
 800a74c:	2600      	movs	r6, #0
 800a74e:	42a6      	cmp	r6, r4
 800a750:	d105      	bne.n	800a75e <__libc_init_array+0x2e>
 800a752:	bd70      	pop	{r4, r5, r6, pc}
 800a754:	f855 3b04 	ldr.w	r3, [r5], #4
 800a758:	4798      	blx	r3
 800a75a:	3601      	adds	r6, #1
 800a75c:	e7ee      	b.n	800a73c <__libc_init_array+0xc>
 800a75e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a762:	4798      	blx	r3
 800a764:	3601      	adds	r6, #1
 800a766:	e7f2      	b.n	800a74e <__libc_init_array+0x1e>
 800a768:	0800c250 	.word	0x0800c250
 800a76c:	0800c250 	.word	0x0800c250
 800a770:	0800c250 	.word	0x0800c250
 800a774:	0800c254 	.word	0x0800c254

0800a778 <__retarget_lock_init_recursive>:
 800a778:	4770      	bx	lr

0800a77a <__retarget_lock_acquire_recursive>:
 800a77a:	4770      	bx	lr

0800a77c <__retarget_lock_release_recursive>:
 800a77c:	4770      	bx	lr

0800a77e <memcpy>:
 800a77e:	440a      	add	r2, r1
 800a780:	4291      	cmp	r1, r2
 800a782:	f100 33ff 	add.w	r3, r0, #4294967295
 800a786:	d100      	bne.n	800a78a <memcpy+0xc>
 800a788:	4770      	bx	lr
 800a78a:	b510      	push	{r4, lr}
 800a78c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a790:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a794:	4291      	cmp	r1, r2
 800a796:	d1f9      	bne.n	800a78c <memcpy+0xe>
 800a798:	bd10      	pop	{r4, pc}
	...

0800a79c <_free_r>:
 800a79c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a79e:	2900      	cmp	r1, #0
 800a7a0:	d044      	beq.n	800a82c <_free_r+0x90>
 800a7a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a6:	9001      	str	r0, [sp, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f1a1 0404 	sub.w	r4, r1, #4
 800a7ae:	bfb8      	it	lt
 800a7b0:	18e4      	addlt	r4, r4, r3
 800a7b2:	f000 f8df 	bl	800a974 <__malloc_lock>
 800a7b6:	4a1e      	ldr	r2, [pc, #120]	; (800a830 <_free_r+0x94>)
 800a7b8:	9801      	ldr	r0, [sp, #4]
 800a7ba:	6813      	ldr	r3, [r2, #0]
 800a7bc:	b933      	cbnz	r3, 800a7cc <_free_r+0x30>
 800a7be:	6063      	str	r3, [r4, #4]
 800a7c0:	6014      	str	r4, [r2, #0]
 800a7c2:	b003      	add	sp, #12
 800a7c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7c8:	f000 b8da 	b.w	800a980 <__malloc_unlock>
 800a7cc:	42a3      	cmp	r3, r4
 800a7ce:	d908      	bls.n	800a7e2 <_free_r+0x46>
 800a7d0:	6825      	ldr	r5, [r4, #0]
 800a7d2:	1961      	adds	r1, r4, r5
 800a7d4:	428b      	cmp	r3, r1
 800a7d6:	bf01      	itttt	eq
 800a7d8:	6819      	ldreq	r1, [r3, #0]
 800a7da:	685b      	ldreq	r3, [r3, #4]
 800a7dc:	1949      	addeq	r1, r1, r5
 800a7de:	6021      	streq	r1, [r4, #0]
 800a7e0:	e7ed      	b.n	800a7be <_free_r+0x22>
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	b10b      	cbz	r3, 800a7ec <_free_r+0x50>
 800a7e8:	42a3      	cmp	r3, r4
 800a7ea:	d9fa      	bls.n	800a7e2 <_free_r+0x46>
 800a7ec:	6811      	ldr	r1, [r2, #0]
 800a7ee:	1855      	adds	r5, r2, r1
 800a7f0:	42a5      	cmp	r5, r4
 800a7f2:	d10b      	bne.n	800a80c <_free_r+0x70>
 800a7f4:	6824      	ldr	r4, [r4, #0]
 800a7f6:	4421      	add	r1, r4
 800a7f8:	1854      	adds	r4, r2, r1
 800a7fa:	42a3      	cmp	r3, r4
 800a7fc:	6011      	str	r1, [r2, #0]
 800a7fe:	d1e0      	bne.n	800a7c2 <_free_r+0x26>
 800a800:	681c      	ldr	r4, [r3, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	6053      	str	r3, [r2, #4]
 800a806:	440c      	add	r4, r1
 800a808:	6014      	str	r4, [r2, #0]
 800a80a:	e7da      	b.n	800a7c2 <_free_r+0x26>
 800a80c:	d902      	bls.n	800a814 <_free_r+0x78>
 800a80e:	230c      	movs	r3, #12
 800a810:	6003      	str	r3, [r0, #0]
 800a812:	e7d6      	b.n	800a7c2 <_free_r+0x26>
 800a814:	6825      	ldr	r5, [r4, #0]
 800a816:	1961      	adds	r1, r4, r5
 800a818:	428b      	cmp	r3, r1
 800a81a:	bf04      	itt	eq
 800a81c:	6819      	ldreq	r1, [r3, #0]
 800a81e:	685b      	ldreq	r3, [r3, #4]
 800a820:	6063      	str	r3, [r4, #4]
 800a822:	bf04      	itt	eq
 800a824:	1949      	addeq	r1, r1, r5
 800a826:	6021      	streq	r1, [r4, #0]
 800a828:	6054      	str	r4, [r2, #4]
 800a82a:	e7ca      	b.n	800a7c2 <_free_r+0x26>
 800a82c:	b003      	add	sp, #12
 800a82e:	bd30      	pop	{r4, r5, pc}
 800a830:	2400c9a0 	.word	0x2400c9a0

0800a834 <sbrk_aligned>:
 800a834:	b570      	push	{r4, r5, r6, lr}
 800a836:	4e0e      	ldr	r6, [pc, #56]	; (800a870 <sbrk_aligned+0x3c>)
 800a838:	460c      	mov	r4, r1
 800a83a:	6831      	ldr	r1, [r6, #0]
 800a83c:	4605      	mov	r5, r0
 800a83e:	b911      	cbnz	r1, 800a846 <sbrk_aligned+0x12>
 800a840:	f000 fcf0 	bl	800b224 <_sbrk_r>
 800a844:	6030      	str	r0, [r6, #0]
 800a846:	4621      	mov	r1, r4
 800a848:	4628      	mov	r0, r5
 800a84a:	f000 fceb 	bl	800b224 <_sbrk_r>
 800a84e:	1c43      	adds	r3, r0, #1
 800a850:	d00a      	beq.n	800a868 <sbrk_aligned+0x34>
 800a852:	1cc4      	adds	r4, r0, #3
 800a854:	f024 0403 	bic.w	r4, r4, #3
 800a858:	42a0      	cmp	r0, r4
 800a85a:	d007      	beq.n	800a86c <sbrk_aligned+0x38>
 800a85c:	1a21      	subs	r1, r4, r0
 800a85e:	4628      	mov	r0, r5
 800a860:	f000 fce0 	bl	800b224 <_sbrk_r>
 800a864:	3001      	adds	r0, #1
 800a866:	d101      	bne.n	800a86c <sbrk_aligned+0x38>
 800a868:	f04f 34ff 	mov.w	r4, #4294967295
 800a86c:	4620      	mov	r0, r4
 800a86e:	bd70      	pop	{r4, r5, r6, pc}
 800a870:	2400c9a4 	.word	0x2400c9a4

0800a874 <_malloc_r>:
 800a874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a878:	1ccd      	adds	r5, r1, #3
 800a87a:	f025 0503 	bic.w	r5, r5, #3
 800a87e:	3508      	adds	r5, #8
 800a880:	2d0c      	cmp	r5, #12
 800a882:	bf38      	it	cc
 800a884:	250c      	movcc	r5, #12
 800a886:	2d00      	cmp	r5, #0
 800a888:	4607      	mov	r7, r0
 800a88a:	db01      	blt.n	800a890 <_malloc_r+0x1c>
 800a88c:	42a9      	cmp	r1, r5
 800a88e:	d905      	bls.n	800a89c <_malloc_r+0x28>
 800a890:	230c      	movs	r3, #12
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	2600      	movs	r6, #0
 800a896:	4630      	mov	r0, r6
 800a898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a89c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a970 <_malloc_r+0xfc>
 800a8a0:	f000 f868 	bl	800a974 <__malloc_lock>
 800a8a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a8a8:	461c      	mov	r4, r3
 800a8aa:	bb5c      	cbnz	r4, 800a904 <_malloc_r+0x90>
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	f7ff ffc0 	bl	800a834 <sbrk_aligned>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	d155      	bne.n	800a966 <_malloc_r+0xf2>
 800a8ba:	f8d8 4000 	ldr.w	r4, [r8]
 800a8be:	4626      	mov	r6, r4
 800a8c0:	2e00      	cmp	r6, #0
 800a8c2:	d145      	bne.n	800a950 <_malloc_r+0xdc>
 800a8c4:	2c00      	cmp	r4, #0
 800a8c6:	d048      	beq.n	800a95a <_malloc_r+0xe6>
 800a8c8:	6823      	ldr	r3, [r4, #0]
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	4638      	mov	r0, r7
 800a8ce:	eb04 0903 	add.w	r9, r4, r3
 800a8d2:	f000 fca7 	bl	800b224 <_sbrk_r>
 800a8d6:	4581      	cmp	r9, r0
 800a8d8:	d13f      	bne.n	800a95a <_malloc_r+0xe6>
 800a8da:	6821      	ldr	r1, [r4, #0]
 800a8dc:	1a6d      	subs	r5, r5, r1
 800a8de:	4629      	mov	r1, r5
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f7ff ffa7 	bl	800a834 <sbrk_aligned>
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	d037      	beq.n	800a95a <_malloc_r+0xe6>
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	442b      	add	r3, r5
 800a8ee:	6023      	str	r3, [r4, #0]
 800a8f0:	f8d8 3000 	ldr.w	r3, [r8]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d038      	beq.n	800a96a <_malloc_r+0xf6>
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	42a2      	cmp	r2, r4
 800a8fc:	d12b      	bne.n	800a956 <_malloc_r+0xe2>
 800a8fe:	2200      	movs	r2, #0
 800a900:	605a      	str	r2, [r3, #4]
 800a902:	e00f      	b.n	800a924 <_malloc_r+0xb0>
 800a904:	6822      	ldr	r2, [r4, #0]
 800a906:	1b52      	subs	r2, r2, r5
 800a908:	d41f      	bmi.n	800a94a <_malloc_r+0xd6>
 800a90a:	2a0b      	cmp	r2, #11
 800a90c:	d917      	bls.n	800a93e <_malloc_r+0xca>
 800a90e:	1961      	adds	r1, r4, r5
 800a910:	42a3      	cmp	r3, r4
 800a912:	6025      	str	r5, [r4, #0]
 800a914:	bf18      	it	ne
 800a916:	6059      	strne	r1, [r3, #4]
 800a918:	6863      	ldr	r3, [r4, #4]
 800a91a:	bf08      	it	eq
 800a91c:	f8c8 1000 	streq.w	r1, [r8]
 800a920:	5162      	str	r2, [r4, r5]
 800a922:	604b      	str	r3, [r1, #4]
 800a924:	4638      	mov	r0, r7
 800a926:	f104 060b 	add.w	r6, r4, #11
 800a92a:	f000 f829 	bl	800a980 <__malloc_unlock>
 800a92e:	f026 0607 	bic.w	r6, r6, #7
 800a932:	1d23      	adds	r3, r4, #4
 800a934:	1af2      	subs	r2, r6, r3
 800a936:	d0ae      	beq.n	800a896 <_malloc_r+0x22>
 800a938:	1b9b      	subs	r3, r3, r6
 800a93a:	50a3      	str	r3, [r4, r2]
 800a93c:	e7ab      	b.n	800a896 <_malloc_r+0x22>
 800a93e:	42a3      	cmp	r3, r4
 800a940:	6862      	ldr	r2, [r4, #4]
 800a942:	d1dd      	bne.n	800a900 <_malloc_r+0x8c>
 800a944:	f8c8 2000 	str.w	r2, [r8]
 800a948:	e7ec      	b.n	800a924 <_malloc_r+0xb0>
 800a94a:	4623      	mov	r3, r4
 800a94c:	6864      	ldr	r4, [r4, #4]
 800a94e:	e7ac      	b.n	800a8aa <_malloc_r+0x36>
 800a950:	4634      	mov	r4, r6
 800a952:	6876      	ldr	r6, [r6, #4]
 800a954:	e7b4      	b.n	800a8c0 <_malloc_r+0x4c>
 800a956:	4613      	mov	r3, r2
 800a958:	e7cc      	b.n	800a8f4 <_malloc_r+0x80>
 800a95a:	230c      	movs	r3, #12
 800a95c:	603b      	str	r3, [r7, #0]
 800a95e:	4638      	mov	r0, r7
 800a960:	f000 f80e 	bl	800a980 <__malloc_unlock>
 800a964:	e797      	b.n	800a896 <_malloc_r+0x22>
 800a966:	6025      	str	r5, [r4, #0]
 800a968:	e7dc      	b.n	800a924 <_malloc_r+0xb0>
 800a96a:	605b      	str	r3, [r3, #4]
 800a96c:	deff      	udf	#255	; 0xff
 800a96e:	bf00      	nop
 800a970:	2400c9a0 	.word	0x2400c9a0

0800a974 <__malloc_lock>:
 800a974:	4801      	ldr	r0, [pc, #4]	; (800a97c <__malloc_lock+0x8>)
 800a976:	f7ff bf00 	b.w	800a77a <__retarget_lock_acquire_recursive>
 800a97a:	bf00      	nop
 800a97c:	2400c99c 	.word	0x2400c99c

0800a980 <__malloc_unlock>:
 800a980:	4801      	ldr	r0, [pc, #4]	; (800a988 <__malloc_unlock+0x8>)
 800a982:	f7ff befb 	b.w	800a77c <__retarget_lock_release_recursive>
 800a986:	bf00      	nop
 800a988:	2400c99c 	.word	0x2400c99c

0800a98c <__sfputc_r>:
 800a98c:	6893      	ldr	r3, [r2, #8]
 800a98e:	3b01      	subs	r3, #1
 800a990:	2b00      	cmp	r3, #0
 800a992:	b410      	push	{r4}
 800a994:	6093      	str	r3, [r2, #8]
 800a996:	da08      	bge.n	800a9aa <__sfputc_r+0x1e>
 800a998:	6994      	ldr	r4, [r2, #24]
 800a99a:	42a3      	cmp	r3, r4
 800a99c:	db01      	blt.n	800a9a2 <__sfputc_r+0x16>
 800a99e:	290a      	cmp	r1, #10
 800a9a0:	d103      	bne.n	800a9aa <__sfputc_r+0x1e>
 800a9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a6:	f000 bba7 	b.w	800b0f8 <__swbuf_r>
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	1c58      	adds	r0, r3, #1
 800a9ae:	6010      	str	r0, [r2, #0]
 800a9b0:	7019      	strb	r1, [r3, #0]
 800a9b2:	4608      	mov	r0, r1
 800a9b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <__sfputs_r>:
 800a9ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9bc:	4606      	mov	r6, r0
 800a9be:	460f      	mov	r7, r1
 800a9c0:	4614      	mov	r4, r2
 800a9c2:	18d5      	adds	r5, r2, r3
 800a9c4:	42ac      	cmp	r4, r5
 800a9c6:	d101      	bne.n	800a9cc <__sfputs_r+0x12>
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	e007      	b.n	800a9dc <__sfputs_r+0x22>
 800a9cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9d0:	463a      	mov	r2, r7
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f7ff ffda 	bl	800a98c <__sfputc_r>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	d1f3      	bne.n	800a9c4 <__sfputs_r+0xa>
 800a9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9e0 <_vfiprintf_r>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	460d      	mov	r5, r1
 800a9e6:	b09d      	sub	sp, #116	; 0x74
 800a9e8:	4614      	mov	r4, r2
 800a9ea:	4698      	mov	r8, r3
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	b118      	cbz	r0, 800a9f8 <_vfiprintf_r+0x18>
 800a9f0:	6a03      	ldr	r3, [r0, #32]
 800a9f2:	b90b      	cbnz	r3, 800a9f8 <_vfiprintf_r+0x18>
 800a9f4:	f7ff fdb4 	bl	800a560 <__sinit>
 800a9f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9fa:	07d9      	lsls	r1, r3, #31
 800a9fc:	d405      	bmi.n	800aa0a <_vfiprintf_r+0x2a>
 800a9fe:	89ab      	ldrh	r3, [r5, #12]
 800aa00:	059a      	lsls	r2, r3, #22
 800aa02:	d402      	bmi.n	800aa0a <_vfiprintf_r+0x2a>
 800aa04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa06:	f7ff feb8 	bl	800a77a <__retarget_lock_acquire_recursive>
 800aa0a:	89ab      	ldrh	r3, [r5, #12]
 800aa0c:	071b      	lsls	r3, r3, #28
 800aa0e:	d501      	bpl.n	800aa14 <_vfiprintf_r+0x34>
 800aa10:	692b      	ldr	r3, [r5, #16]
 800aa12:	b99b      	cbnz	r3, 800aa3c <_vfiprintf_r+0x5c>
 800aa14:	4629      	mov	r1, r5
 800aa16:	4630      	mov	r0, r6
 800aa18:	f000 fbac 	bl	800b174 <__swsetup_r>
 800aa1c:	b170      	cbz	r0, 800aa3c <_vfiprintf_r+0x5c>
 800aa1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa20:	07dc      	lsls	r4, r3, #31
 800aa22:	d504      	bpl.n	800aa2e <_vfiprintf_r+0x4e>
 800aa24:	f04f 30ff 	mov.w	r0, #4294967295
 800aa28:	b01d      	add	sp, #116	; 0x74
 800aa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2e:	89ab      	ldrh	r3, [r5, #12]
 800aa30:	0598      	lsls	r0, r3, #22
 800aa32:	d4f7      	bmi.n	800aa24 <_vfiprintf_r+0x44>
 800aa34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa36:	f7ff fea1 	bl	800a77c <__retarget_lock_release_recursive>
 800aa3a:	e7f3      	b.n	800aa24 <_vfiprintf_r+0x44>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa40:	2320      	movs	r3, #32
 800aa42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa46:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa4a:	2330      	movs	r3, #48	; 0x30
 800aa4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ac00 <_vfiprintf_r+0x220>
 800aa50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa54:	f04f 0901 	mov.w	r9, #1
 800aa58:	4623      	mov	r3, r4
 800aa5a:	469a      	mov	sl, r3
 800aa5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa60:	b10a      	cbz	r2, 800aa66 <_vfiprintf_r+0x86>
 800aa62:	2a25      	cmp	r2, #37	; 0x25
 800aa64:	d1f9      	bne.n	800aa5a <_vfiprintf_r+0x7a>
 800aa66:	ebba 0b04 	subs.w	fp, sl, r4
 800aa6a:	d00b      	beq.n	800aa84 <_vfiprintf_r+0xa4>
 800aa6c:	465b      	mov	r3, fp
 800aa6e:	4622      	mov	r2, r4
 800aa70:	4629      	mov	r1, r5
 800aa72:	4630      	mov	r0, r6
 800aa74:	f7ff ffa1 	bl	800a9ba <__sfputs_r>
 800aa78:	3001      	adds	r0, #1
 800aa7a:	f000 80a9 	beq.w	800abd0 <_vfiprintf_r+0x1f0>
 800aa7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa80:	445a      	add	r2, fp
 800aa82:	9209      	str	r2, [sp, #36]	; 0x24
 800aa84:	f89a 3000 	ldrb.w	r3, [sl]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 80a1 	beq.w	800abd0 <_vfiprintf_r+0x1f0>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	f04f 32ff 	mov.w	r2, #4294967295
 800aa94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa98:	f10a 0a01 	add.w	sl, sl, #1
 800aa9c:	9304      	str	r3, [sp, #16]
 800aa9e:	9307      	str	r3, [sp, #28]
 800aaa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaa4:	931a      	str	r3, [sp, #104]	; 0x68
 800aaa6:	4654      	mov	r4, sl
 800aaa8:	2205      	movs	r2, #5
 800aaaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaae:	4854      	ldr	r0, [pc, #336]	; (800ac00 <_vfiprintf_r+0x220>)
 800aab0:	f7f5 fc2e 	bl	8000310 <memchr>
 800aab4:	9a04      	ldr	r2, [sp, #16]
 800aab6:	b9d8      	cbnz	r0, 800aaf0 <_vfiprintf_r+0x110>
 800aab8:	06d1      	lsls	r1, r2, #27
 800aaba:	bf44      	itt	mi
 800aabc:	2320      	movmi	r3, #32
 800aabe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aac2:	0713      	lsls	r3, r2, #28
 800aac4:	bf44      	itt	mi
 800aac6:	232b      	movmi	r3, #43	; 0x2b
 800aac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aacc:	f89a 3000 	ldrb.w	r3, [sl]
 800aad0:	2b2a      	cmp	r3, #42	; 0x2a
 800aad2:	d015      	beq.n	800ab00 <_vfiprintf_r+0x120>
 800aad4:	9a07      	ldr	r2, [sp, #28]
 800aad6:	4654      	mov	r4, sl
 800aad8:	2000      	movs	r0, #0
 800aada:	f04f 0c0a 	mov.w	ip, #10
 800aade:	4621      	mov	r1, r4
 800aae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aae4:	3b30      	subs	r3, #48	; 0x30
 800aae6:	2b09      	cmp	r3, #9
 800aae8:	d94d      	bls.n	800ab86 <_vfiprintf_r+0x1a6>
 800aaea:	b1b0      	cbz	r0, 800ab1a <_vfiprintf_r+0x13a>
 800aaec:	9207      	str	r2, [sp, #28]
 800aaee:	e014      	b.n	800ab1a <_vfiprintf_r+0x13a>
 800aaf0:	eba0 0308 	sub.w	r3, r0, r8
 800aaf4:	fa09 f303 	lsl.w	r3, r9, r3
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	9304      	str	r3, [sp, #16]
 800aafc:	46a2      	mov	sl, r4
 800aafe:	e7d2      	b.n	800aaa6 <_vfiprintf_r+0xc6>
 800ab00:	9b03      	ldr	r3, [sp, #12]
 800ab02:	1d19      	adds	r1, r3, #4
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	9103      	str	r1, [sp, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	bfbb      	ittet	lt
 800ab0c:	425b      	neglt	r3, r3
 800ab0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab12:	9307      	strge	r3, [sp, #28]
 800ab14:	9307      	strlt	r3, [sp, #28]
 800ab16:	bfb8      	it	lt
 800ab18:	9204      	strlt	r2, [sp, #16]
 800ab1a:	7823      	ldrb	r3, [r4, #0]
 800ab1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab1e:	d10c      	bne.n	800ab3a <_vfiprintf_r+0x15a>
 800ab20:	7863      	ldrb	r3, [r4, #1]
 800ab22:	2b2a      	cmp	r3, #42	; 0x2a
 800ab24:	d134      	bne.n	800ab90 <_vfiprintf_r+0x1b0>
 800ab26:	9b03      	ldr	r3, [sp, #12]
 800ab28:	1d1a      	adds	r2, r3, #4
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	9203      	str	r2, [sp, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	bfb8      	it	lt
 800ab32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab36:	3402      	adds	r4, #2
 800ab38:	9305      	str	r3, [sp, #20]
 800ab3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ac10 <_vfiprintf_r+0x230>
 800ab3e:	7821      	ldrb	r1, [r4, #0]
 800ab40:	2203      	movs	r2, #3
 800ab42:	4650      	mov	r0, sl
 800ab44:	f7f5 fbe4 	bl	8000310 <memchr>
 800ab48:	b138      	cbz	r0, 800ab5a <_vfiprintf_r+0x17a>
 800ab4a:	9b04      	ldr	r3, [sp, #16]
 800ab4c:	eba0 000a 	sub.w	r0, r0, sl
 800ab50:	2240      	movs	r2, #64	; 0x40
 800ab52:	4082      	lsls	r2, r0
 800ab54:	4313      	orrs	r3, r2
 800ab56:	3401      	adds	r4, #1
 800ab58:	9304      	str	r3, [sp, #16]
 800ab5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5e:	4829      	ldr	r0, [pc, #164]	; (800ac04 <_vfiprintf_r+0x224>)
 800ab60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab64:	2206      	movs	r2, #6
 800ab66:	f7f5 fbd3 	bl	8000310 <memchr>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d03f      	beq.n	800abee <_vfiprintf_r+0x20e>
 800ab6e:	4b26      	ldr	r3, [pc, #152]	; (800ac08 <_vfiprintf_r+0x228>)
 800ab70:	bb1b      	cbnz	r3, 800abba <_vfiprintf_r+0x1da>
 800ab72:	9b03      	ldr	r3, [sp, #12]
 800ab74:	3307      	adds	r3, #7
 800ab76:	f023 0307 	bic.w	r3, r3, #7
 800ab7a:	3308      	adds	r3, #8
 800ab7c:	9303      	str	r3, [sp, #12]
 800ab7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab80:	443b      	add	r3, r7
 800ab82:	9309      	str	r3, [sp, #36]	; 0x24
 800ab84:	e768      	b.n	800aa58 <_vfiprintf_r+0x78>
 800ab86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	e7a6      	b.n	800aade <_vfiprintf_r+0xfe>
 800ab90:	2300      	movs	r3, #0
 800ab92:	3401      	adds	r4, #1
 800ab94:	9305      	str	r3, [sp, #20]
 800ab96:	4619      	mov	r1, r3
 800ab98:	f04f 0c0a 	mov.w	ip, #10
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aba2:	3a30      	subs	r2, #48	; 0x30
 800aba4:	2a09      	cmp	r2, #9
 800aba6:	d903      	bls.n	800abb0 <_vfiprintf_r+0x1d0>
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d0c6      	beq.n	800ab3a <_vfiprintf_r+0x15a>
 800abac:	9105      	str	r1, [sp, #20]
 800abae:	e7c4      	b.n	800ab3a <_vfiprintf_r+0x15a>
 800abb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800abb4:	4604      	mov	r4, r0
 800abb6:	2301      	movs	r3, #1
 800abb8:	e7f0      	b.n	800ab9c <_vfiprintf_r+0x1bc>
 800abba:	ab03      	add	r3, sp, #12
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	462a      	mov	r2, r5
 800abc0:	4b12      	ldr	r3, [pc, #72]	; (800ac0c <_vfiprintf_r+0x22c>)
 800abc2:	a904      	add	r1, sp, #16
 800abc4:	4630      	mov	r0, r6
 800abc6:	f3af 8000 	nop.w
 800abca:	4607      	mov	r7, r0
 800abcc:	1c78      	adds	r0, r7, #1
 800abce:	d1d6      	bne.n	800ab7e <_vfiprintf_r+0x19e>
 800abd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abd2:	07d9      	lsls	r1, r3, #31
 800abd4:	d405      	bmi.n	800abe2 <_vfiprintf_r+0x202>
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	059a      	lsls	r2, r3, #22
 800abda:	d402      	bmi.n	800abe2 <_vfiprintf_r+0x202>
 800abdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abde:	f7ff fdcd 	bl	800a77c <__retarget_lock_release_recursive>
 800abe2:	89ab      	ldrh	r3, [r5, #12]
 800abe4:	065b      	lsls	r3, r3, #25
 800abe6:	f53f af1d 	bmi.w	800aa24 <_vfiprintf_r+0x44>
 800abea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abec:	e71c      	b.n	800aa28 <_vfiprintf_r+0x48>
 800abee:	ab03      	add	r3, sp, #12
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	462a      	mov	r2, r5
 800abf4:	4b05      	ldr	r3, [pc, #20]	; (800ac0c <_vfiprintf_r+0x22c>)
 800abf6:	a904      	add	r1, sp, #16
 800abf8:	4630      	mov	r0, r6
 800abfa:	f000 f879 	bl	800acf0 <_printf_i>
 800abfe:	e7e4      	b.n	800abca <_vfiprintf_r+0x1ea>
 800ac00:	0800c044 	.word	0x0800c044
 800ac04:	0800c04e 	.word	0x0800c04e
 800ac08:	00000000 	.word	0x00000000
 800ac0c:	0800a9bb 	.word	0x0800a9bb
 800ac10:	0800c04a 	.word	0x0800c04a

0800ac14 <_printf_common>:
 800ac14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac18:	4616      	mov	r6, r2
 800ac1a:	4699      	mov	r9, r3
 800ac1c:	688a      	ldr	r2, [r1, #8]
 800ac1e:	690b      	ldr	r3, [r1, #16]
 800ac20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac24:	4293      	cmp	r3, r2
 800ac26:	bfb8      	it	lt
 800ac28:	4613      	movlt	r3, r2
 800ac2a:	6033      	str	r3, [r6, #0]
 800ac2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac30:	4607      	mov	r7, r0
 800ac32:	460c      	mov	r4, r1
 800ac34:	b10a      	cbz	r2, 800ac3a <_printf_common+0x26>
 800ac36:	3301      	adds	r3, #1
 800ac38:	6033      	str	r3, [r6, #0]
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	0699      	lsls	r1, r3, #26
 800ac3e:	bf42      	ittt	mi
 800ac40:	6833      	ldrmi	r3, [r6, #0]
 800ac42:	3302      	addmi	r3, #2
 800ac44:	6033      	strmi	r3, [r6, #0]
 800ac46:	6825      	ldr	r5, [r4, #0]
 800ac48:	f015 0506 	ands.w	r5, r5, #6
 800ac4c:	d106      	bne.n	800ac5c <_printf_common+0x48>
 800ac4e:	f104 0a19 	add.w	sl, r4, #25
 800ac52:	68e3      	ldr	r3, [r4, #12]
 800ac54:	6832      	ldr	r2, [r6, #0]
 800ac56:	1a9b      	subs	r3, r3, r2
 800ac58:	42ab      	cmp	r3, r5
 800ac5a:	dc26      	bgt.n	800acaa <_printf_common+0x96>
 800ac5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac60:	1e13      	subs	r3, r2, #0
 800ac62:	6822      	ldr	r2, [r4, #0]
 800ac64:	bf18      	it	ne
 800ac66:	2301      	movne	r3, #1
 800ac68:	0692      	lsls	r2, r2, #26
 800ac6a:	d42b      	bmi.n	800acc4 <_printf_common+0xb0>
 800ac6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac70:	4649      	mov	r1, r9
 800ac72:	4638      	mov	r0, r7
 800ac74:	47c0      	blx	r8
 800ac76:	3001      	adds	r0, #1
 800ac78:	d01e      	beq.n	800acb8 <_printf_common+0xa4>
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	6922      	ldr	r2, [r4, #16]
 800ac7e:	f003 0306 	and.w	r3, r3, #6
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	bf02      	ittt	eq
 800ac86:	68e5      	ldreq	r5, [r4, #12]
 800ac88:	6833      	ldreq	r3, [r6, #0]
 800ac8a:	1aed      	subeq	r5, r5, r3
 800ac8c:	68a3      	ldr	r3, [r4, #8]
 800ac8e:	bf0c      	ite	eq
 800ac90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac94:	2500      	movne	r5, #0
 800ac96:	4293      	cmp	r3, r2
 800ac98:	bfc4      	itt	gt
 800ac9a:	1a9b      	subgt	r3, r3, r2
 800ac9c:	18ed      	addgt	r5, r5, r3
 800ac9e:	2600      	movs	r6, #0
 800aca0:	341a      	adds	r4, #26
 800aca2:	42b5      	cmp	r5, r6
 800aca4:	d11a      	bne.n	800acdc <_printf_common+0xc8>
 800aca6:	2000      	movs	r0, #0
 800aca8:	e008      	b.n	800acbc <_printf_common+0xa8>
 800acaa:	2301      	movs	r3, #1
 800acac:	4652      	mov	r2, sl
 800acae:	4649      	mov	r1, r9
 800acb0:	4638      	mov	r0, r7
 800acb2:	47c0      	blx	r8
 800acb4:	3001      	adds	r0, #1
 800acb6:	d103      	bne.n	800acc0 <_printf_common+0xac>
 800acb8:	f04f 30ff 	mov.w	r0, #4294967295
 800acbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc0:	3501      	adds	r5, #1
 800acc2:	e7c6      	b.n	800ac52 <_printf_common+0x3e>
 800acc4:	18e1      	adds	r1, r4, r3
 800acc6:	1c5a      	adds	r2, r3, #1
 800acc8:	2030      	movs	r0, #48	; 0x30
 800acca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acce:	4422      	add	r2, r4
 800acd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acd8:	3302      	adds	r3, #2
 800acda:	e7c7      	b.n	800ac6c <_printf_common+0x58>
 800acdc:	2301      	movs	r3, #1
 800acde:	4622      	mov	r2, r4
 800ace0:	4649      	mov	r1, r9
 800ace2:	4638      	mov	r0, r7
 800ace4:	47c0      	blx	r8
 800ace6:	3001      	adds	r0, #1
 800ace8:	d0e6      	beq.n	800acb8 <_printf_common+0xa4>
 800acea:	3601      	adds	r6, #1
 800acec:	e7d9      	b.n	800aca2 <_printf_common+0x8e>
	...

0800acf0 <_printf_i>:
 800acf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acf4:	7e0f      	ldrb	r7, [r1, #24]
 800acf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acf8:	2f78      	cmp	r7, #120	; 0x78
 800acfa:	4691      	mov	r9, r2
 800acfc:	4680      	mov	r8, r0
 800acfe:	460c      	mov	r4, r1
 800ad00:	469a      	mov	sl, r3
 800ad02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad06:	d807      	bhi.n	800ad18 <_printf_i+0x28>
 800ad08:	2f62      	cmp	r7, #98	; 0x62
 800ad0a:	d80a      	bhi.n	800ad22 <_printf_i+0x32>
 800ad0c:	2f00      	cmp	r7, #0
 800ad0e:	f000 80d4 	beq.w	800aeba <_printf_i+0x1ca>
 800ad12:	2f58      	cmp	r7, #88	; 0x58
 800ad14:	f000 80c0 	beq.w	800ae98 <_printf_i+0x1a8>
 800ad18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad20:	e03a      	b.n	800ad98 <_printf_i+0xa8>
 800ad22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad26:	2b15      	cmp	r3, #21
 800ad28:	d8f6      	bhi.n	800ad18 <_printf_i+0x28>
 800ad2a:	a101      	add	r1, pc, #4	; (adr r1, 800ad30 <_printf_i+0x40>)
 800ad2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad30:	0800ad89 	.word	0x0800ad89
 800ad34:	0800ad9d 	.word	0x0800ad9d
 800ad38:	0800ad19 	.word	0x0800ad19
 800ad3c:	0800ad19 	.word	0x0800ad19
 800ad40:	0800ad19 	.word	0x0800ad19
 800ad44:	0800ad19 	.word	0x0800ad19
 800ad48:	0800ad9d 	.word	0x0800ad9d
 800ad4c:	0800ad19 	.word	0x0800ad19
 800ad50:	0800ad19 	.word	0x0800ad19
 800ad54:	0800ad19 	.word	0x0800ad19
 800ad58:	0800ad19 	.word	0x0800ad19
 800ad5c:	0800aea1 	.word	0x0800aea1
 800ad60:	0800adc9 	.word	0x0800adc9
 800ad64:	0800ae5b 	.word	0x0800ae5b
 800ad68:	0800ad19 	.word	0x0800ad19
 800ad6c:	0800ad19 	.word	0x0800ad19
 800ad70:	0800aec3 	.word	0x0800aec3
 800ad74:	0800ad19 	.word	0x0800ad19
 800ad78:	0800adc9 	.word	0x0800adc9
 800ad7c:	0800ad19 	.word	0x0800ad19
 800ad80:	0800ad19 	.word	0x0800ad19
 800ad84:	0800ae63 	.word	0x0800ae63
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	1d1a      	adds	r2, r3, #4
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	602a      	str	r2, [r5, #0]
 800ad90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e09f      	b.n	800aedc <_printf_i+0x1ec>
 800ad9c:	6820      	ldr	r0, [r4, #0]
 800ad9e:	682b      	ldr	r3, [r5, #0]
 800ada0:	0607      	lsls	r7, r0, #24
 800ada2:	f103 0104 	add.w	r1, r3, #4
 800ada6:	6029      	str	r1, [r5, #0]
 800ada8:	d501      	bpl.n	800adae <_printf_i+0xbe>
 800adaa:	681e      	ldr	r6, [r3, #0]
 800adac:	e003      	b.n	800adb6 <_printf_i+0xc6>
 800adae:	0646      	lsls	r6, r0, #25
 800adb0:	d5fb      	bpl.n	800adaa <_printf_i+0xba>
 800adb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800adb6:	2e00      	cmp	r6, #0
 800adb8:	da03      	bge.n	800adc2 <_printf_i+0xd2>
 800adba:	232d      	movs	r3, #45	; 0x2d
 800adbc:	4276      	negs	r6, r6
 800adbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adc2:	485a      	ldr	r0, [pc, #360]	; (800af2c <_printf_i+0x23c>)
 800adc4:	230a      	movs	r3, #10
 800adc6:	e012      	b.n	800adee <_printf_i+0xfe>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	6820      	ldr	r0, [r4, #0]
 800adcc:	1d19      	adds	r1, r3, #4
 800adce:	6029      	str	r1, [r5, #0]
 800add0:	0605      	lsls	r5, r0, #24
 800add2:	d501      	bpl.n	800add8 <_printf_i+0xe8>
 800add4:	681e      	ldr	r6, [r3, #0]
 800add6:	e002      	b.n	800adde <_printf_i+0xee>
 800add8:	0641      	lsls	r1, r0, #25
 800adda:	d5fb      	bpl.n	800add4 <_printf_i+0xe4>
 800addc:	881e      	ldrh	r6, [r3, #0]
 800adde:	4853      	ldr	r0, [pc, #332]	; (800af2c <_printf_i+0x23c>)
 800ade0:	2f6f      	cmp	r7, #111	; 0x6f
 800ade2:	bf0c      	ite	eq
 800ade4:	2308      	moveq	r3, #8
 800ade6:	230a      	movne	r3, #10
 800ade8:	2100      	movs	r1, #0
 800adea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adee:	6865      	ldr	r5, [r4, #4]
 800adf0:	60a5      	str	r5, [r4, #8]
 800adf2:	2d00      	cmp	r5, #0
 800adf4:	bfa2      	ittt	ge
 800adf6:	6821      	ldrge	r1, [r4, #0]
 800adf8:	f021 0104 	bicge.w	r1, r1, #4
 800adfc:	6021      	strge	r1, [r4, #0]
 800adfe:	b90e      	cbnz	r6, 800ae04 <_printf_i+0x114>
 800ae00:	2d00      	cmp	r5, #0
 800ae02:	d04b      	beq.n	800ae9c <_printf_i+0x1ac>
 800ae04:	4615      	mov	r5, r2
 800ae06:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae0a:	fb03 6711 	mls	r7, r3, r1, r6
 800ae0e:	5dc7      	ldrb	r7, [r0, r7]
 800ae10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae14:	4637      	mov	r7, r6
 800ae16:	42bb      	cmp	r3, r7
 800ae18:	460e      	mov	r6, r1
 800ae1a:	d9f4      	bls.n	800ae06 <_printf_i+0x116>
 800ae1c:	2b08      	cmp	r3, #8
 800ae1e:	d10b      	bne.n	800ae38 <_printf_i+0x148>
 800ae20:	6823      	ldr	r3, [r4, #0]
 800ae22:	07de      	lsls	r6, r3, #31
 800ae24:	d508      	bpl.n	800ae38 <_printf_i+0x148>
 800ae26:	6923      	ldr	r3, [r4, #16]
 800ae28:	6861      	ldr	r1, [r4, #4]
 800ae2a:	4299      	cmp	r1, r3
 800ae2c:	bfde      	ittt	le
 800ae2e:	2330      	movle	r3, #48	; 0x30
 800ae30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae34:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae38:	1b52      	subs	r2, r2, r5
 800ae3a:	6122      	str	r2, [r4, #16]
 800ae3c:	f8cd a000 	str.w	sl, [sp]
 800ae40:	464b      	mov	r3, r9
 800ae42:	aa03      	add	r2, sp, #12
 800ae44:	4621      	mov	r1, r4
 800ae46:	4640      	mov	r0, r8
 800ae48:	f7ff fee4 	bl	800ac14 <_printf_common>
 800ae4c:	3001      	adds	r0, #1
 800ae4e:	d14a      	bne.n	800aee6 <_printf_i+0x1f6>
 800ae50:	f04f 30ff 	mov.w	r0, #4294967295
 800ae54:	b004      	add	sp, #16
 800ae56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	f043 0320 	orr.w	r3, r3, #32
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	4833      	ldr	r0, [pc, #204]	; (800af30 <_printf_i+0x240>)
 800ae64:	2778      	movs	r7, #120	; 0x78
 800ae66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae6a:	6823      	ldr	r3, [r4, #0]
 800ae6c:	6829      	ldr	r1, [r5, #0]
 800ae6e:	061f      	lsls	r7, r3, #24
 800ae70:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae74:	d402      	bmi.n	800ae7c <_printf_i+0x18c>
 800ae76:	065f      	lsls	r7, r3, #25
 800ae78:	bf48      	it	mi
 800ae7a:	b2b6      	uxthmi	r6, r6
 800ae7c:	07df      	lsls	r7, r3, #31
 800ae7e:	bf48      	it	mi
 800ae80:	f043 0320 	orrmi.w	r3, r3, #32
 800ae84:	6029      	str	r1, [r5, #0]
 800ae86:	bf48      	it	mi
 800ae88:	6023      	strmi	r3, [r4, #0]
 800ae8a:	b91e      	cbnz	r6, 800ae94 <_printf_i+0x1a4>
 800ae8c:	6823      	ldr	r3, [r4, #0]
 800ae8e:	f023 0320 	bic.w	r3, r3, #32
 800ae92:	6023      	str	r3, [r4, #0]
 800ae94:	2310      	movs	r3, #16
 800ae96:	e7a7      	b.n	800ade8 <_printf_i+0xf8>
 800ae98:	4824      	ldr	r0, [pc, #144]	; (800af2c <_printf_i+0x23c>)
 800ae9a:	e7e4      	b.n	800ae66 <_printf_i+0x176>
 800ae9c:	4615      	mov	r5, r2
 800ae9e:	e7bd      	b.n	800ae1c <_printf_i+0x12c>
 800aea0:	682b      	ldr	r3, [r5, #0]
 800aea2:	6826      	ldr	r6, [r4, #0]
 800aea4:	6961      	ldr	r1, [r4, #20]
 800aea6:	1d18      	adds	r0, r3, #4
 800aea8:	6028      	str	r0, [r5, #0]
 800aeaa:	0635      	lsls	r5, r6, #24
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	d501      	bpl.n	800aeb4 <_printf_i+0x1c4>
 800aeb0:	6019      	str	r1, [r3, #0]
 800aeb2:	e002      	b.n	800aeba <_printf_i+0x1ca>
 800aeb4:	0670      	lsls	r0, r6, #25
 800aeb6:	d5fb      	bpl.n	800aeb0 <_printf_i+0x1c0>
 800aeb8:	8019      	strh	r1, [r3, #0]
 800aeba:	2300      	movs	r3, #0
 800aebc:	6123      	str	r3, [r4, #16]
 800aebe:	4615      	mov	r5, r2
 800aec0:	e7bc      	b.n	800ae3c <_printf_i+0x14c>
 800aec2:	682b      	ldr	r3, [r5, #0]
 800aec4:	1d1a      	adds	r2, r3, #4
 800aec6:	602a      	str	r2, [r5, #0]
 800aec8:	681d      	ldr	r5, [r3, #0]
 800aeca:	6862      	ldr	r2, [r4, #4]
 800aecc:	2100      	movs	r1, #0
 800aece:	4628      	mov	r0, r5
 800aed0:	f7f5 fa1e 	bl	8000310 <memchr>
 800aed4:	b108      	cbz	r0, 800aeda <_printf_i+0x1ea>
 800aed6:	1b40      	subs	r0, r0, r5
 800aed8:	6060      	str	r0, [r4, #4]
 800aeda:	6863      	ldr	r3, [r4, #4]
 800aedc:	6123      	str	r3, [r4, #16]
 800aede:	2300      	movs	r3, #0
 800aee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aee4:	e7aa      	b.n	800ae3c <_printf_i+0x14c>
 800aee6:	6923      	ldr	r3, [r4, #16]
 800aee8:	462a      	mov	r2, r5
 800aeea:	4649      	mov	r1, r9
 800aeec:	4640      	mov	r0, r8
 800aeee:	47d0      	blx	sl
 800aef0:	3001      	adds	r0, #1
 800aef2:	d0ad      	beq.n	800ae50 <_printf_i+0x160>
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	079b      	lsls	r3, r3, #30
 800aef8:	d413      	bmi.n	800af22 <_printf_i+0x232>
 800aefa:	68e0      	ldr	r0, [r4, #12]
 800aefc:	9b03      	ldr	r3, [sp, #12]
 800aefe:	4298      	cmp	r0, r3
 800af00:	bfb8      	it	lt
 800af02:	4618      	movlt	r0, r3
 800af04:	e7a6      	b.n	800ae54 <_printf_i+0x164>
 800af06:	2301      	movs	r3, #1
 800af08:	4632      	mov	r2, r6
 800af0a:	4649      	mov	r1, r9
 800af0c:	4640      	mov	r0, r8
 800af0e:	47d0      	blx	sl
 800af10:	3001      	adds	r0, #1
 800af12:	d09d      	beq.n	800ae50 <_printf_i+0x160>
 800af14:	3501      	adds	r5, #1
 800af16:	68e3      	ldr	r3, [r4, #12]
 800af18:	9903      	ldr	r1, [sp, #12]
 800af1a:	1a5b      	subs	r3, r3, r1
 800af1c:	42ab      	cmp	r3, r5
 800af1e:	dcf2      	bgt.n	800af06 <_printf_i+0x216>
 800af20:	e7eb      	b.n	800aefa <_printf_i+0x20a>
 800af22:	2500      	movs	r5, #0
 800af24:	f104 0619 	add.w	r6, r4, #25
 800af28:	e7f5      	b.n	800af16 <_printf_i+0x226>
 800af2a:	bf00      	nop
 800af2c:	0800c055 	.word	0x0800c055
 800af30:	0800c066 	.word	0x0800c066

0800af34 <__sflush_r>:
 800af34:	898a      	ldrh	r2, [r1, #12]
 800af36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3a:	4605      	mov	r5, r0
 800af3c:	0710      	lsls	r0, r2, #28
 800af3e:	460c      	mov	r4, r1
 800af40:	d458      	bmi.n	800aff4 <__sflush_r+0xc0>
 800af42:	684b      	ldr	r3, [r1, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	dc05      	bgt.n	800af54 <__sflush_r+0x20>
 800af48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dc02      	bgt.n	800af54 <__sflush_r+0x20>
 800af4e:	2000      	movs	r0, #0
 800af50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af56:	2e00      	cmp	r6, #0
 800af58:	d0f9      	beq.n	800af4e <__sflush_r+0x1a>
 800af5a:	2300      	movs	r3, #0
 800af5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af60:	682f      	ldr	r7, [r5, #0]
 800af62:	6a21      	ldr	r1, [r4, #32]
 800af64:	602b      	str	r3, [r5, #0]
 800af66:	d032      	beq.n	800afce <__sflush_r+0x9a>
 800af68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	075a      	lsls	r2, r3, #29
 800af6e:	d505      	bpl.n	800af7c <__sflush_r+0x48>
 800af70:	6863      	ldr	r3, [r4, #4]
 800af72:	1ac0      	subs	r0, r0, r3
 800af74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af76:	b10b      	cbz	r3, 800af7c <__sflush_r+0x48>
 800af78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af7a:	1ac0      	subs	r0, r0, r3
 800af7c:	2300      	movs	r3, #0
 800af7e:	4602      	mov	r2, r0
 800af80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af82:	6a21      	ldr	r1, [r4, #32]
 800af84:	4628      	mov	r0, r5
 800af86:	47b0      	blx	r6
 800af88:	1c43      	adds	r3, r0, #1
 800af8a:	89a3      	ldrh	r3, [r4, #12]
 800af8c:	d106      	bne.n	800af9c <__sflush_r+0x68>
 800af8e:	6829      	ldr	r1, [r5, #0]
 800af90:	291d      	cmp	r1, #29
 800af92:	d82b      	bhi.n	800afec <__sflush_r+0xb8>
 800af94:	4a29      	ldr	r2, [pc, #164]	; (800b03c <__sflush_r+0x108>)
 800af96:	410a      	asrs	r2, r1
 800af98:	07d6      	lsls	r6, r2, #31
 800af9a:	d427      	bmi.n	800afec <__sflush_r+0xb8>
 800af9c:	2200      	movs	r2, #0
 800af9e:	6062      	str	r2, [r4, #4]
 800afa0:	04d9      	lsls	r1, r3, #19
 800afa2:	6922      	ldr	r2, [r4, #16]
 800afa4:	6022      	str	r2, [r4, #0]
 800afa6:	d504      	bpl.n	800afb2 <__sflush_r+0x7e>
 800afa8:	1c42      	adds	r2, r0, #1
 800afaa:	d101      	bne.n	800afb0 <__sflush_r+0x7c>
 800afac:	682b      	ldr	r3, [r5, #0]
 800afae:	b903      	cbnz	r3, 800afb2 <__sflush_r+0x7e>
 800afb0:	6560      	str	r0, [r4, #84]	; 0x54
 800afb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afb4:	602f      	str	r7, [r5, #0]
 800afb6:	2900      	cmp	r1, #0
 800afb8:	d0c9      	beq.n	800af4e <__sflush_r+0x1a>
 800afba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afbe:	4299      	cmp	r1, r3
 800afc0:	d002      	beq.n	800afc8 <__sflush_r+0x94>
 800afc2:	4628      	mov	r0, r5
 800afc4:	f7ff fbea 	bl	800a79c <_free_r>
 800afc8:	2000      	movs	r0, #0
 800afca:	6360      	str	r0, [r4, #52]	; 0x34
 800afcc:	e7c0      	b.n	800af50 <__sflush_r+0x1c>
 800afce:	2301      	movs	r3, #1
 800afd0:	4628      	mov	r0, r5
 800afd2:	47b0      	blx	r6
 800afd4:	1c41      	adds	r1, r0, #1
 800afd6:	d1c8      	bne.n	800af6a <__sflush_r+0x36>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d0c5      	beq.n	800af6a <__sflush_r+0x36>
 800afde:	2b1d      	cmp	r3, #29
 800afe0:	d001      	beq.n	800afe6 <__sflush_r+0xb2>
 800afe2:	2b16      	cmp	r3, #22
 800afe4:	d101      	bne.n	800afea <__sflush_r+0xb6>
 800afe6:	602f      	str	r7, [r5, #0]
 800afe8:	e7b1      	b.n	800af4e <__sflush_r+0x1a>
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aff0:	81a3      	strh	r3, [r4, #12]
 800aff2:	e7ad      	b.n	800af50 <__sflush_r+0x1c>
 800aff4:	690f      	ldr	r7, [r1, #16]
 800aff6:	2f00      	cmp	r7, #0
 800aff8:	d0a9      	beq.n	800af4e <__sflush_r+0x1a>
 800affa:	0793      	lsls	r3, r2, #30
 800affc:	680e      	ldr	r6, [r1, #0]
 800affe:	bf08      	it	eq
 800b000:	694b      	ldreq	r3, [r1, #20]
 800b002:	600f      	str	r7, [r1, #0]
 800b004:	bf18      	it	ne
 800b006:	2300      	movne	r3, #0
 800b008:	eba6 0807 	sub.w	r8, r6, r7
 800b00c:	608b      	str	r3, [r1, #8]
 800b00e:	f1b8 0f00 	cmp.w	r8, #0
 800b012:	dd9c      	ble.n	800af4e <__sflush_r+0x1a>
 800b014:	6a21      	ldr	r1, [r4, #32]
 800b016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b018:	4643      	mov	r3, r8
 800b01a:	463a      	mov	r2, r7
 800b01c:	4628      	mov	r0, r5
 800b01e:	47b0      	blx	r6
 800b020:	2800      	cmp	r0, #0
 800b022:	dc06      	bgt.n	800b032 <__sflush_r+0xfe>
 800b024:	89a3      	ldrh	r3, [r4, #12]
 800b026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b02a:	81a3      	strh	r3, [r4, #12]
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	e78e      	b.n	800af50 <__sflush_r+0x1c>
 800b032:	4407      	add	r7, r0
 800b034:	eba8 0800 	sub.w	r8, r8, r0
 800b038:	e7e9      	b.n	800b00e <__sflush_r+0xda>
 800b03a:	bf00      	nop
 800b03c:	dfbffffe 	.word	0xdfbffffe

0800b040 <_fflush_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	690b      	ldr	r3, [r1, #16]
 800b044:	4605      	mov	r5, r0
 800b046:	460c      	mov	r4, r1
 800b048:	b913      	cbnz	r3, 800b050 <_fflush_r+0x10>
 800b04a:	2500      	movs	r5, #0
 800b04c:	4628      	mov	r0, r5
 800b04e:	bd38      	pop	{r3, r4, r5, pc}
 800b050:	b118      	cbz	r0, 800b05a <_fflush_r+0x1a>
 800b052:	6a03      	ldr	r3, [r0, #32]
 800b054:	b90b      	cbnz	r3, 800b05a <_fflush_r+0x1a>
 800b056:	f7ff fa83 	bl	800a560 <__sinit>
 800b05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d0f3      	beq.n	800b04a <_fflush_r+0xa>
 800b062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b064:	07d0      	lsls	r0, r2, #31
 800b066:	d404      	bmi.n	800b072 <_fflush_r+0x32>
 800b068:	0599      	lsls	r1, r3, #22
 800b06a:	d402      	bmi.n	800b072 <_fflush_r+0x32>
 800b06c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b06e:	f7ff fb84 	bl	800a77a <__retarget_lock_acquire_recursive>
 800b072:	4628      	mov	r0, r5
 800b074:	4621      	mov	r1, r4
 800b076:	f7ff ff5d 	bl	800af34 <__sflush_r>
 800b07a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b07c:	07da      	lsls	r2, r3, #31
 800b07e:	4605      	mov	r5, r0
 800b080:	d4e4      	bmi.n	800b04c <_fflush_r+0xc>
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	059b      	lsls	r3, r3, #22
 800b086:	d4e1      	bmi.n	800b04c <_fflush_r+0xc>
 800b088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b08a:	f7ff fb77 	bl	800a77c <__retarget_lock_release_recursive>
 800b08e:	e7dd      	b.n	800b04c <_fflush_r+0xc>

0800b090 <_putc_r>:
 800b090:	b570      	push	{r4, r5, r6, lr}
 800b092:	460d      	mov	r5, r1
 800b094:	4614      	mov	r4, r2
 800b096:	4606      	mov	r6, r0
 800b098:	b118      	cbz	r0, 800b0a2 <_putc_r+0x12>
 800b09a:	6a03      	ldr	r3, [r0, #32]
 800b09c:	b90b      	cbnz	r3, 800b0a2 <_putc_r+0x12>
 800b09e:	f7ff fa5f 	bl	800a560 <__sinit>
 800b0a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0a4:	07d8      	lsls	r0, r3, #31
 800b0a6:	d405      	bmi.n	800b0b4 <_putc_r+0x24>
 800b0a8:	89a3      	ldrh	r3, [r4, #12]
 800b0aa:	0599      	lsls	r1, r3, #22
 800b0ac:	d402      	bmi.n	800b0b4 <_putc_r+0x24>
 800b0ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0b0:	f7ff fb63 	bl	800a77a <__retarget_lock_acquire_recursive>
 800b0b4:	68a3      	ldr	r3, [r4, #8]
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	60a3      	str	r3, [r4, #8]
 800b0bc:	da05      	bge.n	800b0ca <_putc_r+0x3a>
 800b0be:	69a2      	ldr	r2, [r4, #24]
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	db12      	blt.n	800b0ea <_putc_r+0x5a>
 800b0c4:	b2eb      	uxtb	r3, r5
 800b0c6:	2b0a      	cmp	r3, #10
 800b0c8:	d00f      	beq.n	800b0ea <_putc_r+0x5a>
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	1c5a      	adds	r2, r3, #1
 800b0ce:	6022      	str	r2, [r4, #0]
 800b0d0:	701d      	strb	r5, [r3, #0]
 800b0d2:	b2ed      	uxtb	r5, r5
 800b0d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0d6:	07da      	lsls	r2, r3, #31
 800b0d8:	d405      	bmi.n	800b0e6 <_putc_r+0x56>
 800b0da:	89a3      	ldrh	r3, [r4, #12]
 800b0dc:	059b      	lsls	r3, r3, #22
 800b0de:	d402      	bmi.n	800b0e6 <_putc_r+0x56>
 800b0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0e2:	f7ff fb4b 	bl	800a77c <__retarget_lock_release_recursive>
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f000 f802 	bl	800b0f8 <__swbuf_r>
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	e7ed      	b.n	800b0d4 <_putc_r+0x44>

0800b0f8 <__swbuf_r>:
 800b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fa:	460e      	mov	r6, r1
 800b0fc:	4614      	mov	r4, r2
 800b0fe:	4605      	mov	r5, r0
 800b100:	b118      	cbz	r0, 800b10a <__swbuf_r+0x12>
 800b102:	6a03      	ldr	r3, [r0, #32]
 800b104:	b90b      	cbnz	r3, 800b10a <__swbuf_r+0x12>
 800b106:	f7ff fa2b 	bl	800a560 <__sinit>
 800b10a:	69a3      	ldr	r3, [r4, #24]
 800b10c:	60a3      	str	r3, [r4, #8]
 800b10e:	89a3      	ldrh	r3, [r4, #12]
 800b110:	071a      	lsls	r2, r3, #28
 800b112:	d525      	bpl.n	800b160 <__swbuf_r+0x68>
 800b114:	6923      	ldr	r3, [r4, #16]
 800b116:	b31b      	cbz	r3, 800b160 <__swbuf_r+0x68>
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	6922      	ldr	r2, [r4, #16]
 800b11c:	1a98      	subs	r0, r3, r2
 800b11e:	6963      	ldr	r3, [r4, #20]
 800b120:	b2f6      	uxtb	r6, r6
 800b122:	4283      	cmp	r3, r0
 800b124:	4637      	mov	r7, r6
 800b126:	dc04      	bgt.n	800b132 <__swbuf_r+0x3a>
 800b128:	4621      	mov	r1, r4
 800b12a:	4628      	mov	r0, r5
 800b12c:	f7ff ff88 	bl	800b040 <_fflush_r>
 800b130:	b9e0      	cbnz	r0, 800b16c <__swbuf_r+0x74>
 800b132:	68a3      	ldr	r3, [r4, #8]
 800b134:	3b01      	subs	r3, #1
 800b136:	60a3      	str	r3, [r4, #8]
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	1c5a      	adds	r2, r3, #1
 800b13c:	6022      	str	r2, [r4, #0]
 800b13e:	701e      	strb	r6, [r3, #0]
 800b140:	6962      	ldr	r2, [r4, #20]
 800b142:	1c43      	adds	r3, r0, #1
 800b144:	429a      	cmp	r2, r3
 800b146:	d004      	beq.n	800b152 <__swbuf_r+0x5a>
 800b148:	89a3      	ldrh	r3, [r4, #12]
 800b14a:	07db      	lsls	r3, r3, #31
 800b14c:	d506      	bpl.n	800b15c <__swbuf_r+0x64>
 800b14e:	2e0a      	cmp	r6, #10
 800b150:	d104      	bne.n	800b15c <__swbuf_r+0x64>
 800b152:	4621      	mov	r1, r4
 800b154:	4628      	mov	r0, r5
 800b156:	f7ff ff73 	bl	800b040 <_fflush_r>
 800b15a:	b938      	cbnz	r0, 800b16c <__swbuf_r+0x74>
 800b15c:	4638      	mov	r0, r7
 800b15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b160:	4621      	mov	r1, r4
 800b162:	4628      	mov	r0, r5
 800b164:	f000 f806 	bl	800b174 <__swsetup_r>
 800b168:	2800      	cmp	r0, #0
 800b16a:	d0d5      	beq.n	800b118 <__swbuf_r+0x20>
 800b16c:	f04f 37ff 	mov.w	r7, #4294967295
 800b170:	e7f4      	b.n	800b15c <__swbuf_r+0x64>
	...

0800b174 <__swsetup_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4b2a      	ldr	r3, [pc, #168]	; (800b220 <__swsetup_r+0xac>)
 800b178:	4605      	mov	r5, r0
 800b17a:	6818      	ldr	r0, [r3, #0]
 800b17c:	460c      	mov	r4, r1
 800b17e:	b118      	cbz	r0, 800b188 <__swsetup_r+0x14>
 800b180:	6a03      	ldr	r3, [r0, #32]
 800b182:	b90b      	cbnz	r3, 800b188 <__swsetup_r+0x14>
 800b184:	f7ff f9ec 	bl	800a560 <__sinit>
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b18e:	0718      	lsls	r0, r3, #28
 800b190:	d422      	bmi.n	800b1d8 <__swsetup_r+0x64>
 800b192:	06d9      	lsls	r1, r3, #27
 800b194:	d407      	bmi.n	800b1a6 <__swsetup_r+0x32>
 800b196:	2309      	movs	r3, #9
 800b198:	602b      	str	r3, [r5, #0]
 800b19a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b19e:	81a3      	strh	r3, [r4, #12]
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a4:	e034      	b.n	800b210 <__swsetup_r+0x9c>
 800b1a6:	0758      	lsls	r0, r3, #29
 800b1a8:	d512      	bpl.n	800b1d0 <__swsetup_r+0x5c>
 800b1aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1ac:	b141      	cbz	r1, 800b1c0 <__swsetup_r+0x4c>
 800b1ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1b2:	4299      	cmp	r1, r3
 800b1b4:	d002      	beq.n	800b1bc <__swsetup_r+0x48>
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	f7ff faf0 	bl	800a79c <_free_r>
 800b1bc:	2300      	movs	r3, #0
 800b1be:	6363      	str	r3, [r4, #52]	; 0x34
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1c6:	81a3      	strh	r3, [r4, #12]
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	6063      	str	r3, [r4, #4]
 800b1cc:	6923      	ldr	r3, [r4, #16]
 800b1ce:	6023      	str	r3, [r4, #0]
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	f043 0308 	orr.w	r3, r3, #8
 800b1d6:	81a3      	strh	r3, [r4, #12]
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	b94b      	cbnz	r3, 800b1f0 <__swsetup_r+0x7c>
 800b1dc:	89a3      	ldrh	r3, [r4, #12]
 800b1de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1e6:	d003      	beq.n	800b1f0 <__swsetup_r+0x7c>
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f000 f850 	bl	800b290 <__smakebuf_r>
 800b1f0:	89a0      	ldrh	r0, [r4, #12]
 800b1f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1f6:	f010 0301 	ands.w	r3, r0, #1
 800b1fa:	d00a      	beq.n	800b212 <__swsetup_r+0x9e>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	60a3      	str	r3, [r4, #8]
 800b200:	6963      	ldr	r3, [r4, #20]
 800b202:	425b      	negs	r3, r3
 800b204:	61a3      	str	r3, [r4, #24]
 800b206:	6923      	ldr	r3, [r4, #16]
 800b208:	b943      	cbnz	r3, 800b21c <__swsetup_r+0xa8>
 800b20a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b20e:	d1c4      	bne.n	800b19a <__swsetup_r+0x26>
 800b210:	bd38      	pop	{r3, r4, r5, pc}
 800b212:	0781      	lsls	r1, r0, #30
 800b214:	bf58      	it	pl
 800b216:	6963      	ldrpl	r3, [r4, #20]
 800b218:	60a3      	str	r3, [r4, #8]
 800b21a:	e7f4      	b.n	800b206 <__swsetup_r+0x92>
 800b21c:	2000      	movs	r0, #0
 800b21e:	e7f7      	b.n	800b210 <__swsetup_r+0x9c>
 800b220:	240004e0 	.word	0x240004e0

0800b224 <_sbrk_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	4d06      	ldr	r5, [pc, #24]	; (800b240 <_sbrk_r+0x1c>)
 800b228:	2300      	movs	r3, #0
 800b22a:	4604      	mov	r4, r0
 800b22c:	4608      	mov	r0, r1
 800b22e:	602b      	str	r3, [r5, #0]
 800b230:	f7f6 fc7c 	bl	8001b2c <_sbrk>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d102      	bne.n	800b23e <_sbrk_r+0x1a>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	b103      	cbz	r3, 800b23e <_sbrk_r+0x1a>
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	2400c998 	.word	0x2400c998

0800b244 <__swhatbuf_r>:
 800b244:	b570      	push	{r4, r5, r6, lr}
 800b246:	460c      	mov	r4, r1
 800b248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b24c:	2900      	cmp	r1, #0
 800b24e:	b096      	sub	sp, #88	; 0x58
 800b250:	4615      	mov	r5, r2
 800b252:	461e      	mov	r6, r3
 800b254:	da0d      	bge.n	800b272 <__swhatbuf_r+0x2e>
 800b256:	89a3      	ldrh	r3, [r4, #12]
 800b258:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b25c:	f04f 0100 	mov.w	r1, #0
 800b260:	bf0c      	ite	eq
 800b262:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b266:	2340      	movne	r3, #64	; 0x40
 800b268:	2000      	movs	r0, #0
 800b26a:	6031      	str	r1, [r6, #0]
 800b26c:	602b      	str	r3, [r5, #0]
 800b26e:	b016      	add	sp, #88	; 0x58
 800b270:	bd70      	pop	{r4, r5, r6, pc}
 800b272:	466a      	mov	r2, sp
 800b274:	f000 f848 	bl	800b308 <_fstat_r>
 800b278:	2800      	cmp	r0, #0
 800b27a:	dbec      	blt.n	800b256 <__swhatbuf_r+0x12>
 800b27c:	9901      	ldr	r1, [sp, #4]
 800b27e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b282:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b286:	4259      	negs	r1, r3
 800b288:	4159      	adcs	r1, r3
 800b28a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b28e:	e7eb      	b.n	800b268 <__swhatbuf_r+0x24>

0800b290 <__smakebuf_r>:
 800b290:	898b      	ldrh	r3, [r1, #12]
 800b292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b294:	079d      	lsls	r5, r3, #30
 800b296:	4606      	mov	r6, r0
 800b298:	460c      	mov	r4, r1
 800b29a:	d507      	bpl.n	800b2ac <__smakebuf_r+0x1c>
 800b29c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2a0:	6023      	str	r3, [r4, #0]
 800b2a2:	6123      	str	r3, [r4, #16]
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	6163      	str	r3, [r4, #20]
 800b2a8:	b002      	add	sp, #8
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	ab01      	add	r3, sp, #4
 800b2ae:	466a      	mov	r2, sp
 800b2b0:	f7ff ffc8 	bl	800b244 <__swhatbuf_r>
 800b2b4:	9900      	ldr	r1, [sp, #0]
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f7ff fadb 	bl	800a874 <_malloc_r>
 800b2be:	b948      	cbnz	r0, 800b2d4 <__smakebuf_r+0x44>
 800b2c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2c4:	059a      	lsls	r2, r3, #22
 800b2c6:	d4ef      	bmi.n	800b2a8 <__smakebuf_r+0x18>
 800b2c8:	f023 0303 	bic.w	r3, r3, #3
 800b2cc:	f043 0302 	orr.w	r3, r3, #2
 800b2d0:	81a3      	strh	r3, [r4, #12]
 800b2d2:	e7e3      	b.n	800b29c <__smakebuf_r+0xc>
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	6020      	str	r0, [r4, #0]
 800b2d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2dc:	81a3      	strh	r3, [r4, #12]
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	6163      	str	r3, [r4, #20]
 800b2e2:	9b01      	ldr	r3, [sp, #4]
 800b2e4:	6120      	str	r0, [r4, #16]
 800b2e6:	b15b      	cbz	r3, 800b300 <__smakebuf_r+0x70>
 800b2e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	f000 f81d 	bl	800b32c <_isatty_r>
 800b2f2:	b128      	cbz	r0, 800b300 <__smakebuf_r+0x70>
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	f023 0303 	bic.w	r3, r3, #3
 800b2fa:	f043 0301 	orr.w	r3, r3, #1
 800b2fe:	81a3      	strh	r3, [r4, #12]
 800b300:	89a3      	ldrh	r3, [r4, #12]
 800b302:	431d      	orrs	r5, r3
 800b304:	81a5      	strh	r5, [r4, #12]
 800b306:	e7cf      	b.n	800b2a8 <__smakebuf_r+0x18>

0800b308 <_fstat_r>:
 800b308:	b538      	push	{r3, r4, r5, lr}
 800b30a:	4d07      	ldr	r5, [pc, #28]	; (800b328 <_fstat_r+0x20>)
 800b30c:	2300      	movs	r3, #0
 800b30e:	4604      	mov	r4, r0
 800b310:	4608      	mov	r0, r1
 800b312:	4611      	mov	r1, r2
 800b314:	602b      	str	r3, [r5, #0]
 800b316:	f7f6 fbff 	bl	8001b18 <_fstat>
 800b31a:	1c43      	adds	r3, r0, #1
 800b31c:	d102      	bne.n	800b324 <_fstat_r+0x1c>
 800b31e:	682b      	ldr	r3, [r5, #0]
 800b320:	b103      	cbz	r3, 800b324 <_fstat_r+0x1c>
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	bd38      	pop	{r3, r4, r5, pc}
 800b326:	bf00      	nop
 800b328:	2400c998 	.word	0x2400c998

0800b32c <_isatty_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4d06      	ldr	r5, [pc, #24]	; (800b348 <_isatty_r+0x1c>)
 800b330:	2300      	movs	r3, #0
 800b332:	4604      	mov	r4, r0
 800b334:	4608      	mov	r0, r1
 800b336:	602b      	str	r3, [r5, #0]
 800b338:	f7f6 fbf4 	bl	8001b24 <_isatty>
 800b33c:	1c43      	adds	r3, r0, #1
 800b33e:	d102      	bne.n	800b346 <_isatty_r+0x1a>
 800b340:	682b      	ldr	r3, [r5, #0]
 800b342:	b103      	cbz	r3, 800b346 <_isatty_r+0x1a>
 800b344:	6023      	str	r3, [r4, #0]
 800b346:	bd38      	pop	{r3, r4, r5, pc}
 800b348:	2400c998 	.word	0x2400c998
 800b34c:	00000000 	.word	0x00000000

0800b350 <sin>:
 800b350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b352:	eeb0 7b40 	vmov.f64	d7, d0
 800b356:	ee17 3a90 	vmov	r3, s15
 800b35a:	4a21      	ldr	r2, [pc, #132]	; (800b3e0 <sin+0x90>)
 800b35c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b360:	4293      	cmp	r3, r2
 800b362:	dc07      	bgt.n	800b374 <sin+0x24>
 800b364:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800b3d8 <sin+0x88>
 800b368:	2000      	movs	r0, #0
 800b36a:	b005      	add	sp, #20
 800b36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b370:	f000 b8a6 	b.w	800b4c0 <__kernel_sin>
 800b374:	4a1b      	ldr	r2, [pc, #108]	; (800b3e4 <sin+0x94>)
 800b376:	4293      	cmp	r3, r2
 800b378:	dd04      	ble.n	800b384 <sin+0x34>
 800b37a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800b37e:	b005      	add	sp, #20
 800b380:	f85d fb04 	ldr.w	pc, [sp], #4
 800b384:	4668      	mov	r0, sp
 800b386:	f000 f8f3 	bl	800b570 <__ieee754_rem_pio2>
 800b38a:	f000 0003 	and.w	r0, r0, #3
 800b38e:	2801      	cmp	r0, #1
 800b390:	d00a      	beq.n	800b3a8 <sin+0x58>
 800b392:	2802      	cmp	r0, #2
 800b394:	d00f      	beq.n	800b3b6 <sin+0x66>
 800b396:	b9c0      	cbnz	r0, 800b3ca <sin+0x7a>
 800b398:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b39c:	ed9d 0b00 	vldr	d0, [sp]
 800b3a0:	2001      	movs	r0, #1
 800b3a2:	f000 f88d 	bl	800b4c0 <__kernel_sin>
 800b3a6:	e7ea      	b.n	800b37e <sin+0x2e>
 800b3a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3ac:	ed9d 0b00 	vldr	d0, [sp]
 800b3b0:	f000 f81a 	bl	800b3e8 <__kernel_cos>
 800b3b4:	e7e3      	b.n	800b37e <sin+0x2e>
 800b3b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3ba:	ed9d 0b00 	vldr	d0, [sp]
 800b3be:	2001      	movs	r0, #1
 800b3c0:	f000 f87e 	bl	800b4c0 <__kernel_sin>
 800b3c4:	eeb1 0b40 	vneg.f64	d0, d0
 800b3c8:	e7d9      	b.n	800b37e <sin+0x2e>
 800b3ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3ce:	ed9d 0b00 	vldr	d0, [sp]
 800b3d2:	f000 f809 	bl	800b3e8 <__kernel_cos>
 800b3d6:	e7f5      	b.n	800b3c4 <sin+0x74>
	...
 800b3e0:	3fe921fb 	.word	0x3fe921fb
 800b3e4:	7fefffff 	.word	0x7fefffff

0800b3e8 <__kernel_cos>:
 800b3e8:	ee10 1a90 	vmov	r1, s1
 800b3ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b3f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b3f4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800b3f8:	da05      	bge.n	800b406 <__kernel_cos+0x1e>
 800b3fa:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800b3fe:	ee17 3a90 	vmov	r3, s15
 800b402:	2b00      	cmp	r3, #0
 800b404:	d03d      	beq.n	800b482 <__kernel_cos+0x9a>
 800b406:	ee20 5b00 	vmul.f64	d5, d0, d0
 800b40a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800b40e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 800b488 <__kernel_cos+0xa0>
 800b412:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800b490 <__kernel_cos+0xa8>
 800b416:	eea5 4b07 	vfma.f64	d4, d5, d7
 800b41a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800b498 <__kernel_cos+0xb0>
 800b41e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b422:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800b4a0 <__kernel_cos+0xb8>
 800b426:	eea7 4b05 	vfma.f64	d4, d7, d5
 800b42a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800b4a8 <__kernel_cos+0xc0>
 800b42e:	4b22      	ldr	r3, [pc, #136]	; (800b4b8 <__kernel_cos+0xd0>)
 800b430:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b434:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 800b4b0 <__kernel_cos+0xc8>
 800b438:	4299      	cmp	r1, r3
 800b43a:	eea7 4b05 	vfma.f64	d4, d7, d5
 800b43e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b442:	ee24 4b05 	vmul.f64	d4, d4, d5
 800b446:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b44a:	eea5 1b04 	vfma.f64	d1, d5, d4
 800b44e:	dc04      	bgt.n	800b45a <__kernel_cos+0x72>
 800b450:	ee37 7b41 	vsub.f64	d7, d7, d1
 800b454:	ee36 0b47 	vsub.f64	d0, d6, d7
 800b458:	4770      	bx	lr
 800b45a:	4b18      	ldr	r3, [pc, #96]	; (800b4bc <__kernel_cos+0xd4>)
 800b45c:	4299      	cmp	r1, r3
 800b45e:	dc0d      	bgt.n	800b47c <__kernel_cos+0x94>
 800b460:	2200      	movs	r2, #0
 800b462:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800b466:	ec43 2b15 	vmov	d5, r2, r3
 800b46a:	ee36 0b45 	vsub.f64	d0, d6, d5
 800b46e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b472:	ee37 7b41 	vsub.f64	d7, d7, d1
 800b476:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b47a:	4770      	bx	lr
 800b47c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800b480:	e7f3      	b.n	800b46a <__kernel_cos+0x82>
 800b482:	eeb0 0b46 	vmov.f64	d0, d6
 800b486:	4770      	bx	lr
 800b488:	be8838d4 	.word	0xbe8838d4
 800b48c:	bda8fae9 	.word	0xbda8fae9
 800b490:	bdb4b1c4 	.word	0xbdb4b1c4
 800b494:	3e21ee9e 	.word	0x3e21ee9e
 800b498:	809c52ad 	.word	0x809c52ad
 800b49c:	be927e4f 	.word	0xbe927e4f
 800b4a0:	19cb1590 	.word	0x19cb1590
 800b4a4:	3efa01a0 	.word	0x3efa01a0
 800b4a8:	16c15177 	.word	0x16c15177
 800b4ac:	bf56c16c 	.word	0xbf56c16c
 800b4b0:	5555554c 	.word	0x5555554c
 800b4b4:	3fa55555 	.word	0x3fa55555
 800b4b8:	3fd33332 	.word	0x3fd33332
 800b4bc:	3fe90000 	.word	0x3fe90000

0800b4c0 <__kernel_sin>:
 800b4c0:	ee10 3a90 	vmov	r3, s1
 800b4c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4c8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b4cc:	da04      	bge.n	800b4d8 <__kernel_sin+0x18>
 800b4ce:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800b4d2:	ee17 3a90 	vmov	r3, s15
 800b4d6:	b35b      	cbz	r3, 800b530 <__kernel_sin+0x70>
 800b4d8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800b4dc:	ee20 5b06 	vmul.f64	d5, d0, d6
 800b4e0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800b538 <__kernel_sin+0x78>
 800b4e4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b540 <__kernel_sin+0x80>
 800b4e8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b4ec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b548 <__kernel_sin+0x88>
 800b4f0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b4f4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b550 <__kernel_sin+0x90>
 800b4f8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800b4fc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b558 <__kernel_sin+0x98>
 800b500:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b504:	b930      	cbnz	r0, 800b514 <__kernel_sin+0x54>
 800b506:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b560 <__kernel_sin+0xa0>
 800b50a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b50e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800b512:	4770      	bx	lr
 800b514:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800b518:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b51c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800b520:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800b524:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800b568 <__kernel_sin+0xa8>
 800b528:	eea5 1b07 	vfma.f64	d1, d5, d7
 800b52c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	f3af 8000 	nop.w
 800b538:	5acfd57c 	.word	0x5acfd57c
 800b53c:	3de5d93a 	.word	0x3de5d93a
 800b540:	8a2b9ceb 	.word	0x8a2b9ceb
 800b544:	be5ae5e6 	.word	0xbe5ae5e6
 800b548:	57b1fe7d 	.word	0x57b1fe7d
 800b54c:	3ec71de3 	.word	0x3ec71de3
 800b550:	19c161d5 	.word	0x19c161d5
 800b554:	bf2a01a0 	.word	0xbf2a01a0
 800b558:	1110f8a6 	.word	0x1110f8a6
 800b55c:	3f811111 	.word	0x3f811111
 800b560:	55555549 	.word	0x55555549
 800b564:	bfc55555 	.word	0xbfc55555
 800b568:	55555549 	.word	0x55555549
 800b56c:	3fc55555 	.word	0x3fc55555

0800b570 <__ieee754_rem_pio2>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	eeb0 7b40 	vmov.f64	d7, d0
 800b576:	ee17 5a90 	vmov	r5, s15
 800b57a:	4b99      	ldr	r3, [pc, #612]	; (800b7e0 <__ieee754_rem_pio2+0x270>)
 800b57c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b580:	429e      	cmp	r6, r3
 800b582:	b088      	sub	sp, #32
 800b584:	4604      	mov	r4, r0
 800b586:	dc07      	bgt.n	800b598 <__ieee754_rem_pio2+0x28>
 800b588:	2200      	movs	r2, #0
 800b58a:	2300      	movs	r3, #0
 800b58c:	ed84 0b00 	vstr	d0, [r4]
 800b590:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b594:	2000      	movs	r0, #0
 800b596:	e01b      	b.n	800b5d0 <__ieee754_rem_pio2+0x60>
 800b598:	4b92      	ldr	r3, [pc, #584]	; (800b7e4 <__ieee754_rem_pio2+0x274>)
 800b59a:	429e      	cmp	r6, r3
 800b59c:	dc3b      	bgt.n	800b616 <__ieee754_rem_pio2+0xa6>
 800b59e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800b5a2:	2d00      	cmp	r5, #0
 800b5a4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800b7a0 <__ieee754_rem_pio2+0x230>
 800b5a8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800b5ac:	dd19      	ble.n	800b5e2 <__ieee754_rem_pio2+0x72>
 800b5ae:	ee30 7b46 	vsub.f64	d7, d0, d6
 800b5b2:	429e      	cmp	r6, r3
 800b5b4:	d00e      	beq.n	800b5d4 <__ieee754_rem_pio2+0x64>
 800b5b6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800b7a8 <__ieee754_rem_pio2+0x238>
 800b5ba:	ee37 5b46 	vsub.f64	d5, d7, d6
 800b5be:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b5c2:	ed84 5b00 	vstr	d5, [r4]
 800b5c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b5ca:	ed84 7b02 	vstr	d7, [r4, #8]
 800b5ce:	2001      	movs	r0, #1
 800b5d0:	b008      	add	sp, #32
 800b5d2:	bd70      	pop	{r4, r5, r6, pc}
 800b5d4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800b7b0 <__ieee754_rem_pio2+0x240>
 800b5d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b5dc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800b7b8 <__ieee754_rem_pio2+0x248>
 800b5e0:	e7eb      	b.n	800b5ba <__ieee754_rem_pio2+0x4a>
 800b5e2:	429e      	cmp	r6, r3
 800b5e4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800b5e8:	d00e      	beq.n	800b608 <__ieee754_rem_pio2+0x98>
 800b5ea:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800b7a8 <__ieee754_rem_pio2+0x238>
 800b5ee:	ee37 5b06 	vadd.f64	d5, d7, d6
 800b5f2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b5f6:	ed84 5b00 	vstr	d5, [r4]
 800b5fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b602:	ed84 7b02 	vstr	d7, [r4, #8]
 800b606:	e7e3      	b.n	800b5d0 <__ieee754_rem_pio2+0x60>
 800b608:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800b7b0 <__ieee754_rem_pio2+0x240>
 800b60c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b610:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800b7b8 <__ieee754_rem_pio2+0x248>
 800b614:	e7eb      	b.n	800b5ee <__ieee754_rem_pio2+0x7e>
 800b616:	4b74      	ldr	r3, [pc, #464]	; (800b7e8 <__ieee754_rem_pio2+0x278>)
 800b618:	429e      	cmp	r6, r3
 800b61a:	dc70      	bgt.n	800b6fe <__ieee754_rem_pio2+0x18e>
 800b61c:	f000 f8ec 	bl	800b7f8 <fabs>
 800b620:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b624:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800b7c0 <__ieee754_rem_pio2+0x250>
 800b628:	eea0 7b06 	vfma.f64	d7, d0, d6
 800b62c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b630:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b634:	ee17 0a90 	vmov	r0, s15
 800b638:	eeb1 4b45 	vneg.f64	d4, d5
 800b63c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800b7a0 <__ieee754_rem_pio2+0x230>
 800b640:	eea5 0b47 	vfms.f64	d0, d5, d7
 800b644:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800b7a8 <__ieee754_rem_pio2+0x238>
 800b648:	281f      	cmp	r0, #31
 800b64a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b64e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800b652:	dc08      	bgt.n	800b666 <__ieee754_rem_pio2+0xf6>
 800b654:	4b65      	ldr	r3, [pc, #404]	; (800b7ec <__ieee754_rem_pio2+0x27c>)
 800b656:	1e42      	subs	r2, r0, #1
 800b658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b65c:	42b3      	cmp	r3, r6
 800b65e:	d002      	beq.n	800b666 <__ieee754_rem_pio2+0xf6>
 800b660:	ed84 6b00 	vstr	d6, [r4]
 800b664:	e024      	b.n	800b6b0 <__ieee754_rem_pio2+0x140>
 800b666:	ee16 3a90 	vmov	r3, s13
 800b66a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800b66e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800b672:	2b10      	cmp	r3, #16
 800b674:	ea4f 5226 	mov.w	r2, r6, asr #20
 800b678:	ddf2      	ble.n	800b660 <__ieee754_rem_pio2+0xf0>
 800b67a:	eeb0 6b40 	vmov.f64	d6, d0
 800b67e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800b7b0 <__ieee754_rem_pio2+0x240>
 800b682:	eea4 6b03 	vfma.f64	d6, d4, d3
 800b686:	ee30 7b46 	vsub.f64	d7, d0, d6
 800b68a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800b68e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800b7b8 <__ieee754_rem_pio2+0x248>
 800b692:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800b696:	ee36 3b47 	vsub.f64	d3, d6, d7
 800b69a:	ee13 3a90 	vmov	r3, s7
 800b69e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	2b31      	cmp	r3, #49	; 0x31
 800b6a6:	dc17      	bgt.n	800b6d8 <__ieee754_rem_pio2+0x168>
 800b6a8:	eeb0 0b46 	vmov.f64	d0, d6
 800b6ac:	ed84 3b00 	vstr	d3, [r4]
 800b6b0:	ed94 6b00 	vldr	d6, [r4]
 800b6b4:	2d00      	cmp	r5, #0
 800b6b6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800b6ba:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b6be:	ed84 0b02 	vstr	d0, [r4, #8]
 800b6c2:	da85      	bge.n	800b5d0 <__ieee754_rem_pio2+0x60>
 800b6c4:	eeb1 6b46 	vneg.f64	d6, d6
 800b6c8:	eeb1 0b40 	vneg.f64	d0, d0
 800b6cc:	ed84 6b00 	vstr	d6, [r4]
 800b6d0:	ed84 0b02 	vstr	d0, [r4, #8]
 800b6d4:	4240      	negs	r0, r0
 800b6d6:	e77b      	b.n	800b5d0 <__ieee754_rem_pio2+0x60>
 800b6d8:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800b7c8 <__ieee754_rem_pio2+0x258>
 800b6dc:	eeb0 0b46 	vmov.f64	d0, d6
 800b6e0:	eea4 0b07 	vfma.f64	d0, d4, d7
 800b6e4:	ee36 6b40 	vsub.f64	d6, d6, d0
 800b6e8:	eea4 6b07 	vfma.f64	d6, d4, d7
 800b6ec:	ed9f 4b38 	vldr	d4, [pc, #224]	; 800b7d0 <__ieee754_rem_pio2+0x260>
 800b6f0:	eeb0 7b46 	vmov.f64	d7, d6
 800b6f4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800b6f8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800b6fc:	e7b0      	b.n	800b660 <__ieee754_rem_pio2+0xf0>
 800b6fe:	4b3c      	ldr	r3, [pc, #240]	; (800b7f0 <__ieee754_rem_pio2+0x280>)
 800b700:	429e      	cmp	r6, r3
 800b702:	dd06      	ble.n	800b712 <__ieee754_rem_pio2+0x1a2>
 800b704:	ee30 7b40 	vsub.f64	d7, d0, d0
 800b708:	ed80 7b02 	vstr	d7, [r0, #8]
 800b70c:	ed80 7b00 	vstr	d7, [r0]
 800b710:	e740      	b.n	800b594 <__ieee754_rem_pio2+0x24>
 800b712:	1532      	asrs	r2, r6, #20
 800b714:	ee10 0a10 	vmov	r0, s0
 800b718:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800b71c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800b720:	ec41 0b17 	vmov	d7, r0, r1
 800b724:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800b728:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800b7d8 <__ieee754_rem_pio2+0x268>
 800b72c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800b730:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b734:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b738:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b73c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800b740:	a808      	add	r0, sp, #32
 800b742:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800b746:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b74a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800b74e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b752:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b756:	2103      	movs	r1, #3
 800b758:	ed30 7b02 	vldmdb	r0!, {d7}
 800b75c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b764:	460b      	mov	r3, r1
 800b766:	f101 31ff 	add.w	r1, r1, #4294967295
 800b76a:	d0f5      	beq.n	800b758 <__ieee754_rem_pio2+0x1e8>
 800b76c:	4921      	ldr	r1, [pc, #132]	; (800b7f4 <__ieee754_rem_pio2+0x284>)
 800b76e:	9101      	str	r1, [sp, #4]
 800b770:	2102      	movs	r1, #2
 800b772:	9100      	str	r1, [sp, #0]
 800b774:	a802      	add	r0, sp, #8
 800b776:	4621      	mov	r1, r4
 800b778:	f000 f84a 	bl	800b810 <__kernel_rem_pio2>
 800b77c:	2d00      	cmp	r5, #0
 800b77e:	f6bf af27 	bge.w	800b5d0 <__ieee754_rem_pio2+0x60>
 800b782:	ed94 7b00 	vldr	d7, [r4]
 800b786:	eeb1 7b47 	vneg.f64	d7, d7
 800b78a:	ed84 7b00 	vstr	d7, [r4]
 800b78e:	ed94 7b02 	vldr	d7, [r4, #8]
 800b792:	eeb1 7b47 	vneg.f64	d7, d7
 800b796:	ed84 7b02 	vstr	d7, [r4, #8]
 800b79a:	e79b      	b.n	800b6d4 <__ieee754_rem_pio2+0x164>
 800b79c:	f3af 8000 	nop.w
 800b7a0:	54400000 	.word	0x54400000
 800b7a4:	3ff921fb 	.word	0x3ff921fb
 800b7a8:	1a626331 	.word	0x1a626331
 800b7ac:	3dd0b461 	.word	0x3dd0b461
 800b7b0:	1a600000 	.word	0x1a600000
 800b7b4:	3dd0b461 	.word	0x3dd0b461
 800b7b8:	2e037073 	.word	0x2e037073
 800b7bc:	3ba3198a 	.word	0x3ba3198a
 800b7c0:	6dc9c883 	.word	0x6dc9c883
 800b7c4:	3fe45f30 	.word	0x3fe45f30
 800b7c8:	2e000000 	.word	0x2e000000
 800b7cc:	3ba3198a 	.word	0x3ba3198a
 800b7d0:	252049c1 	.word	0x252049c1
 800b7d4:	397b839a 	.word	0x397b839a
 800b7d8:	00000000 	.word	0x00000000
 800b7dc:	41700000 	.word	0x41700000
 800b7e0:	3fe921fb 	.word	0x3fe921fb
 800b7e4:	4002d97b 	.word	0x4002d97b
 800b7e8:	413921fb 	.word	0x413921fb
 800b7ec:	0800c078 	.word	0x0800c078
 800b7f0:	7fefffff 	.word	0x7fefffff
 800b7f4:	0800c0f8 	.word	0x0800c0f8

0800b7f8 <fabs>:
 800b7f8:	ec51 0b10 	vmov	r0, r1, d0
 800b7fc:	ee10 2a10 	vmov	r2, s0
 800b800:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b804:	ec43 2b10 	vmov	d0, r2, r3
 800b808:	4770      	bx	lr
 800b80a:	0000      	movs	r0, r0
 800b80c:	0000      	movs	r0, r0
	...

0800b810 <__kernel_rem_pio2>:
 800b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b814:	ed2d 8b06 	vpush	{d8-d10}
 800b818:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800b81c:	460f      	mov	r7, r1
 800b81e:	9002      	str	r0, [sp, #8]
 800b820:	49c3      	ldr	r1, [pc, #780]	; (800bb30 <__kernel_rem_pio2+0x320>)
 800b822:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800b824:	9301      	str	r3, [sp, #4]
 800b826:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800b82a:	9901      	ldr	r1, [sp, #4]
 800b82c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b82e:	f112 0f14 	cmn.w	r2, #20
 800b832:	bfa8      	it	ge
 800b834:	1ed0      	subge	r0, r2, #3
 800b836:	f101 3aff 	add.w	sl, r1, #4294967295
 800b83a:	bfaa      	itet	ge
 800b83c:	2418      	movge	r4, #24
 800b83e:	2000      	movlt	r0, #0
 800b840:	fb90 f0f4 	sdivge	r0, r0, r4
 800b844:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 800bb18 <__kernel_rem_pio2+0x308>
 800b848:	f06f 0417 	mvn.w	r4, #23
 800b84c:	fb00 4404 	mla	r4, r0, r4, r4
 800b850:	eba0 060a 	sub.w	r6, r0, sl
 800b854:	4414      	add	r4, r2
 800b856:	eb09 0c0a 	add.w	ip, r9, sl
 800b85a:	ad1a      	add	r5, sp, #104	; 0x68
 800b85c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800b860:	2200      	movs	r2, #0
 800b862:	4562      	cmp	r2, ip
 800b864:	dd10      	ble.n	800b888 <__kernel_rem_pio2+0x78>
 800b866:	9a01      	ldr	r2, [sp, #4]
 800b868:	a91a      	add	r1, sp, #104	; 0x68
 800b86a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b86e:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 800b872:	f04f 0c00 	mov.w	ip, #0
 800b876:	45cc      	cmp	ip, r9
 800b878:	dc26      	bgt.n	800b8c8 <__kernel_rem_pio2+0xb8>
 800b87a:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 800bb18 <__kernel_rem_pio2+0x308>
 800b87e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b882:	4616      	mov	r6, r2
 800b884:	2500      	movs	r5, #0
 800b886:	e015      	b.n	800b8b4 <__kernel_rem_pio2+0xa4>
 800b888:	42d6      	cmn	r6, r2
 800b88a:	d409      	bmi.n	800b8a0 <__kernel_rem_pio2+0x90>
 800b88c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800b890:	ee07 1a90 	vmov	s15, r1
 800b894:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b898:	eca5 7b02 	vstmia	r5!, {d7}
 800b89c:	3201      	adds	r2, #1
 800b89e:	e7e0      	b.n	800b862 <__kernel_rem_pio2+0x52>
 800b8a0:	eeb0 7b46 	vmov.f64	d7, d6
 800b8a4:	e7f8      	b.n	800b898 <__kernel_rem_pio2+0x88>
 800b8a6:	ecbe 5b02 	vldmia	lr!, {d5}
 800b8aa:	ed96 6b00 	vldr	d6, [r6]
 800b8ae:	3501      	adds	r5, #1
 800b8b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b8b4:	4555      	cmp	r5, sl
 800b8b6:	f1a6 0608 	sub.w	r6, r6, #8
 800b8ba:	ddf4      	ble.n	800b8a6 <__kernel_rem_pio2+0x96>
 800b8bc:	eca8 7b02 	vstmia	r8!, {d7}
 800b8c0:	f10c 0c01 	add.w	ip, ip, #1
 800b8c4:	3208      	adds	r2, #8
 800b8c6:	e7d6      	b.n	800b876 <__kernel_rem_pio2+0x66>
 800b8c8:	aa06      	add	r2, sp, #24
 800b8ca:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800bb20 <__kernel_rem_pio2+0x310>
 800b8ce:	ed9f ab96 	vldr	d10, [pc, #600]	; 800bb28 <__kernel_rem_pio2+0x318>
 800b8d2:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800b8d6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800b8da:	9204      	str	r2, [sp, #16]
 800b8dc:	9303      	str	r3, [sp, #12]
 800b8de:	464d      	mov	r5, r9
 800b8e0:	00eb      	lsls	r3, r5, #3
 800b8e2:	9305      	str	r3, [sp, #20]
 800b8e4:	ab92      	add	r3, sp, #584	; 0x248
 800b8e6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800b8ea:	f10d 0b18 	add.w	fp, sp, #24
 800b8ee:	ab6a      	add	r3, sp, #424	; 0x1a8
 800b8f0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800b8f4:	465e      	mov	r6, fp
 800b8f6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	f1a2 0208 	sub.w	r2, r2, #8
 800b902:	dc48      	bgt.n	800b996 <__kernel_rem_pio2+0x186>
 800b904:	4620      	mov	r0, r4
 800b906:	f000 fa17 	bl	800bd38 <scalbn>
 800b90a:	eeb0 8b40 	vmov.f64	d8, d0
 800b90e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800b912:	ee28 0b00 	vmul.f64	d0, d8, d0
 800b916:	f000 fa8f 	bl	800be38 <floor>
 800b91a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800b91e:	eea0 8b47 	vfms.f64	d8, d0, d7
 800b922:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800b926:	2c00      	cmp	r4, #0
 800b928:	ee17 8a90 	vmov	r8, s15
 800b92c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b930:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b934:	dd41      	ble.n	800b9ba <__kernel_rem_pio2+0x1aa>
 800b936:	1e68      	subs	r0, r5, #1
 800b938:	ab06      	add	r3, sp, #24
 800b93a:	f1c4 0c18 	rsb	ip, r4, #24
 800b93e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800b942:	fa46 f20c 	asr.w	r2, r6, ip
 800b946:	4490      	add	r8, r2
 800b948:	fa02 f20c 	lsl.w	r2, r2, ip
 800b94c:	1ab6      	subs	r6, r6, r2
 800b94e:	f1c4 0217 	rsb	r2, r4, #23
 800b952:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800b956:	4116      	asrs	r6, r2
 800b958:	2e00      	cmp	r6, #0
 800b95a:	dd3d      	ble.n	800b9d8 <__kernel_rem_pio2+0x1c8>
 800b95c:	f04f 0c00 	mov.w	ip, #0
 800b960:	f108 0801 	add.w	r8, r8, #1
 800b964:	4660      	mov	r0, ip
 800b966:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800b96a:	4565      	cmp	r5, ip
 800b96c:	dc6a      	bgt.n	800ba44 <__kernel_rem_pio2+0x234>
 800b96e:	2c00      	cmp	r4, #0
 800b970:	dd04      	ble.n	800b97c <__kernel_rem_pio2+0x16c>
 800b972:	2c01      	cmp	r4, #1
 800b974:	d07b      	beq.n	800ba6e <__kernel_rem_pio2+0x25e>
 800b976:	2c02      	cmp	r4, #2
 800b978:	f000 8083 	beq.w	800ba82 <__kernel_rem_pio2+0x272>
 800b97c:	2e02      	cmp	r6, #2
 800b97e:	d12b      	bne.n	800b9d8 <__kernel_rem_pio2+0x1c8>
 800b980:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b984:	ee30 8b48 	vsub.f64	d8, d0, d8
 800b988:	b330      	cbz	r0, 800b9d8 <__kernel_rem_pio2+0x1c8>
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 f9d4 	bl	800bd38 <scalbn>
 800b990:	ee38 8b40 	vsub.f64	d8, d8, d0
 800b994:	e020      	b.n	800b9d8 <__kernel_rem_pio2+0x1c8>
 800b996:	ee20 7b09 	vmul.f64	d7, d0, d9
 800b99a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800b99e:	3801      	subs	r0, #1
 800b9a0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800b9a4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800b9a8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b9ac:	eca6 0a01 	vstmia	r6!, {s0}
 800b9b0:	ed92 0b00 	vldr	d0, [r2]
 800b9b4:	ee37 0b00 	vadd.f64	d0, d7, d0
 800b9b8:	e7a0      	b.n	800b8fc <__kernel_rem_pio2+0xec>
 800b9ba:	d105      	bne.n	800b9c8 <__kernel_rem_pio2+0x1b8>
 800b9bc:	1e6a      	subs	r2, r5, #1
 800b9be:	ab06      	add	r3, sp, #24
 800b9c0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800b9c4:	15f6      	asrs	r6, r6, #23
 800b9c6:	e7c7      	b.n	800b958 <__kernel_rem_pio2+0x148>
 800b9c8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b9cc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9d4:	da34      	bge.n	800ba40 <__kernel_rem_pio2+0x230>
 800b9d6:	2600      	movs	r6, #0
 800b9d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e0:	f040 80aa 	bne.w	800bb38 <__kernel_rem_pio2+0x328>
 800b9e4:	f105 3bff 	add.w	fp, r5, #4294967295
 800b9e8:	4658      	mov	r0, fp
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	4548      	cmp	r0, r9
 800b9ee:	da50      	bge.n	800ba92 <__kernel_rem_pio2+0x282>
 800b9f0:	2a00      	cmp	r2, #0
 800b9f2:	d06b      	beq.n	800bacc <__kernel_rem_pio2+0x2bc>
 800b9f4:	ab06      	add	r3, sp, #24
 800b9f6:	3c18      	subs	r4, #24
 800b9f8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f000 8087 	beq.w	800bb10 <__kernel_rem_pio2+0x300>
 800ba02:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ba06:	4620      	mov	r0, r4
 800ba08:	f000 f996 	bl	800bd38 <scalbn>
 800ba0c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 800bb20 <__kernel_rem_pio2+0x310>
 800ba10:	f10b 0201 	add.w	r2, fp, #1
 800ba14:	a96a      	add	r1, sp, #424	; 0x1a8
 800ba16:	00d3      	lsls	r3, r2, #3
 800ba18:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ba1c:	465a      	mov	r2, fp
 800ba1e:	2a00      	cmp	r2, #0
 800ba20:	f280 80b8 	bge.w	800bb94 <__kernel_rem_pio2+0x384>
 800ba24:	465a      	mov	r2, fp
 800ba26:	2a00      	cmp	r2, #0
 800ba28:	f2c0 80d6 	blt.w	800bbd8 <__kernel_rem_pio2+0x3c8>
 800ba2c:	a96a      	add	r1, sp, #424	; 0x1a8
 800ba2e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800ba32:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800bb18 <__kernel_rem_pio2+0x308>
 800ba36:	4d3f      	ldr	r5, [pc, #252]	; (800bb34 <__kernel_rem_pio2+0x324>)
 800ba38:	2000      	movs	r0, #0
 800ba3a:	ebab 0102 	sub.w	r1, fp, r2
 800ba3e:	e0c0      	b.n	800bbc2 <__kernel_rem_pio2+0x3b2>
 800ba40:	2602      	movs	r6, #2
 800ba42:	e78b      	b.n	800b95c <__kernel_rem_pio2+0x14c>
 800ba44:	f8db 2000 	ldr.w	r2, [fp]
 800ba48:	b958      	cbnz	r0, 800ba62 <__kernel_rem_pio2+0x252>
 800ba4a:	b122      	cbz	r2, 800ba56 <__kernel_rem_pio2+0x246>
 800ba4c:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800ba50:	f8cb 2000 	str.w	r2, [fp]
 800ba54:	2201      	movs	r2, #1
 800ba56:	f10c 0c01 	add.w	ip, ip, #1
 800ba5a:	f10b 0b04 	add.w	fp, fp, #4
 800ba5e:	4610      	mov	r0, r2
 800ba60:	e783      	b.n	800b96a <__kernel_rem_pio2+0x15a>
 800ba62:	ebae 0202 	sub.w	r2, lr, r2
 800ba66:	f8cb 2000 	str.w	r2, [fp]
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	e7f3      	b.n	800ba56 <__kernel_rem_pio2+0x246>
 800ba6e:	f105 3cff 	add.w	ip, r5, #4294967295
 800ba72:	ab06      	add	r3, sp, #24
 800ba74:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800ba78:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800ba7c:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800ba80:	e77c      	b.n	800b97c <__kernel_rem_pio2+0x16c>
 800ba82:	f105 3cff 	add.w	ip, r5, #4294967295
 800ba86:	ab06      	add	r3, sp, #24
 800ba88:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800ba8c:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800ba90:	e7f4      	b.n	800ba7c <__kernel_rem_pio2+0x26c>
 800ba92:	ab06      	add	r3, sp, #24
 800ba94:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ba98:	3801      	subs	r0, #1
 800ba9a:	431a      	orrs	r2, r3
 800ba9c:	e7a6      	b.n	800b9ec <__kernel_rem_pio2+0x1dc>
 800ba9e:	3201      	adds	r2, #1
 800baa0:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800baa4:	2e00      	cmp	r6, #0
 800baa6:	d0fa      	beq.n	800ba9e <__kernel_rem_pio2+0x28e>
 800baa8:	9b05      	ldr	r3, [sp, #20]
 800baaa:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800baae:	eb0d 0003 	add.w	r0, sp, r3
 800bab2:	9b01      	ldr	r3, [sp, #4]
 800bab4:	18ee      	adds	r6, r5, r3
 800bab6:	ab1a      	add	r3, sp, #104	; 0x68
 800bab8:	f105 0c01 	add.w	ip, r5, #1
 800babc:	3898      	subs	r0, #152	; 0x98
 800babe:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bac2:	442a      	add	r2, r5
 800bac4:	4562      	cmp	r2, ip
 800bac6:	da04      	bge.n	800bad2 <__kernel_rem_pio2+0x2c2>
 800bac8:	4615      	mov	r5, r2
 800baca:	e709      	b.n	800b8e0 <__kernel_rem_pio2+0xd0>
 800bacc:	9804      	ldr	r0, [sp, #16]
 800bace:	2201      	movs	r2, #1
 800bad0:	e7e6      	b.n	800baa0 <__kernel_rem_pio2+0x290>
 800bad2:	9b03      	ldr	r3, [sp, #12]
 800bad4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bad8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800badc:	9305      	str	r3, [sp, #20]
 800bade:	ee07 3a90 	vmov	s15, r3
 800bae2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bae6:	2500      	movs	r5, #0
 800bae8:	eca6 7b02 	vstmia	r6!, {d7}
 800baec:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 800bb18 <__kernel_rem_pio2+0x308>
 800baf0:	46b0      	mov	r8, r6
 800baf2:	4555      	cmp	r5, sl
 800baf4:	dd04      	ble.n	800bb00 <__kernel_rem_pio2+0x2f0>
 800baf6:	eca0 7b02 	vstmia	r0!, {d7}
 800bafa:	f10c 0c01 	add.w	ip, ip, #1
 800bafe:	e7e1      	b.n	800bac4 <__kernel_rem_pio2+0x2b4>
 800bb00:	ecbe 5b02 	vldmia	lr!, {d5}
 800bb04:	ed38 6b02 	vldmdb	r8!, {d6}
 800bb08:	3501      	adds	r5, #1
 800bb0a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bb0e:	e7f0      	b.n	800baf2 <__kernel_rem_pio2+0x2e2>
 800bb10:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb14:	e76e      	b.n	800b9f4 <__kernel_rem_pio2+0x1e4>
 800bb16:	bf00      	nop
	...
 800bb24:	3e700000 	.word	0x3e700000
 800bb28:	00000000 	.word	0x00000000
 800bb2c:	41700000 	.word	0x41700000
 800bb30:	0800c240 	.word	0x0800c240
 800bb34:	0800c200 	.word	0x0800c200
 800bb38:	4260      	negs	r0, r4
 800bb3a:	eeb0 0b48 	vmov.f64	d0, d8
 800bb3e:	f000 f8fb 	bl	800bd38 <scalbn>
 800bb42:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800bd20 <__kernel_rem_pio2+0x510>
 800bb46:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800bb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb4e:	db18      	blt.n	800bb82 <__kernel_rem_pio2+0x372>
 800bb50:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800bd28 <__kernel_rem_pio2+0x518>
 800bb54:	ee20 7b07 	vmul.f64	d7, d0, d7
 800bb58:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800bb5c:	aa06      	add	r2, sp, #24
 800bb5e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800bb62:	eea5 0b46 	vfms.f64	d0, d5, d6
 800bb66:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800bb6a:	f105 0b01 	add.w	fp, r5, #1
 800bb6e:	ee10 3a10 	vmov	r3, s0
 800bb72:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800bb76:	ee17 3a10 	vmov	r3, s14
 800bb7a:	3418      	adds	r4, #24
 800bb7c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800bb80:	e73f      	b.n	800ba02 <__kernel_rem_pio2+0x1f2>
 800bb82:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800bb86:	aa06      	add	r2, sp, #24
 800bb88:	ee10 3a10 	vmov	r3, s0
 800bb8c:	46ab      	mov	fp, r5
 800bb8e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800bb92:	e736      	b.n	800ba02 <__kernel_rem_pio2+0x1f2>
 800bb94:	a806      	add	r0, sp, #24
 800bb96:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800bb9a:	9001      	str	r0, [sp, #4]
 800bb9c:	ee07 0a90 	vmov	s15, r0
 800bba0:	3a01      	subs	r2, #1
 800bba2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bba6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800bbaa:	ee20 0b06 	vmul.f64	d0, d0, d6
 800bbae:	ed21 7b02 	vstmdb	r1!, {d7}
 800bbb2:	e734      	b.n	800ba1e <__kernel_rem_pio2+0x20e>
 800bbb4:	ecb5 5b02 	vldmia	r5!, {d5}
 800bbb8:	ecb4 6b02 	vldmia	r4!, {d6}
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bbc2:	4548      	cmp	r0, r9
 800bbc4:	dc01      	bgt.n	800bbca <__kernel_rem_pio2+0x3ba>
 800bbc6:	4288      	cmp	r0, r1
 800bbc8:	ddf4      	ble.n	800bbb4 <__kernel_rem_pio2+0x3a4>
 800bbca:	a842      	add	r0, sp, #264	; 0x108
 800bbcc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800bbd0:	ed81 7b00 	vstr	d7, [r1]
 800bbd4:	3a01      	subs	r2, #1
 800bbd6:	e726      	b.n	800ba26 <__kernel_rem_pio2+0x216>
 800bbd8:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800bbda:	2a02      	cmp	r2, #2
 800bbdc:	dc0a      	bgt.n	800bbf4 <__kernel_rem_pio2+0x3e4>
 800bbde:	2a00      	cmp	r2, #0
 800bbe0:	dc2e      	bgt.n	800bc40 <__kernel_rem_pio2+0x430>
 800bbe2:	d047      	beq.n	800bc74 <__kernel_rem_pio2+0x464>
 800bbe4:	f008 0007 	and.w	r0, r8, #7
 800bbe8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800bbec:	ecbd 8b06 	vpop	{d8-d10}
 800bbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800bbf6:	2a03      	cmp	r2, #3
 800bbf8:	d1f4      	bne.n	800bbe4 <__kernel_rem_pio2+0x3d4>
 800bbfa:	a942      	add	r1, sp, #264	; 0x108
 800bbfc:	f1a3 0208 	sub.w	r2, r3, #8
 800bc00:	440a      	add	r2, r1
 800bc02:	4611      	mov	r1, r2
 800bc04:	4658      	mov	r0, fp
 800bc06:	2800      	cmp	r0, #0
 800bc08:	f1a1 0108 	sub.w	r1, r1, #8
 800bc0c:	dc55      	bgt.n	800bcba <__kernel_rem_pio2+0x4aa>
 800bc0e:	4659      	mov	r1, fp
 800bc10:	2901      	cmp	r1, #1
 800bc12:	f1a2 0208 	sub.w	r2, r2, #8
 800bc16:	dc60      	bgt.n	800bcda <__kernel_rem_pio2+0x4ca>
 800bc18:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800bd30 <__kernel_rem_pio2+0x520>
 800bc1c:	aa42      	add	r2, sp, #264	; 0x108
 800bc1e:	4413      	add	r3, r2
 800bc20:	f1bb 0f01 	cmp.w	fp, #1
 800bc24:	dc69      	bgt.n	800bcfa <__kernel_rem_pio2+0x4ea>
 800bc26:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800bc2a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800bc2e:	2e00      	cmp	r6, #0
 800bc30:	d16a      	bne.n	800bd08 <__kernel_rem_pio2+0x4f8>
 800bc32:	ed87 5b00 	vstr	d5, [r7]
 800bc36:	ed87 6b02 	vstr	d6, [r7, #8]
 800bc3a:	ed87 7b04 	vstr	d7, [r7, #16]
 800bc3e:	e7d1      	b.n	800bbe4 <__kernel_rem_pio2+0x3d4>
 800bc40:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800bd30 <__kernel_rem_pio2+0x520>
 800bc44:	aa42      	add	r2, sp, #264	; 0x108
 800bc46:	4413      	add	r3, r2
 800bc48:	465a      	mov	r2, fp
 800bc4a:	2a00      	cmp	r2, #0
 800bc4c:	da26      	bge.n	800bc9c <__kernel_rem_pio2+0x48c>
 800bc4e:	b35e      	cbz	r6, 800bca8 <__kernel_rem_pio2+0x498>
 800bc50:	eeb1 7b46 	vneg.f64	d7, d6
 800bc54:	ed87 7b00 	vstr	d7, [r7]
 800bc58:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800bc5c:	aa44      	add	r2, sp, #272	; 0x110
 800bc5e:	2301      	movs	r3, #1
 800bc60:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bc64:	459b      	cmp	fp, r3
 800bc66:	da22      	bge.n	800bcae <__kernel_rem_pio2+0x49e>
 800bc68:	b10e      	cbz	r6, 800bc6e <__kernel_rem_pio2+0x45e>
 800bc6a:	eeb1 7b47 	vneg.f64	d7, d7
 800bc6e:	ed87 7b02 	vstr	d7, [r7, #8]
 800bc72:	e7b7      	b.n	800bbe4 <__kernel_rem_pio2+0x3d4>
 800bc74:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800bd30 <__kernel_rem_pio2+0x520>
 800bc78:	aa42      	add	r2, sp, #264	; 0x108
 800bc7a:	4413      	add	r3, r2
 800bc7c:	f1bb 0f00 	cmp.w	fp, #0
 800bc80:	da05      	bge.n	800bc8e <__kernel_rem_pio2+0x47e>
 800bc82:	b10e      	cbz	r6, 800bc88 <__kernel_rem_pio2+0x478>
 800bc84:	eeb1 7b47 	vneg.f64	d7, d7
 800bc88:	ed87 7b00 	vstr	d7, [r7]
 800bc8c:	e7aa      	b.n	800bbe4 <__kernel_rem_pio2+0x3d4>
 800bc8e:	ed33 6b02 	vldmdb	r3!, {d6}
 800bc92:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc96:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bc9a:	e7ef      	b.n	800bc7c <__kernel_rem_pio2+0x46c>
 800bc9c:	ed33 7b02 	vldmdb	r3!, {d7}
 800bca0:	3a01      	subs	r2, #1
 800bca2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bca6:	e7d0      	b.n	800bc4a <__kernel_rem_pio2+0x43a>
 800bca8:	eeb0 7b46 	vmov.f64	d7, d6
 800bcac:	e7d2      	b.n	800bc54 <__kernel_rem_pio2+0x444>
 800bcae:	ecb2 6b02 	vldmia	r2!, {d6}
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bcb8:	e7d4      	b.n	800bc64 <__kernel_rem_pio2+0x454>
 800bcba:	ed91 7b00 	vldr	d7, [r1]
 800bcbe:	ed91 5b02 	vldr	d5, [r1, #8]
 800bcc2:	3801      	subs	r0, #1
 800bcc4:	ee37 6b05 	vadd.f64	d6, d7, d5
 800bcc8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bccc:	ed81 6b00 	vstr	d6, [r1]
 800bcd0:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bcd4:	ed81 7b02 	vstr	d7, [r1, #8]
 800bcd8:	e795      	b.n	800bc06 <__kernel_rem_pio2+0x3f6>
 800bcda:	ed92 7b00 	vldr	d7, [r2]
 800bcde:	ed92 5b02 	vldr	d5, [r2, #8]
 800bce2:	3901      	subs	r1, #1
 800bce4:	ee37 6b05 	vadd.f64	d6, d7, d5
 800bce8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bcec:	ed82 6b00 	vstr	d6, [r2]
 800bcf0:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bcf4:	ed82 7b02 	vstr	d7, [r2, #8]
 800bcf8:	e78a      	b.n	800bc10 <__kernel_rem_pio2+0x400>
 800bcfa:	ed33 6b02 	vldmdb	r3!, {d6}
 800bcfe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd02:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bd06:	e78b      	b.n	800bc20 <__kernel_rem_pio2+0x410>
 800bd08:	eeb1 5b45 	vneg.f64	d5, d5
 800bd0c:	eeb1 6b46 	vneg.f64	d6, d6
 800bd10:	ed87 5b00 	vstr	d5, [r7]
 800bd14:	eeb1 7b47 	vneg.f64	d7, d7
 800bd18:	ed87 6b02 	vstr	d6, [r7, #8]
 800bd1c:	e78d      	b.n	800bc3a <__kernel_rem_pio2+0x42a>
 800bd1e:	bf00      	nop
 800bd20:	00000000 	.word	0x00000000
 800bd24:	41700000 	.word	0x41700000
 800bd28:	00000000 	.word	0x00000000
 800bd2c:	3e700000 	.word	0x3e700000
	...

0800bd38 <scalbn>:
 800bd38:	ee10 1a90 	vmov	r1, s1
 800bd3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bd40:	b98b      	cbnz	r3, 800bd66 <scalbn+0x2e>
 800bd42:	ee10 3a10 	vmov	r3, s0
 800bd46:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bd4a:	4319      	orrs	r1, r3
 800bd4c:	d00a      	beq.n	800bd64 <scalbn+0x2c>
 800bd4e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800be00 <scalbn+0xc8>
 800bd52:	4b37      	ldr	r3, [pc, #220]	; (800be30 <scalbn+0xf8>)
 800bd54:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bd58:	4298      	cmp	r0, r3
 800bd5a:	da0b      	bge.n	800bd74 <scalbn+0x3c>
 800bd5c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800be08 <scalbn+0xd0>
 800bd60:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bd64:	4770      	bx	lr
 800bd66:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d107      	bne.n	800bd7e <scalbn+0x46>
 800bd6e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800bd72:	4770      	bx	lr
 800bd74:	ee10 1a90 	vmov	r1, s1
 800bd78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bd7c:	3b36      	subs	r3, #54	; 0x36
 800bd7e:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bd82:	4290      	cmp	r0, r2
 800bd84:	dd0d      	ble.n	800bda2 <scalbn+0x6a>
 800bd86:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800be10 <scalbn+0xd8>
 800bd8a:	ee10 3a90 	vmov	r3, s1
 800bd8e:	eeb0 6b47 	vmov.f64	d6, d7
 800bd92:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800be18 <scalbn+0xe0>
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	fe27 7b05 	vselge.f64	d7, d7, d5
 800bd9c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800bda0:	4770      	bx	lr
 800bda2:	4418      	add	r0, r3
 800bda4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800bda8:	4298      	cmp	r0, r3
 800bdaa:	dcec      	bgt.n	800bd86 <scalbn+0x4e>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	dd0a      	ble.n	800bdc6 <scalbn+0x8e>
 800bdb0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800bdb4:	ec53 2b10 	vmov	r2, r3, d0
 800bdb8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800bdbc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800bdc0:	ec43 2b10 	vmov	d0, r2, r3
 800bdc4:	4770      	bx	lr
 800bdc6:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800bdca:	da09      	bge.n	800bde0 <scalbn+0xa8>
 800bdcc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800be08 <scalbn+0xd0>
 800bdd0:	ee10 3a90 	vmov	r3, s1
 800bdd4:	eeb0 6b47 	vmov.f64	d6, d7
 800bdd8:	ed9f 5b11 	vldr	d5, [pc, #68]	; 800be20 <scalbn+0xe8>
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	e7db      	b.n	800bd98 <scalbn+0x60>
 800bde0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800bde4:	ec53 2b10 	vmov	r2, r3, d0
 800bde8:	3036      	adds	r0, #54	; 0x36
 800bdea:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800bdee:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800bdf2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800be28 <scalbn+0xf0>
 800bdf6:	ec43 2b10 	vmov	d0, r2, r3
 800bdfa:	e7b1      	b.n	800bd60 <scalbn+0x28>
 800bdfc:	f3af 8000 	nop.w
 800be00:	00000000 	.word	0x00000000
 800be04:	43500000 	.word	0x43500000
 800be08:	c2f8f359 	.word	0xc2f8f359
 800be0c:	01a56e1f 	.word	0x01a56e1f
 800be10:	8800759c 	.word	0x8800759c
 800be14:	7e37e43c 	.word	0x7e37e43c
 800be18:	8800759c 	.word	0x8800759c
 800be1c:	fe37e43c 	.word	0xfe37e43c
 800be20:	c2f8f359 	.word	0xc2f8f359
 800be24:	81a56e1f 	.word	0x81a56e1f
 800be28:	00000000 	.word	0x00000000
 800be2c:	3c900000 	.word	0x3c900000
 800be30:	ffff3cb0 	.word	0xffff3cb0
 800be34:	00000000 	.word	0x00000000

0800be38 <floor>:
 800be38:	ee10 1a90 	vmov	r1, s1
 800be3c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800be40:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800be44:	2b13      	cmp	r3, #19
 800be46:	b530      	push	{r4, r5, lr}
 800be48:	ee10 0a10 	vmov	r0, s0
 800be4c:	ee10 5a10 	vmov	r5, s0
 800be50:	dc31      	bgt.n	800beb6 <floor+0x7e>
 800be52:	2b00      	cmp	r3, #0
 800be54:	da15      	bge.n	800be82 <floor+0x4a>
 800be56:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800bf18 <floor+0xe0>
 800be5a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800be5e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800be62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be66:	dd07      	ble.n	800be78 <floor+0x40>
 800be68:	2900      	cmp	r1, #0
 800be6a:	da4e      	bge.n	800bf0a <floor+0xd2>
 800be6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800be70:	4308      	orrs	r0, r1
 800be72:	d04d      	beq.n	800bf10 <floor+0xd8>
 800be74:	492a      	ldr	r1, [pc, #168]	; (800bf20 <floor+0xe8>)
 800be76:	2000      	movs	r0, #0
 800be78:	460b      	mov	r3, r1
 800be7a:	4602      	mov	r2, r0
 800be7c:	ec43 2b10 	vmov	d0, r2, r3
 800be80:	e020      	b.n	800bec4 <floor+0x8c>
 800be82:	4a28      	ldr	r2, [pc, #160]	; (800bf24 <floor+0xec>)
 800be84:	411a      	asrs	r2, r3
 800be86:	ea01 0402 	and.w	r4, r1, r2
 800be8a:	4304      	orrs	r4, r0
 800be8c:	d01a      	beq.n	800bec4 <floor+0x8c>
 800be8e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800bf18 <floor+0xe0>
 800be92:	ee30 0b07 	vadd.f64	d0, d0, d7
 800be96:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800be9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be9e:	ddeb      	ble.n	800be78 <floor+0x40>
 800bea0:	2900      	cmp	r1, #0
 800bea2:	bfbe      	ittt	lt
 800bea4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800bea8:	fa40 f303 	asrlt.w	r3, r0, r3
 800beac:	18c9      	addlt	r1, r1, r3
 800beae:	ea21 0102 	bic.w	r1, r1, r2
 800beb2:	2000      	movs	r0, #0
 800beb4:	e7e0      	b.n	800be78 <floor+0x40>
 800beb6:	2b33      	cmp	r3, #51	; 0x33
 800beb8:	dd05      	ble.n	800bec6 <floor+0x8e>
 800beba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bebe:	d101      	bne.n	800bec4 <floor+0x8c>
 800bec0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800bec4:	bd30      	pop	{r4, r5, pc}
 800bec6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800beca:	f04f 32ff 	mov.w	r2, #4294967295
 800bece:	40e2      	lsrs	r2, r4
 800bed0:	4210      	tst	r0, r2
 800bed2:	d0f7      	beq.n	800bec4 <floor+0x8c>
 800bed4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800bf18 <floor+0xe0>
 800bed8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bedc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee4:	ddc8      	ble.n	800be78 <floor+0x40>
 800bee6:	2900      	cmp	r1, #0
 800bee8:	da02      	bge.n	800bef0 <floor+0xb8>
 800beea:	2b14      	cmp	r3, #20
 800beec:	d103      	bne.n	800bef6 <floor+0xbe>
 800beee:	3101      	adds	r1, #1
 800bef0:	ea20 0002 	bic.w	r0, r0, r2
 800bef4:	e7c0      	b.n	800be78 <floor+0x40>
 800bef6:	2401      	movs	r4, #1
 800bef8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800befc:	fa04 f303 	lsl.w	r3, r4, r3
 800bf00:	4418      	add	r0, r3
 800bf02:	4285      	cmp	r5, r0
 800bf04:	bf88      	it	hi
 800bf06:	1909      	addhi	r1, r1, r4
 800bf08:	e7f2      	b.n	800bef0 <floor+0xb8>
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	4601      	mov	r1, r0
 800bf0e:	e7b3      	b.n	800be78 <floor+0x40>
 800bf10:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800bf14:	e7b0      	b.n	800be78 <floor+0x40>
 800bf16:	bf00      	nop
 800bf18:	8800759c 	.word	0x8800759c
 800bf1c:	7e37e43c 	.word	0x7e37e43c
 800bf20:	bff00000 	.word	0xbff00000
 800bf24:	000fffff 	.word	0x000fffff

0800bf28 <_init>:
 800bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2a:	bf00      	nop
 800bf2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf2e:	bc08      	pop	{r3}
 800bf30:	469e      	mov	lr, r3
 800bf32:	4770      	bx	lr

0800bf34 <_fini>:
 800bf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf36:	bf00      	nop
 800bf38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf3a:	bc08      	pop	{r3}
 800bf3c:	469e      	mov	lr, r3
 800bf3e:	4770      	bx	lr
