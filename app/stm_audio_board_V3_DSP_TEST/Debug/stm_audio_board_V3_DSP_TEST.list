
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .sdram_section 00000052  c0000000  c0000000  00030000  2**2
                  ALLOC
  2 .text         000074fc  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  080077c8  080077c8  000177c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080077e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000314  24000010  080077f8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000324  080077f8  00020324  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000127a0  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002d64  00000000  00000000  00032821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000e10  00000000  00000000  00035588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000a97  00000000  00000000  00036398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00003e66  00000000  00000000  00036e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015afd  00000000  00000000  0003ac95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001436c0  00000000  00000000  00050792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000385c  00000000  00000000  00193e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000092  00000000  00000000  001976b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080077b0 	.word	0x080077b0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	080077b0 	.word	0x080077b0

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <MX_DMA_Init+0x6c>)
 8000314:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000318:	4a17      	ldr	r2, [pc, #92]	; (8000378 <MX_DMA_Init+0x6c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_DMA_Init+0x6c>)
 8000324:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000330:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_DMA_Init+0x6c>)
 8000332:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000336:	4a10      	ldr	r2, [pc, #64]	; (8000378 <MX_DMA_Init+0x6c>)
 8000338:	f043 0302 	orr.w	r3, r3, #2
 800033c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <MX_DMA_Init+0x6c>)
 8000342:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000346:	f003 0302 	and.w	r3, r3, #2
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2100      	movs	r1, #0
 8000352:	200b      	movs	r0, #11
 8000354:	f001 f945 	bl	80015e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000358:	200b      	movs	r0, #11
 800035a:	f001 f95c 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	2038      	movs	r0, #56	; 0x38
 8000364:	f001 f93d 	bl	80015e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000368:	2038      	movs	r0, #56	; 0x38
 800036a:	f001 f954 	bl	8001616 <HAL_NVIC_EnableIRQ>

}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	58024400 	.word	0x58024400

0800037c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b090      	sub	sp, #64	; 0x40
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]
 8000392:	615a      	str	r2, [r3, #20]
 8000394:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000396:	4b2c      	ldr	r3, [pc, #176]	; (8000448 <MX_FMC_Init+0xcc>)
 8000398:	4a2c      	ldr	r2, [pc, #176]	; (800044c <MX_FMC_Init+0xd0>)
 800039a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800039c:	4b2a      	ldr	r3, [pc, #168]	; (8000448 <MX_FMC_Init+0xcc>)
 800039e:	2200      	movs	r2, #0
 80003a0:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80003a2:	4b29      	ldr	r3, [pc, #164]	; (8000448 <MX_FMC_Init+0xcc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80003a8:	4b27      	ldr	r3, [pc, #156]	; (8000448 <MX_FMC_Init+0xcc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80003ae:	4b26      	ldr	r3, [pc, #152]	; (8000448 <MX_FMC_Init+0xcc>)
 80003b0:	2210      	movs	r2, #16
 80003b2:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80003b4:	4b24      	ldr	r3, [pc, #144]	; (8000448 <MX_FMC_Init+0xcc>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80003ba:	4b23      	ldr	r3, [pc, #140]	; (8000448 <MX_FMC_Init+0xcc>)
 80003bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80003c0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80003c2:	4b21      	ldr	r3, [pc, #132]	; (8000448 <MX_FMC_Init+0xcc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80003c8:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <MX_FMC_Init+0xcc>)
 80003ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003ce:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80003d0:	4b1d      	ldr	r3, [pc, #116]	; (8000448 <MX_FMC_Init+0xcc>)
 80003d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003d6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_FMC_Init+0xcc>)
 80003da:	2200      	movs	r2, #0
 80003dc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80003de:	2310      	movs	r3, #16
 80003e0:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 16;
 80003e2:	2310      	movs	r3, #16
 80003e4:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 16;
 80003e6:	2310      	movs	r3, #16
 80003e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 16;
 80003ea:	2310      	movs	r3, #16
 80003ec:	633b      	str	r3, [r7, #48]	; 0x30
  SdramTiming.WriteRecoveryTime = 16;
 80003ee:	2310      	movs	r3, #16
 80003f0:	637b      	str	r3, [r7, #52]	; 0x34
  SdramTiming.RPDelay = 16;
 80003f2:	2310      	movs	r3, #16
 80003f4:	63bb      	str	r3, [r7, #56]	; 0x38
  SdramTiming.RCDDelay = 16;
 80003f6:	2310      	movs	r3, #16
 80003f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80003fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003fe:	4619      	mov	r1, r3
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <MX_FMC_Init+0xcc>)
 8000402:	f006 fecd 	bl	80071a0 <HAL_SDRAM_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 800040c:	f000 fc2f 	bl	8000c6e <Error_Handler>

//    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2500);


    IS42S16800J_Context_t my_sdram;
    my_sdram.TargetBank  = FMC_SDRAM_CMD_TARGET_BANK1;
 8000410:	2310      	movs	r3, #16
 8000412:	607b      	str	r3, [r7, #4]
    my_sdram.RefreshMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000414:	2303      	movs	r3, #3
 8000416:	60bb      	str	r3, [r7, #8]
    my_sdram.RefreshRate = REFRESH_COUNT;
 8000418:	f240 63d6 	movw	r3, #1750	; 0x6d6
 800041c:	60fb      	str	r3, [r7, #12]
    my_sdram.CASLatency  = IS42S16800J_CAS_LATENCY_3;
 800041e:	2330      	movs	r3, #48	; 0x30
 8000420:	61bb      	str	r3, [r7, #24]
    my_sdram.OperationMode = IS42S16800J_OPERATING_MODE_STANDARD;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
    my_sdram.WriteBurstMode = IS42S16800J_WRITEBURST_MODE_SINGLE;
 8000426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800042a:	623b      	str	r3, [r7, #32]
    my_sdram.BurstType 		= IS42S16800J_BURST_TYPE_SEQUENTIAL;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
    my_sdram.BurstLength 	= IS42S16800J_BURST_LENGTH_1;
 8000430:	2300      	movs	r3, #0
 8000432:	613b      	str	r3, [r7, #16]

    IS42S16800J_Init(&hsdram1, &my_sdram);
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	4803      	ldr	r0, [pc, #12]	; (8000448 <MX_FMC_Init+0xcc>)
 800043a:	f000 f9b5 	bl	80007a8 <IS42S16800J_Init>
  /* USER CODE END FMC_Init 2 */
}
 800043e:	bf00      	nop
 8000440:	3740      	adds	r7, #64	; 0x40
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	2400002c 	.word	0x2400002c
 800044c:	52004140 	.word	0x52004140

08000450 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000450:	b580      	push	{r7, lr}
 8000452:	b0b6      	sub	sp, #216	; 0xd8
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000466:	4b7b      	ldr	r3, [pc, #492]	; (8000654 <HAL_FMC_MspInit+0x204>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 80ee 	bne.w	800064c <HAL_FMC_MspInit+0x1fc>
    return;
  }
  FMC_Initialized = 1;
 8000470:	4b78      	ldr	r3, [pc, #480]	; (8000654 <HAL_FMC_MspInit+0x204>)
 8000472:	2201      	movs	r2, #1
 8000474:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	22b8      	movs	r2, #184	; 0xb8
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f007 f96a 	bl	8007758 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000484:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000488:	f04f 0300 	mov.w	r3, #0
 800048c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000490:	2300      	movs	r3, #0
 8000492:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000494:	f107 0308 	add.w	r3, r7, #8
 8000498:	4618      	mov	r0, r3
 800049a:	f003 fee1 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80004a4:	f000 fbe3 	bl	8000c6e <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80004a8:	4b6b      	ldr	r3, [pc, #428]	; (8000658 <HAL_FMC_MspInit+0x208>)
 80004aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80004ae:	4a6a      	ldr	r2, [pc, #424]	; (8000658 <HAL_FMC_MspInit+0x208>)
 80004b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004b4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80004b8:	4b67      	ldr	r3, [pc, #412]	; (8000658 <HAL_FMC_MspInit+0x208>)
 80004ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80004be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004c6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80004ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ce:	2302      	movs	r3, #2
 80004d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004da:	2303      	movs	r3, #3
 80004dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80004e0:	230c      	movs	r3, #12
 80004e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004e6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80004ea:	4619      	mov	r1, r3
 80004ec:	485b      	ldr	r0, [pc, #364]	; (800065c <HAL_FMC_MspInit+0x20c>)
 80004ee:	f002 fd6b 	bl	8002fc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80004f2:	230d      	movs	r3, #13
 80004f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f8:	2302      	movs	r3, #2
 80004fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fe:	2301      	movs	r3, #1
 8000500:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000504:	2303      	movs	r3, #3
 8000506:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800050a:	230c      	movs	r3, #12
 800050c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000510:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000514:	4619      	mov	r1, r3
 8000516:	4852      	ldr	r0, [pc, #328]	; (8000660 <HAL_FMC_MspInit+0x210>)
 8000518:	f002 fd56 	bl	8002fc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800051c:	2330      	movs	r3, #48	; 0x30
 800051e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000522:	2302      	movs	r3, #2
 8000524:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800052e:	2303      	movs	r3, #3
 8000530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000534:	230c      	movs	r3, #12
 8000536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800053e:	4619      	mov	r1, r3
 8000540:	4848      	ldr	r0, [pc, #288]	; (8000664 <HAL_FMC_MspInit+0x214>)
 8000542:	f002 fd41 	bl	8002fc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000546:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800054a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054e:	2302      	movs	r3, #2
 8000550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000554:	2301      	movs	r3, #1
 8000556:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800055a:	2303      	movs	r3, #3
 800055c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000560:	230c      	movs	r3, #12
 8000562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000566:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800056a:	4619      	mov	r1, r3
 800056c:	483b      	ldr	r0, [pc, #236]	; (800065c <HAL_FMC_MspInit+0x20c>)
 800056e:	f002 fd2b 	bl	8002fc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000572:	2301      	movs	r3, #1
 8000574:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	2302      	movs	r3, #2
 800057a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000584:	2303      	movs	r3, #3
 8000586:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800058a:	230c      	movs	r3, #12
 800058c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000590:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000594:	4619      	mov	r1, r3
 8000596:	4834      	ldr	r0, [pc, #208]	; (8000668 <HAL_FMC_MspInit+0x218>)
 8000598:	f002 fd16 	bl	8002fc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800059c:	f24e 7380 	movw	r3, #59264	; 0xe780
 80005a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005b6:	230c      	movs	r3, #12
 80005b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005c0:	4619      	mov	r1, r3
 80005c2:	482a      	ldr	r0, [pc, #168]	; (800066c <HAL_FMC_MspInit+0x21c>)
 80005c4:	f002 fd00 	bl	8002fc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80005c8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80005cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005dc:	2303      	movs	r3, #3
 80005de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005e2:	230c      	movs	r3, #12
 80005e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005ec:	4619      	mov	r1, r3
 80005ee:	4820      	ldr	r0, [pc, #128]	; (8000670 <HAL_FMC_MspInit+0x220>)
 80005f0:	f002 fcea 	bl	8002fc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 80005f4:	f248 1310 	movw	r3, #33040	; 0x8110
 80005f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000602:	2301      	movs	r3, #1
 8000604:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800060e:	230c      	movs	r3, #12
 8000610:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000614:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000618:	4619      	mov	r1, r3
 800061a:	4813      	ldr	r0, [pc, #76]	; (8000668 <HAL_FMC_MspInit+0x218>)
 800061c:	f002 fcd4 	bl	8002fc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000620:	2303      	movs	r3, #3
 8000622:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062c:	2301      	movs	r3, #1
 800062e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000638:	230c      	movs	r3, #12
 800063a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800063e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000642:	4619      	mov	r1, r3
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <HAL_FMC_MspInit+0x21c>)
 8000646:	f002 fcbf 	bl	8002fc8 <HAL_GPIO_Init>
 800064a:	e000      	b.n	800064e <HAL_FMC_MspInit+0x1fe>
    return;
 800064c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800064e:	37d8      	adds	r7, #216	; 0xd8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	24000060 	.word	0x24000060
 8000658:	58024400 	.word	0x58024400
 800065c:	58021400 	.word	0x58021400
 8000660:	58020800 	.word	0x58020800
 8000664:	58020000 	.word	0x58020000
 8000668:	58021800 	.word	0x58021800
 800066c:	58021000 	.word	0x58021000
 8000670:	58020c00 	.word	0x58020c00

08000674 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800067c:	f7ff fee8 	bl	8000450 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069e:	4b40      	ldr	r3, [pc, #256]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a4:	4a3e      	ldr	r2, [pc, #248]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ae:	4b3c      	ldr	r3, [pc, #240]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b4:	f003 0310 	and.w	r3, r3, #16
 80006b8:	61bb      	str	r3, [r7, #24]
 80006ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006bc:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c2:	4a37      	ldr	r2, [pc, #220]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006c4:	f043 0320 	orr.w	r3, r3, #32
 80006c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006cc:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d2:	f003 0320 	and.w	r3, r3, #32
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e0:	4a2f      	ldr	r2, [pc, #188]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ea:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fe:	4a28      	ldr	r2, [pc, #160]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <MX_GPIO_Init+0x118>)
 800070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <MX_GPIO_Init+0x118>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <MX_GPIO_Init+0x118>)
 800073c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <MX_GPIO_Init+0x118>)
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	f003 0308 	and.w	r3, r3, #8
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2120      	movs	r1, #32
 8000774:	480b      	ldr	r0, [pc, #44]	; (80007a4 <MX_GPIO_Init+0x11c>)
 8000776:	f002 fdcf 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800077a:	2320      	movs	r3, #32
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000782:	2301      	movs	r3, #1
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0x11c>)
 8000792:	f002 fc19 	bl	8002fc8 <HAL_GPIO_Init>

}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	; 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	58024400 	.word	0x58024400
 80007a4:	58021800 	.word	0x58021800

080007a8 <IS42S16800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S16800J_ERROR;
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S16800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f832 	bl	8000828 <IS42S16800J_ClockEnable>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d128      	bne.n	800081c <IS42S16800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S16800J_Delay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 f8e2 	bl	8000994 <IS42S16800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S16800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f84a 	bl	8000870 <IS42S16800J_Precharge>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d11c      	bne.n	800081c <IS42S16800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S16800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S16800J_OK)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	6819      	ldr	r1, [r3, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	461a      	mov	r2, r3
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 f897 	bl	8000920 <IS42S16800J_RefreshMode>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d111      	bne.n	800081c <IS42S16800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S16800J_ModeRegConfig(Ctx, pRegMode) == IS42S16800J_OK)
 80007f8:	6839      	ldr	r1, [r7, #0]
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f000 f85c 	bl	80008b8 <IS42S16800J_ModeRegConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10a      	bne.n	800081c <IS42S16800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S16800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S16800J_OK)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	4619      	mov	r1, r3
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f8ad 	bl	800096c <IS42S16800J_RefreshRate>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <IS42S16800J_Init+0x74>
          {
            ret = IS42S16800J_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800081c:	68fb      	ldr	r3, [r7, #12]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <IS42S16800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_CLK_ENABLE_CMD;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <IS42S16800J_ClockEnable+0x44>)
 8000834:	2201      	movs	r2, #1
 8000836:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000838:	4a0c      	ldr	r2, [pc, #48]	; (800086c <IS42S16800J_ClockEnable+0x44>)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <IS42S16800J_ClockEnable+0x44>)
 8000840:	2201      	movs	r2, #1
 8000842:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <IS42S16800J_ClockEnable+0x44>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 800084a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084e:	4907      	ldr	r1, [pc, #28]	; (800086c <IS42S16800J_ClockEnable+0x44>)
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f006 fce1 	bl	8007218 <HAL_SDRAM_SendCommand>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <IS42S16800J_ClockEnable+0x3a>
  {
    return IS42S16800J_ERROR;
 800085c:	f04f 33ff 	mov.w	r3, #4294967295
 8000860:	e000      	b.n	8000864 <IS42S16800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 8000862:	2300      	movs	r3, #0
  }
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000064 	.word	0x24000064

08000870 <IS42S16800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_PALL_CMD;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <IS42S16800J_Precharge+0x44>)
 800087c:	2202      	movs	r2, #2
 800087e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <IS42S16800J_Precharge+0x44>)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <IS42S16800J_Precharge+0x44>)
 8000888:	2201      	movs	r2, #1
 800088a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <IS42S16800J_Precharge+0x44>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000896:	4907      	ldr	r1, [pc, #28]	; (80008b4 <IS42S16800J_Precharge+0x44>)
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f006 fcbd 	bl	8007218 <HAL_SDRAM_SendCommand>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d002      	beq.n	80008aa <IS42S16800J_Precharge+0x3a>
  {
    return IS42S16800J_ERROR;
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	e000      	b.n	80008ac <IS42S16800J_Precharge+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 80008aa:	2300      	movs	r3, #0
  }
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	24000064 	.word	0x24000064

080008b8 <IS42S16800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80008ca:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80008d0:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80008d6:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80008dc:	4313      	orrs	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S16800J_LOAD_MODE_CMD;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <IS42S16800J_ModeRegConfig+0x64>)
 80008e2:	2204      	movs	r2, #4
 80008e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a0c      	ldr	r2, [pc, #48]	; (800091c <IS42S16800J_ModeRegConfig+0x64>)
 80008ec:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <IS42S16800J_ModeRegConfig+0x64>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80008f4:	4a09      	ldr	r2, [pc, #36]	; (800091c <IS42S16800J_ModeRegConfig+0x64>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 80008fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008fe:	4907      	ldr	r1, [pc, #28]	; (800091c <IS42S16800J_ModeRegConfig+0x64>)
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f006 fc89 	bl	8007218 <HAL_SDRAM_SendCommand>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d002      	beq.n	8000912 <IS42S16800J_ModeRegConfig+0x5a>
  {
    return IS42S16800J_ERROR;
 800090c:	f04f 33ff 	mov.w	r3, #4294967295
 8000910:	e000      	b.n	8000914 <IS42S16800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S16800J_OK;
 8000912:	2300      	movs	r3, #0
  }
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	24000064 	.word	0x24000064

08000920 <IS42S16800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S16800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S16800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S16800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <IS42S16800J_RefreshMode+0x48>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000932:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <IS42S16800J_RefreshMode+0x48>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <IS42S16800J_RefreshMode+0x48>)
 800093a:	2208      	movs	r2, #8
 800093c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <IS42S16800J_RefreshMode+0x48>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000948:	4907      	ldr	r1, [pc, #28]	; (8000968 <IS42S16800J_RefreshMode+0x48>)
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	f006 fc64 	bl	8007218 <HAL_SDRAM_SendCommand>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d002      	beq.n	800095c <IS42S16800J_RefreshMode+0x3c>
  {
    return IS42S16800J_ERROR;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	e000      	b.n	800095e <IS42S16800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S16800J_OK;
 800095c:	2300      	movs	r3, #0
  }
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	24000064 	.word	0x24000064

0800096c <IS42S16800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S16800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000976:	6839      	ldr	r1, [r7, #0]
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f006 fc82 	bl	8007282 <HAL_SDRAM_ProgramRefreshRate>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <IS42S16800J_RefreshRate+0x1e>
  {
    return IS42S16800J_ERROR;
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
 8000988:	e000      	b.n	800098c <IS42S16800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S16800J_OK;
 800098a:	2300      	movs	r3, #0
  }
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <IS42S16800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval IS42S16800J_OK
  */
static int32_t IS42S16800J_Delay(uint32_t Delay)
{  
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800099c:	f000 fd16 	bl	80013cc <HAL_GetTick>
 80009a0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80009a2:	bf00      	nop
 80009a4:	f000 fd12 	bl	80013cc <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d8f7      	bhi.n	80009a4 <IS42S16800J_Delay+0x10>
  {
  }
  return IS42S16800J_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	; 0x30
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 fc7b 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f8af 	bl	8000b2c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009ce:	f000 f91b 	bl	8000c08 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d2:	f7ff fe59 	bl	8000688 <MX_GPIO_Init>
  MX_DMA_Init();
 80009d6:	f7ff fc99 	bl	800030c <MX_DMA_Init>
  MX_SAI1_Init();
 80009da:	f000 f94d 	bl	8000c78 <MX_SAI1_Init>
  MX_SPI1_Init();
 80009de:	f000 fa91 	bl	8000f04 <MX_SPI1_Init>
  MX_FMC_Init();
 80009e2:	f7ff fccb 	bl	800037c <MX_FMC_Init>
  while (1)
  {
	  uint32_t fmctestStart;
	  uint32_t fmctestStop;

	  fmctestStart = HAL_GetTick();
 80009e6:	f000 fcf1 	bl	80013cc <HAL_GetTick>
 80009ea:	60f8      	str	r0, [r7, #12]
	  uint32_t errorCounter =0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for(uint32_t i = 0; i<10000;i++){
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80009f4:	e078      	b.n	8000ae8 <main+0x128>

		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 80009f6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
 80009fc:	e06d      	b.n	8000ada <main+0x11a>
			  fmctestStart = HAL_GetTick();
 80009fe:	f000 fce5 	bl	80013cc <HAL_GetTick>
 8000a02:	60f8      	str	r0, [r7, #12]
			  uint8_t number_inc = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			  for(uint32_t counter = 0; counter<SDRAM_SIZE; counter++){
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
 8000a0e:	e00e      	b.n	8000a2e <main+0x6e>
				  *(__IO uint8_t*)(SDRAM_ADDRESS_START+6 + counter) = (uint8_t) number_inc;
 8000a10:	69fa      	ldr	r2, [r7, #28]
 8000a12:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <main+0x14c>)
 8000a14:	4413      	add	r3, r2
 8000a16:	461a      	mov	r2, r3
 8000a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a1c:	7013      	strb	r3, [r2, #0]
				  number_inc++;
 8000a1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a22:	3301      	adds	r3, #1
 8000a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			  for(uint32_t counter = 0; counter<SDRAM_SIZE; counter++){
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	61fb      	str	r3, [r7, #28]
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000a34:	d3ec      	bcc.n	8000a10 <main+0x50>
			  }
			  for(uint32_t counter = 1; counter<SDRAM_SIZE; counter=counter+2){
 8000a36:	2301      	movs	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
 8000a3a:	e00e      	b.n	8000a5a <main+0x9a>
				  *(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t) number_inc;
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000a42:	461a      	mov	r2, r3
 8000a44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a48:	7013      	strb	r3, [r2, #0]
				  number_inc++;
 8000a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a4e:	3301      	adds	r3, #1
 8000a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			  for(uint32_t counter = 1; counter<SDRAM_SIZE; counter=counter+2){
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	3302      	adds	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000a60:	d3ec      	bcc.n	8000a3c <main+0x7c>
			  }

			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	e007      	b.n	8000a78 <main+0xb8>
			 				  sdram_array[counter] = 0xDEADBEEF;
 8000a68:	4a29      	ldr	r2, [pc, #164]	; (8000b10 <main+0x150>)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	4929      	ldr	r1, [pc, #164]	; (8000b14 <main+0x154>)
 8000a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	2b13      	cmp	r3, #19
 8000a7c:	d9f4      	bls.n	8000a68 <main+0xa8>
			 			  }

			  sdram_byte = 0xFE;
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <main+0x158>)
 8000a80:	22fe      	movs	r2, #254	; 0xfe
 8000a82:	801a      	strh	r2, [r3, #0]
			  j=0x111111AA;
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <main+0x15c>)
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
			  sdram_array[0] = j;
 8000a88:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <main+0x150>)
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	6013      	str	r3, [r2, #0]

			  j=0x222222BB;
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <main+0x160>)
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
			  sdram_array[1] = j;
 8000a92:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <main+0x150>)
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	6053      	str	r3, [r2, #4]

			  j=0x333333CC;
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <main+0x164>)
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
			  sdram_array[2] = j;
 8000a9c:	4a1c      	ldr	r2, [pc, #112]	; (8000b10 <main+0x150>)
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	6093      	str	r3, [r2, #8]
//			  				  if(*(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) != j){
//			  					  errorCounter++;
//			  				  }


			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	e00c      	b.n	8000ac2 <main+0x102>
				  if( sdram_array[counter] != j){
 8000aa8:	4a19      	ldr	r2, [pc, #100]	; (8000b10 <main+0x150>)
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d002      	beq.n	8000abc <main+0xfc>
					  errorCounter++;
 8000ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab8:	3301      	adds	r3, #1
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	2b13      	cmp	r3, #19
 8000ac6:	d9ef      	bls.n	8000aa8 <main+0xe8>
				  }
			  }
			  fmctestStop = (HAL_GetTick()-fmctestStart);
 8000ac8:	f000 fc80 	bl	80013cc <HAL_GetTick>
 8000acc:	4602      	mov	r2, r0
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	607b      	str	r3, [r7, #4]
		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <main+0x168>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d98d      	bls.n	80009fe <main+0x3e>
	  for(uint32_t i = 0; i<10000;i++){
 8000ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aea:	f242 720f 	movw	r2, #9999	; 0x270f
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d981      	bls.n	80009f6 <main+0x36>
		  }

	  }

	  if(errorCounter){
 8000af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d000      	beq.n	8000afa <main+0x13a>
		  while(1){
 8000af8:	e7fe      	b.n	8000af8 <main+0x138>

		  }
	  }

	  uint8_t var = *(__IO uint8_t*)(SDRAM_ADDRESS_START);
 8000afa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	72fb      	strb	r3, [r7, #11]
	  HAL_Delay(50);
 8000b02:	2032      	movs	r0, #50	; 0x32
 8000b04:	f000 fc6e 	bl	80013e4 <HAL_Delay>
  {
 8000b08:	e76d      	b.n	80009e6 <main+0x26>
 8000b0a:	bf00      	nop
 8000b0c:	c0000006 	.word	0xc0000006
 8000b10:	c0000000 	.word	0xc0000000
 8000b14:	deadbeef 	.word	0xdeadbeef
 8000b18:	c0000050 	.word	0xc0000050
 8000b1c:	111111aa 	.word	0x111111aa
 8000b20:	222222bb 	.word	0x222222bb
 8000b24:	333333cc 	.word	0x333333cc
 8000b28:	000100c7 	.word	0x000100c7

08000b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b09c      	sub	sp, #112	; 0x70
 8000b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	224c      	movs	r2, #76	; 0x4c
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f006 fe0c 	bl	8007758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2220      	movs	r2, #32
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f006 fe06 	bl	8007758 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f002 fbfd 	bl	800334c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <SystemClock_Config+0xd8>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <SystemClock_Config+0xd8>)
 8000b5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b60:	6193      	str	r3, [r2, #24]
 8000b62:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <SystemClock_Config+0xd8>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b6e:	bf00      	nop
 8000b70:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <SystemClock_Config+0xd8>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b7c:	d1f8      	bne.n	8000b70 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b94:	232c      	movs	r3, #44	; 0x2c
 8000b96:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ba4:	230c      	movs	r3, #12
 8000ba6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f002 fc03 	bl	80033c0 <HAL_RCC_OscConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bc0:	f000 f855 	bl	8000c6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc4:	233f      	movs	r3, #63	; 0x3f
 8000bc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bd4:	2340      	movs	r3, #64	; 0x40
 8000bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bd8:	2340      	movs	r3, #64	; 0x40
 8000bda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000be2:	2340      	movs	r3, #64	; 0x40
 8000be4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2103      	movs	r1, #3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 ffc2 	bl	8003b74 <HAL_RCC_ClockConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000bf6:	f000 f83a 	bl	8000c6e <Error_Handler>
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3770      	adds	r7, #112	; 0x70
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	58024800 	.word	0x58024800

08000c08 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b0ae      	sub	sp, #184	; 0xb8
 8000c0c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0e:	463b      	mov	r3, r7
 8000c10:	22b8      	movs	r2, #184	; 0xb8
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f006 fd9f 	bl	8007758 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 8000c1a:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8000c1e:	f04f 0300 	mov.w	r3, #0
 8000c22:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000c3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 8000c44:	f640 3386 	movw	r3, #2950	; 0xb86
 8000c48:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000c4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c52:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4618      	mov	r0, r3
 8000c58:	f003 fb02 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8000c62:	f000 f804 	bl	8000c6e <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	37b8      	adds	r7, #184	; 0xb8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c72:	b672      	cpsid	i
}
 8000c74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <Error_Handler+0x8>

08000c78 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <MX_SAI1_Init+0xb0>)
 8000c7e:	4a2b      	ldr	r2, [pc, #172]	; (8000d2c <MX_SAI1_Init+0xb4>)
 8000c80:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c82:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <MX_SAI1_Init+0xb0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <MX_SAI1_Init+0xb0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <MX_SAI1_Init+0xb0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <MX_SAI1_Init+0xb0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <MX_SAI1_Init+0xb0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <MX_SAI1_Init+0xb0>)
 8000ca2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ca6:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_SAI1_Init+0xb0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <MX_SAI1_Init+0xb0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_SAI1_Init+0xb0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <MX_SAI1_Init+0xb0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4818      	ldr	r0, [pc, #96]	; (8000d28 <MX_SAI1_Init+0xb0>)
 8000cc8:	f005 feb0 	bl	8006a2c <HAL_SAI_InitProtocol>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000cd2:	f7ff ffcc 	bl	8000c6e <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <MX_SAI1_Init+0xb8>)
 8000cd8:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <MX_SAI1_Init+0xbc>)
 8000cda:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_SAI1_Init+0xb8>)
 8000cde:	2203      	movs	r2, #3
 8000ce0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_SAI1_Init+0xb8>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_SAI1_Init+0xb8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_SAI1_Init+0xb8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_SAI1_Init+0xb8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <MX_SAI1_Init+0xb8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_SAI1_Init+0xb8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <MX_SAI1_Init+0xb8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	2202      	movs	r2, #2
 8000d10:	2100      	movs	r1, #0
 8000d12:	4807      	ldr	r0, [pc, #28]	; (8000d30 <MX_SAI1_Init+0xb8>)
 8000d14:	f005 fe8a 	bl	8006a2c <HAL_SAI_InitProtocol>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000d1e:	f7ff ffa6 	bl	8000c6e <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	24000074 	.word	0x24000074
 8000d2c:	40015804 	.word	0x40015804
 8000d30:	2400010c 	.word	0x2400010c
 8000d34:	40015824 	.word	0x40015824

08000d38 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a66      	ldr	r2, [pc, #408]	; (8000ee0 <HAL_SAI_MspInit+0x1a8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d160      	bne.n	8000e0c <HAL_SAI_MspInit+0xd4>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8000d4a:	4b66      	ldr	r3, [pc, #408]	; (8000ee4 <HAL_SAI_MspInit+0x1ac>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10e      	bne.n	8000d70 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000d52:	4b65      	ldr	r3, [pc, #404]	; (8000ee8 <HAL_SAI_MspInit+0x1b0>)
 8000d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d58:	4a63      	ldr	r2, [pc, #396]	; (8000ee8 <HAL_SAI_MspInit+0x1b0>)
 8000d5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d62:	4b61      	ldr	r3, [pc, #388]	; (8000ee8 <HAL_SAI_MspInit+0x1b0>)
 8000d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8000d70:	4b5c      	ldr	r3, [pc, #368]	; (8000ee4 <HAL_SAI_MspInit+0x1ac>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a5b      	ldr	r2, [pc, #364]	; (8000ee4 <HAL_SAI_MspInit+0x1ac>)
 8000d78:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d7a:	2370      	movs	r3, #112	; 0x70
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000d8a:	2306      	movs	r3, #6
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4855      	ldr	r0, [pc, #340]	; (8000eec <HAL_SAI_MspInit+0x1b4>)
 8000d96:	f002 f917 	bl	8002fc8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8000d9a:	4b55      	ldr	r3, [pc, #340]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000d9c:	4a55      	ldr	r2, [pc, #340]	; (8000ef4 <HAL_SAI_MspInit+0x1bc>)
 8000d9e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8000da0:	4b53      	ldr	r3, [pc, #332]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000da2:	2257      	movs	r2, #87	; 0x57
 8000da4:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da6:	4b52      	ldr	r3, [pc, #328]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000da8:	2240      	movs	r2, #64	; 0x40
 8000daa:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dac:	4b50      	ldr	r3, [pc, #320]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8000db2:	4b4f      	ldr	r3, [pc, #316]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db8:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dba:	4b4d      	ldr	r3, [pc, #308]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000dbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dc0:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dc2:	4b4b      	ldr	r3, [pc, #300]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000dc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc8:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000dca:	4b49      	ldr	r3, [pc, #292]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd0:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dd2:	4b47      	ldr	r3, [pc, #284]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000dd4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dd8:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dda:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000de0:	4843      	ldr	r0, [pc, #268]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000de2:	f000 fc33 	bl	800164c <HAL_DMA_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000dec:	f7ff ff3f 	bl	8000c6e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a3f      	ldr	r2, [pc, #252]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000df8:	4a3d      	ldr	r2, [pc, #244]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a3b      	ldr	r2, [pc, #236]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000e06:	4a3a      	ldr	r2, [pc, #232]	; (8000ef0 <HAL_SAI_MspInit+0x1b8>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a39      	ldr	r2, [pc, #228]	; (8000ef8 <HAL_SAI_MspInit+0x1c0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d160      	bne.n	8000ed8 <HAL_SAI_MspInit+0x1a0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8000e16:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <HAL_SAI_MspInit+0x1ac>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10e      	bne.n	8000e3c <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000e1e:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <HAL_SAI_MspInit+0x1b0>)
 8000e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e24:	4a30      	ldr	r2, [pc, #192]	; (8000ee8 <HAL_SAI_MspInit+0x1b0>)
 8000e26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <HAL_SAI_MspInit+0x1b0>)
 8000e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8000e3c:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <HAL_SAI_MspInit+0x1ac>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a28      	ldr	r2, [pc, #160]	; (8000ee4 <HAL_SAI_MspInit+0x1ac>)
 8000e44:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e46:	2308      	movs	r3, #8
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000e56:	2306      	movs	r3, #6
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4822      	ldr	r0, [pc, #136]	; (8000eec <HAL_SAI_MspInit+0x1b4>)
 8000e62:	f002 f8b1 	bl	8002fc8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000e68:	4a25      	ldr	r2, [pc, #148]	; (8000f00 <HAL_SAI_MspInit+0x1c8>)
 8000e6a:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000e6e:	2258      	movs	r2, #88	; 0x58
 8000e70:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e72:	4b22      	ldr	r3, [pc, #136]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e84:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e8c:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000e90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e94:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000e98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e9c:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000ea0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ea4:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8000eac:	4813      	ldr	r0, [pc, #76]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000eae:	f000 fbcd 	bl	800164c <HAL_DMA_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 8000eb8:	f7ff fed9 	bl	8000c6e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_SAI_MspInit+0x1c4>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40015804 	.word	0x40015804
 8000ee4:	24000294 	.word	0x24000294
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	58021000 	.word	0x58021000
 8000ef0:	240001a4 	.word	0x240001a4
 8000ef4:	40020010 	.word	0x40020010
 8000ef8:	40015824 	.word	0x40015824
 8000efc:	2400021c 	.word	0x2400021c
 8000f00:	40020410 	.word	0x40020410

08000f04 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f0a:	4a28      	ldr	r2, [pc, #160]	; (8000fac <MX_SPI1_Init+0xa8>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f10:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f1e:	2207      	movs	r2, #7
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_SPI1_Init+0xa4>)
 8000f96:	f006 f99d 	bl	80072d4 <HAL_SPI_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000fa0:	f7ff fe65 	bl	8000c6e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	24000298 	.word	0x24000298
 8000fac:	40013000 	.word	0x40013000

08000fb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08c      	sub	sp, #48	; 0x30
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a3a      	ldr	r2, [pc, #232]	; (80010b8 <HAL_SPI_MspInit+0x108>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d16d      	bne.n	80010ae <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fd2:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <HAL_SPI_MspInit+0x10c>)
 8000fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fd8:	4a38      	ldr	r2, [pc, #224]	; (80010bc <HAL_SPI_MspInit+0x10c>)
 8000fda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fe2:	4b36      	ldr	r3, [pc, #216]	; (80010bc <HAL_SPI_MspInit+0x10c>)
 8000fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b32      	ldr	r3, [pc, #200]	; (80010bc <HAL_SPI_MspInit+0x10c>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff6:	4a31      	ldr	r2, [pc, #196]	; (80010bc <HAL_SPI_MspInit+0x10c>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <HAL_SPI_MspInit+0x10c>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800100e:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <HAL_SPI_MspInit+0x10c>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	4a29      	ldr	r2, [pc, #164]	; (80010bc <HAL_SPI_MspInit+0x10c>)
 8001016:	f043 0308 	orr.w	r3, r3, #8
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101e:	4b27      	ldr	r3, [pc, #156]	; (80010bc <HAL_SPI_MspInit+0x10c>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <HAL_SPI_MspInit+0x10c>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	4a22      	ldr	r2, [pc, #136]	; (80010bc <HAL_SPI_MspInit+0x10c>)
 8001034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <HAL_SPI_MspInit+0x10c>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 800104a:	f248 0340 	movw	r3, #32832	; 0x8040
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800105c:	2305      	movs	r3, #5
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4816      	ldr	r0, [pc, #88]	; (80010c0 <HAL_SPI_MspInit+0x110>)
 8001068:	f001 ffae 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800107c:	2305      	movs	r3, #5
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	480f      	ldr	r0, [pc, #60]	; (80010c4 <HAL_SPI_MspInit+0x114>)
 8001088:	f001 ff9e 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800108c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800109e:	2305      	movs	r3, #5
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	4807      	ldr	r0, [pc, #28]	; (80010c8 <HAL_SPI_MspInit+0x118>)
 80010aa:	f001 ff8d 	bl	8002fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010ae:	bf00      	nop
 80010b0:	3730      	adds	r7, #48	; 0x30
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40013000 	.word	0x40013000
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58020000 	.word	0x58020000
 80010c4:	58020c00 	.word	0x58020c00
 80010c8:	58021800 	.word	0x58021800

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_MspInit+0x30>)
 80010d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010d8:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x30>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x30>)
 80010e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	58024400 	.word	0x58024400

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001104:	e7fe      	b.n	8001104 <NMI_Handler+0x4>

08001106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler+0x4>

08001112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <UsageFault_Handler+0x4>

0800111e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114c:	f000 f92a 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <DMA1_Stream0_IRQHandler+0x10>)
 800115a:	f000 fdcf 	bl	8001cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	240001a4 	.word	0x240001a4

08001168 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <DMA2_Stream0_IRQHandler+0x10>)
 800116e:	f000 fdc5 	bl	8001cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2400021c 	.word	0x2400021c

0800117c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001180:	4b32      	ldr	r3, [pc, #200]	; (800124c <SystemInit+0xd0>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a31      	ldr	r2, [pc, #196]	; (800124c <SystemInit+0xd0>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <SystemInit+0xd4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	2b06      	cmp	r3, #6
 800119a:	d807      	bhi.n	80011ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800119c:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <SystemInit+0xd4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 030f 	bic.w	r3, r3, #15
 80011a4:	4a2a      	ldr	r2, [pc, #168]	; (8001250 <SystemInit+0xd4>)
 80011a6:	f043 0307 	orr.w	r3, r3, #7
 80011aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <SystemInit+0xd8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a28      	ldr	r2, [pc, #160]	; (8001254 <SystemInit+0xd8>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <SystemInit+0xd8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <SystemInit+0xd8>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4924      	ldr	r1, [pc, #144]	; (8001254 <SystemInit+0xd8>)
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <SystemInit+0xdc>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <SystemInit+0xd4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <SystemInit+0xd4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 030f 	bic.w	r3, r3, #15
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <SystemInit+0xd4>)
 80011e0:	f043 0307 	orr.w	r3, r3, #7
 80011e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <SystemInit+0xd8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <SystemInit+0xd8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <SystemInit+0xd8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <SystemInit+0xd8>)
 80011fa:	4a18      	ldr	r2, [pc, #96]	; (800125c <SystemInit+0xe0>)
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <SystemInit+0xd8>)
 8001200:	4a17      	ldr	r2, [pc, #92]	; (8001260 <SystemInit+0xe4>)
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <SystemInit+0xd8>)
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <SystemInit+0xe8>)
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <SystemInit+0xd8>)
 800120c:	2200      	movs	r2, #0
 800120e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <SystemInit+0xd8>)
 8001212:	4a14      	ldr	r2, [pc, #80]	; (8001264 <SystemInit+0xe8>)
 8001214:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <SystemInit+0xd8>)
 8001218:	2200      	movs	r2, #0
 800121a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <SystemInit+0xd8>)
 800121e:	4a11      	ldr	r2, [pc, #68]	; (8001264 <SystemInit+0xe8>)
 8001220:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <SystemInit+0xd8>)
 8001224:	2200      	movs	r2, #0
 8001226:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <SystemInit+0xd8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a09      	ldr	r2, [pc, #36]	; (8001254 <SystemInit+0xd8>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <SystemInit+0xd8>)
 8001236:	2200      	movs	r2, #0
 8001238:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <SystemInit+0xec>)
 800123c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001240:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00
 8001250:	52002000 	.word	0x52002000
 8001254:	58024400 	.word	0x58024400
 8001258:	eaf6ed7f 	.word	0xeaf6ed7f
 800125c:	02020200 	.word	0x02020200
 8001260:	01ff0000 	.word	0x01ff0000
 8001264:	01010280 	.word	0x01010280
 8001268:	52004000 	.word	0x52004000

0800126c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001270:	f7ff ff84 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	; (80012ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	; (80012b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129a:	f006 fa65 	bl	8007768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff fb8f 	bl	80009c0 <main>
  bx  lr
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80012a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012ac:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80012b0:	080077e8 	.word	0x080077e8
  ldr r2, =_sbss
 80012b4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80012b8:	24000324 	.word	0x24000324

080012bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC3_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c6:	2003      	movs	r0, #3
 80012c8:	f000 f980 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012cc:	f002 fe08 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 80012d0:	4602      	mov	r2, r0
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_Init+0x68>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	4913      	ldr	r1, [pc, #76]	; (800132c <HAL_Init+0x6c>)
 80012de:	5ccb      	ldrb	r3, [r1, r3]
 80012e0:	f003 031f 	and.w	r3, r3, #31
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
 80012e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_Init+0x68>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_Init+0x6c>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_Init+0x70>)
 8001302:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001304:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_Init+0x74>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130a:	200f      	movs	r0, #15
 800130c:	f000 f814 	bl	8001338 <HAL_InitTick>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e002      	b.n	8001320 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800131a:	f7ff fed7 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	58024400 	.word	0x58024400
 800132c:	080077c8 	.word	0x080077c8
 8001330:	24000004 	.word	0x24000004
 8001334:	24000000 	.word	0x24000000

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_InitTick+0x60>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e021      	b.n	8001390 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_InitTick+0x64>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_InitTick+0x60>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f965 	bl	8001632 <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 f92f 	bl	80015e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x68>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2400000c 	.word	0x2400000c
 800139c:	24000000 	.word	0x24000000
 80013a0:	24000008 	.word	0x24000008

080013a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	2400000c 	.word	0x2400000c
 80013c8:	24000320 	.word	0x24000320

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	24000320 	.word	0x24000320

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff ffee 	bl	80013cc <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_Delay+0x44>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffde 	bl	80013cc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2400000c 	.word	0x2400000c

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <__NVIC_SetPriorityGrouping+0x40>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	4313      	orrs	r3, r2
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <__NVIC_SetPriorityGrouping+0x40>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00
 8001470:	05fa0000 	.word	0x05fa0000

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0b      	blt.n	80014ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4907      	ldr	r1, [pc, #28]	; (80014c8 <__NVIC_EnableIRQ+0x38>)
 80014aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	2001      	movs	r0, #1
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	; (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	; (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f7ff ff8e 	bl	80014cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff29 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff40 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff90 	bl	8001520 <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5f 	bl	80014cc <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff33 	bl	8001490 <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffa4 	bl	8001588 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff feba 	bl	80013cc <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e312      	b.n	8001c8a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a66      	ldr	r2, [pc, #408]	; (8001804 <HAL_DMA_Init+0x1b8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d04a      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a65      	ldr	r2, [pc, #404]	; (8001808 <HAL_DMA_Init+0x1bc>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d045      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a63      	ldr	r2, [pc, #396]	; (800180c <HAL_DMA_Init+0x1c0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d040      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a62      	ldr	r2, [pc, #392]	; (8001810 <HAL_DMA_Init+0x1c4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d03b      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a60      	ldr	r2, [pc, #384]	; (8001814 <HAL_DMA_Init+0x1c8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d036      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a5f      	ldr	r2, [pc, #380]	; (8001818 <HAL_DMA_Init+0x1cc>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d031      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a5d      	ldr	r2, [pc, #372]	; (800181c <HAL_DMA_Init+0x1d0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d02c      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a5c      	ldr	r2, [pc, #368]	; (8001820 <HAL_DMA_Init+0x1d4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d027      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a5a      	ldr	r2, [pc, #360]	; (8001824 <HAL_DMA_Init+0x1d8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d022      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a59      	ldr	r2, [pc, #356]	; (8001828 <HAL_DMA_Init+0x1dc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d01d      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a57      	ldr	r2, [pc, #348]	; (800182c <HAL_DMA_Init+0x1e0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d018      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a56      	ldr	r2, [pc, #344]	; (8001830 <HAL_DMA_Init+0x1e4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d013      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a54      	ldr	r2, [pc, #336]	; (8001834 <HAL_DMA_Init+0x1e8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00e      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a53      	ldr	r2, [pc, #332]	; (8001838 <HAL_DMA_Init+0x1ec>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d009      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a51      	ldr	r2, [pc, #324]	; (800183c <HAL_DMA_Init+0x1f0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d004      	beq.n	8001704 <HAL_DMA_Init+0xb8>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a50      	ldr	r2, [pc, #320]	; (8001840 <HAL_DMA_Init+0x1f4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d101      	bne.n	8001708 <HAL_DMA_Init+0xbc>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_DMA_Init+0xbe>
 8001708:	2300      	movs	r3, #0
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 813c 	beq.w	8001988 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2202      	movs	r2, #2
 8001714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a37      	ldr	r2, [pc, #220]	; (8001804 <HAL_DMA_Init+0x1b8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d04a      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a36      	ldr	r2, [pc, #216]	; (8001808 <HAL_DMA_Init+0x1bc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d045      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a34      	ldr	r2, [pc, #208]	; (800180c <HAL_DMA_Init+0x1c0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d040      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a33      	ldr	r2, [pc, #204]	; (8001810 <HAL_DMA_Init+0x1c4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d03b      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a31      	ldr	r2, [pc, #196]	; (8001814 <HAL_DMA_Init+0x1c8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d036      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a30      	ldr	r2, [pc, #192]	; (8001818 <HAL_DMA_Init+0x1cc>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d031      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2e      	ldr	r2, [pc, #184]	; (800181c <HAL_DMA_Init+0x1d0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d02c      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a2d      	ldr	r2, [pc, #180]	; (8001820 <HAL_DMA_Init+0x1d4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d027      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2b      	ldr	r2, [pc, #172]	; (8001824 <HAL_DMA_Init+0x1d8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d022      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a2a      	ldr	r2, [pc, #168]	; (8001828 <HAL_DMA_Init+0x1dc>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d01d      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a28      	ldr	r2, [pc, #160]	; (800182c <HAL_DMA_Init+0x1e0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d018      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a27      	ldr	r2, [pc, #156]	; (8001830 <HAL_DMA_Init+0x1e4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d013      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a25      	ldr	r2, [pc, #148]	; (8001834 <HAL_DMA_Init+0x1e8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00e      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a24      	ldr	r2, [pc, #144]	; (8001838 <HAL_DMA_Init+0x1ec>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d009      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a22      	ldr	r2, [pc, #136]	; (800183c <HAL_DMA_Init+0x1f0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d004      	beq.n	80017c0 <HAL_DMA_Init+0x174>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a21      	ldr	r2, [pc, #132]	; (8001840 <HAL_DMA_Init+0x1f4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d108      	bne.n	80017d2 <HAL_DMA_Init+0x186>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	e007      	b.n	80017e2 <HAL_DMA_Init+0x196>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0201 	bic.w	r2, r2, #1
 80017e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80017e2:	e02f      	b.n	8001844 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017e4:	f7ff fdf2 	bl	80013cc <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d928      	bls.n	8001844 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2220      	movs	r2, #32
 80017f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2203      	movs	r2, #3
 80017fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e242      	b.n	8001c8a <HAL_DMA_Init+0x63e>
 8001804:	40020010 	.word	0x40020010
 8001808:	40020028 	.word	0x40020028
 800180c:	40020040 	.word	0x40020040
 8001810:	40020058 	.word	0x40020058
 8001814:	40020070 	.word	0x40020070
 8001818:	40020088 	.word	0x40020088
 800181c:	400200a0 	.word	0x400200a0
 8001820:	400200b8 	.word	0x400200b8
 8001824:	40020410 	.word	0x40020410
 8001828:	40020428 	.word	0x40020428
 800182c:	40020440 	.word	0x40020440
 8001830:	40020458 	.word	0x40020458
 8001834:	40020470 	.word	0x40020470
 8001838:	40020488 	.word	0x40020488
 800183c:	400204a0 	.word	0x400204a0
 8001840:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1c8      	bne.n	80017e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4b83      	ldr	r3, [pc, #524]	; (8001a6c <HAL_DMA_Init+0x420>)
 800185e:	4013      	ands	r3, r2
 8001860:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800186a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001876:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001882:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4313      	orrs	r3, r2
 800188e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	2b04      	cmp	r3, #4
 8001896:	d107      	bne.n	80018a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	4313      	orrs	r3, r2
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b28      	cmp	r3, #40	; 0x28
 80018ae:	d903      	bls.n	80018b8 <HAL_DMA_Init+0x26c>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b2e      	cmp	r3, #46	; 0x2e
 80018b6:	d91f      	bls.n	80018f8 <HAL_DMA_Init+0x2ac>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b3e      	cmp	r3, #62	; 0x3e
 80018be:	d903      	bls.n	80018c8 <HAL_DMA_Init+0x27c>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b42      	cmp	r3, #66	; 0x42
 80018c6:	d917      	bls.n	80018f8 <HAL_DMA_Init+0x2ac>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b46      	cmp	r3, #70	; 0x46
 80018ce:	d903      	bls.n	80018d8 <HAL_DMA_Init+0x28c>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b48      	cmp	r3, #72	; 0x48
 80018d6:	d90f      	bls.n	80018f8 <HAL_DMA_Init+0x2ac>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b4e      	cmp	r3, #78	; 0x4e
 80018de:	d903      	bls.n	80018e8 <HAL_DMA_Init+0x29c>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b52      	cmp	r3, #82	; 0x52
 80018e6:	d907      	bls.n	80018f8 <HAL_DMA_Init+0x2ac>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b73      	cmp	r3, #115	; 0x73
 80018ee:	d905      	bls.n	80018fc <HAL_DMA_Init+0x2b0>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b77      	cmp	r3, #119	; 0x77
 80018f6:	d801      	bhi.n	80018fc <HAL_DMA_Init+0x2b0>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_DMA_Init+0x2b2>
 80018fc:	2300      	movs	r3, #0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001908:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f023 0307 	bic.w	r3, r3, #7
 8001920:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4313      	orrs	r3, r2
 800192a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	2b04      	cmp	r3, #4
 8001932:	d117      	bne.n	8001964 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	4313      	orrs	r3, r2
 800193c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00e      	beq.n	8001964 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f001 f9b4 	bl	8002cb4 <DMA_CheckFifoParam>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d008      	beq.n	8001964 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2240      	movs	r2, #64	; 0x40
 8001956:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e192      	b.n	8001c8a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f001 f8ef 	bl	8002b50 <DMA_CalcBaseAndBitshift>
 8001972:	4603      	mov	r3, r0
 8001974:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	223f      	movs	r2, #63	; 0x3f
 8001980:	409a      	lsls	r2, r3
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	e0c8      	b.n	8001b1a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <HAL_DMA_Init+0x424>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d022      	beq.n	80019d8 <HAL_DMA_Init+0x38c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a37      	ldr	r2, [pc, #220]	; (8001a74 <HAL_DMA_Init+0x428>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d01d      	beq.n	80019d8 <HAL_DMA_Init+0x38c>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a35      	ldr	r2, [pc, #212]	; (8001a78 <HAL_DMA_Init+0x42c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d018      	beq.n	80019d8 <HAL_DMA_Init+0x38c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a34      	ldr	r2, [pc, #208]	; (8001a7c <HAL_DMA_Init+0x430>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d013      	beq.n	80019d8 <HAL_DMA_Init+0x38c>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a32      	ldr	r2, [pc, #200]	; (8001a80 <HAL_DMA_Init+0x434>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00e      	beq.n	80019d8 <HAL_DMA_Init+0x38c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a31      	ldr	r2, [pc, #196]	; (8001a84 <HAL_DMA_Init+0x438>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d009      	beq.n	80019d8 <HAL_DMA_Init+0x38c>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a2f      	ldr	r2, [pc, #188]	; (8001a88 <HAL_DMA_Init+0x43c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d004      	beq.n	80019d8 <HAL_DMA_Init+0x38c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a2e      	ldr	r2, [pc, #184]	; (8001a8c <HAL_DMA_Init+0x440>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_DMA_Init+0x390>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <HAL_DMA_Init+0x392>
 80019dc:	2300      	movs	r3, #0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8092 	beq.w	8001b08 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <HAL_DMA_Init+0x424>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d021      	beq.n	8001a32 <HAL_DMA_Init+0x3e6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <HAL_DMA_Init+0x428>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d01c      	beq.n	8001a32 <HAL_DMA_Init+0x3e6>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <HAL_DMA_Init+0x42c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d017      	beq.n	8001a32 <HAL_DMA_Init+0x3e6>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <HAL_DMA_Init+0x430>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d012      	beq.n	8001a32 <HAL_DMA_Init+0x3e6>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <HAL_DMA_Init+0x434>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00d      	beq.n	8001a32 <HAL_DMA_Init+0x3e6>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1a      	ldr	r2, [pc, #104]	; (8001a84 <HAL_DMA_Init+0x438>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d008      	beq.n	8001a32 <HAL_DMA_Init+0x3e6>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a18      	ldr	r2, [pc, #96]	; (8001a88 <HAL_DMA_Init+0x43c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d003      	beq.n	8001a32 <HAL_DMA_Init+0x3e6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <HAL_DMA_Init+0x440>)
 8001a30:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2202      	movs	r2, #2
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_DMA_Init+0x444>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b40      	cmp	r3, #64	; 0x40
 8001a58:	d01c      	beq.n	8001a94 <HAL_DMA_Init+0x448>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b80      	cmp	r3, #128	; 0x80
 8001a60:	d102      	bne.n	8001a68 <HAL_DMA_Init+0x41c>
 8001a62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a66:	e016      	b.n	8001a96 <HAL_DMA_Init+0x44a>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e014      	b.n	8001a96 <HAL_DMA_Init+0x44a>
 8001a6c:	fe10803f 	.word	0xfe10803f
 8001a70:	58025408 	.word	0x58025408
 8001a74:	5802541c 	.word	0x5802541c
 8001a78:	58025430 	.word	0x58025430
 8001a7c:	58025444 	.word	0x58025444
 8001a80:	58025458 	.word	0x58025458
 8001a84:	5802546c 	.word	0x5802546c
 8001a88:	58025480 	.word	0x58025480
 8001a8c:	58025494 	.word	0x58025494
 8001a90:	fffe000f 	.word	0xfffe000f
 8001a94:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68d2      	ldr	r2, [r2, #12]
 8001a9a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001aa4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001aac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ab4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001abc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ac4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b6e      	ldr	r3, [pc, #440]	; (8001c94 <HAL_DMA_Init+0x648>)
 8001adc:	4413      	add	r3, r2
 8001ade:	4a6e      	ldr	r2, [pc, #440]	; (8001c98 <HAL_DMA_Init+0x64c>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	009a      	lsls	r2, r3, #2
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f001 f82f 	bl	8002b50 <DMA_CalcBaseAndBitshift>
 8001af2:	4603      	mov	r3, r0
 8001af4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	2201      	movs	r2, #1
 8001b00:	409a      	lsls	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	e008      	b.n	8001b1a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2203      	movs	r2, #3
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0b7      	b.n	8001c8a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a5f      	ldr	r2, [pc, #380]	; (8001c9c <HAL_DMA_Init+0x650>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d072      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a5d      	ldr	r2, [pc, #372]	; (8001ca0 <HAL_DMA_Init+0x654>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d06d      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a5c      	ldr	r2, [pc, #368]	; (8001ca4 <HAL_DMA_Init+0x658>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d068      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a5a      	ldr	r2, [pc, #360]	; (8001ca8 <HAL_DMA_Init+0x65c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d063      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a59      	ldr	r2, [pc, #356]	; (8001cac <HAL_DMA_Init+0x660>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d05e      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a57      	ldr	r2, [pc, #348]	; (8001cb0 <HAL_DMA_Init+0x664>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d059      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a56      	ldr	r2, [pc, #344]	; (8001cb4 <HAL_DMA_Init+0x668>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d054      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a54      	ldr	r2, [pc, #336]	; (8001cb8 <HAL_DMA_Init+0x66c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d04f      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a53      	ldr	r2, [pc, #332]	; (8001cbc <HAL_DMA_Init+0x670>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d04a      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <HAL_DMA_Init+0x674>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d045      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <HAL_DMA_Init+0x678>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d040      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a4e      	ldr	r2, [pc, #312]	; (8001cc8 <HAL_DMA_Init+0x67c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d03b      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a4d      	ldr	r2, [pc, #308]	; (8001ccc <HAL_DMA_Init+0x680>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d036      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a4b      	ldr	r2, [pc, #300]	; (8001cd0 <HAL_DMA_Init+0x684>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d031      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a4a      	ldr	r2, [pc, #296]	; (8001cd4 <HAL_DMA_Init+0x688>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d02c      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a48      	ldr	r2, [pc, #288]	; (8001cd8 <HAL_DMA_Init+0x68c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d027      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a47      	ldr	r2, [pc, #284]	; (8001cdc <HAL_DMA_Init+0x690>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d022      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a45      	ldr	r2, [pc, #276]	; (8001ce0 <HAL_DMA_Init+0x694>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d01d      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a44      	ldr	r2, [pc, #272]	; (8001ce4 <HAL_DMA_Init+0x698>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d018      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a42      	ldr	r2, [pc, #264]	; (8001ce8 <HAL_DMA_Init+0x69c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a41      	ldr	r2, [pc, #260]	; (8001cec <HAL_DMA_Init+0x6a0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00e      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a3f      	ldr	r2, [pc, #252]	; (8001cf0 <HAL_DMA_Init+0x6a4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d009      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a3e      	ldr	r2, [pc, #248]	; (8001cf4 <HAL_DMA_Init+0x6a8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d004      	beq.n	8001c0a <HAL_DMA_Init+0x5be>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a3c      	ldr	r2, [pc, #240]	; (8001cf8 <HAL_DMA_Init+0x6ac>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_DMA_Init+0x5c2>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_DMA_Init+0x5c4>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d032      	beq.n	8001c7a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f001 f8c9 	bl	8002dac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b80      	cmp	r3, #128	; 0x80
 8001c20:	d102      	bne.n	8001c28 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c3c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d010      	beq.n	8001c68 <HAL_DMA_Init+0x61c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d80c      	bhi.n	8001c68 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f001 f946 	bl	8002ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	e008      	b.n	8001c7a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	a7fdabf8 	.word	0xa7fdabf8
 8001c98:	cccccccd 	.word	0xcccccccd
 8001c9c:	40020010 	.word	0x40020010
 8001ca0:	40020028 	.word	0x40020028
 8001ca4:	40020040 	.word	0x40020040
 8001ca8:	40020058 	.word	0x40020058
 8001cac:	40020070 	.word	0x40020070
 8001cb0:	40020088 	.word	0x40020088
 8001cb4:	400200a0 	.word	0x400200a0
 8001cb8:	400200b8 	.word	0x400200b8
 8001cbc:	40020410 	.word	0x40020410
 8001cc0:	40020428 	.word	0x40020428
 8001cc4:	40020440 	.word	0x40020440
 8001cc8:	40020458 	.word	0x40020458
 8001ccc:	40020470 	.word	0x40020470
 8001cd0:	40020488 	.word	0x40020488
 8001cd4:	400204a0 	.word	0x400204a0
 8001cd8:	400204b8 	.word	0x400204b8
 8001cdc:	58025408 	.word	0x58025408
 8001ce0:	5802541c 	.word	0x5802541c
 8001ce4:	58025430 	.word	0x58025430
 8001ce8:	58025444 	.word	0x58025444
 8001cec:	58025458 	.word	0x58025458
 8001cf0:	5802546c 	.word	0x5802546c
 8001cf4:	58025480 	.word	0x58025480
 8001cf8:	58025494 	.word	0x58025494

08001cfc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d08:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <HAL_DMA_IRQHandler+0x1ac>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a67      	ldr	r2, [pc, #412]	; (8001eac <HAL_DMA_IRQHandler+0x1b0>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	0a9b      	lsrs	r3, r3, #10
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a5f      	ldr	r2, [pc, #380]	; (8001eb0 <HAL_DMA_IRQHandler+0x1b4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d04a      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a5d      	ldr	r2, [pc, #372]	; (8001eb4 <HAL_DMA_IRQHandler+0x1b8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d045      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a5c      	ldr	r2, [pc, #368]	; (8001eb8 <HAL_DMA_IRQHandler+0x1bc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d040      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a5a      	ldr	r2, [pc, #360]	; (8001ebc <HAL_DMA_IRQHandler+0x1c0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d03b      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a59      	ldr	r2, [pc, #356]	; (8001ec0 <HAL_DMA_IRQHandler+0x1c4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d036      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a57      	ldr	r2, [pc, #348]	; (8001ec4 <HAL_DMA_IRQHandler+0x1c8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d031      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a56      	ldr	r2, [pc, #344]	; (8001ec8 <HAL_DMA_IRQHandler+0x1cc>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d02c      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a54      	ldr	r2, [pc, #336]	; (8001ecc <HAL_DMA_IRQHandler+0x1d0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d027      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a53      	ldr	r2, [pc, #332]	; (8001ed0 <HAL_DMA_IRQHandler+0x1d4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d022      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a51      	ldr	r2, [pc, #324]	; (8001ed4 <HAL_DMA_IRQHandler+0x1d8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01d      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a50      	ldr	r2, [pc, #320]	; (8001ed8 <HAL_DMA_IRQHandler+0x1dc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d018      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a4e      	ldr	r2, [pc, #312]	; (8001edc <HAL_DMA_IRQHandler+0x1e0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a4d      	ldr	r2, [pc, #308]	; (8001ee0 <HAL_DMA_IRQHandler+0x1e4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00e      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a4b      	ldr	r2, [pc, #300]	; (8001ee4 <HAL_DMA_IRQHandler+0x1e8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d009      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a4a      	ldr	r2, [pc, #296]	; (8001ee8 <HAL_DMA_IRQHandler+0x1ec>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d004      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd2>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a48      	ldr	r2, [pc, #288]	; (8001eec <HAL_DMA_IRQHandler+0x1f0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_DMA_IRQHandler+0xd6>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_DMA_IRQHandler+0xd8>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 842b 	beq.w	8002630 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2208      	movs	r2, #8
 8001de4:	409a      	lsls	r2, r3
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80a2 	beq.w	8001f34 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a2e      	ldr	r2, [pc, #184]	; (8001eb0 <HAL_DMA_IRQHandler+0x1b4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d04a      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a2d      	ldr	r2, [pc, #180]	; (8001eb4 <HAL_DMA_IRQHandler+0x1b8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d045      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2b      	ldr	r2, [pc, #172]	; (8001eb8 <HAL_DMA_IRQHandler+0x1bc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d040      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a2a      	ldr	r2, [pc, #168]	; (8001ebc <HAL_DMA_IRQHandler+0x1c0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d03b      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a28      	ldr	r2, [pc, #160]	; (8001ec0 <HAL_DMA_IRQHandler+0x1c4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d036      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <HAL_DMA_IRQHandler+0x1c8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d031      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a25      	ldr	r2, [pc, #148]	; (8001ec8 <HAL_DMA_IRQHandler+0x1cc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d02c      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <HAL_DMA_IRQHandler+0x1d0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d027      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a22      	ldr	r2, [pc, #136]	; (8001ed0 <HAL_DMA_IRQHandler+0x1d4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d022      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <HAL_DMA_IRQHandler+0x1d8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d01d      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_DMA_IRQHandler+0x1dc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d018      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <HAL_DMA_IRQHandler+0x1e0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_DMA_IRQHandler+0x1e4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00e      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_DMA_IRQHandler+0x1e8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_DMA_IRQHandler+0x1ec>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x194>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <HAL_DMA_IRQHandler+0x1f0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d12f      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x1f4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf14      	ite	ne
 8001e9e:	2301      	movne	r3, #1
 8001ea0:	2300      	moveq	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	e02e      	b.n	8001f04 <HAL_DMA_IRQHandler+0x208>
 8001ea6:	bf00      	nop
 8001ea8:	24000000 	.word	0x24000000
 8001eac:	1b4e81b5 	.word	0x1b4e81b5
 8001eb0:	40020010 	.word	0x40020010
 8001eb4:	40020028 	.word	0x40020028
 8001eb8:	40020040 	.word	0x40020040
 8001ebc:	40020058 	.word	0x40020058
 8001ec0:	40020070 	.word	0x40020070
 8001ec4:	40020088 	.word	0x40020088
 8001ec8:	400200a0 	.word	0x400200a0
 8001ecc:	400200b8 	.word	0x400200b8
 8001ed0:	40020410 	.word	0x40020410
 8001ed4:	40020428 	.word	0x40020428
 8001ed8:	40020440 	.word	0x40020440
 8001edc:	40020458 	.word	0x40020458
 8001ee0:	40020470 	.word	0x40020470
 8001ee4:	40020488 	.word	0x40020488
 8001ee8:	400204a0 	.word	0x400204a0
 8001eec:	400204b8 	.word	0x400204b8
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	bf14      	ite	ne
 8001efe:	2301      	movne	r3, #1
 8001f00:	2300      	moveq	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d015      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0204 	bic.w	r2, r2, #4
 8001f16:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	2208      	movs	r2, #8
 8001f22:	409a      	lsls	r2, r3
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d06e      	beq.n	8002028 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a69      	ldr	r2, [pc, #420]	; (80020f4 <HAL_DMA_IRQHandler+0x3f8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d04a      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a67      	ldr	r2, [pc, #412]	; (80020f8 <HAL_DMA_IRQHandler+0x3fc>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d045      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a66      	ldr	r2, [pc, #408]	; (80020fc <HAL_DMA_IRQHandler+0x400>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d040      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a64      	ldr	r2, [pc, #400]	; (8002100 <HAL_DMA_IRQHandler+0x404>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d03b      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a63      	ldr	r2, [pc, #396]	; (8002104 <HAL_DMA_IRQHandler+0x408>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d036      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a61      	ldr	r2, [pc, #388]	; (8002108 <HAL_DMA_IRQHandler+0x40c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d031      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a60      	ldr	r2, [pc, #384]	; (800210c <HAL_DMA_IRQHandler+0x410>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d02c      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a5e      	ldr	r2, [pc, #376]	; (8002110 <HAL_DMA_IRQHandler+0x414>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d027      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a5d      	ldr	r2, [pc, #372]	; (8002114 <HAL_DMA_IRQHandler+0x418>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d022      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a5b      	ldr	r2, [pc, #364]	; (8002118 <HAL_DMA_IRQHandler+0x41c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01d      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a5a      	ldr	r2, [pc, #360]	; (800211c <HAL_DMA_IRQHandler+0x420>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d018      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a58      	ldr	r2, [pc, #352]	; (8002120 <HAL_DMA_IRQHandler+0x424>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a57      	ldr	r2, [pc, #348]	; (8002124 <HAL_DMA_IRQHandler+0x428>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00e      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a55      	ldr	r2, [pc, #340]	; (8002128 <HAL_DMA_IRQHandler+0x42c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d009      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a54      	ldr	r2, [pc, #336]	; (800212c <HAL_DMA_IRQHandler+0x430>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d004      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2ee>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	; (8002130 <HAL_DMA_IRQHandler+0x434>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10a      	bne.n	8002000 <HAL_DMA_IRQHandler+0x304>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf14      	ite	ne
 8001ff8:	2301      	movne	r3, #1
 8001ffa:	2300      	moveq	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e003      	b.n	8002008 <HAL_DMA_IRQHandler+0x30c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2300      	movs	r3, #0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00d      	beq.n	8002028 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	2201      	movs	r2, #1
 8002016:	409a      	lsls	r2, r3
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	f043 0202 	orr.w	r2, r3, #2
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2204      	movs	r2, #4
 8002032:	409a      	lsls	r2, r3
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 808f 	beq.w	800215c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2c      	ldr	r2, [pc, #176]	; (80020f4 <HAL_DMA_IRQHandler+0x3f8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d04a      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a2a      	ldr	r2, [pc, #168]	; (80020f8 <HAL_DMA_IRQHandler+0x3fc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d045      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a29      	ldr	r2, [pc, #164]	; (80020fc <HAL_DMA_IRQHandler+0x400>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d040      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a27      	ldr	r2, [pc, #156]	; (8002100 <HAL_DMA_IRQHandler+0x404>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d03b      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a26      	ldr	r2, [pc, #152]	; (8002104 <HAL_DMA_IRQHandler+0x408>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d036      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a24      	ldr	r2, [pc, #144]	; (8002108 <HAL_DMA_IRQHandler+0x40c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d031      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a23      	ldr	r2, [pc, #140]	; (800210c <HAL_DMA_IRQHandler+0x410>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d02c      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a21      	ldr	r2, [pc, #132]	; (8002110 <HAL_DMA_IRQHandler+0x414>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d027      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a20      	ldr	r2, [pc, #128]	; (8002114 <HAL_DMA_IRQHandler+0x418>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d022      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_DMA_IRQHandler+0x41c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01d      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1d      	ldr	r2, [pc, #116]	; (800211c <HAL_DMA_IRQHandler+0x420>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d018      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <HAL_DMA_IRQHandler+0x424>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1a      	ldr	r2, [pc, #104]	; (8002124 <HAL_DMA_IRQHandler+0x428>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00e      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a18      	ldr	r2, [pc, #96]	; (8002128 <HAL_DMA_IRQHandler+0x42c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d009      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_DMA_IRQHandler+0x430>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d004      	beq.n	80020de <HAL_DMA_IRQHandler+0x3e2>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a15      	ldr	r2, [pc, #84]	; (8002130 <HAL_DMA_IRQHandler+0x434>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d12a      	bne.n	8002134 <HAL_DMA_IRQHandler+0x438>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf14      	ite	ne
 80020ec:	2301      	movne	r3, #1
 80020ee:	2300      	moveq	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e023      	b.n	800213c <HAL_DMA_IRQHandler+0x440>
 80020f4:	40020010 	.word	0x40020010
 80020f8:	40020028 	.word	0x40020028
 80020fc:	40020040 	.word	0x40020040
 8002100:	40020058 	.word	0x40020058
 8002104:	40020070 	.word	0x40020070
 8002108:	40020088 	.word	0x40020088
 800210c:	400200a0 	.word	0x400200a0
 8002110:	400200b8 	.word	0x400200b8
 8002114:	40020410 	.word	0x40020410
 8002118:	40020428 	.word	0x40020428
 800211c:	40020440 	.word	0x40020440
 8002120:	40020458 	.word	0x40020458
 8002124:	40020470 	.word	0x40020470
 8002128:	40020488 	.word	0x40020488
 800212c:	400204a0 	.word	0x400204a0
 8002130:	400204b8 	.word	0x400204b8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2300      	movs	r3, #0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00d      	beq.n	800215c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	2204      	movs	r2, #4
 800214a:	409a      	lsls	r2, r3
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002154:	f043 0204 	orr.w	r2, r3, #4
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2210      	movs	r2, #16
 8002166:	409a      	lsls	r2, r3
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a6 	beq.w	80022be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a85      	ldr	r2, [pc, #532]	; (800238c <HAL_DMA_IRQHandler+0x690>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d04a      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a83      	ldr	r2, [pc, #524]	; (8002390 <HAL_DMA_IRQHandler+0x694>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d045      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a82      	ldr	r2, [pc, #520]	; (8002394 <HAL_DMA_IRQHandler+0x698>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d040      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a80      	ldr	r2, [pc, #512]	; (8002398 <HAL_DMA_IRQHandler+0x69c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d03b      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7f      	ldr	r2, [pc, #508]	; (800239c <HAL_DMA_IRQHandler+0x6a0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d036      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a7d      	ldr	r2, [pc, #500]	; (80023a0 <HAL_DMA_IRQHandler+0x6a4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d031      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a7c      	ldr	r2, [pc, #496]	; (80023a4 <HAL_DMA_IRQHandler+0x6a8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d02c      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a7a      	ldr	r2, [pc, #488]	; (80023a8 <HAL_DMA_IRQHandler+0x6ac>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d027      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a79      	ldr	r2, [pc, #484]	; (80023ac <HAL_DMA_IRQHandler+0x6b0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d022      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a77      	ldr	r2, [pc, #476]	; (80023b0 <HAL_DMA_IRQHandler+0x6b4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01d      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a76      	ldr	r2, [pc, #472]	; (80023b4 <HAL_DMA_IRQHandler+0x6b8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d018      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a74      	ldr	r2, [pc, #464]	; (80023b8 <HAL_DMA_IRQHandler+0x6bc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a73      	ldr	r2, [pc, #460]	; (80023bc <HAL_DMA_IRQHandler+0x6c0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00e      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a71      	ldr	r2, [pc, #452]	; (80023c0 <HAL_DMA_IRQHandler+0x6c4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a70      	ldr	r2, [pc, #448]	; (80023c4 <HAL_DMA_IRQHandler+0x6c8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_IRQHandler+0x516>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a6e      	ldr	r2, [pc, #440]	; (80023c8 <HAL_DMA_IRQHandler+0x6cc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d10a      	bne.n	8002228 <HAL_DMA_IRQHandler+0x52c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	e009      	b.n	800223c <HAL_DMA_IRQHandler+0x540>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf14      	ite	ne
 8002236:	2301      	movne	r3, #1
 8002238:	2300      	moveq	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d03e      	beq.n	80022be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	2210      	movs	r2, #16
 800224a:	409a      	lsls	r2, r3
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d018      	beq.n	8002290 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d108      	bne.n	800227e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	d024      	beq.n	80022be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
 800227c:	e01f      	b.n	80022be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01b      	beq.n	80022be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
 800228e:	e016      	b.n	80022be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d107      	bne.n	80022ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0208 	bic.w	r2, r2, #8
 80022ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	2220      	movs	r2, #32
 80022c8:	409a      	lsls	r2, r3
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8110 	beq.w	80024f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a2c      	ldr	r2, [pc, #176]	; (800238c <HAL_DMA_IRQHandler+0x690>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d04a      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2b      	ldr	r2, [pc, #172]	; (8002390 <HAL_DMA_IRQHandler+0x694>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d045      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a29      	ldr	r2, [pc, #164]	; (8002394 <HAL_DMA_IRQHandler+0x698>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d040      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a28      	ldr	r2, [pc, #160]	; (8002398 <HAL_DMA_IRQHandler+0x69c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d03b      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a26      	ldr	r2, [pc, #152]	; (800239c <HAL_DMA_IRQHandler+0x6a0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d036      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a25      	ldr	r2, [pc, #148]	; (80023a0 <HAL_DMA_IRQHandler+0x6a4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d031      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <HAL_DMA_IRQHandler+0x6a8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d02c      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a22      	ldr	r2, [pc, #136]	; (80023a8 <HAL_DMA_IRQHandler+0x6ac>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d027      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a20      	ldr	r2, [pc, #128]	; (80023ac <HAL_DMA_IRQHandler+0x6b0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d022      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <HAL_DMA_IRQHandler+0x6b4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d01d      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_DMA_IRQHandler+0x6b8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d018      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_DMA_IRQHandler+0x6bc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d013      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <HAL_DMA_IRQHandler+0x6c0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00e      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <HAL_DMA_IRQHandler+0x6c4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d009      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <HAL_DMA_IRQHandler+0x6c8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d004      	beq.n	8002374 <HAL_DMA_IRQHandler+0x678>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <HAL_DMA_IRQHandler+0x6cc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d12b      	bne.n	80023cc <HAL_DMA_IRQHandler+0x6d0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	bf14      	ite	ne
 8002382:	2301      	movne	r3, #1
 8002384:	2300      	moveq	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	e02a      	b.n	80023e0 <HAL_DMA_IRQHandler+0x6e4>
 800238a:	bf00      	nop
 800238c:	40020010 	.word	0x40020010
 8002390:	40020028 	.word	0x40020028
 8002394:	40020040 	.word	0x40020040
 8002398:	40020058 	.word	0x40020058
 800239c:	40020070 	.word	0x40020070
 80023a0:	40020088 	.word	0x40020088
 80023a4:	400200a0 	.word	0x400200a0
 80023a8:	400200b8 	.word	0x400200b8
 80023ac:	40020410 	.word	0x40020410
 80023b0:	40020428 	.word	0x40020428
 80023b4:	40020440 	.word	0x40020440
 80023b8:	40020458 	.word	0x40020458
 80023bc:	40020470 	.word	0x40020470
 80023c0:	40020488 	.word	0x40020488
 80023c4:	400204a0 	.word	0x400204a0
 80023c8:	400204b8 	.word	0x400204b8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bf14      	ite	ne
 80023da:	2301      	movne	r3, #1
 80023dc:	2300      	moveq	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8087 	beq.w	80024f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2220      	movs	r2, #32
 80023f0:	409a      	lsls	r2, r3
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d139      	bne.n	8002476 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0216 	bic.w	r2, r2, #22
 8002410:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002420:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <HAL_DMA_IRQHandler+0x736>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0208 	bic.w	r2, r2, #8
 8002440:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	223f      	movs	r2, #63	; 0x3f
 800244c:	409a      	lsls	r2, r3
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 834a 	beq.w	8002b00 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
          }
          return;
 8002474:	e344      	b.n	8002b00 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d018      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	2b00      	cmp	r3, #0
 8002498:	d02c      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	4798      	blx	r3
 80024a2:	e027      	b.n	80024f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d023      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	4798      	blx	r3
 80024b4:	e01e      	b.n	80024f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10f      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0210 	bic.w	r2, r2, #16
 80024d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8306 	beq.w	8002b0a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8088 	beq.w	800261c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2204      	movs	r2, #4
 8002510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a7a      	ldr	r2, [pc, #488]	; (8002704 <HAL_DMA_IRQHandler+0xa08>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d04a      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a79      	ldr	r2, [pc, #484]	; (8002708 <HAL_DMA_IRQHandler+0xa0c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d045      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a77      	ldr	r2, [pc, #476]	; (800270c <HAL_DMA_IRQHandler+0xa10>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d040      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a76      	ldr	r2, [pc, #472]	; (8002710 <HAL_DMA_IRQHandler+0xa14>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d03b      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a74      	ldr	r2, [pc, #464]	; (8002714 <HAL_DMA_IRQHandler+0xa18>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d036      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a73      	ldr	r2, [pc, #460]	; (8002718 <HAL_DMA_IRQHandler+0xa1c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d031      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a71      	ldr	r2, [pc, #452]	; (800271c <HAL_DMA_IRQHandler+0xa20>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d02c      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a70      	ldr	r2, [pc, #448]	; (8002720 <HAL_DMA_IRQHandler+0xa24>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d027      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a6e      	ldr	r2, [pc, #440]	; (8002724 <HAL_DMA_IRQHandler+0xa28>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d022      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a6d      	ldr	r2, [pc, #436]	; (8002728 <HAL_DMA_IRQHandler+0xa2c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d01d      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6b      	ldr	r2, [pc, #428]	; (800272c <HAL_DMA_IRQHandler+0xa30>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d018      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6a      	ldr	r2, [pc, #424]	; (8002730 <HAL_DMA_IRQHandler+0xa34>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d013      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a68      	ldr	r2, [pc, #416]	; (8002734 <HAL_DMA_IRQHandler+0xa38>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00e      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a67      	ldr	r2, [pc, #412]	; (8002738 <HAL_DMA_IRQHandler+0xa3c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d009      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a65      	ldr	r2, [pc, #404]	; (800273c <HAL_DMA_IRQHandler+0xa40>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d004      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x8b8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a64      	ldr	r2, [pc, #400]	; (8002740 <HAL_DMA_IRQHandler+0xa44>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d108      	bne.n	80025c6 <HAL_DMA_IRQHandler+0x8ca>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e007      	b.n	80025d6 <HAL_DMA_IRQHandler+0x8da>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0201 	bic.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3301      	adds	r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	429a      	cmp	r2, r3
 80025e0:	d307      	bcc.n	80025f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f2      	bne.n	80025d6 <HAL_DMA_IRQHandler+0x8da>
 80025f0:	e000      	b.n	80025f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80025f2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2203      	movs	r2, #3
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800260a:	e003      	b.n	8002614 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8272 	beq.w	8002b0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
 800262e:	e26c      	b.n	8002b0a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a43      	ldr	r2, [pc, #268]	; (8002744 <HAL_DMA_IRQHandler+0xa48>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d022      	beq.n	8002680 <HAL_DMA_IRQHandler+0x984>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a42      	ldr	r2, [pc, #264]	; (8002748 <HAL_DMA_IRQHandler+0xa4c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d01d      	beq.n	8002680 <HAL_DMA_IRQHandler+0x984>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a40      	ldr	r2, [pc, #256]	; (800274c <HAL_DMA_IRQHandler+0xa50>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d018      	beq.n	8002680 <HAL_DMA_IRQHandler+0x984>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a3f      	ldr	r2, [pc, #252]	; (8002750 <HAL_DMA_IRQHandler+0xa54>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d013      	beq.n	8002680 <HAL_DMA_IRQHandler+0x984>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a3d      	ldr	r2, [pc, #244]	; (8002754 <HAL_DMA_IRQHandler+0xa58>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00e      	beq.n	8002680 <HAL_DMA_IRQHandler+0x984>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a3c      	ldr	r2, [pc, #240]	; (8002758 <HAL_DMA_IRQHandler+0xa5c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d009      	beq.n	8002680 <HAL_DMA_IRQHandler+0x984>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a3a      	ldr	r2, [pc, #232]	; (800275c <HAL_DMA_IRQHandler+0xa60>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <HAL_DMA_IRQHandler+0x984>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a39      	ldr	r2, [pc, #228]	; (8002760 <HAL_DMA_IRQHandler+0xa64>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_DMA_IRQHandler+0x988>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_DMA_IRQHandler+0x98a>
 8002684:	2300      	movs	r3, #0
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 823f 	beq.w	8002b0a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	2204      	movs	r2, #4
 800269e:	409a      	lsls	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80cd 	beq.w	8002844 <HAL_DMA_IRQHandler+0xb48>
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80c7 	beq.w	8002844 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2204      	movs	r2, #4
 80026c0:	409a      	lsls	r2, r3
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d049      	beq.n	8002764 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8210 	beq.w	8002b04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026ec:	e20a      	b.n	8002b04 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8206 	beq.w	8002b04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002700:	e200      	b.n	8002b04 <HAL_DMA_IRQHandler+0xe08>
 8002702:	bf00      	nop
 8002704:	40020010 	.word	0x40020010
 8002708:	40020028 	.word	0x40020028
 800270c:	40020040 	.word	0x40020040
 8002710:	40020058 	.word	0x40020058
 8002714:	40020070 	.word	0x40020070
 8002718:	40020088 	.word	0x40020088
 800271c:	400200a0 	.word	0x400200a0
 8002720:	400200b8 	.word	0x400200b8
 8002724:	40020410 	.word	0x40020410
 8002728:	40020428 	.word	0x40020428
 800272c:	40020440 	.word	0x40020440
 8002730:	40020458 	.word	0x40020458
 8002734:	40020470 	.word	0x40020470
 8002738:	40020488 	.word	0x40020488
 800273c:	400204a0 	.word	0x400204a0
 8002740:	400204b8 	.word	0x400204b8
 8002744:	58025408 	.word	0x58025408
 8002748:	5802541c 	.word	0x5802541c
 800274c:	58025430 	.word	0x58025430
 8002750:	58025444 	.word	0x58025444
 8002754:	58025458 	.word	0x58025458
 8002758:	5802546c 	.word	0x5802546c
 800275c:	58025480 	.word	0x58025480
 8002760:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d160      	bne.n	8002830 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a7f      	ldr	r2, [pc, #508]	; (8002970 <HAL_DMA_IRQHandler+0xc74>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d04a      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a7d      	ldr	r2, [pc, #500]	; (8002974 <HAL_DMA_IRQHandler+0xc78>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d045      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a7c      	ldr	r2, [pc, #496]	; (8002978 <HAL_DMA_IRQHandler+0xc7c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d040      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a7a      	ldr	r2, [pc, #488]	; (800297c <HAL_DMA_IRQHandler+0xc80>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d03b      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a79      	ldr	r2, [pc, #484]	; (8002980 <HAL_DMA_IRQHandler+0xc84>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d036      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a77      	ldr	r2, [pc, #476]	; (8002984 <HAL_DMA_IRQHandler+0xc88>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d031      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a76      	ldr	r2, [pc, #472]	; (8002988 <HAL_DMA_IRQHandler+0xc8c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d02c      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a74      	ldr	r2, [pc, #464]	; (800298c <HAL_DMA_IRQHandler+0xc90>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d027      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a73      	ldr	r2, [pc, #460]	; (8002990 <HAL_DMA_IRQHandler+0xc94>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a71      	ldr	r2, [pc, #452]	; (8002994 <HAL_DMA_IRQHandler+0xc98>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01d      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a70      	ldr	r2, [pc, #448]	; (8002998 <HAL_DMA_IRQHandler+0xc9c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d018      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a6e      	ldr	r2, [pc, #440]	; (800299c <HAL_DMA_IRQHandler+0xca0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a6d      	ldr	r2, [pc, #436]	; (80029a0 <HAL_DMA_IRQHandler+0xca4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a6b      	ldr	r2, [pc, #428]	; (80029a4 <HAL_DMA_IRQHandler+0xca8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6a      	ldr	r2, [pc, #424]	; (80029a8 <HAL_DMA_IRQHandler+0xcac>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <HAL_DMA_IRQHandler+0xb12>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a68      	ldr	r2, [pc, #416]	; (80029ac <HAL_DMA_IRQHandler+0xcb0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d108      	bne.n	8002820 <HAL_DMA_IRQHandler+0xb24>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0208 	bic.w	r2, r2, #8
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e007      	b.n	8002830 <HAL_DMA_IRQHandler+0xb34>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0204 	bic.w	r2, r2, #4
 800282e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8165 	beq.w	8002b04 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002842:	e15f      	b.n	8002b04 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2202      	movs	r2, #2
 800284e:	409a      	lsls	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80c5 	beq.w	80029e4 <HAL_DMA_IRQHandler+0xce8>
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80bf 	beq.w	80029e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2202      	movs	r2, #2
 8002870:	409a      	lsls	r2, r3
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d018      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 813a 	beq.w	8002b08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800289c:	e134      	b.n	8002b08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8130 	beq.w	8002b08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028b0:	e12a      	b.n	8002b08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f040 8089 	bne.w	80029d0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2b      	ldr	r2, [pc, #172]	; (8002970 <HAL_DMA_IRQHandler+0xc74>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d04a      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a29      	ldr	r2, [pc, #164]	; (8002974 <HAL_DMA_IRQHandler+0xc78>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d045      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a28      	ldr	r2, [pc, #160]	; (8002978 <HAL_DMA_IRQHandler+0xc7c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d040      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a26      	ldr	r2, [pc, #152]	; (800297c <HAL_DMA_IRQHandler+0xc80>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d03b      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a25      	ldr	r2, [pc, #148]	; (8002980 <HAL_DMA_IRQHandler+0xc84>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d036      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a23      	ldr	r2, [pc, #140]	; (8002984 <HAL_DMA_IRQHandler+0xc88>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d031      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a22      	ldr	r2, [pc, #136]	; (8002988 <HAL_DMA_IRQHandler+0xc8c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d02c      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a20      	ldr	r2, [pc, #128]	; (800298c <HAL_DMA_IRQHandler+0xc90>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d027      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <HAL_DMA_IRQHandler+0xc94>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d022      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <HAL_DMA_IRQHandler+0xc98>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01d      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <HAL_DMA_IRQHandler+0xc9c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d018      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_DMA_IRQHandler+0xca0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <HAL_DMA_IRQHandler+0xca4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00e      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <HAL_DMA_IRQHandler+0xca8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a16      	ldr	r2, [pc, #88]	; (80029a8 <HAL_DMA_IRQHandler+0xcac>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d004      	beq.n	800295e <HAL_DMA_IRQHandler+0xc62>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <HAL_DMA_IRQHandler+0xcb0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d128      	bne.n	80029b0 <HAL_DMA_IRQHandler+0xcb4>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0214 	bic.w	r2, r2, #20
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e027      	b.n	80029c0 <HAL_DMA_IRQHandler+0xcc4>
 8002970:	40020010 	.word	0x40020010
 8002974:	40020028 	.word	0x40020028
 8002978:	40020040 	.word	0x40020040
 800297c:	40020058 	.word	0x40020058
 8002980:	40020070 	.word	0x40020070
 8002984:	40020088 	.word	0x40020088
 8002988:	400200a0 	.word	0x400200a0
 800298c:	400200b8 	.word	0x400200b8
 8002990:	40020410 	.word	0x40020410
 8002994:	40020428 	.word	0x40020428
 8002998:	40020440 	.word	0x40020440
 800299c:	40020458 	.word	0x40020458
 80029a0:	40020470 	.word	0x40020470
 80029a4:	40020488 	.word	0x40020488
 80029a8:	400204a0 	.word	0x400204a0
 80029ac:	400204b8 	.word	0x400204b8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 020a 	bic.w	r2, r2, #10
 80029be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8097 	beq.w	8002b08 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029e2:	e091      	b.n	8002b08 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	2208      	movs	r2, #8
 80029ee:	409a      	lsls	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8088 	beq.w	8002b0a <HAL_DMA_IRQHandler+0xe0e>
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8082 	beq.w	8002b0a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a41      	ldr	r2, [pc, #260]	; (8002b10 <HAL_DMA_IRQHandler+0xe14>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d04a      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a3f      	ldr	r2, [pc, #252]	; (8002b14 <HAL_DMA_IRQHandler+0xe18>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d045      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a3e      	ldr	r2, [pc, #248]	; (8002b18 <HAL_DMA_IRQHandler+0xe1c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d040      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a3c      	ldr	r2, [pc, #240]	; (8002b1c <HAL_DMA_IRQHandler+0xe20>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d03b      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a3b      	ldr	r2, [pc, #236]	; (8002b20 <HAL_DMA_IRQHandler+0xe24>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d036      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a39      	ldr	r2, [pc, #228]	; (8002b24 <HAL_DMA_IRQHandler+0xe28>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d031      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a38      	ldr	r2, [pc, #224]	; (8002b28 <HAL_DMA_IRQHandler+0xe2c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d02c      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a36      	ldr	r2, [pc, #216]	; (8002b2c <HAL_DMA_IRQHandler+0xe30>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d027      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a35      	ldr	r2, [pc, #212]	; (8002b30 <HAL_DMA_IRQHandler+0xe34>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d022      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a33      	ldr	r2, [pc, #204]	; (8002b34 <HAL_DMA_IRQHandler+0xe38>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01d      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a32      	ldr	r2, [pc, #200]	; (8002b38 <HAL_DMA_IRQHandler+0xe3c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d018      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a30      	ldr	r2, [pc, #192]	; (8002b3c <HAL_DMA_IRQHandler+0xe40>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a2f      	ldr	r2, [pc, #188]	; (8002b40 <HAL_DMA_IRQHandler+0xe44>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00e      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a2d      	ldr	r2, [pc, #180]	; (8002b44 <HAL_DMA_IRQHandler+0xe48>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d009      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a2c      	ldr	r2, [pc, #176]	; (8002b48 <HAL_DMA_IRQHandler+0xe4c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xdaa>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2a      	ldr	r2, [pc, #168]	; (8002b4c <HAL_DMA_IRQHandler+0xe50>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d108      	bne.n	8002ab8 <HAL_DMA_IRQHandler+0xdbc>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 021c 	bic.w	r2, r2, #28
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e007      	b.n	8002ac8 <HAL_DMA_IRQHandler+0xdcc>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 020e 	bic.w	r2, r2, #14
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
 8002afe:	e004      	b.n	8002b0a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002b00:	bf00      	nop
 8002b02:	e002      	b.n	8002b0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b04:	bf00      	nop
 8002b06:	e000      	b.n	8002b0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b08:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002b0a:	3728      	adds	r7, #40	; 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40020010 	.word	0x40020010
 8002b14:	40020028 	.word	0x40020028
 8002b18:	40020040 	.word	0x40020040
 8002b1c:	40020058 	.word	0x40020058
 8002b20:	40020070 	.word	0x40020070
 8002b24:	40020088 	.word	0x40020088
 8002b28:	400200a0 	.word	0x400200a0
 8002b2c:	400200b8 	.word	0x400200b8
 8002b30:	40020410 	.word	0x40020410
 8002b34:	40020428 	.word	0x40020428
 8002b38:	40020440 	.word	0x40020440
 8002b3c:	40020458 	.word	0x40020458
 8002b40:	40020470 	.word	0x40020470
 8002b44:	40020488 	.word	0x40020488
 8002b48:	400204a0 	.word	0x400204a0
 8002b4c:	400204b8 	.word	0x400204b8

08002b50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a42      	ldr	r2, [pc, #264]	; (8002c68 <DMA_CalcBaseAndBitshift+0x118>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d04a      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a41      	ldr	r2, [pc, #260]	; (8002c6c <DMA_CalcBaseAndBitshift+0x11c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d045      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a3f      	ldr	r2, [pc, #252]	; (8002c70 <DMA_CalcBaseAndBitshift+0x120>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d040      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a3e      	ldr	r2, [pc, #248]	; (8002c74 <DMA_CalcBaseAndBitshift+0x124>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d03b      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a3c      	ldr	r2, [pc, #240]	; (8002c78 <DMA_CalcBaseAndBitshift+0x128>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d036      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a3b      	ldr	r2, [pc, #236]	; (8002c7c <DMA_CalcBaseAndBitshift+0x12c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d031      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a39      	ldr	r2, [pc, #228]	; (8002c80 <DMA_CalcBaseAndBitshift+0x130>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d02c      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a38      	ldr	r2, [pc, #224]	; (8002c84 <DMA_CalcBaseAndBitshift+0x134>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d027      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a36      	ldr	r2, [pc, #216]	; (8002c88 <DMA_CalcBaseAndBitshift+0x138>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d022      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a35      	ldr	r2, [pc, #212]	; (8002c8c <DMA_CalcBaseAndBitshift+0x13c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d01d      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a33      	ldr	r2, [pc, #204]	; (8002c90 <DMA_CalcBaseAndBitshift+0x140>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d018      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a32      	ldr	r2, [pc, #200]	; (8002c94 <DMA_CalcBaseAndBitshift+0x144>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d013      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a30      	ldr	r2, [pc, #192]	; (8002c98 <DMA_CalcBaseAndBitshift+0x148>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00e      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2f      	ldr	r2, [pc, #188]	; (8002c9c <DMA_CalcBaseAndBitshift+0x14c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d009      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a2d      	ldr	r2, [pc, #180]	; (8002ca0 <DMA_CalcBaseAndBitshift+0x150>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d004      	beq.n	8002bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a2c      	ldr	r2, [pc, #176]	; (8002ca4 <DMA_CalcBaseAndBitshift+0x154>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d101      	bne.n	8002bfc <DMA_CalcBaseAndBitshift+0xac>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <DMA_CalcBaseAndBitshift+0xae>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d024      	beq.n	8002c4c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	3b10      	subs	r3, #16
 8002c0a:	4a27      	ldr	r2, [pc, #156]	; (8002ca8 <DMA_CalcBaseAndBitshift+0x158>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	4a24      	ldr	r2, [pc, #144]	; (8002cac <DMA_CalcBaseAndBitshift+0x15c>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d908      	bls.n	8002c3c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <DMA_CalcBaseAndBitshift+0x160>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	1d1a      	adds	r2, r3, #4
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	659a      	str	r2, [r3, #88]	; 0x58
 8002c3a:	e00d      	b.n	8002c58 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <DMA_CalcBaseAndBitshift+0x160>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6593      	str	r3, [r2, #88]	; 0x58
 8002c4a:	e005      	b.n	8002c58 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40020010 	.word	0x40020010
 8002c6c:	40020028 	.word	0x40020028
 8002c70:	40020040 	.word	0x40020040
 8002c74:	40020058 	.word	0x40020058
 8002c78:	40020070 	.word	0x40020070
 8002c7c:	40020088 	.word	0x40020088
 8002c80:	400200a0 	.word	0x400200a0
 8002c84:	400200b8 	.word	0x400200b8
 8002c88:	40020410 	.word	0x40020410
 8002c8c:	40020428 	.word	0x40020428
 8002c90:	40020440 	.word	0x40020440
 8002c94:	40020458 	.word	0x40020458
 8002c98:	40020470 	.word	0x40020470
 8002c9c:	40020488 	.word	0x40020488
 8002ca0:	400204a0 	.word	0x400204a0
 8002ca4:	400204b8 	.word	0x400204b8
 8002ca8:	aaaaaaab 	.word	0xaaaaaaab
 8002cac:	080077d8 	.word	0x080077d8
 8002cb0:	fffffc00 	.word	0xfffffc00

08002cb4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d120      	bne.n	8002d0a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d858      	bhi.n	8002d82 <DMA_CheckFifoParam+0xce>
 8002cd0:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <DMA_CheckFifoParam+0x24>)
 8002cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002ce9 	.word	0x08002ce9
 8002cdc:	08002cfb 	.word	0x08002cfb
 8002ce0:	08002ce9 	.word	0x08002ce9
 8002ce4:	08002d83 	.word	0x08002d83
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d048      	beq.n	8002d86 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002cf8:	e045      	b.n	8002d86 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d02:	d142      	bne.n	8002d8a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d08:	e03f      	b.n	8002d8a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d12:	d123      	bne.n	8002d5c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d838      	bhi.n	8002d8e <DMA_CheckFifoParam+0xda>
 8002d1c:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <DMA_CheckFifoParam+0x70>)
 8002d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d22:	bf00      	nop
 8002d24:	08002d35 	.word	0x08002d35
 8002d28:	08002d3b 	.word	0x08002d3b
 8002d2c:	08002d35 	.word	0x08002d35
 8002d30:	08002d4d 	.word	0x08002d4d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
        break;
 8002d38:	e030      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d025      	beq.n	8002d92 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d4a:	e022      	b.n	8002d92 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d54:	d11f      	bne.n	8002d96 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d5a:	e01c      	b.n	8002d96 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d902      	bls.n	8002d6a <DMA_CheckFifoParam+0xb6>
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d003      	beq.n	8002d70 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002d68:	e018      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d6e:	e015      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8002d80:	e00b      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
        break;
 8002d82:	bf00      	nop
 8002d84:	e00a      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        break;
 8002d86:	bf00      	nop
 8002d88:	e008      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        break;
 8002d8a:	bf00      	nop
 8002d8c:	e006      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        break;
 8002d8e:	bf00      	nop
 8002d90:	e004      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        break;
 8002d92:	bf00      	nop
 8002d94:	e002      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
        break;
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
    break;
 8002d9a:	bf00      	nop
    }
  }

  return status;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop

08002dac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a38      	ldr	r2, [pc, #224]	; (8002ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a36      	ldr	r2, [pc, #216]	; (8002ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01d      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a35      	ldr	r2, [pc, #212]	; (8002ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d018      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a33      	ldr	r2, [pc, #204]	; (8002eac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a32      	ldr	r2, [pc, #200]	; (8002eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a30      	ldr	r2, [pc, #192]	; (8002eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d009      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2f      	ldr	r2, [pc, #188]	; (8002eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2d      	ldr	r2, [pc, #180]	; (8002ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01a      	beq.n	8002e4a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	3b08      	subs	r3, #8
 8002e1c:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	461a      	mov	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002e38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	2201      	movs	r2, #1
 8002e42:	409a      	lsls	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002e48:	e024      	b.n	8002e94 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	3b10      	subs	r3, #16
 8002e52:	4a1e      	ldr	r2, [pc, #120]	; (8002ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d806      	bhi.n	8002e72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d902      	bls.n	8002e72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3308      	adds	r3, #8
 8002e70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a16      	ldr	r2, [pc, #88]	; (8002edc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002e84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	58025408 	.word	0x58025408
 8002ea4:	5802541c 	.word	0x5802541c
 8002ea8:	58025430 	.word	0x58025430
 8002eac:	58025444 	.word	0x58025444
 8002eb0:	58025458 	.word	0x58025458
 8002eb4:	5802546c 	.word	0x5802546c
 8002eb8:	58025480 	.word	0x58025480
 8002ebc:	58025494 	.word	0x58025494
 8002ec0:	cccccccd 	.word	0xcccccccd
 8002ec4:	16009600 	.word	0x16009600
 8002ec8:	58025880 	.word	0x58025880
 8002ecc:	aaaaaaab 	.word	0xaaaaaaab
 8002ed0:	400204b8 	.word	0x400204b8
 8002ed4:	4002040f 	.word	0x4002040f
 8002ed8:	10008200 	.word	0x10008200
 8002edc:	40020880 	.word	0x40020880

08002ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d04a      	beq.n	8002f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d847      	bhi.n	8002f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d022      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d01d      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d018      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d013      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00e      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d009      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d101      	bne.n	8002f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	461a      	mov	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002f68:	671a      	str	r2, [r3, #112]	; 0x70
 8002f6a:	e009      	b.n	8002f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	461a      	mov	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002f7e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	2201      	movs	r2, #1
 8002f86:	409a      	lsls	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	58025408 	.word	0x58025408
 8002f9c:	5802541c 	.word	0x5802541c
 8002fa0:	58025430 	.word	0x58025430
 8002fa4:	58025444 	.word	0x58025444
 8002fa8:	58025458 	.word	0x58025458
 8002fac:	5802546c 	.word	0x5802546c
 8002fb0:	58025480 	.word	0x58025480
 8002fb4:	58025494 	.word	0x58025494
 8002fb8:	1600963f 	.word	0x1600963f
 8002fbc:	58025940 	.word	0x58025940
 8002fc0:	1000823f 	.word	0x1000823f
 8002fc4:	40020940 	.word	0x40020940

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fd6:	4b86      	ldr	r3, [pc, #536]	; (80031f0 <HAL_GPIO_Init+0x228>)
 8002fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fda:	e18c      	b.n	80032f6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 817e 	beq.w	80032f0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d005      	beq.n	800300c <HAL_GPIO_Init+0x44>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d130      	bne.n	800306e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003042:	2201      	movs	r2, #1
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	f003 0201 	and.w	r2, r3, #1
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b03      	cmp	r3, #3
 8003078:	d017      	beq.n	80030aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	2203      	movs	r2, #3
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4013      	ands	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d123      	bne.n	80030fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	08da      	lsrs	r2, r3, #3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3208      	adds	r2, #8
 80030be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	220f      	movs	r2, #15
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3208      	adds	r2, #8
 80030f8:	69b9      	ldr	r1, [r7, #24]
 80030fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	2203      	movs	r2, #3
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0203 	and.w	r2, r3, #3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80d8 	beq.w	80032f0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003140:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <HAL_GPIO_Init+0x22c>)
 8003142:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003146:	4a2b      	ldr	r2, [pc, #172]	; (80031f4 <HAL_GPIO_Init+0x22c>)
 8003148:	f043 0302 	orr.w	r3, r3, #2
 800314c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003150:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <HAL_GPIO_Init+0x22c>)
 8003152:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800315e:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <HAL_GPIO_Init+0x230>)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	3302      	adds	r3, #2
 8003166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	220f      	movs	r2, #15
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <HAL_GPIO_Init+0x234>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d04a      	beq.n	8003220 <HAL_GPIO_Init+0x258>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <HAL_GPIO_Init+0x238>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d02b      	beq.n	80031ea <HAL_GPIO_Init+0x222>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_GPIO_Init+0x23c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d025      	beq.n	80031e6 <HAL_GPIO_Init+0x21e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <HAL_GPIO_Init+0x240>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01f      	beq.n	80031e2 <HAL_GPIO_Init+0x21a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_GPIO_Init+0x244>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d019      	beq.n	80031de <HAL_GPIO_Init+0x216>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a18      	ldr	r2, [pc, #96]	; (8003210 <HAL_GPIO_Init+0x248>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_GPIO_Init+0x212>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a17      	ldr	r2, [pc, #92]	; (8003214 <HAL_GPIO_Init+0x24c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00d      	beq.n	80031d6 <HAL_GPIO_Init+0x20e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a16      	ldr	r2, [pc, #88]	; (8003218 <HAL_GPIO_Init+0x250>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <HAL_GPIO_Init+0x20a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a15      	ldr	r2, [pc, #84]	; (800321c <HAL_GPIO_Init+0x254>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_GPIO_Init+0x206>
 80031ca:	2309      	movs	r3, #9
 80031cc:	e029      	b.n	8003222 <HAL_GPIO_Init+0x25a>
 80031ce:	230a      	movs	r3, #10
 80031d0:	e027      	b.n	8003222 <HAL_GPIO_Init+0x25a>
 80031d2:	2307      	movs	r3, #7
 80031d4:	e025      	b.n	8003222 <HAL_GPIO_Init+0x25a>
 80031d6:	2306      	movs	r3, #6
 80031d8:	e023      	b.n	8003222 <HAL_GPIO_Init+0x25a>
 80031da:	2305      	movs	r3, #5
 80031dc:	e021      	b.n	8003222 <HAL_GPIO_Init+0x25a>
 80031de:	2304      	movs	r3, #4
 80031e0:	e01f      	b.n	8003222 <HAL_GPIO_Init+0x25a>
 80031e2:	2303      	movs	r3, #3
 80031e4:	e01d      	b.n	8003222 <HAL_GPIO_Init+0x25a>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e01b      	b.n	8003222 <HAL_GPIO_Init+0x25a>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e019      	b.n	8003222 <HAL_GPIO_Init+0x25a>
 80031ee:	bf00      	nop
 80031f0:	58000080 	.word	0x58000080
 80031f4:	58024400 	.word	0x58024400
 80031f8:	58000400 	.word	0x58000400
 80031fc:	58020000 	.word	0x58020000
 8003200:	58020400 	.word	0x58020400
 8003204:	58020800 	.word	0x58020800
 8003208:	58020c00 	.word	0x58020c00
 800320c:	58021000 	.word	0x58021000
 8003210:	58021400 	.word	0x58021400
 8003214:	58021800 	.word	0x58021800
 8003218:	58021c00 	.word	0x58021c00
 800321c:	58022400 	.word	0x58022400
 8003220:	2300      	movs	r3, #0
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	f002 0203 	and.w	r2, r2, #3
 8003228:	0092      	lsls	r2, r2, #2
 800322a:	4093      	lsls	r3, r2
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003232:	4938      	ldr	r1, [pc, #224]	; (8003314 <HAL_GPIO_Init+0x34c>)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	3302      	adds	r3, #2
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800326e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	3301      	adds	r3, #1
 80032f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	f47f ae6b 	bne.w	8002fdc <HAL_GPIO_Init+0x14>
  }
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	3724      	adds	r7, #36	; 0x24
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	58000400 	.word	0x58000400

08003318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
 8003324:	4613      	mov	r3, r2
 8003326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003328:	787b      	ldrb	r3, [r7, #1]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332e:	887a      	ldrh	r2, [r7, #2]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003334:	e003      	b.n	800333e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003336:	887b      	ldrh	r3, [r7, #2]
 8003338:	041a      	lsls	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	619a      	str	r2, [r3, #24]
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_PWREx_ConfigSupply+0x70>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b04      	cmp	r3, #4
 800335e:	d00a      	beq.n	8003376 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003360:	4b16      	ldr	r3, [pc, #88]	; (80033bc <HAL_PWREx_ConfigSupply+0x70>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	429a      	cmp	r2, r3
 800336c:	d001      	beq.n	8003372 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e01f      	b.n	80033b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e01d      	b.n	80033b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <HAL_PWREx_ConfigSupply+0x70>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f023 0207 	bic.w	r2, r3, #7
 800337e:	490f      	ldr	r1, [pc, #60]	; (80033bc <HAL_PWREx_ConfigSupply+0x70>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4313      	orrs	r3, r2
 8003384:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003386:	f7fe f821 	bl	80013cc <HAL_GetTick>
 800338a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800338c:	e009      	b.n	80033a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800338e:	f7fe f81d 	bl	80013cc <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800339c:	d901      	bls.n	80033a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e007      	b.n	80033b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_PWREx_ConfigSupply+0x70>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ae:	d1ee      	bne.n	800338e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	58024800 	.word	0x58024800

080033c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08c      	sub	sp, #48	; 0x30
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e3c8      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8087 	beq.w	80034ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e0:	4b88      	ldr	r3, [pc, #544]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033ea:	4b86      	ldr	r3, [pc, #536]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d007      	beq.n	8003406 <HAL_RCC_OscConfig+0x46>
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	2b18      	cmp	r3, #24
 80033fa:	d110      	bne.n	800341e <HAL_RCC_OscConfig+0x5e>
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d10b      	bne.n	800341e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003406:	4b7f      	ldr	r3, [pc, #508]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d06c      	beq.n	80034ec <HAL_RCC_OscConfig+0x12c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d168      	bne.n	80034ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e3a2      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003426:	d106      	bne.n	8003436 <HAL_RCC_OscConfig+0x76>
 8003428:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a75      	ldr	r2, [pc, #468]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 800342e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	e02e      	b.n	8003494 <HAL_RCC_OscConfig+0xd4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10c      	bne.n	8003458 <HAL_RCC_OscConfig+0x98>
 800343e:	4b71      	ldr	r3, [pc, #452]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a70      	ldr	r2, [pc, #448]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4b6e      	ldr	r3, [pc, #440]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a6d      	ldr	r2, [pc, #436]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	e01d      	b.n	8003494 <HAL_RCC_OscConfig+0xd4>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0xbc>
 8003462:	4b68      	ldr	r3, [pc, #416]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a67      	ldr	r2, [pc, #412]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b65      	ldr	r3, [pc, #404]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a64      	ldr	r2, [pc, #400]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0xd4>
 800347c:	4b61      	ldr	r3, [pc, #388]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a60      	ldr	r2, [pc, #384]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b5e      	ldr	r3, [pc, #376]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5d      	ldr	r2, [pc, #372]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fd ff96 	bl	80013cc <HAL_GetTick>
 80034a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fd ff92 	bl	80013cc <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e356      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034b6:	4b53      	ldr	r3, [pc, #332]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0xe4>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd ff82 	bl	80013cc <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fd ff7e 	bl	80013cc <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e342      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034de:	4b49      	ldr	r3, [pc, #292]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x10c>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 808c 	beq.w	8003614 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034fc:	4b41      	ldr	r3, [pc, #260]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003504:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003506:	4b3f      	ldr	r3, [pc, #252]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_RCC_OscConfig+0x162>
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	2b18      	cmp	r3, #24
 8003516:	d137      	bne.n	8003588 <HAL_RCC_OscConfig+0x1c8>
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d132      	bne.n	8003588 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003522:	4b38      	ldr	r3, [pc, #224]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_RCC_OscConfig+0x17a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e314      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800353a:	4b32      	ldr	r3, [pc, #200]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0219 	bic.w	r2, r3, #25
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	492f      	ldr	r1, [pc, #188]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd ff3e 	bl	80013cc <HAL_GetTick>
 8003550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003554:	f7fd ff3a 	bl	80013cc <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e2fe      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003566:	4b27      	ldr	r3, [pc, #156]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003572:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	4920      	ldr	r1, [pc, #128]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003582:	4313      	orrs	r3, r2
 8003584:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003586:	e045      	b.n	8003614 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d026      	beq.n	80035de <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003590:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 0219 	bic.w	r2, r3, #25
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4919      	ldr	r1, [pc, #100]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fd ff13 	bl	80013cc <HAL_GetTick>
 80035a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fd ff0f 	bl	80013cc <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e2d3      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c8:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	061b      	lsls	r3, r3, #24
 80035d6:	490b      	ldr	r1, [pc, #44]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
 80035dc:	e01a      	b.n	8003614 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <HAL_RCC_OscConfig+0x244>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fd feef 	bl	80013cc <HAL_GetTick>
 80035ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035f0:	e00a      	b.n	8003608 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f2:	f7fd feeb 	bl	80013cc <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d903      	bls.n	8003608 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e2af      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
 8003604:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003608:	4b96      	ldr	r3, [pc, #600]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ee      	bne.n	80035f2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	d06a      	beq.n	80036f6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003620:	4b90      	ldr	r3, [pc, #576]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003628:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800362a:	4b8e      	ldr	r3, [pc, #568]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b08      	cmp	r3, #8
 8003634:	d007      	beq.n	8003646 <HAL_RCC_OscConfig+0x286>
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b18      	cmp	r3, #24
 800363a:	d11b      	bne.n	8003674 <HAL_RCC_OscConfig+0x2b4>
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d116      	bne.n	8003674 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003646:	4b87      	ldr	r3, [pc, #540]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_RCC_OscConfig+0x29e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	2b80      	cmp	r3, #128	; 0x80
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e282      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800365e:	4b81      	ldr	r3, [pc, #516]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	497d      	ldr	r1, [pc, #500]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 800366e:	4313      	orrs	r3, r2
 8003670:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003672:	e040      	b.n	80036f6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d023      	beq.n	80036c4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800367c:	4b79      	ldr	r3, [pc, #484]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a78      	ldr	r2, [pc, #480]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 8003682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fd fea0 	bl	80013cc <HAL_GetTick>
 800368c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003690:	f7fd fe9c 	bl	80013cc <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e260      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036a2:	4b70      	ldr	r3, [pc, #448]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036ae:	4b6d      	ldr	r3, [pc, #436]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	061b      	lsls	r3, r3, #24
 80036bc:	4969      	ldr	r1, [pc, #420]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	60cb      	str	r3, [r1, #12]
 80036c2:	e018      	b.n	80036f6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80036c4:	4b67      	ldr	r3, [pc, #412]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a66      	ldr	r2, [pc, #408]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 80036ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fd fe7c 	bl	80013cc <HAL_GetTick>
 80036d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80036d8:	f7fd fe78 	bl	80013cc <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e23c      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036ea:	4b5e      	ldr	r3, [pc, #376]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d036      	beq.n	8003770 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d019      	beq.n	800373e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370a:	4b56      	ldr	r3, [pc, #344]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 800370c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370e:	4a55      	ldr	r2, [pc, #340]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003716:	f7fd fe59 	bl	80013cc <HAL_GetTick>
 800371a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371e:	f7fd fe55 	bl	80013cc <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e219      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003730:	4b4c      	ldr	r3, [pc, #304]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 8003732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x35e>
 800373c:	e018      	b.n	8003770 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373e:	4b49      	ldr	r3, [pc, #292]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 8003740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003742:	4a48      	ldr	r2, [pc, #288]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374a:	f7fd fe3f 	bl	80013cc <HAL_GetTick>
 800374e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003752:	f7fd fe3b 	bl	80013cc <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e1ff      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003764:	4b3f      	ldr	r3, [pc, #252]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 8003766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1f0      	bne.n	8003752 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d036      	beq.n	80037ea <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d019      	beq.n	80037b8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003784:	4b37      	ldr	r3, [pc, #220]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a36      	ldr	r2, [pc, #216]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 800378a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800378e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003790:	f7fd fe1c 	bl	80013cc <HAL_GetTick>
 8003794:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003798:	f7fd fe18 	bl	80013cc <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e1dc      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037aa:	4b2e      	ldr	r3, [pc, #184]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x3d8>
 80037b6:	e018      	b.n	80037ea <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037b8:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a29      	ldr	r2, [pc, #164]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 80037be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037c4:	f7fd fe02 	bl	80013cc <HAL_GetTick>
 80037c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037cc:	f7fd fdfe 	bl	80013cc <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e1c2      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037de:	4b21      	ldr	r3, [pc, #132]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8086 	beq.w	8003904 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <HAL_RCC_OscConfig+0x4a8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <HAL_RCC_OscConfig+0x4a8>)
 80037fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003802:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003804:	f7fd fde2 	bl	80013cc <HAL_GetTick>
 8003808:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380c:	f7fd fdde 	bl	80013cc <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e1a2      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_RCC_OscConfig+0x4a8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d106      	bne.n	8003840 <HAL_RCC_OscConfig+0x480>
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	4a0b      	ldr	r2, [pc, #44]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6713      	str	r3, [r2, #112]	; 0x70
 800383e:	e032      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e6>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d111      	bne.n	800386c <HAL_RCC_OscConfig+0x4ac>
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	4a05      	ldr	r2, [pc, #20]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 800384e:	f023 0301 	bic.w	r3, r3, #1
 8003852:	6713      	str	r3, [r2, #112]	; 0x70
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	4a02      	ldr	r2, [pc, #8]	; (8003864 <HAL_RCC_OscConfig+0x4a4>)
 800385a:	f023 0304 	bic.w	r3, r3, #4
 800385e:	6713      	str	r3, [r2, #112]	; 0x70
 8003860:	e021      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e6>
 8003862:	bf00      	nop
 8003864:	58024400 	.word	0x58024400
 8003868:	58024800 	.word	0x58024800
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b05      	cmp	r3, #5
 8003872:	d10c      	bne.n	800388e <HAL_RCC_OscConfig+0x4ce>
 8003874:	4b83      	ldr	r3, [pc, #524]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a82      	ldr	r2, [pc, #520]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 800387a:	f043 0304 	orr.w	r3, r3, #4
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
 8003880:	4b80      	ldr	r3, [pc, #512]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	4a7f      	ldr	r2, [pc, #508]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6713      	str	r3, [r2, #112]	; 0x70
 800388c:	e00b      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e6>
 800388e:	4b7d      	ldr	r3, [pc, #500]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	4a7c      	ldr	r2, [pc, #496]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	6713      	str	r3, [r2, #112]	; 0x70
 800389a:	4b7a      	ldr	r3, [pc, #488]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	4a79      	ldr	r2, [pc, #484]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80038a0:	f023 0304 	bic.w	r3, r3, #4
 80038a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d015      	beq.n	80038da <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ae:	f7fd fd8d 	bl	80013cc <HAL_GetTick>
 80038b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038b4:	e00a      	b.n	80038cc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b6:	f7fd fd89 	bl	80013cc <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e14b      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038cc:	4b6d      	ldr	r3, [pc, #436]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ee      	beq.n	80038b6 <HAL_RCC_OscConfig+0x4f6>
 80038d8:	e014      	b.n	8003904 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7fd fd77 	bl	80013cc <HAL_GetTick>
 80038de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038e0:	e00a      	b.n	80038f8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e2:	f7fd fd73 	bl	80013cc <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e135      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038f8:	4b62      	ldr	r3, [pc, #392]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ee      	bne.n	80038e2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 812a 	beq.w	8003b62 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800390e:	4b5d      	ldr	r3, [pc, #372]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003916:	2b18      	cmp	r3, #24
 8003918:	f000 80ba 	beq.w	8003a90 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b02      	cmp	r3, #2
 8003922:	f040 8095 	bne.w	8003a50 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003926:	4b57      	ldr	r3, [pc, #348]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a56      	ldr	r2, [pc, #344]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 800392c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fd fd4b 	bl	80013cc <HAL_GetTick>
 8003936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393a:	f7fd fd47 	bl	80013cc <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e10b      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800394c:	4b4d      	ldr	r3, [pc, #308]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003958:	4b4a      	ldr	r3, [pc, #296]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 800395a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800395c:	4b4a      	ldr	r3, [pc, #296]	; (8003a88 <HAL_RCC_OscConfig+0x6c8>)
 800395e:	4013      	ands	r3, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003968:	0112      	lsls	r2, r2, #4
 800396a:	430a      	orrs	r2, r1
 800396c:	4945      	ldr	r1, [pc, #276]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 800396e:	4313      	orrs	r3, r2
 8003970:	628b      	str	r3, [r1, #40]	; 0x28
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	3b01      	subs	r3, #1
 8003978:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003980:	3b01      	subs	r3, #1
 8003982:	025b      	lsls	r3, r3, #9
 8003984:	b29b      	uxth	r3, r3
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	3b01      	subs	r3, #1
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	3b01      	subs	r3, #1
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039a2:	4938      	ldr	r1, [pc, #224]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	4a35      	ldr	r2, [pc, #212]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039b4:	4b33      	ldr	r3, [pc, #204]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80039b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b8:	4b34      	ldr	r3, [pc, #208]	; (8003a8c <HAL_RCC_OscConfig+0x6cc>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039c0:	00d2      	lsls	r2, r2, #3
 80039c2:	4930      	ldr	r1, [pc, #192]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80039c8:	4b2e      	ldr	r3, [pc, #184]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	f023 020c 	bic.w	r2, r3, #12
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	492b      	ldr	r1, [pc, #172]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80039da:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	f023 0202 	bic.w	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	4927      	ldr	r1, [pc, #156]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039ec:	4b25      	ldr	r3, [pc, #148]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	4a24      	ldr	r2, [pc, #144]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80039f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f8:	4b22      	ldr	r3, [pc, #136]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	4a21      	ldr	r2, [pc, #132]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 80039fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a04:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	4a1e      	ldr	r2, [pc, #120]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003a10:	4b1c      	ldr	r3, [pc, #112]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a1c:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a18      	ldr	r2, [pc, #96]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fd fcd0 	bl	80013cc <HAL_GetTick>
 8003a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fd fccc 	bl	80013cc <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e090      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x670>
 8003a4e:	e088      	b.n	8003b62 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fd fcb6 	bl	80013cc <HAL_GetTick>
 8003a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fd fcb2 	bl	80013cc <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e076      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a76:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <HAL_RCC_OscConfig+0x6c4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x6a4>
 8003a82:	e06e      	b.n	8003b62 <HAL_RCC_OscConfig+0x7a2>
 8003a84:	58024400 	.word	0x58024400
 8003a88:	fffffc0c 	.word	0xfffffc0c
 8003a8c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a90:	4b36      	ldr	r3, [pc, #216]	; (8003b6c <HAL_RCC_OscConfig+0x7ac>)
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a96:	4b35      	ldr	r3, [pc, #212]	; (8003b6c <HAL_RCC_OscConfig+0x7ac>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d031      	beq.n	8003b08 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0203 	and.w	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d12a      	bne.n	8003b08 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d122      	bne.n	8003b08 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d11a      	bne.n	8003b08 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	0a5b      	lsrs	r3, r3, #9
 8003ad6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ade:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d111      	bne.n	8003b08 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	0c1b      	lsrs	r3, r3, #16
 8003ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d108      	bne.n	8003b08 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	0e1b      	lsrs	r3, r3, #24
 8003afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e02b      	b.n	8003b64 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003b0c:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <HAL_RCC_OscConfig+0x7ac>)
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b10:	08db      	lsrs	r3, r3, #3
 8003b12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b16:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d01f      	beq.n	8003b62 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_RCC_OscConfig+0x7ac>)
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	4a11      	ldr	r2, [pc, #68]	; (8003b6c <HAL_RCC_OscConfig+0x7ac>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b2e:	f7fd fc4d 	bl	80013cc <HAL_GetTick>
 8003b32:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003b34:	bf00      	nop
 8003b36:	f7fd fc49 	bl	80013cc <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d0f9      	beq.n	8003b36 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <HAL_RCC_OscConfig+0x7ac>)
 8003b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <HAL_RCC_OscConfig+0x7b0>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b4e:	00d2      	lsls	r2, r2, #3
 8003b50:	4906      	ldr	r1, [pc, #24]	; (8003b6c <HAL_RCC_OscConfig+0x7ac>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_OscConfig+0x7ac>)
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <HAL_RCC_OscConfig+0x7ac>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3730      	adds	r7, #48	; 0x30
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	58024400 	.word	0x58024400
 8003b70:	ffff0007 	.word	0xffff0007

08003b74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e19c      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b88:	4b8a      	ldr	r3, [pc, #552]	; (8003db4 <HAL_RCC_ClockConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d910      	bls.n	8003bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4b87      	ldr	r3, [pc, #540]	; (8003db4 <HAL_RCC_ClockConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 020f 	bic.w	r2, r3, #15
 8003b9e:	4985      	ldr	r1, [pc, #532]	; (8003db4 <HAL_RCC_ClockConfig+0x240>)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b83      	ldr	r3, [pc, #524]	; (8003db4 <HAL_RCC_ClockConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e184      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d010      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	4b7b      	ldr	r3, [pc, #492]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d908      	bls.n	8003be6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bd4:	4b78      	ldr	r3, [pc, #480]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	4975      	ldr	r1, [pc, #468]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d010      	beq.n	8003c14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	4b70      	ldr	r3, [pc, #448]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d908      	bls.n	8003c14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c02:	4b6d      	ldr	r3, [pc, #436]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	496a      	ldr	r1, [pc, #424]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d010      	beq.n	8003c42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699a      	ldr	r2, [r3, #24]
 8003c24:	4b64      	ldr	r3, [pc, #400]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d908      	bls.n	8003c42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c30:	4b61      	ldr	r3, [pc, #388]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	495e      	ldr	r1, [pc, #376]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d010      	beq.n	8003c70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69da      	ldr	r2, [r3, #28]
 8003c52:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d908      	bls.n	8003c70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c5e:	4b56      	ldr	r3, [pc, #344]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	4953      	ldr	r1, [pc, #332]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d010      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	4b4d      	ldr	r3, [pc, #308]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d908      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c8c:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f023 020f 	bic.w	r2, r3, #15
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4947      	ldr	r1, [pc, #284]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d055      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003caa:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	4940      	ldr	r1, [pc, #256]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cc4:	4b3c      	ldr	r3, [pc, #240]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d121      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0f6      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d107      	bne.n	8003cec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cdc:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d115      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0ea      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cf4:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d109      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0de      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d04:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0d6      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f023 0207 	bic.w	r2, r3, #7
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4925      	ldr	r1, [pc, #148]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d26:	f7fd fb51 	bl	80013cc <HAL_GetTick>
 8003d2a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d2e:	f7fd fb4d 	bl	80013cc <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e0be      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d44:	4b1c      	ldr	r3, [pc, #112]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d1eb      	bne.n	8003d2e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d010      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d208      	bcs.n	8003d84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f023 020f 	bic.w	r2, r3, #15
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	490e      	ldr	r1, [pc, #56]	; (8003db8 <HAL_RCC_ClockConfig+0x244>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_ClockConfig+0x240>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d214      	bcs.n	8003dbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d92:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <HAL_RCC_ClockConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 020f 	bic.w	r2, r3, #15
 8003d9a:	4906      	ldr	r1, [pc, #24]	; (8003db4 <HAL_RCC_ClockConfig+0x240>)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da2:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <HAL_RCC_ClockConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d005      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e086      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x34e>
 8003db4:	52002000 	.word	0x52002000
 8003db8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d010      	beq.n	8003dea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d208      	bcs.n	8003dea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003dd8:	4b3c      	ldr	r3, [pc, #240]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	4939      	ldr	r1, [pc, #228]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d010      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d208      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e06:	4b31      	ldr	r3, [pc, #196]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	492e      	ldr	r1, [pc, #184]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d010      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d208      	bcs.n	8003e46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e34:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	4922      	ldr	r1, [pc, #136]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d010      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d208      	bcs.n	8003e74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e62:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	4917      	ldr	r1, [pc, #92]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e74:	f000 f834 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b14      	ldr	r3, [pc, #80]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	0a1b      	lsrs	r3, r3, #8
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	4912      	ldr	r1, [pc, #72]	; (8003ed0 <HAL_RCC_ClockConfig+0x35c>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e92:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <HAL_RCC_ClockConfig+0x358>)
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	4a0d      	ldr	r2, [pc, #52]	; (8003ed0 <HAL_RCC_ClockConfig+0x35c>)
 8003e9c:	5cd3      	ldrb	r3, [r2, r3]
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea8:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <HAL_RCC_ClockConfig+0x360>)
 8003eaa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003eac:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <HAL_RCC_ClockConfig+0x364>)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <HAL_RCC_ClockConfig+0x368>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fd fa3e 	bl	8001338 <HAL_InitTick>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	58024400 	.word	0x58024400
 8003ed0:	080077c8 	.word	0x080077c8
 8003ed4:	24000004 	.word	0x24000004
 8003ed8:	24000000 	.word	0x24000000
 8003edc:	24000008 	.word	0x24000008

08003ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b089      	sub	sp, #36	; 0x24
 8003ee4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee6:	4bb3      	ldr	r3, [pc, #716]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eee:	2b18      	cmp	r3, #24
 8003ef0:	f200 8155 	bhi.w	800419e <HAL_RCC_GetSysClockFreq+0x2be>
 8003ef4:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <HAL_RCC_GetSysClockFreq+0x1c>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f61 	.word	0x08003f61
 8003f00:	0800419f 	.word	0x0800419f
 8003f04:	0800419f 	.word	0x0800419f
 8003f08:	0800419f 	.word	0x0800419f
 8003f0c:	0800419f 	.word	0x0800419f
 8003f10:	0800419f 	.word	0x0800419f
 8003f14:	0800419f 	.word	0x0800419f
 8003f18:	0800419f 	.word	0x0800419f
 8003f1c:	08003f87 	.word	0x08003f87
 8003f20:	0800419f 	.word	0x0800419f
 8003f24:	0800419f 	.word	0x0800419f
 8003f28:	0800419f 	.word	0x0800419f
 8003f2c:	0800419f 	.word	0x0800419f
 8003f30:	0800419f 	.word	0x0800419f
 8003f34:	0800419f 	.word	0x0800419f
 8003f38:	0800419f 	.word	0x0800419f
 8003f3c:	08003f8d 	.word	0x08003f8d
 8003f40:	0800419f 	.word	0x0800419f
 8003f44:	0800419f 	.word	0x0800419f
 8003f48:	0800419f 	.word	0x0800419f
 8003f4c:	0800419f 	.word	0x0800419f
 8003f50:	0800419f 	.word	0x0800419f
 8003f54:	0800419f 	.word	0x0800419f
 8003f58:	0800419f 	.word	0x0800419f
 8003f5c:	08003f93 	.word	0x08003f93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f60:	4b94      	ldr	r3, [pc, #592]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d009      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f6c:	4b91      	ldr	r3, [pc, #580]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	08db      	lsrs	r3, r3, #3
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	4a90      	ldr	r2, [pc, #576]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003f7e:	e111      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f80:	4b8d      	ldr	r3, [pc, #564]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f82:	61bb      	str	r3, [r7, #24]
      break;
 8003f84:	e10e      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003f86:	4b8d      	ldr	r3, [pc, #564]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f88:	61bb      	str	r3, [r7, #24]
      break;
 8003f8a:	e10b      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003f8c:	4b8c      	ldr	r3, [pc, #560]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f8e:	61bb      	str	r3, [r7, #24]
      break;
 8003f90:	e108      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f92:	4b88      	ldr	r3, [pc, #544]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003f9c:	4b85      	ldr	r3, [pc, #532]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fa6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003fa8:	4b82      	ldr	r3, [pc, #520]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003fb2:	4b80      	ldr	r3, [pc, #512]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	08db      	lsrs	r3, r3, #3
 8003fb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	fb02 f303 	mul.w	r3, r2, r3
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80e1 	beq.w	8004198 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	f000 8083 	beq.w	80040e4 <HAL_RCC_GetSysClockFreq+0x204>
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	f200 80a1 	bhi.w	8004128 <HAL_RCC_GetSysClockFreq+0x248>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x114>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d056      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ff2:	e099      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ff4:	4b6f      	ldr	r3, [pc, #444]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d02d      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004000:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	08db      	lsrs	r3, r3, #3
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	4a6b      	ldr	r2, [pc, #428]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
 8004010:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	ee07 3a90 	vmov	s15, r3
 8004018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402a:	4b62      	ldr	r3, [pc, #392]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403a:	ed97 6a02 	vldr	s12, [r7, #8]
 800403e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80041c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800404a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800404e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004056:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800405a:	e087      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004066:	eddf 6a58 	vldr	s13, [pc, #352]	; 80041c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800406a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406e:	4b51      	ldr	r3, [pc, #324]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004082:	eddf 5a50 	vldr	s11, [pc, #320]	; 80041c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800409e:	e065      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80041cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80040ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b2:	4b40      	ldr	r3, [pc, #256]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80041c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040e2:	e043      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80041d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80040f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f6:	4b2f      	ldr	r3, [pc, #188]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004106:	ed97 6a02 	vldr	s12, [r7, #8]
 800410a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80041c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800410e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800411a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004122:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004126:	e021      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	eddf 6a26 	vldr	s13, [pc, #152]	; 80041cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413a:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414a:	ed97 6a02 	vldr	s12, [r7, #8]
 800414e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80041c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800415e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004166:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800416a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	0a5b      	lsrs	r3, r3, #9
 8004172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004176:	3301      	adds	r3, #1
 8004178:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	ee07 3a90 	vmov	s15, r3
 8004180:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004184:	edd7 6a07 	vldr	s13, [r7, #28]
 8004188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800418c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004190:	ee17 3a90 	vmov	r3, s15
 8004194:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004196:	e005      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	61bb      	str	r3, [r7, #24]
      break;
 800419c:	e002      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800419e:	4b07      	ldr	r3, [pc, #28]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041a0:	61bb      	str	r3, [r7, #24]
      break;
 80041a2:	bf00      	nop
  }

  return sysclockfreq;
 80041a4:	69bb      	ldr	r3, [r7, #24]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3724      	adds	r7, #36	; 0x24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	58024400 	.word	0x58024400
 80041b8:	03d09000 	.word	0x03d09000
 80041bc:	003d0900 	.word	0x003d0900
 80041c0:	017d7840 	.word	0x017d7840
 80041c4:	46000000 	.word	0x46000000
 80041c8:	4c742400 	.word	0x4c742400
 80041cc:	4a742400 	.word	0x4a742400
 80041d0:	4bbebc20 	.word	0x4bbebc20

080041d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041da:	f7ff fe81 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 80041de:	4602      	mov	r2, r0
 80041e0:	4b10      	ldr	r3, [pc, #64]	; (8004224 <HAL_RCC_GetHCLKFreq+0x50>)
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	0a1b      	lsrs	r3, r3, #8
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	490f      	ldr	r1, [pc, #60]	; (8004228 <HAL_RCC_GetHCLKFreq+0x54>)
 80041ec:	5ccb      	ldrb	r3, [r1, r3]
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	fa22 f303 	lsr.w	r3, r2, r3
 80041f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041f8:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <HAL_RCC_GetHCLKFreq+0x50>)
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	4a09      	ldr	r2, [pc, #36]	; (8004228 <HAL_RCC_GetHCLKFreq+0x54>)
 8004202:	5cd3      	ldrb	r3, [r2, r3]
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	fa22 f303 	lsr.w	r3, r2, r3
 800420e:	4a07      	ldr	r2, [pc, #28]	; (800422c <HAL_RCC_GetHCLKFreq+0x58>)
 8004210:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004212:	4a07      	ldr	r2, [pc, #28]	; (8004230 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <HAL_RCC_GetHCLKFreq+0x58>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	58024400 	.word	0x58024400
 8004228:	080077c8 	.word	0x080077c8
 800422c:	24000004 	.word	0x24000004
 8004230:	24000000 	.word	0x24000000

08004234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004238:	f7ff ffcc 	bl	80041d4 <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4904      	ldr	r1, [pc, #16]	; (800425c <HAL_RCC_GetPCLK1Freq+0x28>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	58024400 	.word	0x58024400
 800425c:	080077c8 	.word	0x080077c8

08004260 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004264:	b0c6      	sub	sp, #280	; 0x118
 8004266:	af00      	add	r7, sp, #0
 8004268:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800426c:	2300      	movs	r3, #0
 800426e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004272:	2300      	movs	r3, #0
 8004274:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004284:	2500      	movs	r5, #0
 8004286:	ea54 0305 	orrs.w	r3, r4, r5
 800428a:	d049      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800428c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004292:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004296:	d02f      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004298:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800429c:	d828      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800429e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a2:	d01a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80042a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a8:	d822      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80042ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b2:	d007      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042b4:	e01c      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b6:	4bab      	ldr	r3, [pc, #684]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	4aaa      	ldr	r2, [pc, #680]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80042c2:	e01a      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c8:	3308      	adds	r3, #8
 80042ca:	2102      	movs	r1, #2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f002 fa49 	bl	8006764 <RCCEx_PLL2_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80042d8:	e00f      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042de:	3328      	adds	r3, #40	; 0x28
 80042e0:	2102      	movs	r1, #2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f002 faf0 	bl	80068c8 <RCCEx_PLL3_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80042ee:	e004      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80042f6:	e000      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80042f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004302:	4b98      	ldr	r3, [pc, #608]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004306:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800430a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800430e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004310:	4a94      	ldr	r2, [pc, #592]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004312:	430b      	orrs	r3, r1
 8004314:	6513      	str	r3, [r2, #80]	; 0x50
 8004316:	e003      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004318:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800431c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800432c:	f04f 0900 	mov.w	r9, #0
 8004330:	ea58 0309 	orrs.w	r3, r8, r9
 8004334:	d047      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433c:	2b04      	cmp	r3, #4
 800433e:	d82a      	bhi.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004340:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004346:	bf00      	nop
 8004348:	0800435d 	.word	0x0800435d
 800434c:	0800436b 	.word	0x0800436b
 8004350:	08004381 	.word	0x08004381
 8004354:	0800439f 	.word	0x0800439f
 8004358:	0800439f 	.word	0x0800439f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435c:	4b81      	ldr	r3, [pc, #516]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	4a80      	ldr	r2, [pc, #512]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004366:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004368:	e01a      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800436a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800436e:	3308      	adds	r3, #8
 8004370:	2100      	movs	r1, #0
 8004372:	4618      	mov	r0, r3
 8004374:	f002 f9f6 	bl	8006764 <RCCEx_PLL2_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800437e:	e00f      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004384:	3328      	adds	r3, #40	; 0x28
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f002 fa9d 	bl	80068c8 <RCCEx_PLL3_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004394:	e004      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800439c:	e000      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800439e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043a8:	4b6e      	ldr	r3, [pc, #440]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ac:	f023 0107 	bic.w	r1, r3, #7
 80043b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	4a6b      	ldr	r2, [pc, #428]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6513      	str	r3, [r2, #80]	; 0x50
 80043bc:	e003      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80043c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80043d2:	f04f 0b00 	mov.w	fp, #0
 80043d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80043da:	d05b      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80043dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043e4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80043e8:	d03b      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80043ea:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80043ee:	d834      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80043f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043f4:	d037      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80043f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043fa:	d82e      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80043fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004400:	d033      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004402:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004406:	d828      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800440c:	d01a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800440e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004412:	d822      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800441c:	d007      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800441e:	e01c      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004420:	4b50      	ldr	r3, [pc, #320]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	4a4f      	ldr	r2, [pc, #316]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800442c:	e01e      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800442e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004432:	3308      	adds	r3, #8
 8004434:	2100      	movs	r1, #0
 8004436:	4618      	mov	r0, r3
 8004438:	f002 f994 	bl	8006764 <RCCEx_PLL2_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004442:	e013      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004448:	3328      	adds	r3, #40	; 0x28
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f002 fa3b 	bl	80068c8 <RCCEx_PLL3_Config>
 8004452:	4603      	mov	r3, r0
 8004454:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004458:	e008      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004460:	e004      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004462:	bf00      	nop
 8004464:	e002      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004466:	bf00      	nop
 8004468:	e000      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800446a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800446c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10b      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004474:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004478:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800447c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004480:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004484:	4a37      	ldr	r2, [pc, #220]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004486:	430b      	orrs	r3, r1
 8004488:	6593      	str	r3, [r2, #88]	; 0x58
 800448a:	e003      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004490:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80044a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80044a4:	2300      	movs	r3, #0
 80044a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80044aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80044ae:	460b      	mov	r3, r1
 80044b0:	4313      	orrs	r3, r2
 80044b2:	d05d      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80044b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044bc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80044c0:	d03b      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80044c2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80044c6:	d834      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80044c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044cc:	d037      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80044ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044d2:	d82e      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80044d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044d8:	d033      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80044da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044de:	d828      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80044e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044e4:	d01a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80044e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ea:	d822      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80044f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044f4:	d007      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80044f6:	e01c      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	4a19      	ldr	r2, [pc, #100]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004502:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004504:	e01e      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800450a:	3308      	adds	r3, #8
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f002 f928 	bl	8006764 <RCCEx_PLL2_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800451a:	e013      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800451c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004520:	3328      	adds	r3, #40	; 0x28
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f002 f9cf 	bl	80068c8 <RCCEx_PLL3_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004530:	e008      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004538:	e004      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800453a:	bf00      	nop
 800453c:	e002      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800453e:	bf00      	nop
 8004540:	e000      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004544:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10d      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800454e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004550:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004558:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800455c:	4a01      	ldr	r2, [pc, #4]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800455e:	430b      	orrs	r3, r1
 8004560:	6593      	str	r3, [r2, #88]	; 0x58
 8004562:	e005      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004568:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800456c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800457c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004580:	2300      	movs	r3, #0
 8004582:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004586:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800458a:	460b      	mov	r3, r1
 800458c:	4313      	orrs	r3, r2
 800458e:	d03a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004596:	2b30      	cmp	r3, #48	; 0x30
 8004598:	d01f      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800459a:	2b30      	cmp	r3, #48	; 0x30
 800459c:	d819      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d00c      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d815      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d019      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d111      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ae:	4baa      	ldr	r3, [pc, #680]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	4aa9      	ldr	r2, [pc, #676]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80045ba:	e011      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c0:	3308      	adds	r3, #8
 80045c2:	2102      	movs	r1, #2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f002 f8cd 	bl	8006764 <RCCEx_PLL2_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80045d0:	e006      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80045d8:	e002      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80045da:	bf00      	nop
 80045dc:	e000      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80045de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80045e8:	4b9b      	ldr	r3, [pc, #620]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80045f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f6:	4a98      	ldr	r2, [pc, #608]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045f8:	430b      	orrs	r3, r1
 80045fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045fc:	e003      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004602:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004612:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004616:	2300      	movs	r3, #0
 8004618:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800461c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004620:	460b      	mov	r3, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	d051      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004630:	d035      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004632:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004636:	d82e      	bhi.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004638:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800463c:	d031      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800463e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004642:	d828      	bhi.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004648:	d01a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800464a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464e:	d822      	bhi.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004658:	d007      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800465a:	e01c      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465c:	4b7e      	ldr	r3, [pc, #504]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	4a7d      	ldr	r2, [pc, #500]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004668:	e01c      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800466a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800466e:	3308      	adds	r3, #8
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f002 f876 	bl	8006764 <RCCEx_PLL2_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800467e:	e011      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004684:	3328      	adds	r3, #40	; 0x28
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f002 f91d 	bl	80068c8 <RCCEx_PLL3_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004694:	e006      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800469c:	e002      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800469e:	bf00      	nop
 80046a0:	e000      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80046a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80046ac:	4b6a      	ldr	r3, [pc, #424]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80046b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ba:	4a67      	ldr	r2, [pc, #412]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046bc:	430b      	orrs	r3, r1
 80046be:	6513      	str	r3, [r2, #80]	; 0x50
 80046c0:	e003      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80046ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80046d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046da:	2300      	movs	r3, #0
 80046dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046e0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4313      	orrs	r3, r2
 80046e8:	d053      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80046ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046f4:	d033      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80046f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046fa:	d82c      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80046fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004700:	d02f      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004702:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004706:	d826      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004708:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800470c:	d02b      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800470e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004712:	d820      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004714:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004718:	d012      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800471a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800471e:	d81a      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d022      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004728:	d115      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800472a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800472e:	3308      	adds	r3, #8
 8004730:	2101      	movs	r1, #1
 8004732:	4618      	mov	r0, r3
 8004734:	f002 f816 	bl	8006764 <RCCEx_PLL2_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800473e:	e015      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004744:	3328      	adds	r3, #40	; 0x28
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f002 f8bd 	bl	80068c8 <RCCEx_PLL3_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004754:	e00a      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800475c:	e006      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800475e:	bf00      	nop
 8004760:	e004      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004762:	bf00      	nop
 8004764:	e002      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800476a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004774:	4b38      	ldr	r3, [pc, #224]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004778:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800477c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004782:	4a35      	ldr	r2, [pc, #212]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004784:	430b      	orrs	r3, r1
 8004786:	6513      	str	r3, [r2, #80]	; 0x50
 8004788:	e003      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800478e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800479e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047a2:	2300      	movs	r3, #0
 80047a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80047a8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d058      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80047b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047be:	d033      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80047c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047c4:	d82c      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80047c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ca:	d02f      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d0:	d826      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80047d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047d6:	d02b      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80047d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047dc:	d820      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80047de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047e2:	d012      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80047e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047e8:	d81a      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d022      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80047ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047f2:	d115      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047f8:	3308      	adds	r3, #8
 80047fa:	2101      	movs	r1, #1
 80047fc:	4618      	mov	r0, r3
 80047fe:	f001 ffb1 	bl	8006764 <RCCEx_PLL2_Config>
 8004802:	4603      	mov	r3, r0
 8004804:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004808:	e015      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800480a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800480e:	3328      	adds	r3, #40	; 0x28
 8004810:	2101      	movs	r1, #1
 8004812:	4618      	mov	r0, r3
 8004814:	f002 f858 	bl	80068c8 <RCCEx_PLL3_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800481e:	e00a      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004826:	e006      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004828:	bf00      	nop
 800482a:	e004      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800482c:	bf00      	nop
 800482e:	e002      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004830:	bf00      	nop
 8004832:	e000      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004836:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10e      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004842:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800484a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800484e:	4a02      	ldr	r2, [pc, #8]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004850:	430b      	orrs	r3, r1
 8004852:	6593      	str	r3, [r2, #88]	; 0x58
 8004854:	e006      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004856:	bf00      	nop
 8004858:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004860:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004874:	2300      	movs	r3, #0
 8004876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800487a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800487e:	460b      	mov	r3, r1
 8004880:	4313      	orrs	r3, r2
 8004882:	d037      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800488e:	d00e      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004894:	d816      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004896:	2b00      	cmp	r3, #0
 8004898:	d018      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800489a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800489e:	d111      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a0:	4bc4      	ldr	r3, [pc, #784]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	4ac3      	ldr	r2, [pc, #780]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80048ac:	e00f      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048b2:	3308      	adds	r3, #8
 80048b4:	2101      	movs	r1, #1
 80048b6:	4618      	mov	r0, r3
 80048b8:	f001 ff54 	bl	8006764 <RCCEx_PLL2_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80048c2:	e004      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80048ca:	e000      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80048cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048d6:	4bb7      	ldr	r3, [pc, #732]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048da:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80048de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e4:	4ab3      	ldr	r2, [pc, #716]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048e6:	430b      	orrs	r3, r1
 80048e8:	6513      	str	r3, [r2, #80]	; 0x50
 80048ea:	e003      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80048f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004904:	2300      	movs	r3, #0
 8004906:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800490a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800490e:	460b      	mov	r3, r1
 8004910:	4313      	orrs	r3, r2
 8004912:	d039      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491a:	2b03      	cmp	r3, #3
 800491c:	d81c      	bhi.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800491e:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	08004961 	.word	0x08004961
 8004928:	08004935 	.word	0x08004935
 800492c:	08004943 	.word	0x08004943
 8004930:	08004961 	.word	0x08004961
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004934:	4b9f      	ldr	r3, [pc, #636]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	4a9e      	ldr	r2, [pc, #632]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800493a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800493e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004940:	e00f      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004946:	3308      	adds	r3, #8
 8004948:	2102      	movs	r1, #2
 800494a:	4618      	mov	r0, r3
 800494c:	f001 ff0a 	bl	8006764 <RCCEx_PLL2_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004956:	e004      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800495e:	e000      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004962:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800496a:	4b92      	ldr	r3, [pc, #584]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800496c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496e:	f023 0103 	bic.w	r1, r3, #3
 8004972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004978:	4a8e      	ldr	r2, [pc, #568]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800497a:	430b      	orrs	r3, r1
 800497c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800497e:	e003      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004980:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004984:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004994:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800499e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f000 8099 	beq.w	8004adc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049aa:	4b83      	ldr	r3, [pc, #524]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a82      	ldr	r2, [pc, #520]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80049b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049b6:	f7fc fd09 	bl	80013cc <HAL_GetTick>
 80049ba:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049be:	e00b      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c0:	f7fc fd04 	bl	80013cc <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b64      	cmp	r3, #100	; 0x64
 80049ce:	d903      	bls.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80049d6:	e005      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049d8:	4b77      	ldr	r3, [pc, #476]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0ed      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80049e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d173      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80049ec:	4b71      	ldr	r3, [pc, #452]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049f8:	4053      	eors	r3, r2
 80049fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d015      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a02:	4b6c      	ldr	r3, [pc, #432]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a0e:	4b69      	ldr	r3, [pc, #420]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	4a68      	ldr	r2, [pc, #416]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a18:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a1a:	4b66      	ldr	r3, [pc, #408]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1e:	4a65      	ldr	r2, [pc, #404]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a24:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a26:	4a63      	ldr	r2, [pc, #396]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3a:	d118      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fc fcc6 	bl	80013cc <HAL_GetTick>
 8004a40:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a44:	e00d      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a46:	f7fc fcc1 	bl	80013cc <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a50:	1ad2      	subs	r2, r2, r3
 8004a52:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d903      	bls.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8004a60:	e005      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a62:	4b54      	ldr	r3, [pc, #336]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0eb      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004a6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d129      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a86:	d10e      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004a88:	4b4a      	ldr	r3, [pc, #296]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a98:	091a      	lsrs	r2, r3, #4
 8004a9a:	4b48      	ldr	r3, [pc, #288]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	4a45      	ldr	r2, [pc, #276]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	6113      	str	r3, [r2, #16]
 8004aa4:	e005      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004aa6:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	4a42      	ldr	r2, [pc, #264]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004aac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ab0:	6113      	str	r3, [r2, #16]
 8004ab2:	4b40      	ldr	r3, [pc, #256]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ab4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac2:	4a3c      	ldr	r2, [pc, #240]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac8:	e008      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004aca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ace:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8004ad2:	e003      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ad8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	f002 0301 	and.w	r3, r2, #1
 8004ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004aec:	2300      	movs	r3, #0
 8004aee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004af2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004af6:	460b      	mov	r3, r1
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f000 808f 	beq.w	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b04:	2b28      	cmp	r3, #40	; 0x28
 8004b06:	d871      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004bf5 	.word	0x08004bf5
 8004b14:	08004bed 	.word	0x08004bed
 8004b18:	08004bed 	.word	0x08004bed
 8004b1c:	08004bed 	.word	0x08004bed
 8004b20:	08004bed 	.word	0x08004bed
 8004b24:	08004bed 	.word	0x08004bed
 8004b28:	08004bed 	.word	0x08004bed
 8004b2c:	08004bed 	.word	0x08004bed
 8004b30:	08004bc1 	.word	0x08004bc1
 8004b34:	08004bed 	.word	0x08004bed
 8004b38:	08004bed 	.word	0x08004bed
 8004b3c:	08004bed 	.word	0x08004bed
 8004b40:	08004bed 	.word	0x08004bed
 8004b44:	08004bed 	.word	0x08004bed
 8004b48:	08004bed 	.word	0x08004bed
 8004b4c:	08004bed 	.word	0x08004bed
 8004b50:	08004bd7 	.word	0x08004bd7
 8004b54:	08004bed 	.word	0x08004bed
 8004b58:	08004bed 	.word	0x08004bed
 8004b5c:	08004bed 	.word	0x08004bed
 8004b60:	08004bed 	.word	0x08004bed
 8004b64:	08004bed 	.word	0x08004bed
 8004b68:	08004bed 	.word	0x08004bed
 8004b6c:	08004bed 	.word	0x08004bed
 8004b70:	08004bf5 	.word	0x08004bf5
 8004b74:	08004bed 	.word	0x08004bed
 8004b78:	08004bed 	.word	0x08004bed
 8004b7c:	08004bed 	.word	0x08004bed
 8004b80:	08004bed 	.word	0x08004bed
 8004b84:	08004bed 	.word	0x08004bed
 8004b88:	08004bed 	.word	0x08004bed
 8004b8c:	08004bed 	.word	0x08004bed
 8004b90:	08004bf5 	.word	0x08004bf5
 8004b94:	08004bed 	.word	0x08004bed
 8004b98:	08004bed 	.word	0x08004bed
 8004b9c:	08004bed 	.word	0x08004bed
 8004ba0:	08004bed 	.word	0x08004bed
 8004ba4:	08004bed 	.word	0x08004bed
 8004ba8:	08004bed 	.word	0x08004bed
 8004bac:	08004bed 	.word	0x08004bed
 8004bb0:	08004bf5 	.word	0x08004bf5
 8004bb4:	58024400 	.word	0x58024400
 8004bb8:	58024800 	.word	0x58024800
 8004bbc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 fdcb 	bl	8006764 <RCCEx_PLL2_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004bd4:	e00f      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bda:	3328      	adds	r3, #40	; 0x28
 8004bdc:	2101      	movs	r1, #1
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 fe72 	bl	80068c8 <RCCEx_PLL3_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004bea:	e004      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004bfe:	4bbf      	ldr	r3, [pc, #764]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c02:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c0c:	4abb      	ldr	r2, [pc, #748]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	6553      	str	r3, [r2, #84]	; 0x54
 8004c12:	e003      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	f002 0302 	and.w	r3, r2, #2
 8004c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	d041      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c42:	2b05      	cmp	r3, #5
 8004c44:	d824      	bhi.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004c46:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4c:	08004c99 	.word	0x08004c99
 8004c50:	08004c65 	.word	0x08004c65
 8004c54:	08004c7b 	.word	0x08004c7b
 8004c58:	08004c99 	.word	0x08004c99
 8004c5c:	08004c99 	.word	0x08004c99
 8004c60:	08004c99 	.word	0x08004c99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c68:	3308      	adds	r3, #8
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f001 fd79 	bl	8006764 <RCCEx_PLL2_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c78:	e00f      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c7e:	3328      	adds	r3, #40	; 0x28
 8004c80:	2101      	movs	r1, #1
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 fe20 	bl	80068c8 <RCCEx_PLL3_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c8e:	e004      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c96:	e000      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ca2:	4b96      	ldr	r3, [pc, #600]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	f023 0107 	bic.w	r1, r3, #7
 8004caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb0:	4a92      	ldr	r2, [pc, #584]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	6553      	str	r3, [r2, #84]	; 0x54
 8004cb6:	e003      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f002 0304 	and.w	r3, r2, #4
 8004ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cd6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	d044      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce8:	2b05      	cmp	r3, #5
 8004cea:	d825      	bhi.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d41 	.word	0x08004d41
 8004cf8:	08004d0d 	.word	0x08004d0d
 8004cfc:	08004d23 	.word	0x08004d23
 8004d00:	08004d41 	.word	0x08004d41
 8004d04:	08004d41 	.word	0x08004d41
 8004d08:	08004d41 	.word	0x08004d41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d10:	3308      	adds	r3, #8
 8004d12:	2101      	movs	r1, #1
 8004d14:	4618      	mov	r0, r3
 8004d16:	f001 fd25 	bl	8006764 <RCCEx_PLL2_Config>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d20:	e00f      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d26:	3328      	adds	r3, #40	; 0x28
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 fdcc 	bl	80068c8 <RCCEx_PLL3_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d36:	e004      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d3e:	e000      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10b      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d4a:	4b6c      	ldr	r3, [pc, #432]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4e:	f023 0107 	bic.w	r1, r3, #7
 8004d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	4a68      	ldr	r2, [pc, #416]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8004d60:	e003      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	f002 0320 	and.w	r3, r2, #32
 8004d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4313      	orrs	r3, r2
 8004d88:	d055      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d96:	d033      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d9c:	d82c      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da2:	d02f      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da8:	d826      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004daa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dae:	d02b      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004db0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004db4:	d820      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dba:	d012      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dc0:	d81a      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d022      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dca:	d115      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f001 fcc5 	bl	8006764 <RCCEx_PLL2_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004de0:	e015      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de6:	3328      	adds	r3, #40	; 0x28
 8004de8:	2102      	movs	r1, #2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 fd6c 	bl	80068c8 <RCCEx_PLL3_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004df6:	e00a      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004dfe:	e006      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004e00:	bf00      	nop
 8004e02:	e004      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004e04:	bf00      	nop
 8004e06:	e002      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004e08:	bf00      	nop
 8004e0a:	e000      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e16:	4b39      	ldr	r3, [pc, #228]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e26:	4a35      	ldr	r2, [pc, #212]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6553      	str	r3, [r2, #84]	; 0x54
 8004e2c:	e003      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e32:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004e42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e46:	2300      	movs	r3, #0
 8004e48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e4c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004e50:	460b      	mov	r3, r1
 8004e52:	4313      	orrs	r3, r2
 8004e54:	d058      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e62:	d033      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004e64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e68:	d82c      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6e:	d02f      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e74:	d826      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004e76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e7a:	d02b      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004e7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e80:	d820      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e86:	d012      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8c:	d81a      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d022      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e96:	d115      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 fc5f 	bl	8006764 <RCCEx_PLL2_Config>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004eac:	e015      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb2:	3328      	adds	r3, #40	; 0x28
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f001 fd06 	bl	80068c8 <RCCEx_PLL3_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ec2:	e00a      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004eca:	e006      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004ecc:	bf00      	nop
 8004ece:	e004      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004ed0:	bf00      	nop
 8004ed2:	e002      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004ed4:	bf00      	nop
 8004ed6:	e000      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10e      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ee2:	4b06      	ldr	r3, [pc, #24]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ef2:	4a02      	ldr	r2, [pc, #8]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef8:	e006      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004efa:	bf00      	nop
 8004efc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004f14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004f22:	460b      	mov	r3, r1
 8004f24:	4313      	orrs	r3, r2
 8004f26:	d055      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f34:	d033      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004f36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f3a:	d82c      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f40:	d02f      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f46:	d826      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004f48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f4c:	d02b      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004f4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f52:	d820      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f58:	d012      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f5e:	d81a      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d022      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f68:	d115      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f6e:	3308      	adds	r3, #8
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 fbf6 	bl	8006764 <RCCEx_PLL2_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f7e:	e015      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f84:	3328      	adds	r3, #40	; 0x28
 8004f86:	2102      	movs	r1, #2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f001 fc9d 	bl	80068c8 <RCCEx_PLL3_Config>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f94:	e00a      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f9c:	e006      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004f9e:	bf00      	nop
 8004fa0:	e004      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004fa2:	bf00      	nop
 8004fa4:	e002      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004fa6:	bf00      	nop
 8004fa8:	e000      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10b      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004fb4:	4ba0      	ldr	r3, [pc, #640]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fc4:	4a9c      	ldr	r2, [pc, #624]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004fca:	e003      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	f002 0308 	and.w	r3, r2, #8
 8004fe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004fea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	d01e      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005000:	d10c      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005006:	3328      	adds	r3, #40	; 0x28
 8005008:	2102      	movs	r1, #2
 800500a:	4618      	mov	r0, r3
 800500c:	f001 fc5c 	bl	80068c8 <RCCEx_PLL3_Config>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800501c:	4b86      	ldr	r3, [pc, #536]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005020:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800502c:	4a82      	ldr	r2, [pc, #520]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800502e:	430b      	orrs	r3, r1
 8005030:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	f002 0310 	and.w	r3, r2, #16
 800503e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005042:	2300      	movs	r3, #0
 8005044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005048:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800504c:	460b      	mov	r3, r1
 800504e:	4313      	orrs	r3, r2
 8005050:	d01e      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800505a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505e:	d10c      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005064:	3328      	adds	r3, #40	; 0x28
 8005066:	2102      	movs	r1, #2
 8005068:	4618      	mov	r0, r3
 800506a:	f001 fc2d 	bl	80068c8 <RCCEx_PLL3_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800507a:	4b6f      	ldr	r3, [pc, #444]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800508a:	4a6b      	ldr	r2, [pc, #428]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800508c:	430b      	orrs	r3, r1
 800508e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800509c:	67bb      	str	r3, [r7, #120]	; 0x78
 800509e:	2300      	movs	r3, #0
 80050a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050a2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80050a6:	460b      	mov	r3, r1
 80050a8:	4313      	orrs	r3, r2
 80050aa:	d03e      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80050ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050b8:	d022      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80050ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050be:	d81b      	bhi.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c8:	d00b      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80050ca:	e015      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d0:	3308      	adds	r3, #8
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 fb45 	bl	8006764 <RCCEx_PLL2_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80050e0:	e00f      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e6:	3328      	adds	r3, #40	; 0x28
 80050e8:	2102      	movs	r1, #2
 80050ea:	4618      	mov	r0, r3
 80050ec:	f001 fbec 	bl	80068c8 <RCCEx_PLL3_Config>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80050f6:	e004      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80050fe:	e000      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005102:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10b      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800510a:	4b4b      	ldr	r3, [pc, #300]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800510c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005116:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800511a:	4a47      	ldr	r2, [pc, #284]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800511c:	430b      	orrs	r3, r1
 800511e:	6593      	str	r3, [r2, #88]	; 0x58
 8005120:	e003      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005122:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005126:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800512a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005136:	673b      	str	r3, [r7, #112]	; 0x70
 8005138:	2300      	movs	r3, #0
 800513a:	677b      	str	r3, [r7, #116]	; 0x74
 800513c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005140:	460b      	mov	r3, r1
 8005142:	4313      	orrs	r3, r2
 8005144:	d03b      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800514e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005152:	d01f      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005154:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005158:	d818      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800515a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515e:	d003      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005164:	d007      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005166:	e011      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005168:	4b33      	ldr	r3, [pc, #204]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	4a32      	ldr	r2, [pc, #200]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800516e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005174:	e00f      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800517a:	3328      	adds	r3, #40	; 0x28
 800517c:	2101      	movs	r1, #1
 800517e:	4618      	mov	r0, r3
 8005180:	f001 fba2 	bl	80068c8 <RCCEx_PLL3_Config>
 8005184:	4603      	mov	r3, r0
 8005186:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800518a:	e004      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005192:	e000      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005196:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800519e:	4b26      	ldr	r3, [pc, #152]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80051a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ae:	4a22      	ldr	r2, [pc, #136]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051b0:	430b      	orrs	r3, r1
 80051b2:	6553      	str	r3, [r2, #84]	; 0x54
 80051b4:	e003      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80051be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80051ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80051cc:	2300      	movs	r3, #0
 80051ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051d0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80051d4:	460b      	mov	r3, r1
 80051d6:	4313      	orrs	r3, r2
 80051d8:	d034      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80051da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e8:	d007      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80051ea:	e011      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ec:	4b12      	ldr	r3, [pc, #72]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	4a11      	ldr	r2, [pc, #68]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80051f8:	e00e      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051fe:	3308      	adds	r3, #8
 8005200:	2102      	movs	r1, #2
 8005202:	4618      	mov	r0, r3
 8005204:	f001 faae 	bl	8006764 <RCCEx_PLL2_Config>
 8005208:	4603      	mov	r3, r0
 800520a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800520e:	e003      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005218:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10d      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005220:	4b05      	ldr	r3, [pc, #20]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005224:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800522c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522e:	4a02      	ldr	r2, [pc, #8]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005230:	430b      	orrs	r3, r1
 8005232:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005234:	e006      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005236:	bf00      	nop
 8005238:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005240:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005250:	663b      	str	r3, [r7, #96]	; 0x60
 8005252:	2300      	movs	r3, #0
 8005254:	667b      	str	r3, [r7, #100]	; 0x64
 8005256:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800525a:	460b      	mov	r3, r1
 800525c:	4313      	orrs	r3, r2
 800525e:	d00c      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005264:	3328      	adds	r3, #40	; 0x28
 8005266:	2102      	movs	r1, #2
 8005268:	4618      	mov	r0, r3
 800526a:	f001 fb2d 	bl	80068c8 <RCCEx_PLL3_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800527a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005286:	65bb      	str	r3, [r7, #88]	; 0x58
 8005288:	2300      	movs	r3, #0
 800528a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800528c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005290:	460b      	mov	r3, r1
 8005292:	4313      	orrs	r3, r2
 8005294:	d036      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800529c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a0:	d018      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80052a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a6:	d811      	bhi.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80052a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ac:	d014      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80052ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b2:	d80b      	bhi.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d011      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80052b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052bc:	d106      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052be:	4bb7      	ldr	r3, [pc, #732]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	4ab6      	ldr	r2, [pc, #728]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80052ca:	e008      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80052d2:	e004      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80052d4:	bf00      	nop
 80052d6:	e002      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80052d8:	bf00      	nop
 80052da:	e000      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80052dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10a      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052e6:	4bad      	ldr	r3, [pc, #692]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f4:	4aa9      	ldr	r2, [pc, #676]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052f6:	430b      	orrs	r3, r1
 80052f8:	6553      	str	r3, [r2, #84]	; 0x54
 80052fa:	e003      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005300:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005310:	653b      	str	r3, [r7, #80]	; 0x50
 8005312:	2300      	movs	r3, #0
 8005314:	657b      	str	r3, [r7, #84]	; 0x54
 8005316:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800531a:	460b      	mov	r3, r1
 800531c:	4313      	orrs	r3, r2
 800531e:	d009      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005320:	4b9e      	ldr	r3, [pc, #632]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005324:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800532c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532e:	4a9b      	ldr	r2, [pc, #620]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005330:	430b      	orrs	r3, r1
 8005332:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005340:	64bb      	str	r3, [r7, #72]	; 0x48
 8005342:	2300      	movs	r3, #0
 8005344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005346:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800534a:	460b      	mov	r3, r1
 800534c:	4313      	orrs	r3, r2
 800534e:	d009      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005350:	4b92      	ldr	r3, [pc, #584]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005354:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800535e:	4a8f      	ldr	r2, [pc, #572]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005360:	430b      	orrs	r3, r1
 8005362:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005370:	643b      	str	r3, [r7, #64]	; 0x40
 8005372:	2300      	movs	r3, #0
 8005374:	647b      	str	r3, [r7, #68]	; 0x44
 8005376:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800537a:	460b      	mov	r3, r1
 800537c:	4313      	orrs	r3, r2
 800537e:	d00e      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005380:	4b86      	ldr	r3, [pc, #536]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	4a85      	ldr	r2, [pc, #532]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005386:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800538a:	6113      	str	r3, [r2, #16]
 800538c:	4b83      	ldr	r3, [pc, #524]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800538e:	6919      	ldr	r1, [r3, #16]
 8005390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005394:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005398:	4a80      	ldr	r2, [pc, #512]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800539a:	430b      	orrs	r3, r1
 800539c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800539e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80053aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80053ac:	2300      	movs	r3, #0
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80053b4:	460b      	mov	r3, r1
 80053b6:	4313      	orrs	r3, r2
 80053b8:	d009      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80053ba:	4b78      	ldr	r3, [pc, #480]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053be:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80053c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c8:	4a74      	ldr	r2, [pc, #464]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053ca:	430b      	orrs	r3, r1
 80053cc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80053da:	633b      	str	r3, [r7, #48]	; 0x30
 80053dc:	2300      	movs	r3, #0
 80053de:	637b      	str	r3, [r7, #52]	; 0x34
 80053e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80053e4:	460b      	mov	r3, r1
 80053e6:	4313      	orrs	r3, r2
 80053e8:	d00a      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053ea:	4b6c      	ldr	r3, [pc, #432]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80053f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fa:	4a68      	ldr	r2, [pc, #416]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053fc:	430b      	orrs	r3, r1
 80053fe:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	2100      	movs	r1, #0
 800540a:	62b9      	str	r1, [r7, #40]	; 0x28
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005412:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005416:	460b      	mov	r3, r1
 8005418:	4313      	orrs	r3, r2
 800541a:	d011      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800541c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005420:	3308      	adds	r3, #8
 8005422:	2100      	movs	r1, #0
 8005424:	4618      	mov	r0, r3
 8005426:	f001 f99d 	bl	8006764 <RCCEx_PLL2_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005430:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005438:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800543c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	2100      	movs	r1, #0
 800544a:	6239      	str	r1, [r7, #32]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005456:	460b      	mov	r3, r1
 8005458:	4313      	orrs	r3, r2
 800545a:	d011      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800545c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005460:	3308      	adds	r3, #8
 8005462:	2101      	movs	r1, #1
 8005464:	4618      	mov	r0, r3
 8005466:	f001 f97d 	bl	8006764 <RCCEx_PLL2_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005470:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005478:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800547c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	2100      	movs	r1, #0
 800548a:	61b9      	str	r1, [r7, #24]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	61fb      	str	r3, [r7, #28]
 8005492:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005496:	460b      	mov	r3, r1
 8005498:	4313      	orrs	r3, r2
 800549a:	d011      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800549c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a0:	3308      	adds	r3, #8
 80054a2:	2102      	movs	r1, #2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 f95d 	bl	8006764 <RCCEx_PLL2_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80054b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80054c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	2100      	movs	r1, #0
 80054ca:	6139      	str	r1, [r7, #16]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80054d6:	460b      	mov	r3, r1
 80054d8:	4313      	orrs	r3, r2
 80054da:	d011      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e0:	3328      	adds	r3, #40	; 0x28
 80054e2:	2100      	movs	r1, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 f9ef 	bl	80068c8 <RCCEx_PLL3_Config>
 80054ea:	4603      	mov	r3, r0
 80054ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80054f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	2100      	movs	r1, #0
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005516:	460b      	mov	r3, r1
 8005518:	4313      	orrs	r3, r2
 800551a:	d011      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800551c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005520:	3328      	adds	r3, #40	; 0x28
 8005522:	2101      	movs	r1, #1
 8005524:	4618      	mov	r0, r3
 8005526:	f001 f9cf 	bl	80068c8 <RCCEx_PLL3_Config>
 800552a:	4603      	mov	r3, r0
 800552c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005530:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005538:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800553c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	2100      	movs	r1, #0
 800554a:	6039      	str	r1, [r7, #0]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	607b      	str	r3, [r7, #4]
 8005552:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005556:	460b      	mov	r3, r1
 8005558:	4313      	orrs	r3, r2
 800555a:	d011      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800555c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005560:	3328      	adds	r3, #40	; 0x28
 8005562:	2102      	movs	r1, #2
 8005564:	4618      	mov	r0, r3
 8005566:	f001 f9af 	bl	80068c8 <RCCEx_PLL3_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005570:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005578:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800557c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8005580:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	e000      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
}
 800558e:	4618      	mov	r0, r3
 8005590:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005594:	46bd      	mov	sp, r7
 8005596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800559a:	bf00      	nop
 800559c:	58024400 	.word	0x58024400

080055a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b090      	sub	sp, #64	; 0x40
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80055aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055ae:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80055b2:	430b      	orrs	r3, r1
 80055b4:	f040 8094 	bne.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80055b8:	4b9b      	ldr	r3, [pc, #620]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	f200 8087 	bhi.w	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80055ca:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80055cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d0:	080055e5 	.word	0x080055e5
 80055d4:	0800560d 	.word	0x0800560d
 80055d8:	08005635 	.word	0x08005635
 80055dc:	080056d1 	.word	0x080056d1
 80055e0:	0800565d 	.word	0x0800565d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055e4:	4b90      	ldr	r3, [pc, #576]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055f0:	d108      	bne.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 ff62 	bl	80064c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005600:	f000 bc93 	b.w	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005608:	f000 bc8f 	b.w	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800560c:	4b86      	ldr	r3, [pc, #536]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005618:	d108      	bne.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800561a:	f107 0318 	add.w	r3, r7, #24
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fca6 	bl	8005f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005628:	f000 bc7f 	b.w	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005630:	f000 bc7b 	b.w	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005634:	4b7c      	ldr	r3, [pc, #496]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800563c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005640:	d108      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005642:	f107 030c 	add.w	r3, r7, #12
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fde6 	bl	8006218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005650:	f000 bc6b 	b.w	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005654:	2300      	movs	r3, #0
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005658:	f000 bc67 	b.w	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800565c:	4b72      	ldr	r3, [pc, #456]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800565e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005664:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005666:	4b70      	ldr	r3, [pc, #448]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b04      	cmp	r3, #4
 8005670:	d10c      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	2b00      	cmp	r3, #0
 8005676:	d109      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005678:	4b6b      	ldr	r3, [pc, #428]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	08db      	lsrs	r3, r3, #3
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	4a6a      	ldr	r2, [pc, #424]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005684:	fa22 f303 	lsr.w	r3, r2, r3
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568a:	e01f      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800568c:	4b66      	ldr	r3, [pc, #408]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005698:	d106      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800569a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056a0:	d102      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80056a2:	4b63      	ldr	r3, [pc, #396]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a6:	e011      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056a8:	4b5f      	ldr	r3, [pc, #380]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056b4:	d106      	bne.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80056b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056bc:	d102      	bne.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80056be:	4b5d      	ldr	r3, [pc, #372]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c2:	e003      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80056c8:	f000 bc2f 	b.w	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80056cc:	f000 bc2d 	b.w	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80056d0:	4b59      	ldr	r3, [pc, #356]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d4:	f000 bc29 	b.w	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056dc:	f000 bc25 	b.w	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80056e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056e4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80056e8:	430b      	orrs	r3, r1
 80056ea:	f040 80a7 	bne.w	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80056ee:	4b4e      	ldr	r3, [pc, #312]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80056f6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056fe:	d054      	beq.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005706:	f200 808b 	bhi.w	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005710:	f000 8083 	beq.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800571a:	f200 8081 	bhi.w	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005724:	d02f      	beq.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800572c:	d878      	bhi.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800573a:	d012      	beq.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800573c:	e070      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800573e:	4b3a      	ldr	r3, [pc, #232]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800574a:	d107      	bne.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800574c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005750:	4618      	mov	r0, r3
 8005752:	f000 feb5 	bl	80064c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800575a:	e3e6      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005760:	e3e3      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005762:	4b31      	ldr	r3, [pc, #196]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800576a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800576e:	d107      	bne.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005770:	f107 0318 	add.w	r3, r7, #24
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fbfb 	bl	8005f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800577e:	e3d4      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005780:	2300      	movs	r3, #0
 8005782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005784:	e3d1      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005786:	4b28      	ldr	r3, [pc, #160]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800578e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005792:	d107      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005794:	f107 030c 	add.w	r3, r7, #12
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fd3d 	bl	8006218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057a2:	e3c2      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057a8:	e3bf      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057aa:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80057ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057b4:	4b1c      	ldr	r3, [pc, #112]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d10c      	bne.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80057c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057c6:	4b18      	ldr	r3, [pc, #96]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	08db      	lsrs	r3, r3, #3
 80057cc:	f003 0303 	and.w	r3, r3, #3
 80057d0:	4a16      	ldr	r2, [pc, #88]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80057d2:	fa22 f303 	lsr.w	r3, r2, r3
 80057d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d8:	e01e      	b.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e6:	d106      	bne.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80057e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ee:	d102      	bne.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80057f0:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f4:	e010      	b.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057f6:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005802:	d106      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800580a:	d102      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800580c:	4b09      	ldr	r3, [pc, #36]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005810:	e002      	b.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005816:	e388      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005818:	e387      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800581a:	4b07      	ldr	r3, [pc, #28]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800581e:	e384      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005824:	e381      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005826:	bf00      	nop
 8005828:	58024400 	.word	0x58024400
 800582c:	03d09000 	.word	0x03d09000
 8005830:	003d0900 	.word	0x003d0900
 8005834:	017d7840 	.word	0x017d7840
 8005838:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800583c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005840:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005844:	430b      	orrs	r3, r1
 8005846:	f040 809c 	bne.w	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800584a:	4b9e      	ldr	r3, [pc, #632]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800584c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005852:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800585a:	d054      	beq.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005862:	f200 808b 	bhi.w	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800586c:	f000 8083 	beq.w	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005876:	f200 8081 	bhi.w	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005880:	d02f      	beq.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005888:	d878      	bhi.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005896:	d012      	beq.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005898:	e070      	b.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800589a:	4b8a      	ldr	r3, [pc, #552]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058a6:	d107      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fe07 	bl	80064c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058b6:	e338      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058bc:	e335      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058be:	4b81      	ldr	r3, [pc, #516]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ca:	d107      	bne.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058cc:	f107 0318 	add.w	r3, r7, #24
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fb4d 	bl	8005f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058da:	e326      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058e0:	e323      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058e2:	4b78      	ldr	r3, [pc, #480]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ee:	d107      	bne.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058f0:	f107 030c 	add.w	r3, r7, #12
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fc8f 	bl	8006218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058fe:	e314      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005904:	e311      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005906:	4b6f      	ldr	r3, [pc, #444]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800590e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005910:	4b6c      	ldr	r3, [pc, #432]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b04      	cmp	r3, #4
 800591a:	d10c      	bne.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800591c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005922:	4b68      	ldr	r3, [pc, #416]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	08db      	lsrs	r3, r3, #3
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	4a66      	ldr	r2, [pc, #408]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800592e:	fa22 f303 	lsr.w	r3, r2, r3
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005934:	e01e      	b.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005936:	4b63      	ldr	r3, [pc, #396]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005942:	d106      	bne.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800594a:	d102      	bne.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800594c:	4b5f      	ldr	r3, [pc, #380]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005950:	e010      	b.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005952:	4b5c      	ldr	r3, [pc, #368]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800595e:	d106      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8005960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005966:	d102      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005968:	4b59      	ldr	r3, [pc, #356]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596c:	e002      	b.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005972:	e2da      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005974:	e2d9      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005976:	4b57      	ldr	r3, [pc, #348]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800597a:	e2d6      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005980:	e2d3      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005986:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800598a:	430b      	orrs	r3, r1
 800598c:	f040 80a7 	bne.w	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005990:	4b4c      	ldr	r3, [pc, #304]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005994:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005998:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059a0:	d055      	beq.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059a8:	f200 8096 	bhi.w	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059b2:	f000 8084 	beq.w	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059bc:	f200 808c 	bhi.w	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c6:	d030      	beq.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80059c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ce:	f200 8083 	bhi.w	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059de:	d012      	beq.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80059e0:	e07a      	b.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059e2:	4b38      	ldr	r3, [pc, #224]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059ee:	d107      	bne.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fd63 	bl	80064c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059fe:	e294      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a04:	e291      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a06:	4b2f      	ldr	r3, [pc, #188]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a12:	d107      	bne.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a14:	f107 0318 	add.w	r3, r7, #24
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 faa9 	bl	8005f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a22:	e282      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a28:	e27f      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a2a:	4b26      	ldr	r3, [pc, #152]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a36:	d107      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a38:	f107 030c 	add.w	r3, r7, #12
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fbeb 	bl	8006218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a46:	e270      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a4c:	e26d      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a4e:	4b1d      	ldr	r3, [pc, #116]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a58:	4b1a      	ldr	r3, [pc, #104]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d10c      	bne.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d109      	bne.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a6a:	4b16      	ldr	r3, [pc, #88]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	08db      	lsrs	r3, r3, #3
 8005a70:	f003 0303 	and.w	r3, r3, #3
 8005a74:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005a76:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a7c:	e01e      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8a:	d106      	bne.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a92:	d102      	bne.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a94:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a98:	e010      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aa6:	d106      	bne.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aae:	d102      	bne.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ab4:	e002      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005aba:	e236      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005abc:	e235      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005abe:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ac2:	e232      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005ac4:	58024400 	.word	0x58024400
 8005ac8:	03d09000 	.word	0x03d09000
 8005acc:	003d0900 	.word	0x003d0900
 8005ad0:	017d7840 	.word	0x017d7840
 8005ad4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005adc:	e225      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ae2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	f040 8085 	bne.w	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005aec:	4b9c      	ldr	r3, [pc, #624]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005af4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005afc:	d06b      	beq.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b04:	d874      	bhi.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b0c:	d056      	beq.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b14:	d86c      	bhi.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b1c:	d03b      	beq.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b24:	d864      	bhi.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b2c:	d021      	beq.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b34:	d85c      	bhi.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d004      	beq.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b42:	d004      	beq.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8005b44:	e054      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005b46:	f7fe fb75 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8005b4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b4c:	e1ed      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b4e:	4b84      	ldr	r3, [pc, #528]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b5a:	d107      	bne.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b5c:	f107 0318 	add.w	r3, r7, #24
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fa05 	bl	8005f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b6a:	e1de      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b70:	e1db      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b72:	4b7b      	ldr	r3, [pc, #492]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b80:	f107 030c 	add.w	r3, r7, #12
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fb47 	bl	8006218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b8e:	e1cc      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b94:	e1c9      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b96:	4b72      	ldr	r3, [pc, #456]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d109      	bne.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ba2:	4b6f      	ldr	r3, [pc, #444]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	08db      	lsrs	r3, r3, #3
 8005ba8:	f003 0303 	and.w	r3, r3, #3
 8005bac:	4a6d      	ldr	r2, [pc, #436]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005bae:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bb4:	e1b9      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bba:	e1b6      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005bbc:	4b68      	ldr	r3, [pc, #416]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bc8:	d102      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8005bca:	4b67      	ldr	r3, [pc, #412]	; (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bce:	e1ac      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bd4:	e1a9      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005bd6:	4b62      	ldr	r3, [pc, #392]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005be2:	d102      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8005be4:	4b61      	ldr	r3, [pc, #388]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005be8:	e19f      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bee:	e19c      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bf4:	e199      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005bf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bfa:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	d173      	bne.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005c02:	4b57      	ldr	r3, [pc, #348]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c0a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c12:	d02f      	beq.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c1a:	d863      	bhi.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d004      	beq.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c28:	d012      	beq.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8005c2a:	e05b      	b.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c2c:	4b4c      	ldr	r3, [pc, #304]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c38:	d107      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c3a:	f107 0318 	add.w	r3, r7, #24
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 f996 	bl	8005f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c48:	e16f      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c4e:	e16c      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c50:	4b43      	ldr	r3, [pc, #268]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c5c:	d107      	bne.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c5e:	f107 030c 	add.w	r3, r7, #12
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fad8 	bl	8006218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c6c:	e15d      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c72:	e15a      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c74:	4b3a      	ldr	r3, [pc, #232]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c7e:	4b38      	ldr	r3, [pc, #224]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d10c      	bne.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c90:	4b33      	ldr	r3, [pc, #204]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	08db      	lsrs	r3, r3, #3
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	4a32      	ldr	r2, [pc, #200]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca2:	e01e      	b.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ca4:	4b2e      	ldr	r3, [pc, #184]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb0:	d106      	bne.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cb8:	d102      	bne.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005cba:	4b2b      	ldr	r3, [pc, #172]	; (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cbe:	e010      	b.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005cc0:	4b27      	ldr	r3, [pc, #156]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ccc:	d106      	bne.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cd4:	d102      	bne.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005cd6:	4b25      	ldr	r3, [pc, #148]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cda:	e002      	b.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005ce0:	e123      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005ce2:	e122      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce8:	e11f      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cee:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	d13c      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005cf6:	4b1a      	ldr	r3, [pc, #104]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cfe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d004      	beq.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0c:	d012      	beq.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8005d0e:	e023      	b.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d10:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d1c:	d107      	bne.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fbcc 	bl	80064c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d2c:	e0fd      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d32:	e0fa      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d34:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d40:	d107      	bne.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d42:	f107 0318 	add.w	r3, r7, #24
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 f912 	bl	8005f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d50:	e0eb      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d56:	e0e8      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d5c:	e0e5      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005d5e:	bf00      	nop
 8005d60:	58024400 	.word	0x58024400
 8005d64:	03d09000 	.word	0x03d09000
 8005d68:	003d0900 	.word	0x003d0900
 8005d6c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d74:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	f040 8085 	bne.w	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005d7e:	4b6d      	ldr	r3, [pc, #436]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d82:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005d86:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d8e:	d06b      	beq.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d96:	d874      	bhi.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9e:	d056      	beq.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da6:	d86c      	bhi.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dae:	d03b      	beq.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8005db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005db6:	d864      	bhi.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dbe:	d021      	beq.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dc6:	d85c      	bhi.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d004      	beq.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dd4:	d004      	beq.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005dd6:	e054      	b.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005dd8:	f000 f8b4 	bl	8005f44 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ddc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005dde:	e0a4      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005de0:	4b54      	ldr	r3, [pc, #336]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dec:	d107      	bne.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dee:	f107 0318 	add.w	r3, r7, #24
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 f8bc 	bl	8005f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dfc:	e095      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e02:	e092      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e04:	4b4b      	ldr	r3, [pc, #300]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e10:	d107      	bne.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e12:	f107 030c 	add.w	r3, r7, #12
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 f9fe 	bl	8006218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e20:	e083      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e26:	e080      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e28:	4b42      	ldr	r3, [pc, #264]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d109      	bne.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e34:	4b3f      	ldr	r3, [pc, #252]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	08db      	lsrs	r3, r3, #3
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	4a3e      	ldr	r2, [pc, #248]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005e40:	fa22 f303 	lsr.w	r3, r2, r3
 8005e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e46:	e070      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e4c:	e06d      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005e4e:	4b39      	ldr	r3, [pc, #228]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5a:	d102      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8005e5c:	4b37      	ldr	r3, [pc, #220]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e60:	e063      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e66:	e060      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e68:	4b32      	ldr	r3, [pc, #200]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e74:	d102      	bne.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8005e76:	4b32      	ldr	r3, [pc, #200]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e7a:	e056      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e80:	e053      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e86:	e050      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e8c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005e90:	430b      	orrs	r3, r1
 8005e92:	d148      	bne.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005e94:	4b27      	ldr	r3, [pc, #156]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ea4:	d02a      	beq.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eac:	d838      	bhi.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d004      	beq.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eba:	d00d      	beq.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005ebc:	e030      	b.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ebe:	4b1d      	ldr	r3, [pc, #116]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eca:	d102      	bne.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8005ecc:	4b1c      	ldr	r3, [pc, #112]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ed0:	e02b      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ed6:	e028      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ed8:	4b16      	ldr	r3, [pc, #88]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ee4:	d107      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fae8 	bl	80064c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ef4:	e019      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005efa:	e016      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005efc:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f08:	d107      	bne.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f0a:	f107 0318 	add.w	r3, r7, #24
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 f82e 	bl	8005f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f18:	e007      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f1e:	e004      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f24:	e001      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3740      	adds	r7, #64	; 0x40
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	58024400 	.word	0x58024400
 8005f38:	03d09000 	.word	0x03d09000
 8005f3c:	003d0900 	.word	0x003d0900
 8005f40:	017d7840 	.word	0x017d7840

08005f44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f48:	f7fe f944 	bl	80041d4 <HAL_RCC_GetHCLKFreq>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	091b      	lsrs	r3, r3, #4
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	4904      	ldr	r1, [pc, #16]	; (8005f6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f5a:	5ccb      	ldrb	r3, [r1, r3]
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	58024400 	.word	0x58024400
 8005f6c:	080077c8 	.word	0x080077c8

08005f70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b089      	sub	sp, #36	; 0x24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f78:	4ba1      	ldr	r3, [pc, #644]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005f82:	4b9f      	ldr	r3, [pc, #636]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	0b1b      	lsrs	r3, r3, #12
 8005f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005f8e:	4b9c      	ldr	r3, [pc, #624]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	091b      	lsrs	r3, r3, #4
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005f9a:	4b99      	ldr	r3, [pc, #612]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	08db      	lsrs	r3, r3, #3
 8005fa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 8111 	beq.w	80061e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	f000 8083 	beq.w	80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	f200 80a1 	bhi.w	8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d056      	beq.n	8006088 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005fda:	e099      	b.n	8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fdc:	4b88      	ldr	r3, [pc, #544]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d02d      	beq.n	8006044 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fe8:	4b85      	ldr	r3, [pc, #532]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	08db      	lsrs	r3, r3, #3
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	4a84      	ldr	r2, [pc, #528]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	ee07 3a90 	vmov	s15, r3
 8006000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006012:	4b7b      	ldr	r3, [pc, #492]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006022:	ed97 6a03 	vldr	s12, [r7, #12]
 8006026:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800602a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006042:	e087      	b.n	8006154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800620c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006056:	4b6a      	ldr	r3, [pc, #424]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006066:	ed97 6a03 	vldr	s12, [r7, #12]
 800606a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800606e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800607a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006086:	e065      	b.n	8006154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006092:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609a:	4b59      	ldr	r3, [pc, #356]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ca:	e043      	b.n	8006154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80060da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060de:	4b48      	ldr	r3, [pc, #288]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e6:	ee07 3a90 	vmov	s15, r3
 80060ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80060f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800610e:	e021      	b.n	8006154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800611e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006122:	4b37      	ldr	r3, [pc, #220]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006132:	ed97 6a03 	vldr	s12, [r7, #12]
 8006136:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800613a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800614a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006152:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006154:	4b2a      	ldr	r3, [pc, #168]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	0a5b      	lsrs	r3, r3, #9
 800615a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800616a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800616e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800617a:	ee17 2a90 	vmov	r2, s15
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006182:	4b1f      	ldr	r3, [pc, #124]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	0c1b      	lsrs	r3, r3, #16
 8006188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800619c:	edd7 6a07 	vldr	s13, [r7, #28]
 80061a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a8:	ee17 2a90 	vmov	r2, s15
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80061b0:	4b13      	ldr	r3, [pc, #76]	; (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	0e1b      	lsrs	r3, r3, #24
 80061b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d6:	ee17 2a90 	vmov	r2, s15
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061de:	e008      	b.n	80061f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	609a      	str	r2, [r3, #8]
}
 80061f2:	bf00      	nop
 80061f4:	3724      	adds	r7, #36	; 0x24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	58024400 	.word	0x58024400
 8006204:	03d09000 	.word	0x03d09000
 8006208:	46000000 	.word	0x46000000
 800620c:	4c742400 	.word	0x4c742400
 8006210:	4a742400 	.word	0x4a742400
 8006214:	4bbebc20 	.word	0x4bbebc20

08006218 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006218:	b480      	push	{r7}
 800621a:	b089      	sub	sp, #36	; 0x24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006220:	4ba1      	ldr	r3, [pc, #644]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	f003 0303 	and.w	r3, r3, #3
 8006228:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800622a:	4b9f      	ldr	r3, [pc, #636]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	0d1b      	lsrs	r3, r3, #20
 8006230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006234:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006236:	4b9c      	ldr	r3, [pc, #624]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	0a1b      	lsrs	r3, r3, #8
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006242:	4b99      	ldr	r3, [pc, #612]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006246:	08db      	lsrs	r3, r3, #3
 8006248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	fb02 f303 	mul.w	r3, r2, r3
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 8111 	beq.w	8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b02      	cmp	r3, #2
 800626a:	f000 8083 	beq.w	8006374 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2b02      	cmp	r3, #2
 8006272:	f200 80a1 	bhi.w	80063b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d056      	beq.n	8006330 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006282:	e099      	b.n	80063b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006284:	4b88      	ldr	r3, [pc, #544]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d02d      	beq.n	80062ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006290:	4b85      	ldr	r3, [pc, #532]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	08db      	lsrs	r3, r3, #3
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	4a84      	ldr	r2, [pc, #528]	; (80064ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800629c:	fa22 f303 	lsr.w	r3, r2, r3
 80062a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	ee07 3a90 	vmov	s15, r3
 80062a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ba:	4b7b      	ldr	r3, [pc, #492]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80062ea:	e087      	b.n	80063fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80064b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80062fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fe:	4b6a      	ldr	r3, [pc, #424]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006312:	eddf 5a67 	vldr	s11, [pc, #412]	; 80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800632e:	e065      	b.n	80063fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800633e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006342:	4b59      	ldr	r3, [pc, #356]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006352:	ed97 6a03 	vldr	s12, [r7, #12]
 8006356:	eddf 5a56 	vldr	s11, [pc, #344]	; 80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800635a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800635e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800636a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006372:	e043      	b.n	80063fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80064bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006386:	4b48      	ldr	r3, [pc, #288]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006396:	ed97 6a03 	vldr	s12, [r7, #12]
 800639a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800639e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063b6:	e021      	b.n	80063fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	ee07 3a90 	vmov	s15, r3
 80063be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ca:	4b37      	ldr	r3, [pc, #220]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063da:	ed97 6a03 	vldr	s12, [r7, #12]
 80063de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80063fc:	4b2a      	ldr	r3, [pc, #168]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	0a5b      	lsrs	r3, r3, #9
 8006402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006412:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006416:	edd7 6a07 	vldr	s13, [r7, #28]
 800641a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800641e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006422:	ee17 2a90 	vmov	r2, s15
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800642a:	4b1f      	ldr	r3, [pc, #124]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	0c1b      	lsrs	r3, r3, #16
 8006430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006440:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006444:	edd7 6a07 	vldr	s13, [r7, #28]
 8006448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800644c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006450:	ee17 2a90 	vmov	r2, s15
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006458:	4b13      	ldr	r3, [pc, #76]	; (80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	0e1b      	lsrs	r3, r3, #24
 800645e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800646e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006472:	edd7 6a07 	vldr	s13, [r7, #28]
 8006476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800647a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800647e:	ee17 2a90 	vmov	r2, s15
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006486:	e008      	b.n	800649a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	609a      	str	r2, [r3, #8]
}
 800649a:	bf00      	nop
 800649c:	3724      	adds	r7, #36	; 0x24
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	58024400 	.word	0x58024400
 80064ac:	03d09000 	.word	0x03d09000
 80064b0:	46000000 	.word	0x46000000
 80064b4:	4c742400 	.word	0x4c742400
 80064b8:	4a742400 	.word	0x4a742400
 80064bc:	4bbebc20 	.word	0x4bbebc20

080064c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b089      	sub	sp, #36	; 0x24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064c8:	4ba0      	ldr	r3, [pc, #640]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	f003 0303 	and.w	r3, r3, #3
 80064d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80064d2:	4b9e      	ldr	r3, [pc, #632]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	091b      	lsrs	r3, r3, #4
 80064d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80064de:	4b9b      	ldr	r3, [pc, #620]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80064e8:	4b98      	ldr	r3, [pc, #608]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ec:	08db      	lsrs	r3, r3, #3
 80064ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	fb02 f303 	mul.w	r3, r2, r3
 80064f8:	ee07 3a90 	vmov	s15, r3
 80064fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006500:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8111 	beq.w	800672e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	2b02      	cmp	r3, #2
 8006510:	f000 8083 	beq.w	800661a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b02      	cmp	r3, #2
 8006518:	f200 80a1 	bhi.w	800665e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d056      	beq.n	80065d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006528:	e099      	b.n	800665e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800652a:	4b88      	ldr	r3, [pc, #544]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d02d      	beq.n	8006592 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006536:	4b85      	ldr	r3, [pc, #532]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	08db      	lsrs	r3, r3, #3
 800653c:	f003 0303 	and.w	r3, r3, #3
 8006540:	4a83      	ldr	r2, [pc, #524]	; (8006750 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006542:	fa22 f303 	lsr.w	r3, r2, r3
 8006546:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	ee07 3a90 	vmov	s15, r3
 8006558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006560:	4b7a      	ldr	r3, [pc, #488]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006568:	ee07 3a90 	vmov	s15, r3
 800656c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006570:	ed97 6a03 	vldr	s12, [r7, #12]
 8006574:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800657c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006590:	e087      	b.n	80066a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	ee07 3a90 	vmov	s15, r3
 8006598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006758 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80065a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a4:	4b69      	ldr	r3, [pc, #420]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ac:	ee07 3a90 	vmov	s15, r3
 80065b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80065b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065d4:	e065      	b.n	80066a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	ee07 3a90 	vmov	s15, r3
 80065dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800675c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80065e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e8:	4b58      	ldr	r3, [pc, #352]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f0:	ee07 3a90 	vmov	s15, r3
 80065f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80065fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800660c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006614:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006618:	e043      	b.n	80066a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	ee07 3a90 	vmov	s15, r3
 8006620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006624:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006760 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800662c:	4b47      	ldr	r3, [pc, #284]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006634:	ee07 3a90 	vmov	s15, r3
 8006638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800663c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006640:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800664c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800665c:	e021      	b.n	80066a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	ee07 3a90 	vmov	s15, r3
 8006664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006668:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006758 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800666c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006670:	4b36      	ldr	r3, [pc, #216]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006678:	ee07 3a90 	vmov	s15, r3
 800667c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006680:	ed97 6a03 	vldr	s12, [r7, #12]
 8006684:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800668c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800669c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80066a2:	4b2a      	ldr	r3, [pc, #168]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	0a5b      	lsrs	r3, r3, #9
 80066a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ac:	ee07 3a90 	vmov	s15, r3
 80066b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80066c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066c8:	ee17 2a90 	vmov	r2, s15
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80066d0:	4b1e      	ldr	r3, [pc, #120]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	0c1b      	lsrs	r3, r3, #16
 80066d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066da:	ee07 3a90 	vmov	s15, r3
 80066de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80066ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066f6:	ee17 2a90 	vmov	r2, s15
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80066fe:	4b13      	ldr	r3, [pc, #76]	; (800674c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	0e1b      	lsrs	r3, r3, #24
 8006704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006708:	ee07 3a90 	vmov	s15, r3
 800670c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006718:	edd7 6a07 	vldr	s13, [r7, #28]
 800671c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006724:	ee17 2a90 	vmov	r2, s15
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800672c:	e008      	b.n	8006740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	609a      	str	r2, [r3, #8]
}
 8006740:	bf00      	nop
 8006742:	3724      	adds	r7, #36	; 0x24
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	58024400 	.word	0x58024400
 8006750:	03d09000 	.word	0x03d09000
 8006754:	46000000 	.word	0x46000000
 8006758:	4c742400 	.word	0x4c742400
 800675c:	4a742400 	.word	0x4a742400
 8006760:	4bbebc20 	.word	0x4bbebc20

08006764 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006772:	4b53      	ldr	r3, [pc, #332]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	2b03      	cmp	r3, #3
 800677c:	d101      	bne.n	8006782 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e099      	b.n	80068b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006782:	4b4f      	ldr	r3, [pc, #316]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a4e      	ldr	r2, [pc, #312]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006788:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800678c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800678e:	f7fa fe1d 	bl	80013cc <HAL_GetTick>
 8006792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006794:	e008      	b.n	80067a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006796:	f7fa fe19 	bl	80013cc <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d901      	bls.n	80067a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e086      	b.n	80068b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067a8:	4b45      	ldr	r3, [pc, #276]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1f0      	bne.n	8006796 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80067b4:	4b42      	ldr	r3, [pc, #264]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	031b      	lsls	r3, r3, #12
 80067c2:	493f      	ldr	r1, [pc, #252]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	628b      	str	r3, [r1, #40]	; 0x28
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	025b      	lsls	r3, r3, #9
 80067da:	b29b      	uxth	r3, r3
 80067dc:	431a      	orrs	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	041b      	lsls	r3, r3, #16
 80067e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067ea:	431a      	orrs	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	061b      	lsls	r3, r3, #24
 80067f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067f8:	4931      	ldr	r1, [pc, #196]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80067fe:	4b30      	ldr	r3, [pc, #192]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	492d      	ldr	r1, [pc, #180]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 800680c:	4313      	orrs	r3, r2
 800680e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006810:	4b2b      	ldr	r3, [pc, #172]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	f023 0220 	bic.w	r2, r3, #32
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	4928      	ldr	r1, [pc, #160]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 800681e:	4313      	orrs	r3, r2
 8006820:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006822:	4b27      	ldr	r3, [pc, #156]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	4a26      	ldr	r2, [pc, #152]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006828:	f023 0310 	bic.w	r3, r3, #16
 800682c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800682e:	4b24      	ldr	r3, [pc, #144]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006832:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <RCCEx_PLL2_Config+0x160>)
 8006834:	4013      	ands	r3, r2
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	69d2      	ldr	r2, [r2, #28]
 800683a:	00d2      	lsls	r2, r2, #3
 800683c:	4920      	ldr	r1, [pc, #128]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 800683e:	4313      	orrs	r3, r2
 8006840:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006842:	4b1f      	ldr	r3, [pc, #124]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006846:	4a1e      	ldr	r2, [pc, #120]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006848:	f043 0310 	orr.w	r3, r3, #16
 800684c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d106      	bne.n	8006862 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006854:	4b1a      	ldr	r3, [pc, #104]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	4a19      	ldr	r2, [pc, #100]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 800685a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800685e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006860:	e00f      	b.n	8006882 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d106      	bne.n	8006876 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006868:	4b15      	ldr	r3, [pc, #84]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	4a14      	ldr	r2, [pc, #80]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 800686e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006872:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006874:	e005      	b.n	8006882 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006876:	4b12      	ldr	r3, [pc, #72]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	4a11      	ldr	r2, [pc, #68]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 800687c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006880:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006882:	4b0f      	ldr	r3, [pc, #60]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a0e      	ldr	r2, [pc, #56]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 8006888:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800688c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800688e:	f7fa fd9d 	bl	80013cc <HAL_GetTick>
 8006892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006894:	e008      	b.n	80068a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006896:	f7fa fd99 	bl	80013cc <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d901      	bls.n	80068a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e006      	b.n	80068b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068a8:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <RCCEx_PLL2_Config+0x15c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d0f0      	beq.n	8006896 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	58024400 	.word	0x58024400
 80068c4:	ffff0007 	.word	0xffff0007

080068c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068d6:	4b53      	ldr	r3, [pc, #332]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d101      	bne.n	80068e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e099      	b.n	8006a1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80068e6:	4b4f      	ldr	r3, [pc, #316]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a4e      	ldr	r2, [pc, #312]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80068ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068f2:	f7fa fd6b 	bl	80013cc <HAL_GetTick>
 80068f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068f8:	e008      	b.n	800690c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80068fa:	f7fa fd67 	bl	80013cc <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e086      	b.n	8006a1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800690c:	4b45      	ldr	r3, [pc, #276]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1f0      	bne.n	80068fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006918:	4b42      	ldr	r3, [pc, #264]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 800691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	051b      	lsls	r3, r3, #20
 8006926:	493f      	ldr	r1, [pc, #252]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 8006928:	4313      	orrs	r3, r2
 800692a:	628b      	str	r3, [r1, #40]	; 0x28
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	3b01      	subs	r3, #1
 8006932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	3b01      	subs	r3, #1
 800693c:	025b      	lsls	r3, r3, #9
 800693e:	b29b      	uxth	r3, r3
 8006940:	431a      	orrs	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	3b01      	subs	r3, #1
 8006948:	041b      	lsls	r3, r3, #16
 800694a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	3b01      	subs	r3, #1
 8006956:	061b      	lsls	r3, r3, #24
 8006958:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800695c:	4931      	ldr	r1, [pc, #196]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 800695e:	4313      	orrs	r3, r2
 8006960:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006962:	4b30      	ldr	r3, [pc, #192]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006966:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	492d      	ldr	r1, [pc, #180]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 8006970:	4313      	orrs	r3, r2
 8006972:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006974:	4b2b      	ldr	r3, [pc, #172]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 8006976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006978:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	4928      	ldr	r1, [pc, #160]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 8006982:	4313      	orrs	r3, r2
 8006984:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006986:	4b27      	ldr	r3, [pc, #156]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	4a26      	ldr	r2, [pc, #152]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 800698c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006990:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006992:	4b24      	ldr	r3, [pc, #144]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 8006994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006996:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <RCCEx_PLL3_Config+0x160>)
 8006998:	4013      	ands	r3, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	69d2      	ldr	r2, [r2, #28]
 800699e:	00d2      	lsls	r2, r2, #3
 80069a0:	4920      	ldr	r1, [pc, #128]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069a6:	4b1f      	ldr	r3, [pc, #124]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069aa:	4a1e      	ldr	r2, [pc, #120]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80069ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d106      	bne.n	80069c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069b8:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	4a19      	ldr	r2, [pc, #100]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80069be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069c4:	e00f      	b.n	80069e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d106      	bne.n	80069da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80069cc:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	4a14      	ldr	r2, [pc, #80]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80069d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069d8:	e005      	b.n	80069e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80069da:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80069dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069de:	4a11      	ldr	r2, [pc, #68]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80069e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80069e6:	4b0f      	ldr	r3, [pc, #60]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a0e      	ldr	r2, [pc, #56]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 80069ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069f2:	f7fa fceb 	bl	80013cc <HAL_GetTick>
 80069f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069f8:	e008      	b.n	8006a0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80069fa:	f7fa fce7 	bl	80013cc <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d901      	bls.n	8006a0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e006      	b.n	8006a1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a0c:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <RCCEx_PLL3_Config+0x15c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0f0      	beq.n	80069fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	58024400 	.word	0x58024400
 8006a28:	ffff0007 	.word	0xffff0007

08006a2c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d904      	bls.n	8006a4a <HAL_SAI_InitProtocol+0x1e>
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	3b03      	subs	r3, #3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d812      	bhi.n	8006a6e <HAL_SAI_InitProtocol+0x42>
 8006a48:	e008      	b.n	8006a5c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 fa37 	bl	8006ec4 <SAI_InitI2S>
 8006a56:	4603      	mov	r3, r0
 8006a58:	75fb      	strb	r3, [r7, #23]
      break;
 8006a5a:	e00b      	b.n	8006a74 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 fae0 	bl	8007028 <SAI_InitPCM>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6c:	e002      	b.n	8006a74 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]
      break;
 8006a72:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d104      	bne.n	8006a84 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f808 	bl	8006a90 <HAL_SAI_Init>
 8006a80:	4603      	mov	r3, r0
 8006a82:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	; 0x28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e201      	b.n	8006ea6 <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d113      	bne.n	8006ad4 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a99      	ldr	r2, [pc, #612]	; (8006d18 <HAL_SAI_Init+0x288>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_SAI_Init+0x30>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a98      	ldr	r2, [pc, #608]	; (8006d1c <HAL_SAI_Init+0x28c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d107      	bne.n	8006ad0 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d103      	bne.n	8006ad0 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e1e8      	b.n	8006ea6 <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a8f      	ldr	r2, [pc, #572]	; (8006d18 <HAL_SAI_Init+0x288>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d004      	beq.n	8006ae8 <HAL_SAI_Init+0x58>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a8f      	ldr	r2, [pc, #572]	; (8006d20 <HAL_SAI_Init+0x290>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d102      	bne.n	8006aee <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8006ae8:	4b8e      	ldr	r3, [pc, #568]	; (8006d24 <HAL_SAI_Init+0x294>)
 8006aea:	61bb      	str	r3, [r7, #24]
 8006aec:	e00e      	b.n	8006b0c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a8a      	ldr	r2, [pc, #552]	; (8006d1c <HAL_SAI_Init+0x28c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d004      	beq.n	8006b02 <HAL_SAI_Init+0x72>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a8a      	ldr	r2, [pc, #552]	; (8006d28 <HAL_SAI_Init+0x298>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d102      	bne.n	8006b08 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8006b02:	4b8a      	ldr	r3, [pc, #552]	; (8006d2c <HAL_SAI_Init+0x29c>)
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	e001      	b.n	8006b0c <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e1cc      	b.n	8006ea6 <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d106      	bne.n	8006b26 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7fa f909 	bl	8000d38 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fb00 	bl	800712c <SAI_Disable>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e1b7      	b.n	8006ea6 <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d00c      	beq.n	8006b60 <HAL_SAI_Init+0xd0>
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d80d      	bhi.n	8006b66 <HAL_SAI_Init+0xd6>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <HAL_SAI_Init+0xc4>
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d003      	beq.n	8006b5a <HAL_SAI_Init+0xca>
 8006b52:	e008      	b.n	8006b66 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b58:	e008      	b.n	8006b6c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006b5a:	2310      	movs	r3, #16
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b5e:	e005      	b.n	8006b6c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006b60:	2320      	movs	r3, #32
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b64:	e002      	b.n	8006b6c <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b6a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	2b05      	cmp	r3, #5
 8006b72:	d822      	bhi.n	8006bba <HAL_SAI_Init+0x12a>
 8006b74:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <HAL_SAI_Init+0xec>)
 8006b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7a:	bf00      	nop
 8006b7c:	08006b95 	.word	0x08006b95
 8006b80:	08006b9b 	.word	0x08006b9b
 8006b84:	08006ba3 	.word	0x08006ba3
 8006b88:	08006bbb 	.word	0x08006bbb
 8006b8c:	08006bbb 	.word	0x08006bbb
 8006b90:	08006bab 	.word	0x08006bab
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	61fb      	str	r3, [r7, #28]
      break;
 8006b98:	e012      	b.n	8006bc0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b9e:	61fb      	str	r3, [r7, #28]
      break;
 8006ba0:	e00e      	b.n	8006bc0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006ba2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ba6:	61fb      	str	r3, [r7, #28]
      break;
 8006ba8:	e00a      	b.n	8006bc0 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006baa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bae:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	f043 0303 	orr.w	r3, r3, #3
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006bb8:	e002      	b.n	8006bc0 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61fb      	str	r3, [r7, #28]
      break;
 8006bbe:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 808a 	beq.w	8006ce4 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a4f      	ldr	r2, [pc, #316]	; (8006d18 <HAL_SAI_Init+0x288>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d004      	beq.n	8006be8 <HAL_SAI_Init+0x158>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a4f      	ldr	r2, [pc, #316]	; (8006d20 <HAL_SAI_Init+0x290>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d106      	bne.n	8006bf6 <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006be8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006bec:	f04f 0100 	mov.w	r1, #0
 8006bf0:	f7fe fcd6 	bl	80055a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bf4:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a48      	ldr	r2, [pc, #288]	; (8006d1c <HAL_SAI_Init+0x28c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d106      	bne.n	8006c0e <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006c00:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006c04:	f04f 0100 	mov.w	r1, #0
 8006c08:	f7fe fcca 	bl	80055a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c0c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a45      	ldr	r2, [pc, #276]	; (8006d28 <HAL_SAI_Init+0x298>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d106      	bne.n	8006c26 <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006c18:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006c1c:	f04f 0100 	mov.w	r1, #0
 8006c20:	f7fe fcbe 	bl	80055a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c24:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c2e:	d120      	bne.n	8006c72 <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d102      	bne.n	8006c3e <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8006c38:	2340      	movs	r3, #64	; 0x40
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	e00a      	b.n	8006c54 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d103      	bne.n	8006c4e <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8006c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	e002      	b.n	8006c54 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c52:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	4619      	mov	r1, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	fb02 f303 	mul.w	r3, r2, r3
 8006c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	e017      	b.n	8006ca2 <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c7a:	d101      	bne.n	8006c80 <HAL_SAI_Init+0x1f0>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e000      	b.n	8006c82 <HAL_SAI_Init+0x1f2>
 8006c80:	2301      	movs	r3, #1
 8006c82:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	4619      	mov	r1, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	fb02 f303 	mul.w	r3, r2, r3
 8006c9a:	021b      	lsls	r3, r3, #8
 8006c9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ca0:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	4a22      	ldr	r2, [pc, #136]	; (8006d30 <HAL_SAI_Init+0x2a0>)
 8006ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8006caa:	08da      	lsrs	r2, r3, #3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006cb0:	6939      	ldr	r1, [r7, #16]
 8006cb2:	4b1f      	ldr	r3, [pc, #124]	; (8006d30 <HAL_SAI_Init+0x2a0>)
 8006cb4:	fba3 2301 	umull	r2, r3, r3, r1
 8006cb8:	08da      	lsrs	r2, r3, #3
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	1aca      	subs	r2, r1, r3
 8006cc4:	2a08      	cmp	r2, #8
 8006cc6:	d904      	bls.n	8006cd2 <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d104      	bne.n	8006ce4 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	085a      	lsrs	r2, r3, #1
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_SAI_Init+0x264>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d109      	bne.n	8006d08 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d101      	bne.n	8006d00 <HAL_SAI_Init+0x270>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	e001      	b.n	8006d04 <HAL_SAI_Init+0x274>
 8006d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d04:	623b      	str	r3, [r7, #32]
 8006d06:	e017      	b.n	8006d38 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d111      	bne.n	8006d34 <HAL_SAI_Init+0x2a4>
 8006d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d14:	e00f      	b.n	8006d36 <HAL_SAI_Init+0x2a6>
 8006d16:	bf00      	nop
 8006d18:	40015804 	.word	0x40015804
 8006d1c:	58005404 	.word	0x58005404
 8006d20:	40015824 	.word	0x40015824
 8006d24:	40015800 	.word	0x40015800
 8006d28:	58005424 	.word	0x58005424
 8006d2c:	58005400 	.word	0x58005400
 8006d30:	cccccccd 	.word	0xcccccccd
 8006d34:	2300      	movs	r3, #0
 8006d36:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6819      	ldr	r1, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b5b      	ldr	r3, [pc, #364]	; (8006eb0 <HAL_SAI_Init+0x420>)
 8006d44:	400b      	ands	r3, r1
 8006d46:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6819      	ldr	r1, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d56:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d5c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d62:	431a      	orrs	r2, r3
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006d70:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d7c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d82:	051b      	lsls	r3, r3, #20
 8006d84:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d8a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6859      	ldr	r1, [r3, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	4b43      	ldr	r3, [pc, #268]	; (8006eb4 <HAL_SAI_Init+0x424>)
 8006da6:	400b      	ands	r3, r1
 8006da8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6859      	ldr	r1, [r3, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	69da      	ldr	r2, [r3, #28]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	431a      	orrs	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6899      	ldr	r1, [r3, #8]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b39      	ldr	r3, [pc, #228]	; (8006eb8 <HAL_SAI_Init+0x428>)
 8006dd4:	400b      	ands	r3, r1
 8006dd6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6899      	ldr	r1, [r3, #8]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006de8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006dee:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006df4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006dfe:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68d9      	ldr	r1, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006e16:	400b      	ands	r3, r1
 8006e18:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68d9      	ldr	r1, [r3, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e28:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e2e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e30:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e36:	3b01      	subs	r3, #1
 8006e38:	021b      	lsls	r3, r3, #8
 8006e3a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1c      	ldr	r2, [pc, #112]	; (8006ebc <HAL_SAI_Init+0x42c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d004      	beq.n	8006e58 <HAL_SAI_Init+0x3c8>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1b      	ldr	r2, [pc, #108]	; (8006ec0 <HAL_SAI_Init+0x430>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d119      	bne.n	8006e8c <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5c:	f023 0201 	bic.w	r2, r3, #1
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d10e      	bne.n	8006e8c <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e76:	3b01      	subs	r3, #1
 8006e78:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e84:	f043 0201 	orr.w	r2, r3, #1
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3728      	adds	r7, #40	; 0x28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	f005c010 	.word	0xf005c010
 8006eb4:	ffff1ff0 	.word	0xffff1ff0
 8006eb8:	fff88000 	.word	0xfff88000
 8006ebc:	40015804 	.word	0x40015804
 8006ec0:	58005404 	.word	0x58005404

08006ec4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <SAI_InitI2S+0x2e>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d103      	bne.n	8006efa <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	651a      	str	r2, [r3, #80]	; 0x50
 8006ef8:	e002      	b.n	8006f00 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2201      	movs	r2, #1
 8006efe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006f06:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f0e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e077      	b.n	800701a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d107      	bne.n	8006f40 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006f3c:	665a      	str	r2, [r3, #100]	; 0x64
 8006f3e:	e006      	b.n	8006f4e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f46:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d84f      	bhi.n	8006ff4 <SAI_InitI2S+0x130>
 8006f54:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <SAI_InitI2S+0x98>)
 8006f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5a:	bf00      	nop
 8006f5c:	08006f6d 	.word	0x08006f6d
 8006f60:	08006f8f 	.word	0x08006f8f
 8006f64:	08006fb1 	.word	0x08006fb1
 8006f68:	08006fd3 	.word	0x08006fd3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2280      	movs	r2, #128	; 0x80
 8006f70:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	085b      	lsrs	r3, r3, #1
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	085b      	lsrs	r3, r3, #1
 8006f80:	011a      	lsls	r2, r3, #4
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2240      	movs	r2, #64	; 0x40
 8006f8a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006f8c:	e035      	b.n	8006ffa <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2280      	movs	r2, #128	; 0x80
 8006f92:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	019a      	lsls	r2, r3, #6
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	085b      	lsrs	r3, r3, #1
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2280      	movs	r2, #128	; 0x80
 8006fac:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006fae:	e024      	b.n	8006ffa <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	22c0      	movs	r2, #192	; 0xc0
 8006fb4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	085b      	lsrs	r3, r3, #1
 8006fba:	019a      	lsls	r2, r3, #6
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	085b      	lsrs	r3, r3, #1
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2280      	movs	r2, #128	; 0x80
 8006fce:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006fd0:	e013      	b.n	8006ffa <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	22e0      	movs	r2, #224	; 0xe0
 8006fd6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	085b      	lsrs	r3, r3, #1
 8006fdc:	019a      	lsls	r2, r3, #6
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	085b      	lsrs	r3, r3, #1
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2280      	movs	r2, #128	; 0x80
 8006ff0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006ff2:	e002      	b.n	8006ffa <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d10b      	bne.n	8007018 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d102      	bne.n	800700c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2210      	movs	r2, #16
 800700a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d102      	bne.n	8007018 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2208      	movs	r2, #8
 8007016:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8007018:	7dfb      	ldrb	r3, [r7, #23]
}
 800701a:	4618      	mov	r0, r3
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop

08007028 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <SAI_InitPCM+0x2e>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2b02      	cmp	r3, #2
 8007054:	d103      	bne.n	800705e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2201      	movs	r2, #1
 800705a:	651a      	str	r2, [r3, #80]	; 0x50
 800705c:	e002      	b.n	8007064 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007070:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007078:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800708c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b04      	cmp	r3, #4
 8007092:	d103      	bne.n	800709c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	659a      	str	r2, [r3, #88]	; 0x58
 800709a:	e002      	b.n	80070a2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	220d      	movs	r2, #13
 80070a0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d837      	bhi.n	8007118 <SAI_InitPCM+0xf0>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <SAI_InitPCM+0x88>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070c1 	.word	0x080070c1
 80070b4:	080070d7 	.word	0x080070d7
 80070b8:	080070ed 	.word	0x080070ed
 80070bc:	08007103 	.word	0x08007103
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2280      	movs	r2, #128	; 0x80
 80070c4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	011a      	lsls	r2, r3, #4
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2240      	movs	r2, #64	; 0x40
 80070d2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80070d4:	e023      	b.n	800711e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2280      	movs	r2, #128	; 0x80
 80070da:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2280      	movs	r2, #128	; 0x80
 80070e8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80070ea:	e018      	b.n	800711e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	22c0      	movs	r2, #192	; 0xc0
 80070f0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2280      	movs	r2, #128	; 0x80
 80070fe:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007100:	e00d      	b.n	800711e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	22e0      	movs	r2, #224	; 0xe0
 8007106:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2280      	movs	r2, #128	; 0x80
 8007114:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007116:	e002      	b.n	800711e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	75fb      	strb	r3, [r7, #23]
      break;
 800711c:	bf00      	nop
  }

  return status;
 800711e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007120:	4618      	mov	r0, r3
 8007122:	371c      	adds	r7, #28
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007134:	4b18      	ldr	r3, [pc, #96]	; (8007198 <SAI_Disable+0x6c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a18      	ldr	r2, [pc, #96]	; (800719c <SAI_Disable+0x70>)
 800713a:	fba2 2303 	umull	r2, r3, r2, r3
 800713e:	0b1b      	lsrs	r3, r3, #12
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007156:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10a      	bne.n	8007174 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007164:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	72fb      	strb	r3, [r7, #11]
      break;
 8007172:	e009      	b.n	8007188 <SAI_Disable+0x5c>
    }
    count--;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3b01      	subs	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e7      	bne.n	8007158 <SAI_Disable+0x2c>

  return status;
 8007188:	7afb      	ldrb	r3, [r7, #11]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	24000000 	.word	0x24000000
 800719c:	95cbec1b 	.word	0x95cbec1b

080071a0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e02b      	b.n	800720c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d106      	bne.n	80071ce <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7f9 fa53 	bl	8000674 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2202      	movs	r2, #2
 80071d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f000 f9b7 	bl	8007554 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6818      	ldr	r0, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	461a      	mov	r2, r3
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	f000 fa0b 	bl	800760c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80071f6:	4b07      	ldr	r3, [pc, #28]	; (8007214 <HAL_SDRAM_Init+0x74>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a06      	ldr	r2, [pc, #24]	; (8007214 <HAL_SDRAM_Init+0x74>)
 80071fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007200:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	52004000 	.word	0x52004000

08007218 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800722a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	2b02      	cmp	r3, #2
 8007230:	d101      	bne.n	8007236 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007232:	2302      	movs	r3, #2
 8007234:	e021      	b.n	800727a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007236:	7dfb      	ldrb	r3, [r7, #23]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d002      	beq.n	8007242 <HAL_SDRAM_SendCommand+0x2a>
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	2b05      	cmp	r3, #5
 8007240:	d118      	bne.n	8007274 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2202      	movs	r2, #2
 8007246:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	68b9      	ldr	r1, [r7, #8]
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fa44 	bl	80076e0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d104      	bne.n	800726a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2205      	movs	r2, #5
 8007264:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007268:	e006      	b.n	8007278 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007272:	e001      	b.n	8007278 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b082      	sub	sp, #8
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d101      	bne.n	800729c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007298:	2302      	movs	r3, #2
 800729a:	e016      	b.n	80072ca <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d10f      	bne.n	80072c8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fa36 	bl	8007728 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	e000      	b.n	80072ca <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e10f      	b.n	8007506 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a87      	ldr	r2, [pc, #540]	; (8007510 <HAL_SPI_Init+0x23c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00f      	beq.n	8007316 <HAL_SPI_Init+0x42>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a86      	ldr	r2, [pc, #536]	; (8007514 <HAL_SPI_Init+0x240>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00a      	beq.n	8007316 <HAL_SPI_Init+0x42>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a84      	ldr	r2, [pc, #528]	; (8007518 <HAL_SPI_Init+0x244>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d005      	beq.n	8007316 <HAL_SPI_Init+0x42>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	2b0f      	cmp	r3, #15
 8007310:	d901      	bls.n	8007316 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e0f7      	b.n	8007506 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f900 	bl	800751c <SPI_GetPacketSize>
 800731c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a7b      	ldr	r2, [pc, #492]	; (8007510 <HAL_SPI_Init+0x23c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00c      	beq.n	8007342 <HAL_SPI_Init+0x6e>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a79      	ldr	r2, [pc, #484]	; (8007514 <HAL_SPI_Init+0x240>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d007      	beq.n	8007342 <HAL_SPI_Init+0x6e>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a78      	ldr	r2, [pc, #480]	; (8007518 <HAL_SPI_Init+0x244>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d002      	beq.n	8007342 <HAL_SPI_Init+0x6e>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b08      	cmp	r3, #8
 8007340:	d811      	bhi.n	8007366 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007346:	4a72      	ldr	r2, [pc, #456]	; (8007510 <HAL_SPI_Init+0x23c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d009      	beq.n	8007360 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a70      	ldr	r2, [pc, #448]	; (8007514 <HAL_SPI_Init+0x240>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d004      	beq.n	8007360 <HAL_SPI_Init+0x8c>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a6f      	ldr	r2, [pc, #444]	; (8007518 <HAL_SPI_Init+0x244>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d104      	bne.n	800736a <HAL_SPI_Init+0x96>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b10      	cmp	r3, #16
 8007364:	d901      	bls.n	800736a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e0cd      	b.n	8007506 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7f9 fe16 	bl	8000fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80073a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073b0:	d119      	bne.n	80073e6 <HAL_SPI_Init+0x112>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073ba:	d103      	bne.n	80073c4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d008      	beq.n	80073d6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10c      	bne.n	80073e6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80073d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073d4:	d107      	bne.n	80073e6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00f      	beq.n	8007412 <HAL_SPI_Init+0x13e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	2b06      	cmp	r3, #6
 80073f8:	d90b      	bls.n	8007412 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	e007      	b.n	8007422 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007420:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69da      	ldr	r2, [r3, #28]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	431a      	orrs	r2, r3
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007434:	ea42 0103 	orr.w	r1, r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	431a      	orrs	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	431a      	orrs	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007482:	ea42 0103 	orr.w	r1, r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d113      	bne.n	80074c2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0201 	bic.w	r2, r2, #1
 80074d0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	40013000 	.word	0x40013000
 8007514:	40003800 	.word	0x40003800
 8007518:	40003c00 	.word	0x40003c00

0800751c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007528:	095b      	lsrs	r3, r3, #5
 800752a:	3301      	adds	r3, #1
 800752c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	3301      	adds	r3, #1
 8007534:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	3307      	adds	r3, #7
 800753a:	08db      	lsrs	r3, r3, #3
 800753c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	fb02 f303 	mul.w	r3, r2, r3
}
 8007546:	4618      	mov	r0, r3
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
	...

08007554 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d121      	bne.n	80075aa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	4b27      	ldr	r3, [pc, #156]	; (8007608 <FMC_SDRAM_Init+0xb4>)
 800756c:	4013      	ands	r3, r2
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	6851      	ldr	r1, [r2, #4]
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	6892      	ldr	r2, [r2, #8]
 8007576:	4311      	orrs	r1, r2
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	68d2      	ldr	r2, [r2, #12]
 800757c:	4311      	orrs	r1, r2
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	6912      	ldr	r2, [r2, #16]
 8007582:	4311      	orrs	r1, r2
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	6952      	ldr	r2, [r2, #20]
 8007588:	4311      	orrs	r1, r2
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	6992      	ldr	r2, [r2, #24]
 800758e:	4311      	orrs	r1, r2
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	69d2      	ldr	r2, [r2, #28]
 8007594:	4311      	orrs	r1, r2
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	6a12      	ldr	r2, [r2, #32]
 800759a:	4311      	orrs	r1, r2
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075a0:	430a      	orrs	r2, r1
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	e026      	b.n	80075f8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	69d9      	ldr	r1, [r3, #28]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	4319      	orrs	r1, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	430b      	orrs	r3, r1
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	4b0e      	ldr	r3, [pc, #56]	; (8007608 <FMC_SDRAM_Init+0xb4>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	6851      	ldr	r1, [r2, #4]
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	6892      	ldr	r2, [r2, #8]
 80075d8:	4311      	orrs	r1, r2
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	68d2      	ldr	r2, [r2, #12]
 80075de:	4311      	orrs	r1, r2
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	6912      	ldr	r2, [r2, #16]
 80075e4:	4311      	orrs	r1, r2
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	6952      	ldr	r2, [r2, #20]
 80075ea:	4311      	orrs	r1, r2
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	6992      	ldr	r2, [r2, #24]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	ffff8000 	.word	0xffff8000

0800760c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d128      	bne.n	8007670 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	1e59      	subs	r1, r3, #1
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	3b01      	subs	r3, #1
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	4319      	orrs	r1, r3
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	3b01      	subs	r3, #1
 800763c:	021b      	lsls	r3, r3, #8
 800763e:	4319      	orrs	r1, r3
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	3b01      	subs	r3, #1
 8007646:	031b      	lsls	r3, r3, #12
 8007648:	4319      	orrs	r1, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	3b01      	subs	r3, #1
 8007650:	041b      	lsls	r3, r3, #16
 8007652:	4319      	orrs	r1, r3
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	3b01      	subs	r3, #1
 800765a:	051b      	lsls	r3, r3, #20
 800765c:	4319      	orrs	r1, r3
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	3b01      	subs	r3, #1
 8007664:	061b      	lsls	r3, r3, #24
 8007666:	430b      	orrs	r3, r1
 8007668:	431a      	orrs	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	609a      	str	r2, [r3, #8]
 800766e:	e02d      	b.n	80076cc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	4b19      	ldr	r3, [pc, #100]	; (80076dc <FMC_SDRAM_Timing_Init+0xd0>)
 8007676:	4013      	ands	r3, r2
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	68d2      	ldr	r2, [r2, #12]
 800767c:	3a01      	subs	r2, #1
 800767e:	0311      	lsls	r1, r2, #12
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	6952      	ldr	r2, [r2, #20]
 8007684:	3a01      	subs	r2, #1
 8007686:	0512      	lsls	r2, r2, #20
 8007688:	430a      	orrs	r2, r1
 800768a:	431a      	orrs	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	1e59      	subs	r1, r3, #1
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	4319      	orrs	r1, r3
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	4319      	orrs	r1, r3
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	041b      	lsls	r3, r3, #16
 80076ba:	4319      	orrs	r1, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	061b      	lsls	r3, r3, #24
 80076c4:	430b      	orrs	r3, r1
 80076c6:	431a      	orrs	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	ff0f0fff 	.word	0xff0f0fff

080076e0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	691a      	ldr	r2, [r3, #16]
 80076f0:	4b0c      	ldr	r3, [pc, #48]	; (8007724 <FMC_SDRAM_SendCommand+0x44>)
 80076f2:	4013      	ands	r3, r2
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	6811      	ldr	r1, [r2, #0]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	6852      	ldr	r2, [r2, #4]
 80076fc:	4311      	orrs	r1, r2
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	6892      	ldr	r2, [r2, #8]
 8007702:	3a01      	subs	r2, #1
 8007704:	0152      	lsls	r2, r2, #5
 8007706:	4311      	orrs	r1, r2
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	68d2      	ldr	r2, [r2, #12]
 800770c:	0252      	lsls	r2, r2, #9
 800770e:	430a      	orrs	r2, r1
 8007710:	431a      	orrs	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	ffc00000 	.word	0xffc00000

08007728 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	695a      	ldr	r2, [r3, #20]
 8007736:	4b07      	ldr	r3, [pc, #28]	; (8007754 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8007738:	4013      	ands	r3, r2
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	0052      	lsls	r2, r2, #1
 800773e:	431a      	orrs	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	ffffc001 	.word	0xffffc001

08007758 <memset>:
 8007758:	4402      	add	r2, r0
 800775a:	4603      	mov	r3, r0
 800775c:	4293      	cmp	r3, r2
 800775e:	d100      	bne.n	8007762 <memset+0xa>
 8007760:	4770      	bx	lr
 8007762:	f803 1b01 	strb.w	r1, [r3], #1
 8007766:	e7f9      	b.n	800775c <memset+0x4>

08007768 <__libc_init_array>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	4d0d      	ldr	r5, [pc, #52]	; (80077a0 <__libc_init_array+0x38>)
 800776c:	4c0d      	ldr	r4, [pc, #52]	; (80077a4 <__libc_init_array+0x3c>)
 800776e:	1b64      	subs	r4, r4, r5
 8007770:	10a4      	asrs	r4, r4, #2
 8007772:	2600      	movs	r6, #0
 8007774:	42a6      	cmp	r6, r4
 8007776:	d109      	bne.n	800778c <__libc_init_array+0x24>
 8007778:	4d0b      	ldr	r5, [pc, #44]	; (80077a8 <__libc_init_array+0x40>)
 800777a:	4c0c      	ldr	r4, [pc, #48]	; (80077ac <__libc_init_array+0x44>)
 800777c:	f000 f818 	bl	80077b0 <_init>
 8007780:	1b64      	subs	r4, r4, r5
 8007782:	10a4      	asrs	r4, r4, #2
 8007784:	2600      	movs	r6, #0
 8007786:	42a6      	cmp	r6, r4
 8007788:	d105      	bne.n	8007796 <__libc_init_array+0x2e>
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007790:	4798      	blx	r3
 8007792:	3601      	adds	r6, #1
 8007794:	e7ee      	b.n	8007774 <__libc_init_array+0xc>
 8007796:	f855 3b04 	ldr.w	r3, [r5], #4
 800779a:	4798      	blx	r3
 800779c:	3601      	adds	r6, #1
 800779e:	e7f2      	b.n	8007786 <__libc_init_array+0x1e>
 80077a0:	080077e0 	.word	0x080077e0
 80077a4:	080077e0 	.word	0x080077e0
 80077a8:	080077e0 	.word	0x080077e0
 80077ac:	080077e4 	.word	0x080077e4

080077b0 <_init>:
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	bf00      	nop
 80077b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b6:	bc08      	pop	{r3}
 80077b8:	469e      	mov	lr, r3
 80077ba:	4770      	bx	lr

080077bc <_fini>:
 80077bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077be:	bf00      	nop
 80077c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077c2:	bc08      	pop	{r3}
 80077c4:	469e      	mov	lr, r3
 80077c6:	4770      	bx	lr
