
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .sdram_section 0000002a  c0000000  c0000000  00040000  2**2
                  ALLOC
  2 .text         00010a7c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000134  08010d4c  08010d4c  00020d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010e80  08010e80  00020e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010e84  08010e84  00020e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000140  24000000  08010e88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001434  24000140  08010fc8  00030140  2**2
                  ALLOC
  8 ._user_heap_stack 00006004  24001574  08010fc8  00031574  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003016e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020e85  00000000  00000000  000301b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005161  00000000  00000000  00051036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001850  00000000  00000000  00056198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001251  00000000  00000000  000579e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00038dca  00000000  00000000  00058c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025526  00000000  00000000  00091a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014e8da  00000000  00000000  000b6f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006aec  00000000  00000000  00205804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000082  00000000  00000000  0020c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000140 	.word	0x24000140
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010d34 	.word	0x08010d34

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000144 	.word	0x24000144
 800030c:	08010d34 	.word	0x08010d34

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <ad1939_write_reg>:
#include "AD1939_driver.h"


// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af02      	add	r7, sp, #8
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
	int8_t retval = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	73fb      	strb	r3, [r7, #15]
	TXdata[0] = AD1939_Global_Address_Write;
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <ad1939_write_reg+0x4c>)
 80003c6:	2208      	movs	r2, #8
 80003c8:	701a      	strb	r2, [r3, #0]
	TXdata[1] = reg_address;
 80003ca:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <ad1939_write_reg+0x4c>)
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	7053      	strb	r3, [r2, #1]
	TXdata[2] = data;
 80003d0:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <ad1939_write_reg+0x4c>)
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	7093      	strb	r3, [r2, #2]

//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <ad1939_write_reg+0x50>)
 80003d8:	6818      	ldr	r0, [r3, #0]
 80003da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003de:	9300      	str	r3, [sp, #0]
 80003e0:	2303      	movs	r3, #3
 80003e2:	4a08      	ldr	r2, [pc, #32]	; (8000404 <ad1939_write_reg+0x54>)
 80003e4:	4905      	ldr	r1, [pc, #20]	; (80003fc <ad1939_write_reg+0x4c>)
 80003e6:	f00a fe49 	bl	800b07c <HAL_SPI_TransmitReceive>
 80003ea:	4603      	mov	r3, r0
 80003ec:	73fb      	strb	r3, [r7, #15]
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 //HAL_Delay(10);
	return retval;
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3710      	adds	r7, #16
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	24000160 	.word	0x24000160
 8000400:	2400015c 	.word	0x2400015c
 8000404:	24000164 	.word	0x24000164

08000408 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af02      	add	r7, sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <ad1939_pll_locked+0x3c>)
 8000410:	2209      	movs	r2, #9
 8000412:	701a      	strb	r2, [r3, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <ad1939_pll_locked+0x3c>)
 8000416:	2201      	movs	r2, #1
 8000418:	705a      	strb	r2, [r3, #1]
	TXdata[2] = 0b00000100;
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <ad1939_pll_locked+0x3c>)
 800041c:	2204      	movs	r2, #4
 800041e:	709a      	strb	r2, [r3, #2]
	HAL_Delay(10);
 8000420:	200a      	movs	r0, #10
 8000422:	f001 fcdd 	bl	8001de0 <HAL_Delay>
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <ad1939_pll_locked+0x40>)
 8000428:	6818      	ldr	r0, [r3, #0]
 800042a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2303      	movs	r3, #3
 8000432:	4a06      	ldr	r2, [pc, #24]	; (800044c <ad1939_pll_locked+0x44>)
 8000434:	4903      	ldr	r1, [pc, #12]	; (8000444 <ad1939_pll_locked+0x3c>)
 8000436:	f00a fe21 	bl	800b07c <HAL_SPI_TransmitReceive>
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 return 0;
 800043a:	2300      	movs	r3, #0
}
 800043c:	4618      	mov	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	24000160 	.word	0x24000160
 8000448:	2400015c 	.word	0x2400015c
 800044c:	24000164 	.word	0x24000164

08000450 <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
    AD1939_spi = hspi_codec;
 8000458:	4a3d      	ldr	r2, [pc, #244]	; (8000550 <ad1939_init+0x100>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6013      	str	r3, [r2, #0]

    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 800045e:	21be      	movs	r1, #190	; 0xbe
 8000460:	2000      	movs	r0, #0
 8000462:	f7ff ffa5 	bl	80003b0 <ad1939_write_reg>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <ad1939_init+0x22>
 800046c:	f04f 33ff 	mov.w	r3, #4294967295
 8000470:	e069      	b.n	8000546 <ad1939_init+0xf6>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 8000472:	2104      	movs	r1, #4
 8000474:	2001      	movs	r0, #1
 8000476:	f7ff ff9b 	bl	80003b0 <ad1939_write_reg>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d002      	beq.n	8000486 <ad1939_init+0x36>
 8000480:	f04f 33ff 	mov.w	r3, #4294967295
 8000484:	e05f      	b.n	8000546 <ad1939_init+0xf6>





    HAL_Delay(100);
 8000486:	2064      	movs	r0, #100	; 0x64
 8000488:	f001 fcaa 	bl	8001de0 <HAL_Delay>

    if(ad1939_pll_locked()){
 800048c:	f7ff ffbc 	bl	8000408 <ad1939_pll_locked>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b01000000)) return -1;
 8000490:	2140      	movs	r1, #64	; 0x40
 8000492:	2002      	movs	r0, #2
 8000494:	f7ff ff8c 	bl	80003b0 <ad1939_write_reg>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d002      	beq.n	80004a4 <ad1939_init+0x54>
 800049e:	f04f 33ff 	mov.w	r3, #4294967295
 80004a2:	e050      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000100)) return -1; // Slave setup
 80004a4:	2104      	movs	r1, #4
 80004a6:	2003      	movs	r0, #3
 80004a8:	f7ff ff82 	bl	80003b0 <ad1939_write_reg>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d002      	beq.n	80004b8 <ad1939_init+0x68>
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
 80004b6:	e046      	b.n	8000546 <ad1939_init+0xf6>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 80004b8:	2100      	movs	r1, #0
 80004ba:	2004      	movs	r0, #4
 80004bc:	f7ff ff78 	bl	80003b0 <ad1939_write_reg>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <ad1939_init+0x7c>
 80004c6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ca:	e03c      	b.n	8000546 <ad1939_init+0xf6>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 80004cc:	2100      	movs	r1, #0
 80004ce:	2005      	movs	r0, #5
 80004d0:	f7ff ff6e 	bl	80003b0 <ad1939_write_reg>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d002      	beq.n	80004e0 <ad1939_init+0x90>
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	e032      	b.n	8000546 <ad1939_init+0xf6>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 80004e0:	2100      	movs	r1, #0
 80004e2:	2008      	movs	r0, #8
 80004e4:	f7ff ff64 	bl	80003b0 <ad1939_write_reg>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d002      	beq.n	80004f4 <ad1939_init+0xa4>
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295
 80004f2:	e028      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 80004f4:	2100      	movs	r1, #0
 80004f6:	2009      	movs	r0, #9
 80004f8:	f7ff ff5a 	bl	80003b0 <ad1939_write_reg>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <ad1939_init+0xb8>
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	e01e      	b.n	8000546 <ad1939_init+0xf6>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000508:	2100      	movs	r1, #0
 800050a:	200e      	movs	r0, #14
 800050c:	f7ff ff50 	bl	80003b0 <ad1939_write_reg>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <ad1939_init+0xcc>
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	e014      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0b00100000 )) return -1;
 800051c:	2120      	movs	r1, #32
 800051e:	200f      	movs	r0, #15
 8000520:	f7ff ff46 	bl	80003b0 <ad1939_write_reg>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <ad1939_init+0xe0>
 800052a:	f04f 33ff 	mov.w	r3, #4294967295
 800052e:	e00a      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 8000530:	2100      	movs	r1, #0
 8000532:	2010      	movs	r0, #16
 8000534:	f7ff ff3c 	bl	80003b0 <ad1939_write_reg>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d002      	beq.n	8000544 <ad1939_init+0xf4>
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	e000      	b.n	8000546 <ad1939_init+0xf6>



    return 0; // Return 0 if all writes are successful
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2400015c 	.word	0x2400015c

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <MX_DMA_Init+0x6c>)
 800055c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000560:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <MX_DMA_Init+0x6c>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_DMA_Init+0x6c>)
 800056c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_DMA_Init+0x6c>)
 800057a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800057e:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <MX_DMA_Init+0x6c>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_DMA_Init+0x6c>)
 800058a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	200b      	movs	r0, #11
 800059c:	f001 fd1f 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005a0:	200b      	movs	r0, #11
 80005a2:	f001 fd36 	bl	8002012 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2038      	movs	r0, #56	; 0x38
 80005ac:	f001 fd17 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005b0:	2038      	movs	r0, #56	; 0x38
 80005b2:	f001 fd2e 	bl	8002012 <HAL_NVIC_EnableIRQ>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	58024400 	.word	0x58024400

080005c4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b090      	sub	sp, #64	; 0x40
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80005ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <MX_FMC_Init+0xcc>)
 80005e0:	4a2c      	ldr	r2, [pc, #176]	; (8000694 <MX_FMC_Init+0xd0>)
 80005e2:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <MX_FMC_Init+0xcc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80005ea:	4b29      	ldr	r3, [pc, #164]	; (8000690 <MX_FMC_Init+0xcc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <MX_FMC_Init+0xcc>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80005f6:	4b26      	ldr	r3, [pc, #152]	; (8000690 <MX_FMC_Init+0xcc>)
 80005f8:	2210      	movs	r2, #16
 80005fa:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MX_FMC_Init+0xcc>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000602:	4b23      	ldr	r3, [pc, #140]	; (8000690 <MX_FMC_Init+0xcc>)
 8000604:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000608:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <MX_FMC_Init+0xcc>)
 800060c:	2200      	movs	r2, #0
 800060e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_FMC_Init+0xcc>)
 8000612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000616:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_FMC_Init+0xcc>)
 800061a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_FMC_Init+0xcc>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000626:	2310      	movs	r3, #16
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 16;
 800062a:	2310      	movs	r3, #16
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 16;
 800062e:	2310      	movs	r3, #16
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 16;
 8000632:	2310      	movs	r3, #16
 8000634:	633b      	str	r3, [r7, #48]	; 0x30
  SdramTiming.WriteRecoveryTime = 16;
 8000636:	2310      	movs	r3, #16
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  SdramTiming.RPDelay = 16;
 800063a:	2310      	movs	r3, #16
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  SdramTiming.RCDDelay = 16;
 800063e:	2310      	movs	r3, #16
 8000640:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	4619      	mov	r1, r3
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <MX_FMC_Init+0xcc>)
 800064a:	f00a fb59 	bl	800ad00 <HAL_SDRAM_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000654:	f000 fe31 	bl	80012ba <Error_Handler>

//    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2500);


    IS42S16800J_Context_t my_sdram;
    my_sdram.TargetBank  = FMC_SDRAM_CMD_TARGET_BANK1;
 8000658:	2310      	movs	r3, #16
 800065a:	607b      	str	r3, [r7, #4]
    my_sdram.RefreshMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800065c:	2303      	movs	r3, #3
 800065e:	60bb      	str	r3, [r7, #8]
    my_sdram.RefreshRate = REFRESH_COUNT;
 8000660:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8000664:	60fb      	str	r3, [r7, #12]
    my_sdram.CASLatency  = IS42S16800J_CAS_LATENCY_3;
 8000666:	2330      	movs	r3, #48	; 0x30
 8000668:	61bb      	str	r3, [r7, #24]
    my_sdram.OperationMode = IS42S16800J_OPERATING_MODE_STANDARD;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    my_sdram.WriteBurstMode = IS42S16800J_WRITEBURST_MODE_SINGLE;
 800066e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000672:	623b      	str	r3, [r7, #32]
    my_sdram.BurstType 		= IS42S16800J_BURST_TYPE_SEQUENTIAL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
    my_sdram.BurstLength 	= IS42S16800J_BURST_LENGTH_1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]

    IS42S16800J_Init(&hsdram1, &my_sdram);
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4619      	mov	r1, r3
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <MX_FMC_Init+0xcc>)
 8000682:	f000 f975 	bl	8000970 <IS42S16800J_Init>
  /* USER CODE END FMC_Init 2 */
}
 8000686:	bf00      	nop
 8000688:	3740      	adds	r7, #64	; 0x40
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	24000168 	.word	0x24000168
 8000694:	52004140 	.word	0x52004140

08000698 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	b0b6      	sub	sp, #216	; 0xd8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006ae:	4b5b      	ldr	r3, [pc, #364]	; (800081c <HAL_FMC_MspInit+0x184>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f040 80ae 	bne.w	8000814 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 80006b8:	4b58      	ldr	r3, [pc, #352]	; (800081c <HAL_FMC_MspInit+0x184>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	22b8      	movs	r2, #184	; 0xb8
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00f fcdf 	bl	801008a <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80006cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80006d8:	2300      	movs	r3, #0
 80006da:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	4618      	mov	r0, r3
 80006e2:	f007 f935 	bl	8007950 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80006ec:	f000 fde5 	bl	80012ba <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006f0:	4b4b      	ldr	r3, [pc, #300]	; (8000820 <HAL_FMC_MspInit+0x188>)
 80006f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80006f6:	4a4a      	ldr	r2, [pc, #296]	; (8000820 <HAL_FMC_MspInit+0x188>)
 80006f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006fc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000700:	4b47      	ldr	r3, [pc, #284]	; (8000820 <HAL_FMC_MspInit+0x188>)
 8000702:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800070e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000712:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000728:	230c      	movs	r3, #12
 800072a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800072e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000732:	4619      	mov	r1, r3
 8000734:	483b      	ldr	r0, [pc, #236]	; (8000824 <HAL_FMC_MspInit+0x18c>)
 8000736:	f003 fd67 	bl	8004208 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 800073a:	2390      	movs	r3, #144	; 0x90
 800073c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000752:	230c      	movs	r3, #12
 8000754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800075c:	4619      	mov	r1, r3
 800075e:	4832      	ldr	r0, [pc, #200]	; (8000828 <HAL_FMC_MspInit+0x190>)
 8000760:	f003 fd52 	bl	8004208 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000764:	2330      	movs	r3, #48	; 0x30
 8000766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800077c:	230c      	movs	r3, #12
 800077e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000782:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000786:	4619      	mov	r1, r3
 8000788:	4828      	ldr	r0, [pc, #160]	; (800082c <HAL_FMC_MspInit+0x194>)
 800078a:	f003 fd3d 	bl	8004208 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 800078e:	f248 1311 	movw	r3, #33041	; 0x8111
 8000792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007a8:	230c      	movs	r3, #12
 80007aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007b2:	4619      	mov	r1, r3
 80007b4:	481e      	ldr	r0, [pc, #120]	; (8000830 <HAL_FMC_MspInit+0x198>)
 80007b6:	f003 fd27 	bl	8004208 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80007ba:	f24f 7383 	movw	r3, #63363	; 0xf783
 80007be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007d4:	230c      	movs	r3, #12
 80007d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007de:	4619      	mov	r1, r3
 80007e0:	4814      	ldr	r0, [pc, #80]	; (8000834 <HAL_FMC_MspInit+0x19c>)
 80007e2:	f003 fd11 	bl	8004208 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80007ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000800:	230c      	movs	r3, #12
 8000802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000806:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800080a:	4619      	mov	r1, r3
 800080c:	480a      	ldr	r0, [pc, #40]	; (8000838 <HAL_FMC_MspInit+0x1a0>)
 800080e:	f003 fcfb 	bl	8004208 <HAL_GPIO_Init>
 8000812:	e000      	b.n	8000816 <HAL_FMC_MspInit+0x17e>
    return;
 8000814:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000816:	37d8      	adds	r7, #216	; 0xd8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2400019c 	.word	0x2400019c
 8000820:	58024400 	.word	0x58024400
 8000824:	58021400 	.word	0x58021400
 8000828:	58020000 	.word	0x58020000
 800082c:	58020800 	.word	0x58020800
 8000830:	58021800 	.word	0x58021800
 8000834:	58021000 	.word	0x58021000
 8000838:	58020c00 	.word	0x58020c00

0800083c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000844:	f7ff ff28 	bl	8000698 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000866:	4b40      	ldr	r3, [pc, #256]	; (8000968 <MX_GPIO_Init+0x118>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	4a3e      	ldr	r2, [pc, #248]	; (8000968 <MX_GPIO_Init+0x118>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000876:	4b3c      	ldr	r3, [pc, #240]	; (8000968 <MX_GPIO_Init+0x118>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087c:	f003 0310 	and.w	r3, r3, #16
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000884:	4b38      	ldr	r3, [pc, #224]	; (8000968 <MX_GPIO_Init+0x118>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088a:	4a37      	ldr	r2, [pc, #220]	; (8000968 <MX_GPIO_Init+0x118>)
 800088c:	f043 0320 	orr.w	r3, r3, #32
 8000890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000894:	4b34      	ldr	r3, [pc, #208]	; (8000968 <MX_GPIO_Init+0x118>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089a:	f003 0320 	and.w	r3, r3, #32
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	4b31      	ldr	r3, [pc, #196]	; (8000968 <MX_GPIO_Init+0x118>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <MX_GPIO_Init+0x118>)
 80008aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b2:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <MX_GPIO_Init+0x118>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_GPIO_Init+0x118>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	4a28      	ldr	r2, [pc, #160]	; (8000968 <MX_GPIO_Init+0x118>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <MX_GPIO_Init+0x118>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_GPIO_Init+0x118>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	4a20      	ldr	r2, [pc, #128]	; (8000968 <MX_GPIO_Init+0x118>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_GPIO_Init+0x118>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_GPIO_Init+0x118>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	4a19      	ldr	r2, [pc, #100]	; (8000968 <MX_GPIO_Init+0x118>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000908:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_GPIO_Init+0x118>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_GPIO_Init+0x118>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	4a11      	ldr	r2, [pc, #68]	; (8000968 <MX_GPIO_Init+0x118>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_GPIO_Init+0x118>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	f003 0308 	and.w	r3, r3, #8
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2120      	movs	r1, #32
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <MX_GPIO_Init+0x11c>)
 800093e:	f003 fe0b 	bl	8004558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000942:	2320      	movs	r3, #32
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094a:	2301      	movs	r3, #1
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_GPIO_Init+0x11c>)
 800095a:	f003 fc55 	bl	8004208 <HAL_GPIO_Init>

}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	58024400 	.word	0x58024400
 800096c:	58021800 	.word	0x58021800

08000970 <IS42S16800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S16800J_ERROR;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S16800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f832 	bl	80009f0 <IS42S16800J_ClockEnable>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d128      	bne.n	80009e4 <IS42S16800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S16800J_Delay(1);
 8000992:	2001      	movs	r0, #1
 8000994:	f000 f8e2 	bl	8000b5c <IS42S16800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S16800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 f84a 	bl	8000a38 <IS42S16800J_Precharge>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d11c      	bne.n	80009e4 <IS42S16800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S16800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S16800J_OK)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	6819      	ldr	r1, [r3, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	461a      	mov	r2, r3
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 f897 	bl	8000ae8 <IS42S16800J_RefreshMode>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d111      	bne.n	80009e4 <IS42S16800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S16800J_ModeRegConfig(Ctx, pRegMode) == IS42S16800J_OK)
 80009c0:	6839      	ldr	r1, [r7, #0]
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 f85c 	bl	8000a80 <IS42S16800J_ModeRegConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10a      	bne.n	80009e4 <IS42S16800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S16800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S16800J_OK)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	4619      	mov	r1, r3
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 f8ad 	bl	8000b34 <IS42S16800J_RefreshRate>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d101      	bne.n	80009e4 <IS42S16800J_Init+0x74>
          {
            ret = IS42S16800J_OK;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 80009e4:	68fb      	ldr	r3, [r7, #12]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <IS42S16800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_CLK_ENABLE_CMD;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <IS42S16800J_ClockEnable+0x44>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <IS42S16800J_ClockEnable+0x44>)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <IS42S16800J_ClockEnable+0x44>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <IS42S16800J_ClockEnable+0x44>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a16:	4907      	ldr	r1, [pc, #28]	; (8000a34 <IS42S16800J_ClockEnable+0x44>)
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f00a f9ad 	bl	800ad78 <HAL_SDRAM_SendCommand>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d002      	beq.n	8000a2a <IS42S16800J_ClockEnable+0x3a>
  {
    return IS42S16800J_ERROR;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	e000      	b.n	8000a2c <IS42S16800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 8000a2a:	2300      	movs	r3, #0
  }
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	240001a0 	.word	0x240001a0

08000a38 <IS42S16800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_PALL_CMD;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <IS42S16800J_Precharge+0x44>)
 8000a44:	2202      	movs	r2, #2
 8000a46:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <IS42S16800J_Precharge+0x44>)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <IS42S16800J_Precharge+0x44>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <IS42S16800J_Precharge+0x44>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5e:	4907      	ldr	r1, [pc, #28]	; (8000a7c <IS42S16800J_Precharge+0x44>)
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f00a f989 	bl	800ad78 <HAL_SDRAM_SendCommand>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <IS42S16800J_Precharge+0x3a>
  {
    return IS42S16800J_ERROR;
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a70:	e000      	b.n	8000a74 <IS42S16800J_Precharge+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 8000a72:	2300      	movs	r3, #0
  }
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	240001a0 	.word	0x240001a0

08000a80 <IS42S16800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000a92:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000a98:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8000a9e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S16800J_LOAD_MODE_CMD;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <IS42S16800J_ModeRegConfig+0x64>)
 8000aaa:	2204      	movs	r2, #4
 8000aac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <IS42S16800J_ModeRegConfig+0x64>)
 8000ab4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <IS42S16800J_ModeRegConfig+0x64>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000abc:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <IS42S16800J_ModeRegConfig+0x64>)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ac6:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <IS42S16800J_ModeRegConfig+0x64>)
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f00a f955 	bl	800ad78 <HAL_SDRAM_SendCommand>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <IS42S16800J_ModeRegConfig+0x5a>
  {
    return IS42S16800J_ERROR;
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	e000      	b.n	8000adc <IS42S16800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S16800J_OK;
 8000ada:	2300      	movs	r3, #0
  }
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	240001a0 	.word	0x240001a0

08000ae8 <IS42S16800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S16800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S16800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S16800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <IS42S16800J_RefreshMode+0x48>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000afa:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <IS42S16800J_RefreshMode+0x48>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <IS42S16800J_RefreshMode+0x48>)
 8000b02:	2208      	movs	r2, #8
 8000b04:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <IS42S16800J_RefreshMode+0x48>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <IS42S16800J_RefreshMode+0x48>)
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f00a f930 	bl	800ad78 <HAL_SDRAM_SendCommand>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <IS42S16800J_RefreshMode+0x3c>
  {
    return IS42S16800J_ERROR;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	e000      	b.n	8000b26 <IS42S16800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S16800J_OK;
 8000b24:	2300      	movs	r3, #0
  }
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	240001a0 	.word	0x240001a0

08000b34 <IS42S16800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S16800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000b3e:	6839      	ldr	r1, [r7, #0]
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f00a f94e 	bl	800ade2 <HAL_SDRAM_ProgramRefreshRate>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <IS42S16800J_RefreshRate+0x1e>
  {
    return IS42S16800J_ERROR;
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b50:	e000      	b.n	8000b54 <IS42S16800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S16800J_OK;
 8000b52:	2300      	movs	r3, #0
  }
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <IS42S16800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval IS42S16800J_OK
  */
static int32_t IS42S16800J_Delay(uint32_t Delay)
{  
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000b64:	f001 f930 	bl	8001dc8 <HAL_GetTick>
 8000b68:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000b6a:	bf00      	nop
 8000b6c:	f001 f92c 	bl	8001dc8 <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d8f7      	bhi.n	8000b6c <IS42S16800J_Delay+0x10>
  {
  }
  return IS42S16800J_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_SAI_TxCpltCallback>:
volatile uint8_t 			ADC_HALF_COMPLETE_FLAG = 0;
volatile uint8_t 			DAC_HALF_COMPLETE_FLAG = 0;
volatile uint32_t input_i2s_buffer_au32[16];
volatile uint32_t output_i2s_buffer_au32[16];

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 8000b88:	b480      	push	{r7}
 8000b8a:	b08b      	sub	sp, #44	; 0x2c
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 0;
 8000b90:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <HAL_SAI_TxCpltCallback+0xb4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <HAL_SAI_TxCpltCallback+0xb8>)
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	dd1d      	ble.n	8000be0 <HAL_SAI_TxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	f003 021f 	and.w	r2, r3, #31
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4413      	add	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb4:	f3bf 8f4f 	dsb	sy
}
 8000bb8:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000bba:	4a22      	ldr	r2, [pc, #136]	; (8000c44 <HAL_SAI_TxCpltCallback+0xbc>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	3320      	adds	r3, #32
 8000bc6:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3b20      	subs	r3, #32
 8000bcc:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dcf2      	bgt.n	8000bba <HAL_SAI_TxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd4:	f3bf 8f4f 	dsb	sy
}
 8000bd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bda:	f3bf 8f6f 	isb	sy
}
 8000bde:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000be0:	bf00      	nop
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_SAI_TxCpltCallback+0xc0>)
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
 8000be6:	2340      	movs	r3, #64	; 0x40
 8000be8:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000bea:	6a3b      	ldr	r3, [r7, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	dd1d      	ble.n	8000c2c <HAL_SAI_TxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	f003 021f 	and.w	r2, r3, #31
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c00:	f3bf 8f4f 	dsb	sy
}
 8000c04:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_SAI_TxCpltCallback+0xbc>)
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	3320      	adds	r3, #32
 8000c12:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	3b20      	subs	r3, #32
 8000c18:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	dcf2      	bgt.n	8000c06 <HAL_SAI_TxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c20:	f3bf 8f4f 	dsb	sy
}
 8000c24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c26:	f3bf 8f6f 	isb	sy
}
 8000c2a:	bf00      	nop
}
 8000c2c:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));

}
 8000c2e:	bf00      	nop
 8000c30:	372c      	adds	r7, #44	; 0x2c
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	240001b1 	.word	0x240001b1
 8000c40:	240001b4 	.word	0x240001b4
 8000c44:	e000ed00 	.word	0xe000ed00
 8000c48:	240001f4 	.word	0x240001f4

08000c4c <HAL_SAI_TxHalfCpltCallback>:
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000c4c:	b480      	push	{r7}
 8000c4e:	b08b      	sub	sp, #44	; 0x2c
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 1;
 8000c54:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <HAL_SAI_TxHalfCpltCallback+0xb8>)
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	2340      	movs	r3, #64	; 0x40
 8000c60:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dd1d      	ble.n	8000ca4 <HAL_SAI_TxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f003 021f 	and.w	r2, r3, #31
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	4413      	add	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c78:	f3bf 8f4f 	dsb	sy
}
 8000c7c:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c7e:	4a22      	ldr	r2, [pc, #136]	; (8000d08 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	3320      	adds	r3, #32
 8000c8a:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3b20      	subs	r3, #32
 8000c90:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dcf2      	bgt.n	8000c7e <HAL_SAI_TxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c98:	f3bf 8f4f 	dsb	sy
}
 8000c9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c9e:	f3bf 8f6f 	isb	sy
}
 8000ca2:	bf00      	nop
}
 8000ca4:	bf00      	nop
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_SAI_TxHalfCpltCallback+0xc0>)
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8000caa:	2340      	movs	r3, #64	; 0x40
 8000cac:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	dd1d      	ble.n	8000cf0 <HAL_SAI_TxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	f003 021f 	and.w	r2, r3, #31
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc4:	f3bf 8f4f 	dsb	sy
}
 8000cc8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	3320      	adds	r3, #32
 8000cd6:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	3b20      	subs	r3, #32
 8000cdc:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	dcf2      	bgt.n	8000cca <HAL_SAI_TxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce4:	f3bf 8f4f 	dsb	sy
}
 8000ce8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cea:	f3bf 8f6f 	isb	sy
}
 8000cee:	bf00      	nop
}
 8000cf0:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
		SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000cf2:	bf00      	nop
 8000cf4:	372c      	adds	r7, #44	; 0x2c
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	240001b1 	.word	0x240001b1
 8000d04:	240001b4 	.word	0x240001b4
 8000d08:	e000ed00 	.word	0xe000ed00
 8000d0c:	240001f4 	.word	0x240001f4

08000d10 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000d10:	b480      	push	{r7}
 8000d12:	b093      	sub	sp, #76	; 0x4c
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 0;
 8000d18:	4b54      	ldr	r3, [pc, #336]	; (8000e6c <HAL_SAI_RxCpltCallback+0x15c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
 8000d1e:	4b54      	ldr	r3, [pc, #336]	; (8000e70 <HAL_SAI_RxCpltCallback+0x160>)
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	2340      	movs	r3, #64	; 0x40
 8000d24:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	dd1d      	ble.n	8000d68 <HAL_SAI_RxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f003 021f 	and.w	r2, r3, #31
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4413      	add	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d3c:	f3bf 8f4f 	dsb	sy
}
 8000d40:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000d42:	4a4c      	ldr	r2, [pc, #304]	; (8000e74 <HAL_SAI_RxCpltCallback+0x164>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	3320      	adds	r3, #32
 8000d4e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	3b20      	subs	r3, #32
 8000d54:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	dcf2      	bgt.n	8000d42 <HAL_SAI_RxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d5c:	f3bf 8f4f 	dsb	sy
}
 8000d60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d62:	f3bf 8f6f 	isb	sy
}
 8000d66:	bf00      	nop
}
 8000d68:	bf00      	nop
 8000d6a:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <HAL_SAI_RxCpltCallback+0x168>)
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6e:	2340      	movs	r3, #64	; 0x40
 8000d70:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	dd1d      	ble.n	8000db4 <HAL_SAI_RxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	f003 021f 	and.w	r2, r3, #31
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	4413      	add	r3, r2
 8000d82:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d88:	f3bf 8f4f 	dsb	sy
}
 8000d8c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000d8e:	4a39      	ldr	r2, [pc, #228]	; (8000e74 <HAL_SAI_RxCpltCallback+0x164>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	3320      	adds	r3, #32
 8000d9a:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	3b20      	subs	r3, #32
 8000da0:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	dcf2      	bgt.n	8000d8e <HAL_SAI_RxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000da8:	f3bf 8f4f 	dsb	sy
}
 8000dac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dae:	f3bf 8f6f 	isb	sy
}
 8000db2:	bf00      	nop
}
 8000db4:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[14] = input_i2s_buffer_au32[10];
 8000db6:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <HAL_SAI_RxCpltCallback+0x160>)
 8000db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dba:	4a2f      	ldr	r2, [pc, #188]	; (8000e78 <HAL_SAI_RxCpltCallback+0x168>)
 8000dbc:	6393      	str	r3, [r2, #56]	; 0x38
	output_i2s_buffer_au32[15] = input_i2s_buffer_au32[11];
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <HAL_SAI_RxCpltCallback+0x160>)
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	4a2d      	ldr	r2, [pc, #180]	; (8000e78 <HAL_SAI_RxCpltCallback+0x168>)
 8000dc4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <HAL_SAI_RxCpltCallback+0x160>)
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	dd1d      	ble.n	8000e10 <HAL_SAI_RxCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd6:	f003 021f 	and.w	r2, r3, #31
 8000dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ddc:	4413      	add	r3, r2
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000de4:	f3bf 8f4f 	dsb	sy
}
 8000de8:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <HAL_SAI_RxCpltCallback+0x164>)
 8000dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dee:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df4:	3320      	adds	r3, #32
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfa:	3b20      	subs	r3, #32
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	dcf2      	bgt.n	8000dea <HAL_SAI_RxCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e04:	f3bf 8f4f 	dsb	sy
}
 8000e08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e0a:	f3bf 8f6f 	isb	sy
}
 8000e0e:	bf00      	nop
}
 8000e10:	bf00      	nop
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_SAI_RxCpltCallback+0x168>)
 8000e14:	647b      	str	r3, [r7, #68]	; 0x44
 8000e16:	2340      	movs	r3, #64	; 0x40
 8000e18:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	dd1d      	ble.n	8000e5c <HAL_SAI_RxCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e22:	f003 021f 	and.w	r2, r3, #31
 8000e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e28:	4413      	add	r3, r2
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000e30:	f3bf 8f4f 	dsb	sy
}
 8000e34:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_SAI_RxCpltCallback+0x164>)
 8000e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e3a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e40:	3320      	adds	r3, #32
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e46:	3b20      	subs	r3, #32
 8000e48:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dcf2      	bgt.n	8000e36 <HAL_SAI_RxCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e50:	f3bf 8f4f 	dsb	sy
}
 8000e54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e56:	f3bf 8f6f 	isb	sy
}
 8000e5a:	bf00      	nop
}
 8000e5c:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000e5e:	bf00      	nop
 8000e60:	374c      	adds	r7, #76	; 0x4c
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	240001b0 	.word	0x240001b0
 8000e70:	240001b4 	.word	0x240001b4
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	240001f4 	.word	0x240001f4

08000e7c <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b093      	sub	sp, #76	; 0x4c
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 1;
 8000e84:	4b54      	ldr	r3, [pc, #336]	; (8000fd8 <HAL_SAI_RxHalfCpltCallback+0x15c>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	4b54      	ldr	r3, [pc, #336]	; (8000fdc <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	2340      	movs	r3, #64	; 0x40
 8000e90:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	dd1d      	ble.n	8000ed4 <HAL_SAI_RxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f003 021f 	and.w	r2, r3, #31
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea8:	f3bf 8f4f 	dsb	sy
}
 8000eac:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000eae:	4a4c      	ldr	r2, [pc, #304]	; (8000fe0 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	3320      	adds	r3, #32
 8000eba:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3b20      	subs	r3, #32
 8000ec0:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dcf2      	bgt.n	8000eae <HAL_SAI_RxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ec8:	f3bf 8f4f 	dsb	sy
}
 8000ecc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ece:	f3bf 8f6f 	isb	sy
}
 8000ed2:	bf00      	nop
}
 8000ed4:	bf00      	nop
 8000ed6:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eda:	2340      	movs	r3, #64	; 0x40
 8000edc:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dd1d      	ble.n	8000f20 <HAL_SAI_RxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	f003 021f 	and.w	r2, r3, #31
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	4413      	add	r3, r2
 8000eee:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef4:	f3bf 8f4f 	dsb	sy
}
 8000ef8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000efa:	4a39      	ldr	r2, [pc, #228]	; (8000fe0 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	3320      	adds	r3, #32
 8000f06:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	3b20      	subs	r3, #32
 8000f0c:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dcf2      	bgt.n	8000efa <HAL_SAI_RxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f14:	f3bf 8f4f 	dsb	sy
}
 8000f18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f1a:	f3bf 8f6f 	isb	sy
}
 8000f1e:	bf00      	nop
}
 8000f20:	bf00      	nop


	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[6] = input_i2s_buffer_au32[2];
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	4a2f      	ldr	r2, [pc, #188]	; (8000fe4 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000f28:	6193      	str	r3, [r2, #24]
	output_i2s_buffer_au32[7] = input_i2s_buffer_au32[3];
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	4a2d      	ldr	r2, [pc, #180]	; (8000fe4 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
 8000f36:	2340      	movs	r3, #64	; 0x40
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	dd1d      	ble.n	8000f7c <HAL_SAI_RxHalfCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f42:	f003 021f 	and.w	r2, r3, #31
 8000f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f48:	4413      	add	r3, r2
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000f50:	f3bf 8f4f 	dsb	sy
}
 8000f54:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000f56:	4a22      	ldr	r2, [pc, #136]	; (8000fe0 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f60:	3320      	adds	r3, #32
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f66:	3b20      	subs	r3, #32
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	dcf2      	bgt.n	8000f56 <HAL_SAI_RxHalfCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f70:	f3bf 8f4f 	dsb	sy
}
 8000f74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f76:	f3bf 8f6f 	isb	sy
}
 8000f7a:	bf00      	nop
}
 8000f7c:	bf00      	nop
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000f80:	647b      	str	r3, [r7, #68]	; 0x44
 8000f82:	2340      	movs	r3, #64	; 0x40
 8000f84:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	dd1d      	ble.n	8000fc8 <HAL_SAI_RxHalfCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f8e:	f003 021f 	and.w	r2, r3, #31
 8000f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f94:	4413      	add	r3, r2
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9c:	f3bf 8f4f 	dsb	sy
}
 8000fa0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fac:	3320      	adds	r3, #32
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb2:	3b20      	subs	r3, #32
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dcf2      	bgt.n	8000fa2 <HAL_SAI_RxHalfCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fbc:	f3bf 8f4f 	dsb	sy
}
 8000fc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fc2:	f3bf 8f6f 	isb	sy
}
 8000fc6:	bf00      	nop
}
 8000fc8:	bf00      	nop

	SCB_CleanDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));


}
 8000fca:	bf00      	nop
 8000fcc:	374c      	adds	r7, #76	; 0x4c
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	240001b0 	.word	0x240001b0
 8000fdc:	240001b4 	.word	0x240001b4
 8000fe0:	e000ed00 	.word	0xe000ed00
 8000fe4:	240001f4 	.word	0x240001f4

08000fe8 <JumpToBootloader>:
/*
 * This function puts the device into DFU (bootloader mode)
 * After you entered this, you can update FW via USB.
 */
void JumpToBootloader(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
	  uint32_t i=0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
	  void (*SysMemBootJump)(void);

	  /* Set the address of the entry point to bootloader */
	     volatile uint32_t BootAddr = 0x1FF09800;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <JumpToBootloader+0x6c>)
 8000ff4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff6:	b672      	cpsid	i
}
 8000ff8:	bf00      	nop

	  /* Disable all interrupts */
	     __disable_irq();

	  /* Disable Systick timer */
	     SysTick->CTRL = 0;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <JumpToBootloader+0x70>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]

	  /* Set the clock to the default state */
	     HAL_RCC_DeInit();
 8001000:	f005 fc2c 	bl	800685c <HAL_RCC_DeInit>

	  /* Clear Interrupt Enable Register & Interrupt Pending Register */
	     for (i=0;i<5;i++)
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e010      	b.n	800102c <JumpToBootloader+0x44>
	     {
		  NVIC->ICER[i]=0xFFFFFFFF;
 800100a:	4a14      	ldr	r2, [pc, #80]	; (800105c <JumpToBootloader+0x74>)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3320      	adds	r3, #32
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  NVIC->ICPR[i]=0xFFFFFFFF;
 8001018:	4a10      	ldr	r2, [pc, #64]	; (800105c <JumpToBootloader+0x74>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3360      	adds	r3, #96	; 0x60
 800101e:	f04f 31ff 	mov.w	r1, #4294967295
 8001022:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	     for (i=0;i<5;i++)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b04      	cmp	r3, #4
 8001030:	d9eb      	bls.n	800100a <JumpToBootloader+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8001032:	b662      	cpsie	i
}
 8001034:	bf00      	nop

	  /* Re-enable all interrupts */
	     __enable_irq();

	  /* Set up the jump to booloader address + 4 */
	     SysMemBootJump = (void (*)(void)) (*((uint32_t *) ((BootAddr + 4))));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3304      	adds	r3, #4
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60bb      	str	r3, [r7, #8]

	  /* Set the main stack pointer to the bootloader stack */
	     __set_MSP(*(uint32_t *)BootAddr);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f383 8808 	msr	MSP, r3
}
 800104a:	bf00      	nop

	  /* Call the function to jump to bootloader location */
	     SysMemBootJump();
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4798      	blx	r3

	  /* Jump is done successfully */
	     while (1)
 8001050:	e7fe      	b.n	8001050 <JumpToBootloader+0x68>
 8001052:	bf00      	nop
 8001054:	1ff09800 	.word	0x1ff09800
 8001058:	e000e010 	.word	0xe000e010
 800105c:	e000e100 	.word	0xe000e100

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001066:	f000 fe29 	bl	8001cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106a:	f000 f883 	bl	8001174 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800106e:	f000 f8f1 	bl	8001254 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001072:	f7ff fbed 	bl	8000850 <MX_GPIO_Init>
  MX_DMA_Init();
 8001076:	f7ff fa6d 	bl	8000554 <MX_DMA_Init>
  MX_SAI1_Init();
 800107a:	f000 fa4d 	bl	8001518 <MX_SAI1_Init>
  MX_SPI1_Init();
 800107e:	f000 fb91 	bl	80017a4 <MX_SPI1_Init>
  MX_FMC_Init();
 8001082:	f7ff fa9f 	bl	80005c4 <MX_FMC_Init>
  MX_OCTOSPI1_Init();
 8001086:	f000 f91d 	bl	80012c4 <MX_OCTOSPI1_Init>
  MX_USB_DEVICE_Init();
 800108a:	f00e fa61 	bl	800f550 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // init SAI interface
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, output_i2s_buffer_au32, 	16);
 800108e:	2210      	movs	r2, #16
 8001090:	4931      	ldr	r1, [pc, #196]	; (8001158 <main+0xf8>)
 8001092:	4832      	ldr	r0, [pc, #200]	; (800115c <main+0xfc>)
 8001094:	f009 fa8e 	bl	800a5b4 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, input_i2s_buffer_au32, 	16);
 8001098:	2210      	movs	r2, #16
 800109a:	4931      	ldr	r1, [pc, #196]	; (8001160 <main+0x100>)
 800109c:	4831      	ldr	r0, [pc, #196]	; (8001164 <main+0x104>)
 800109e:	f009 fb3f 	bl	800a720 <HAL_SAI_Receive_DMA>

  // init CODEC
	ad1939_init(&hspi1);
 80010a2:	4831      	ldr	r0, [pc, #196]	; (8001168 <main+0x108>)
 80010a4:	f7ff f9d4 	bl	8000450 <ad1939_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	// FLASH TESTING START

//	AUDIO_Init();
	JumpToBootloader();
 80010a8:	f7ff ff9e 	bl	8000fe8 <JumpToBootloader>
  while (1)
  {
	  uint32_t fmctestStart;
	  uint32_t fmctestStop;

	  fmctestStart = HAL_GetTick();
 80010ac:	f000 fe8c 	bl	8001dc8 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]
	  uint32_t errorCounter =0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t usb_state=0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
	  for(uint32_t i = 0; i<10000;i++){
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
 80010be:	e039      	b.n	8001134 <main+0xd4>


		  //usb_state = CDC_Transmit_HS((uint8_t*)mymsg, strlen(mymsg));
		  //HAL_Delay(100);

		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 80010c0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e02e      	b.n	8001126 <main+0xc6>
			  fmctestStart = HAL_GetTick();
 80010c8:	f000 fe7e 	bl	8001dc8 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]
			  uint8_t number_inc = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	72bb      	strb	r3, [r7, #10]
//			  for(uint32_t counter = 1; counter<SDRAM_SIZE; counter=counter+2){
//				  *(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t) number_inc;
//				  number_inc++;
//			  }

			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	e007      	b.n	80010e8 <main+0x88>
			 				  sdram_array[counter] = j;
 80010d8:	4924      	ldr	r1, [pc, #144]	; (800116c <main+0x10c>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	3301      	adds	r3, #1
 80010e6:	61bb      	str	r3, [r7, #24]
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	2b09      	cmp	r3, #9
 80010ec:	d9f4      	bls.n	80010d8 <main+0x78>
//			  				  if(*(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) != j){
//			  					  errorCounter++;
//			  				  }


			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	e00c      	b.n	800110e <main+0xae>
				  if( sdram_array[counter] != j){
 80010f4:	4a1d      	ldr	r2, [pc, #116]	; (800116c <main+0x10c>)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d002      	beq.n	8001108 <main+0xa8>
					  errorCounter++;
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	3301      	adds	r3, #1
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2b09      	cmp	r3, #9
 8001112:	d9ef      	bls.n	80010f4 <main+0x94>
				  }
			  }
			  fmctestStop = (HAL_GetTick()-fmctestStart);
 8001114:	f000 fe58 	bl	8001dc8 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	607b      	str	r3, [r7, #4]
		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	3301      	adds	r3, #1
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	4a11      	ldr	r2, [pc, #68]	; (8001170 <main+0x110>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d9cc      	bls.n	80010c8 <main+0x68>
	  for(uint32_t i = 0; i<10000;i++){
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	3301      	adds	r3, #1
 8001132:	623b      	str	r3, [r7, #32]
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	f242 720f 	movw	r2, #9999	; 0x270f
 800113a:	4293      	cmp	r3, r2
 800113c:	d9c0      	bls.n	80010c0 <main+0x60>
		  }

	  }

	  if(errorCounter){
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	2b00      	cmp	r3, #0
 8001142:	d000      	beq.n	8001146 <main+0xe6>
		  while(1){
 8001144:	e7fe      	b.n	8001144 <main+0xe4>

		  }
	  }

	  uint8_t var = *(__IO uint8_t*)(SDRAM_ADDRESS_START);
 8001146:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	72fb      	strb	r3, [r7, #11]
	  HAL_Delay(50);
 800114e:	2032      	movs	r0, #50	; 0x32
 8001150:	f000 fe46 	bl	8001de0 <HAL_Delay>
  {
 8001154:	e7aa      	b.n	80010ac <main+0x4c>
 8001156:	bf00      	nop
 8001158:	240001f4 	.word	0x240001f4
 800115c:	24000290 	.word	0x24000290
 8001160:	240001b4 	.word	0x240001b4
 8001164:	24000328 	.word	0x24000328
 8001168:	240004b4 	.word	0x240004b4
 800116c:	c0000000 	.word	0xc0000000
 8001170:	000100c7 	.word	0x000100c7

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b09c      	sub	sp, #112	; 0x70
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	224c      	movs	r2, #76	; 0x4c
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f00e ff81 	bl	801008a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2220      	movs	r2, #32
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f00e ff7b 	bl	801008a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001194:	2002      	movs	r0, #2
 8001196:	f005 fb17 	bl	80067c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <SystemClock_Config+0xdc>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a2b      	ldr	r2, [pc, #172]	; (8001250 <SystemClock_Config+0xdc>)
 80011a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011a8:	6193      	str	r3, [r2, #24]
 80011aa:	4b29      	ldr	r3, [pc, #164]	; (8001250 <SystemClock_Config+0xdc>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011b6:	bf00      	nop
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <SystemClock_Config+0xdc>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011c4:	d1f8      	bne.n	80011b8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80011c6:	2321      	movs	r3, #33	; 0x21
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011d0:	2301      	movs	r3, #1
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d4:	2302      	movs	r3, #2
 80011d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d8:	2302      	movs	r3, #2
 80011da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80011e0:	232c      	movs	r3, #44	; 0x2c
 80011e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011f0:	230c      	movs	r3, #12
 80011f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	4618      	mov	r0, r3
 8001202:	f005 fc55 	bl	8006ab0 <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800120c:	f000 f855 	bl	80012ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	233f      	movs	r3, #63	; 0x3f
 8001212:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001214:	2303      	movs	r3, #3
 8001216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800121c:	2308      	movs	r3, #8
 800121e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001220:	2340      	movs	r3, #64	; 0x40
 8001222:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001224:	2340      	movs	r3, #64	; 0x40
 8001226:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2103      	movs	r1, #3
 8001236:	4618      	mov	r0, r3
 8001238:	f006 f814 	bl	8007264 <HAL_RCC_ClockConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001242:	f000 f83a 	bl	80012ba <Error_Handler>
  }
}
 8001246:	bf00      	nop
 8001248:	3770      	adds	r7, #112	; 0x70
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	58024800 	.word	0x58024800

08001254 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0ae      	sub	sp, #184	; 0xb8
 8001258:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125a:	463b      	mov	r3, r7
 800125c:	22b8      	movs	r2, #184	; 0xb8
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f00e ff12 	bl	801008a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 8001266:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001272:	2302      	movs	r3, #2
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 8001276:	230f      	movs	r3, #15
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800127a:	2302      	movs	r3, #2
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800127e:	2302      	movs	r3, #2
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001282:	2302      	movs	r3, #2
 8001284:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001286:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800128c:	2300      	movs	r3, #0
 800128e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 8001290:	f640 3386 	movw	r3, #2950	; 0xb86
 8001294:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8001296:	2302      	movs	r3, #2
 8001298:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800129a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4618      	mov	r0, r3
 80012a4:	f006 fb54 	bl	8007950 <HAL_RCCEx_PeriphCLKConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 80012ae:	f000 f804 	bl	80012ba <Error_Handler>
  }
}
 80012b2:	bf00      	nop
 80012b4:	37b8      	adds	r7, #184	; 0xb8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012be:	b672      	cpsid	i
}
 80012c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <Error_Handler+0x8>

080012c4 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 80012dc:	4a28      	ldr	r2, [pc, #160]	; (8001380 <MX_OCTOSPI1_Init+0xbc>)
 80012de:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 80012e2:	2204      	movs	r2, #4
 80012e4:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80012ec:	4b23      	ldr	r3, [pc, #140]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 80012f2:	4b22      	ldr	r3, [pc, #136]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 80012f4:	2218      	movs	r2, #24
 80012f6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80012f8:	4b20      	ldr	r3, [pc, #128]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 4;
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 8001312:	2204      	movs	r2, #4
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 8001318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 8001320:	2200      	movs	r2, #0
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 8001326:	2200      	movs	r2, #0
 8001328:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 800132c:	2208      	movs	r2, #8
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 8001332:	2200      	movs	r2, #0
 8001334:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 8001338:	2200      	movs	r2, #0
 800133a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800133c:	480f      	ldr	r0, [pc, #60]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 800133e:	f003 f925 	bl	800458c <HAL_OSPI_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8001348:	f7ff ffb7 	bl	80012ba <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800134c:	2301      	movs	r3, #1
 800134e:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8001350:	2301      	movs	r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001354:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001358:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800135a:	463b      	mov	r3, r7
 800135c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <MX_OCTOSPI1_Init+0xb8>)
 8001364:	f003 f9de 	bl	8004724 <HAL_OSPIM_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 800136e:	f7ff ffa4 	bl	80012ba <Error_Handler>
//	sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
//
//	HAL_OSPI_Command(&hospi1, &sCommand, 1000);
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	24000234 	.word	0x24000234
 8001380:	52005000 	.word	0x52005000

08001384 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0ba      	sub	sp, #232	; 0xe8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	22b8      	movs	r2, #184	; 0xb8
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00e fe70 	bl	801008a <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a56      	ldr	r2, [pc, #344]	; (8001508 <HAL_OSPI_MspInit+0x184>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	f040 80a5 	bne.w	8001500 <HAL_OSPI_MspInit+0x17c>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80013b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	4618      	mov	r0, r3
 80013cc:	f006 fac0 	bl	8007950 <HAL_RCCEx_PeriphCLKConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 80013d6:	f7ff ff70 	bl	80012ba <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80013da:	4b4c      	ldr	r3, [pc, #304]	; (800150c <HAL_OSPI_MspInit+0x188>)
 80013dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013e0:	4a4a      	ldr	r2, [pc, #296]	; (800150c <HAL_OSPI_MspInit+0x188>)
 80013e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80013ea:	4b48      	ldr	r3, [pc, #288]	; (800150c <HAL_OSPI_MspInit+0x188>)
 80013ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80013f8:	4b44      	ldr	r3, [pc, #272]	; (800150c <HAL_OSPI_MspInit+0x188>)
 80013fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013fe:	4a43      	ldr	r2, [pc, #268]	; (800150c <HAL_OSPI_MspInit+0x188>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001408:	4b40      	ldr	r3, [pc, #256]	; (800150c <HAL_OSPI_MspInit+0x188>)
 800140a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800140e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001416:	4b3d      	ldr	r3, [pc, #244]	; (800150c <HAL_OSPI_MspInit+0x188>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141c:	4a3b      	ldr	r2, [pc, #236]	; (800150c <HAL_OSPI_MspInit+0x188>)
 800141e:	f043 0310 	orr.w	r3, r3, #16
 8001422:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001426:	4b39      	ldr	r3, [pc, #228]	; (800150c <HAL_OSPI_MspInit+0x188>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001434:	4b35      	ldr	r3, [pc, #212]	; (800150c <HAL_OSPI_MspInit+0x188>)
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143a:	4a34      	ldr	r2, [pc, #208]	; (800150c <HAL_OSPI_MspInit+0x188>)
 800143c:	f043 0320 	orr.w	r3, r3, #32
 8001440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_OSPI_MspInit+0x188>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144a:	f003 0320 	and.w	r3, r3, #32
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> OCTOSPIM_P1_IO0
    PF9     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001452:	2304      	movs	r3, #4
 8001454:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800146a:	2309      	movs	r3, #9
 800146c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001470:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001474:	4619      	mov	r1, r3
 8001476:	4826      	ldr	r0, [pc, #152]	; (8001510 <HAL_OSPI_MspInit+0x18c>)
 8001478:	f002 fec6 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800147c:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001480:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001496:	230a      	movs	r3, #10
 8001498:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800149c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014a0:	4619      	mov	r1, r3
 80014a2:	481c      	ldr	r0, [pc, #112]	; (8001514 <HAL_OSPI_MspInit+0x190>)
 80014a4:	f002 feb0 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80014c2:	2309      	movs	r3, #9
 80014c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014cc:	4619      	mov	r1, r3
 80014ce:	4811      	ldr	r0, [pc, #68]	; (8001514 <HAL_OSPI_MspInit+0x190>)
 80014d0:	f002 fe9a 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 80014ee:	230b      	movs	r3, #11
 80014f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <HAL_OSPI_MspInit+0x18c>)
 80014fc:	f002 fe84 	bl	8004208 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001500:	bf00      	nop
 8001502:	37e8      	adds	r7, #232	; 0xe8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	52005000 	.word	0x52005000
 800150c:	58024400 	.word	0x58024400
 8001510:	58021000 	.word	0x58021000
 8001514:	58021400 	.word	0x58021400

08001518 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800151c:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <MX_SAI1_Init+0xb0>)
 800151e:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <MX_SAI1_Init+0xb4>)
 8001520:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001522:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <MX_SAI1_Init+0xb0>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <MX_SAI1_Init+0xb0>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <MX_SAI1_Init+0xb0>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <MX_SAI1_Init+0xb0>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <MX_SAI1_Init+0xb0>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <MX_SAI1_Init+0xb0>)
 8001542:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001546:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <MX_SAI1_Init+0xb0>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800154e:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <MX_SAI1_Init+0xb0>)
 8001550:	2200      	movs	r2, #0
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <MX_SAI1_Init+0xb0>)
 8001556:	2200      	movs	r2, #0
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_SAI1_Init+0xb0>)
 800155c:	2200      	movs	r2, #0
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001560:	2308      	movs	r3, #8
 8001562:	2202      	movs	r2, #2
 8001564:	2100      	movs	r1, #0
 8001566:	4818      	ldr	r0, [pc, #96]	; (80015c8 <MX_SAI1_Init+0xb0>)
 8001568:	f008 fdd8 	bl	800a11c <HAL_SAI_InitProtocol>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8001572:	f7ff fea2 	bl	80012ba <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_SAI1_Init+0xb8>)
 8001578:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <MX_SAI1_Init+0xbc>)
 800157a:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_SAI1_Init+0xb8>)
 800157e:	2203      	movs	r2, #3
 8001580:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_SAI1_Init+0xb8>)
 8001584:	2201      	movs	r2, #1
 8001586:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_SAI1_Init+0xb8>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_SAI1_Init+0xb8>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_SAI1_Init+0xb8>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <MX_SAI1_Init+0xb8>)
 800159c:	2200      	movs	r2, #0
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_SAI1_Init+0xb8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <MX_SAI1_Init+0xb8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 80015ac:	2308      	movs	r3, #8
 80015ae:	2202      	movs	r2, #2
 80015b0:	2100      	movs	r1, #0
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <MX_SAI1_Init+0xb8>)
 80015b4:	f008 fdb2 	bl	800a11c <HAL_SAI_InitProtocol>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 80015be:	f7ff fe7c 	bl	80012ba <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	24000290 	.word	0x24000290
 80015cc:	40015804 	.word	0x40015804
 80015d0:	24000328 	.word	0x24000328
 80015d4:	40015824 	.word	0x40015824

080015d8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a66      	ldr	r2, [pc, #408]	; (8001780 <HAL_SAI_MspInit+0x1a8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d160      	bne.n	80016ac <HAL_SAI_MspInit+0xd4>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80015ea:	4b66      	ldr	r3, [pc, #408]	; (8001784 <HAL_SAI_MspInit+0x1ac>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10e      	bne.n	8001610 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80015f2:	4b65      	ldr	r3, [pc, #404]	; (8001788 <HAL_SAI_MspInit+0x1b0>)
 80015f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015f8:	4a63      	ldr	r2, [pc, #396]	; (8001788 <HAL_SAI_MspInit+0x1b0>)
 80015fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001602:	4b61      	ldr	r3, [pc, #388]	; (8001788 <HAL_SAI_MspInit+0x1b0>)
 8001604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001610:	4b5c      	ldr	r3, [pc, #368]	; (8001784 <HAL_SAI_MspInit+0x1ac>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	4a5b      	ldr	r2, [pc, #364]	; (8001784 <HAL_SAI_MspInit+0x1ac>)
 8001618:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800161a:	2370      	movs	r3, #112	; 0x70
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800162a:	2306      	movs	r3, #6
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4855      	ldr	r0, [pc, #340]	; (800178c <HAL_SAI_MspInit+0x1b4>)
 8001636:	f002 fde7 	bl	8004208 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 800163a:	4b55      	ldr	r3, [pc, #340]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 800163c:	4a55      	ldr	r2, [pc, #340]	; (8001794 <HAL_SAI_MspInit+0x1bc>)
 800163e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001640:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 8001642:	2257      	movs	r2, #87	; 0x57
 8001644:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001646:	4b52      	ldr	r3, [pc, #328]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 8001648:	2240      	movs	r2, #64	; 0x40
 800164a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001652:	4b4f      	ldr	r3, [pc, #316]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 8001654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001658:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800165a:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 800165c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001660:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001662:	4b4b      	ldr	r3, [pc, #300]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 8001664:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001668:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800166a:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 800166c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001670:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001672:	4b47      	ldr	r3, [pc, #284]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 8001674:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001678:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800167a:	4b45      	ldr	r3, [pc, #276]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 800167c:	2200      	movs	r2, #0
 800167e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001680:	4843      	ldr	r0, [pc, #268]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 8001682:	f000 fce1 	bl	8002048 <HAL_DMA_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 800168c:	f7ff fe15 	bl	80012ba <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a3f      	ldr	r2, [pc, #252]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 8001694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001698:	4a3d      	ldr	r2, [pc, #244]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a3b      	ldr	r2, [pc, #236]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 80016a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80016a6:	4a3a      	ldr	r2, [pc, #232]	; (8001790 <HAL_SAI_MspInit+0x1b8>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a39      	ldr	r2, [pc, #228]	; (8001798 <HAL_SAI_MspInit+0x1c0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d160      	bne.n	8001778 <HAL_SAI_MspInit+0x1a0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80016b6:	4b33      	ldr	r3, [pc, #204]	; (8001784 <HAL_SAI_MspInit+0x1ac>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10e      	bne.n	80016dc <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80016be:	4b32      	ldr	r3, [pc, #200]	; (8001788 <HAL_SAI_MspInit+0x1b0>)
 80016c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016c4:	4a30      	ldr	r2, [pc, #192]	; (8001788 <HAL_SAI_MspInit+0x1b0>)
 80016c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016ce:	4b2e      	ldr	r3, [pc, #184]	; (8001788 <HAL_SAI_MspInit+0x1b0>)
 80016d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80016dc:	4b29      	ldr	r3, [pc, #164]	; (8001784 <HAL_SAI_MspInit+0x1ac>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	4a28      	ldr	r2, [pc, #160]	; (8001784 <HAL_SAI_MspInit+0x1ac>)
 80016e4:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016e6:	2308      	movs	r3, #8
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80016f6:	2306      	movs	r3, #6
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4822      	ldr	r0, [pc, #136]	; (800178c <HAL_SAI_MspInit+0x1b4>)
 8001702:	f002 fd81 	bl	8004208 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 8001708:	4a25      	ldr	r2, [pc, #148]	; (80017a0 <HAL_SAI_MspInit+0x1c8>)
 800170a:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800170c:	4b23      	ldr	r3, [pc, #140]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 800170e:	2258      	movs	r2, #88	; 0x58
 8001710:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 8001720:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001724:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 8001728:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800172c:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 8001730:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001734:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 8001738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800173c:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 8001740:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001744:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 8001748:	2200      	movs	r2, #0
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800174c:	4813      	ldr	r0, [pc, #76]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 800174e:	f000 fc7b 	bl	8002048 <HAL_DMA_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 8001758:	f7ff fdaf 	bl	80012ba <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 8001760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a0b      	ldr	r2, [pc, #44]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 800176e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_SAI_MspInit+0x1c4>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	; 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40015804 	.word	0x40015804
 8001784:	240004b0 	.word	0x240004b0
 8001788:	58024400 	.word	0x58024400
 800178c:	58021000 	.word	0x58021000
 8001790:	240003c0 	.word	0x240003c0
 8001794:	40020010 	.word	0x40020010
 8001798:	40015824 	.word	0x40015824
 800179c:	24000438 	.word	0x24000438
 80017a0:	40020410 	.word	0x40020410

080017a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <MX_SPI1_Init+0xa4>)
 80017aa:	4a28      	ldr	r2, [pc, #160]	; (800184c <MX_SPI1_Init+0xa8>)
 80017ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <MX_SPI1_Init+0xa4>)
 80017b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <MX_SPI1_Init+0xa4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <MX_SPI1_Init+0xa4>)
 80017be:	2207      	movs	r2, #7
 80017c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <MX_SPI1_Init+0xa4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <MX_SPI1_Init+0xa4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <MX_SPI1_Init+0xa4>)
 80017d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80017d6:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <MX_SPI1_Init+0xa4>)
 80017d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <MX_SPI1_Init+0xa4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <MX_SPI1_Init+0xa4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_SPI1_Init+0xa4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <MX_SPI1_Init+0xa4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_SPI1_Init+0xa4>)
 80017f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_SPI1_Init+0xa4>)
 8001800:	2200      	movs	r2, #0
 8001802:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <MX_SPI1_Init+0xa4>)
 8001806:	2200      	movs	r2, #0
 8001808:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_SPI1_Init+0xa4>)
 800180c:	2200      	movs	r2, #0
 800180e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <MX_SPI1_Init+0xa4>)
 8001812:	2200      	movs	r2, #0
 8001814:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_SPI1_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <MX_SPI1_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_SPI1_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <MX_SPI1_Init+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_SPI1_Init+0xa4>)
 8001830:	2200      	movs	r2, #0
 8001832:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MX_SPI1_Init+0xa4>)
 8001836:	f009 fafd 	bl	800ae34 <HAL_SPI_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001840:	f7ff fd3b 	bl	80012ba <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	240004b4 	.word	0x240004b4
 800184c:	40013000 	.word	0x40013000

08001850 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a3a      	ldr	r2, [pc, #232]	; (8001958 <HAL_SPI_MspInit+0x108>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d16d      	bne.n	800194e <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001872:	4b3a      	ldr	r3, [pc, #232]	; (800195c <HAL_SPI_MspInit+0x10c>)
 8001874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001878:	4a38      	ldr	r2, [pc, #224]	; (800195c <HAL_SPI_MspInit+0x10c>)
 800187a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800187e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001882:	4b36      	ldr	r3, [pc, #216]	; (800195c <HAL_SPI_MspInit+0x10c>)
 8001884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	4b32      	ldr	r3, [pc, #200]	; (800195c <HAL_SPI_MspInit+0x10c>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001896:	4a31      	ldr	r2, [pc, #196]	; (800195c <HAL_SPI_MspInit+0x10c>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a0:	4b2e      	ldr	r3, [pc, #184]	; (800195c <HAL_SPI_MspInit+0x10c>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <HAL_SPI_MspInit+0x10c>)
 80018b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b4:	4a29      	ldr	r2, [pc, #164]	; (800195c <HAL_SPI_MspInit+0x10c>)
 80018b6:	f043 0308 	orr.w	r3, r3, #8
 80018ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_SPI_MspInit+0x10c>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018cc:	4b23      	ldr	r3, [pc, #140]	; (800195c <HAL_SPI_MspInit+0x10c>)
 80018ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d2:	4a22      	ldr	r2, [pc, #136]	; (800195c <HAL_SPI_MspInit+0x10c>)
 80018d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <HAL_SPI_MspInit+0x10c>)
 80018de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 80018ea:	f248 0340 	movw	r3, #32832	; 0x8040
 80018ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018fc:	2305      	movs	r3, #5
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	4816      	ldr	r0, [pc, #88]	; (8001960 <HAL_SPI_MspInit+0x110>)
 8001908:	f002 fc7e 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800191c:	2305      	movs	r3, #5
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	480f      	ldr	r0, [pc, #60]	; (8001964 <HAL_SPI_MspInit+0x114>)
 8001928:	f002 fc6e 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800192c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193e:	2305      	movs	r3, #5
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4619      	mov	r1, r3
 8001948:	4807      	ldr	r0, [pc, #28]	; (8001968 <HAL_SPI_MspInit+0x118>)
 800194a:	f002 fc5d 	bl	8004208 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800194e:	bf00      	nop
 8001950:	3730      	adds	r7, #48	; 0x30
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40013000 	.word	0x40013000
 800195c:	58024400 	.word	0x58024400
 8001960:	58020000 	.word	0x58020000
 8001964:	58020c00 	.word	0x58020c00
 8001968:	58021800 	.word	0x58021800

0800196c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_MspInit+0x30>)
 8001974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001978:	4a08      	ldr	r2, [pc, #32]	; (800199c <HAL_MspInit+0x30>)
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_MspInit+0x30>)
 8001984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	58024400 	.word	0x58024400

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f000 f9d8 	bl	8001da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <DMA1_Stream0_IRQHandler+0x10>)
 80019fa:	f001 f8e7 	bl	8002bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	240003c0 	.word	0x240003c0

08001a08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <DMA2_Stream0_IRQHandler+0x10>)
 8001a0e:	f001 f8dd 	bl	8002bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	24000438 	.word	0x24000438

08001a1c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <OTG_HS_IRQHandler+0x10>)
 8001a22:	f003 fdd5 	bl	80055d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	24000b20 	.word	0x24000b20

08001a30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	e00a      	b.n	8001a58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a42:	f3af 8000 	nop.w
 8001a46:	4601      	mov	r1, r0
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	60ba      	str	r2, [r7, #8]
 8001a4e:	b2ca      	uxtb	r2, r1
 8001a50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3301      	adds	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dbf0      	blt.n	8001a42 <_read+0x12>
  }

  return len;
 8001a60:	687b      	ldr	r3, [r7, #4]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e009      	b.n	8001a90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	60ba      	str	r2, [r7, #8]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dbf1      	blt.n	8001a7c <_write+0x12>
  }
  return len;
 8001a98:	687b      	ldr	r3, [r7, #4]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <_close>:

int _close(int file)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aca:	605a      	str	r2, [r3, #4]
  return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_isatty>:

int _isatty(int file)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b14:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <_sbrk+0x5c>)
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <_sbrk+0x60>)
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <_sbrk+0x64>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <_sbrk+0x68>)
 8001b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d207      	bcs.n	8001b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b3c:	f00e faf4 	bl	8010128 <__errno>
 8001b40:	4603      	mov	r3, r0
 8001b42:	220c      	movs	r2, #12
 8001b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	e009      	b.n	8001b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <_sbrk+0x64>)
 8001b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	24050000 	.word	0x24050000
 8001b6c:	00004000 	.word	0x00004000
 8001b70:	2400053c 	.word	0x2400053c
 8001b74:	24001578 	.word	0x24001578

08001b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <SystemInit+0xd0>)
 8001b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b82:	4a31      	ldr	r2, [pc, #196]	; (8001c48 <SystemInit+0xd0>)
 8001b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <SystemInit+0xd4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	2b06      	cmp	r3, #6
 8001b96:	d807      	bhi.n	8001ba8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b98:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <SystemInit+0xd4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 030f 	bic.w	r3, r3, #15
 8001ba0:	4a2a      	ldr	r2, [pc, #168]	; (8001c4c <SystemInit+0xd4>)
 8001ba2:	f043 0307 	orr.w	r3, r3, #7
 8001ba6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ba8:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <SystemInit+0xd8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a28      	ldr	r2, [pc, #160]	; (8001c50 <SystemInit+0xd8>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bb4:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <SystemInit+0xd8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bba:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <SystemInit+0xd8>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4924      	ldr	r1, [pc, #144]	; (8001c50 <SystemInit+0xd8>)
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <SystemInit+0xdc>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <SystemInit+0xd4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <SystemInit+0xd4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 030f 	bic.w	r3, r3, #15
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <SystemInit+0xd4>)
 8001bdc:	f043 0307 	orr.w	r3, r3, #7
 8001be0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <SystemInit+0xd8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <SystemInit+0xd8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <SystemInit+0xd8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <SystemInit+0xd8>)
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <SystemInit+0xe0>)
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <SystemInit+0xd8>)
 8001bfc:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <SystemInit+0xe4>)
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <SystemInit+0xd8>)
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <SystemInit+0xe8>)
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <SystemInit+0xd8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <SystemInit+0xd8>)
 8001c0e:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <SystemInit+0xe8>)
 8001c10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <SystemInit+0xd8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <SystemInit+0xd8>)
 8001c1a:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <SystemInit+0xe8>)
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <SystemInit+0xd8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <SystemInit+0xd8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <SystemInit+0xd8>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <SystemInit+0xd8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <SystemInit+0xec>)
 8001c38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00
 8001c4c:	52002000 	.word	0x52002000
 8001c50:	58024400 	.word	0x58024400
 8001c54:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c58:	02020200 	.word	0x02020200
 8001c5c:	01ff0000 	.word	0x01ff0000
 8001c60:	01010280 	.word	0x01010280
 8001c64:	52004000 	.word	0x52004000

08001c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c6c:	f7ff ff84 	bl	8001b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c70:	480c      	ldr	r0, [pc, #48]	; (8001ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c72:	490d      	ldr	r1, [pc, #52]	; (8001ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c88:	4c0a      	ldr	r4, [pc, #40]	; (8001cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c96:	f00e fa4d 	bl	8010134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9a:	f7ff f9e1 	bl	8001060 <main>
  bx  lr
 8001c9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ca0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001ca4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ca8:	24000140 	.word	0x24000140
  ldr r2, =_sidata
 8001cac:	08010e88 	.word	0x08010e88
  ldr r2, =_sbss
 8001cb0:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8001cb4:	24001574 	.word	0x24001574

08001cb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC3_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc2:	2003      	movs	r0, #3
 8001cc4:	f000 f980 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cc8:	f005 fc82 	bl	80075d0 <HAL_RCC_GetSysClockFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_Init+0x68>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	4913      	ldr	r1, [pc, #76]	; (8001d28 <HAL_Init+0x6c>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_Init+0x68>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_Init+0x6c>)
 8001cf0:	5cd3      	ldrb	r3, [r2, r3]
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <HAL_Init+0x70>)
 8001cfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d00:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <HAL_Init+0x74>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d06:	200f      	movs	r0, #15
 8001d08:	f000 f814 	bl	8001d34 <HAL_InitTick>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e002      	b.n	8001d1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d16:	f7ff fe29 	bl	800196c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	58024400 	.word	0x58024400
 8001d28:	08010e34 	.word	0x08010e34
 8001d2c:	24000004 	.word	0x24000004
 8001d30:	24000000 	.word	0x24000000

08001d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d3c:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_InitTick+0x60>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e021      	b.n	8001d8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_InitTick+0x64>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_InitTick+0x60>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f965 	bl	800202e <HAL_SYSTICK_Config>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00e      	b.n	8001d8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b0f      	cmp	r3, #15
 8001d72:	d80a      	bhi.n	8001d8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d74:	2200      	movs	r2, #0
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f000 f92f 	bl	8001fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d80:	4a06      	ldr	r2, [pc, #24]	; (8001d9c <HAL_InitTick+0x68>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	2400000c 	.word	0x2400000c
 8001d98:	24000000 	.word	0x24000000
 8001d9c:	24000008 	.word	0x24000008

08001da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_IncTick+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_IncTick+0x24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <HAL_IncTick+0x24>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	2400000c 	.word	0x2400000c
 8001dc4:	24000540 	.word	0x24000540

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	24000540 	.word	0x24000540

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffde 	bl	8001dc8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2400000c 	.word	0x2400000c

08001e28 <__NVIC_SetPriorityGrouping>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <__NVIC_SetPriorityGrouping+0x40>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e56:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <__NVIC_SetPriorityGrouping+0x40>)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	60d3      	str	r3, [r2, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00
 8001e6c:	05fa0000 	.word	0x05fa0000

08001e70 <__NVIC_GetPriorityGrouping>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4907      	ldr	r1, [pc, #28]	; (8001ec4 <__NVIC_EnableIRQ+0x38>)
 8001ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	; (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	; (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	; 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f7ff ff8e 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff29 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fec:	f7ff ff40 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f7ff ff90 	bl	8001f1c <NVIC_EncodePriority>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff5f 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff33 	bl	8001e8c <__NVIC_EnableIRQ>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ffa4 	bl	8001f84 <SysTick_Config>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff feba 	bl	8001dc8 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e312      	b.n	8002686 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a66      	ldr	r2, [pc, #408]	; (8002200 <HAL_DMA_Init+0x1b8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d04a      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a65      	ldr	r2, [pc, #404]	; (8002204 <HAL_DMA_Init+0x1bc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d045      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a63      	ldr	r2, [pc, #396]	; (8002208 <HAL_DMA_Init+0x1c0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d040      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a62      	ldr	r2, [pc, #392]	; (800220c <HAL_DMA_Init+0x1c4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d03b      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a60      	ldr	r2, [pc, #384]	; (8002210 <HAL_DMA_Init+0x1c8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d036      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a5f      	ldr	r2, [pc, #380]	; (8002214 <HAL_DMA_Init+0x1cc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d031      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a5d      	ldr	r2, [pc, #372]	; (8002218 <HAL_DMA_Init+0x1d0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d02c      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a5c      	ldr	r2, [pc, #368]	; (800221c <HAL_DMA_Init+0x1d4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d027      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a5a      	ldr	r2, [pc, #360]	; (8002220 <HAL_DMA_Init+0x1d8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d022      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a59      	ldr	r2, [pc, #356]	; (8002224 <HAL_DMA_Init+0x1dc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d01d      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a57      	ldr	r2, [pc, #348]	; (8002228 <HAL_DMA_Init+0x1e0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d018      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a56      	ldr	r2, [pc, #344]	; (800222c <HAL_DMA_Init+0x1e4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a54      	ldr	r2, [pc, #336]	; (8002230 <HAL_DMA_Init+0x1e8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00e      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a53      	ldr	r2, [pc, #332]	; (8002234 <HAL_DMA_Init+0x1ec>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a51      	ldr	r2, [pc, #324]	; (8002238 <HAL_DMA_Init+0x1f0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d004      	beq.n	8002100 <HAL_DMA_Init+0xb8>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a50      	ldr	r2, [pc, #320]	; (800223c <HAL_DMA_Init+0x1f4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d101      	bne.n	8002104 <HAL_DMA_Init+0xbc>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_DMA_Init+0xbe>
 8002104:	2300      	movs	r3, #0
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 813c 	beq.w	8002384 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a37      	ldr	r2, [pc, #220]	; (8002200 <HAL_DMA_Init+0x1b8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d04a      	beq.n	80021bc <HAL_DMA_Init+0x174>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a36      	ldr	r2, [pc, #216]	; (8002204 <HAL_DMA_Init+0x1bc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d045      	beq.n	80021bc <HAL_DMA_Init+0x174>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a34      	ldr	r2, [pc, #208]	; (8002208 <HAL_DMA_Init+0x1c0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d040      	beq.n	80021bc <HAL_DMA_Init+0x174>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a33      	ldr	r2, [pc, #204]	; (800220c <HAL_DMA_Init+0x1c4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d03b      	beq.n	80021bc <HAL_DMA_Init+0x174>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a31      	ldr	r2, [pc, #196]	; (8002210 <HAL_DMA_Init+0x1c8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d036      	beq.n	80021bc <HAL_DMA_Init+0x174>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a30      	ldr	r2, [pc, #192]	; (8002214 <HAL_DMA_Init+0x1cc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d031      	beq.n	80021bc <HAL_DMA_Init+0x174>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <HAL_DMA_Init+0x1d0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d02c      	beq.n	80021bc <HAL_DMA_Init+0x174>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2d      	ldr	r2, [pc, #180]	; (800221c <HAL_DMA_Init+0x1d4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d027      	beq.n	80021bc <HAL_DMA_Init+0x174>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2b      	ldr	r2, [pc, #172]	; (8002220 <HAL_DMA_Init+0x1d8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d022      	beq.n	80021bc <HAL_DMA_Init+0x174>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2a      	ldr	r2, [pc, #168]	; (8002224 <HAL_DMA_Init+0x1dc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d01d      	beq.n	80021bc <HAL_DMA_Init+0x174>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a28      	ldr	r2, [pc, #160]	; (8002228 <HAL_DMA_Init+0x1e0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d018      	beq.n	80021bc <HAL_DMA_Init+0x174>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a27      	ldr	r2, [pc, #156]	; (800222c <HAL_DMA_Init+0x1e4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d013      	beq.n	80021bc <HAL_DMA_Init+0x174>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a25      	ldr	r2, [pc, #148]	; (8002230 <HAL_DMA_Init+0x1e8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00e      	beq.n	80021bc <HAL_DMA_Init+0x174>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a24      	ldr	r2, [pc, #144]	; (8002234 <HAL_DMA_Init+0x1ec>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d009      	beq.n	80021bc <HAL_DMA_Init+0x174>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a22      	ldr	r2, [pc, #136]	; (8002238 <HAL_DMA_Init+0x1f0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d004      	beq.n	80021bc <HAL_DMA_Init+0x174>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a21      	ldr	r2, [pc, #132]	; (800223c <HAL_DMA_Init+0x1f4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d108      	bne.n	80021ce <HAL_DMA_Init+0x186>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e007      	b.n	80021de <HAL_DMA_Init+0x196>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021de:	e02f      	b.n	8002240 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021e0:	f7ff fdf2 	bl	8001dc8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d928      	bls.n	8002240 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2220      	movs	r2, #32
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2203      	movs	r2, #3
 80021f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e242      	b.n	8002686 <HAL_DMA_Init+0x63e>
 8002200:	40020010 	.word	0x40020010
 8002204:	40020028 	.word	0x40020028
 8002208:	40020040 	.word	0x40020040
 800220c:	40020058 	.word	0x40020058
 8002210:	40020070 	.word	0x40020070
 8002214:	40020088 	.word	0x40020088
 8002218:	400200a0 	.word	0x400200a0
 800221c:	400200b8 	.word	0x400200b8
 8002220:	40020410 	.word	0x40020410
 8002224:	40020428 	.word	0x40020428
 8002228:	40020440 	.word	0x40020440
 800222c:	40020458 	.word	0x40020458
 8002230:	40020470 	.word	0x40020470
 8002234:	40020488 	.word	0x40020488
 8002238:	400204a0 	.word	0x400204a0
 800223c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1c8      	bne.n	80021e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4b83      	ldr	r3, [pc, #524]	; (8002468 <HAL_DMA_Init+0x420>)
 800225a:	4013      	ands	r3, r2
 800225c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002266:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002272:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800227e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	2b04      	cmp	r3, #4
 8002292:	d107      	bne.n	80022a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	4313      	orrs	r3, r2
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b28      	cmp	r3, #40	; 0x28
 80022aa:	d903      	bls.n	80022b4 <HAL_DMA_Init+0x26c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b2e      	cmp	r3, #46	; 0x2e
 80022b2:	d91f      	bls.n	80022f4 <HAL_DMA_Init+0x2ac>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b3e      	cmp	r3, #62	; 0x3e
 80022ba:	d903      	bls.n	80022c4 <HAL_DMA_Init+0x27c>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b42      	cmp	r3, #66	; 0x42
 80022c2:	d917      	bls.n	80022f4 <HAL_DMA_Init+0x2ac>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b46      	cmp	r3, #70	; 0x46
 80022ca:	d903      	bls.n	80022d4 <HAL_DMA_Init+0x28c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b48      	cmp	r3, #72	; 0x48
 80022d2:	d90f      	bls.n	80022f4 <HAL_DMA_Init+0x2ac>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b4e      	cmp	r3, #78	; 0x4e
 80022da:	d903      	bls.n	80022e4 <HAL_DMA_Init+0x29c>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b52      	cmp	r3, #82	; 0x52
 80022e2:	d907      	bls.n	80022f4 <HAL_DMA_Init+0x2ac>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b73      	cmp	r3, #115	; 0x73
 80022ea:	d905      	bls.n	80022f8 <HAL_DMA_Init+0x2b0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b77      	cmp	r3, #119	; 0x77
 80022f2:	d801      	bhi.n	80022f8 <HAL_DMA_Init+0x2b0>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <HAL_DMA_Init+0x2b2>
 80022f8:	2300      	movs	r3, #0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002304:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f023 0307 	bic.w	r3, r3, #7
 800231c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	2b04      	cmp	r3, #4
 800232e:	d117      	bne.n	8002360 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	4313      	orrs	r3, r2
 8002338:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00e      	beq.n	8002360 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f001 fdd6 	bl	8003ef4 <DMA_CheckFifoParam>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2240      	movs	r2, #64	; 0x40
 8002352:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e192      	b.n	8002686 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f001 fd11 	bl	8003d90 <DMA_CalcBaseAndBitshift>
 800236e:	4603      	mov	r3, r0
 8002370:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	223f      	movs	r2, #63	; 0x3f
 800237c:	409a      	lsls	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	e0c8      	b.n	8002516 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a38      	ldr	r2, [pc, #224]	; (800246c <HAL_DMA_Init+0x424>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d022      	beq.n	80023d4 <HAL_DMA_Init+0x38c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a37      	ldr	r2, [pc, #220]	; (8002470 <HAL_DMA_Init+0x428>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d01d      	beq.n	80023d4 <HAL_DMA_Init+0x38c>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a35      	ldr	r2, [pc, #212]	; (8002474 <HAL_DMA_Init+0x42c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d018      	beq.n	80023d4 <HAL_DMA_Init+0x38c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a34      	ldr	r2, [pc, #208]	; (8002478 <HAL_DMA_Init+0x430>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d013      	beq.n	80023d4 <HAL_DMA_Init+0x38c>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a32      	ldr	r2, [pc, #200]	; (800247c <HAL_DMA_Init+0x434>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00e      	beq.n	80023d4 <HAL_DMA_Init+0x38c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a31      	ldr	r2, [pc, #196]	; (8002480 <HAL_DMA_Init+0x438>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d009      	beq.n	80023d4 <HAL_DMA_Init+0x38c>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a2f      	ldr	r2, [pc, #188]	; (8002484 <HAL_DMA_Init+0x43c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d004      	beq.n	80023d4 <HAL_DMA_Init+0x38c>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2e      	ldr	r2, [pc, #184]	; (8002488 <HAL_DMA_Init+0x440>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d101      	bne.n	80023d8 <HAL_DMA_Init+0x390>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <HAL_DMA_Init+0x392>
 80023d8:	2300      	movs	r3, #0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8092 	beq.w	8002504 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a21      	ldr	r2, [pc, #132]	; (800246c <HAL_DMA_Init+0x424>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d021      	beq.n	800242e <HAL_DMA_Init+0x3e6>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a20      	ldr	r2, [pc, #128]	; (8002470 <HAL_DMA_Init+0x428>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d01c      	beq.n	800242e <HAL_DMA_Init+0x3e6>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1e      	ldr	r2, [pc, #120]	; (8002474 <HAL_DMA_Init+0x42c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d017      	beq.n	800242e <HAL_DMA_Init+0x3e6>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <HAL_DMA_Init+0x430>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d012      	beq.n	800242e <HAL_DMA_Init+0x3e6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1b      	ldr	r2, [pc, #108]	; (800247c <HAL_DMA_Init+0x434>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_DMA_Init+0x3e6>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <HAL_DMA_Init+0x438>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d008      	beq.n	800242e <HAL_DMA_Init+0x3e6>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a18      	ldr	r2, [pc, #96]	; (8002484 <HAL_DMA_Init+0x43c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d003      	beq.n	800242e <HAL_DMA_Init+0x3e6>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_DMA_Init+0x440>)
 800242c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_DMA_Init+0x444>)
 800244a:	4013      	ands	r3, r2
 800244c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b40      	cmp	r3, #64	; 0x40
 8002454:	d01c      	beq.n	8002490 <HAL_DMA_Init+0x448>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b80      	cmp	r3, #128	; 0x80
 800245c:	d102      	bne.n	8002464 <HAL_DMA_Init+0x41c>
 800245e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002462:	e016      	b.n	8002492 <HAL_DMA_Init+0x44a>
 8002464:	2300      	movs	r3, #0
 8002466:	e014      	b.n	8002492 <HAL_DMA_Init+0x44a>
 8002468:	fe10803f 	.word	0xfe10803f
 800246c:	58025408 	.word	0x58025408
 8002470:	5802541c 	.word	0x5802541c
 8002474:	58025430 	.word	0x58025430
 8002478:	58025444 	.word	0x58025444
 800247c:	58025458 	.word	0x58025458
 8002480:	5802546c 	.word	0x5802546c
 8002484:	58025480 	.word	0x58025480
 8002488:	58025494 	.word	0x58025494
 800248c:	fffe000f 	.word	0xfffe000f
 8002490:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68d2      	ldr	r2, [r2, #12]
 8002496:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002498:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b6e      	ldr	r3, [pc, #440]	; (8002690 <HAL_DMA_Init+0x648>)
 80024d8:	4413      	add	r3, r2
 80024da:	4a6e      	ldr	r2, [pc, #440]	; (8002694 <HAL_DMA_Init+0x64c>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	009a      	lsls	r2, r3, #2
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f001 fc51 	bl	8003d90 <DMA_CalcBaseAndBitshift>
 80024ee:	4603      	mov	r3, r0
 80024f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2201      	movs	r2, #1
 80024fc:	409a      	lsls	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	e008      	b.n	8002516 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2240      	movs	r2, #64	; 0x40
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2203      	movs	r2, #3
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0b7      	b.n	8002686 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a5f      	ldr	r2, [pc, #380]	; (8002698 <HAL_DMA_Init+0x650>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d072      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a5d      	ldr	r2, [pc, #372]	; (800269c <HAL_DMA_Init+0x654>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d06d      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a5c      	ldr	r2, [pc, #368]	; (80026a0 <HAL_DMA_Init+0x658>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d068      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a5a      	ldr	r2, [pc, #360]	; (80026a4 <HAL_DMA_Init+0x65c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d063      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a59      	ldr	r2, [pc, #356]	; (80026a8 <HAL_DMA_Init+0x660>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d05e      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a57      	ldr	r2, [pc, #348]	; (80026ac <HAL_DMA_Init+0x664>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d059      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a56      	ldr	r2, [pc, #344]	; (80026b0 <HAL_DMA_Init+0x668>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d054      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a54      	ldr	r2, [pc, #336]	; (80026b4 <HAL_DMA_Init+0x66c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d04f      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a53      	ldr	r2, [pc, #332]	; (80026b8 <HAL_DMA_Init+0x670>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d04a      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a51      	ldr	r2, [pc, #324]	; (80026bc <HAL_DMA_Init+0x674>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d045      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <HAL_DMA_Init+0x678>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d040      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a4e      	ldr	r2, [pc, #312]	; (80026c4 <HAL_DMA_Init+0x67c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d03b      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a4d      	ldr	r2, [pc, #308]	; (80026c8 <HAL_DMA_Init+0x680>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d036      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a4b      	ldr	r2, [pc, #300]	; (80026cc <HAL_DMA_Init+0x684>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d031      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a4a      	ldr	r2, [pc, #296]	; (80026d0 <HAL_DMA_Init+0x688>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d02c      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a48      	ldr	r2, [pc, #288]	; (80026d4 <HAL_DMA_Init+0x68c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d027      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a47      	ldr	r2, [pc, #284]	; (80026d8 <HAL_DMA_Init+0x690>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a45      	ldr	r2, [pc, #276]	; (80026dc <HAL_DMA_Init+0x694>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01d      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a44      	ldr	r2, [pc, #272]	; (80026e0 <HAL_DMA_Init+0x698>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d018      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a42      	ldr	r2, [pc, #264]	; (80026e4 <HAL_DMA_Init+0x69c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a41      	ldr	r2, [pc, #260]	; (80026e8 <HAL_DMA_Init+0x6a0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00e      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a3f      	ldr	r2, [pc, #252]	; (80026ec <HAL_DMA_Init+0x6a4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a3e      	ldr	r2, [pc, #248]	; (80026f0 <HAL_DMA_Init+0x6a8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_DMA_Init+0x5be>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a3c      	ldr	r2, [pc, #240]	; (80026f4 <HAL_DMA_Init+0x6ac>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_DMA_Init+0x5c2>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_DMA_Init+0x5c4>
 800260a:	2300      	movs	r3, #0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d032      	beq.n	8002676 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f001 fceb 	bl	8003fec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b80      	cmp	r3, #128	; 0x80
 800261c:	d102      	bne.n	8002624 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002638:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_DMA_Init+0x61c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b08      	cmp	r3, #8
 8002648:	d80c      	bhi.n	8002664 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f001 fd68 	bl	8004120 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	e008      	b.n	8002676 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	a7fdabf8 	.word	0xa7fdabf8
 8002694:	cccccccd 	.word	0xcccccccd
 8002698:	40020010 	.word	0x40020010
 800269c:	40020028 	.word	0x40020028
 80026a0:	40020040 	.word	0x40020040
 80026a4:	40020058 	.word	0x40020058
 80026a8:	40020070 	.word	0x40020070
 80026ac:	40020088 	.word	0x40020088
 80026b0:	400200a0 	.word	0x400200a0
 80026b4:	400200b8 	.word	0x400200b8
 80026b8:	40020410 	.word	0x40020410
 80026bc:	40020428 	.word	0x40020428
 80026c0:	40020440 	.word	0x40020440
 80026c4:	40020458 	.word	0x40020458
 80026c8:	40020470 	.word	0x40020470
 80026cc:	40020488 	.word	0x40020488
 80026d0:	400204a0 	.word	0x400204a0
 80026d4:	400204b8 	.word	0x400204b8
 80026d8:	58025408 	.word	0x58025408
 80026dc:	5802541c 	.word	0x5802541c
 80026e0:	58025430 	.word	0x58025430
 80026e4:	58025444 	.word	0x58025444
 80026e8:	58025458 	.word	0x58025458
 80026ec:	5802546c 	.word	0x5802546c
 80026f0:	58025480 	.word	0x58025480
 80026f4:	58025494 	.word	0x58025494

080026f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e226      	b.n	8002b62 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_DMA_Start_IT+0x2a>
 800271e:	2302      	movs	r3, #2
 8002720:	e21f      	b.n	8002b62 <HAL_DMA_Start_IT+0x46a>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	f040 820a 	bne.w	8002b4c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a68      	ldr	r2, [pc, #416]	; (80028ec <HAL_DMA_Start_IT+0x1f4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d04a      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a66      	ldr	r2, [pc, #408]	; (80028f0 <HAL_DMA_Start_IT+0x1f8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d045      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a65      	ldr	r2, [pc, #404]	; (80028f4 <HAL_DMA_Start_IT+0x1fc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d040      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a63      	ldr	r2, [pc, #396]	; (80028f8 <HAL_DMA_Start_IT+0x200>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d03b      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a62      	ldr	r2, [pc, #392]	; (80028fc <HAL_DMA_Start_IT+0x204>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d036      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a60      	ldr	r2, [pc, #384]	; (8002900 <HAL_DMA_Start_IT+0x208>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d031      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a5f      	ldr	r2, [pc, #380]	; (8002904 <HAL_DMA_Start_IT+0x20c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d02c      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a5d      	ldr	r2, [pc, #372]	; (8002908 <HAL_DMA_Start_IT+0x210>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d027      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a5c      	ldr	r2, [pc, #368]	; (800290c <HAL_DMA_Start_IT+0x214>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d022      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a5a      	ldr	r2, [pc, #360]	; (8002910 <HAL_DMA_Start_IT+0x218>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01d      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a59      	ldr	r2, [pc, #356]	; (8002914 <HAL_DMA_Start_IT+0x21c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d018      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a57      	ldr	r2, [pc, #348]	; (8002918 <HAL_DMA_Start_IT+0x220>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a56      	ldr	r2, [pc, #344]	; (800291c <HAL_DMA_Start_IT+0x224>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00e      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a54      	ldr	r2, [pc, #336]	; (8002920 <HAL_DMA_Start_IT+0x228>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a53      	ldr	r2, [pc, #332]	; (8002924 <HAL_DMA_Start_IT+0x22c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_DMA_Start_IT+0xee>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_DMA_Start_IT+0x230>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d108      	bne.n	80027f8 <HAL_DMA_Start_IT+0x100>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	e007      	b.n	8002808 <HAL_DMA_Start_IT+0x110>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f001 f912 	bl	8003a38 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a34      	ldr	r2, [pc, #208]	; (80028ec <HAL_DMA_Start_IT+0x1f4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d04a      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a33      	ldr	r2, [pc, #204]	; (80028f0 <HAL_DMA_Start_IT+0x1f8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d045      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a31      	ldr	r2, [pc, #196]	; (80028f4 <HAL_DMA_Start_IT+0x1fc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d040      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a30      	ldr	r2, [pc, #192]	; (80028f8 <HAL_DMA_Start_IT+0x200>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d03b      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2e      	ldr	r2, [pc, #184]	; (80028fc <HAL_DMA_Start_IT+0x204>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d036      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2d      	ldr	r2, [pc, #180]	; (8002900 <HAL_DMA_Start_IT+0x208>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d031      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <HAL_DMA_Start_IT+0x20c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02c      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2a      	ldr	r2, [pc, #168]	; (8002908 <HAL_DMA_Start_IT+0x210>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d027      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a28      	ldr	r2, [pc, #160]	; (800290c <HAL_DMA_Start_IT+0x214>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d022      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a27      	ldr	r2, [pc, #156]	; (8002910 <HAL_DMA_Start_IT+0x218>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d01d      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a25      	ldr	r2, [pc, #148]	; (8002914 <HAL_DMA_Start_IT+0x21c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d018      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a24      	ldr	r2, [pc, #144]	; (8002918 <HAL_DMA_Start_IT+0x220>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a22      	ldr	r2, [pc, #136]	; (800291c <HAL_DMA_Start_IT+0x224>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a21      	ldr	r2, [pc, #132]	; (8002920 <HAL_DMA_Start_IT+0x228>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1f      	ldr	r2, [pc, #124]	; (8002924 <HAL_DMA_Start_IT+0x22c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_DMA_Start_IT+0x1bc>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <HAL_DMA_Start_IT+0x230>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_DMA_Start_IT+0x1c0>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_DMA_Start_IT+0x1c2>
 80028b8:	2300      	movs	r3, #0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d036      	beq.n	800292c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 021e 	bic.w	r2, r3, #30
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0216 	orr.w	r2, r2, #22
 80028d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d03e      	beq.n	8002958 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0208 	orr.w	r2, r2, #8
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e035      	b.n	8002958 <HAL_DMA_Start_IT+0x260>
 80028ec:	40020010 	.word	0x40020010
 80028f0:	40020028 	.word	0x40020028
 80028f4:	40020040 	.word	0x40020040
 80028f8:	40020058 	.word	0x40020058
 80028fc:	40020070 	.word	0x40020070
 8002900:	40020088 	.word	0x40020088
 8002904:	400200a0 	.word	0x400200a0
 8002908:	400200b8 	.word	0x400200b8
 800290c:	40020410 	.word	0x40020410
 8002910:	40020428 	.word	0x40020428
 8002914:	40020440 	.word	0x40020440
 8002918:	40020458 	.word	0x40020458
 800291c:	40020470 	.word	0x40020470
 8002920:	40020488 	.word	0x40020488
 8002924:	400204a0 	.word	0x400204a0
 8002928:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 020e 	bic.w	r2, r3, #14
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 020a 	orr.w	r2, r2, #10
 800293e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0204 	orr.w	r2, r2, #4
 8002956:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a83      	ldr	r2, [pc, #524]	; (8002b6c <HAL_DMA_Start_IT+0x474>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d072      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a82      	ldr	r2, [pc, #520]	; (8002b70 <HAL_DMA_Start_IT+0x478>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d06d      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a80      	ldr	r2, [pc, #512]	; (8002b74 <HAL_DMA_Start_IT+0x47c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d068      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a7f      	ldr	r2, [pc, #508]	; (8002b78 <HAL_DMA_Start_IT+0x480>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d063      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a7d      	ldr	r2, [pc, #500]	; (8002b7c <HAL_DMA_Start_IT+0x484>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d05e      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a7c      	ldr	r2, [pc, #496]	; (8002b80 <HAL_DMA_Start_IT+0x488>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d059      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a7a      	ldr	r2, [pc, #488]	; (8002b84 <HAL_DMA_Start_IT+0x48c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d054      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a79      	ldr	r2, [pc, #484]	; (8002b88 <HAL_DMA_Start_IT+0x490>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d04f      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a77      	ldr	r2, [pc, #476]	; (8002b8c <HAL_DMA_Start_IT+0x494>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d04a      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a76      	ldr	r2, [pc, #472]	; (8002b90 <HAL_DMA_Start_IT+0x498>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d045      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a74      	ldr	r2, [pc, #464]	; (8002b94 <HAL_DMA_Start_IT+0x49c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d040      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a73      	ldr	r2, [pc, #460]	; (8002b98 <HAL_DMA_Start_IT+0x4a0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d03b      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a71      	ldr	r2, [pc, #452]	; (8002b9c <HAL_DMA_Start_IT+0x4a4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d036      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a70      	ldr	r2, [pc, #448]	; (8002ba0 <HAL_DMA_Start_IT+0x4a8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d031      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a6e      	ldr	r2, [pc, #440]	; (8002ba4 <HAL_DMA_Start_IT+0x4ac>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d02c      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6d      	ldr	r2, [pc, #436]	; (8002ba8 <HAL_DMA_Start_IT+0x4b0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d027      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6b      	ldr	r2, [pc, #428]	; (8002bac <HAL_DMA_Start_IT+0x4b4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d022      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a6a      	ldr	r2, [pc, #424]	; (8002bb0 <HAL_DMA_Start_IT+0x4b8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d01d      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a68      	ldr	r2, [pc, #416]	; (8002bb4 <HAL_DMA_Start_IT+0x4bc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d018      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a67      	ldr	r2, [pc, #412]	; (8002bb8 <HAL_DMA_Start_IT+0x4c0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d013      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a65      	ldr	r2, [pc, #404]	; (8002bbc <HAL_DMA_Start_IT+0x4c4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00e      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a64      	ldr	r2, [pc, #400]	; (8002bc0 <HAL_DMA_Start_IT+0x4c8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d009      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a62      	ldr	r2, [pc, #392]	; (8002bc4 <HAL_DMA_Start_IT+0x4cc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_DMA_Start_IT+0x350>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a61      	ldr	r2, [pc, #388]	; (8002bc8 <HAL_DMA_Start_IT+0x4d0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_DMA_Start_IT+0x354>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_DMA_Start_IT+0x356>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01a      	beq.n	8002a88 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a86:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a37      	ldr	r2, [pc, #220]	; (8002b6c <HAL_DMA_Start_IT+0x474>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d04a      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a36      	ldr	r2, [pc, #216]	; (8002b70 <HAL_DMA_Start_IT+0x478>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d045      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a34      	ldr	r2, [pc, #208]	; (8002b74 <HAL_DMA_Start_IT+0x47c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d040      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a33      	ldr	r2, [pc, #204]	; (8002b78 <HAL_DMA_Start_IT+0x480>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d03b      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a31      	ldr	r2, [pc, #196]	; (8002b7c <HAL_DMA_Start_IT+0x484>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d036      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a30      	ldr	r2, [pc, #192]	; (8002b80 <HAL_DMA_Start_IT+0x488>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d031      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2e      	ldr	r2, [pc, #184]	; (8002b84 <HAL_DMA_Start_IT+0x48c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d02c      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2d      	ldr	r2, [pc, #180]	; (8002b88 <HAL_DMA_Start_IT+0x490>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d027      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <HAL_DMA_Start_IT+0x494>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d022      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <HAL_DMA_Start_IT+0x498>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d01d      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a28      	ldr	r2, [pc, #160]	; (8002b94 <HAL_DMA_Start_IT+0x49c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d018      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <HAL_DMA_Start_IT+0x4a0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d013      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a25      	ldr	r2, [pc, #148]	; (8002b9c <HAL_DMA_Start_IT+0x4a4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00e      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a24      	ldr	r2, [pc, #144]	; (8002ba0 <HAL_DMA_Start_IT+0x4a8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d009      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <HAL_DMA_Start_IT+0x4ac>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d004      	beq.n	8002b28 <HAL_DMA_Start_IT+0x430>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <HAL_DMA_Start_IT+0x4b0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d108      	bne.n	8002b3a <HAL_DMA_Start_IT+0x442>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	e012      	b.n	8002b60 <HAL_DMA_Start_IT+0x468>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e009      	b.n	8002b60 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40020010 	.word	0x40020010
 8002b70:	40020028 	.word	0x40020028
 8002b74:	40020040 	.word	0x40020040
 8002b78:	40020058 	.word	0x40020058
 8002b7c:	40020070 	.word	0x40020070
 8002b80:	40020088 	.word	0x40020088
 8002b84:	400200a0 	.word	0x400200a0
 8002b88:	400200b8 	.word	0x400200b8
 8002b8c:	40020410 	.word	0x40020410
 8002b90:	40020428 	.word	0x40020428
 8002b94:	40020440 	.word	0x40020440
 8002b98:	40020458 	.word	0x40020458
 8002b9c:	40020470 	.word	0x40020470
 8002ba0:	40020488 	.word	0x40020488
 8002ba4:	400204a0 	.word	0x400204a0
 8002ba8:	400204b8 	.word	0x400204b8
 8002bac:	58025408 	.word	0x58025408
 8002bb0:	5802541c 	.word	0x5802541c
 8002bb4:	58025430 	.word	0x58025430
 8002bb8:	58025444 	.word	0x58025444
 8002bbc:	58025458 	.word	0x58025458
 8002bc0:	5802546c 	.word	0x5802546c
 8002bc4:	58025480 	.word	0x58025480
 8002bc8:	58025494 	.word	0x58025494

08002bcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bd8:	4b67      	ldr	r3, [pc, #412]	; (8002d78 <HAL_DMA_IRQHandler+0x1ac>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a67      	ldr	r2, [pc, #412]	; (8002d7c <HAL_DMA_IRQHandler+0x1b0>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	0a9b      	lsrs	r3, r3, #10
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5f      	ldr	r2, [pc, #380]	; (8002d80 <HAL_DMA_IRQHandler+0x1b4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d04a      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5d      	ldr	r2, [pc, #372]	; (8002d84 <HAL_DMA_IRQHandler+0x1b8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d045      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5c      	ldr	r2, [pc, #368]	; (8002d88 <HAL_DMA_IRQHandler+0x1bc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d040      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a5a      	ldr	r2, [pc, #360]	; (8002d8c <HAL_DMA_IRQHandler+0x1c0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d03b      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a59      	ldr	r2, [pc, #356]	; (8002d90 <HAL_DMA_IRQHandler+0x1c4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d036      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a57      	ldr	r2, [pc, #348]	; (8002d94 <HAL_DMA_IRQHandler+0x1c8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d031      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a56      	ldr	r2, [pc, #344]	; (8002d98 <HAL_DMA_IRQHandler+0x1cc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d02c      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a54      	ldr	r2, [pc, #336]	; (8002d9c <HAL_DMA_IRQHandler+0x1d0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d027      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a53      	ldr	r2, [pc, #332]	; (8002da0 <HAL_DMA_IRQHandler+0x1d4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d022      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a51      	ldr	r2, [pc, #324]	; (8002da4 <HAL_DMA_IRQHandler+0x1d8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d01d      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a50      	ldr	r2, [pc, #320]	; (8002da8 <HAL_DMA_IRQHandler+0x1dc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d018      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a4e      	ldr	r2, [pc, #312]	; (8002dac <HAL_DMA_IRQHandler+0x1e0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a4d      	ldr	r2, [pc, #308]	; (8002db0 <HAL_DMA_IRQHandler+0x1e4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00e      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a4b      	ldr	r2, [pc, #300]	; (8002db4 <HAL_DMA_IRQHandler+0x1e8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d009      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a4a      	ldr	r2, [pc, #296]	; (8002db8 <HAL_DMA_IRQHandler+0x1ec>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d004      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xd2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a48      	ldr	r2, [pc, #288]	; (8002dbc <HAL_DMA_IRQHandler+0x1f0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_DMA_IRQHandler+0xd6>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_DMA_IRQHandler+0xd8>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 842b 	beq.w	8003500 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80a2 	beq.w	8002e04 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2e      	ldr	r2, [pc, #184]	; (8002d80 <HAL_DMA_IRQHandler+0x1b4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d04a      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2d      	ldr	r2, [pc, #180]	; (8002d84 <HAL_DMA_IRQHandler+0x1b8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d045      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2b      	ldr	r2, [pc, #172]	; (8002d88 <HAL_DMA_IRQHandler+0x1bc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d040      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2a      	ldr	r2, [pc, #168]	; (8002d8c <HAL_DMA_IRQHandler+0x1c0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d03b      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a28      	ldr	r2, [pc, #160]	; (8002d90 <HAL_DMA_IRQHandler+0x1c4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d036      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a27      	ldr	r2, [pc, #156]	; (8002d94 <HAL_DMA_IRQHandler+0x1c8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d031      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a25      	ldr	r2, [pc, #148]	; (8002d98 <HAL_DMA_IRQHandler+0x1cc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d02c      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a24      	ldr	r2, [pc, #144]	; (8002d9c <HAL_DMA_IRQHandler+0x1d0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d027      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a22      	ldr	r2, [pc, #136]	; (8002da0 <HAL_DMA_IRQHandler+0x1d4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d022      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a21      	ldr	r2, [pc, #132]	; (8002da4 <HAL_DMA_IRQHandler+0x1d8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d01d      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1f      	ldr	r2, [pc, #124]	; (8002da8 <HAL_DMA_IRQHandler+0x1dc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d018      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_DMA_IRQHandler+0x1e0>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d013      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1c      	ldr	r2, [pc, #112]	; (8002db0 <HAL_DMA_IRQHandler+0x1e4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00e      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <HAL_DMA_IRQHandler+0x1e8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d009      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a19      	ldr	r2, [pc, #100]	; (8002db8 <HAL_DMA_IRQHandler+0x1ec>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x194>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a18      	ldr	r2, [pc, #96]	; (8002dbc <HAL_DMA_IRQHandler+0x1f0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d12f      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x1f4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	e02e      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x208>
 8002d76:	bf00      	nop
 8002d78:	24000000 	.word	0x24000000
 8002d7c:	1b4e81b5 	.word	0x1b4e81b5
 8002d80:	40020010 	.word	0x40020010
 8002d84:	40020028 	.word	0x40020028
 8002d88:	40020040 	.word	0x40020040
 8002d8c:	40020058 	.word	0x40020058
 8002d90:	40020070 	.word	0x40020070
 8002d94:	40020088 	.word	0x40020088
 8002d98:	400200a0 	.word	0x400200a0
 8002d9c:	400200b8 	.word	0x400200b8
 8002da0:	40020410 	.word	0x40020410
 8002da4:	40020428 	.word	0x40020428
 8002da8:	40020440 	.word	0x40020440
 8002dac:	40020458 	.word	0x40020458
 8002db0:	40020470 	.word	0x40020470
 8002db4:	40020488 	.word	0x40020488
 8002db8:	400204a0 	.word	0x400204a0
 8002dbc:	400204b8 	.word	0x400204b8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d015      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0204 	bic.w	r2, r2, #4
 8002de6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2208      	movs	r2, #8
 8002df2:	409a      	lsls	r2, r3
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	f043 0201 	orr.w	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d06e      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a69      	ldr	r2, [pc, #420]	; (8002fc4 <HAL_DMA_IRQHandler+0x3f8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d04a      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a67      	ldr	r2, [pc, #412]	; (8002fc8 <HAL_DMA_IRQHandler+0x3fc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d045      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a66      	ldr	r2, [pc, #408]	; (8002fcc <HAL_DMA_IRQHandler+0x400>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d040      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a64      	ldr	r2, [pc, #400]	; (8002fd0 <HAL_DMA_IRQHandler+0x404>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d03b      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a63      	ldr	r2, [pc, #396]	; (8002fd4 <HAL_DMA_IRQHandler+0x408>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d036      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a61      	ldr	r2, [pc, #388]	; (8002fd8 <HAL_DMA_IRQHandler+0x40c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d031      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a60      	ldr	r2, [pc, #384]	; (8002fdc <HAL_DMA_IRQHandler+0x410>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d02c      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a5e      	ldr	r2, [pc, #376]	; (8002fe0 <HAL_DMA_IRQHandler+0x414>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d027      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a5d      	ldr	r2, [pc, #372]	; (8002fe4 <HAL_DMA_IRQHandler+0x418>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d022      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a5b      	ldr	r2, [pc, #364]	; (8002fe8 <HAL_DMA_IRQHandler+0x41c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01d      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a5a      	ldr	r2, [pc, #360]	; (8002fec <HAL_DMA_IRQHandler+0x420>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d018      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a58      	ldr	r2, [pc, #352]	; (8002ff0 <HAL_DMA_IRQHandler+0x424>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a57      	ldr	r2, [pc, #348]	; (8002ff4 <HAL_DMA_IRQHandler+0x428>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00e      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a55      	ldr	r2, [pc, #340]	; (8002ff8 <HAL_DMA_IRQHandler+0x42c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a54      	ldr	r2, [pc, #336]	; (8002ffc <HAL_DMA_IRQHandler+0x430>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2ee>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a52      	ldr	r2, [pc, #328]	; (8003000 <HAL_DMA_IRQHandler+0x434>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x304>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf14      	ite	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	2300      	moveq	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	e003      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x30c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00d      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f043 0202 	orr.w	r2, r3, #2
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	2204      	movs	r2, #4
 8002f02:	409a      	lsls	r2, r3
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 808f 	beq.w	800302c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <HAL_DMA_IRQHandler+0x3f8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d04a      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a2a      	ldr	r2, [pc, #168]	; (8002fc8 <HAL_DMA_IRQHandler+0x3fc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d045      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a29      	ldr	r2, [pc, #164]	; (8002fcc <HAL_DMA_IRQHandler+0x400>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d040      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a27      	ldr	r2, [pc, #156]	; (8002fd0 <HAL_DMA_IRQHandler+0x404>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d03b      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <HAL_DMA_IRQHandler+0x408>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d036      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <HAL_DMA_IRQHandler+0x40c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d031      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a23      	ldr	r2, [pc, #140]	; (8002fdc <HAL_DMA_IRQHandler+0x410>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d02c      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <HAL_DMA_IRQHandler+0x414>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d027      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a20      	ldr	r2, [pc, #128]	; (8002fe4 <HAL_DMA_IRQHandler+0x418>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d022      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_DMA_IRQHandler+0x41c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01d      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <HAL_DMA_IRQHandler+0x420>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d018      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <HAL_DMA_IRQHandler+0x424>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1a      	ldr	r2, [pc, #104]	; (8002ff4 <HAL_DMA_IRQHandler+0x428>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00e      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_DMA_IRQHandler+0x42c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d009      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <HAL_DMA_IRQHandler+0x430>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d004      	beq.n	8002fae <HAL_DMA_IRQHandler+0x3e2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a15      	ldr	r2, [pc, #84]	; (8003000 <HAL_DMA_IRQHandler+0x434>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d12a      	bne.n	8003004 <HAL_DMA_IRQHandler+0x438>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf14      	ite	ne
 8002fbc:	2301      	movne	r3, #1
 8002fbe:	2300      	moveq	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	e023      	b.n	800300c <HAL_DMA_IRQHandler+0x440>
 8002fc4:	40020010 	.word	0x40020010
 8002fc8:	40020028 	.word	0x40020028
 8002fcc:	40020040 	.word	0x40020040
 8002fd0:	40020058 	.word	0x40020058
 8002fd4:	40020070 	.word	0x40020070
 8002fd8:	40020088 	.word	0x40020088
 8002fdc:	400200a0 	.word	0x400200a0
 8002fe0:	400200b8 	.word	0x400200b8
 8002fe4:	40020410 	.word	0x40020410
 8002fe8:	40020428 	.word	0x40020428
 8002fec:	40020440 	.word	0x40020440
 8002ff0:	40020458 	.word	0x40020458
 8002ff4:	40020470 	.word	0x40020470
 8002ff8:	40020488 	.word	0x40020488
 8002ffc:	400204a0 	.word	0x400204a0
 8003000:	400204b8 	.word	0x400204b8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2300      	movs	r3, #0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2204      	movs	r2, #4
 800301a:	409a      	lsls	r2, r3
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003024:	f043 0204 	orr.w	r2, r3, #4
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	2210      	movs	r2, #16
 8003036:	409a      	lsls	r2, r3
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80a6 	beq.w	800318e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a85      	ldr	r2, [pc, #532]	; (800325c <HAL_DMA_IRQHandler+0x690>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d04a      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a83      	ldr	r2, [pc, #524]	; (8003260 <HAL_DMA_IRQHandler+0x694>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d045      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a82      	ldr	r2, [pc, #520]	; (8003264 <HAL_DMA_IRQHandler+0x698>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d040      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a80      	ldr	r2, [pc, #512]	; (8003268 <HAL_DMA_IRQHandler+0x69c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d03b      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a7f      	ldr	r2, [pc, #508]	; (800326c <HAL_DMA_IRQHandler+0x6a0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d036      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a7d      	ldr	r2, [pc, #500]	; (8003270 <HAL_DMA_IRQHandler+0x6a4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d031      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7c      	ldr	r2, [pc, #496]	; (8003274 <HAL_DMA_IRQHandler+0x6a8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d02c      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a7a      	ldr	r2, [pc, #488]	; (8003278 <HAL_DMA_IRQHandler+0x6ac>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d027      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a79      	ldr	r2, [pc, #484]	; (800327c <HAL_DMA_IRQHandler+0x6b0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d022      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a77      	ldr	r2, [pc, #476]	; (8003280 <HAL_DMA_IRQHandler+0x6b4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01d      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a76      	ldr	r2, [pc, #472]	; (8003284 <HAL_DMA_IRQHandler+0x6b8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d018      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a74      	ldr	r2, [pc, #464]	; (8003288 <HAL_DMA_IRQHandler+0x6bc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a73      	ldr	r2, [pc, #460]	; (800328c <HAL_DMA_IRQHandler+0x6c0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00e      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a71      	ldr	r2, [pc, #452]	; (8003290 <HAL_DMA_IRQHandler+0x6c4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d009      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a70      	ldr	r2, [pc, #448]	; (8003294 <HAL_DMA_IRQHandler+0x6c8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x516>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a6e      	ldr	r2, [pc, #440]	; (8003298 <HAL_DMA_IRQHandler+0x6cc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10a      	bne.n	80030f8 <HAL_DMA_IRQHandler+0x52c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e009      	b.n	800310c <HAL_DMA_IRQHandler+0x540>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	bf14      	ite	ne
 8003106:	2301      	movne	r3, #1
 8003108:	2300      	moveq	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d03e      	beq.n	800318e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	2210      	movs	r2, #16
 800311a:	409a      	lsls	r2, r3
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d018      	beq.n	8003160 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d108      	bne.n	800314e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d024      	beq.n	800318e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
 800314c:	e01f      	b.n	800318e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01b      	beq.n	800318e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
 800315e:	e016      	b.n	800318e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d107      	bne.n	800317e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0208 	bic.w	r2, r2, #8
 800317c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2220      	movs	r2, #32
 8003198:	409a      	lsls	r2, r3
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8110 	beq.w	80033c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a2c      	ldr	r2, [pc, #176]	; (800325c <HAL_DMA_IRQHandler+0x690>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d04a      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a2b      	ldr	r2, [pc, #172]	; (8003260 <HAL_DMA_IRQHandler+0x694>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d045      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a29      	ldr	r2, [pc, #164]	; (8003264 <HAL_DMA_IRQHandler+0x698>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d040      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a28      	ldr	r2, [pc, #160]	; (8003268 <HAL_DMA_IRQHandler+0x69c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d03b      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a26      	ldr	r2, [pc, #152]	; (800326c <HAL_DMA_IRQHandler+0x6a0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d036      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a25      	ldr	r2, [pc, #148]	; (8003270 <HAL_DMA_IRQHandler+0x6a4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d031      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a23      	ldr	r2, [pc, #140]	; (8003274 <HAL_DMA_IRQHandler+0x6a8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d02c      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a22      	ldr	r2, [pc, #136]	; (8003278 <HAL_DMA_IRQHandler+0x6ac>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d027      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a20      	ldr	r2, [pc, #128]	; (800327c <HAL_DMA_IRQHandler+0x6b0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d022      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_DMA_IRQHandler+0x6b4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d01d      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_DMA_IRQHandler+0x6b8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d018      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <HAL_DMA_IRQHandler+0x6bc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d013      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1a      	ldr	r2, [pc, #104]	; (800328c <HAL_DMA_IRQHandler+0x6c0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00e      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a19      	ldr	r2, [pc, #100]	; (8003290 <HAL_DMA_IRQHandler+0x6c4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d009      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a17      	ldr	r2, [pc, #92]	; (8003294 <HAL_DMA_IRQHandler+0x6c8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d004      	beq.n	8003244 <HAL_DMA_IRQHandler+0x678>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a16      	ldr	r2, [pc, #88]	; (8003298 <HAL_DMA_IRQHandler+0x6cc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d12b      	bne.n	800329c <HAL_DMA_IRQHandler+0x6d0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf14      	ite	ne
 8003252:	2301      	movne	r3, #1
 8003254:	2300      	moveq	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	e02a      	b.n	80032b0 <HAL_DMA_IRQHandler+0x6e4>
 800325a:	bf00      	nop
 800325c:	40020010 	.word	0x40020010
 8003260:	40020028 	.word	0x40020028
 8003264:	40020040 	.word	0x40020040
 8003268:	40020058 	.word	0x40020058
 800326c:	40020070 	.word	0x40020070
 8003270:	40020088 	.word	0x40020088
 8003274:	400200a0 	.word	0x400200a0
 8003278:	400200b8 	.word	0x400200b8
 800327c:	40020410 	.word	0x40020410
 8003280:	40020428 	.word	0x40020428
 8003284:	40020440 	.word	0x40020440
 8003288:	40020458 	.word	0x40020458
 800328c:	40020470 	.word	0x40020470
 8003290:	40020488 	.word	0x40020488
 8003294:	400204a0 	.word	0x400204a0
 8003298:	400204b8 	.word	0x400204b8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8087 	beq.w	80033c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	2220      	movs	r2, #32
 80032c0:	409a      	lsls	r2, r3
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d139      	bne.n	8003346 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0216 	bic.w	r2, r2, #22
 80032e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d103      	bne.n	8003302 <HAL_DMA_IRQHandler+0x736>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0208 	bic.w	r2, r2, #8
 8003310:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	223f      	movs	r2, #63	; 0x3f
 800331c:	409a      	lsls	r2, r3
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 834a 	beq.w	80039d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
          }
          return;
 8003344:	e344      	b.n	80039d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d018      	beq.n	8003386 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d108      	bne.n	8003374 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	2b00      	cmp	r3, #0
 8003368:	d02c      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
 8003372:	e027      	b.n	80033c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d023      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
 8003384:	e01e      	b.n	80033c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10f      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0210 	bic.w	r2, r2, #16
 80033a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8306 	beq.w	80039da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8088 	beq.w	80034ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2204      	movs	r2, #4
 80033e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a7a      	ldr	r2, [pc, #488]	; (80035d4 <HAL_DMA_IRQHandler+0xa08>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d04a      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a79      	ldr	r2, [pc, #484]	; (80035d8 <HAL_DMA_IRQHandler+0xa0c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d045      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a77      	ldr	r2, [pc, #476]	; (80035dc <HAL_DMA_IRQHandler+0xa10>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d040      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a76      	ldr	r2, [pc, #472]	; (80035e0 <HAL_DMA_IRQHandler+0xa14>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d03b      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a74      	ldr	r2, [pc, #464]	; (80035e4 <HAL_DMA_IRQHandler+0xa18>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d036      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a73      	ldr	r2, [pc, #460]	; (80035e8 <HAL_DMA_IRQHandler+0xa1c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d031      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a71      	ldr	r2, [pc, #452]	; (80035ec <HAL_DMA_IRQHandler+0xa20>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d02c      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a70      	ldr	r2, [pc, #448]	; (80035f0 <HAL_DMA_IRQHandler+0xa24>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d027      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a6e      	ldr	r2, [pc, #440]	; (80035f4 <HAL_DMA_IRQHandler+0xa28>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d022      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a6d      	ldr	r2, [pc, #436]	; (80035f8 <HAL_DMA_IRQHandler+0xa2c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d01d      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a6b      	ldr	r2, [pc, #428]	; (80035fc <HAL_DMA_IRQHandler+0xa30>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d018      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a6a      	ldr	r2, [pc, #424]	; (8003600 <HAL_DMA_IRQHandler+0xa34>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a68      	ldr	r2, [pc, #416]	; (8003604 <HAL_DMA_IRQHandler+0xa38>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00e      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a67      	ldr	r2, [pc, #412]	; (8003608 <HAL_DMA_IRQHandler+0xa3c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d009      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a65      	ldr	r2, [pc, #404]	; (800360c <HAL_DMA_IRQHandler+0xa40>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_DMA_IRQHandler+0x8b8>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a64      	ldr	r2, [pc, #400]	; (8003610 <HAL_DMA_IRQHandler+0xa44>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d108      	bne.n	8003496 <HAL_DMA_IRQHandler+0x8ca>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e007      	b.n	80034a6 <HAL_DMA_IRQHandler+0x8da>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	3301      	adds	r3, #1
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d307      	bcc.n	80034c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f2      	bne.n	80034a6 <HAL_DMA_IRQHandler+0x8da>
 80034c0:	e000      	b.n	80034c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80034c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2203      	movs	r2, #3
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80034da:	e003      	b.n	80034e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8272 	beq.w	80039da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	4798      	blx	r3
 80034fe:	e26c      	b.n	80039da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a43      	ldr	r2, [pc, #268]	; (8003614 <HAL_DMA_IRQHandler+0xa48>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d022      	beq.n	8003550 <HAL_DMA_IRQHandler+0x984>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a42      	ldr	r2, [pc, #264]	; (8003618 <HAL_DMA_IRQHandler+0xa4c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d01d      	beq.n	8003550 <HAL_DMA_IRQHandler+0x984>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a40      	ldr	r2, [pc, #256]	; (800361c <HAL_DMA_IRQHandler+0xa50>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d018      	beq.n	8003550 <HAL_DMA_IRQHandler+0x984>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a3f      	ldr	r2, [pc, #252]	; (8003620 <HAL_DMA_IRQHandler+0xa54>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d013      	beq.n	8003550 <HAL_DMA_IRQHandler+0x984>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a3d      	ldr	r2, [pc, #244]	; (8003624 <HAL_DMA_IRQHandler+0xa58>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00e      	beq.n	8003550 <HAL_DMA_IRQHandler+0x984>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a3c      	ldr	r2, [pc, #240]	; (8003628 <HAL_DMA_IRQHandler+0xa5c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_DMA_IRQHandler+0x984>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a3a      	ldr	r2, [pc, #232]	; (800362c <HAL_DMA_IRQHandler+0xa60>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_DMA_IRQHandler+0x984>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a39      	ldr	r2, [pc, #228]	; (8003630 <HAL_DMA_IRQHandler+0xa64>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d101      	bne.n	8003554 <HAL_DMA_IRQHandler+0x988>
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <HAL_DMA_IRQHandler+0x98a>
 8003554:	2300      	movs	r3, #0
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 823f 	beq.w	80039da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	2204      	movs	r2, #4
 800356e:	409a      	lsls	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80cd 	beq.w	8003714 <HAL_DMA_IRQHandler+0xb48>
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80c7 	beq.w	8003714 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	2204      	movs	r2, #4
 8003590:	409a      	lsls	r2, r3
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d049      	beq.n	8003634 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8210 	beq.w	80039d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035bc:	e20a      	b.n	80039d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 8206 	beq.w	80039d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035d0:	e200      	b.n	80039d4 <HAL_DMA_IRQHandler+0xe08>
 80035d2:	bf00      	nop
 80035d4:	40020010 	.word	0x40020010
 80035d8:	40020028 	.word	0x40020028
 80035dc:	40020040 	.word	0x40020040
 80035e0:	40020058 	.word	0x40020058
 80035e4:	40020070 	.word	0x40020070
 80035e8:	40020088 	.word	0x40020088
 80035ec:	400200a0 	.word	0x400200a0
 80035f0:	400200b8 	.word	0x400200b8
 80035f4:	40020410 	.word	0x40020410
 80035f8:	40020428 	.word	0x40020428
 80035fc:	40020440 	.word	0x40020440
 8003600:	40020458 	.word	0x40020458
 8003604:	40020470 	.word	0x40020470
 8003608:	40020488 	.word	0x40020488
 800360c:	400204a0 	.word	0x400204a0
 8003610:	400204b8 	.word	0x400204b8
 8003614:	58025408 	.word	0x58025408
 8003618:	5802541c 	.word	0x5802541c
 800361c:	58025430 	.word	0x58025430
 8003620:	58025444 	.word	0x58025444
 8003624:	58025458 	.word	0x58025458
 8003628:	5802546c 	.word	0x5802546c
 800362c:	58025480 	.word	0x58025480
 8003630:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d160      	bne.n	8003700 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a7f      	ldr	r2, [pc, #508]	; (8003840 <HAL_DMA_IRQHandler+0xc74>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d04a      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a7d      	ldr	r2, [pc, #500]	; (8003844 <HAL_DMA_IRQHandler+0xc78>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d045      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7c      	ldr	r2, [pc, #496]	; (8003848 <HAL_DMA_IRQHandler+0xc7c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d040      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a7a      	ldr	r2, [pc, #488]	; (800384c <HAL_DMA_IRQHandler+0xc80>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d03b      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a79      	ldr	r2, [pc, #484]	; (8003850 <HAL_DMA_IRQHandler+0xc84>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d036      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a77      	ldr	r2, [pc, #476]	; (8003854 <HAL_DMA_IRQHandler+0xc88>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d031      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a76      	ldr	r2, [pc, #472]	; (8003858 <HAL_DMA_IRQHandler+0xc8c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d02c      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a74      	ldr	r2, [pc, #464]	; (800385c <HAL_DMA_IRQHandler+0xc90>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d027      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a73      	ldr	r2, [pc, #460]	; (8003860 <HAL_DMA_IRQHandler+0xc94>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d022      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a71      	ldr	r2, [pc, #452]	; (8003864 <HAL_DMA_IRQHandler+0xc98>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01d      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a70      	ldr	r2, [pc, #448]	; (8003868 <HAL_DMA_IRQHandler+0xc9c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d018      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a6e      	ldr	r2, [pc, #440]	; (800386c <HAL_DMA_IRQHandler+0xca0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a6d      	ldr	r2, [pc, #436]	; (8003870 <HAL_DMA_IRQHandler+0xca4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a6b      	ldr	r2, [pc, #428]	; (8003874 <HAL_DMA_IRQHandler+0xca8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6a      	ldr	r2, [pc, #424]	; (8003878 <HAL_DMA_IRQHandler+0xcac>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_DMA_IRQHandler+0xb12>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a68      	ldr	r2, [pc, #416]	; (800387c <HAL_DMA_IRQHandler+0xcb0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d108      	bne.n	80036f0 <HAL_DMA_IRQHandler+0xb24>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0208 	bic.w	r2, r2, #8
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e007      	b.n	8003700 <HAL_DMA_IRQHandler+0xb34>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0204 	bic.w	r2, r2, #4
 80036fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 8165 	beq.w	80039d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003712:	e15f      	b.n	80039d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	2202      	movs	r2, #2
 800371e:	409a      	lsls	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80c5 	beq.w	80038b4 <HAL_DMA_IRQHandler+0xce8>
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80bf 	beq.w	80038b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2202      	movs	r2, #2
 8003740:	409a      	lsls	r2, r3
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d018      	beq.n	8003782 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 813a 	beq.w	80039d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800376c:	e134      	b.n	80039d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 8130 	beq.w	80039d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003780:	e12a      	b.n	80039d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	f040 8089 	bne.w	80038a0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2b      	ldr	r2, [pc, #172]	; (8003840 <HAL_DMA_IRQHandler+0xc74>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d04a      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a29      	ldr	r2, [pc, #164]	; (8003844 <HAL_DMA_IRQHandler+0xc78>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d045      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a28      	ldr	r2, [pc, #160]	; (8003848 <HAL_DMA_IRQHandler+0xc7c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d040      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a26      	ldr	r2, [pc, #152]	; (800384c <HAL_DMA_IRQHandler+0xc80>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d03b      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a25      	ldr	r2, [pc, #148]	; (8003850 <HAL_DMA_IRQHandler+0xc84>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d036      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a23      	ldr	r2, [pc, #140]	; (8003854 <HAL_DMA_IRQHandler+0xc88>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d031      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a22      	ldr	r2, [pc, #136]	; (8003858 <HAL_DMA_IRQHandler+0xc8c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d02c      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a20      	ldr	r2, [pc, #128]	; (800385c <HAL_DMA_IRQHandler+0xc90>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d027      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1f      	ldr	r2, [pc, #124]	; (8003860 <HAL_DMA_IRQHandler+0xc94>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d022      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <HAL_DMA_IRQHandler+0xc98>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d01d      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <HAL_DMA_IRQHandler+0xc9c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d018      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1a      	ldr	r2, [pc, #104]	; (800386c <HAL_DMA_IRQHandler+0xca0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a19      	ldr	r2, [pc, #100]	; (8003870 <HAL_DMA_IRQHandler+0xca4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00e      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <HAL_DMA_IRQHandler+0xca8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d009      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a16      	ldr	r2, [pc, #88]	; (8003878 <HAL_DMA_IRQHandler+0xcac>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d004      	beq.n	800382e <HAL_DMA_IRQHandler+0xc62>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a14      	ldr	r2, [pc, #80]	; (800387c <HAL_DMA_IRQHandler+0xcb0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d128      	bne.n	8003880 <HAL_DMA_IRQHandler+0xcb4>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0214 	bic.w	r2, r2, #20
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	e027      	b.n	8003890 <HAL_DMA_IRQHandler+0xcc4>
 8003840:	40020010 	.word	0x40020010
 8003844:	40020028 	.word	0x40020028
 8003848:	40020040 	.word	0x40020040
 800384c:	40020058 	.word	0x40020058
 8003850:	40020070 	.word	0x40020070
 8003854:	40020088 	.word	0x40020088
 8003858:	400200a0 	.word	0x400200a0
 800385c:	400200b8 	.word	0x400200b8
 8003860:	40020410 	.word	0x40020410
 8003864:	40020428 	.word	0x40020428
 8003868:	40020440 	.word	0x40020440
 800386c:	40020458 	.word	0x40020458
 8003870:	40020470 	.word	0x40020470
 8003874:	40020488 	.word	0x40020488
 8003878:	400204a0 	.word	0x400204a0
 800387c:	400204b8 	.word	0x400204b8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 020a 	bic.w	r2, r2, #10
 800388e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8097 	beq.w	80039d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038b2:	e091      	b.n	80039d8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2208      	movs	r2, #8
 80038be:	409a      	lsls	r2, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8088 	beq.w	80039da <HAL_DMA_IRQHandler+0xe0e>
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8082 	beq.w	80039da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a41      	ldr	r2, [pc, #260]	; (80039e0 <HAL_DMA_IRQHandler+0xe14>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d04a      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a3f      	ldr	r2, [pc, #252]	; (80039e4 <HAL_DMA_IRQHandler+0xe18>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d045      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a3e      	ldr	r2, [pc, #248]	; (80039e8 <HAL_DMA_IRQHandler+0xe1c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d040      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a3c      	ldr	r2, [pc, #240]	; (80039ec <HAL_DMA_IRQHandler+0xe20>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d03b      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a3b      	ldr	r2, [pc, #236]	; (80039f0 <HAL_DMA_IRQHandler+0xe24>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d036      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a39      	ldr	r2, [pc, #228]	; (80039f4 <HAL_DMA_IRQHandler+0xe28>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d031      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a38      	ldr	r2, [pc, #224]	; (80039f8 <HAL_DMA_IRQHandler+0xe2c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d02c      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a36      	ldr	r2, [pc, #216]	; (80039fc <HAL_DMA_IRQHandler+0xe30>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d027      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a35      	ldr	r2, [pc, #212]	; (8003a00 <HAL_DMA_IRQHandler+0xe34>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d022      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a33      	ldr	r2, [pc, #204]	; (8003a04 <HAL_DMA_IRQHandler+0xe38>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01d      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a32      	ldr	r2, [pc, #200]	; (8003a08 <HAL_DMA_IRQHandler+0xe3c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d018      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a30      	ldr	r2, [pc, #192]	; (8003a0c <HAL_DMA_IRQHandler+0xe40>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d013      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a2f      	ldr	r2, [pc, #188]	; (8003a10 <HAL_DMA_IRQHandler+0xe44>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00e      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a2d      	ldr	r2, [pc, #180]	; (8003a14 <HAL_DMA_IRQHandler+0xe48>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d009      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2c      	ldr	r2, [pc, #176]	; (8003a18 <HAL_DMA_IRQHandler+0xe4c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d004      	beq.n	8003976 <HAL_DMA_IRQHandler+0xdaa>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a2a      	ldr	r2, [pc, #168]	; (8003a1c <HAL_DMA_IRQHandler+0xe50>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d108      	bne.n	8003988 <HAL_DMA_IRQHandler+0xdbc>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 021c 	bic.w	r2, r2, #28
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e007      	b.n	8003998 <HAL_DMA_IRQHandler+0xdcc>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 020e 	bic.w	r2, r2, #14
 8003996:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2201      	movs	r2, #1
 80039a2:	409a      	lsls	r2, r3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
 80039ce:	e004      	b.n	80039da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80039d0:	bf00      	nop
 80039d2:	e002      	b.n	80039da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039d4:	bf00      	nop
 80039d6:	e000      	b.n	80039da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80039da:	3728      	adds	r7, #40	; 0x28
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40020010 	.word	0x40020010
 80039e4:	40020028 	.word	0x40020028
 80039e8:	40020040 	.word	0x40020040
 80039ec:	40020058 	.word	0x40020058
 80039f0:	40020070 	.word	0x40020070
 80039f4:	40020088 	.word	0x40020088
 80039f8:	400200a0 	.word	0x400200a0
 80039fc:	400200b8 	.word	0x400200b8
 8003a00:	40020410 	.word	0x40020410
 8003a04:	40020428 	.word	0x40020428
 8003a08:	40020440 	.word	0x40020440
 8003a0c:	40020458 	.word	0x40020458
 8003a10:	40020470 	.word	0x40020470
 8003a14:	40020488 	.word	0x40020488
 8003a18:	400204a0 	.word	0x400204a0
 8003a1c:	400204b8 	.word	0x400204b8

08003a20 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a7f      	ldr	r2, [pc, #508]	; (8003c54 <DMA_SetConfig+0x21c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d072      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7d      	ldr	r2, [pc, #500]	; (8003c58 <DMA_SetConfig+0x220>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d06d      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7c      	ldr	r2, [pc, #496]	; (8003c5c <DMA_SetConfig+0x224>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d068      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a7a      	ldr	r2, [pc, #488]	; (8003c60 <DMA_SetConfig+0x228>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d063      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a79      	ldr	r2, [pc, #484]	; (8003c64 <DMA_SetConfig+0x22c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d05e      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a77      	ldr	r2, [pc, #476]	; (8003c68 <DMA_SetConfig+0x230>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d059      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a76      	ldr	r2, [pc, #472]	; (8003c6c <DMA_SetConfig+0x234>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d054      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a74      	ldr	r2, [pc, #464]	; (8003c70 <DMA_SetConfig+0x238>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d04f      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a73      	ldr	r2, [pc, #460]	; (8003c74 <DMA_SetConfig+0x23c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d04a      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a71      	ldr	r2, [pc, #452]	; (8003c78 <DMA_SetConfig+0x240>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d045      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a70      	ldr	r2, [pc, #448]	; (8003c7c <DMA_SetConfig+0x244>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d040      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6e      	ldr	r2, [pc, #440]	; (8003c80 <DMA_SetConfig+0x248>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d03b      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6d      	ldr	r2, [pc, #436]	; (8003c84 <DMA_SetConfig+0x24c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d036      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6b      	ldr	r2, [pc, #428]	; (8003c88 <DMA_SetConfig+0x250>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d031      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6a      	ldr	r2, [pc, #424]	; (8003c8c <DMA_SetConfig+0x254>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d02c      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a68      	ldr	r2, [pc, #416]	; (8003c90 <DMA_SetConfig+0x258>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d027      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a67      	ldr	r2, [pc, #412]	; (8003c94 <DMA_SetConfig+0x25c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d022      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a65      	ldr	r2, [pc, #404]	; (8003c98 <DMA_SetConfig+0x260>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01d      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a64      	ldr	r2, [pc, #400]	; (8003c9c <DMA_SetConfig+0x264>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d018      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a62      	ldr	r2, [pc, #392]	; (8003ca0 <DMA_SetConfig+0x268>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a61      	ldr	r2, [pc, #388]	; (8003ca4 <DMA_SetConfig+0x26c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00e      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a5f      	ldr	r2, [pc, #380]	; (8003ca8 <DMA_SetConfig+0x270>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d009      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a5e      	ldr	r2, [pc, #376]	; (8003cac <DMA_SetConfig+0x274>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <DMA_SetConfig+0x10a>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5c      	ldr	r2, [pc, #368]	; (8003cb0 <DMA_SetConfig+0x278>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <DMA_SetConfig+0x10e>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <DMA_SetConfig+0x110>
 8003b46:	2300      	movs	r3, #0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00d      	beq.n	8003b68 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b54:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b66:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a39      	ldr	r2, [pc, #228]	; (8003c54 <DMA_SetConfig+0x21c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d04a      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a38      	ldr	r2, [pc, #224]	; (8003c58 <DMA_SetConfig+0x220>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d045      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a36      	ldr	r2, [pc, #216]	; (8003c5c <DMA_SetConfig+0x224>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d040      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a35      	ldr	r2, [pc, #212]	; (8003c60 <DMA_SetConfig+0x228>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d03b      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a33      	ldr	r2, [pc, #204]	; (8003c64 <DMA_SetConfig+0x22c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d036      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a32      	ldr	r2, [pc, #200]	; (8003c68 <DMA_SetConfig+0x230>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d031      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a30      	ldr	r2, [pc, #192]	; (8003c6c <DMA_SetConfig+0x234>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d02c      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a2f      	ldr	r2, [pc, #188]	; (8003c70 <DMA_SetConfig+0x238>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d027      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2d      	ldr	r2, [pc, #180]	; (8003c74 <DMA_SetConfig+0x23c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d022      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2c      	ldr	r2, [pc, #176]	; (8003c78 <DMA_SetConfig+0x240>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d01d      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2a      	ldr	r2, [pc, #168]	; (8003c7c <DMA_SetConfig+0x244>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d018      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a29      	ldr	r2, [pc, #164]	; (8003c80 <DMA_SetConfig+0x248>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d013      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a27      	ldr	r2, [pc, #156]	; (8003c84 <DMA_SetConfig+0x24c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00e      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a26      	ldr	r2, [pc, #152]	; (8003c88 <DMA_SetConfig+0x250>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d009      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a24      	ldr	r2, [pc, #144]	; (8003c8c <DMA_SetConfig+0x254>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d004      	beq.n	8003c08 <DMA_SetConfig+0x1d0>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a23      	ldr	r2, [pc, #140]	; (8003c90 <DMA_SetConfig+0x258>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d101      	bne.n	8003c0c <DMA_SetConfig+0x1d4>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <DMA_SetConfig+0x1d6>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d059      	beq.n	8003cc6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	223f      	movs	r2, #63	; 0x3f
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c30:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d138      	bne.n	8003cb4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c52:	e086      	b.n	8003d62 <DMA_SetConfig+0x32a>
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8
 8003c94:	58025408 	.word	0x58025408
 8003c98:	5802541c 	.word	0x5802541c
 8003c9c:	58025430 	.word	0x58025430
 8003ca0:	58025444 	.word	0x58025444
 8003ca4:	58025458 	.word	0x58025458
 8003ca8:	5802546c 	.word	0x5802546c
 8003cac:	58025480 	.word	0x58025480
 8003cb0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	60da      	str	r2, [r3, #12]
}
 8003cc4:	e04d      	b.n	8003d62 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a29      	ldr	r2, [pc, #164]	; (8003d70 <DMA_SetConfig+0x338>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d022      	beq.n	8003d16 <DMA_SetConfig+0x2de>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a27      	ldr	r2, [pc, #156]	; (8003d74 <DMA_SetConfig+0x33c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01d      	beq.n	8003d16 <DMA_SetConfig+0x2de>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a26      	ldr	r2, [pc, #152]	; (8003d78 <DMA_SetConfig+0x340>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d018      	beq.n	8003d16 <DMA_SetConfig+0x2de>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a24      	ldr	r2, [pc, #144]	; (8003d7c <DMA_SetConfig+0x344>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <DMA_SetConfig+0x2de>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a23      	ldr	r2, [pc, #140]	; (8003d80 <DMA_SetConfig+0x348>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <DMA_SetConfig+0x2de>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a21      	ldr	r2, [pc, #132]	; (8003d84 <DMA_SetConfig+0x34c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <DMA_SetConfig+0x2de>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a20      	ldr	r2, [pc, #128]	; (8003d88 <DMA_SetConfig+0x350>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d004      	beq.n	8003d16 <DMA_SetConfig+0x2de>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1e      	ldr	r2, [pc, #120]	; (8003d8c <DMA_SetConfig+0x354>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d101      	bne.n	8003d1a <DMA_SetConfig+0x2e2>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <DMA_SetConfig+0x2e4>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d020      	beq.n	8003d62 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2201      	movs	r2, #1
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d108      	bne.n	8003d52 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	60da      	str	r2, [r3, #12]
}
 8003d50:	e007      	b.n	8003d62 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	60da      	str	r2, [r3, #12]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	58025408 	.word	0x58025408
 8003d74:	5802541c 	.word	0x5802541c
 8003d78:	58025430 	.word	0x58025430
 8003d7c:	58025444 	.word	0x58025444
 8003d80:	58025458 	.word	0x58025458
 8003d84:	5802546c 	.word	0x5802546c
 8003d88:	58025480 	.word	0x58025480
 8003d8c:	58025494 	.word	0x58025494

08003d90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a42      	ldr	r2, [pc, #264]	; (8003ea8 <DMA_CalcBaseAndBitshift+0x118>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d04a      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a41      	ldr	r2, [pc, #260]	; (8003eac <DMA_CalcBaseAndBitshift+0x11c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d045      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a3f      	ldr	r2, [pc, #252]	; (8003eb0 <DMA_CalcBaseAndBitshift+0x120>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d040      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a3e      	ldr	r2, [pc, #248]	; (8003eb4 <DMA_CalcBaseAndBitshift+0x124>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d03b      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a3c      	ldr	r2, [pc, #240]	; (8003eb8 <DMA_CalcBaseAndBitshift+0x128>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d036      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a3b      	ldr	r2, [pc, #236]	; (8003ebc <DMA_CalcBaseAndBitshift+0x12c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d031      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a39      	ldr	r2, [pc, #228]	; (8003ec0 <DMA_CalcBaseAndBitshift+0x130>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d02c      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a38      	ldr	r2, [pc, #224]	; (8003ec4 <DMA_CalcBaseAndBitshift+0x134>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d027      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a36      	ldr	r2, [pc, #216]	; (8003ec8 <DMA_CalcBaseAndBitshift+0x138>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d022      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a35      	ldr	r2, [pc, #212]	; (8003ecc <DMA_CalcBaseAndBitshift+0x13c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d01d      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a33      	ldr	r2, [pc, #204]	; (8003ed0 <DMA_CalcBaseAndBitshift+0x140>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d018      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a32      	ldr	r2, [pc, #200]	; (8003ed4 <DMA_CalcBaseAndBitshift+0x144>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a30      	ldr	r2, [pc, #192]	; (8003ed8 <DMA_CalcBaseAndBitshift+0x148>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00e      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <DMA_CalcBaseAndBitshift+0x14c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d009      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a2d      	ldr	r2, [pc, #180]	; (8003ee0 <DMA_CalcBaseAndBitshift+0x150>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <DMA_CalcBaseAndBitshift+0xa8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2c      	ldr	r2, [pc, #176]	; (8003ee4 <DMA_CalcBaseAndBitshift+0x154>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d101      	bne.n	8003e3c <DMA_CalcBaseAndBitshift+0xac>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <DMA_CalcBaseAndBitshift+0xae>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d024      	beq.n	8003e8c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	3b10      	subs	r3, #16
 8003e4a:	4a27      	ldr	r2, [pc, #156]	; (8003ee8 <DMA_CalcBaseAndBitshift+0x158>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	4a24      	ldr	r2, [pc, #144]	; (8003eec <DMA_CalcBaseAndBitshift+0x15c>)
 8003e5c:	5cd3      	ldrb	r3, [r2, r3]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d908      	bls.n	8003e7c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4b1f      	ldr	r3, [pc, #124]	; (8003ef0 <DMA_CalcBaseAndBitshift+0x160>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	1d1a      	adds	r2, r3, #4
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	659a      	str	r2, [r3, #88]	; 0x58
 8003e7a:	e00d      	b.n	8003e98 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <DMA_CalcBaseAndBitshift+0x160>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6593      	str	r3, [r2, #88]	; 0x58
 8003e8a:	e005      	b.n	8003e98 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40020010 	.word	0x40020010
 8003eac:	40020028 	.word	0x40020028
 8003eb0:	40020040 	.word	0x40020040
 8003eb4:	40020058 	.word	0x40020058
 8003eb8:	40020070 	.word	0x40020070
 8003ebc:	40020088 	.word	0x40020088
 8003ec0:	400200a0 	.word	0x400200a0
 8003ec4:	400200b8 	.word	0x400200b8
 8003ec8:	40020410 	.word	0x40020410
 8003ecc:	40020428 	.word	0x40020428
 8003ed0:	40020440 	.word	0x40020440
 8003ed4:	40020458 	.word	0x40020458
 8003ed8:	40020470 	.word	0x40020470
 8003edc:	40020488 	.word	0x40020488
 8003ee0:	400204a0 	.word	0x400204a0
 8003ee4:	400204b8 	.word	0x400204b8
 8003ee8:	aaaaaaab 	.word	0xaaaaaaab
 8003eec:	08010e44 	.word	0x08010e44
 8003ef0:	fffffc00 	.word	0xfffffc00

08003ef4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d120      	bne.n	8003f4a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d858      	bhi.n	8003fc2 <DMA_CheckFifoParam+0xce>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <DMA_CheckFifoParam+0x24>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f29 	.word	0x08003f29
 8003f1c:	08003f3b 	.word	0x08003f3b
 8003f20:	08003f29 	.word	0x08003f29
 8003f24:	08003fc3 	.word	0x08003fc3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d048      	beq.n	8003fc6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f38:	e045      	b.n	8003fc6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f42:	d142      	bne.n	8003fca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f48:	e03f      	b.n	8003fca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f52:	d123      	bne.n	8003f9c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d838      	bhi.n	8003fce <DMA_CheckFifoParam+0xda>
 8003f5c:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <DMA_CheckFifoParam+0x70>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003f75 	.word	0x08003f75
 8003f68:	08003f7b 	.word	0x08003f7b
 8003f6c:	08003f75 	.word	0x08003f75
 8003f70:	08003f8d 	.word	0x08003f8d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
        break;
 8003f78:	e030      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d025      	beq.n	8003fd2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f8a:	e022      	b.n	8003fd2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f94:	d11f      	bne.n	8003fd6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f9a:	e01c      	b.n	8003fd6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d902      	bls.n	8003faa <DMA_CheckFifoParam+0xb6>
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d003      	beq.n	8003fb0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003fa8:	e018      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
        break;
 8003fae:	e015      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8003fc0:	e00b      	b.n	8003fda <DMA_CheckFifoParam+0xe6>
        break;
 8003fc2:	bf00      	nop
 8003fc4:	e00a      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
        break;
 8003fc6:	bf00      	nop
 8003fc8:	e008      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
        break;
 8003fca:	bf00      	nop
 8003fcc:	e006      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
        break;
 8003fce:	bf00      	nop
 8003fd0:	e004      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
        break;
 8003fd2:	bf00      	nop
 8003fd4:	e002      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
        break;
 8003fd6:	bf00      	nop
 8003fd8:	e000      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
    break;
 8003fda:	bf00      	nop
    }
  }

  return status;
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop

08003fec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a38      	ldr	r2, [pc, #224]	; (80040e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d022      	beq.n	800404a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a36      	ldr	r2, [pc, #216]	; (80040e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d01d      	beq.n	800404a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a35      	ldr	r2, [pc, #212]	; (80040e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d018      	beq.n	800404a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a33      	ldr	r2, [pc, #204]	; (80040ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a32      	ldr	r2, [pc, #200]	; (80040f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00e      	beq.n	800404a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a30      	ldr	r2, [pc, #192]	; (80040f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d009      	beq.n	800404a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a2f      	ldr	r2, [pc, #188]	; (80040f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a2d      	ldr	r2, [pc, #180]	; (80040fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d101      	bne.n	800404e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800404e:	2300      	movs	r3, #0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01a      	beq.n	800408a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	3b08      	subs	r3, #8
 800405c:	4a28      	ldr	r2, [pc, #160]	; (8004100 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4b26      	ldr	r3, [pc, #152]	; (8004104 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	461a      	mov	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a24      	ldr	r2, [pc, #144]	; (8004108 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004078:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2201      	movs	r2, #1
 8004082:	409a      	lsls	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004088:	e024      	b.n	80040d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	3b10      	subs	r3, #16
 8004092:	4a1e      	ldr	r2, [pc, #120]	; (800410c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4a1c      	ldr	r2, [pc, #112]	; (8004110 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d806      	bhi.n	80040b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4a1b      	ldr	r2, [pc, #108]	; (8004114 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d902      	bls.n	80040b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3308      	adds	r3, #8
 80040b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4b18      	ldr	r3, [pc, #96]	; (8004118 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	461a      	mov	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a16      	ldr	r2, [pc, #88]	; (800411c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80040c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2201      	movs	r2, #1
 80040ce:	409a      	lsls	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	58025408 	.word	0x58025408
 80040e4:	5802541c 	.word	0x5802541c
 80040e8:	58025430 	.word	0x58025430
 80040ec:	58025444 	.word	0x58025444
 80040f0:	58025458 	.word	0x58025458
 80040f4:	5802546c 	.word	0x5802546c
 80040f8:	58025480 	.word	0x58025480
 80040fc:	58025494 	.word	0x58025494
 8004100:	cccccccd 	.word	0xcccccccd
 8004104:	16009600 	.word	0x16009600
 8004108:	58025880 	.word	0x58025880
 800410c:	aaaaaaab 	.word	0xaaaaaaab
 8004110:	400204b8 	.word	0x400204b8
 8004114:	4002040f 	.word	0x4002040f
 8004118:	10008200 	.word	0x10008200
 800411c:	40020880 	.word	0x40020880

08004120 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d04a      	beq.n	80041cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b08      	cmp	r3, #8
 800413a:	d847      	bhi.n	80041cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a25      	ldr	r2, [pc, #148]	; (80041d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d022      	beq.n	800418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a24      	ldr	r2, [pc, #144]	; (80041dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d01d      	beq.n	800418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a22      	ldr	r2, [pc, #136]	; (80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d018      	beq.n	800418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1f      	ldr	r2, [pc, #124]	; (80041e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1e      	ldr	r2, [pc, #120]	; (80041ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d009      	beq.n	800418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1c      	ldr	r2, [pc, #112]	; (80041f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d101      	bne.n	8004190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004190:	2300      	movs	r3, #0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	461a      	mov	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a15      	ldr	r2, [pc, #84]	; (80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80041a8:	671a      	str	r2, [r3, #112]	; 0x70
 80041aa:	e009      	b.n	80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	461a      	mov	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a11      	ldr	r2, [pc, #68]	; (8004204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80041be:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	2201      	movs	r2, #1
 80041c6:	409a      	lsls	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	58025408 	.word	0x58025408
 80041dc:	5802541c 	.word	0x5802541c
 80041e0:	58025430 	.word	0x58025430
 80041e4:	58025444 	.word	0x58025444
 80041e8:	58025458 	.word	0x58025458
 80041ec:	5802546c 	.word	0x5802546c
 80041f0:	58025480 	.word	0x58025480
 80041f4:	58025494 	.word	0x58025494
 80041f8:	1600963f 	.word	0x1600963f
 80041fc:	58025940 	.word	0x58025940
 8004200:	1000823f 	.word	0x1000823f
 8004204:	40020940 	.word	0x40020940

08004208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004208:	b480      	push	{r7}
 800420a:	b089      	sub	sp, #36	; 0x24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004216:	4b86      	ldr	r3, [pc, #536]	; (8004430 <HAL_GPIO_Init+0x228>)
 8004218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800421a:	e18c      	b.n	8004536 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	2101      	movs	r1, #1
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	4013      	ands	r3, r2
 800422a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 817e 	beq.w	8004530 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d005      	beq.n	800424c <HAL_GPIO_Init+0x44>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d130      	bne.n	80042ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	2203      	movs	r2, #3
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004282:	2201      	movs	r2, #1
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f003 0201 	and.w	r2, r3, #1
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d017      	beq.n	80042ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2203      	movs	r2, #3
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d123      	bne.n	800433e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	08da      	lsrs	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3208      	adds	r2, #8
 80042fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	220f      	movs	r2, #15
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4313      	orrs	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	08da      	lsrs	r2, r3, #3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3208      	adds	r2, #8
 8004338:	69b9      	ldr	r1, [r7, #24]
 800433a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	2203      	movs	r2, #3
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4013      	ands	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 0203 	and.w	r2, r3, #3
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 80d8 	beq.w	8004530 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004380:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <HAL_GPIO_Init+0x22c>)
 8004382:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004386:	4a2b      	ldr	r2, [pc, #172]	; (8004434 <HAL_GPIO_Init+0x22c>)
 8004388:	f043 0302 	orr.w	r3, r3, #2
 800438c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004390:	4b28      	ldr	r3, [pc, #160]	; (8004434 <HAL_GPIO_Init+0x22c>)
 8004392:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800439e:	4a26      	ldr	r2, [pc, #152]	; (8004438 <HAL_GPIO_Init+0x230>)
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	089b      	lsrs	r3, r3, #2
 80043a4:	3302      	adds	r3, #2
 80043a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	220f      	movs	r2, #15
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4013      	ands	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1d      	ldr	r2, [pc, #116]	; (800443c <HAL_GPIO_Init+0x234>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d04a      	beq.n	8004460 <HAL_GPIO_Init+0x258>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <HAL_GPIO_Init+0x238>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d02b      	beq.n	800442a <HAL_GPIO_Init+0x222>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <HAL_GPIO_Init+0x23c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d025      	beq.n	8004426 <HAL_GPIO_Init+0x21e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a1a      	ldr	r2, [pc, #104]	; (8004448 <HAL_GPIO_Init+0x240>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01f      	beq.n	8004422 <HAL_GPIO_Init+0x21a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a19      	ldr	r2, [pc, #100]	; (800444c <HAL_GPIO_Init+0x244>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d019      	beq.n	800441e <HAL_GPIO_Init+0x216>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a18      	ldr	r2, [pc, #96]	; (8004450 <HAL_GPIO_Init+0x248>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <HAL_GPIO_Init+0x212>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a17      	ldr	r2, [pc, #92]	; (8004454 <HAL_GPIO_Init+0x24c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00d      	beq.n	8004416 <HAL_GPIO_Init+0x20e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a16      	ldr	r2, [pc, #88]	; (8004458 <HAL_GPIO_Init+0x250>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d007      	beq.n	8004412 <HAL_GPIO_Init+0x20a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a15      	ldr	r2, [pc, #84]	; (800445c <HAL_GPIO_Init+0x254>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d101      	bne.n	800440e <HAL_GPIO_Init+0x206>
 800440a:	2309      	movs	r3, #9
 800440c:	e029      	b.n	8004462 <HAL_GPIO_Init+0x25a>
 800440e:	230a      	movs	r3, #10
 8004410:	e027      	b.n	8004462 <HAL_GPIO_Init+0x25a>
 8004412:	2307      	movs	r3, #7
 8004414:	e025      	b.n	8004462 <HAL_GPIO_Init+0x25a>
 8004416:	2306      	movs	r3, #6
 8004418:	e023      	b.n	8004462 <HAL_GPIO_Init+0x25a>
 800441a:	2305      	movs	r3, #5
 800441c:	e021      	b.n	8004462 <HAL_GPIO_Init+0x25a>
 800441e:	2304      	movs	r3, #4
 8004420:	e01f      	b.n	8004462 <HAL_GPIO_Init+0x25a>
 8004422:	2303      	movs	r3, #3
 8004424:	e01d      	b.n	8004462 <HAL_GPIO_Init+0x25a>
 8004426:	2302      	movs	r3, #2
 8004428:	e01b      	b.n	8004462 <HAL_GPIO_Init+0x25a>
 800442a:	2301      	movs	r3, #1
 800442c:	e019      	b.n	8004462 <HAL_GPIO_Init+0x25a>
 800442e:	bf00      	nop
 8004430:	58000080 	.word	0x58000080
 8004434:	58024400 	.word	0x58024400
 8004438:	58000400 	.word	0x58000400
 800443c:	58020000 	.word	0x58020000
 8004440:	58020400 	.word	0x58020400
 8004444:	58020800 	.word	0x58020800
 8004448:	58020c00 	.word	0x58020c00
 800444c:	58021000 	.word	0x58021000
 8004450:	58021400 	.word	0x58021400
 8004454:	58021800 	.word	0x58021800
 8004458:	58021c00 	.word	0x58021c00
 800445c:	58022400 	.word	0x58022400
 8004460:	2300      	movs	r3, #0
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	f002 0203 	and.w	r2, r2, #3
 8004468:	0092      	lsls	r2, r2, #2
 800446a:	4093      	lsls	r3, r2
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4313      	orrs	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004472:	4938      	ldr	r1, [pc, #224]	; (8004554 <HAL_GPIO_Init+0x34c>)
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	089b      	lsrs	r3, r3, #2
 8004478:	3302      	adds	r3, #2
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80044a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80044ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80044d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4013      	ands	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	43db      	mvns	r3, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4013      	ands	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	3301      	adds	r3, #1
 8004534:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	f47f ae6b 	bne.w	800421c <HAL_GPIO_Init+0x14>
  }
}
 8004546:	bf00      	nop
 8004548:	bf00      	nop
 800454a:	3724      	adds	r7, #36	; 0x24
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	58000400 	.word	0x58000400

08004558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	807b      	strh	r3, [r7, #2]
 8004564:	4613      	mov	r3, r2
 8004566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004568:	787b      	ldrb	r3, [r7, #1]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800456e:	887a      	ldrh	r2, [r7, #2]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004574:	e003      	b.n	800457e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004576:	887b      	ldrh	r3, [r7, #2]
 8004578:	041a      	lsls	r2, r3, #16
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	619a      	str	r2, [r3, #24]
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af02      	add	r7, sp, #8
 8004592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004598:	f7fd fc16 	bl	8001dc8 <HAL_GetTick>
 800459c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]
 80045a8:	e0a5      	b.n	80046f6 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f040 809e 	bne.w	80046f6 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fc fee2 	bl	8001384 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80045c0:	f241 3188 	movw	r1, #5000	; 0x1388
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f89d 	bl	8004704 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	4b4b      	ldr	r3, [pc, #300]	; (8004700 <HAL_OSPI_Init+0x174>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68d1      	ldr	r1, [r2, #12]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6912      	ldr	r2, [r2, #16]
 80045dc:	3a01      	subs	r2, #1
 80045de:	0412      	lsls	r2, r2, #16
 80045e0:	4311      	orrs	r1, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6952      	ldr	r2, [r2, #20]
 80045e6:	3a01      	subs	r2, #1
 80045e8:	0212      	lsls	r2, r2, #8
 80045ea:	4311      	orrs	r1, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045f0:	4311      	orrs	r1, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	69d2      	ldr	r2, [r2, #28]
 80045f6:	4311      	orrs	r1, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	430b      	orrs	r3, r1
 80045fe:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1a      	ldr	r2, [r3, #32]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004630:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	3b01      	subs	r3, #1
 8004642:	021a      	lsls	r2, r3, #8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2200      	movs	r2, #0
 8004656:	2120      	movs	r1, #32
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fd4b 	bl	80050f4 <OSPI_WaitFlagStateUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d146      	bne.n	80046f6 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	1e5a      	subs	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800469e:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0201 	orr.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d107      	bne.n	80046de <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0202 	orr.w	r2, r2, #2
 80046dc:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046e6:	d103      	bne.n	80046f0 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	651a      	str	r2, [r3, #80]	; 0x50
 80046ee:	e002      	b.n	80046f6 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	f8e0f8f4 	.word	0xf8e0f8f4

08004704 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b094      	sub	sp, #80	; 0x50
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a9d      	ldr	r2, [pc, #628]	; (80049b8 <HAL_OSPIM_Config+0x294>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d105      	bne.n	8004752 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8004750:	e004      	b.n	800475c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004752:	2301      	movs	r3, #1
 8004754:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800475c:	2300      	movs	r3, #0
 800475e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004762:	e01d      	b.n	80047a0 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004764:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004768:	3301      	adds	r3, #1
 800476a:	b2d8      	uxtb	r0, r3
 800476c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004770:	f107 0114 	add.w	r1, r7, #20
 8004774:	4613      	mov	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4413      	add	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	440b      	add	r3, r1
 800477e:	4619      	mov	r1, r3
 8004780:	f000 fcf0 	bl	8005164 <OSPIM_GetConfig>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2208      	movs	r2, #8
 8004794:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004796:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800479a:	3301      	adds	r3, #1
 800479c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80047a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d9dd      	bls.n	8004764 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80047a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f040 8495 	bne.w	80050dc <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80047b2:	4b81      	ldr	r3, [pc, #516]	; (80049b8 <HAL_OSPIM_Config+0x294>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80047be:	4b7e      	ldr	r3, [pc, #504]	; (80049b8 <HAL_OSPIM_Config+0x294>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a7d      	ldr	r2, [pc, #500]	; (80049b8 <HAL_OSPIM_Config+0x294>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80047ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80047d6:	4b79      	ldr	r3, [pc, #484]	; (80049bc <HAL_OSPIM_Config+0x298>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80047e2:	4b76      	ldr	r3, [pc, #472]	; (80049bc <HAL_OSPIM_Config+0x298>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a75      	ldr	r2, [pc, #468]	; (80049bc <HAL_OSPIM_Config+0x298>)
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80047ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80047f2:	f043 0302 	orr.w	r3, r3, #2
 80047f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80047fa:	4971      	ldr	r1, [pc, #452]	; (80049c0 <HAL_OSPIM_Config+0x29c>)
 80047fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047fe:	4613      	mov	r3, r2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	4413      	add	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	3350      	adds	r3, #80	; 0x50
 8004808:	443b      	add	r3, r7
 800480a:	3b34      	subs	r3, #52	; 0x34
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3b01      	subs	r3, #1
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	486a      	ldr	r0, [pc, #424]	; (80049c0 <HAL_OSPIM_Config+0x29c>)
 8004818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800481a:	4613      	mov	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4413      	add	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	3350      	adds	r3, #80	; 0x50
 8004824:	443b      	add	r3, r7
 8004826:	3b34      	subs	r3, #52	; 0x34
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3b01      	subs	r3, #1
 800482c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4403      	add	r3, r0
 8004834:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004836:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <HAL_OSPIM_Config+0x29c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80c0 	beq.w	80049c4 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004844:	4b5e      	ldr	r3, [pc, #376]	; (80049c0 <HAL_OSPIM_Config+0x29c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a5d      	ldr	r2, [pc, #372]	; (80049c0 <HAL_OSPIM_Config+0x29c>)
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8004850:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004854:	2b01      	cmp	r3, #1
 8004856:	f040 8162 	bne.w	8004b1e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800485a:	4959      	ldr	r1, [pc, #356]	; (80049c0 <HAL_OSPIM_Config+0x29c>)
 800485c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004860:	4613      	mov	r3, r2
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	4413      	add	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	3350      	adds	r3, #80	; 0x50
 800486a:	443b      	add	r3, r7
 800486c:	3b3c      	subs	r3, #60	; 0x3c
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3b01      	subs	r3, #1
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	6859      	ldr	r1, [r3, #4]
 8004878:	4851      	ldr	r0, [pc, #324]	; (80049c0 <HAL_OSPIM_Config+0x29c>)
 800487a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800487e:	4613      	mov	r3, r2
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4413      	add	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	3350      	adds	r3, #80	; 0x50
 8004888:	443b      	add	r3, r7
 800488a:	3b3c      	subs	r3, #60	; 0x3c
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3b01      	subs	r3, #1
 8004890:	f041 0202 	orr.w	r2, r1, #2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4403      	add	r3, r0
 8004898:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800489a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800489e:	4613      	mov	r3, r2
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	4413      	add	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	3350      	adds	r3, #80	; 0x50
 80048a8:	443b      	add	r3, r7
 80048aa:	3b38      	subs	r3, #56	; 0x38
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d01f      	beq.n	80048f2 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80048b2:	4943      	ldr	r1, [pc, #268]	; (80049c0 <HAL_OSPIM_Config+0x29c>)
 80048b4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80048b8:	4613      	mov	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4413      	add	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	3350      	adds	r3, #80	; 0x50
 80048c2:	443b      	add	r3, r7
 80048c4:	3b38      	subs	r3, #56	; 0x38
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	6859      	ldr	r1, [r3, #4]
 80048d0:	483b      	ldr	r0, [pc, #236]	; (80049c0 <HAL_OSPIM_Config+0x29c>)
 80048d2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80048d6:	4613      	mov	r3, r2
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	4413      	add	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	3350      	adds	r3, #80	; 0x50
 80048e0:	443b      	add	r3, r7
 80048e2:	3b38      	subs	r3, #56	; 0x38
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	f041 0220 	orr.w	r2, r1, #32
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4403      	add	r3, r0
 80048f0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80048f2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80048f6:	4613      	mov	r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	3350      	adds	r3, #80	; 0x50
 8004900:	443b      	add	r3, r7
 8004902:	3b30      	subs	r3, #48	; 0x30
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d023      	beq.n	8004952 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800490a:	492d      	ldr	r1, [pc, #180]	; (80049c0 <HAL_OSPIM_Config+0x29c>)
 800490c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004910:	4613      	mov	r3, r2
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	4413      	add	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	3350      	adds	r3, #80	; 0x50
 800491a:	443b      	add	r3, r7
 800491c:	3b30      	subs	r3, #48	; 0x30
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3b01      	subs	r3, #1
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	6859      	ldr	r1, [r3, #4]
 800492c:	4824      	ldr	r0, [pc, #144]	; (80049c0 <HAL_OSPIM_Config+0x29c>)
 800492e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004932:	4613      	mov	r3, r2
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	4413      	add	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	3350      	adds	r3, #80	; 0x50
 800493c:	443b      	add	r3, r7
 800493e:	3b30      	subs	r3, #48	; 0x30
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3b01      	subs	r3, #1
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4403      	add	r3, r0
 8004950:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004952:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004956:	4613      	mov	r3, r2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	4413      	add	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	3350      	adds	r3, #80	; 0x50
 8004960:	443b      	add	r3, r7
 8004962:	3b2c      	subs	r3, #44	; 0x2c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 80d9 	beq.w	8004b1e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800496c:	4914      	ldr	r1, [pc, #80]	; (80049c0 <HAL_OSPIM_Config+0x29c>)
 800496e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004972:	4613      	mov	r3, r2
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	4413      	add	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	3350      	adds	r3, #80	; 0x50
 800497c:	443b      	add	r3, r7
 800497e:	3b2c      	subs	r3, #44	; 0x2c
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3b01      	subs	r3, #1
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	6859      	ldr	r1, [r3, #4]
 800498e:	480c      	ldr	r0, [pc, #48]	; (80049c0 <HAL_OSPIM_Config+0x29c>)
 8004990:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004994:	4613      	mov	r3, r2
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	4413      	add	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	3350      	adds	r3, #80	; 0x50
 800499e:	443b      	add	r3, r7
 80049a0:	3b2c      	subs	r3, #44	; 0x2c
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4403      	add	r3, r0
 80049b2:	605a      	str	r2, [r3, #4]
 80049b4:	e0b3      	b.n	8004b1e <HAL_OSPIM_Config+0x3fa>
 80049b6:	bf00      	nop
 80049b8:	52005000 	.word	0x52005000
 80049bc:	5200a000 	.word	0x5200a000
 80049c0:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80049c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c6:	4613      	mov	r3, r2
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	4413      	add	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	3350      	adds	r3, #80	; 0x50
 80049d0:	443b      	add	r3, r7
 80049d2:	3b3c      	subs	r3, #60	; 0x3c
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80a1 	beq.w	8004b1e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80049dc:	4993      	ldr	r1, [pc, #588]	; (8004c2c <HAL_OSPIM_Config+0x508>)
 80049de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049e0:	4613      	mov	r3, r2
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	4413      	add	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	3350      	adds	r3, #80	; 0x50
 80049ea:	443b      	add	r3, r7
 80049ec:	3b3c      	subs	r3, #60	; 0x3c
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	488c      	ldr	r0, [pc, #560]	; (8004c2c <HAL_OSPIM_Config+0x508>)
 80049fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049fc:	4613      	mov	r3, r2
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	4413      	add	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	3350      	adds	r3, #80	; 0x50
 8004a06:	443b      	add	r3, r7
 8004a08:	3b3c      	subs	r3, #60	; 0x3c
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	f021 0201 	bic.w	r2, r1, #1
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4403      	add	r3, r0
 8004a16:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	4413      	add	r3, r2
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	3350      	adds	r3, #80	; 0x50
 8004a24:	443b      	add	r3, r7
 8004a26:	3b38      	subs	r3, #56	; 0x38
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01d      	beq.n	8004a6a <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004a2e:	497f      	ldr	r1, [pc, #508]	; (8004c2c <HAL_OSPIM_Config+0x508>)
 8004a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a32:	4613      	mov	r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	4413      	add	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	3350      	adds	r3, #80	; 0x50
 8004a3c:	443b      	add	r3, r7
 8004a3e:	3b38      	subs	r3, #56	; 0x38
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	6859      	ldr	r1, [r3, #4]
 8004a4a:	4878      	ldr	r0, [pc, #480]	; (8004c2c <HAL_OSPIM_Config+0x508>)
 8004a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a4e:	4613      	mov	r3, r2
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	4413      	add	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	3350      	adds	r3, #80	; 0x50
 8004a58:	443b      	add	r3, r7
 8004a5a:	3b38      	subs	r3, #56	; 0x38
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	f021 0210 	bic.w	r2, r1, #16
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4403      	add	r3, r0
 8004a68:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	4413      	add	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	3350      	adds	r3, #80	; 0x50
 8004a76:	443b      	add	r3, r7
 8004a78:	3b30      	subs	r3, #48	; 0x30
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d021      	beq.n	8004ac4 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004a80:	496a      	ldr	r1, [pc, #424]	; (8004c2c <HAL_OSPIM_Config+0x508>)
 8004a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a84:	4613      	mov	r3, r2
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	4413      	add	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	3350      	adds	r3, #80	; 0x50
 8004a8e:	443b      	add	r3, r7
 8004a90:	3b30      	subs	r3, #48	; 0x30
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	6859      	ldr	r1, [r3, #4]
 8004aa0:	4862      	ldr	r0, [pc, #392]	; (8004c2c <HAL_OSPIM_Config+0x508>)
 8004aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	4413      	add	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	3350      	adds	r3, #80	; 0x50
 8004aae:	443b      	add	r3, r7
 8004ab0:	3b30      	subs	r3, #48	; 0x30
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4403      	add	r3, r0
 8004ac2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	4413      	add	r3, r2
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	3350      	adds	r3, #80	; 0x50
 8004ad0:	443b      	add	r3, r7
 8004ad2:	3b2c      	subs	r3, #44	; 0x2c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d021      	beq.n	8004b1e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004ada:	4954      	ldr	r1, [pc, #336]	; (8004c2c <HAL_OSPIM_Config+0x508>)
 8004adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ade:	4613      	mov	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4413      	add	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	3350      	adds	r3, #80	; 0x50
 8004ae8:	443b      	add	r3, r7
 8004aea:	3b2c      	subs	r3, #44	; 0x2c
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	6859      	ldr	r1, [r3, #4]
 8004afa:	484c      	ldr	r0, [pc, #304]	; (8004c2c <HAL_OSPIM_Config+0x508>)
 8004afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004afe:	4613      	mov	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	3350      	adds	r3, #80	; 0x50
 8004b08:	443b      	add	r3, r7
 8004b0a:	3b2c      	subs	r3, #44	; 0x2c
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4403      	add	r3, r0
 8004b1c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	6819      	ldr	r1, [r3, #0]
 8004b22:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b26:	4613      	mov	r3, r2
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	4413      	add	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	3350      	adds	r3, #80	; 0x50
 8004b30:	443b      	add	r3, r7
 8004b32:	3b3c      	subs	r3, #60	; 0x3c
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4299      	cmp	r1, r3
 8004b38:	d038      	beq.n	8004bac <HAL_OSPIM_Config+0x488>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	6859      	ldr	r1, [r3, #4]
 8004b3e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b42:	4613      	mov	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4413      	add	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	3350      	adds	r3, #80	; 0x50
 8004b4c:	443b      	add	r3, r7
 8004b4e:	3b38      	subs	r3, #56	; 0x38
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4299      	cmp	r1, r3
 8004b54:	d02a      	beq.n	8004bac <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	6899      	ldr	r1, [r3, #8]
 8004b5a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b5e:	4613      	mov	r3, r2
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	4413      	add	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	3350      	adds	r3, #80	; 0x50
 8004b68:	443b      	add	r3, r7
 8004b6a:	3b34      	subs	r3, #52	; 0x34
 8004b6c:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004b6e:	4299      	cmp	r1, r3
 8004b70:	d01c      	beq.n	8004bac <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	68d9      	ldr	r1, [r3, #12]
 8004b76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4413      	add	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	3350      	adds	r3, #80	; 0x50
 8004b84:	443b      	add	r3, r7
 8004b86:	3b30      	subs	r3, #48	; 0x30
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4299      	cmp	r1, r3
 8004b8c:	d00e      	beq.n	8004bac <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	6919      	ldr	r1, [r3, #16]
 8004b92:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b96:	4613      	mov	r3, r2
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	4413      	add	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	3350      	adds	r3, #80	; 0x50
 8004ba0:	443b      	add	r3, r7
 8004ba2:	3b2c      	subs	r3, #44	; 0x2c
 8004ba4:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004ba6:	4299      	cmp	r1, r3
 8004ba8:	f040 810e 	bne.w	8004dc8 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	6819      	ldr	r1, [r3, #0]
 8004bb0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	3350      	adds	r3, #80	; 0x50
 8004bbe:	443b      	add	r3, r7
 8004bc0:	3b3c      	subs	r3, #60	; 0x3c
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4299      	cmp	r1, r3
 8004bc6:	d133      	bne.n	8004c30 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	6859      	ldr	r1, [r3, #4]
 8004bcc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	4413      	add	r3, r2
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	3350      	adds	r3, #80	; 0x50
 8004bda:	443b      	add	r3, r7
 8004bdc:	3b38      	subs	r3, #56	; 0x38
 8004bde:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004be0:	4299      	cmp	r1, r3
 8004be2:	d125      	bne.n	8004c30 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	68d9      	ldr	r1, [r3, #12]
 8004be8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004bec:	4613      	mov	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	4413      	add	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	3350      	adds	r3, #80	; 0x50
 8004bf6:	443b      	add	r3, r7
 8004bf8:	3b30      	subs	r3, #48	; 0x30
 8004bfa:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	d117      	bne.n	8004c30 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	6919      	ldr	r1, [r3, #16]
 8004c04:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004c08:	4613      	mov	r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	4413      	add	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	3350      	adds	r3, #80	; 0x50
 8004c12:	443b      	add	r3, r7
 8004c14:	3b2c      	subs	r3, #44	; 0x2c
 8004c16:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004c18:	4299      	cmp	r1, r3
 8004c1a:	d109      	bne.n	8004c30 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004c1c:	4b03      	ldr	r3, [pc, #12]	; (8004c2c <HAL_OSPIM_Config+0x508>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a02      	ldr	r2, [pc, #8]	; (8004c2c <HAL_OSPIM_Config+0x508>)
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e0ce      	b.n	8004dc8 <HAL_OSPIM_Config+0x6a4>
 8004c2a:	bf00      	nop
 8004c2c:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004c30:	49bb      	ldr	r1, [pc, #748]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004c32:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004c36:	4613      	mov	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	4413      	add	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	3350      	adds	r3, #80	; 0x50
 8004c40:	443b      	add	r3, r7
 8004c42:	3b3c      	subs	r3, #60	; 0x3c
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	6859      	ldr	r1, [r3, #4]
 8004c4e:	48b4      	ldr	r0, [pc, #720]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004c50:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004c54:	4613      	mov	r3, r2
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	4413      	add	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	3350      	adds	r3, #80	; 0x50
 8004c5e:	443b      	add	r3, r7
 8004c60:	3b3c      	subs	r3, #60	; 0x3c
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	f021 0201 	bic.w	r2, r1, #1
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4403      	add	r3, r0
 8004c6e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004c70:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004c74:	4613      	mov	r3, r2
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	4413      	add	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	3350      	adds	r3, #80	; 0x50
 8004c7e:	443b      	add	r3, r7
 8004c80:	3b38      	subs	r3, #56	; 0x38
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01f      	beq.n	8004cc8 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004c88:	49a5      	ldr	r1, [pc, #660]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004c8a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004c8e:	4613      	mov	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	4413      	add	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	3350      	adds	r3, #80	; 0x50
 8004c98:	443b      	add	r3, r7
 8004c9a:	3b38      	subs	r3, #56	; 0x38
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	6859      	ldr	r1, [r3, #4]
 8004ca6:	489e      	ldr	r0, [pc, #632]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004ca8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004cac:	4613      	mov	r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4413      	add	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	3350      	adds	r3, #80	; 0x50
 8004cb6:	443b      	add	r3, r7
 8004cb8:	3b38      	subs	r3, #56	; 0x38
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	f021 0210 	bic.w	r2, r1, #16
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4403      	add	r3, r0
 8004cc6:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004cc8:	4995      	ldr	r1, [pc, #596]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004cca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004cce:	4613      	mov	r3, r2
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	4413      	add	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	3350      	adds	r3, #80	; 0x50
 8004cd8:	443b      	add	r3, r7
 8004cda:	3b34      	subs	r3, #52	; 0x34
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	6859      	ldr	r1, [r3, #4]
 8004ce6:	488e      	ldr	r0, [pc, #568]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004ce8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004cec:	4613      	mov	r3, r2
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	4413      	add	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	3350      	adds	r3, #80	; 0x50
 8004cf6:	443b      	add	r3, r7
 8004cf8:	3b34      	subs	r3, #52	; 0x34
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4403      	add	r3, r0
 8004d06:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004d08:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4413      	add	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	3350      	adds	r3, #80	; 0x50
 8004d16:	443b      	add	r3, r7
 8004d18:	3b30      	subs	r3, #48	; 0x30
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d023      	beq.n	8004d68 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d20:	497f      	ldr	r1, [pc, #508]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004d22:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004d26:	4613      	mov	r3, r2
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4413      	add	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	3350      	adds	r3, #80	; 0x50
 8004d30:	443b      	add	r3, r7
 8004d32:	3b30      	subs	r3, #48	; 0x30
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	6859      	ldr	r1, [r3, #4]
 8004d42:	4877      	ldr	r0, [pc, #476]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004d44:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004d48:	4613      	mov	r3, r2
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	4413      	add	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	3350      	adds	r3, #80	; 0x50
 8004d52:	443b      	add	r3, r7
 8004d54:	3b30      	subs	r3, #48	; 0x30
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4403      	add	r3, r0
 8004d66:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004d68:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	4413      	add	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	3350      	adds	r3, #80	; 0x50
 8004d76:	443b      	add	r3, r7
 8004d78:	3b2c      	subs	r3, #44	; 0x2c
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d023      	beq.n	8004dc8 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d80:	4967      	ldr	r1, [pc, #412]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004d82:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004d86:	4613      	mov	r3, r2
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	4413      	add	r3, r2
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	3350      	adds	r3, #80	; 0x50
 8004d90:	443b      	add	r3, r7
 8004d92:	3b2c      	subs	r3, #44	; 0x2c
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	6859      	ldr	r1, [r3, #4]
 8004da2:	485f      	ldr	r0, [pc, #380]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004da4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004da8:	4613      	mov	r3, r2
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	4413      	add	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	3350      	adds	r3, #80	; 0x50
 8004db2:	443b      	add	r3, r7
 8004db4:	3b2c      	subs	r3, #44	; 0x2c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4403      	add	r3, r0
 8004dc6:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004dc8:	4a55      	ldr	r2, [pc, #340]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ddc:	025b      	lsls	r3, r3, #9
 8004dde:	431a      	orrs	r2, r3
 8004de0:	494f      	ldr	r1, [pc, #316]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	1e5a      	subs	r2, r3, #1
 8004df8:	4b49      	ldr	r3, [pc, #292]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	0c1b      	lsrs	r3, r3, #16
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d90a      	bls.n	8004e1a <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8004e04:	4b46      	ldr	r3, [pc, #280]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	041b      	lsls	r3, r3, #16
 8004e14:	4942      	ldr	r1, [pc, #264]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004e1a:	4b41      	ldr	r3, [pc, #260]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 809a 	beq.w	8004f5c <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8004e28:	4a3d      	ldr	r2, [pc, #244]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f023 0203 	bic.w	r2, r3, #3
 8004e3a:	4939      	ldr	r1, [pc, #228]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d011      	beq.n	8004e78 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8004e54:	4a32      	ldr	r2, [pc, #200]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e66:	492e      	ldr	r1, [pc, #184]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	f042 0210 	orr.w	r2, r2, #16
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d016      	beq.n	8004eb2 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e84:	4a26      	ldr	r2, [pc, #152]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e9a:	4921      	ldr	r1, [pc, #132]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	605a      	str	r2, [r3, #4]
 8004eb0:	e019      	b.n	8004ee6 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d015      	beq.n	8004ee6 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004eba:	4a19      	ldr	r2, [pc, #100]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004ed0:	4913      	ldr	r1, [pc, #76]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d018      	beq.n	8004f24 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004ef2:	4a0b      	ldr	r2, [pc, #44]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f08:	4905      	ldr	r1, [pc, #20]	; (8004f20 <HAL_OSPIM_Config+0x7fc>)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	605a      	str	r2, [r3, #4]
 8004f1e:	e0c5      	b.n	80050ac <HAL_OSPIM_Config+0x988>
 8004f20:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80bf 	beq.w	80050ac <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f2e:	4a6e      	ldr	r2, [pc, #440]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004f44:	4968      	ldr	r1, [pc, #416]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	605a      	str	r2, [r3, #4]
 8004f5a:	e0a7      	b.n	80050ac <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004f5c:	4a62      	ldr	r2, [pc, #392]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f023 0203 	bic.w	r2, r3, #3
 8004f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	431a      	orrs	r2, r3
 8004f74:	495c      	ldr	r1, [pc, #368]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	f042 0201 	orr.w	r2, r2, #1
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d014      	beq.n	8004fb8 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004f8e:	4a56      	ldr	r2, [pc, #344]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa2:	015b      	lsls	r3, r3, #5
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	4950      	ldr	r1, [pc, #320]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	f042 0210 	orr.w	r2, r2, #16
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d019      	beq.n	8004ff8 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004fc4:	4a48      	ldr	r2, [pc, #288]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fdc:	049b      	lsls	r3, r3, #18
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	4941      	ldr	r1, [pc, #260]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	605a      	str	r2, [r3, #4]
 8004ff6:	e01c      	b.n	8005032 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d018      	beq.n	8005032 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005000:	4a39      	ldr	r2, [pc, #228]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	3b01      	subs	r3, #1
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005018:	069b      	lsls	r3, r3, #26
 800501a:	431a      	orrs	r2, r3
 800501c:	4932      	ldr	r1, [pc, #200]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	3b01      	subs	r3, #1
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d019      	beq.n	8005072 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800503e:	4a2a      	ldr	r2, [pc, #168]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	3b01      	subs	r3, #1
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005056:	049b      	lsls	r3, r3, #18
 8005058:	431a      	orrs	r2, r3
 800505a:	4923      	ldr	r1, [pc, #140]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	3b01      	subs	r3, #1
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	605a      	str	r2, [r3, #4]
 8005070:	e01c      	b.n	80050ac <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d018      	beq.n	80050ac <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800507a:	4a1b      	ldr	r2, [pc, #108]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	3b01      	subs	r3, #1
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005092:	069b      	lsls	r3, r3, #26
 8005094:	431a      	orrs	r2, r3
 8005096:	4914      	ldr	r1, [pc, #80]	; (80050e8 <HAL_OSPIM_Config+0x9c4>)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	3b01      	subs	r3, #1
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80050ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80050b8:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <HAL_OSPIM_Config+0x9c8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a0b      	ldr	r2, [pc, #44]	; (80050ec <HAL_OSPIM_Config+0x9c8>)
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80050c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <HAL_OSPIM_Config+0x9cc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a06      	ldr	r2, [pc, #24]	; (80050f0 <HAL_OSPIM_Config+0x9cc>)
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80050dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3750      	adds	r7, #80	; 0x50
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	5200b400 	.word	0x5200b400
 80050ec:	52005000 	.word	0x52005000
 80050f0:	5200a000 	.word	0x5200a000

080050f4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	4613      	mov	r3, r2
 8005102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005104:	e01a      	b.n	800513c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d016      	beq.n	800513c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510e:	f7fc fe5b 	bl	8001dc8 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	429a      	cmp	r2, r3
 800511c:	d302      	bcc.n	8005124 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800512a:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005130:	f043 0201 	orr.w	r2, r3, #1
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e00e      	b.n	800515a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	4013      	ands	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	bf14      	ite	ne
 800514a:	2301      	movne	r3, #1
 800514c:	2300      	moveq	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	429a      	cmp	r2, r3
 8005156:	d1d6      	bne.n	8005106 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	6039      	str	r1, [r7, #0]
 800516e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <OSPIM_GetConfig+0x26>
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d802      	bhi.n	800518a <OSPIM_GetConfig+0x26>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d102      	bne.n	8005190 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	75fb      	strb	r3, [r7, #23]
 800518e:	e098      	b.n	80052c2 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2200      	movs	r2, #0
 800519a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2200      	movs	r2, #0
 80051a6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d10b      	bne.n	80051cc <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80051b4:	4b46      	ldr	r3, [pc, #280]	; (80052d0 <OSPIM_GetConfig+0x16c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80051c0:	4b44      	ldr	r3, [pc, #272]	; (80052d4 <OSPIM_GetConfig+0x170>)
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	e002      	b.n	80051cc <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80051c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051ca:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e074      	b.n	80052bc <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80051d2:	4a3f      	ldr	r2, [pc, #252]	; (80052d0 <OSPIM_GetConfig+0x16c>)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4053      	eors	r3, r2
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	4053      	eors	r3, r2
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d103      	bne.n	800521e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	4053      	eors	r3, r2
 800522e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005232:	2b00      	cmp	r3, #0
 8005234:	d103      	bne.n	800523e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d018      	beq.n	800527a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4053      	eors	r3, r2
 800524e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d111      	bne.n	800527a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3301      	adds	r3, #1
 8005264:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	60da      	str	r2, [r3, #12]
 800526c:	e005      	b.n	800527a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3301      	adds	r3, #1
 8005272:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d018      	beq.n	80052b6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4053      	eors	r3, r2
 800528a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d111      	bne.n	80052b6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	611a      	str	r2, [r3, #16]
 80052a8:	e005      	b.n	80052b6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3301      	adds	r3, #1
 80052ae:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d987      	bls.n	80051d2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	5200b400 	.word	0x5200b400
 80052d4:	04040222 	.word	0x04040222

080052d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af02      	add	r7, sp, #8
 80052de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e0fe      	b.n	80054e8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f00a faae 	bl	800f860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2203      	movs	r2, #3
 8005308:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f006 fcfe 	bl	800bd12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	7c1a      	ldrb	r2, [r3, #16]
 800531e:	f88d 2000 	strb.w	r2, [sp]
 8005322:	3304      	adds	r3, #4
 8005324:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005326:	f006 fbcf 	bl	800bac8 <USB_CoreInit>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0d5      	b.n	80054e8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2100      	movs	r1, #0
 8005342:	4618      	mov	r0, r3
 8005344:	f006 fcf6 	bl	800bd34 <USB_SetCurrentMode>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e0c6      	b.n	80054e8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]
 800535e:	e04a      	b.n	80053f6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005360:	7bfa      	ldrb	r2, [r7, #15]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	3315      	adds	r3, #21
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005374:	7bfa      	ldrb	r2, [r7, #15]
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	4613      	mov	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	3314      	adds	r3, #20
 8005384:	7bfa      	ldrb	r2, [r7, #15]
 8005386:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005388:	7bfa      	ldrb	r2, [r7, #15]
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	b298      	uxth	r0, r3
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	332e      	adds	r3, #46	; 0x2e
 800539c:	4602      	mov	r2, r0
 800539e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053a0:	7bfa      	ldrb	r2, [r7, #15]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	3318      	adds	r3, #24
 80053b0:	2200      	movs	r2, #0
 80053b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053b4:	7bfa      	ldrb	r2, [r7, #15]
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	331c      	adds	r3, #28
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053c8:	7bfa      	ldrb	r2, [r7, #15]
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4613      	mov	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	3320      	adds	r3, #32
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80053dc:	7bfa      	ldrb	r2, [r7, #15]
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	4613      	mov	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	3324      	adds	r3, #36	; 0x24
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	3301      	adds	r3, #1
 80053f4:	73fb      	strb	r3, [r7, #15]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	791b      	ldrb	r3, [r3, #4]
 80053fa:	7bfa      	ldrb	r2, [r7, #15]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d3af      	bcc.n	8005360 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005400:	2300      	movs	r3, #0
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	e044      	b.n	8005490 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005406:	7bfa      	ldrb	r2, [r7, #15]
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	4613      	mov	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	f203 2355 	addw	r3, r3, #597	; 0x255
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800541c:	7bfa      	ldrb	r2, [r7, #15]
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	4613      	mov	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800542e:	7bfa      	ldrb	r2, [r7, #15]
 8005430:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005432:	7bfa      	ldrb	r2, [r7, #15]
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005448:	7bfa      	ldrb	r2, [r7, #15]
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800545e:	7bfa      	ldrb	r2, [r7, #15]
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	4613      	mov	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	440b      	add	r3, r1
 800546c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005474:	7bfa      	ldrb	r2, [r7, #15]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800548a:	7bfb      	ldrb	r3, [r7, #15]
 800548c:	3301      	adds	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	791b      	ldrb	r3, [r3, #4]
 8005494:	7bfa      	ldrb	r2, [r7, #15]
 8005496:	429a      	cmp	r2, r3
 8005498:	d3b5      	bcc.n	8005406 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	7c1a      	ldrb	r2, [r3, #16]
 80054a2:	f88d 2000 	strb.w	r2, [sp]
 80054a6:	3304      	adds	r3, #4
 80054a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054aa:	f006 fc8f 	bl	800bdcc <USB_DevInit>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d005      	beq.n	80054c0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e013      	b.n	80054e8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	7b1b      	ldrb	r3, [r3, #12]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d102      	bne.n	80054dc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 f946 	bl	8006768 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f007 fbf2 	bl	800ccca <USB_DevDisconnect>

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_PCD_Start+0x1c>
 8005508:	2302      	movs	r3, #2
 800550a:	e022      	b.n	8005552 <HAL_PCD_Start+0x62>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b00      	cmp	r3, #0
 800551e:	d009      	beq.n	8005534 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005524:	2b01      	cmp	r3, #1
 8005526:	d105      	bne.n	8005534 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f006 fbd9 	bl	800bcf0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f007 fba0 	bl	800cc88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <HAL_PCD_Stop+0x1c>
 8005572:	2302      	movs	r3, #2
 8005574:	e028      	b.n	80055c8 <HAL_PCD_Stop+0x6e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  __HAL_PCD_DISABLE(hpcd);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f006 fbc5 	bl	800bd12 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f007 fb9c 	bl	800ccca <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2110      	movs	r1, #16
 8005598:	4618      	mov	r0, r3
 800559a:	f006 fd75 	bl	800c088 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d009      	beq.n	80055be <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d105      	bne.n	80055be <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80055d0:	b590      	push	{r4, r7, lr}
 80055d2:	b08d      	sub	sp, #52	; 0x34
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f007 fc23 	bl	800ce32 <USB_GetMode>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f040 84b9 	bne.w	8005f66 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f007 fb87 	bl	800cd0c <USB_ReadInterrupts>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 84af 	beq.w	8005f64 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	0a1b      	lsrs	r3, r3, #8
 8005610:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f007 fb74 	bl	800cd0c <USB_ReadInterrupts>
 8005624:	4603      	mov	r3, r0
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b02      	cmp	r3, #2
 800562c:	d107      	bne.n	800563e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f002 0202 	and.w	r2, r2, #2
 800563c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f007 fb62 	bl	800cd0c <USB_ReadInterrupts>
 8005648:	4603      	mov	r3, r0
 800564a:	f003 0310 	and.w	r3, r3, #16
 800564e:	2b10      	cmp	r3, #16
 8005650:	d161      	bne.n	8005716 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0210 	bic.w	r2, r2, #16
 8005660:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f003 020f 	and.w	r2, r3, #15
 800566e:	4613      	mov	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	4413      	add	r3, r2
 800567e:	3304      	adds	r3, #4
 8005680:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	0c5b      	lsrs	r3, r3, #17
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	2b02      	cmp	r3, #2
 800568c:	d124      	bne.n	80056d8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005694:	4013      	ands	r3, r2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d035      	beq.n	8005706 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	091b      	lsrs	r3, r3, #4
 80056a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	6a38      	ldr	r0, [r7, #32]
 80056ae:	f007 f999 	bl	800c9e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	091b      	lsrs	r3, r3, #4
 80056ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056be:	441a      	add	r2, r3
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	695a      	ldr	r2, [r3, #20]
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	091b      	lsrs	r3, r3, #4
 80056cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056d0:	441a      	add	r2, r3
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	615a      	str	r2, [r3, #20]
 80056d6:	e016      	b.n	8005706 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	0c5b      	lsrs	r3, r3, #17
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	2b06      	cmp	r3, #6
 80056e2:	d110      	bne.n	8005706 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80056ea:	2208      	movs	r2, #8
 80056ec:	4619      	mov	r1, r3
 80056ee:	6a38      	ldr	r0, [r7, #32]
 80056f0:	f007 f978 	bl	800c9e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	695a      	ldr	r2, [r3, #20]
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005700:	441a      	add	r2, r3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0210 	orr.w	r2, r2, #16
 8005714:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f007 faf6 	bl	800cd0c <USB_ReadInterrupts>
 8005720:	4603      	mov	r3, r0
 8005722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005726:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800572a:	f040 80a7 	bne.w	800587c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f007 fafb 	bl	800cd32 <USB_ReadDevAllOutEpInterrupt>
 800573c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800573e:	e099      	b.n	8005874 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 808e 	beq.w	8005868 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	4611      	mov	r1, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f007 fb1f 	bl	800cd9a <USB_ReadDevOutEPInterrupt>
 800575c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00c      	beq.n	8005782 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	461a      	mov	r2, r3
 8005776:	2301      	movs	r3, #1
 8005778:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800577a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fe6d 	bl	800645c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00c      	beq.n	80057a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005798:	461a      	mov	r2, r3
 800579a:	2308      	movs	r3, #8
 800579c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800579e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 ff43 	bl	800662c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d008      	beq.n	80057c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	461a      	mov	r2, r3
 80057be:	2310      	movs	r3, #16
 80057c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d030      	beq.n	800582e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d4:	2b80      	cmp	r3, #128	; 0x80
 80057d6:	d109      	bne.n	80057ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80057ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ee:	4613      	mov	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	4413      	add	r3, r2
 80057fe:	3304      	adds	r3, #4
 8005800:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	78db      	ldrb	r3, [r3, #3]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d108      	bne.n	800581c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2200      	movs	r2, #0
 800580e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	b2db      	uxtb	r3, r3
 8005814:	4619      	mov	r1, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f00a f91a 	bl	800fa50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005828:	461a      	mov	r2, r3
 800582a:	2302      	movs	r3, #2
 800582c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005844:	461a      	mov	r2, r3
 8005846:	2320      	movs	r3, #32
 8005848:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005860:	461a      	mov	r2, r3
 8005862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005866:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	3301      	adds	r3, #1
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	2b00      	cmp	r3, #0
 8005878:	f47f af62 	bne.w	8005740 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f007 fa43 	bl	800cd0c <USB_ReadInterrupts>
 8005886:	4603      	mov	r3, r0
 8005888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800588c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005890:	f040 80db 	bne.w	8005a4a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f007 fa64 	bl	800cd66 <USB_ReadDevAllInEpInterrupt>
 800589e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80058a4:	e0cd      	b.n	8005a42 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 80c2 	beq.w	8005a36 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	4611      	mov	r1, r2
 80058bc:	4618      	mov	r0, r3
 80058be:	f007 fa8a 	bl	800cdd6 <USB_ReadDevInEPInterrupt>
 80058c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d057      	beq.n	800597e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	f003 030f 	and.w	r3, r3, #15
 80058d4:	2201      	movs	r2, #1
 80058d6:	fa02 f303 	lsl.w	r3, r2, r3
 80058da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	43db      	mvns	r3, r3
 80058e8:	69f9      	ldr	r1, [r7, #28]
 80058ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ee:	4013      	ands	r3, r2
 80058f0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fe:	461a      	mov	r2, r3
 8005900:	2301      	movs	r3, #1
 8005902:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	799b      	ldrb	r3, [r3, #6]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d132      	bne.n	8005972 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005910:	4613      	mov	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	3320      	adds	r3, #32
 800591c:	6819      	ldr	r1, [r3, #0]
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005922:	4613      	mov	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4403      	add	r3, r0
 800592c:	331c      	adds	r3, #28
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4419      	add	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4403      	add	r3, r0
 8005940:	3320      	adds	r3, #32
 8005942:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	2b00      	cmp	r3, #0
 8005948:	d113      	bne.n	8005972 <HAL_PCD_IRQHandler+0x3a2>
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594e:	4613      	mov	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	3324      	adds	r3, #36	; 0x24
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d108      	bne.n	8005972 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800596a:	461a      	mov	r2, r3
 800596c:	2101      	movs	r1, #1
 800596e:	f007 fa93 	bl	800ce98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	b2db      	uxtb	r3, r3
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f009 ffe4 	bl	800f946 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	461a      	mov	r2, r3
 8005996:	2308      	movs	r3, #8
 8005998:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f003 0310 	and.w	r3, r3, #16
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d008      	beq.n	80059b6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b0:	461a      	mov	r2, r3
 80059b2:	2310      	movs	r3, #16
 80059b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	461a      	mov	r2, r3
 80059ce:	2340      	movs	r3, #64	; 0x40
 80059d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d023      	beq.n	8005a24 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80059dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059de:	6a38      	ldr	r0, [r7, #32]
 80059e0:	f006 fb52 	bl	800c088 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80059e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e6:	4613      	mov	r3, r2
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	3310      	adds	r3, #16
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4413      	add	r3, r2
 80059f4:	3304      	adds	r3, #4
 80059f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	78db      	ldrb	r3, [r3, #3]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d108      	bne.n	8005a12 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2200      	movs	r2, #0
 8005a04:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f00a f831 	bl	800fa74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2302      	movs	r3, #2
 8005a22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005a2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fc86 	bl	8006342 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	3301      	adds	r3, #1
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f47f af2e 	bne.w	80058a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f007 f95c 	bl	800cd0c <USB_ReadInterrupts>
 8005a54:	4603      	mov	r3, r0
 8005a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a5e:	d122      	bne.n	8005aa6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a6e:	f023 0301 	bic.w	r3, r3, #1
 8005a72:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d108      	bne.n	8005a90 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a86:	2100      	movs	r1, #0
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fe91 	bl	80067b0 <HAL_PCDEx_LPM_Callback>
 8005a8e:	e002      	b.n	8005a96 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f009 ffcf 	bl	800fa34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f007 f92e 	bl	800cd0c <USB_ReadInterrupts>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aba:	d112      	bne.n	8005ae2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d102      	bne.n	8005ad2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f009 ff8b 	bl	800f9e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695a      	ldr	r2, [r3, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f007 f910 	bl	800cd0c <USB_ReadInterrupts>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af6:	d121      	bne.n	8005b3c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005b06:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d111      	bne.n	8005b36 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b20:	089b      	lsrs	r3, r3, #2
 8005b22:	f003 020f 	and.w	r2, r3, #15
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fe3e 	bl	80067b0 <HAL_PCDEx_LPM_Callback>
 8005b34:	e002      	b.n	8005b3c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f009 ff56 	bl	800f9e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f007 f8e3 	bl	800cd0c <USB_ReadInterrupts>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b50:	f040 80b7 	bne.w	8005cc2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2110      	movs	r1, #16
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f006 fa8a 	bl	800c088 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b74:	2300      	movs	r3, #0
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b78:	e046      	b.n	8005c08 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b86:	461a      	mov	r2, r3
 8005b88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b9e:	0151      	lsls	r1, r2, #5
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	440a      	add	r2, r1
 8005ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bc0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005be0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c00:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	3301      	adds	r3, #1
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	791b      	ldrb	r3, [r3, #4]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d3b2      	bcc.n	8005b7a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c22:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005c26:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	7bdb      	ldrb	r3, [r3, #15]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d016      	beq.n	8005c5e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c40:	f043 030b 	orr.w	r3, r3, #11
 8005c44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c56:	f043 030b 	orr.w	r3, r3, #11
 8005c5a:	6453      	str	r3, [r2, #68]	; 0x44
 8005c5c:	e015      	b.n	8005c8a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c64:	695a      	ldr	r2, [r3, #20]
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	f242 032b 	movw	r3, #8235	; 0x202b
 8005c72:	4313      	orrs	r3, r2
 8005c74:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c84:	f043 030b 	orr.w	r3, r3, #11
 8005c88:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c98:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c9c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005cac:	461a      	mov	r2, r3
 8005cae:	f007 f8f3 	bl	800ce98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695a      	ldr	r2, [r3, #20]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f007 f820 	bl	800cd0c <USB_ReadInterrupts>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd6:	d123      	bne.n	8005d20 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f007 f8b7 	bl	800ce50 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f006 fa47 	bl	800c17a <USB_GetDevSpeed>
 8005cec:	4603      	mov	r3, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681c      	ldr	r4, [r3, #0]
 8005cf8:	f001 fde4 	bl	80078c4 <HAL_RCC_GetHCLKFreq>
 8005cfc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d02:	461a      	mov	r2, r3
 8005d04:	4620      	mov	r0, r4
 8005d06:	f005 ff51 	bl	800bbac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f009 fe43 	bl	800f996 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f006 fff1 	bl	800cd0c <USB_ReadInterrupts>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d10a      	bne.n	8005d4a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f009 fe20 	bl	800f97a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f002 0208 	and.w	r2, r2, #8
 8005d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f006 ffdc 	bl	800cd0c <USB_ReadInterrupts>
 8005d54:	4603      	mov	r3, r0
 8005d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5a:	2b80      	cmp	r3, #128	; 0x80
 8005d5c:	d123      	bne.n	8005da6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6e:	e014      	b.n	8005d9a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d105      	bne.n	8005d94 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 faa6 	bl	80062e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	3301      	adds	r3, #1
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	791b      	ldrb	r3, [r3, #4]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d3e4      	bcc.n	8005d70 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f006 ffae 	bl	800cd0c <USB_ReadInterrupts>
 8005db0:	4603      	mov	r3, r0
 8005db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dba:	d13c      	bne.n	8005e36 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc0:	e02b      	b.n	8005e1a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	3318      	adds	r3, #24
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d115      	bne.n	8005e14 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005de8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da12      	bge.n	8005e14 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df2:	4613      	mov	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	3317      	adds	r3, #23
 8005dfe:	2201      	movs	r2, #1
 8005e00:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa66 	bl	80062e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	3301      	adds	r3, #1
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	791b      	ldrb	r3, [r3, #4]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d3cd      	bcc.n	8005dc2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695a      	ldr	r2, [r3, #20]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005e34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f006 ff66 	bl	800cd0c <USB_ReadInterrupts>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e4a:	d156      	bne.n	8005efa <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e50:	e045      	b.n	8005ede <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e66:	4613      	mov	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d12e      	bne.n	8005ed8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	da2b      	bge.n	8005ed8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8005e8c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d121      	bne.n	8005ed8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e98:	4613      	mov	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	f203 2357 	addw	r3, r3, #599	; 0x257
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ed0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ed4:	6053      	str	r3, [r2, #4]
            break;
 8005ed6:	e008      	b.n	8005eea <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	3301      	adds	r3, #1
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	791b      	ldrb	r3, [r3, #4]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d3b3      	bcc.n	8005e52 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695a      	ldr	r2, [r3, #20]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005ef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f006 ff04 	bl	800cd0c <USB_ReadInterrupts>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0e:	d10a      	bne.n	8005f26 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f009 fdc1 	bl	800fa98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695a      	ldr	r2, [r3, #20]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f006 feee 	bl	800cd0c <USB_ReadInterrupts>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d115      	bne.n	8005f66 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f009 fdb1 	bl	800fab4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6859      	ldr	r1, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
 8005f62:	e000      	b.n	8005f66 <HAL_PCD_IRQHandler+0x996>
      return;
 8005f64:	bf00      	nop
    }
  }
}
 8005f66:	3734      	adds	r7, #52	; 0x34
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd90      	pop	{r4, r7, pc}

08005f6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_PCD_SetAddress+0x1a>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e012      	b.n	8005fac <HAL_PCD_SetAddress+0x40>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	78fa      	ldrb	r2, [r7, #3]
 8005f92:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f006 fe4d 	bl	800cc3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	70fb      	strb	r3, [r7, #3]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	803b      	strh	r3, [r7, #0]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	da0f      	bge.n	8005ffa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fda:	78fb      	ldrb	r3, [r7, #3]
 8005fdc:	f003 020f 	and.w	r2, r3, #15
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	3310      	adds	r3, #16
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	3304      	adds	r3, #4
 8005ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	705a      	strb	r2, [r3, #1]
 8005ff8:	e00f      	b.n	800601a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	f003 020f 	and.w	r2, r3, #15
 8006000:	4613      	mov	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	4413      	add	r3, r2
 8006010:	3304      	adds	r3, #4
 8006012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	b2da      	uxtb	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006026:	883a      	ldrh	r2, [r7, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	78ba      	ldrb	r2, [r7, #2]
 8006030:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d004      	beq.n	8006044 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006044:	78bb      	ldrb	r3, [r7, #2]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d102      	bne.n	8006050 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_PCD_EP_Open+0xaa>
 800605a:	2302      	movs	r3, #2
 800605c:	e00e      	b.n	800607c <HAL_PCD_EP_Open+0xc8>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68f9      	ldr	r1, [r7, #12]
 800606c:	4618      	mov	r0, r3
 800606e:	f006 f8a9 	bl	800c1c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800607a:	7afb      	ldrb	r3, [r7, #11]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	460b      	mov	r3, r1
 8006092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006094:	7afb      	ldrb	r3, [r7, #11]
 8006096:	f003 020f 	and.w	r2, r3, #15
 800609a:	4613      	mov	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	3304      	adds	r3, #4
 80060ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2200      	movs	r2, #0
 80060be:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2200      	movs	r2, #0
 80060c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060c6:	7afb      	ldrb	r3, [r7, #11]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	799b      	ldrb	r3, [r3, #6]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d102      	bne.n	80060e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	799b      	ldrb	r3, [r3, #6]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6979      	ldr	r1, [r7, #20]
 80060ec:	f006 f8f2 	bl	800c2d4 <USB_EPStartXfer>

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b086      	sub	sp, #24
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	460b      	mov	r3, r1
 8006108:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800610a:	7afb      	ldrb	r3, [r7, #11]
 800610c:	f003 020f 	and.w	r2, r3, #15
 8006110:	4613      	mov	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	3310      	adds	r3, #16
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4413      	add	r3, r2
 800611e:	3304      	adds	r3, #4
 8006120:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2200      	movs	r2, #0
 8006132:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2201      	movs	r2, #1
 8006138:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800613a:	7afb      	ldrb	r3, [r7, #11]
 800613c:	f003 030f 	and.w	r3, r3, #15
 8006140:	b2da      	uxtb	r2, r3
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	799b      	ldrb	r3, [r3, #6]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d102      	bne.n	8006154 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6818      	ldr	r0, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	799b      	ldrb	r3, [r3, #6]
 800615c:	461a      	mov	r2, r3
 800615e:	6979      	ldr	r1, [r7, #20]
 8006160:	f006 f8b8 	bl	800c2d4 <USB_EPStartXfer>

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	f003 030f 	and.w	r3, r3, #15
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	7912      	ldrb	r2, [r2, #4]
 8006184:	4293      	cmp	r3, r2
 8006186:	d901      	bls.n	800618c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e04f      	b.n	800622c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800618c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006190:	2b00      	cmp	r3, #0
 8006192:	da0f      	bge.n	80061b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006194:	78fb      	ldrb	r3, [r7, #3]
 8006196:	f003 020f 	and.w	r2, r3, #15
 800619a:	4613      	mov	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	3310      	adds	r3, #16
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	4413      	add	r3, r2
 80061a8:	3304      	adds	r3, #4
 80061aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	705a      	strb	r2, [r3, #1]
 80061b2:	e00d      	b.n	80061d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061b4:	78fa      	ldrb	r2, [r7, #3]
 80061b6:	4613      	mov	r3, r2
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	4413      	add	r3, r2
 80061c6:	3304      	adds	r3, #4
 80061c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_PCD_EP_SetStall+0x82>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e01d      	b.n	800622c <HAL_PCD_EP_SetStall+0xbe>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68f9      	ldr	r1, [r7, #12]
 80061fe:	4618      	mov	r0, r3
 8006200:	f006 fc48 	bl	800ca94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006204:	78fb      	ldrb	r3, [r7, #3]
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	2b00      	cmp	r3, #0
 800620c:	d109      	bne.n	8006222 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	7999      	ldrb	r1, [r3, #6]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800621c:	461a      	mov	r2, r3
 800621e:	f006 fe3b 	bl	800ce98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	7912      	ldrb	r2, [r2, #4]
 800624a:	4293      	cmp	r3, r2
 800624c:	d901      	bls.n	8006252 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e042      	b.n	80062d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006256:	2b00      	cmp	r3, #0
 8006258:	da0f      	bge.n	800627a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800625a:	78fb      	ldrb	r3, [r7, #3]
 800625c:	f003 020f 	and.w	r2, r3, #15
 8006260:	4613      	mov	r3, r2
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	3310      	adds	r3, #16
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	4413      	add	r3, r2
 800626e:	3304      	adds	r3, #4
 8006270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	705a      	strb	r2, [r3, #1]
 8006278:	e00f      	b.n	800629a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800627a:	78fb      	ldrb	r3, [r7, #3]
 800627c:	f003 020f 	and.w	r2, r3, #15
 8006280:	4613      	mov	r3, r2
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	4413      	add	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	4413      	add	r3, r2
 8006290:	3304      	adds	r3, #4
 8006292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_PCD_EP_ClrStall+0x86>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e00e      	b.n	80062d8 <HAL_PCD_EP_ClrStall+0xa4>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68f9      	ldr	r1, [r7, #12]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f006 fc51 	bl	800cb70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80062ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	da0c      	bge.n	800630e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	f003 020f 	and.w	r2, r3, #15
 80062fa:	4613      	mov	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	3310      	adds	r3, #16
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	4413      	add	r3, r2
 8006308:	3304      	adds	r3, #4
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	e00c      	b.n	8006328 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	f003 020f 	and.w	r2, r3, #15
 8006314:	4613      	mov	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	4413      	add	r3, r2
 8006324:	3304      	adds	r3, #4
 8006326:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68f9      	ldr	r1, [r7, #12]
 800632e:	4618      	mov	r0, r3
 8006330:	f006 fa70 	bl	800c814 <USB_EPStopXfer>
 8006334:	4603      	mov	r3, r0
 8006336:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006338:	7afb      	ldrb	r3, [r7, #11]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b08a      	sub	sp, #40	; 0x28
 8006346:	af02      	add	r7, sp, #8
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	4613      	mov	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	3310      	adds	r3, #16
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	3304      	adds	r3, #4
 8006368:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	695a      	ldr	r2, [r3, #20]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	429a      	cmp	r2, r3
 8006374:	d901      	bls.n	800637a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e06b      	b.n	8006452 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	691a      	ldr	r2, [r3, #16]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	429a      	cmp	r2, r3
 800638e:	d902      	bls.n	8006396 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	3303      	adds	r3, #3
 800639a:	089b      	lsrs	r3, r3, #2
 800639c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800639e:	e02a      	b.n	80063f6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	691a      	ldr	r2, [r3, #16]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d902      	bls.n	80063bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	3303      	adds	r3, #3
 80063c0:	089b      	lsrs	r3, r3, #2
 80063c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	68d9      	ldr	r1, [r3, #12]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	4603      	mov	r3, r0
 80063d8:	6978      	ldr	r0, [r7, #20]
 80063da:	f006 fac5 	bl	800c968 <USB_WritePacket>

    ep->xfer_buff  += len;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	441a      	add	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	695a      	ldr	r2, [r3, #20]
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	441a      	add	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	429a      	cmp	r2, r3
 800640a:	d809      	bhi.n	8006420 <PCD_WriteEmptyTxFifo+0xde>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	695a      	ldr	r2, [r3, #20]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006414:	429a      	cmp	r2, r3
 8006416:	d203      	bcs.n	8006420 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1bf      	bne.n	80063a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	429a      	cmp	r2, r3
 800642a:	d811      	bhi.n	8006450 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	2201      	movs	r2, #1
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	43db      	mvns	r3, r3
 8006446:	6939      	ldr	r1, [r7, #16]
 8006448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800644c:	4013      	ands	r3, r2
 800644e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3720      	adds	r7, #32
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	333c      	adds	r3, #60	; 0x3c
 8006474:	3304      	adds	r3, #4
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	799b      	ldrb	r3, [r3, #6]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d17b      	bne.n	800658a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d015      	beq.n	80064c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	4a61      	ldr	r2, [pc, #388]	; (8006624 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	f240 80b9 	bls.w	8006618 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 80b3 	beq.w	8006618 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064be:	461a      	mov	r2, r3
 80064c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064c4:	6093      	str	r3, [r2, #8]
 80064c6:	e0a7      	b.n	8006618 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d009      	beq.n	80064e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064de:	461a      	mov	r2, r3
 80064e0:	2320      	movs	r3, #32
 80064e2:	6093      	str	r3, [r2, #8]
 80064e4:	e098      	b.n	8006618 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f040 8093 	bne.w	8006618 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	4a4b      	ldr	r2, [pc, #300]	; (8006624 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d90f      	bls.n	800651a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006510:	461a      	mov	r2, r3
 8006512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006516:	6093      	str	r3, [r2, #8]
 8006518:	e07e      	b.n	8006618 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	4413      	add	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	4413      	add	r3, r2
 800652c:	3304      	adds	r3, #4
 800652e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	0159      	lsls	r1, r3, #5
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	440b      	add	r3, r1
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d114      	bne.n	800657c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d109      	bne.n	800656e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006564:	461a      	mov	r2, r3
 8006566:	2101      	movs	r1, #1
 8006568:	f006 fc96 	bl	800ce98 <USB_EP0_OutStart>
 800656c:	e006      	b.n	800657c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	441a      	add	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f009 f9c4 	bl	800f910 <HAL_PCD_DataOutStageCallback>
 8006588:	e046      	b.n	8006618 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	4a26      	ldr	r2, [pc, #152]	; (8006628 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d124      	bne.n	80065dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a8:	461a      	mov	r2, r3
 80065aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ae:	6093      	str	r3, [r2, #8]
 80065b0:	e032      	b.n	8006618 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f003 0320 	and.w	r3, r3, #32
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c8:	461a      	mov	r2, r3
 80065ca:	2320      	movs	r3, #32
 80065cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f009 f99b 	bl	800f910 <HAL_PCD_DataOutStageCallback>
 80065da:	e01d      	b.n	8006618 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d114      	bne.n	800660c <PCD_EP_OutXfrComplete_int+0x1b0>
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	4613      	mov	r3, r2
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	440b      	add	r3, r1
 80065f0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d108      	bne.n	800660c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006604:	461a      	mov	r2, r3
 8006606:	2100      	movs	r1, #0
 8006608:	f006 fc46 	bl	800ce98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f009 f97c 	bl	800f910 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	4f54300a 	.word	0x4f54300a
 8006628:	4f54310a 	.word	0x4f54310a

0800662c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	333c      	adds	r3, #60	; 0x3c
 8006644:	3304      	adds	r3, #4
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a15      	ldr	r2, [pc, #84]	; (80066b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d90e      	bls.n	8006680 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006678:	461a      	mov	r2, r3
 800667a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f009 f933 	bl	800f8ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4a0a      	ldr	r2, [pc, #40]	; (80066b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d90c      	bls.n	80066a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	799b      	ldrb	r3, [r3, #6]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d108      	bne.n	80066a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80066a0:	461a      	mov	r2, r3
 80066a2:	2101      	movs	r1, #1
 80066a4:	f006 fbf8 	bl	800ce98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	4f54300a 	.word	0x4f54300a

080066b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
 80066c4:	4613      	mov	r3, r2
 80066c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d107      	bne.n	80066e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80066d6:	883b      	ldrh	r3, [r7, #0]
 80066d8:	0419      	lsls	r1, r3, #16
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	629a      	str	r2, [r3, #40]	; 0x28
 80066e4:	e028      	b.n	8006738 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	0c1b      	lsrs	r3, r3, #16
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	4413      	add	r3, r2
 80066f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066f4:	2300      	movs	r3, #0
 80066f6:	73fb      	strb	r3, [r7, #15]
 80066f8:	e00d      	b.n	8006716 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	3340      	adds	r3, #64	; 0x40
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	4413      	add	r3, r2
 800670e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	3301      	adds	r3, #1
 8006714:	73fb      	strb	r3, [r7, #15]
 8006716:	7bfa      	ldrb	r2, [r7, #15]
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	3b01      	subs	r3, #1
 800671c:	429a      	cmp	r2, r3
 800671e:	d3ec      	bcc.n	80066fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006720:	883b      	ldrh	r3, [r7, #0]
 8006722:	0418      	lsls	r0, r3, #16
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6819      	ldr	r1, [r3, #0]
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	3b01      	subs	r3, #1
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	4302      	orrs	r2, r0
 8006730:	3340      	adds	r3, #64	; 0x40
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	460b      	mov	r3, r1
 8006750:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	887a      	ldrh	r2, [r7, #2]
 8006758:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006796:	4b05      	ldr	r3, [pc, #20]	; (80067ac <HAL_PCDEx_ActivateLPM+0x44>)
 8006798:	4313      	orrs	r3, r2
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	10000003 	.word	0x10000003

080067b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80067d0:	4b19      	ldr	r3, [pc, #100]	; (8006838 <HAL_PWREx_ConfigSupply+0x70>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d00a      	beq.n	80067f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80067dc:	4b16      	ldr	r3, [pc, #88]	; (8006838 <HAL_PWREx_ConfigSupply+0x70>)
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d001      	beq.n	80067ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e01f      	b.n	800682e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e01d      	b.n	800682e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80067f2:	4b11      	ldr	r3, [pc, #68]	; (8006838 <HAL_PWREx_ConfigSupply+0x70>)
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f023 0207 	bic.w	r2, r3, #7
 80067fa:	490f      	ldr	r1, [pc, #60]	; (8006838 <HAL_PWREx_ConfigSupply+0x70>)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006802:	f7fb fae1 	bl	8001dc8 <HAL_GetTick>
 8006806:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006808:	e009      	b.n	800681e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800680a:	f7fb fadd 	bl	8001dc8 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006818:	d901      	bls.n	800681e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e007      	b.n	800682e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800681e:	4b06      	ldr	r3, [pc, #24]	; (8006838 <HAL_PWREx_ConfigSupply+0x70>)
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800682a:	d1ee      	bne.n	800680a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	58024800 	.word	0x58024800

0800683c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006840:	4b05      	ldr	r3, [pc, #20]	; (8006858 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	4a04      	ldr	r2, [pc, #16]	; (8006858 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800684a:	60d3      	str	r3, [r2, #12]
}
 800684c:	bf00      	nop
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	58024800 	.word	0x58024800

0800685c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8006862:	4b89      	ldr	r3, [pc, #548]	; (8006a88 <HAL_RCC_DeInit+0x22c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	2b06      	cmp	r3, #6
 800686c:	d80f      	bhi.n	800688e <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 800686e:	4b86      	ldr	r3, [pc, #536]	; (8006a88 <HAL_RCC_DeInit+0x22c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f023 030f 	bic.w	r3, r3, #15
 8006876:	4a84      	ldr	r2, [pc, #528]	; (8006a88 <HAL_RCC_DeInit+0x22c>)
 8006878:	f043 0307 	orr.w	r3, r3, #7
 800687c:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 800687e:	4b82      	ldr	r3, [pc, #520]	; (8006a88 <HAL_RCC_DeInit+0x22c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	2b07      	cmp	r3, #7
 8006888:	d001      	beq.n	800688e <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e0f7      	b.n	8006a7e <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800688e:	f7fb fa9b 	bl	8001dc8 <HAL_GetTick>
 8006892:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006894:	4b7d      	ldr	r3, [pc, #500]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a7c      	ldr	r2, [pc, #496]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068a2:	f7fb fa91 	bl	8001dc8 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e0e4      	b.n	8006a7e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068b4:	4b75      	ldr	r3, [pc, #468]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 80068c0:	4b72      	ldr	r3, [pc, #456]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	4a71      	ldr	r2, [pc, #452]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 80068c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068ca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80068cc:	4b6f      	ldr	r3, [pc, #444]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 80068d2:	4b6f      	ldr	r3, [pc, #444]	; (8006a90 <HAL_RCC_DeInit+0x234>)
 80068d4:	4a6f      	ldr	r2, [pc, #444]	; (8006a94 <HAL_RCC_DeInit+0x238>)
 80068d6:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 80068d8:	4b6f      	ldr	r3, [pc, #444]	; (8006a98 <HAL_RCC_DeInit+0x23c>)
 80068da:	4a6e      	ldr	r2, [pc, #440]	; (8006a94 <HAL_RCC_DeInit+0x238>)
 80068dc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80068de:	4b6f      	ldr	r3, [pc, #444]	; (8006a9c <HAL_RCC_DeInit+0x240>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fb fa26 	bl	8001d34 <HAL_InitTick>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e0c5      	b.n	8006a7e <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80068f2:	f7fb fa69 	bl	8001dc8 <HAL_GetTick>
 80068f6:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80068f8:	e00a      	b.n	8006910 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068fa:	f7fb fa65 	bl	8001dc8 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	f241 3288 	movw	r2, #5000	; 0x1388
 8006908:	4293      	cmp	r3, r2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e0b6      	b.n	8006a7e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8006910:	4b5e      	ldr	r3, [pc, #376]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1ee      	bne.n	80068fa <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800691c:	f7fb fa54 	bl	8001dc8 <HAL_GetTick>
 8006920:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 8006922:	4b5a      	ldr	r3, [pc, #360]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4959      	ldr	r1, [pc, #356]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006928:	4b5d      	ldr	r3, [pc, #372]	; (8006aa0 <HAL_RCC_DeInit+0x244>)
 800692a:	4013      	ands	r3, r2
 800692c:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800692e:	e008      	b.n	8006942 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006930:	f7fb fa4a 	bl	8001dc8 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b64      	cmp	r3, #100	; 0x64
 800693c:	d901      	bls.n	8006942 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e09d      	b.n	8006a7e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006942:	4b52      	ldr	r3, [pc, #328]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f0      	bne.n	8006930 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800694e:	f7fb fa3b 	bl	8001dc8 <HAL_GetTick>
 8006952:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8006954:	4b4d      	ldr	r3, [pc, #308]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a4c      	ldr	r2, [pc, #304]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 800695a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800695e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006960:	e008      	b.n	8006974 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006962:	f7fb fa31 	bl	8001dc8 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e084      	b.n	8006a7e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006974:	4b45      	ldr	r3, [pc, #276]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f0      	bne.n	8006962 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006980:	f7fb fa22 	bl	8001dc8 <HAL_GetTick>
 8006984:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8006986:	4b41      	ldr	r3, [pc, #260]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a40      	ldr	r2, [pc, #256]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 800698c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006990:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006994:	f7fb fa18 	bl	8001dc8 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e06b      	b.n	8006a7e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 80069a6:	4b39      	ldr	r3, [pc, #228]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1f0      	bne.n	8006994 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80069b2:	f7fb fa09 	bl	8001dc8 <HAL_GetTick>
 80069b6:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 80069b8:	4b34      	ldr	r3, [pc, #208]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a33      	ldr	r2, [pc, #204]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 80069be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069c2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c6:	f7fb f9ff 	bl	8001dc8 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e052      	b.n	8006a7e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80069d8:	4b2c      	ldr	r3, [pc, #176]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1f0      	bne.n	80069c6 <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 80069e4:	4b29      	ldr	r3, [pc, #164]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 80069ea:	4b28      	ldr	r3, [pc, #160]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 80069f0:	4b26      	ldr	r3, [pc, #152]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 80069f6:	4b25      	ldr	r3, [pc, #148]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 80069f8:	4a2a      	ldr	r2, [pc, #168]	; (8006aa4 <HAL_RCC_DeInit+0x248>)
 80069fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 80069fc:	4b23      	ldr	r3, [pc, #140]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 80069fe:	4a2a      	ldr	r2, [pc, #168]	; (8006aa8 <HAL_RCC_DeInit+0x24c>)
 8006a00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 8006a02:	4b22      	ldr	r3, [pc, #136]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006a04:	4a29      	ldr	r2, [pc, #164]	; (8006aac <HAL_RCC_DeInit+0x250>)
 8006a06:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8006a08:	4b20      	ldr	r3, [pc, #128]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8006a0e:	4b1f      	ldr	r3, [pc, #124]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006a10:	4a26      	ldr	r2, [pc, #152]	; (8006aac <HAL_RCC_DeInit+0x250>)
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8006a14:	4b1d      	ldr	r3, [pc, #116]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8006a1a:	4b1c      	ldr	r3, [pc, #112]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006a1c:	4a23      	ldr	r2, [pc, #140]	; (8006aac <HAL_RCC_DeInit+0x250>)
 8006a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8006a20:	4b1a      	ldr	r3, [pc, #104]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006a26:	4b19      	ldr	r3, [pc, #100]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a18      	ldr	r2, [pc, #96]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8006a32:	4b16      	ldr	r3, [pc, #88]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8006a38:	4b14      	ldr	r3, [pc, #80]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a3e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8006a40:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006a42:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8006a46:	4a11      	ldr	r2, [pc, #68]	; (8006a8c <HAL_RCC_DeInit+0x230>)
 8006a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a4c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8006a50:	4b0d      	ldr	r3, [pc, #52]	; (8006a88 <HAL_RCC_DeInit+0x22c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0308 	and.w	r3, r3, #8
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00f      	beq.n	8006a7c <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <HAL_RCC_DeInit+0x22c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f023 030f 	bic.w	r3, r3, #15
 8006a64:	4a08      	ldr	r2, [pc, #32]	; (8006a88 <HAL_RCC_DeInit+0x22c>)
 8006a66:	f043 0307 	orr.w	r3, r3, #7
 8006a6a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <HAL_RCC_DeInit+0x22c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	2b07      	cmp	r3, #7
 8006a76:	d001      	beq.n	8006a7c <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	52002000 	.word	0x52002000
 8006a8c:	58024400 	.word	0x58024400
 8006a90:	24000000 	.word	0x24000000
 8006a94:	03d09000 	.word	0x03d09000
 8006a98:	24000004 	.word	0x24000004
 8006a9c:	24000008 	.word	0x24000008
 8006aa0:	fff6ed45 	.word	0xfff6ed45
 8006aa4:	02020200 	.word	0x02020200
 8006aa8:	01ff0000 	.word	0x01ff0000
 8006aac:	01010280 	.word	0x01010280

08006ab0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08c      	sub	sp, #48	; 0x30
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e3c8      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 8087 	beq.w	8006bde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ad0:	4b88      	ldr	r3, [pc, #544]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ada:	4b86      	ldr	r3, [pc, #536]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae2:	2b10      	cmp	r3, #16
 8006ae4:	d007      	beq.n	8006af6 <HAL_RCC_OscConfig+0x46>
 8006ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae8:	2b18      	cmp	r3, #24
 8006aea:	d110      	bne.n	8006b0e <HAL_RCC_OscConfig+0x5e>
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d10b      	bne.n	8006b0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af6:	4b7f      	ldr	r3, [pc, #508]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d06c      	beq.n	8006bdc <HAL_RCC_OscConfig+0x12c>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d168      	bne.n	8006bdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e3a2      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b16:	d106      	bne.n	8006b26 <HAL_RCC_OscConfig+0x76>
 8006b18:	4b76      	ldr	r3, [pc, #472]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a75      	ldr	r2, [pc, #468]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	e02e      	b.n	8006b84 <HAL_RCC_OscConfig+0xd4>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10c      	bne.n	8006b48 <HAL_RCC_OscConfig+0x98>
 8006b2e:	4b71      	ldr	r3, [pc, #452]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a70      	ldr	r2, [pc, #448]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	4b6e      	ldr	r3, [pc, #440]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a6d      	ldr	r2, [pc, #436]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	e01d      	b.n	8006b84 <HAL_RCC_OscConfig+0xd4>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b50:	d10c      	bne.n	8006b6c <HAL_RCC_OscConfig+0xbc>
 8006b52:	4b68      	ldr	r3, [pc, #416]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a67      	ldr	r2, [pc, #412]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	4b65      	ldr	r3, [pc, #404]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a64      	ldr	r2, [pc, #400]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	e00b      	b.n	8006b84 <HAL_RCC_OscConfig+0xd4>
 8006b6c:	4b61      	ldr	r3, [pc, #388]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a60      	ldr	r2, [pc, #384]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	4b5e      	ldr	r3, [pc, #376]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a5d      	ldr	r2, [pc, #372]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d013      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8c:	f7fb f91c 	bl	8001dc8 <HAL_GetTick>
 8006b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b94:	f7fb f918 	bl	8001dc8 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b64      	cmp	r3, #100	; 0x64
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e356      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ba6:	4b53      	ldr	r3, [pc, #332]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0f0      	beq.n	8006b94 <HAL_RCC_OscConfig+0xe4>
 8006bb2:	e014      	b.n	8006bde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb4:	f7fb f908 	bl	8001dc8 <HAL_GetTick>
 8006bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bbc:	f7fb f904 	bl	8001dc8 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b64      	cmp	r3, #100	; 0x64
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e342      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bce:	4b49      	ldr	r3, [pc, #292]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1f0      	bne.n	8006bbc <HAL_RCC_OscConfig+0x10c>
 8006bda:	e000      	b.n	8006bde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 808c 	beq.w	8006d04 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bec:	4b41      	ldr	r3, [pc, #260]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bf4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bf6:	4b3f      	ldr	r3, [pc, #252]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d007      	beq.n	8006c12 <HAL_RCC_OscConfig+0x162>
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	2b18      	cmp	r3, #24
 8006c06:	d137      	bne.n	8006c78 <HAL_RCC_OscConfig+0x1c8>
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d132      	bne.n	8006c78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c12:	4b38      	ldr	r3, [pc, #224]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <HAL_RCC_OscConfig+0x17a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e314      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c2a:	4b32      	ldr	r3, [pc, #200]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f023 0219 	bic.w	r2, r3, #25
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	492f      	ldr	r1, [pc, #188]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3c:	f7fb f8c4 	bl	8001dc8 <HAL_GetTick>
 8006c40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c44:	f7fb f8c0 	bl	8001dc8 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e2fe      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c56:	4b27      	ldr	r3, [pc, #156]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f0      	beq.n	8006c44 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c62:	4b24      	ldr	r3, [pc, #144]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	061b      	lsls	r3, r3, #24
 8006c70:	4920      	ldr	r1, [pc, #128]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c76:	e045      	b.n	8006d04 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d026      	beq.n	8006cce <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c80:	4b1c      	ldr	r3, [pc, #112]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f023 0219 	bic.w	r2, r3, #25
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	4919      	ldr	r1, [pc, #100]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c92:	f7fb f899 	bl	8001dc8 <HAL_GetTick>
 8006c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c98:	e008      	b.n	8006cac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c9a:	f7fb f895 	bl	8001dc8 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e2d3      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cac:	4b11      	ldr	r3, [pc, #68]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0f0      	beq.n	8006c9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb8:	4b0e      	ldr	r3, [pc, #56]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	061b      	lsls	r3, r3, #24
 8006cc6:	490b      	ldr	r1, [pc, #44]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	604b      	str	r3, [r1, #4]
 8006ccc:	e01a      	b.n	8006d04 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cce:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a08      	ldr	r2, [pc, #32]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006cd4:	f023 0301 	bic.w	r3, r3, #1
 8006cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cda:	f7fb f875 	bl	8001dc8 <HAL_GetTick>
 8006cde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ce0:	e00a      	b.n	8006cf8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ce2:	f7fb f871 	bl	8001dc8 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d903      	bls.n	8006cf8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e2af      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
 8006cf4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cf8:	4b96      	ldr	r3, [pc, #600]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1ee      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0310 	and.w	r3, r3, #16
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d06a      	beq.n	8006de6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d10:	4b90      	ldr	r3, [pc, #576]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d1a:	4b8e      	ldr	r3, [pc, #568]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	d007      	beq.n	8006d36 <HAL_RCC_OscConfig+0x286>
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b18      	cmp	r3, #24
 8006d2a:	d11b      	bne.n	8006d64 <HAL_RCC_OscConfig+0x2b4>
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d116      	bne.n	8006d64 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d36:	4b87      	ldr	r3, [pc, #540]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <HAL_RCC_OscConfig+0x29e>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	2b80      	cmp	r3, #128	; 0x80
 8006d48:	d001      	beq.n	8006d4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e282      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d4e:	4b81      	ldr	r3, [pc, #516]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	061b      	lsls	r3, r3, #24
 8006d5c:	497d      	ldr	r1, [pc, #500]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d62:	e040      	b.n	8006de6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d023      	beq.n	8006db4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006d6c:	4b79      	ldr	r3, [pc, #484]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a78      	ldr	r2, [pc, #480]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d78:	f7fb f826 	bl	8001dc8 <HAL_GetTick>
 8006d7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006d80:	f7fb f822 	bl	8001dc8 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e260      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d92:	4b70      	ldr	r3, [pc, #448]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0f0      	beq.n	8006d80 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d9e:	4b6d      	ldr	r3, [pc, #436]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	061b      	lsls	r3, r3, #24
 8006dac:	4969      	ldr	r1, [pc, #420]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60cb      	str	r3, [r1, #12]
 8006db2:	e018      	b.n	8006de6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006db4:	4b67      	ldr	r3, [pc, #412]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a66      	ldr	r2, [pc, #408]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc0:	f7fb f802 	bl	8001dc8 <HAL_GetTick>
 8006dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006dc8:	f7fa fffe 	bl	8001dc8 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e23c      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006dda:	4b5e      	ldr	r3, [pc, #376]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f0      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d036      	beq.n	8006e60 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d019      	beq.n	8006e2e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dfa:	4b56      	ldr	r3, [pc, #344]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfe:	4a55      	ldr	r2, [pc, #340]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006e00:	f043 0301 	orr.w	r3, r3, #1
 8006e04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e06:	f7fa ffdf 	bl	8001dc8 <HAL_GetTick>
 8006e0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e0c:	e008      	b.n	8006e20 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e0e:	f7fa ffdb 	bl	8001dc8 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d901      	bls.n	8006e20 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e219      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e20:	4b4c      	ldr	r3, [pc, #304]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0f0      	beq.n	8006e0e <HAL_RCC_OscConfig+0x35e>
 8006e2c:	e018      	b.n	8006e60 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e2e:	4b49      	ldr	r3, [pc, #292]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e32:	4a48      	ldr	r2, [pc, #288]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006e34:	f023 0301 	bic.w	r3, r3, #1
 8006e38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3a:	f7fa ffc5 	bl	8001dc8 <HAL_GetTick>
 8006e3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e40:	e008      	b.n	8006e54 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e42:	f7fa ffc1 	bl	8001dc8 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d901      	bls.n	8006e54 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e1ff      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e54:	4b3f      	ldr	r3, [pc, #252]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1f0      	bne.n	8006e42 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d036      	beq.n	8006eda <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d019      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e74:	4b37      	ldr	r3, [pc, #220]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a36      	ldr	r2, [pc, #216]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006e7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e80:	f7fa ffa2 	bl	8001dc8 <HAL_GetTick>
 8006e84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e88:	f7fa ff9e 	bl	8001dc8 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e1dc      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e9a:	4b2e      	ldr	r3, [pc, #184]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0f0      	beq.n	8006e88 <HAL_RCC_OscConfig+0x3d8>
 8006ea6:	e018      	b.n	8006eda <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ea8:	4b2a      	ldr	r3, [pc, #168]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a29      	ldr	r2, [pc, #164]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006eae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006eb4:	f7fa ff88 	bl	8001dc8 <HAL_GetTick>
 8006eb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006eba:	e008      	b.n	8006ece <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ebc:	f7fa ff84 	bl	8001dc8 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e1c2      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ece:	4b21      	ldr	r3, [pc, #132]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1f0      	bne.n	8006ebc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0304 	and.w	r3, r3, #4
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 8086 	beq.w	8006ff4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ee8:	4b1b      	ldr	r3, [pc, #108]	; (8006f58 <HAL_RCC_OscConfig+0x4a8>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1a      	ldr	r2, [pc, #104]	; (8006f58 <HAL_RCC_OscConfig+0x4a8>)
 8006eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ef4:	f7fa ff68 	bl	8001dc8 <HAL_GetTick>
 8006ef8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006efa:	e008      	b.n	8006f0e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006efc:	f7fa ff64 	bl	8001dc8 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b64      	cmp	r3, #100	; 0x64
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e1a2      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f0e:	4b12      	ldr	r3, [pc, #72]	; (8006f58 <HAL_RCC_OscConfig+0x4a8>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0f0      	beq.n	8006efc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d106      	bne.n	8006f30 <HAL_RCC_OscConfig+0x480>
 8006f22:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	4a0b      	ldr	r2, [pc, #44]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006f28:	f043 0301 	orr.w	r3, r3, #1
 8006f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f2e:	e032      	b.n	8006f96 <HAL_RCC_OscConfig+0x4e6>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d111      	bne.n	8006f5c <HAL_RCC_OscConfig+0x4ac>
 8006f38:	4b06      	ldr	r3, [pc, #24]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3c:	4a05      	ldr	r2, [pc, #20]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006f3e:	f023 0301 	bic.w	r3, r3, #1
 8006f42:	6713      	str	r3, [r2, #112]	; 0x70
 8006f44:	4b03      	ldr	r3, [pc, #12]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f48:	4a02      	ldr	r2, [pc, #8]	; (8006f54 <HAL_RCC_OscConfig+0x4a4>)
 8006f4a:	f023 0304 	bic.w	r3, r3, #4
 8006f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f50:	e021      	b.n	8006f96 <HAL_RCC_OscConfig+0x4e6>
 8006f52:	bf00      	nop
 8006f54:	58024400 	.word	0x58024400
 8006f58:	58024800 	.word	0x58024800
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	2b05      	cmp	r3, #5
 8006f62:	d10c      	bne.n	8006f7e <HAL_RCC_OscConfig+0x4ce>
 8006f64:	4b83      	ldr	r3, [pc, #524]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8006f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f68:	4a82      	ldr	r2, [pc, #520]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8006f6a:	f043 0304 	orr.w	r3, r3, #4
 8006f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f70:	4b80      	ldr	r3, [pc, #512]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8006f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f74:	4a7f      	ldr	r2, [pc, #508]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8006f76:	f043 0301 	orr.w	r3, r3, #1
 8006f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f7c:	e00b      	b.n	8006f96 <HAL_RCC_OscConfig+0x4e6>
 8006f7e:	4b7d      	ldr	r3, [pc, #500]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8006f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f82:	4a7c      	ldr	r2, [pc, #496]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8006f84:	f023 0301 	bic.w	r3, r3, #1
 8006f88:	6713      	str	r3, [r2, #112]	; 0x70
 8006f8a:	4b7a      	ldr	r3, [pc, #488]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8006f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8e:	4a79      	ldr	r2, [pc, #484]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8006f90:	f023 0304 	bic.w	r3, r3, #4
 8006f94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d015      	beq.n	8006fca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f9e:	f7fa ff13 	bl	8001dc8 <HAL_GetTick>
 8006fa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fa4:	e00a      	b.n	8006fbc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fa6:	f7fa ff0f 	bl	8001dc8 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e14b      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fbc:	4b6d      	ldr	r3, [pc, #436]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8006fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0ee      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x4f6>
 8006fc8:	e014      	b.n	8006ff4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fca:	f7fa fefd 	bl	8001dc8 <HAL_GetTick>
 8006fce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006fd0:	e00a      	b.n	8006fe8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fd2:	f7fa fef9 	bl	8001dc8 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d901      	bls.n	8006fe8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e135      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006fe8:	4b62      	ldr	r3, [pc, #392]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8006fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1ee      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 812a 	beq.w	8007252 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006ffe:	4b5d      	ldr	r3, [pc, #372]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007006:	2b18      	cmp	r3, #24
 8007008:	f000 80ba 	beq.w	8007180 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	2b02      	cmp	r3, #2
 8007012:	f040 8095 	bne.w	8007140 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007016:	4b57      	ldr	r3, [pc, #348]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a56      	ldr	r2, [pc, #344]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 800701c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007022:	f7fa fed1 	bl	8001dc8 <HAL_GetTick>
 8007026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007028:	e008      	b.n	800703c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800702a:	f7fa fecd 	bl	8001dc8 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d901      	bls.n	800703c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e10b      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800703c:	4b4d      	ldr	r3, [pc, #308]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1f0      	bne.n	800702a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007048:	4b4a      	ldr	r3, [pc, #296]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 800704a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800704c:	4b4a      	ldr	r3, [pc, #296]	; (8007178 <HAL_RCC_OscConfig+0x6c8>)
 800704e:	4013      	ands	r3, r2
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007058:	0112      	lsls	r2, r2, #4
 800705a:	430a      	orrs	r2, r1
 800705c:	4945      	ldr	r1, [pc, #276]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 800705e:	4313      	orrs	r3, r2
 8007060:	628b      	str	r3, [r1, #40]	; 0x28
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	3b01      	subs	r3, #1
 8007068:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007070:	3b01      	subs	r3, #1
 8007072:	025b      	lsls	r3, r3, #9
 8007074:	b29b      	uxth	r3, r3
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707c:	3b01      	subs	r3, #1
 800707e:	041b      	lsls	r3, r3, #16
 8007080:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708a:	3b01      	subs	r3, #1
 800708c:	061b      	lsls	r3, r3, #24
 800708e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007092:	4938      	ldr	r1, [pc, #224]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8007094:	4313      	orrs	r3, r2
 8007096:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007098:	4b36      	ldr	r3, [pc, #216]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	4a35      	ldr	r2, [pc, #212]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 800709e:	f023 0301 	bic.w	r3, r3, #1
 80070a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070a4:	4b33      	ldr	r3, [pc, #204]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 80070a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070a8:	4b34      	ldr	r3, [pc, #208]	; (800717c <HAL_RCC_OscConfig+0x6cc>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80070b0:	00d2      	lsls	r2, r2, #3
 80070b2:	4930      	ldr	r1, [pc, #192]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80070b8:	4b2e      	ldr	r3, [pc, #184]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	f023 020c 	bic.w	r2, r3, #12
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	492b      	ldr	r1, [pc, #172]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80070ca:	4b2a      	ldr	r3, [pc, #168]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	f023 0202 	bic.w	r2, r3, #2
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d6:	4927      	ldr	r1, [pc, #156]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80070dc:	4b25      	ldr	r3, [pc, #148]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	4a24      	ldr	r2, [pc, #144]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 80070e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e8:	4b22      	ldr	r3, [pc, #136]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 80070ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ec:	4a21      	ldr	r2, [pc, #132]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 80070ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80070f4:	4b1f      	ldr	r3, [pc, #124]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	4a1e      	ldr	r2, [pc, #120]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 80070fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007100:	4b1c      	ldr	r3, [pc, #112]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	4a1b      	ldr	r2, [pc, #108]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800710c:	4b19      	ldr	r3, [pc, #100]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a18      	ldr	r2, [pc, #96]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8007112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007118:	f7fa fe56 	bl	8001dc8 <HAL_GetTick>
 800711c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007120:	f7fa fe52 	bl	8001dc8 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e090      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007132:	4b10      	ldr	r3, [pc, #64]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0f0      	beq.n	8007120 <HAL_RCC_OscConfig+0x670>
 800713e:	e088      	b.n	8007252 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007140:	4b0c      	ldr	r3, [pc, #48]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a0b      	ldr	r2, [pc, #44]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8007146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800714a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714c:	f7fa fe3c 	bl	8001dc8 <HAL_GetTick>
 8007150:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007152:	e008      	b.n	8007166 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007154:	f7fa fe38 	bl	8001dc8 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b02      	cmp	r3, #2
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e076      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007166:	4b03      	ldr	r3, [pc, #12]	; (8007174 <HAL_RCC_OscConfig+0x6c4>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f0      	bne.n	8007154 <HAL_RCC_OscConfig+0x6a4>
 8007172:	e06e      	b.n	8007252 <HAL_RCC_OscConfig+0x7a2>
 8007174:	58024400 	.word	0x58024400
 8007178:	fffffc0c 	.word	0xfffffc0c
 800717c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007180:	4b36      	ldr	r3, [pc, #216]	; (800725c <HAL_RCC_OscConfig+0x7ac>)
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007186:	4b35      	ldr	r3, [pc, #212]	; (800725c <HAL_RCC_OscConfig+0x7ac>)
 8007188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	2b01      	cmp	r3, #1
 8007192:	d031      	beq.n	80071f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f003 0203 	and.w	r2, r3, #3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800719e:	429a      	cmp	r2, r3
 80071a0:	d12a      	bne.n	80071f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	091b      	lsrs	r3, r3, #4
 80071a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d122      	bne.n	80071f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071be:	429a      	cmp	r2, r3
 80071c0:	d11a      	bne.n	80071f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	0a5b      	lsrs	r3, r3, #9
 80071c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d111      	bne.n	80071f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	0c1b      	lsrs	r3, r3, #16
 80071d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d108      	bne.n	80071f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	0e1b      	lsrs	r3, r3, #24
 80071ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d001      	beq.n	80071fc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e02b      	b.n	8007254 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80071fc:	4b17      	ldr	r3, [pc, #92]	; (800725c <HAL_RCC_OscConfig+0x7ac>)
 80071fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007200:	08db      	lsrs	r3, r3, #3
 8007202:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007206:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	429a      	cmp	r2, r3
 8007210:	d01f      	beq.n	8007252 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007212:	4b12      	ldr	r3, [pc, #72]	; (800725c <HAL_RCC_OscConfig+0x7ac>)
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	4a11      	ldr	r2, [pc, #68]	; (800725c <HAL_RCC_OscConfig+0x7ac>)
 8007218:	f023 0301 	bic.w	r3, r3, #1
 800721c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800721e:	f7fa fdd3 	bl	8001dc8 <HAL_GetTick>
 8007222:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007224:	bf00      	nop
 8007226:	f7fa fdcf 	bl	8001dc8 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	4293      	cmp	r3, r2
 8007230:	d0f9      	beq.n	8007226 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007232:	4b0a      	ldr	r3, [pc, #40]	; (800725c <HAL_RCC_OscConfig+0x7ac>)
 8007234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007236:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <HAL_RCC_OscConfig+0x7b0>)
 8007238:	4013      	ands	r3, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800723e:	00d2      	lsls	r2, r2, #3
 8007240:	4906      	ldr	r1, [pc, #24]	; (800725c <HAL_RCC_OscConfig+0x7ac>)
 8007242:	4313      	orrs	r3, r2
 8007244:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007246:	4b05      	ldr	r3, [pc, #20]	; (800725c <HAL_RCC_OscConfig+0x7ac>)
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	4a04      	ldr	r2, [pc, #16]	; (800725c <HAL_RCC_OscConfig+0x7ac>)
 800724c:	f043 0301 	orr.w	r3, r3, #1
 8007250:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3730      	adds	r7, #48	; 0x30
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	58024400 	.word	0x58024400
 8007260:	ffff0007 	.word	0xffff0007

08007264 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e19c      	b.n	80075b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007278:	4b8a      	ldr	r3, [pc, #552]	; (80074a4 <HAL_RCC_ClockConfig+0x240>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 030f 	and.w	r3, r3, #15
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	d910      	bls.n	80072a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007286:	4b87      	ldr	r3, [pc, #540]	; (80074a4 <HAL_RCC_ClockConfig+0x240>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f023 020f 	bic.w	r2, r3, #15
 800728e:	4985      	ldr	r1, [pc, #532]	; (80074a4 <HAL_RCC_ClockConfig+0x240>)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	4313      	orrs	r3, r2
 8007294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007296:	4b83      	ldr	r3, [pc, #524]	; (80074a4 <HAL_RCC_ClockConfig+0x240>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d001      	beq.n	80072a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e184      	b.n	80075b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d010      	beq.n	80072d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	4b7b      	ldr	r3, [pc, #492]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d908      	bls.n	80072d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072c4:	4b78      	ldr	r3, [pc, #480]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	4975      	ldr	r1, [pc, #468]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0308 	and.w	r3, r3, #8
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d010      	beq.n	8007304 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	695a      	ldr	r2, [r3, #20]
 80072e6:	4b70      	ldr	r3, [pc, #448]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d908      	bls.n	8007304 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072f2:	4b6d      	ldr	r3, [pc, #436]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	496a      	ldr	r1, [pc, #424]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 8007300:	4313      	orrs	r3, r2
 8007302:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0310 	and.w	r3, r3, #16
 800730c:	2b00      	cmp	r3, #0
 800730e:	d010      	beq.n	8007332 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	4b64      	ldr	r3, [pc, #400]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800731c:	429a      	cmp	r2, r3
 800731e:	d908      	bls.n	8007332 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007320:	4b61      	ldr	r3, [pc, #388]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	495e      	ldr	r1, [pc, #376]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 800732e:	4313      	orrs	r3, r2
 8007330:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0320 	and.w	r3, r3, #32
 800733a:	2b00      	cmp	r3, #0
 800733c:	d010      	beq.n	8007360 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69da      	ldr	r2, [r3, #28]
 8007342:	4b59      	ldr	r3, [pc, #356]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800734a:	429a      	cmp	r2, r3
 800734c:	d908      	bls.n	8007360 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800734e:	4b56      	ldr	r3, [pc, #344]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	4953      	ldr	r1, [pc, #332]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 800735c:	4313      	orrs	r3, r2
 800735e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d010      	beq.n	800738e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	4b4d      	ldr	r3, [pc, #308]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	f003 030f 	and.w	r3, r3, #15
 8007378:	429a      	cmp	r2, r3
 800737a:	d908      	bls.n	800738e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800737c:	4b4a      	ldr	r3, [pc, #296]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	f023 020f 	bic.w	r2, r3, #15
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	4947      	ldr	r1, [pc, #284]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 800738a:	4313      	orrs	r3, r2
 800738c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d055      	beq.n	8007446 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800739a:	4b43      	ldr	r3, [pc, #268]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	4940      	ldr	r1, [pc, #256]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d107      	bne.n	80073c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073b4:	4b3c      	ldr	r3, [pc, #240]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d121      	bne.n	8007404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e0f6      	b.n	80075b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d107      	bne.n	80073dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073cc:	4b36      	ldr	r3, [pc, #216]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d115      	bne.n	8007404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e0ea      	b.n	80075b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d107      	bne.n	80073f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073e4:	4b30      	ldr	r3, [pc, #192]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e0de      	b.n	80075b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073f4:	4b2c      	ldr	r3, [pc, #176]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e0d6      	b.n	80075b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007404:	4b28      	ldr	r3, [pc, #160]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f023 0207 	bic.w	r2, r3, #7
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	4925      	ldr	r1, [pc, #148]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 8007412:	4313      	orrs	r3, r2
 8007414:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007416:	f7fa fcd7 	bl	8001dc8 <HAL_GetTick>
 800741a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800741c:	e00a      	b.n	8007434 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800741e:	f7fa fcd3 	bl	8001dc8 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	f241 3288 	movw	r2, #5000	; 0x1388
 800742c:	4293      	cmp	r3, r2
 800742e:	d901      	bls.n	8007434 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e0be      	b.n	80075b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007434:	4b1c      	ldr	r3, [pc, #112]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	429a      	cmp	r2, r3
 8007444:	d1eb      	bne.n	800741e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d010      	beq.n	8007474 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	429a      	cmp	r2, r3
 8007460:	d208      	bcs.n	8007474 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007462:	4b11      	ldr	r3, [pc, #68]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	f023 020f 	bic.w	r2, r3, #15
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	490e      	ldr	r1, [pc, #56]	; (80074a8 <HAL_RCC_ClockConfig+0x244>)
 8007470:	4313      	orrs	r3, r2
 8007472:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007474:	4b0b      	ldr	r3, [pc, #44]	; (80074a4 <HAL_RCC_ClockConfig+0x240>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	429a      	cmp	r2, r3
 8007480:	d214      	bcs.n	80074ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007482:	4b08      	ldr	r3, [pc, #32]	; (80074a4 <HAL_RCC_ClockConfig+0x240>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f023 020f 	bic.w	r2, r3, #15
 800748a:	4906      	ldr	r1, [pc, #24]	; (80074a4 <HAL_RCC_ClockConfig+0x240>)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	4313      	orrs	r3, r2
 8007490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007492:	4b04      	ldr	r3, [pc, #16]	; (80074a4 <HAL_RCC_ClockConfig+0x240>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 030f 	and.w	r3, r3, #15
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	429a      	cmp	r2, r3
 800749e:	d005      	beq.n	80074ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e086      	b.n	80075b2 <HAL_RCC_ClockConfig+0x34e>
 80074a4:	52002000 	.word	0x52002000
 80074a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d010      	beq.n	80074da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	4b3f      	ldr	r3, [pc, #252]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d208      	bcs.n	80074da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074c8:	4b3c      	ldr	r3, [pc, #240]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	4939      	ldr	r1, [pc, #228]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d010      	beq.n	8007508 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	695a      	ldr	r2, [r3, #20]
 80074ea:	4b34      	ldr	r3, [pc, #208]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d208      	bcs.n	8007508 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074f6:	4b31      	ldr	r3, [pc, #196]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	492e      	ldr	r1, [pc, #184]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 8007504:	4313      	orrs	r3, r2
 8007506:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0310 	and.w	r3, r3, #16
 8007510:	2b00      	cmp	r3, #0
 8007512:	d010      	beq.n	8007536 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	4b28      	ldr	r3, [pc, #160]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007520:	429a      	cmp	r2, r3
 8007522:	d208      	bcs.n	8007536 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007524:	4b25      	ldr	r3, [pc, #148]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	4922      	ldr	r1, [pc, #136]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 8007532:	4313      	orrs	r3, r2
 8007534:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0320 	and.w	r3, r3, #32
 800753e:	2b00      	cmp	r3, #0
 8007540:	d010      	beq.n	8007564 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69da      	ldr	r2, [r3, #28]
 8007546:	4b1d      	ldr	r3, [pc, #116]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800754e:	429a      	cmp	r2, r3
 8007550:	d208      	bcs.n	8007564 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007552:	4b1a      	ldr	r3, [pc, #104]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	4917      	ldr	r1, [pc, #92]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 8007560:	4313      	orrs	r3, r2
 8007562:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007564:	f000 f834 	bl	80075d0 <HAL_RCC_GetSysClockFreq>
 8007568:	4602      	mov	r2, r0
 800756a:	4b14      	ldr	r3, [pc, #80]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	0a1b      	lsrs	r3, r3, #8
 8007570:	f003 030f 	and.w	r3, r3, #15
 8007574:	4912      	ldr	r1, [pc, #72]	; (80075c0 <HAL_RCC_ClockConfig+0x35c>)
 8007576:	5ccb      	ldrb	r3, [r1, r3]
 8007578:	f003 031f 	and.w	r3, r3, #31
 800757c:	fa22 f303 	lsr.w	r3, r2, r3
 8007580:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007582:	4b0e      	ldr	r3, [pc, #56]	; (80075bc <HAL_RCC_ClockConfig+0x358>)
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	4a0d      	ldr	r2, [pc, #52]	; (80075c0 <HAL_RCC_ClockConfig+0x35c>)
 800758c:	5cd3      	ldrb	r3, [r2, r3]
 800758e:	f003 031f 	and.w	r3, r3, #31
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	fa22 f303 	lsr.w	r3, r2, r3
 8007598:	4a0a      	ldr	r2, [pc, #40]	; (80075c4 <HAL_RCC_ClockConfig+0x360>)
 800759a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800759c:	4a0a      	ldr	r2, [pc, #40]	; (80075c8 <HAL_RCC_ClockConfig+0x364>)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80075a2:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <HAL_RCC_ClockConfig+0x368>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fa fbc4 	bl	8001d34 <HAL_InitTick>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	58024400 	.word	0x58024400
 80075c0:	08010e34 	.word	0x08010e34
 80075c4:	24000004 	.word	0x24000004
 80075c8:	24000000 	.word	0x24000000
 80075cc:	24000008 	.word	0x24000008

080075d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b089      	sub	sp, #36	; 0x24
 80075d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075d6:	4bb3      	ldr	r3, [pc, #716]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075de:	2b18      	cmp	r3, #24
 80075e0:	f200 8155 	bhi.w	800788e <HAL_RCC_GetSysClockFreq+0x2be>
 80075e4:	a201      	add	r2, pc, #4	; (adr r2, 80075ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80075e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ea:	bf00      	nop
 80075ec:	08007651 	.word	0x08007651
 80075f0:	0800788f 	.word	0x0800788f
 80075f4:	0800788f 	.word	0x0800788f
 80075f8:	0800788f 	.word	0x0800788f
 80075fc:	0800788f 	.word	0x0800788f
 8007600:	0800788f 	.word	0x0800788f
 8007604:	0800788f 	.word	0x0800788f
 8007608:	0800788f 	.word	0x0800788f
 800760c:	08007677 	.word	0x08007677
 8007610:	0800788f 	.word	0x0800788f
 8007614:	0800788f 	.word	0x0800788f
 8007618:	0800788f 	.word	0x0800788f
 800761c:	0800788f 	.word	0x0800788f
 8007620:	0800788f 	.word	0x0800788f
 8007624:	0800788f 	.word	0x0800788f
 8007628:	0800788f 	.word	0x0800788f
 800762c:	0800767d 	.word	0x0800767d
 8007630:	0800788f 	.word	0x0800788f
 8007634:	0800788f 	.word	0x0800788f
 8007638:	0800788f 	.word	0x0800788f
 800763c:	0800788f 	.word	0x0800788f
 8007640:	0800788f 	.word	0x0800788f
 8007644:	0800788f 	.word	0x0800788f
 8007648:	0800788f 	.word	0x0800788f
 800764c:	08007683 	.word	0x08007683
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007650:	4b94      	ldr	r3, [pc, #592]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0320 	and.w	r3, r3, #32
 8007658:	2b00      	cmp	r3, #0
 800765a:	d009      	beq.n	8007670 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800765c:	4b91      	ldr	r3, [pc, #580]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	08db      	lsrs	r3, r3, #3
 8007662:	f003 0303 	and.w	r3, r3, #3
 8007666:	4a90      	ldr	r2, [pc, #576]	; (80078a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007668:	fa22 f303 	lsr.w	r3, r2, r3
 800766c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800766e:	e111      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007670:	4b8d      	ldr	r3, [pc, #564]	; (80078a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007672:	61bb      	str	r3, [r7, #24]
      break;
 8007674:	e10e      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007676:	4b8d      	ldr	r3, [pc, #564]	; (80078ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007678:	61bb      	str	r3, [r7, #24]
      break;
 800767a:	e10b      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800767c:	4b8c      	ldr	r3, [pc, #560]	; (80078b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800767e:	61bb      	str	r3, [r7, #24]
      break;
 8007680:	e108      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007682:	4b88      	ldr	r3, [pc, #544]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007686:	f003 0303 	and.w	r3, r3, #3
 800768a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800768c:	4b85      	ldr	r3, [pc, #532]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800768e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007690:	091b      	lsrs	r3, r3, #4
 8007692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007696:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007698:	4b82      	ldr	r3, [pc, #520]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80076a2:	4b80      	ldr	r3, [pc, #512]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a6:	08db      	lsrs	r3, r3, #3
 80076a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	fb02 f303 	mul.w	r3, r2, r3
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 80e1 	beq.w	8007888 <HAL_RCC_GetSysClockFreq+0x2b8>
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	f000 8083 	beq.w	80077d4 <HAL_RCC_GetSysClockFreq+0x204>
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	f200 80a1 	bhi.w	8007818 <HAL_RCC_GetSysClockFreq+0x248>
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <HAL_RCC_GetSysClockFreq+0x114>
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d056      	beq.n	8007790 <HAL_RCC_GetSysClockFreq+0x1c0>
 80076e2:	e099      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076e4:	4b6f      	ldr	r3, [pc, #444]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0320 	and.w	r3, r3, #32
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d02d      	beq.n	800774c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076f0:	4b6c      	ldr	r3, [pc, #432]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	08db      	lsrs	r3, r3, #3
 80076f6:	f003 0303 	and.w	r3, r3, #3
 80076fa:	4a6b      	ldr	r2, [pc, #428]	; (80078a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007700:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	ee07 3a90 	vmov	s15, r3
 8007708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771a:	4b62      	ldr	r3, [pc, #392]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772a:	ed97 6a02 	vldr	s12, [r7, #8]
 800772e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80078b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800773e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007746:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800774a:	e087      	b.n	800785c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	eddf 6a58 	vldr	s13, [pc, #352]	; 80078b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800775a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775e:	4b51      	ldr	r3, [pc, #324]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007772:	eddf 5a50 	vldr	s11, [pc, #320]	; 80078b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800778e:	e065      	b.n	800785c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80078bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800779e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a2:	4b40      	ldr	r3, [pc, #256]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80077b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80078b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077d2:	e043      	b.n	800785c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80078c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80077e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e6:	4b2f      	ldr	r3, [pc, #188]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80078b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800780a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007812:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007816:	e021      	b.n	800785c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007822:	eddf 6a26 	vldr	s13, [pc, #152]	; 80078bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8007826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800782a:	4b1e      	ldr	r3, [pc, #120]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800782c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783a:	ed97 6a02 	vldr	s12, [r7, #8]
 800783e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80078b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800784a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800784e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800785a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800785c:	4b11      	ldr	r3, [pc, #68]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	0a5b      	lsrs	r3, r3, #9
 8007862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007866:	3301      	adds	r3, #1
 8007868:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	ee07 3a90 	vmov	s15, r3
 8007870:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007874:	edd7 6a07 	vldr	s13, [r7, #28]
 8007878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800787c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007880:	ee17 3a90 	vmov	r3, s15
 8007884:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007886:	e005      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	61bb      	str	r3, [r7, #24]
      break;
 800788c:	e002      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800788e:	4b07      	ldr	r3, [pc, #28]	; (80078ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007890:	61bb      	str	r3, [r7, #24]
      break;
 8007892:	bf00      	nop
  }

  return sysclockfreq;
 8007894:	69bb      	ldr	r3, [r7, #24]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3724      	adds	r7, #36	; 0x24
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	58024400 	.word	0x58024400
 80078a8:	03d09000 	.word	0x03d09000
 80078ac:	003d0900 	.word	0x003d0900
 80078b0:	017d7840 	.word	0x017d7840
 80078b4:	46000000 	.word	0x46000000
 80078b8:	4c742400 	.word	0x4c742400
 80078bc:	4a742400 	.word	0x4a742400
 80078c0:	4bbebc20 	.word	0x4bbebc20

080078c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078ca:	f7ff fe81 	bl	80075d0 <HAL_RCC_GetSysClockFreq>
 80078ce:	4602      	mov	r2, r0
 80078d0:	4b10      	ldr	r3, [pc, #64]	; (8007914 <HAL_RCC_GetHCLKFreq+0x50>)
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	0a1b      	lsrs	r3, r3, #8
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	490f      	ldr	r1, [pc, #60]	; (8007918 <HAL_RCC_GetHCLKFreq+0x54>)
 80078dc:	5ccb      	ldrb	r3, [r1, r3]
 80078de:	f003 031f 	and.w	r3, r3, #31
 80078e2:	fa22 f303 	lsr.w	r3, r2, r3
 80078e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078e8:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <HAL_RCC_GetHCLKFreq+0x50>)
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	f003 030f 	and.w	r3, r3, #15
 80078f0:	4a09      	ldr	r2, [pc, #36]	; (8007918 <HAL_RCC_GetHCLKFreq+0x54>)
 80078f2:	5cd3      	ldrb	r3, [r2, r3]
 80078f4:	f003 031f 	and.w	r3, r3, #31
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	fa22 f303 	lsr.w	r3, r2, r3
 80078fe:	4a07      	ldr	r2, [pc, #28]	; (800791c <HAL_RCC_GetHCLKFreq+0x58>)
 8007900:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007902:	4a07      	ldr	r2, [pc, #28]	; (8007920 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007908:	4b04      	ldr	r3, [pc, #16]	; (800791c <HAL_RCC_GetHCLKFreq+0x58>)
 800790a:	681b      	ldr	r3, [r3, #0]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	58024400 	.word	0x58024400
 8007918:	08010e34 	.word	0x08010e34
 800791c:	24000004 	.word	0x24000004
 8007920:	24000000 	.word	0x24000000

08007924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007928:	f7ff ffcc 	bl	80078c4 <HAL_RCC_GetHCLKFreq>
 800792c:	4602      	mov	r2, r0
 800792e:	4b06      	ldr	r3, [pc, #24]	; (8007948 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	091b      	lsrs	r3, r3, #4
 8007934:	f003 0307 	and.w	r3, r3, #7
 8007938:	4904      	ldr	r1, [pc, #16]	; (800794c <HAL_RCC_GetPCLK1Freq+0x28>)
 800793a:	5ccb      	ldrb	r3, [r1, r3]
 800793c:	f003 031f 	and.w	r3, r3, #31
 8007940:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007944:	4618      	mov	r0, r3
 8007946:	bd80      	pop	{r7, pc}
 8007948:	58024400 	.word	0x58024400
 800794c:	08010e34 	.word	0x08010e34

08007950 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007954:	b0c6      	sub	sp, #280	; 0x118
 8007956:	af00      	add	r7, sp, #0
 8007958:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800795c:	2300      	movs	r3, #0
 800795e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007962:	2300      	movs	r3, #0
 8007964:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007974:	2500      	movs	r5, #0
 8007976:	ea54 0305 	orrs.w	r3, r4, r5
 800797a:	d049      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007982:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007986:	d02f      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007988:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800798c:	d828      	bhi.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800798e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007992:	d01a      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007998:	d822      	bhi.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800799e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079a2:	d007      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80079a4:	e01c      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079a6:	4bab      	ldr	r3, [pc, #684]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079aa:	4aaa      	ldr	r2, [pc, #680]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079b2:	e01a      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b8:	3308      	adds	r3, #8
 80079ba:	2102      	movs	r1, #2
 80079bc:	4618      	mov	r0, r3
 80079be:	f002 fa49 	bl	8009e54 <RCCEx_PLL2_Config>
 80079c2:	4603      	mov	r3, r0
 80079c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079c8:	e00f      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ce:	3328      	adds	r3, #40	; 0x28
 80079d0:	2102      	movs	r1, #2
 80079d2:	4618      	mov	r0, r3
 80079d4:	f002 faf0 	bl	8009fb8 <RCCEx_PLL3_Config>
 80079d8:	4603      	mov	r3, r0
 80079da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079de:	e004      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80079e6:	e000      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80079e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80079f2:	4b98      	ldr	r3, [pc, #608]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80079fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a00:	4a94      	ldr	r2, [pc, #592]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a02:	430b      	orrs	r3, r1
 8007a04:	6513      	str	r3, [r2, #80]	; 0x50
 8007a06:	e003      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007a1c:	f04f 0900 	mov.w	r9, #0
 8007a20:	ea58 0309 	orrs.w	r3, r8, r9
 8007a24:	d047      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d82a      	bhi.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007a30:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a36:	bf00      	nop
 8007a38:	08007a4d 	.word	0x08007a4d
 8007a3c:	08007a5b 	.word	0x08007a5b
 8007a40:	08007a71 	.word	0x08007a71
 8007a44:	08007a8f 	.word	0x08007a8f
 8007a48:	08007a8f 	.word	0x08007a8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a4c:	4b81      	ldr	r3, [pc, #516]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	4a80      	ldr	r2, [pc, #512]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a58:	e01a      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5e:	3308      	adds	r3, #8
 8007a60:	2100      	movs	r1, #0
 8007a62:	4618      	mov	r0, r3
 8007a64:	f002 f9f6 	bl	8009e54 <RCCEx_PLL2_Config>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a6e:	e00f      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a74:	3328      	adds	r3, #40	; 0x28
 8007a76:	2100      	movs	r1, #0
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f002 fa9d 	bl	8009fb8 <RCCEx_PLL3_Config>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a84:	e004      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007a8c:	e000      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a98:	4b6e      	ldr	r3, [pc, #440]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a9c:	f023 0107 	bic.w	r1, r3, #7
 8007aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa6:	4a6b      	ldr	r2, [pc, #428]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	6513      	str	r3, [r2, #80]	; 0x50
 8007aac:	e003      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ab2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8007ac2:	f04f 0b00 	mov.w	fp, #0
 8007ac6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007aca:	d05b      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ad4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007ad8:	d03b      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007ada:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007ade:	d834      	bhi.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007ae0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ae4:	d037      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007aea:	d82e      	bhi.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007aec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007af0:	d033      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007af2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007af6:	d828      	bhi.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007afc:	d01a      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b02:	d822      	bhi.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007b08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b0c:	d007      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007b0e:	e01c      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b10:	4b50      	ldr	r3, [pc, #320]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	4a4f      	ldr	r2, [pc, #316]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b1c:	e01e      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b22:	3308      	adds	r3, #8
 8007b24:	2100      	movs	r1, #0
 8007b26:	4618      	mov	r0, r3
 8007b28:	f002 f994 	bl	8009e54 <RCCEx_PLL2_Config>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b32:	e013      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b38:	3328      	adds	r3, #40	; 0x28
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f002 fa3b 	bl	8009fb8 <RCCEx_PLL3_Config>
 8007b42:	4603      	mov	r3, r0
 8007b44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b48:	e008      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007b50:	e004      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007b52:	bf00      	nop
 8007b54:	e002      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007b56:	bf00      	nop
 8007b58:	e000      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10b      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b64:	4b3b      	ldr	r3, [pc, #236]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b68:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b74:	4a37      	ldr	r2, [pc, #220]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b76:	430b      	orrs	r3, r1
 8007b78:	6593      	str	r3, [r2, #88]	; 0x58
 8007b7a:	e003      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007b90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b94:	2300      	movs	r3, #0
 8007b96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	d05d      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007bac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007bb0:	d03b      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007bb2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007bb6:	d834      	bhi.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bbc:	d037      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bc2:	d82e      	bhi.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007bc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bc8:	d033      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007bca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bce:	d828      	bhi.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bd4:	d01a      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bda:	d822      	bhi.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007be4:	d007      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007be6:	e01c      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be8:	4b1a      	ldr	r3, [pc, #104]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	4a19      	ldr	r2, [pc, #100]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bf4:	e01e      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f002 f928 	bl	8009e54 <RCCEx_PLL2_Config>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c0a:	e013      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c10:	3328      	adds	r3, #40	; 0x28
 8007c12:	2100      	movs	r1, #0
 8007c14:	4618      	mov	r0, r3
 8007c16:	f002 f9cf 	bl	8009fb8 <RCCEx_PLL3_Config>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c20:	e008      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007c28:	e004      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007c2a:	bf00      	nop
 8007c2c:	e002      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007c2e:	bf00      	nop
 8007c30:	e000      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10d      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c3c:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c40:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c4c:	4a01      	ldr	r2, [pc, #4]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c4e:	430b      	orrs	r3, r1
 8007c50:	6593      	str	r3, [r2, #88]	; 0x58
 8007c52:	e005      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007c54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007c6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c70:	2300      	movs	r3, #0
 8007c72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c76:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	d03a      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c86:	2b30      	cmp	r3, #48	; 0x30
 8007c88:	d01f      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007c8a:	2b30      	cmp	r3, #48	; 0x30
 8007c8c:	d819      	bhi.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	d00c      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d815      	bhi.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d019      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007c9a:	2b10      	cmp	r3, #16
 8007c9c:	d111      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c9e:	4baa      	ldr	r3, [pc, #680]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca2:	4aa9      	ldr	r2, [pc, #676]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007caa:	e011      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	2102      	movs	r1, #2
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f002 f8cd 	bl	8009e54 <RCCEx_PLL2_Config>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007cc0:	e006      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007cc8:	e002      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007cca:	bf00      	nop
 8007ccc:	e000      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007cd8:	4b9b      	ldr	r3, [pc, #620]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cdc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce6:	4a98      	ldr	r2, [pc, #608]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cec:	e003      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007cf2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007d02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d06:	2300      	movs	r3, #0
 8007d08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007d10:	460b      	mov	r3, r1
 8007d12:	4313      	orrs	r3, r2
 8007d14:	d051      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d20:	d035      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d26:	d82e      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007d28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d2c:	d031      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007d2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d32:	d828      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d38:	d01a      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3e:	d822      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d48:	d007      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007d4a:	e01c      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d4c:	4b7e      	ldr	r3, [pc, #504]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	4a7d      	ldr	r2, [pc, #500]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d58:	e01c      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d5e:	3308      	adds	r3, #8
 8007d60:	2100      	movs	r1, #0
 8007d62:	4618      	mov	r0, r3
 8007d64:	f002 f876 	bl	8009e54 <RCCEx_PLL2_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d6e:	e011      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d74:	3328      	adds	r3, #40	; 0x28
 8007d76:	2100      	movs	r1, #0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f002 f91d 	bl	8009fb8 <RCCEx_PLL3_Config>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d84:	e006      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007d8c:	e002      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007d8e:	bf00      	nop
 8007d90:	e000      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10a      	bne.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d9c:	4b6a      	ldr	r3, [pc, #424]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007daa:	4a67      	ldr	r2, [pc, #412]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007dac:	430b      	orrs	r3, r1
 8007dae:	6513      	str	r3, [r2, #80]	; 0x50
 8007db0:	e003      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007db6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007dc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dd0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	d053      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007de4:	d033      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007de6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dea:	d82c      	bhi.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007df0:	d02f      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007df2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007df6:	d826      	bhi.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007df8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dfc:	d02b      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007dfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e02:	d820      	bhi.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007e04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e08:	d012      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007e0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e0e:	d81a      	bhi.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d022      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e18:	d115      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1e:	3308      	adds	r3, #8
 8007e20:	2101      	movs	r1, #1
 8007e22:	4618      	mov	r0, r3
 8007e24:	f002 f816 	bl	8009e54 <RCCEx_PLL2_Config>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e2e:	e015      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e34:	3328      	adds	r3, #40	; 0x28
 8007e36:	2101      	movs	r1, #1
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f002 f8bd 	bl	8009fb8 <RCCEx_PLL3_Config>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e44:	e00a      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007e4c:	e006      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007e4e:	bf00      	nop
 8007e50:	e004      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007e52:	bf00      	nop
 8007e54:	e002      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007e56:	bf00      	nop
 8007e58:	e000      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e64:	4b38      	ldr	r3, [pc, #224]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e72:	4a35      	ldr	r2, [pc, #212]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e74:	430b      	orrs	r3, r1
 8007e76:	6513      	str	r3, [r2, #80]	; 0x50
 8007e78:	e003      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e92:	2300      	movs	r3, #0
 8007e94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e98:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	d058      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ea6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eae:	d033      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eb4:	d82c      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eba:	d02f      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec0:	d826      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007ec2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ec6:	d02b      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007ec8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ecc:	d820      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ed2:	d012      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ed8:	d81a      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d022      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ee2:	d115      	bne.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee8:	3308      	adds	r3, #8
 8007eea:	2101      	movs	r1, #1
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 ffb1 	bl	8009e54 <RCCEx_PLL2_Config>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ef8:	e015      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007efe:	3328      	adds	r3, #40	; 0x28
 8007f00:	2101      	movs	r1, #1
 8007f02:	4618      	mov	r0, r3
 8007f04:	f002 f858 	bl	8009fb8 <RCCEx_PLL3_Config>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007f0e:	e00a      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007f16:	e006      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007f18:	bf00      	nop
 8007f1a:	e004      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007f1c:	bf00      	nop
 8007f1e:	e002      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007f20:	bf00      	nop
 8007f22:	e000      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10e      	bne.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007f2e:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f32:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f3e:	4a02      	ldr	r2, [pc, #8]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f40:	430b      	orrs	r3, r1
 8007f42:	6593      	str	r3, [r2, #88]	; 0x58
 8007f44:	e006      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007f46:	bf00      	nop
 8007f48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f64:	2300      	movs	r3, #0
 8007f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4313      	orrs	r3, r2
 8007f72:	d037      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f7e:	d00e      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f84:	d816      	bhi.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d018      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f8e:	d111      	bne.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f90:	4bc4      	ldr	r3, [pc, #784]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	4ac3      	ldr	r2, [pc, #780]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f9c:	e00f      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f001 ff54 	bl	8009e54 <RCCEx_PLL2_Config>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007fb2:	e004      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007fba:	e000      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10a      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007fc6:	4bb7      	ldr	r3, [pc, #732]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd4:	4ab3      	ldr	r2, [pc, #716]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fd6:	430b      	orrs	r3, r1
 8007fd8:	6513      	str	r3, [r2, #80]	; 0x50
 8007fda:	e003      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007fe0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ffa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007ffe:	460b      	mov	r3, r1
 8008000:	4313      	orrs	r3, r2
 8008002:	d039      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800800a:	2b03      	cmp	r3, #3
 800800c:	d81c      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008051 	.word	0x08008051
 8008018:	08008025 	.word	0x08008025
 800801c:	08008033 	.word	0x08008033
 8008020:	08008051 	.word	0x08008051
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008024:	4b9f      	ldr	r3, [pc, #636]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	4a9e      	ldr	r2, [pc, #632]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800802a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800802e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008030:	e00f      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008036:	3308      	adds	r3, #8
 8008038:	2102      	movs	r1, #2
 800803a:	4618      	mov	r0, r3
 800803c:	f001 ff0a 	bl	8009e54 <RCCEx_PLL2_Config>
 8008040:	4603      	mov	r3, r0
 8008042:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008046:	e004      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800804e:	e000      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008052:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800805a:	4b92      	ldr	r3, [pc, #584]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800805c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805e:	f023 0103 	bic.w	r1, r3, #3
 8008062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008068:	4a8e      	ldr	r2, [pc, #568]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800806a:	430b      	orrs	r3, r1
 800806c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800806e:	e003      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008070:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008074:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008084:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008088:	2300      	movs	r3, #0
 800808a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800808e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008092:	460b      	mov	r3, r1
 8008094:	4313      	orrs	r3, r2
 8008096:	f000 8099 	beq.w	80081cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800809a:	4b83      	ldr	r3, [pc, #524]	; (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a82      	ldr	r2, [pc, #520]	; (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80080a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080a6:	f7f9 fe8f 	bl	8001dc8 <HAL_GetTick>
 80080aa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080ae:	e00b      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080b0:	f7f9 fe8a 	bl	8001dc8 <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b64      	cmp	r3, #100	; 0x64
 80080be:	d903      	bls.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80080c6:	e005      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080c8:	4b77      	ldr	r3, [pc, #476]	; (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d0ed      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80080d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d173      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80080dc:	4b71      	ldr	r3, [pc, #452]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080e8:	4053      	eors	r3, r2
 80080ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d015      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080f2:	4b6c      	ldr	r3, [pc, #432]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080fe:	4b69      	ldr	r3, [pc, #420]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008102:	4a68      	ldr	r2, [pc, #416]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008108:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800810a:	4b66      	ldr	r3, [pc, #408]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800810c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810e:	4a65      	ldr	r2, [pc, #404]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008114:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008116:	4a63      	ldr	r2, [pc, #396]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800811c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800811e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812a:	d118      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800812c:	f7f9 fe4c 	bl	8001dc8 <HAL_GetTick>
 8008130:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008134:	e00d      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008136:	f7f9 fe47 	bl	8001dc8 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008140:	1ad2      	subs	r2, r2, r3
 8008142:	f241 3388 	movw	r3, #5000	; 0x1388
 8008146:	429a      	cmp	r2, r3
 8008148:	d903      	bls.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8008150:	e005      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008152:	4b54      	ldr	r3, [pc, #336]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0eb      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800815e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008162:	2b00      	cmp	r3, #0
 8008164:	d129      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800816a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800816e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008176:	d10e      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008178:	4b4a      	ldr	r3, [pc, #296]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008188:	091a      	lsrs	r2, r3, #4
 800818a:	4b48      	ldr	r3, [pc, #288]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800818c:	4013      	ands	r3, r2
 800818e:	4a45      	ldr	r2, [pc, #276]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008190:	430b      	orrs	r3, r1
 8008192:	6113      	str	r3, [r2, #16]
 8008194:	e005      	b.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008196:	4b43      	ldr	r3, [pc, #268]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	4a42      	ldr	r2, [pc, #264]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800819c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80081a0:	6113      	str	r3, [r2, #16]
 80081a2:	4b40      	ldr	r3, [pc, #256]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80081a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081b2:	4a3c      	ldr	r2, [pc, #240]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081b4:	430b      	orrs	r3, r1
 80081b6:	6713      	str	r3, [r2, #112]	; 0x70
 80081b8:	e008      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80081be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80081c2:	e003      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80081c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80081cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f002 0301 	and.w	r3, r2, #1
 80081d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081dc:	2300      	movs	r3, #0
 80081de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80081e6:	460b      	mov	r3, r1
 80081e8:	4313      	orrs	r3, r2
 80081ea:	f000 808f 	beq.w	800830c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80081ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081f4:	2b28      	cmp	r3, #40	; 0x28
 80081f6:	d871      	bhi.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80081f8:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80081fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fe:	bf00      	nop
 8008200:	080082e5 	.word	0x080082e5
 8008204:	080082dd 	.word	0x080082dd
 8008208:	080082dd 	.word	0x080082dd
 800820c:	080082dd 	.word	0x080082dd
 8008210:	080082dd 	.word	0x080082dd
 8008214:	080082dd 	.word	0x080082dd
 8008218:	080082dd 	.word	0x080082dd
 800821c:	080082dd 	.word	0x080082dd
 8008220:	080082b1 	.word	0x080082b1
 8008224:	080082dd 	.word	0x080082dd
 8008228:	080082dd 	.word	0x080082dd
 800822c:	080082dd 	.word	0x080082dd
 8008230:	080082dd 	.word	0x080082dd
 8008234:	080082dd 	.word	0x080082dd
 8008238:	080082dd 	.word	0x080082dd
 800823c:	080082dd 	.word	0x080082dd
 8008240:	080082c7 	.word	0x080082c7
 8008244:	080082dd 	.word	0x080082dd
 8008248:	080082dd 	.word	0x080082dd
 800824c:	080082dd 	.word	0x080082dd
 8008250:	080082dd 	.word	0x080082dd
 8008254:	080082dd 	.word	0x080082dd
 8008258:	080082dd 	.word	0x080082dd
 800825c:	080082dd 	.word	0x080082dd
 8008260:	080082e5 	.word	0x080082e5
 8008264:	080082dd 	.word	0x080082dd
 8008268:	080082dd 	.word	0x080082dd
 800826c:	080082dd 	.word	0x080082dd
 8008270:	080082dd 	.word	0x080082dd
 8008274:	080082dd 	.word	0x080082dd
 8008278:	080082dd 	.word	0x080082dd
 800827c:	080082dd 	.word	0x080082dd
 8008280:	080082e5 	.word	0x080082e5
 8008284:	080082dd 	.word	0x080082dd
 8008288:	080082dd 	.word	0x080082dd
 800828c:	080082dd 	.word	0x080082dd
 8008290:	080082dd 	.word	0x080082dd
 8008294:	080082dd 	.word	0x080082dd
 8008298:	080082dd 	.word	0x080082dd
 800829c:	080082dd 	.word	0x080082dd
 80082a0:	080082e5 	.word	0x080082e5
 80082a4:	58024400 	.word	0x58024400
 80082a8:	58024800 	.word	0x58024800
 80082ac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082b4:	3308      	adds	r3, #8
 80082b6:	2101      	movs	r1, #1
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 fdcb 	bl	8009e54 <RCCEx_PLL2_Config>
 80082be:	4603      	mov	r3, r0
 80082c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80082c4:	e00f      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ca:	3328      	adds	r3, #40	; 0x28
 80082cc:	2101      	movs	r1, #1
 80082ce:	4618      	mov	r0, r3
 80082d0:	f001 fe72 	bl	8009fb8 <RCCEx_PLL3_Config>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80082da:	e004      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80082e2:	e000      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80082e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80082ee:	4bbf      	ldr	r3, [pc, #764]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80082f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80082f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082fc:	4abb      	ldr	r2, [pc, #748]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80082fe:	430b      	orrs	r3, r1
 8008300:	6553      	str	r3, [r2, #84]	; 0x54
 8008302:	e003      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008304:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008308:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800830c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	f002 0302 	and.w	r3, r2, #2
 8008318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800831c:	2300      	movs	r3, #0
 800831e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008322:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008326:	460b      	mov	r3, r1
 8008328:	4313      	orrs	r3, r2
 800832a:	d041      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800832c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008332:	2b05      	cmp	r3, #5
 8008334:	d824      	bhi.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	08008389 	.word	0x08008389
 8008340:	08008355 	.word	0x08008355
 8008344:	0800836b 	.word	0x0800836b
 8008348:	08008389 	.word	0x08008389
 800834c:	08008389 	.word	0x08008389
 8008350:	08008389 	.word	0x08008389
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008358:	3308      	adds	r3, #8
 800835a:	2101      	movs	r1, #1
 800835c:	4618      	mov	r0, r3
 800835e:	f001 fd79 	bl	8009e54 <RCCEx_PLL2_Config>
 8008362:	4603      	mov	r3, r0
 8008364:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008368:	e00f      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800836a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800836e:	3328      	adds	r3, #40	; 0x28
 8008370:	2101      	movs	r1, #1
 8008372:	4618      	mov	r0, r3
 8008374:	f001 fe20 	bl	8009fb8 <RCCEx_PLL3_Config>
 8008378:	4603      	mov	r3, r0
 800837a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800837e:	e004      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008386:	e000      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800838a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10a      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008392:	4b96      	ldr	r3, [pc, #600]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008396:	f023 0107 	bic.w	r1, r3, #7
 800839a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800839e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083a0:	4a92      	ldr	r2, [pc, #584]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80083a2:	430b      	orrs	r3, r1
 80083a4:	6553      	str	r3, [r2, #84]	; 0x54
 80083a6:	e003      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80083ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	f002 0304 	and.w	r3, r2, #4
 80083bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80083c0:	2300      	movs	r3, #0
 80083c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80083ca:	460b      	mov	r3, r1
 80083cc:	4313      	orrs	r3, r2
 80083ce:	d044      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80083d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d8:	2b05      	cmp	r3, #5
 80083da:	d825      	bhi.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80083dc:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80083de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e2:	bf00      	nop
 80083e4:	08008431 	.word	0x08008431
 80083e8:	080083fd 	.word	0x080083fd
 80083ec:	08008413 	.word	0x08008413
 80083f0:	08008431 	.word	0x08008431
 80083f4:	08008431 	.word	0x08008431
 80083f8:	08008431 	.word	0x08008431
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008400:	3308      	adds	r3, #8
 8008402:	2101      	movs	r1, #1
 8008404:	4618      	mov	r0, r3
 8008406:	f001 fd25 	bl	8009e54 <RCCEx_PLL2_Config>
 800840a:	4603      	mov	r3, r0
 800840c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008410:	e00f      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008416:	3328      	adds	r3, #40	; 0x28
 8008418:	2101      	movs	r1, #1
 800841a:	4618      	mov	r0, r3
 800841c:	f001 fdcc 	bl	8009fb8 <RCCEx_PLL3_Config>
 8008420:	4603      	mov	r3, r0
 8008422:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008426:	e004      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800842e:	e000      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008432:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10b      	bne.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800843a:	4b6c      	ldr	r3, [pc, #432]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800843c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843e:	f023 0107 	bic.w	r1, r3, #7
 8008442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800844a:	4a68      	ldr	r2, [pc, #416]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800844c:	430b      	orrs	r3, r1
 800844e:	6593      	str	r3, [r2, #88]	; 0x58
 8008450:	e003      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008452:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008456:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800845a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008462:	f002 0320 	and.w	r3, r2, #32
 8008466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800846a:	2300      	movs	r3, #0
 800846c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008470:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008474:	460b      	mov	r3, r1
 8008476:	4313      	orrs	r3, r2
 8008478:	d055      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800847a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800847e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008486:	d033      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800848c:	d82c      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800848e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008492:	d02f      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008498:	d826      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800849a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800849e:	d02b      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80084a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084a4:	d820      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80084a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084aa:	d012      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80084ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084b0:	d81a      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d022      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80084b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ba:	d115      	bne.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c0:	3308      	adds	r3, #8
 80084c2:	2100      	movs	r1, #0
 80084c4:	4618      	mov	r0, r3
 80084c6:	f001 fcc5 	bl	8009e54 <RCCEx_PLL2_Config>
 80084ca:	4603      	mov	r3, r0
 80084cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80084d0:	e015      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084d6:	3328      	adds	r3, #40	; 0x28
 80084d8:	2102      	movs	r1, #2
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 fd6c 	bl	8009fb8 <RCCEx_PLL3_Config>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80084e6:	e00a      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80084ee:	e006      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80084f0:	bf00      	nop
 80084f2:	e004      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80084f4:	bf00      	nop
 80084f6:	e002      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80084f8:	bf00      	nop
 80084fa:	e000      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80084fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10b      	bne.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008506:	4b39      	ldr	r3, [pc, #228]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800850a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800850e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008516:	4a35      	ldr	r2, [pc, #212]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008518:	430b      	orrs	r3, r1
 800851a:	6553      	str	r3, [r2, #84]	; 0x54
 800851c:	e003      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008522:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008532:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008536:	2300      	movs	r3, #0
 8008538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800853c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008540:	460b      	mov	r3, r1
 8008542:	4313      	orrs	r3, r2
 8008544:	d058      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800854e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008552:	d033      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008554:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008558:	d82c      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800855a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800855e:	d02f      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008564:	d826      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008566:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800856a:	d02b      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800856c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008570:	d820      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008576:	d012      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800857c:	d81a      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d022      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008586:	d115      	bne.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800858c:	3308      	adds	r3, #8
 800858e:	2100      	movs	r1, #0
 8008590:	4618      	mov	r0, r3
 8008592:	f001 fc5f 	bl	8009e54 <RCCEx_PLL2_Config>
 8008596:	4603      	mov	r3, r0
 8008598:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800859c:	e015      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800859e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a2:	3328      	adds	r3, #40	; 0x28
 80085a4:	2102      	movs	r1, #2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 fd06 	bl	8009fb8 <RCCEx_PLL3_Config>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80085b2:	e00a      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80085ba:	e006      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80085bc:	bf00      	nop
 80085be:	e004      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80085c0:	bf00      	nop
 80085c2:	e002      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80085c4:	bf00      	nop
 80085c6:	e000      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80085c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10e      	bne.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80085d2:	4b06      	ldr	r3, [pc, #24]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80085d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80085da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085e2:	4a02      	ldr	r2, [pc, #8]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80085e4:	430b      	orrs	r3, r1
 80085e6:	6593      	str	r3, [r2, #88]	; 0x58
 80085e8:	e006      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80085ea:	bf00      	nop
 80085ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80085f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008608:	2300      	movs	r3, #0
 800860a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800860e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008612:	460b      	mov	r3, r1
 8008614:	4313      	orrs	r3, r2
 8008616:	d055      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800861c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008620:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008624:	d033      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008626:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800862a:	d82c      	bhi.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800862c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008630:	d02f      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008636:	d826      	bhi.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008638:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800863c:	d02b      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800863e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008642:	d820      	bhi.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008648:	d012      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800864a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800864e:	d81a      	bhi.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008650:	2b00      	cmp	r3, #0
 8008652:	d022      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008658:	d115      	bne.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800865a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800865e:	3308      	adds	r3, #8
 8008660:	2100      	movs	r1, #0
 8008662:	4618      	mov	r0, r3
 8008664:	f001 fbf6 	bl	8009e54 <RCCEx_PLL2_Config>
 8008668:	4603      	mov	r3, r0
 800866a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800866e:	e015      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008674:	3328      	adds	r3, #40	; 0x28
 8008676:	2102      	movs	r1, #2
 8008678:	4618      	mov	r0, r3
 800867a:	f001 fc9d 	bl	8009fb8 <RCCEx_PLL3_Config>
 800867e:	4603      	mov	r3, r0
 8008680:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008684:	e00a      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800868c:	e006      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800868e:	bf00      	nop
 8008690:	e004      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008692:	bf00      	nop
 8008694:	e002      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008696:	bf00      	nop
 8008698:	e000      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800869a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800869c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10b      	bne.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80086a4:	4ba0      	ldr	r3, [pc, #640]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80086a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80086ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086b4:	4a9c      	ldr	r2, [pc, #624]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80086b6:	430b      	orrs	r3, r1
 80086b8:	6593      	str	r3, [r2, #88]	; 0x58
 80086ba:	e003      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80086c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80086c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	f002 0308 	and.w	r3, r2, #8
 80086d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086d4:	2300      	movs	r3, #0
 80086d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80086da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80086de:	460b      	mov	r3, r1
 80086e0:	4313      	orrs	r3, r2
 80086e2:	d01e      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80086e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f0:	d10c      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f6:	3328      	adds	r3, #40	; 0x28
 80086f8:	2102      	movs	r1, #2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f001 fc5c 	bl	8009fb8 <RCCEx_PLL3_Config>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800870c:	4b86      	ldr	r3, [pc, #536]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800870e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008710:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800871c:	4a82      	ldr	r2, [pc, #520]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800871e:	430b      	orrs	r3, r1
 8008720:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	f002 0310 	and.w	r3, r2, #16
 800872e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008732:	2300      	movs	r3, #0
 8008734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008738:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800873c:	460b      	mov	r3, r1
 800873e:	4313      	orrs	r3, r2
 8008740:	d01e      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800874a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800874e:	d10c      	bne.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008754:	3328      	adds	r3, #40	; 0x28
 8008756:	2102      	movs	r1, #2
 8008758:	4618      	mov	r0, r3
 800875a:	f001 fc2d 	bl	8009fb8 <RCCEx_PLL3_Config>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800876a:	4b6f      	ldr	r3, [pc, #444]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800876c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800876e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800877a:	4a6b      	ldr	r2, [pc, #428]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800877c:	430b      	orrs	r3, r1
 800877e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800878c:	67bb      	str	r3, [r7, #120]	; 0x78
 800878e:	2300      	movs	r3, #0
 8008790:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008792:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008796:	460b      	mov	r3, r1
 8008798:	4313      	orrs	r3, r2
 800879a:	d03e      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800879c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80087a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087a8:	d022      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80087aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087ae:	d81b      	bhi.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d003      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80087b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087b8:	d00b      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80087ba:	e015      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c0:	3308      	adds	r3, #8
 80087c2:	2100      	movs	r1, #0
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 fb45 	bl	8009e54 <RCCEx_PLL2_Config>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80087d0:	e00f      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087d6:	3328      	adds	r3, #40	; 0x28
 80087d8:	2102      	movs	r1, #2
 80087da:	4618      	mov	r0, r3
 80087dc:	f001 fbec 	bl	8009fb8 <RCCEx_PLL3_Config>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80087e6:	e004      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80087ee:	e000      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80087f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10b      	bne.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087fa:	4b4b      	ldr	r3, [pc, #300]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008806:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800880a:	4a47      	ldr	r2, [pc, #284]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800880c:	430b      	orrs	r3, r1
 800880e:	6593      	str	r3, [r2, #88]	; 0x58
 8008810:	e003      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008812:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008816:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800881a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008826:	673b      	str	r3, [r7, #112]	; 0x70
 8008828:	2300      	movs	r3, #0
 800882a:	677b      	str	r3, [r7, #116]	; 0x74
 800882c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008830:	460b      	mov	r3, r1
 8008832:	4313      	orrs	r3, r2
 8008834:	d03b      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800883a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800883e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008842:	d01f      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008844:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008848:	d818      	bhi.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800884a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800884e:	d003      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008854:	d007      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008856:	e011      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008858:	4b33      	ldr	r3, [pc, #204]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885c:	4a32      	ldr	r2, [pc, #200]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800885e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008864:	e00f      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800886a:	3328      	adds	r3, #40	; 0x28
 800886c:	2101      	movs	r1, #1
 800886e:	4618      	mov	r0, r3
 8008870:	f001 fba2 	bl	8009fb8 <RCCEx_PLL3_Config>
 8008874:	4603      	mov	r3, r0
 8008876:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800887a:	e004      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008882:	e000      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008886:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10b      	bne.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800888e:	4b26      	ldr	r3, [pc, #152]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008892:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800889a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800889e:	4a22      	ldr	r2, [pc, #136]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80088a0:	430b      	orrs	r3, r1
 80088a2:	6553      	str	r3, [r2, #84]	; 0x54
 80088a4:	e003      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80088ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80088ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80088bc:	2300      	movs	r3, #0
 80088be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80088c4:	460b      	mov	r3, r1
 80088c6:	4313      	orrs	r3, r2
 80088c8:	d034      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80088ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d003      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80088d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d8:	d007      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80088da:	e011      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088dc:	4b12      	ldr	r3, [pc, #72]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	4a11      	ldr	r2, [pc, #68]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80088e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088e8:	e00e      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ee:	3308      	adds	r3, #8
 80088f0:	2102      	movs	r1, #2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 faae 	bl	8009e54 <RCCEx_PLL2_Config>
 80088f8:	4603      	mov	r3, r0
 80088fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088fe:	e003      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008908:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10d      	bne.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008910:	4b05      	ldr	r3, [pc, #20]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008914:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800891c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800891e:	4a02      	ldr	r2, [pc, #8]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008920:	430b      	orrs	r3, r1
 8008922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008924:	e006      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008926:	bf00      	nop
 8008928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008930:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008940:	663b      	str	r3, [r7, #96]	; 0x60
 8008942:	2300      	movs	r3, #0
 8008944:	667b      	str	r3, [r7, #100]	; 0x64
 8008946:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800894a:	460b      	mov	r3, r1
 800894c:	4313      	orrs	r3, r2
 800894e:	d00c      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008954:	3328      	adds	r3, #40	; 0x28
 8008956:	2102      	movs	r1, #2
 8008958:	4618      	mov	r0, r3
 800895a:	f001 fb2d 	bl	8009fb8 <RCCEx_PLL3_Config>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800896a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008976:	65bb      	str	r3, [r7, #88]	; 0x58
 8008978:	2300      	movs	r3, #0
 800897a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800897c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008980:	460b      	mov	r3, r1
 8008982:	4313      	orrs	r3, r2
 8008984:	d036      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800898a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800898c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008990:	d018      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008996:	d811      	bhi.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800899c:	d014      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800899e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089a2:	d80b      	bhi.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d011      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80089a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ac:	d106      	bne.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ae:	4bb7      	ldr	r3, [pc, #732]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b2:	4ab6      	ldr	r2, [pc, #728]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80089ba:	e008      	b.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80089c2:	e004      	b.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80089c4:	bf00      	nop
 80089c6:	e002      	b.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80089c8:	bf00      	nop
 80089ca:	e000      	b.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80089cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10a      	bne.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089d6:	4bad      	ldr	r3, [pc, #692]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80089de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089e4:	4aa9      	ldr	r2, [pc, #676]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80089e6:	430b      	orrs	r3, r1
 80089e8:	6553      	str	r3, [r2, #84]	; 0x54
 80089ea:	e003      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80089f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008a00:	653b      	str	r3, [r7, #80]	; 0x50
 8008a02:	2300      	movs	r3, #0
 8008a04:	657b      	str	r3, [r7, #84]	; 0x54
 8008a06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	d009      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a10:	4b9e      	ldr	r3, [pc, #632]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1e:	4a9b      	ldr	r2, [pc, #620]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a20:	430b      	orrs	r3, r1
 8008a22:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a32:	2300      	movs	r3, #0
 8008a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a36:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	d009      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a40:	4b92      	ldr	r3, [pc, #584]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a44:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a4e:	4a8f      	ldr	r2, [pc, #572]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a50:	430b      	orrs	r3, r1
 8008a52:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008a60:	643b      	str	r3, [r7, #64]	; 0x40
 8008a62:	2300      	movs	r3, #0
 8008a64:	647b      	str	r3, [r7, #68]	; 0x44
 8008a66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	d00e      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a70:	4b86      	ldr	r3, [pc, #536]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	4a85      	ldr	r2, [pc, #532]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a7a:	6113      	str	r3, [r2, #16]
 8008a7c:	4b83      	ldr	r3, [pc, #524]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a7e:	6919      	ldr	r1, [r3, #16]
 8008a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a88:	4a80      	ldr	r2, [pc, #512]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a8a:	430b      	orrs	r3, r1
 8008a8c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aa0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	d009      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008aaa:	4b78      	ldr	r3, [pc, #480]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab8:	4a74      	ldr	r2, [pc, #464]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008aba:	430b      	orrs	r3, r1
 8008abc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008aca:	633b      	str	r3, [r7, #48]	; 0x30
 8008acc:	2300      	movs	r3, #0
 8008ace:	637b      	str	r3, [r7, #52]	; 0x34
 8008ad0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	d00a      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ada:	4b6c      	ldr	r3, [pc, #432]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ade:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aea:	4a68      	ldr	r2, [pc, #416]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008aec:	430b      	orrs	r3, r1
 8008aee:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	2100      	movs	r1, #0
 8008afa:	62b9      	str	r1, [r7, #40]	; 0x28
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008b06:	460b      	mov	r3, r1
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	d011      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b10:	3308      	adds	r3, #8
 8008b12:	2100      	movs	r1, #0
 8008b14:	4618      	mov	r0, r3
 8008b16:	f001 f99d 	bl	8009e54 <RCCEx_PLL2_Config>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008b20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d003      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	2100      	movs	r1, #0
 8008b3a:	6239      	str	r1, [r7, #32]
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
 8008b42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008b46:	460b      	mov	r3, r1
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	d011      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b50:	3308      	adds	r3, #8
 8008b52:	2101      	movs	r1, #1
 8008b54:	4618      	mov	r0, r3
 8008b56:	f001 f97d 	bl	8009e54 <RCCEx_PLL2_Config>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008b60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	2100      	movs	r1, #0
 8008b7a:	61b9      	str	r1, [r7, #24]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	61fb      	str	r3, [r7, #28]
 8008b82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b86:	460b      	mov	r3, r1
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	d011      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b90:	3308      	adds	r3, #8
 8008b92:	2102      	movs	r1, #2
 8008b94:	4618      	mov	r0, r3
 8008b96:	f001 f95d 	bl	8009e54 <RCCEx_PLL2_Config>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d003      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	2100      	movs	r1, #0
 8008bba:	6139      	str	r1, [r7, #16]
 8008bbc:	f003 0308 	and.w	r3, r3, #8
 8008bc0:	617b      	str	r3, [r7, #20]
 8008bc2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	d011      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd0:	3328      	adds	r3, #40	; 0x28
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f001 f9ef 	bl	8009fb8 <RCCEx_PLL3_Config>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8008be0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	60b9      	str	r1, [r7, #8]
 8008bfc:	f003 0310 	and.w	r3, r3, #16
 8008c00:	60fb      	str	r3, [r7, #12]
 8008c02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008c06:	460b      	mov	r3, r1
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	d011      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c10:	3328      	adds	r3, #40	; 0x28
 8008c12:	2101      	movs	r1, #1
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 f9cf 	bl	8009fb8 <RCCEx_PLL3_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008c20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d003      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	2100      	movs	r1, #0
 8008c3a:	6039      	str	r1, [r7, #0]
 8008c3c:	f003 0320 	and.w	r3, r3, #32
 8008c40:	607b      	str	r3, [r7, #4]
 8008c42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008c46:	460b      	mov	r3, r1
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	d011      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c50:	3328      	adds	r3, #40	; 0x28
 8008c52:	2102      	movs	r1, #2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f001 f9af 	bl	8009fb8 <RCCEx_PLL3_Config>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008c60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8008c70:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e000      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8008c84:	46bd      	mov	sp, r7
 8008c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c8a:	bf00      	nop
 8008c8c:	58024400 	.word	0x58024400

08008c90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b090      	sub	sp, #64	; 0x40
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c9e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	f040 8094 	bne.w	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008ca8:	4b9b      	ldr	r3, [pc, #620]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	2b04      	cmp	r3, #4
 8008cb6:	f200 8087 	bhi.w	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008cba:	a201      	add	r2, pc, #4	; (adr r2, 8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc0:	08008cd5 	.word	0x08008cd5
 8008cc4:	08008cfd 	.word	0x08008cfd
 8008cc8:	08008d25 	.word	0x08008d25
 8008ccc:	08008dc1 	.word	0x08008dc1
 8008cd0:	08008d4d 	.word	0x08008d4d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cd4:	4b90      	ldr	r3, [pc, #576]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ce0:	d108      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 ff62 	bl	8009bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cf0:	f000 bc93 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cf8:	f000 bc8f 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cfc:	4b86      	ldr	r3, [pc, #536]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d08:	d108      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d0a:	f107 0318 	add.w	r3, r7, #24
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fca6 	bl	8009660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d18:	f000 bc7f 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d20:	f000 bc7b 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d24:	4b7c      	ldr	r3, [pc, #496]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d30:	d108      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d32:	f107 030c 	add.w	r3, r7, #12
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 fde6 	bl	8009908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d40:	f000 bc6b 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d48:	f000 bc67 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d4c:	4b72      	ldr	r3, [pc, #456]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d54:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d56:	4b70      	ldr	r3, [pc, #448]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d10c      	bne.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d109      	bne.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d68:	4b6b      	ldr	r3, [pc, #428]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	08db      	lsrs	r3, r3, #3
 8008d6e:	f003 0303 	and.w	r3, r3, #3
 8008d72:	4a6a      	ldr	r2, [pc, #424]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008d74:	fa22 f303 	lsr.w	r3, r2, r3
 8008d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d7a:	e01f      	b.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d7c:	4b66      	ldr	r3, [pc, #408]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d88:	d106      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d90:	d102      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d92:	4b63      	ldr	r3, [pc, #396]	; (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d96:	e011      	b.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d98:	4b5f      	ldr	r3, [pc, #380]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008da4:	d106      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dac:	d102      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dae:	4b5d      	ldr	r3, [pc, #372]	; (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008db2:	e003      	b.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008db8:	f000 bc2f 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008dbc:	f000 bc2d 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008dc0:	4b59      	ldr	r3, [pc, #356]	; (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dc4:	f000 bc29 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dcc:	f000 bc25 	b.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008dd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dd4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008dd8:	430b      	orrs	r3, r1
 8008dda:	f040 80a7 	bne.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008dde:	4b4e      	ldr	r3, [pc, #312]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008de6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dee:	d054      	beq.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008df6:	f200 808b 	bhi.w	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e00:	f000 8083 	beq.w	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e0a:	f200 8081 	bhi.w	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e14:	d02f      	beq.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e1c:	d878      	bhi.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d004      	beq.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e2a:	d012      	beq.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008e2c:	e070      	b.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e2e:	4b3a      	ldr	r3, [pc, #232]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e3a:	d107      	bne.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 feb5 	bl	8009bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e4a:	e3e6      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e50:	e3e3      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e52:	4b31      	ldr	r3, [pc, #196]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e5e:	d107      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e60:	f107 0318 	add.w	r3, r7, #24
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 fbfb 	bl	8009660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e6e:	e3d4      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e74:	e3d1      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e76:	4b28      	ldr	r3, [pc, #160]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e82:	d107      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e84:	f107 030c 	add.w	r3, r7, #12
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fd3d 	bl	8009908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e92:	e3c2      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e98:	e3bf      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e9a:	4b1f      	ldr	r3, [pc, #124]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ea2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ea4:	4b1c      	ldr	r3, [pc, #112]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d10c      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d109      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eb6:	4b18      	ldr	r3, [pc, #96]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	08db      	lsrs	r3, r3, #3
 8008ebc:	f003 0303 	and.w	r3, r3, #3
 8008ec0:	4a16      	ldr	r2, [pc, #88]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ec8:	e01e      	b.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008eca:	4b13      	ldr	r3, [pc, #76]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed6:	d106      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ede:	d102      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ee0:	4b0f      	ldr	r3, [pc, #60]	; (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ee4:	e010      	b.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ee6:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ef2:	d106      	bne.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008efa:	d102      	bne.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008efc:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f00:	e002      	b.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f06:	e388      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f08:	e387      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f0a:	4b07      	ldr	r3, [pc, #28]	; (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f0e:	e384      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f14:	e381      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f16:	bf00      	nop
 8008f18:	58024400 	.word	0x58024400
 8008f1c:	03d09000 	.word	0x03d09000
 8008f20:	003d0900 	.word	0x003d0900
 8008f24:	017d7840 	.word	0x017d7840
 8008f28:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f30:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008f34:	430b      	orrs	r3, r1
 8008f36:	f040 809c 	bne.w	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008f3a:	4b9e      	ldr	r3, [pc, #632]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008f42:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f4a:	d054      	beq.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f52:	f200 808b 	bhi.w	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f5c:	f000 8083 	beq.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f66:	f200 8081 	bhi.w	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f70:	d02f      	beq.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f78:	d878      	bhi.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d004      	beq.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f86:	d012      	beq.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008f88:	e070      	b.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f8a:	4b8a      	ldr	r3, [pc, #552]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f96:	d107      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 fe07 	bl	8009bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fa6:	e338      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fac:	e335      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fae:	4b81      	ldr	r3, [pc, #516]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fba:	d107      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fbc:	f107 0318 	add.w	r3, r7, #24
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 fb4d 	bl	8009660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fca:	e326      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fd0:	e323      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fd2:	4b78      	ldr	r3, [pc, #480]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fde:	d107      	bne.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fe0:	f107 030c 	add.w	r3, r7, #12
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 fc8f 	bl	8009908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fee:	e314      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ff4:	e311      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ff6:	4b6f      	ldr	r3, [pc, #444]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ffa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ffe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009000:	4b6c      	ldr	r3, [pc, #432]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b04      	cmp	r3, #4
 800900a:	d10c      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800900c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900e:	2b00      	cmp	r3, #0
 8009010:	d109      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009012:	4b68      	ldr	r3, [pc, #416]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	08db      	lsrs	r3, r3, #3
 8009018:	f003 0303 	and.w	r3, r3, #3
 800901c:	4a66      	ldr	r2, [pc, #408]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800901e:	fa22 f303 	lsr.w	r3, r2, r3
 8009022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009024:	e01e      	b.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009026:	4b63      	ldr	r3, [pc, #396]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800902e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009032:	d106      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800903a:	d102      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800903c:	4b5f      	ldr	r3, [pc, #380]	; (80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009040:	e010      	b.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009042:	4b5c      	ldr	r3, [pc, #368]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800904a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800904e:	d106      	bne.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8009050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009056:	d102      	bne.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009058:	4b59      	ldr	r3, [pc, #356]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800905a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800905c:	e002      	b.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009062:	e2da      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009064:	e2d9      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009066:	4b57      	ldr	r3, [pc, #348]	; (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800906a:	e2d6      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009070:	e2d3      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009076:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800907a:	430b      	orrs	r3, r1
 800907c:	f040 80a7 	bne.w	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009080:	4b4c      	ldr	r3, [pc, #304]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009084:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009088:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009090:	d055      	beq.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009098:	f200 8096 	bhi.w	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090a2:	f000 8084 	beq.w	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80090a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090ac:	f200 808c 	bhi.w	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80090b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090b6:	d030      	beq.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80090b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090be:	f200 8083 	bhi.w	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d004      	beq.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80090c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ce:	d012      	beq.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80090d0:	e07a      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090d2:	4b38      	ldr	r3, [pc, #224]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090de:	d107      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fd63 	bl	8009bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090ee:	e294      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090f4:	e291      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090f6:	4b2f      	ldr	r3, [pc, #188]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009102:	d107      	bne.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009104:	f107 0318 	add.w	r3, r7, #24
 8009108:	4618      	mov	r0, r3
 800910a:	f000 faa9 	bl	8009660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009112:	e282      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009114:	2300      	movs	r3, #0
 8009116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009118:	e27f      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800911a:	4b26      	ldr	r3, [pc, #152]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009126:	d107      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009128:	f107 030c 	add.w	r3, r7, #12
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fbeb 	bl	8009908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009136:	e270      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800913c:	e26d      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800913e:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009142:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009146:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009148:	4b1a      	ldr	r3, [pc, #104]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b04      	cmp	r3, #4
 8009152:	d10c      	bne.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009156:	2b00      	cmp	r3, #0
 8009158:	d109      	bne.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800915a:	4b16      	ldr	r3, [pc, #88]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	08db      	lsrs	r3, r3, #3
 8009160:	f003 0303 	and.w	r3, r3, #3
 8009164:	4a14      	ldr	r2, [pc, #80]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009166:	fa22 f303 	lsr.w	r3, r2, r3
 800916a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800916c:	e01e      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800916e:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800917a:	d106      	bne.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800917c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009182:	d102      	bne.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009184:	4b0d      	ldr	r3, [pc, #52]	; (80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009188:	e010      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800918a:	4b0a      	ldr	r3, [pc, #40]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009196:	d106      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800919e:	d102      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091a0:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091a4:	e002      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80091aa:	e236      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80091ac:	e235      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091ae:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80091b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091b2:	e232      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80091b4:	58024400 	.word	0x58024400
 80091b8:	03d09000 	.word	0x03d09000
 80091bc:	003d0900 	.word	0x003d0900
 80091c0:	017d7840 	.word	0x017d7840
 80091c4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091cc:	e225      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80091ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80091d6:	430b      	orrs	r3, r1
 80091d8:	f040 8085 	bne.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80091dc:	4b9c      	ldr	r3, [pc, #624]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80091de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80091e4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091ec:	d06b      	beq.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80091ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091f4:	d874      	bhi.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091fc:	d056      	beq.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009204:	d86c      	bhi.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800920c:	d03b      	beq.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800920e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009210:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009214:	d864      	bhi.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800921c:	d021      	beq.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800921e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009224:	d85c      	bhi.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009228:	2b00      	cmp	r3, #0
 800922a:	d004      	beq.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800922c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009232:	d004      	beq.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8009234:	e054      	b.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009236:	f7fe fb75 	bl	8007924 <HAL_RCC_GetPCLK1Freq>
 800923a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800923c:	e1ed      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800923e:	4b84      	ldr	r3, [pc, #528]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800924a:	d107      	bne.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800924c:	f107 0318 	add.w	r3, r7, #24
 8009250:	4618      	mov	r0, r3
 8009252:	f000 fa05 	bl	8009660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800925a:	e1de      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009260:	e1db      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009262:	4b7b      	ldr	r3, [pc, #492]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800926a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800926e:	d107      	bne.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009270:	f107 030c 	add.w	r3, r7, #12
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fb47 	bl	8009908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800927e:	e1cc      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009280:	2300      	movs	r3, #0
 8009282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009284:	e1c9      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009286:	4b72      	ldr	r3, [pc, #456]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0304 	and.w	r3, r3, #4
 800928e:	2b04      	cmp	r3, #4
 8009290:	d109      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009292:	4b6f      	ldr	r3, [pc, #444]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	08db      	lsrs	r3, r3, #3
 8009298:	f003 0303 	and.w	r3, r3, #3
 800929c:	4a6d      	ldr	r2, [pc, #436]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800929e:	fa22 f303 	lsr.w	r3, r2, r3
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092a4:	e1b9      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092aa:	e1b6      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80092ac:	4b68      	ldr	r3, [pc, #416]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b8:	d102      	bne.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80092ba:	4b67      	ldr	r3, [pc, #412]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80092bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092be:	e1ac      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092c0:	2300      	movs	r3, #0
 80092c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092c4:	e1a9      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80092c6:	4b62      	ldr	r3, [pc, #392]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092d2:	d102      	bne.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80092d4:	4b61      	ldr	r3, [pc, #388]	; (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80092d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092d8:	e19f      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092de:	e19c      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092e4:	e199      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80092e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ea:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80092ee:	430b      	orrs	r3, r1
 80092f0:	d173      	bne.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80092f2:	4b57      	ldr	r3, [pc, #348]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80092f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80092fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009302:	d02f      	beq.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800930a:	d863      	bhi.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800930c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930e:	2b00      	cmp	r3, #0
 8009310:	d004      	beq.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8009312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009318:	d012      	beq.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800931a:	e05b      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800931c:	4b4c      	ldr	r3, [pc, #304]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009328:	d107      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800932a:	f107 0318 	add.w	r3, r7, #24
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f996 	bl	8009660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009338:	e16f      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800933e:	e16c      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009340:	4b43      	ldr	r3, [pc, #268]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800934c:	d107      	bne.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800934e:	f107 030c 	add.w	r3, r7, #12
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fad8 	bl	8009908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800935c:	e15d      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009362:	e15a      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009364:	4b3a      	ldr	r3, [pc, #232]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800936c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800936e:	4b38      	ldr	r3, [pc, #224]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0304 	and.w	r3, r3, #4
 8009376:	2b04      	cmp	r3, #4
 8009378:	d10c      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800937a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937c:	2b00      	cmp	r3, #0
 800937e:	d109      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009380:	4b33      	ldr	r3, [pc, #204]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	08db      	lsrs	r3, r3, #3
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	4a32      	ldr	r2, [pc, #200]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800938c:	fa22 f303 	lsr.w	r3, r2, r3
 8009390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009392:	e01e      	b.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009394:	4b2e      	ldr	r3, [pc, #184]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800939c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093a0:	d106      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80093a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093a8:	d102      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093aa:	4b2b      	ldr	r3, [pc, #172]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ae:	e010      	b.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093b0:	4b27      	ldr	r3, [pc, #156]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093bc:	d106      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80093be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c4:	d102      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093c6:	4b25      	ldr	r3, [pc, #148]	; (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80093c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ca:	e002      	b.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80093d0:	e123      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80093d2:	e122      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093d8:	e11f      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80093da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093de:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80093e2:	430b      	orrs	r3, r1
 80093e4:	d13c      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80093e6:	4b1a      	ldr	r3, [pc, #104]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80093e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093ee:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d004      	beq.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80093f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093fc:	d012      	beq.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80093fe:	e023      	b.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009400:	4b13      	ldr	r3, [pc, #76]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800940c:	d107      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800940e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009412:	4618      	mov	r0, r3
 8009414:	f000 fbcc 	bl	8009bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800941c:	e0fd      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009422:	e0fa      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009424:	4b0a      	ldr	r3, [pc, #40]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800942c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009430:	d107      	bne.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009432:	f107 0318 	add.w	r3, r7, #24
 8009436:	4618      	mov	r0, r3
 8009438:	f000 f912 	bl	8009660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009440:	e0eb      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009446:	e0e8      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800944c:	e0e5      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800944e:	bf00      	nop
 8009450:	58024400 	.word	0x58024400
 8009454:	03d09000 	.word	0x03d09000
 8009458:	003d0900 	.word	0x003d0900
 800945c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009464:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009468:	430b      	orrs	r3, r1
 800946a:	f040 8085 	bne.w	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800946e:	4b6d      	ldr	r3, [pc, #436]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009472:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009476:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800947e:	d06b      	beq.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009486:	d874      	bhi.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800948e:	d056      	beq.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009496:	d86c      	bhi.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800949e:	d03b      	beq.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094a6:	d864      	bhi.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80094a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094ae:	d021      	beq.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80094b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094b6:	d85c      	bhi.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80094b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d004      	beq.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094c4:	d004      	beq.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80094c6:	e054      	b.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80094c8:	f000 f8b4 	bl	8009634 <HAL_RCCEx_GetD3PCLK1Freq>
 80094cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80094ce:	e0a4      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094d0:	4b54      	ldr	r3, [pc, #336]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094dc:	d107      	bne.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094de:	f107 0318 	add.w	r3, r7, #24
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 f8bc 	bl	8009660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ec:	e095      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094ee:	2300      	movs	r3, #0
 80094f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094f2:	e092      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094f4:	4b4b      	ldr	r3, [pc, #300]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009500:	d107      	bne.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009502:	f107 030c 	add.w	r3, r7, #12
 8009506:	4618      	mov	r0, r3
 8009508:	f000 f9fe 	bl	8009908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009510:	e083      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009516:	e080      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009518:	4b42      	ldr	r3, [pc, #264]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0304 	and.w	r3, r3, #4
 8009520:	2b04      	cmp	r3, #4
 8009522:	d109      	bne.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009524:	4b3f      	ldr	r3, [pc, #252]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	08db      	lsrs	r3, r3, #3
 800952a:	f003 0303 	and.w	r3, r3, #3
 800952e:	4a3e      	ldr	r2, [pc, #248]	; (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009530:	fa22 f303 	lsr.w	r3, r2, r3
 8009534:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009536:	e070      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800953c:	e06d      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800953e:	4b39      	ldr	r3, [pc, #228]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800954a:	d102      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800954c:	4b37      	ldr	r3, [pc, #220]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800954e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009550:	e063      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009556:	e060      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009558:	4b32      	ldr	r3, [pc, #200]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009564:	d102      	bne.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8009566:	4b32      	ldr	r3, [pc, #200]	; (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009568:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800956a:	e056      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800956c:	2300      	movs	r3, #0
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009570:	e053      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009576:	e050      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800957c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009580:	430b      	orrs	r3, r1
 8009582:	d148      	bne.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009584:	4b27      	ldr	r3, [pc, #156]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800958c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009594:	d02a      	beq.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800959c:	d838      	bhi.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80095a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095aa:	d00d      	beq.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80095ac:	e030      	b.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80095ae:	4b1d      	ldr	r3, [pc, #116]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095ba:	d102      	bne.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80095bc:	4b1c      	ldr	r3, [pc, #112]	; (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80095be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095c0:	e02b      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095c2:	2300      	movs	r3, #0
 80095c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095c6:	e028      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095c8:	4b16      	ldr	r3, [pc, #88]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095d4:	d107      	bne.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 fae8 	bl	8009bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095e4:	e019      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095ea:	e016      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095ec:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095f8:	d107      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095fa:	f107 0318 	add.w	r3, r7, #24
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f82e 	bl	8009660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009608:	e007      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800960e:	e004      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009614:	e001      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800961a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800961c:	4618      	mov	r0, r3
 800961e:	3740      	adds	r7, #64	; 0x40
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	58024400 	.word	0x58024400
 8009628:	03d09000 	.word	0x03d09000
 800962c:	003d0900 	.word	0x003d0900
 8009630:	017d7840 	.word	0x017d7840

08009634 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009638:	f7fe f944 	bl	80078c4 <HAL_RCC_GetHCLKFreq>
 800963c:	4602      	mov	r2, r0
 800963e:	4b06      	ldr	r3, [pc, #24]	; (8009658 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	091b      	lsrs	r3, r3, #4
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	4904      	ldr	r1, [pc, #16]	; (800965c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800964a:	5ccb      	ldrb	r3, [r1, r3]
 800964c:	f003 031f 	and.w	r3, r3, #31
 8009650:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009654:	4618      	mov	r0, r3
 8009656:	bd80      	pop	{r7, pc}
 8009658:	58024400 	.word	0x58024400
 800965c:	08010e34 	.word	0x08010e34

08009660 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009660:	b480      	push	{r7}
 8009662:	b089      	sub	sp, #36	; 0x24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009668:	4ba1      	ldr	r3, [pc, #644]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800966a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966c:	f003 0303 	and.w	r3, r3, #3
 8009670:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009672:	4b9f      	ldr	r3, [pc, #636]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009676:	0b1b      	lsrs	r3, r3, #12
 8009678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800967c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800967e:	4b9c      	ldr	r3, [pc, #624]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009682:	091b      	lsrs	r3, r3, #4
 8009684:	f003 0301 	and.w	r3, r3, #1
 8009688:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800968a:	4b99      	ldr	r3, [pc, #612]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800968c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800968e:	08db      	lsrs	r3, r3, #3
 8009690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	fb02 f303 	mul.w	r3, r2, r3
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 8111 	beq.w	80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	f000 8083 	beq.w	80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	f200 80a1 	bhi.w	8009800 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d003      	beq.n	80096cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d056      	beq.n	8009778 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80096ca:	e099      	b.n	8009800 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096cc:	4b88      	ldr	r3, [pc, #544]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0320 	and.w	r3, r3, #32
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d02d      	beq.n	8009734 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096d8:	4b85      	ldr	r3, [pc, #532]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	08db      	lsrs	r3, r3, #3
 80096de:	f003 0303 	and.w	r3, r3, #3
 80096e2:	4a84      	ldr	r2, [pc, #528]	; (80098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80096e4:	fa22 f303 	lsr.w	r3, r2, r3
 80096e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	ee07 3a90 	vmov	s15, r3
 80096f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009702:	4b7b      	ldr	r3, [pc, #492]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009712:	ed97 6a03 	vldr	s12, [r7, #12]
 8009716:	eddf 5a78 	vldr	s11, [pc, #480]	; 80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800971a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800971e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800972a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800972e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009732:	e087      	b.n	8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	ee07 3a90 	vmov	s15, r3
 800973a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009746:	4b6a      	ldr	r3, [pc, #424]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800974e:	ee07 3a90 	vmov	s15, r3
 8009752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009756:	ed97 6a03 	vldr	s12, [r7, #12]
 800975a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800975e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800976a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800976e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009776:	e065      	b.n	8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009782:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009900 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800978a:	4b59      	ldr	r3, [pc, #356]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800978c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009792:	ee07 3a90 	vmov	s15, r3
 8009796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800979a:	ed97 6a03 	vldr	s12, [r7, #12]
 800979e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097ba:	e043      	b.n	8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80097ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ce:	4b48      	ldr	r3, [pc, #288]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d6:	ee07 3a90 	vmov	s15, r3
 80097da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097de:	ed97 6a03 	vldr	s12, [r7, #12]
 80097e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097fe:	e021      	b.n	8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	ee07 3a90 	vmov	s15, r3
 8009806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009900 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800980e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009812:	4b37      	ldr	r3, [pc, #220]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800981a:	ee07 3a90 	vmov	s15, r3
 800981e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009822:	ed97 6a03 	vldr	s12, [r7, #12]
 8009826:	eddf 5a34 	vldr	s11, [pc, #208]	; 80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800982a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800982e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800983a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800983e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009842:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009844:	4b2a      	ldr	r3, [pc, #168]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009848:	0a5b      	lsrs	r3, r3, #9
 800984a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800984e:	ee07 3a90 	vmov	s15, r3
 8009852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800985a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800985e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800986a:	ee17 2a90 	vmov	r2, s15
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009872:	4b1f      	ldr	r3, [pc, #124]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009876:	0c1b      	lsrs	r3, r3, #16
 8009878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800987c:	ee07 3a90 	vmov	s15, r3
 8009880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009884:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009888:	ee37 7a87 	vadd.f32	s14, s15, s14
 800988c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009898:	ee17 2a90 	vmov	r2, s15
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80098a0:	4b13      	ldr	r3, [pc, #76]	; (80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a4:	0e1b      	lsrs	r3, r3, #24
 80098a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098aa:	ee07 3a90 	vmov	s15, r3
 80098ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80098be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098c6:	ee17 2a90 	vmov	r2, s15
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80098ce:	e008      	b.n	80098e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	609a      	str	r2, [r3, #8]
}
 80098e2:	bf00      	nop
 80098e4:	3724      	adds	r7, #36	; 0x24
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	58024400 	.word	0x58024400
 80098f4:	03d09000 	.word	0x03d09000
 80098f8:	46000000 	.word	0x46000000
 80098fc:	4c742400 	.word	0x4c742400
 8009900:	4a742400 	.word	0x4a742400
 8009904:	4bbebc20 	.word	0x4bbebc20

08009908 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009908:	b480      	push	{r7}
 800990a:	b089      	sub	sp, #36	; 0x24
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009910:	4ba1      	ldr	r3, [pc, #644]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009914:	f003 0303 	and.w	r3, r3, #3
 8009918:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800991a:	4b9f      	ldr	r3, [pc, #636]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800991c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991e:	0d1b      	lsrs	r3, r3, #20
 8009920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009924:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009926:	4b9c      	ldr	r3, [pc, #624]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992a:	0a1b      	lsrs	r3, r3, #8
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009932:	4b99      	ldr	r3, [pc, #612]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009936:	08db      	lsrs	r3, r3, #3
 8009938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	fb02 f303 	mul.w	r3, r2, r3
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 8111 	beq.w	8009b78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	2b02      	cmp	r3, #2
 800995a:	f000 8083 	beq.w	8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2b02      	cmp	r3, #2
 8009962:	f200 80a1 	bhi.w	8009aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d056      	beq.n	8009a20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009972:	e099      	b.n	8009aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009974:	4b88      	ldr	r3, [pc, #544]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0320 	and.w	r3, r3, #32
 800997c:	2b00      	cmp	r3, #0
 800997e:	d02d      	beq.n	80099dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009980:	4b85      	ldr	r3, [pc, #532]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	08db      	lsrs	r3, r3, #3
 8009986:	f003 0303 	and.w	r3, r3, #3
 800998a:	4a84      	ldr	r2, [pc, #528]	; (8009b9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800998c:	fa22 f303 	lsr.w	r3, r2, r3
 8009990:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	ee07 3a90 	vmov	s15, r3
 8009998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099aa:	4b7b      	ldr	r3, [pc, #492]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80099be:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80099da:	e087      	b.n	8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80099ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ee:	4b6a      	ldr	r3, [pc, #424]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f6:	ee07 3a90 	vmov	s15, r3
 80099fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a1e:	e065      	b.n	8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a32:	4b59      	ldr	r3, [pc, #356]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3a:	ee07 3a90 	vmov	s15, r3
 8009a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a62:	e043      	b.n	8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	ee07 3a90 	vmov	s15, r3
 8009a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a76:	4b48      	ldr	r3, [pc, #288]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aa6:	e021      	b.n	8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aba:	4b37      	ldr	r3, [pc, #220]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ace:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009aec:	4b2a      	ldr	r3, [pc, #168]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af0:	0a5b      	lsrs	r3, r3, #9
 8009af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af6:	ee07 3a90 	vmov	s15, r3
 8009afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b12:	ee17 2a90 	vmov	r2, s15
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009b1a:	4b1f      	ldr	r3, [pc, #124]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1e:	0c1b      	lsrs	r3, r3, #16
 8009b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b24:	ee07 3a90 	vmov	s15, r3
 8009b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b40:	ee17 2a90 	vmov	r2, s15
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009b48:	4b13      	ldr	r3, [pc, #76]	; (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4c:	0e1b      	lsrs	r3, r3, #24
 8009b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b52:	ee07 3a90 	vmov	s15, r3
 8009b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b6e:	ee17 2a90 	vmov	r2, s15
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009b76:	e008      	b.n	8009b8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	609a      	str	r2, [r3, #8]
}
 8009b8a:	bf00      	nop
 8009b8c:	3724      	adds	r7, #36	; 0x24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	58024400 	.word	0x58024400
 8009b9c:	03d09000 	.word	0x03d09000
 8009ba0:	46000000 	.word	0x46000000
 8009ba4:	4c742400 	.word	0x4c742400
 8009ba8:	4a742400 	.word	0x4a742400
 8009bac:	4bbebc20 	.word	0x4bbebc20

08009bb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b089      	sub	sp, #36	; 0x24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bb8:	4ba0      	ldr	r3, [pc, #640]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbc:	f003 0303 	and.w	r3, r3, #3
 8009bc0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009bc2:	4b9e      	ldr	r3, [pc, #632]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc6:	091b      	lsrs	r3, r3, #4
 8009bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bcc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009bce:	4b9b      	ldr	r3, [pc, #620]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009bd8:	4b98      	ldr	r3, [pc, #608]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bdc:	08db      	lsrs	r3, r3, #3
 8009bde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	fb02 f303 	mul.w	r3, r2, r3
 8009be8:	ee07 3a90 	vmov	s15, r3
 8009bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 8111 	beq.w	8009e1e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	f000 8083 	beq.w	8009d0a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	f200 80a1 	bhi.w	8009d4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d056      	beq.n	8009cc6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009c18:	e099      	b.n	8009d4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c1a:	4b88      	ldr	r3, [pc, #544]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0320 	and.w	r3, r3, #32
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d02d      	beq.n	8009c82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c26:	4b85      	ldr	r3, [pc, #532]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	08db      	lsrs	r3, r3, #3
 8009c2c:	f003 0303 	and.w	r3, r3, #3
 8009c30:	4a83      	ldr	r2, [pc, #524]	; (8009e40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009c32:	fa22 f303 	lsr.w	r3, r2, r3
 8009c36:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	ee07 3a90 	vmov	s15, r3
 8009c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c50:	4b7a      	ldr	r3, [pc, #488]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c58:	ee07 3a90 	vmov	s15, r3
 8009c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c60:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c64:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c80:	e087      	b.n	8009d92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	ee07 3a90 	vmov	s15, r3
 8009c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c94:	4b69      	ldr	r3, [pc, #420]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9c:	ee07 3a90 	vmov	s15, r3
 8009ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ca8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cc4:	e065      	b.n	8009d92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	ee07 3a90 	vmov	s15, r3
 8009ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009e4c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009cd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cd8:	4b58      	ldr	r3, [pc, #352]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce0:	ee07 3a90 	vmov	s15, r3
 8009ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ce8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d08:	e043      	b.n	8009d92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	ee07 3a90 	vmov	s15, r3
 8009d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d1c:	4b47      	ldr	r3, [pc, #284]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d24:	ee07 3a90 	vmov	s15, r3
 8009d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d30:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d4c:	e021      	b.n	8009d92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	ee07 3a90 	vmov	s15, r3
 8009d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d58:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009d5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d60:	4b36      	ldr	r3, [pc, #216]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d68:	ee07 3a90 	vmov	s15, r3
 8009d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d70:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d74:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d90:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009d92:	4b2a      	ldr	r3, [pc, #168]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d96:	0a5b      	lsrs	r3, r3, #9
 8009d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d9c:	ee07 3a90 	vmov	s15, r3
 8009da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009da8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dac:	edd7 6a07 	vldr	s13, [r7, #28]
 8009db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009db8:	ee17 2a90 	vmov	r2, s15
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009dc0:	4b1e      	ldr	r3, [pc, #120]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc4:	0c1b      	lsrs	r3, r3, #16
 8009dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009de6:	ee17 2a90 	vmov	r2, s15
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009dee:	4b13      	ldr	r3, [pc, #76]	; (8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df2:	0e1b      	lsrs	r3, r3, #24
 8009df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df8:	ee07 3a90 	vmov	s15, r3
 8009dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e14:	ee17 2a90 	vmov	r2, s15
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009e1c:	e008      	b.n	8009e30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	609a      	str	r2, [r3, #8]
}
 8009e30:	bf00      	nop
 8009e32:	3724      	adds	r7, #36	; 0x24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	58024400 	.word	0x58024400
 8009e40:	03d09000 	.word	0x03d09000
 8009e44:	46000000 	.word	0x46000000
 8009e48:	4c742400 	.word	0x4c742400
 8009e4c:	4a742400 	.word	0x4a742400
 8009e50:	4bbebc20 	.word	0x4bbebc20

08009e54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e62:	4b53      	ldr	r3, [pc, #332]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e66:	f003 0303 	and.w	r3, r3, #3
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d101      	bne.n	8009e72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e099      	b.n	8009fa6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009e72:	4b4f      	ldr	r3, [pc, #316]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a4e      	ldr	r2, [pc, #312]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009e78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e7e:	f7f7 ffa3 	bl	8001dc8 <HAL_GetTick>
 8009e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e84:	e008      	b.n	8009e98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e86:	f7f7 ff9f 	bl	8001dc8 <HAL_GetTick>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d901      	bls.n	8009e98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e086      	b.n	8009fa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e98:	4b45      	ldr	r3, [pc, #276]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1f0      	bne.n	8009e86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ea4:	4b42      	ldr	r3, [pc, #264]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	031b      	lsls	r3, r3, #12
 8009eb2:	493f      	ldr	r1, [pc, #252]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	628b      	str	r3, [r1, #40]	; 0x28
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	025b      	lsls	r3, r3, #9
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	431a      	orrs	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	041b      	lsls	r3, r3, #16
 8009ed6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009eda:	431a      	orrs	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	061b      	lsls	r3, r3, #24
 8009ee4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ee8:	4931      	ldr	r1, [pc, #196]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009eea:	4313      	orrs	r3, r2
 8009eec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009eee:	4b30      	ldr	r3, [pc, #192]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	492d      	ldr	r1, [pc, #180]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009efc:	4313      	orrs	r3, r2
 8009efe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009f00:	4b2b      	ldr	r3, [pc, #172]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	f023 0220 	bic.w	r2, r3, #32
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	4928      	ldr	r1, [pc, #160]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009f12:	4b27      	ldr	r3, [pc, #156]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f16:	4a26      	ldr	r2, [pc, #152]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f18:	f023 0310 	bic.w	r3, r3, #16
 8009f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009f1e:	4b24      	ldr	r3, [pc, #144]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f22:	4b24      	ldr	r3, [pc, #144]	; (8009fb4 <RCCEx_PLL2_Config+0x160>)
 8009f24:	4013      	ands	r3, r2
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	69d2      	ldr	r2, [r2, #28]
 8009f2a:	00d2      	lsls	r2, r2, #3
 8009f2c:	4920      	ldr	r1, [pc, #128]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009f32:	4b1f      	ldr	r3, [pc, #124]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	4a1e      	ldr	r2, [pc, #120]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f38:	f043 0310 	orr.w	r3, r3, #16
 8009f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d106      	bne.n	8009f52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009f44:	4b1a      	ldr	r3, [pc, #104]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f48:	4a19      	ldr	r2, [pc, #100]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f50:	e00f      	b.n	8009f72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d106      	bne.n	8009f66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009f58:	4b15      	ldr	r3, [pc, #84]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	4a14      	ldr	r2, [pc, #80]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f64:	e005      	b.n	8009f72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009f66:	4b12      	ldr	r3, [pc, #72]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	4a11      	ldr	r2, [pc, #68]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009f72:	4b0f      	ldr	r3, [pc, #60]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a0e      	ldr	r2, [pc, #56]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f7e:	f7f7 ff23 	bl	8001dc8 <HAL_GetTick>
 8009f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f84:	e008      	b.n	8009f98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f86:	f7f7 ff1f 	bl	8001dc8 <HAL_GetTick>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d901      	bls.n	8009f98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e006      	b.n	8009fa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f98:	4b05      	ldr	r3, [pc, #20]	; (8009fb0 <RCCEx_PLL2_Config+0x15c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d0f0      	beq.n	8009f86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	58024400 	.word	0x58024400
 8009fb4:	ffff0007 	.word	0xffff0007

08009fb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fc6:	4b53      	ldr	r3, [pc, #332]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 8009fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fca:	f003 0303 	and.w	r3, r3, #3
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d101      	bne.n	8009fd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e099      	b.n	800a10a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009fd6:	4b4f      	ldr	r3, [pc, #316]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a4e      	ldr	r2, [pc, #312]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 8009fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fe2:	f7f7 fef1 	bl	8001dc8 <HAL_GetTick>
 8009fe6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009fe8:	e008      	b.n	8009ffc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009fea:	f7f7 feed 	bl	8001dc8 <HAL_GetTick>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d901      	bls.n	8009ffc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e086      	b.n	800a10a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ffc:	4b45      	ldr	r3, [pc, #276]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1f0      	bne.n	8009fea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a008:	4b42      	ldr	r3, [pc, #264]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	051b      	lsls	r3, r3, #20
 800a016:	493f      	ldr	r1, [pc, #252]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	628b      	str	r3, [r1, #40]	; 0x28
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	3b01      	subs	r3, #1
 800a022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	3b01      	subs	r3, #1
 800a02c:	025b      	lsls	r3, r3, #9
 800a02e:	b29b      	uxth	r3, r3
 800a030:	431a      	orrs	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	3b01      	subs	r3, #1
 800a038:	041b      	lsls	r3, r3, #16
 800a03a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a03e:	431a      	orrs	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	3b01      	subs	r3, #1
 800a046:	061b      	lsls	r3, r3, #24
 800a048:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a04c:	4931      	ldr	r1, [pc, #196]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a052:	4b30      	ldr	r3, [pc, #192]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a056:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	492d      	ldr	r1, [pc, #180]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a060:	4313      	orrs	r3, r2
 800a062:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a064:	4b2b      	ldr	r3, [pc, #172]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	4928      	ldr	r1, [pc, #160]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a072:	4313      	orrs	r3, r2
 800a074:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a076:	4b27      	ldr	r3, [pc, #156]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	4a26      	ldr	r2, [pc, #152]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a07c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a082:	4b24      	ldr	r3, [pc, #144]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a086:	4b24      	ldr	r3, [pc, #144]	; (800a118 <RCCEx_PLL3_Config+0x160>)
 800a088:	4013      	ands	r3, r2
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	69d2      	ldr	r2, [r2, #28]
 800a08e:	00d2      	lsls	r2, r2, #3
 800a090:	4920      	ldr	r1, [pc, #128]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a092:	4313      	orrs	r3, r2
 800a094:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a096:	4b1f      	ldr	r3, [pc, #124]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	4a1e      	ldr	r2, [pc, #120]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a09c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d106      	bne.n	800a0b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a0a8:	4b1a      	ldr	r3, [pc, #104]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ac:	4a19      	ldr	r2, [pc, #100]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a0ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a0b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0b4:	e00f      	b.n	800a0d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d106      	bne.n	800a0ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a0bc:	4b15      	ldr	r3, [pc, #84]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c0:	4a14      	ldr	r2, [pc, #80]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a0c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a0c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0c8:	e005      	b.n	800a0d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a0ca:	4b12      	ldr	r3, [pc, #72]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	4a11      	ldr	r2, [pc, #68]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a0d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a0d6:	4b0f      	ldr	r3, [pc, #60]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a0e      	ldr	r2, [pc, #56]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a0dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0e2:	f7f7 fe71 	bl	8001dc8 <HAL_GetTick>
 800a0e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0e8:	e008      	b.n	800a0fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a0ea:	f7f7 fe6d 	bl	8001dc8 <HAL_GetTick>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d901      	bls.n	800a0fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e006      	b.n	800a10a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0fc:	4b05      	ldr	r3, [pc, #20]	; (800a114 <RCCEx_PLL3_Config+0x15c>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d0f0      	beq.n	800a0ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a108:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	58024400 	.word	0x58024400
 800a118:	ffff0007 	.word	0xffff0007

0800a11c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
 800a128:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d904      	bls.n	800a13a <HAL_SAI_InitProtocol+0x1e>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	3b03      	subs	r3, #3
 800a134:	2b01      	cmp	r3, #1
 800a136:	d812      	bhi.n	800a15e <HAL_SAI_InitProtocol+0x42>
 800a138:	e008      	b.n	800a14c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	68b9      	ldr	r1, [r7, #8]
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 fb8b 	bl	800a85c <SAI_InitI2S>
 800a146:	4603      	mov	r3, r0
 800a148:	75fb      	strb	r3, [r7, #23]
      break;
 800a14a:	e00b      	b.n	800a164 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	68b9      	ldr	r1, [r7, #8]
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f000 fc34 	bl	800a9c0 <SAI_InitPCM>
 800a158:	4603      	mov	r3, r0
 800a15a:	75fb      	strb	r3, [r7, #23]
      break;
 800a15c:	e002      	b.n	800a164 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	75fb      	strb	r3, [r7, #23]
      break;
 800a162:	bf00      	nop
  }

  if (status == HAL_OK)
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d104      	bne.n	800a174 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 f808 	bl	800a180 <HAL_SAI_Init>
 800a170:	4603      	mov	r3, r0
 800a172:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a174:	7dfb      	ldrb	r3, [r7, #23]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3718      	adds	r7, #24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b08a      	sub	sp, #40	; 0x28
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e201      	b.n	800a596 <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d113      	bne.n	800a1c4 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a99      	ldr	r2, [pc, #612]	; (800a408 <HAL_SAI_Init+0x288>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d004      	beq.n	800a1b0 <HAL_SAI_Init+0x30>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a98      	ldr	r2, [pc, #608]	; (800a40c <HAL_SAI_Init+0x28c>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d107      	bne.n	800a1c0 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d103      	bne.n	800a1c0 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e1e8      	b.n	800a596 <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a8f      	ldr	r2, [pc, #572]	; (800a408 <HAL_SAI_Init+0x288>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d004      	beq.n	800a1d8 <HAL_SAI_Init+0x58>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a8f      	ldr	r2, [pc, #572]	; (800a410 <HAL_SAI_Init+0x290>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d102      	bne.n	800a1de <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 800a1d8:	4b8e      	ldr	r3, [pc, #568]	; (800a414 <HAL_SAI_Init+0x294>)
 800a1da:	61bb      	str	r3, [r7, #24]
 800a1dc:	e00e      	b.n	800a1fc <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a8a      	ldr	r2, [pc, #552]	; (800a40c <HAL_SAI_Init+0x28c>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d004      	beq.n	800a1f2 <HAL_SAI_Init+0x72>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a8a      	ldr	r2, [pc, #552]	; (800a418 <HAL_SAI_Init+0x298>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d102      	bne.n	800a1f8 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800a1f2:	4b8a      	ldr	r3, [pc, #552]	; (800a41c <HAL_SAI_Init+0x29c>)
 800a1f4:	61bb      	str	r3, [r7, #24]
 800a1f6:	e001      	b.n	800a1fc <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e1cc      	b.n	800a596 <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b00      	cmp	r3, #0
 800a206:	d106      	bne.n	800a216 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7f7 f9e1 	bl	80015d8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 fc8c 	bl	800ab34 <SAI_Disable>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e1b7      	b.n	800a596 <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2202      	movs	r2, #2
 800a22a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	2b02      	cmp	r3, #2
 800a234:	d00c      	beq.n	800a250 <HAL_SAI_Init+0xd0>
 800a236:	2b02      	cmp	r3, #2
 800a238:	d80d      	bhi.n	800a256 <HAL_SAI_Init+0xd6>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d002      	beq.n	800a244 <HAL_SAI_Init+0xc4>
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d003      	beq.n	800a24a <HAL_SAI_Init+0xca>
 800a242:	e008      	b.n	800a256 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a248:	e008      	b.n	800a25c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a24a:	2310      	movs	r3, #16
 800a24c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a24e:	e005      	b.n	800a25c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a250:	2320      	movs	r3, #32
 800a252:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a254:	e002      	b.n	800a25c <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800a256:	2300      	movs	r3, #0
 800a258:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a25a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	2b05      	cmp	r3, #5
 800a262:	d822      	bhi.n	800a2aa <HAL_SAI_Init+0x12a>
 800a264:	a201      	add	r2, pc, #4	; (adr r2, 800a26c <HAL_SAI_Init+0xec>)
 800a266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26a:	bf00      	nop
 800a26c:	0800a285 	.word	0x0800a285
 800a270:	0800a28b 	.word	0x0800a28b
 800a274:	0800a293 	.word	0x0800a293
 800a278:	0800a2ab 	.word	0x0800a2ab
 800a27c:	0800a2ab 	.word	0x0800a2ab
 800a280:	0800a29b 	.word	0x0800a29b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a284:	2300      	movs	r3, #0
 800a286:	61fb      	str	r3, [r7, #28]
      break;
 800a288:	e012      	b.n	800a2b0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a28a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a28e:	61fb      	str	r3, [r7, #28]
      break;
 800a290:	e00e      	b.n	800a2b0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a292:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a296:	61fb      	str	r3, [r7, #28]
      break;
 800a298:	e00a      	b.n	800a2b0 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a29a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a29e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	f043 0303 	orr.w	r3, r3, #3
 800a2a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a2a8:	e002      	b.n	800a2b0 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	61fb      	str	r3, [r7, #28]
      break;
 800a2ae:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f000 808a 	beq.w	800a3d4 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a4f      	ldr	r2, [pc, #316]	; (800a408 <HAL_SAI_Init+0x288>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d004      	beq.n	800a2d8 <HAL_SAI_Init+0x158>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a4f      	ldr	r2, [pc, #316]	; (800a410 <HAL_SAI_Init+0x290>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d106      	bne.n	800a2e6 <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a2d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a2dc:	f04f 0100 	mov.w	r1, #0
 800a2e0:	f7fe fcd6 	bl	8008c90 <HAL_RCCEx_GetPeriphCLKFreq>
 800a2e4:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a48      	ldr	r2, [pc, #288]	; (800a40c <HAL_SAI_Init+0x28c>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d106      	bne.n	800a2fe <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a2f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a2f4:	f04f 0100 	mov.w	r1, #0
 800a2f8:	f7fe fcca 	bl	8008c90 <HAL_RCCEx_GetPeriphCLKFreq>
 800a2fc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a45      	ldr	r2, [pc, #276]	; (800a418 <HAL_SAI_Init+0x298>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d106      	bne.n	800a316 <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a308:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a30c:	f04f 0100 	mov.w	r1, #0
 800a310:	f7fe fcbe 	bl	8008c90 <HAL_RCCEx_GetPeriphCLKFreq>
 800a314:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a31e:	d120      	bne.n	800a362 <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a324:	2b04      	cmp	r3, #4
 800a326:	d102      	bne.n	800a32e <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a328:	2340      	movs	r3, #64	; 0x40
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	e00a      	b.n	800a344 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a332:	2b08      	cmp	r3, #8
 800a334:	d103      	bne.n	800a33e <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	e002      	b.n	800a344 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a342:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	4613      	mov	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	4619      	mov	r1, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	fb02 f303 	mul.w	r3, r2, r3
 800a35a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a35e:	613b      	str	r3, [r7, #16]
 800a360:	e017      	b.n	800a392 <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a366:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a36a:	d101      	bne.n	800a370 <HAL_SAI_Init+0x1f0>
 800a36c:	2302      	movs	r3, #2
 800a36e:	e000      	b.n	800a372 <HAL_SAI_Init+0x1f2>
 800a370:	2301      	movs	r3, #1
 800a372:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	4613      	mov	r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	4413      	add	r3, r2
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	4619      	mov	r1, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a1b      	ldr	r3, [r3, #32]
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	fb02 f303 	mul.w	r3, r2, r3
 800a38a:	021b      	lsls	r3, r3, #8
 800a38c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a390:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	4a22      	ldr	r2, [pc, #136]	; (800a420 <HAL_SAI_Init+0x2a0>)
 800a396:	fba2 2303 	umull	r2, r3, r2, r3
 800a39a:	08da      	lsrs	r2, r3, #3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a3a0:	6939      	ldr	r1, [r7, #16]
 800a3a2:	4b1f      	ldr	r3, [pc, #124]	; (800a420 <HAL_SAI_Init+0x2a0>)
 800a3a4:	fba3 2301 	umull	r2, r3, r3, r1
 800a3a8:	08da      	lsrs	r2, r3, #3
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	005b      	lsls	r3, r3, #1
 800a3b2:	1aca      	subs	r2, r1, r3
 800a3b4:	2a08      	cmp	r2, #8
 800a3b6:	d904      	bls.n	800a3c2 <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	1c5a      	adds	r2, r3, #1
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c6:	2b04      	cmp	r3, #4
 800a3c8:	d104      	bne.n	800a3d4 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ce:	085a      	lsrs	r2, r3, #1
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d003      	beq.n	800a3e4 <HAL_SAI_Init+0x264>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d109      	bne.n	800a3f8 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d101      	bne.n	800a3f0 <HAL_SAI_Init+0x270>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	e001      	b.n	800a3f4 <HAL_SAI_Init+0x274>
 800a3f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3f4:	623b      	str	r3, [r7, #32]
 800a3f6:	e017      	b.n	800a428 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d111      	bne.n	800a424 <HAL_SAI_Init+0x2a4>
 800a400:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a404:	e00f      	b.n	800a426 <HAL_SAI_Init+0x2a6>
 800a406:	bf00      	nop
 800a408:	40015804 	.word	0x40015804
 800a40c:	58005404 	.word	0x58005404
 800a410:	40015824 	.word	0x40015824
 800a414:	40015800 	.word	0x40015800
 800a418:	58005424 	.word	0x58005424
 800a41c:	58005400 	.word	0x58005400
 800a420:	cccccccd 	.word	0xcccccccd
 800a424:	2300      	movs	r3, #0
 800a426:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6819      	ldr	r1, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	4b5b      	ldr	r3, [pc, #364]	; (800a5a0 <HAL_SAI_Init+0x420>)
 800a434:	400b      	ands	r3, r1
 800a436:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6819      	ldr	r1, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a446:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a44c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a452:	431a      	orrs	r2, r3
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800a460:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a46c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a472:	051b      	lsls	r3, r3, #20
 800a474:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a47a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	430a      	orrs	r2, r1
 800a488:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	6859      	ldr	r1, [r3, #4]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	4b43      	ldr	r3, [pc, #268]	; (800a5a4 <HAL_SAI_Init+0x424>)
 800a496:	400b      	ands	r3, r1
 800a498:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6859      	ldr	r1, [r3, #4]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	69da      	ldr	r2, [r3, #28]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ae:	431a      	orrs	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6899      	ldr	r1, [r3, #8]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	4b39      	ldr	r3, [pc, #228]	; (800a5a8 <HAL_SAI_Init+0x428>)
 800a4c4:	400b      	ands	r3, r1
 800a4c6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6899      	ldr	r1, [r3, #8]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a4d8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a4de:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a4e4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a4ee:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	430a      	orrs	r2, r1
 800a4f6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68d9      	ldr	r1, [r3, #12]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a506:	400b      	ands	r3, r1
 800a508:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68d9      	ldr	r1, [r3, #12]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a518:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a51e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a520:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a526:	3b01      	subs	r3, #1
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	430a      	orrs	r2, r1
 800a532:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a1c      	ldr	r2, [pc, #112]	; (800a5ac <HAL_SAI_Init+0x42c>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d004      	beq.n	800a548 <HAL_SAI_Init+0x3c8>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a1b      	ldr	r2, [pc, #108]	; (800a5b0 <HAL_SAI_Init+0x430>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d119      	bne.n	800a57c <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a54c:	f023 0201 	bic.w	r2, r3, #1
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d10e      	bne.n	800a57c <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a566:	3b01      	subs	r3, #1
 800a568:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a56a:	431a      	orrs	r2, r3
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a574:	f043 0201 	orr.w	r2, r3, #1
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3728      	adds	r7, #40	; 0x28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	f005c010 	.word	0xf005c010
 800a5a4:	ffff1ff0 	.word	0xffff1ff0
 800a5a8:	fff88000 	.word	0xfff88000
 800a5ac:	40015804 	.word	0x40015804
 800a5b0:	58005404 	.word	0x58005404

0800a5b4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b086      	sub	sp, #24
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800a5c2:	f7f7 fc01 	bl	8001dc8 <HAL_GetTick>
 800a5c6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <HAL_SAI_Transmit_DMA+0x20>
 800a5ce:	88fb      	ldrh	r3, [r7, #6]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d101      	bne.n	800a5d8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e098      	b.n	800a70a <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	f040 8091 	bne.w	800a708 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d101      	bne.n	800a5f4 <HAL_SAI_Transmit_DMA+0x40>
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	e08a      	b.n	800a70a <HAL_SAI_Transmit_DMA+0x156>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	88fa      	ldrh	r2, [r7, #6]
 800a606:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	88fa      	ldrh	r2, [r7, #6]
 800a60e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2212      	movs	r2, #18
 800a61e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a628:	4a3a      	ldr	r2, [pc, #232]	; (800a714 <HAL_SAI_Transmit_DMA+0x160>)
 800a62a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a632:	4a39      	ldr	r2, [pc, #228]	; (800a718 <HAL_SAI_Transmit_DMA+0x164>)
 800a634:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a63c:	4a37      	ldr	r2, [pc, #220]	; (800a71c <HAL_SAI_Transmit_DMA+0x168>)
 800a63e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a646:	2200      	movs	r2, #0
 800a648:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a654:	4619      	mov	r1, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	331c      	adds	r3, #28
 800a65c:	461a      	mov	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800a664:	f7f8 f848 	bl	80026f8 <HAL_DMA_Start_IT>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d005      	beq.n	800a67a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e047      	b.n	800a70a <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a67a:	2100      	movs	r1, #0
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 fa21 	bl	800aac4 <SAI_InterruptFlag>
 800a682:	4601      	mov	r1, r0
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	691a      	ldr	r2, [r3, #16]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	430a      	orrs	r2, r1
 800a690:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a6a0:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a6a2:	e015      	b.n	800a6d0 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800a6a4:	f7f7 fb90 	bl	8001dc8 <HAL_GetTick>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6b2:	d90d      	bls.n	800a6d0 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	e01c      	b.n	800a70a <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d0e2      	beq.n	800a6a4 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d107      	bne.n	800a6fc <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a6fa:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	e000      	b.n	800a70a <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800a708:	2302      	movs	r3, #2
  }
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	0800ac09 	.word	0x0800ac09
 800a718:	0800aba9 	.word	0x0800aba9
 800a71c:	0800aca1 	.word	0x0800aca1

0800a720 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	4613      	mov	r3, r2
 800a72c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d002      	beq.n	800a73a <HAL_SAI_Receive_DMA+0x1a>
 800a734:	88fb      	ldrh	r3, [r7, #6]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e079      	b.n	800a832 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b01      	cmp	r3, #1
 800a748:	d172      	bne.n	800a830 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a750:	2b01      	cmp	r3, #1
 800a752:	d101      	bne.n	800a758 <HAL_SAI_Receive_DMA+0x38>
 800a754:	2302      	movs	r3, #2
 800a756:	e06c      	b.n	800a832 <HAL_SAI_Receive_DMA+0x112>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	88fa      	ldrh	r2, [r7, #6]
 800a76a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	88fa      	ldrh	r2, [r7, #6]
 800a772:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2222      	movs	r2, #34	; 0x22
 800a782:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a78c:	4a2b      	ldr	r2, [pc, #172]	; (800a83c <HAL_SAI_Receive_DMA+0x11c>)
 800a78e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a796:	4a2a      	ldr	r2, [pc, #168]	; (800a840 <HAL_SAI_Receive_DMA+0x120>)
 800a798:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7a0:	4a28      	ldr	r2, [pc, #160]	; (800a844 <HAL_SAI_Receive_DMA+0x124>)
 800a7a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	331c      	adds	r3, #28
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800a7c8:	f7f7 ff96 	bl	80026f8 <HAL_DMA_Start_IT>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d005      	beq.n	800a7de <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e029      	b.n	800a832 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a7de:	2100      	movs	r1, #0
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 f96f 	bl	800aac4 <SAI_InterruptFlag>
 800a7e6:	4601      	mov	r1, r0
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	691a      	ldr	r2, [r3, #16]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a804:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d107      	bne.n	800a824 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a822:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	e000      	b.n	800a832 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800a830:	2302      	movs	r3, #2
  }
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	0800ac85 	.word	0x0800ac85
 800a840:	0800ac25 	.word	0x0800ac25
 800a844:	0800aca1 	.word	0x0800aca1

0800a848 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	607a      	str	r2, [r7, #4]
 800a868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d003      	beq.n	800a88a <SAI_InitI2S+0x2e>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	2b02      	cmp	r3, #2
 800a888:	d103      	bne.n	800a892 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	651a      	str	r2, [r3, #80]	; 0x50
 800a890:	e002      	b.n	800a898 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2201      	movs	r2, #1
 800a896:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a89e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8a6:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	f003 0301 	and.w	r3, r3, #1
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e077      	b.n	800a9b2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d107      	bne.n	800a8d8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a8d4:	665a      	str	r2, [r3, #100]	; 0x64
 800a8d6:	e006      	b.n	800a8e6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a8de:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b03      	cmp	r3, #3
 800a8ea:	d84f      	bhi.n	800a98c <SAI_InitI2S+0x130>
 800a8ec:	a201      	add	r2, pc, #4	; (adr r2, 800a8f4 <SAI_InitI2S+0x98>)
 800a8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f2:	bf00      	nop
 800a8f4:	0800a905 	.word	0x0800a905
 800a8f8:	0800a927 	.word	0x0800a927
 800a8fc:	0800a949 	.word	0x0800a949
 800a900:	0800a96b 	.word	0x0800a96b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2280      	movs	r2, #128	; 0x80
 800a908:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	085b      	lsrs	r3, r3, #1
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	085b      	lsrs	r3, r3, #1
 800a918:	011a      	lsls	r2, r3, #4
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2240      	movs	r2, #64	; 0x40
 800a922:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a924:	e035      	b.n	800a992 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2280      	movs	r2, #128	; 0x80
 800a92a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	085b      	lsrs	r3, r3, #1
 800a930:	019a      	lsls	r2, r3, #6
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	085b      	lsrs	r3, r3, #1
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2280      	movs	r2, #128	; 0x80
 800a944:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a946:	e024      	b.n	800a992 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	22c0      	movs	r2, #192	; 0xc0
 800a94c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	085b      	lsrs	r3, r3, #1
 800a952:	019a      	lsls	r2, r3, #6
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	085b      	lsrs	r3, r3, #1
 800a95c:	015a      	lsls	r2, r3, #5
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2280      	movs	r2, #128	; 0x80
 800a966:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a968:	e013      	b.n	800a992 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	22e0      	movs	r2, #224	; 0xe0
 800a96e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	085b      	lsrs	r3, r3, #1
 800a974:	019a      	lsls	r2, r3, #6
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	085b      	lsrs	r3, r3, #1
 800a97e:	015a      	lsls	r2, r3, #5
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2280      	movs	r2, #128	; 0x80
 800a988:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a98a:	e002      	b.n	800a992 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	75fb      	strb	r3, [r7, #23]
      break;
 800a990:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d10b      	bne.n	800a9b0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d102      	bne.n	800a9a4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2210      	movs	r2, #16
 800a9a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d102      	bne.n	800a9b0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2208      	movs	r2, #8
 800a9ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	371c      	adds	r7, #28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop

0800a9c0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d003      	beq.n	800a9ee <SAI_InitPCM+0x2e>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	d103      	bne.n	800a9f6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	651a      	str	r2, [r3, #80]	; 0x50
 800a9f4:	e002      	b.n	800a9fc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800aa08:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800aa10:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa24:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	2b04      	cmp	r3, #4
 800aa2a:	d103      	bne.n	800aa34 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	659a      	str	r2, [r3, #88]	; 0x58
 800aa32:	e002      	b.n	800aa3a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	220d      	movs	r2, #13
 800aa38:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b03      	cmp	r3, #3
 800aa3e:	d837      	bhi.n	800aab0 <SAI_InitPCM+0xf0>
 800aa40:	a201      	add	r2, pc, #4	; (adr r2, 800aa48 <SAI_InitPCM+0x88>)
 800aa42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa46:	bf00      	nop
 800aa48:	0800aa59 	.word	0x0800aa59
 800aa4c:	0800aa6f 	.word	0x0800aa6f
 800aa50:	0800aa85 	.word	0x0800aa85
 800aa54:	0800aa9b 	.word	0x0800aa9b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2280      	movs	r2, #128	; 0x80
 800aa5c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	011a      	lsls	r2, r3, #4
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2240      	movs	r2, #64	; 0x40
 800aa6a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800aa6c:	e023      	b.n	800aab6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2280      	movs	r2, #128	; 0x80
 800aa72:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	015a      	lsls	r2, r3, #5
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2280      	movs	r2, #128	; 0x80
 800aa80:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800aa82:	e018      	b.n	800aab6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	22c0      	movs	r2, #192	; 0xc0
 800aa88:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	015a      	lsls	r2, r3, #5
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2280      	movs	r2, #128	; 0x80
 800aa96:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800aa98:	e00d      	b.n	800aab6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	22e0      	movs	r2, #224	; 0xe0
 800aa9e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	015a      	lsls	r2, r3, #5
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2280      	movs	r2, #128	; 0x80
 800aaac:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800aaae:	e002      	b.n	800aab6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	75fb      	strb	r3, [r7, #23]
      break;
 800aab4:	bf00      	nop
  }

  return status;
 800aab6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	371c      	adds	r7, #28
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	460b      	mov	r3, r1
 800aace:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800aad4:	78fb      	ldrb	r3, [r7, #3]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d103      	bne.n	800aae2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f043 0308 	orr.w	r3, r3, #8
 800aae0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae6:	2b08      	cmp	r3, #8
 800aae8:	d10b      	bne.n	800ab02 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	d003      	beq.n	800aafa <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d103      	bne.n	800ab02 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f043 0310 	orr.w	r3, r3, #16
 800ab00:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d003      	beq.n	800ab12 <SAI_InterruptFlag+0x4e>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d104      	bne.n	800ab1c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ab18:	60fb      	str	r3, [r7, #12]
 800ab1a:	e003      	b.n	800ab24 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f043 0304 	orr.w	r3, r3, #4
 800ab22:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ab24:	68fb      	ldr	r3, [r7, #12]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
	...

0800ab34 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ab3c:	4b18      	ldr	r3, [pc, #96]	; (800aba0 <SAI_Disable+0x6c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a18      	ldr	r2, [pc, #96]	; (800aba4 <SAI_Disable+0x70>)
 800ab42:	fba2 2303 	umull	r2, r3, r2, r3
 800ab46:	0b1b      	lsrs	r3, r3, #12
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ab5e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10a      	bne.n	800ab7c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	72fb      	strb	r3, [r7, #11]
      break;
 800ab7a:	e009      	b.n	800ab90 <SAI_Disable+0x5c>
    }
    count--;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1e7      	bne.n	800ab60 <SAI_Disable+0x2c>

  return status;
 800ab90:	7afb      	ldrb	r3, [r7, #11]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	24000000 	.word	0x24000000
 800aba4:	95cbec1b 	.word	0x95cbec1b

0800aba8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abbe:	d01c      	beq.n	800abfa <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800abd6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800abd8:	2100      	movs	r1, #0
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f7ff ff72 	bl	800aac4 <SAI_InterruptFlag>
 800abe0:	4603      	mov	r3, r0
 800abe2:	43d9      	mvns	r1, r3
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	691a      	ldr	r2, [r3, #16]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	400a      	ands	r2, r1
 800abf0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2201      	movs	r2, #1
 800abf6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f7f5 ffc4 	bl	8000b88 <HAL_SAI_TxCpltCallback>
#endif
}
 800ac00:	bf00      	nop
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac14:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f7f6 f818 	bl	8000c4c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800ac1c:	bf00      	nop
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac30:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	69db      	ldr	r3, [r3, #28]
 800ac36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac3a:	d01c      	beq.n	800ac76 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ac4a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ac54:	2100      	movs	r1, #0
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f7ff ff34 	bl	800aac4 <SAI_InterruptFlag>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	43d9      	mvns	r1, r3
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	691a      	ldr	r2, [r3, #16]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	400a      	ands	r2, r1
 800ac6c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2201      	movs	r2, #1
 800ac72:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f7f6 f84a 	bl	8000d10 <HAL_SAI_RxCpltCallback>
#endif
}
 800ac7c:	bf00      	nop
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac90:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f7f6 f8f2 	bl	8000e7c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800ac98:	bf00      	nop
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acac:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7f8 feb6 	bl	8003a20 <HAL_DMA_GetError>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d01d      	beq.n	800acf6 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800acc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800acd8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f7ff ff2a 	bl	800ab34 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f7ff fda9 	bl	800a848 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800acf6:	bf00      	nop
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
	...

0800ad00 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	e02b      	b.n	800ad6c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d106      	bne.n	800ad2e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7f5 fd87 	bl	800083c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2202      	movs	r2, #2
 800ad32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	4619      	mov	r1, r3
 800ad40:	4610      	mov	r0, r2
 800ad42:	f000 fdbf 	bl	800b8c4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6818      	ldr	r0, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	f000 fe13 	bl	800b97c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ad56:	4b07      	ldr	r3, [pc, #28]	; (800ad74 <HAL_SDRAM_Init+0x74>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a06      	ldr	r2, [pc, #24]	; (800ad74 <HAL_SDRAM_Init+0x74>)
 800ad5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad60:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	52004000 	.word	0x52004000

0800ad78 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ad8a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ad8c:	7dfb      	ldrb	r3, [r7, #23]
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d101      	bne.n	800ad96 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800ad92:	2302      	movs	r3, #2
 800ad94:	e021      	b.n	800adda <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ad96:	7dfb      	ldrb	r3, [r7, #23]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d002      	beq.n	800ada2 <HAL_SDRAM_SendCommand+0x2a>
 800ad9c:	7dfb      	ldrb	r3, [r7, #23]
 800ad9e:	2b05      	cmp	r3, #5
 800ada0:	d118      	bne.n	800add4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2202      	movs	r2, #2
 800ada6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	68b9      	ldr	r1, [r7, #8]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 fe4c 	bl	800ba50 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d104      	bne.n	800adca <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2205      	movs	r2, #5
 800adc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800adc8:	e006      	b.n	800add8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800add2:	e001      	b.n	800add8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	e000      	b.n	800adda <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b082      	sub	sp, #8
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d101      	bne.n	800adfc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800adf8:	2302      	movs	r3, #2
 800adfa:	e016      	b.n	800ae2a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d10f      	bne.n	800ae28 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 fe3e 	bl	800ba98 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	e000      	b.n	800ae2a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
	...

0800ae34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d101      	bne.n	800ae46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e10f      	b.n	800b066 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a87      	ldr	r2, [pc, #540]	; (800b070 <HAL_SPI_Init+0x23c>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d00f      	beq.n	800ae76 <HAL_SPI_Init+0x42>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a86      	ldr	r2, [pc, #536]	; (800b074 <HAL_SPI_Init+0x240>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d00a      	beq.n	800ae76 <HAL_SPI_Init+0x42>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a84      	ldr	r2, [pc, #528]	; (800b078 <HAL_SPI_Init+0x244>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d005      	beq.n	800ae76 <HAL_SPI_Init+0x42>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	2b0f      	cmp	r3, #15
 800ae70:	d901      	bls.n	800ae76 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e0f7      	b.n	800b066 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fd08 	bl	800b88c <SPI_GetPacketSize>
 800ae7c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a7b      	ldr	r2, [pc, #492]	; (800b070 <HAL_SPI_Init+0x23c>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d00c      	beq.n	800aea2 <HAL_SPI_Init+0x6e>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a79      	ldr	r2, [pc, #484]	; (800b074 <HAL_SPI_Init+0x240>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d007      	beq.n	800aea2 <HAL_SPI_Init+0x6e>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a78      	ldr	r2, [pc, #480]	; (800b078 <HAL_SPI_Init+0x244>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d002      	beq.n	800aea2 <HAL_SPI_Init+0x6e>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2b08      	cmp	r3, #8
 800aea0:	d811      	bhi.n	800aec6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aea6:	4a72      	ldr	r2, [pc, #456]	; (800b070 <HAL_SPI_Init+0x23c>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d009      	beq.n	800aec0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a70      	ldr	r2, [pc, #448]	; (800b074 <HAL_SPI_Init+0x240>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d004      	beq.n	800aec0 <HAL_SPI_Init+0x8c>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a6f      	ldr	r2, [pc, #444]	; (800b078 <HAL_SPI_Init+0x244>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d104      	bne.n	800aeca <HAL_SPI_Init+0x96>
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b10      	cmp	r3, #16
 800aec4:	d901      	bls.n	800aeca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	e0cd      	b.n	800b066 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d106      	bne.n	800aee4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7f6 fcb6 	bl	8001850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2202      	movs	r2, #2
 800aee8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f022 0201 	bic.w	r2, r2, #1
 800aefa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800af06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af10:	d119      	bne.n	800af46 <HAL_SPI_Init+0x112>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af1a:	d103      	bne.n	800af24 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800af20:	2b00      	cmp	r3, #0
 800af22:	d008      	beq.n	800af36 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10c      	bne.n	800af46 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800af30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af34:	d107      	bne.n	800af46 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800af44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00f      	beq.n	800af72 <HAL_SPI_Init+0x13e>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	2b06      	cmp	r3, #6
 800af58:	d90b      	bls.n	800af72 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	430a      	orrs	r2, r1
 800af6e:	601a      	str	r2, [r3, #0]
 800af70:	e007      	b.n	800af82 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	69da      	ldr	r2, [r3, #28]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af8a:	431a      	orrs	r2, r3
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	431a      	orrs	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af94:	ea42 0103 	orr.w	r1, r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	68da      	ldr	r2, [r3, #12]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	430a      	orrs	r2, r1
 800afa2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	431a      	orrs	r2, r3
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb2:	431a      	orrs	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	699b      	ldr	r3, [r3, #24]
 800afb8:	431a      	orrs	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	691b      	ldr	r3, [r3, #16]
 800afbe:	431a      	orrs	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	695b      	ldr	r3, [r3, #20]
 800afc4:	431a      	orrs	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	431a      	orrs	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	431a      	orrs	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afd6:	431a      	orrs	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	431a      	orrs	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afe2:	ea42 0103 	orr.w	r1, r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	430a      	orrs	r2, r1
 800aff0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d113      	bne.n	800b022 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b00c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b020:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f022 0201 	bic.w	r2, r2, #1
 800b030:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	430a      	orrs	r2, r1
 800b052:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	40013000 	.word	0x40013000
 800b074:	40003800 	.word	0x40003800
 800b078:	40003c00 	.word	0x40003c00

0800b07c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08e      	sub	sp, #56	; 0x38
 800b080:	af02      	add	r7, sp, #8
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
 800b088:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3320      	adds	r3, #32
 800b090:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3330      	adds	r3, #48	; 0x30
 800b098:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b09e:	095b      	lsrs	r3, r3, #5
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0a6:	f7f6 fe8f 	bl	8001dc8 <HAL_GetTick>
 800b0aa:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800b0ac:	887b      	ldrh	r3, [r7, #2]
 800b0ae:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800b0b0:	887b      	ldrh	r3, [r7, #2]
 800b0b2:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d001      	beq.n	800b0c4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	e310      	b.n	800b6e6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d005      	beq.n	800b0d6 <HAL_SPI_TransmitReceive+0x5a>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d002      	beq.n	800b0d6 <HAL_SPI_TransmitReceive+0x5a>
 800b0d0:	887b      	ldrh	r3, [r7, #2]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d101      	bne.n	800b0da <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e305      	b.n	800b6e6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d101      	bne.n	800b0e8 <HAL_SPI_TransmitReceive+0x6c>
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	e2fe      	b.n	800b6e6 <HAL_SPI_TransmitReceive+0x66a>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2205      	movs	r2, #5
 800b0f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	887a      	ldrh	r2, [r7, #2]
 800b10a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	887a      	ldrh	r2, [r7, #2]
 800b112:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	887a      	ldrh	r2, [r7, #2]
 800b120:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	887a      	ldrh	r2, [r7, #2]
 800b128:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2200      	movs	r2, #0
 800b130:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2200      	movs	r2, #0
 800b136:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	68da      	ldr	r2, [r3, #12]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800b146:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a70      	ldr	r2, [pc, #448]	; (800b310 <HAL_SPI_TransmitReceive+0x294>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d009      	beq.n	800b166 <HAL_SPI_TransmitReceive+0xea>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a6f      	ldr	r2, [pc, #444]	; (800b314 <HAL_SPI_TransmitReceive+0x298>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d004      	beq.n	800b166 <HAL_SPI_TransmitReceive+0xea>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a6d      	ldr	r2, [pc, #436]	; (800b318 <HAL_SPI_TransmitReceive+0x29c>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d102      	bne.n	800b16c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800b166:	2310      	movs	r3, #16
 800b168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b16a:	e001      	b.n	800b170 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800b16c:	2308      	movs	r3, #8
 800b16e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	4b69      	ldr	r3, [pc, #420]	; (800b31c <HAL_SPI_TransmitReceive+0x2a0>)
 800b178:	4013      	ands	r3, r2
 800b17a:	8879      	ldrh	r1, [r7, #2]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	6812      	ldr	r2, [r2, #0]
 800b180:	430b      	orrs	r3, r1
 800b182:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f042 0201 	orr.w	r2, r2, #1
 800b192:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b19c:	d107      	bne.n	800b1ae <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	2b0f      	cmp	r3, #15
 800b1b4:	f240 80a2 	bls.w	800b2fc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800b1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ba:	089b      	lsrs	r3, r3, #2
 800b1bc:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b1be:	e094      	b.n	800b2ea <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	695b      	ldr	r3, [r3, #20]
 800b1c6:	f003 0302 	and.w	r3, r3, #2
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d120      	bne.n	800b210 <HAL_SPI_TransmitReceive+0x194>
 800b1ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d01d      	beq.n	800b210 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b1d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b1d6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800b1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1da:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d217      	bcs.n	800b210 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	6812      	ldr	r2, [r2, #0]
 800b1ea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1f0:	1d1a      	adds	r2, r3, #4
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	3b01      	subs	r3, #1
 800b200:	b29a      	uxth	r2, r3
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b20e:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b218:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d065      	beq.n	800b2ea <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	695b      	ldr	r3, [r3, #20]
 800b224:	f003 0301 	and.w	r3, r3, #1
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d118      	bne.n	800b25e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b234:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b236:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b23c:	1d1a      	adds	r2, r3, #4
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b248:	b29b      	uxth	r3, r3
 800b24a:	3b01      	subs	r3, #1
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b25a:	853b      	strh	r3, [r7, #40]	; 0x28
 800b25c:	e045      	b.n	800b2ea <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b25e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b260:	8bfb      	ldrh	r3, [r7, #30]
 800b262:	429a      	cmp	r2, r3
 800b264:	d21d      	bcs.n	800b2a2 <HAL_SPI_TransmitReceive+0x226>
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d018      	beq.n	800b2a2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b278:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b27a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b280:	1d1a      	adds	r2, r3, #4
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	3b01      	subs	r3, #1
 800b290:	b29a      	uxth	r2, r3
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b29e:	853b      	strh	r3, [r7, #40]	; 0x28
 800b2a0:	e023      	b.n	800b2ea <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2a2:	f7f6 fd91 	bl	8001dc8 <HAL_GetTick>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d803      	bhi.n	800b2ba <HAL_SPI_TransmitReceive+0x23e>
 800b2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b8:	d102      	bne.n	800b2c0 <HAL_SPI_TransmitReceive+0x244>
 800b2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d114      	bne.n	800b2ea <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 fa15 	bl	800b6f0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	e1fd      	b.n	800b6e6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b2ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f47f af67 	bne.w	800b1c0 <HAL_SPI_TransmitReceive+0x144>
 800b2f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f47f af63 	bne.w	800b1c0 <HAL_SPI_TransmitReceive+0x144>
 800b2fa:	e1ce      	b.n	800b69a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	2b07      	cmp	r3, #7
 800b302:	f240 81c2 	bls.w	800b68a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800b306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b308:	085b      	lsrs	r3, r3, #1
 800b30a:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b30c:	e0c9      	b.n	800b4a2 <HAL_SPI_TransmitReceive+0x426>
 800b30e:	bf00      	nop
 800b310:	40013000 	.word	0x40013000
 800b314:	40003800 	.word	0x40003800
 800b318:	40003c00 	.word	0x40003c00
 800b31c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	f003 0302 	and.w	r3, r3, #2
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d11f      	bne.n	800b36e <HAL_SPI_TransmitReceive+0x2f2>
 800b32e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b330:	2b00      	cmp	r3, #0
 800b332:	d01c      	beq.n	800b36e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b334:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b336:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800b338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d216      	bcs.n	800b36e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b344:	881a      	ldrh	r2, [r3, #0]
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b348:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b34e:	1c9a      	adds	r2, r3, #2
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	3b01      	subs	r3, #1
 800b35e:	b29a      	uxth	r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b36c:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b376:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f000 8092 	beq.w	800b4a2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	695b      	ldr	r3, [r3, #20]
 800b384:	f003 0301 	and.w	r3, r3, #1
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d118      	bne.n	800b3be <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b390:	6a3a      	ldr	r2, [r7, #32]
 800b392:	8812      	ldrh	r2, [r2, #0]
 800b394:	b292      	uxth	r2, r2
 800b396:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b39c:	1c9a      	adds	r2, r3, #2
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b3ba:	853b      	strh	r3, [r7, #40]	; 0x28
 800b3bc:	e071      	b.n	800b4a2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b3be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b3c0:	8bfb      	ldrh	r3, [r7, #30]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d228      	bcs.n	800b418 <HAL_SPI_TransmitReceive+0x39c>
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d023      	beq.n	800b418 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3d4:	6a3a      	ldr	r2, [r7, #32]
 800b3d6:	8812      	ldrh	r2, [r2, #0]
 800b3d8:	b292      	uxth	r2, r2
 800b3da:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3e0:	1c9a      	adds	r2, r3, #2
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3ea:	6a3a      	ldr	r2, [r7, #32]
 800b3ec:	8812      	ldrh	r2, [r2, #0]
 800b3ee:	b292      	uxth	r2, r2
 800b3f0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3f6:	1c9a      	adds	r2, r3, #2
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b402:	b29b      	uxth	r3, r3
 800b404:	3b02      	subs	r3, #2
 800b406:	b29a      	uxth	r2, r3
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b414:	853b      	strh	r3, [r7, #40]	; 0x28
 800b416:	e044      	b.n	800b4a2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b418:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d11d      	bne.n	800b45a <HAL_SPI_TransmitReceive+0x3de>
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d018      	beq.n	800b45a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b42c:	6a3a      	ldr	r2, [r7, #32]
 800b42e:	8812      	ldrh	r2, [r2, #0]
 800b430:	b292      	uxth	r2, r2
 800b432:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b438:	1c9a      	adds	r2, r3, #2
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b444:	b29b      	uxth	r3, r3
 800b446:	3b01      	subs	r3, #1
 800b448:	b29a      	uxth	r2, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b456:	853b      	strh	r3, [r7, #40]	; 0x28
 800b458:	e023      	b.n	800b4a2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b45a:	f7f6 fcb5 	bl	8001dc8 <HAL_GetTick>
 800b45e:	4602      	mov	r2, r0
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b466:	429a      	cmp	r2, r3
 800b468:	d803      	bhi.n	800b472 <HAL_SPI_TransmitReceive+0x3f6>
 800b46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b470:	d102      	bne.n	800b478 <HAL_SPI_TransmitReceive+0x3fc>
 800b472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b474:	2b00      	cmp	r3, #0
 800b476:	d114      	bne.n	800b4a2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f000 f939 	bl	800b6f0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b484:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2201      	movs	r2, #1
 800b492:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2200      	movs	r2, #0
 800b49a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	e121      	b.n	800b6e6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b4a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f47f af3b 	bne.w	800b320 <HAL_SPI_TransmitReceive+0x2a4>
 800b4aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f47f af37 	bne.w	800b320 <HAL_SPI_TransmitReceive+0x2a4>
 800b4b2:	e0f2      	b.n	800b69a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	f003 0302 	and.w	r3, r3, #2
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d121      	bne.n	800b506 <HAL_SPI_TransmitReceive+0x48a>
 800b4c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d01e      	beq.n	800b506 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b4c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b4ca:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800b4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ce:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d218      	bcs.n	800b506 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3320      	adds	r3, #32
 800b4de:	7812      	ldrb	r2, [r2, #0]
 800b4e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4e6:	1c5a      	adds	r2, r3, #1
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b504:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	695b      	ldr	r3, [r3, #20]
 800b50c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b50e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b510:	2b00      	cmp	r3, #0
 800b512:	f000 80ba 	beq.w	800b68a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	695b      	ldr	r3, [r3, #20]
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	2b01      	cmp	r3, #1
 800b522:	d11b      	bne.n	800b55c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b530:	7812      	ldrb	r2, [r2, #0]
 800b532:	b2d2      	uxtb	r2, r2
 800b534:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b53a:	1c5a      	adds	r2, r3, #1
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b546:	b29b      	uxth	r3, r3
 800b548:	3b01      	subs	r3, #1
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b558:	853b      	strh	r3, [r7, #40]	; 0x28
 800b55a:	e096      	b.n	800b68a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b55c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b55e:	8bfb      	ldrh	r3, [r7, #30]
 800b560:	429a      	cmp	r2, r3
 800b562:	d24a      	bcs.n	800b5fa <HAL_SPI_TransmitReceive+0x57e>
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d045      	beq.n	800b5fa <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b57a:	7812      	ldrb	r2, [r2, #0]
 800b57c:	b2d2      	uxtb	r2, r2
 800b57e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b596:	7812      	ldrb	r2, [r2, #0]
 800b598:	b2d2      	uxtb	r2, r2
 800b59a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5a0:	1c5a      	adds	r2, r3, #1
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5b2:	7812      	ldrb	r2, [r2, #0]
 800b5b4:	b2d2      	uxtb	r2, r2
 800b5b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5ce:	7812      	ldrb	r2, [r2, #0]
 800b5d0:	b2d2      	uxtb	r2, r2
 800b5d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5d8:	1c5a      	adds	r2, r3, #1
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	3b04      	subs	r3, #4
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b5f6:	853b      	strh	r3, [r7, #40]	; 0x28
 800b5f8:	e047      	b.n	800b68a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b5fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b5fc:	2b03      	cmp	r3, #3
 800b5fe:	d820      	bhi.n	800b642 <HAL_SPI_TransmitReceive+0x5c6>
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b606:	2b00      	cmp	r3, #0
 800b608:	d01b      	beq.n	800b642 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b616:	7812      	ldrb	r2, [r2, #0]
 800b618:	b2d2      	uxtb	r2, r2
 800b61a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b620:	1c5a      	adds	r2, r3, #1
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	3b01      	subs	r3, #1
 800b630:	b29a      	uxth	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b63e:	853b      	strh	r3, [r7, #40]	; 0x28
 800b640:	e023      	b.n	800b68a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b642:	f7f6 fbc1 	bl	8001dc8 <HAL_GetTick>
 800b646:	4602      	mov	r2, r0
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b64e:	429a      	cmp	r2, r3
 800b650:	d803      	bhi.n	800b65a <HAL_SPI_TransmitReceive+0x5de>
 800b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b658:	d102      	bne.n	800b660 <HAL_SPI_TransmitReceive+0x5e4>
 800b65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d114      	bne.n	800b68a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f000 f845 	bl	800b6f0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b66c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e02d      	b.n	800b6e6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b68a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f47f af11 	bne.w	800b4b4 <HAL_SPI_TransmitReceive+0x438>
 800b692:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b694:	2b00      	cmp	r3, #0
 800b696:	f47f af0d 	bne.w	800b4b4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2108      	movs	r1, #8
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f000 f8c3 	bl	800b830 <SPI_WaitOnFlagUntilTimeout>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d007      	beq.n	800b6c0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6b6:	f043 0220 	orr.w	r2, r3, #32
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 f815 	bl	800b6f0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e000      	b.n	800b6e6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
  }
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3730      	adds	r7, #48	; 0x30
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop

0800b6f0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	695b      	ldr	r3, [r3, #20]
 800b6fe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	699a      	ldr	r2, [r3, #24]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f042 0208 	orr.w	r2, r2, #8
 800b70e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	699a      	ldr	r2, [r3, #24]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f042 0210 	orr.w	r2, r2, #16
 800b71e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f022 0201 	bic.w	r2, r2, #1
 800b72e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	6919      	ldr	r1, [r3, #16]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	4b3c      	ldr	r3, [pc, #240]	; (800b82c <SPI_CloseTransfer+0x13c>)
 800b73c:	400b      	ands	r3, r1
 800b73e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689a      	ldr	r2, [r3, #8]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b74e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b756:	b2db      	uxtb	r3, r3
 800b758:	2b04      	cmp	r3, #4
 800b75a:	d014      	beq.n	800b786 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f003 0320 	and.w	r3, r3, #32
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00f      	beq.n	800b786 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b76c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	699a      	ldr	r2, [r3, #24]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f042 0220 	orr.w	r2, r2, #32
 800b784:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	2b03      	cmp	r3, #3
 800b790:	d014      	beq.n	800b7bc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00f      	beq.n	800b7bc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7a2:	f043 0204 	orr.w	r2, r3, #4
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	699a      	ldr	r2, [r3, #24]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7ba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00f      	beq.n	800b7e6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7cc:	f043 0201 	orr.w	r2, r3, #1
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	699a      	ldr	r2, [r3, #24]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00f      	beq.n	800b810 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7f6:	f043 0208 	orr.w	r2, r3, #8
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	699a      	ldr	r2, [r3, #24]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b80e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b820:	bf00      	nop
 800b822:	3714      	adds	r7, #20
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	fffffc90 	.word	0xfffffc90

0800b830 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	603b      	str	r3, [r7, #0]
 800b83c:	4613      	mov	r3, r2
 800b83e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b840:	e010      	b.n	800b864 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b842:	f7f6 fac1 	bl	8001dc8 <HAL_GetTick>
 800b846:	4602      	mov	r2, r0
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d803      	bhi.n	800b85a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b858:	d102      	bne.n	800b860 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b860:	2303      	movs	r3, #3
 800b862:	e00f      	b.n	800b884 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	695a      	ldr	r2, [r3, #20]
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	4013      	ands	r3, r2
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	429a      	cmp	r2, r3
 800b872:	bf0c      	ite	eq
 800b874:	2301      	moveq	r3, #1
 800b876:	2300      	movne	r3, #0
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	461a      	mov	r2, r3
 800b87c:	79fb      	ldrb	r3, [r7, #7]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d0df      	beq.n	800b842 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b898:	095b      	lsrs	r3, r3, #5
 800b89a:	3301      	adds	r3, #1
 800b89c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	3307      	adds	r3, #7
 800b8aa:	08db      	lsrs	r3, r3, #3
 800b8ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	fb02 f303 	mul.w	r3, r2, r3
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
	...

0800b8c4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d121      	bne.n	800b91a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	4b27      	ldr	r3, [pc, #156]	; (800b978 <FMC_SDRAM_Init+0xb4>)
 800b8dc:	4013      	ands	r3, r2
 800b8de:	683a      	ldr	r2, [r7, #0]
 800b8e0:	6851      	ldr	r1, [r2, #4]
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	6892      	ldr	r2, [r2, #8]
 800b8e6:	4311      	orrs	r1, r2
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	68d2      	ldr	r2, [r2, #12]
 800b8ec:	4311      	orrs	r1, r2
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	6912      	ldr	r2, [r2, #16]
 800b8f2:	4311      	orrs	r1, r2
 800b8f4:	683a      	ldr	r2, [r7, #0]
 800b8f6:	6952      	ldr	r2, [r2, #20]
 800b8f8:	4311      	orrs	r1, r2
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	6992      	ldr	r2, [r2, #24]
 800b8fe:	4311      	orrs	r1, r2
 800b900:	683a      	ldr	r2, [r7, #0]
 800b902:	69d2      	ldr	r2, [r2, #28]
 800b904:	4311      	orrs	r1, r2
 800b906:	683a      	ldr	r2, [r7, #0]
 800b908:	6a12      	ldr	r2, [r2, #32]
 800b90a:	4311      	orrs	r1, r2
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b910:	430a      	orrs	r2, r1
 800b912:	431a      	orrs	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	601a      	str	r2, [r3, #0]
 800b918:	e026      	b.n	800b968 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	69d9      	ldr	r1, [r3, #28]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	6a1b      	ldr	r3, [r3, #32]
 800b92a:	4319      	orrs	r1, r3
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b930:	430b      	orrs	r3, r1
 800b932:	431a      	orrs	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	4b0e      	ldr	r3, [pc, #56]	; (800b978 <FMC_SDRAM_Init+0xb4>)
 800b93e:	4013      	ands	r3, r2
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	6851      	ldr	r1, [r2, #4]
 800b944:	683a      	ldr	r2, [r7, #0]
 800b946:	6892      	ldr	r2, [r2, #8]
 800b948:	4311      	orrs	r1, r2
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	68d2      	ldr	r2, [r2, #12]
 800b94e:	4311      	orrs	r1, r2
 800b950:	683a      	ldr	r2, [r7, #0]
 800b952:	6912      	ldr	r2, [r2, #16]
 800b954:	4311      	orrs	r1, r2
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	6952      	ldr	r2, [r2, #20]
 800b95a:	4311      	orrs	r1, r2
 800b95c:	683a      	ldr	r2, [r7, #0]
 800b95e:	6992      	ldr	r2, [r2, #24]
 800b960:	430a      	orrs	r2, r1
 800b962:	431a      	orrs	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	ffff8000 	.word	0xffff8000

0800b97c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d128      	bne.n	800b9e0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	1e59      	subs	r1, r3, #1
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	011b      	lsls	r3, r3, #4
 800b9a4:	4319      	orrs	r1, r3
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	021b      	lsls	r3, r3, #8
 800b9ae:	4319      	orrs	r1, r3
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	031b      	lsls	r3, r3, #12
 800b9b8:	4319      	orrs	r1, r3
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	041b      	lsls	r3, r3, #16
 800b9c2:	4319      	orrs	r1, r3
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	695b      	ldr	r3, [r3, #20]
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	051b      	lsls	r3, r3, #20
 800b9cc:	4319      	orrs	r1, r3
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	061b      	lsls	r3, r3, #24
 800b9d6:	430b      	orrs	r3, r1
 800b9d8:	431a      	orrs	r2, r3
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	609a      	str	r2, [r3, #8]
 800b9de:	e02d      	b.n	800ba3c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	689a      	ldr	r2, [r3, #8]
 800b9e4:	4b19      	ldr	r3, [pc, #100]	; (800ba4c <FMC_SDRAM_Timing_Init+0xd0>)
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	68d2      	ldr	r2, [r2, #12]
 800b9ec:	3a01      	subs	r2, #1
 800b9ee:	0311      	lsls	r1, r2, #12
 800b9f0:	68ba      	ldr	r2, [r7, #8]
 800b9f2:	6952      	ldr	r2, [r2, #20]
 800b9f4:	3a01      	subs	r2, #1
 800b9f6:	0512      	lsls	r2, r2, #20
 800b9f8:	430a      	orrs	r2, r1
 800b9fa:	431a      	orrs	r2, r3
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	1e59      	subs	r1, r3, #1
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	3b01      	subs	r3, #1
 800ba14:	011b      	lsls	r3, r3, #4
 800ba16:	4319      	orrs	r1, r3
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	021b      	lsls	r3, r3, #8
 800ba20:	4319      	orrs	r1, r3
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	3b01      	subs	r3, #1
 800ba28:	041b      	lsls	r3, r3, #16
 800ba2a:	4319      	orrs	r1, r3
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	3b01      	subs	r3, #1
 800ba32:	061b      	lsls	r3, r3, #24
 800ba34:	430b      	orrs	r3, r1
 800ba36:	431a      	orrs	r2, r3
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3714      	adds	r7, #20
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	ff0f0fff 	.word	0xff0f0fff

0800ba50 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	691a      	ldr	r2, [r3, #16]
 800ba60:	4b0c      	ldr	r3, [pc, #48]	; (800ba94 <FMC_SDRAM_SendCommand+0x44>)
 800ba62:	4013      	ands	r3, r2
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	6811      	ldr	r1, [r2, #0]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	6852      	ldr	r2, [r2, #4]
 800ba6c:	4311      	orrs	r1, r2
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	6892      	ldr	r2, [r2, #8]
 800ba72:	3a01      	subs	r2, #1
 800ba74:	0152      	lsls	r2, r2, #5
 800ba76:	4311      	orrs	r1, r2
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	68d2      	ldr	r2, [r2, #12]
 800ba7c:	0252      	lsls	r2, r2, #9
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	431a      	orrs	r2, r3
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	ffc00000 	.word	0xffc00000

0800ba98 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	695a      	ldr	r2, [r3, #20]
 800baa6:	4b07      	ldr	r3, [pc, #28]	; (800bac4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800baa8:	4013      	ands	r3, r2
 800baaa:	683a      	ldr	r2, [r7, #0]
 800baac:	0052      	lsls	r2, r2, #1
 800baae:	431a      	orrs	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	ffffc001 	.word	0xffffc001

0800bac8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bac8:	b084      	sub	sp, #16
 800baca:	b580      	push	{r7, lr}
 800bacc:	b084      	sub	sp, #16
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	f107 001c 	add.w	r0, r7, #28
 800bad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bada:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d121      	bne.n	800bb26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68da      	ldr	r2, [r3, #12]
 800baf2:	4b2c      	ldr	r3, [pc, #176]	; (800bba4 <USB_CoreInit+0xdc>)
 800baf4:	4013      	ands	r3, r2
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bb06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d105      	bne.n	800bb1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f001 fa1a 	bl	800cf54 <USB_CoreReset>
 800bb20:	4603      	mov	r3, r0
 800bb22:	73fb      	strb	r3, [r7, #15]
 800bb24:	e01b      	b.n	800bb5e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f001 fa0e 	bl	800cf54 <USB_CoreReset>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bb3c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d106      	bne.n	800bb52 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	639a      	str	r2, [r3, #56]	; 0x38
 800bb50:	e005      	b.n	800bb5e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bb5e:	7fbb      	ldrb	r3, [r7, #30]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d116      	bne.n	800bb92 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb72:	4b0d      	ldr	r3, [pc, #52]	; (800bba8 <USB_CoreInit+0xe0>)
 800bb74:	4313      	orrs	r3, r2
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	f043 0206 	orr.w	r2, r3, #6
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	f043 0220 	orr.w	r2, r3, #32
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bb92:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb9e:	b004      	add	sp, #16
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	ffbdffbf 	.word	0xffbdffbf
 800bba8:	03ee0000 	.word	0x03ee0000

0800bbac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b087      	sub	sp, #28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bbba:	79fb      	ldrb	r3, [r7, #7]
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d165      	bne.n	800bc8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	4a41      	ldr	r2, [pc, #260]	; (800bcc8 <USB_SetTurnaroundTime+0x11c>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d906      	bls.n	800bbd6 <USB_SetTurnaroundTime+0x2a>
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	4a40      	ldr	r2, [pc, #256]	; (800bccc <USB_SetTurnaroundTime+0x120>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d202      	bcs.n	800bbd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bbd0:	230f      	movs	r3, #15
 800bbd2:	617b      	str	r3, [r7, #20]
 800bbd4:	e062      	b.n	800bc9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	4a3c      	ldr	r2, [pc, #240]	; (800bccc <USB_SetTurnaroundTime+0x120>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d306      	bcc.n	800bbec <USB_SetTurnaroundTime+0x40>
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	4a3b      	ldr	r2, [pc, #236]	; (800bcd0 <USB_SetTurnaroundTime+0x124>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d202      	bcs.n	800bbec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bbe6:	230e      	movs	r3, #14
 800bbe8:	617b      	str	r3, [r7, #20]
 800bbea:	e057      	b.n	800bc9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	4a38      	ldr	r2, [pc, #224]	; (800bcd0 <USB_SetTurnaroundTime+0x124>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d306      	bcc.n	800bc02 <USB_SetTurnaroundTime+0x56>
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	4a37      	ldr	r2, [pc, #220]	; (800bcd4 <USB_SetTurnaroundTime+0x128>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d202      	bcs.n	800bc02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bbfc:	230d      	movs	r3, #13
 800bbfe:	617b      	str	r3, [r7, #20]
 800bc00:	e04c      	b.n	800bc9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	4a33      	ldr	r2, [pc, #204]	; (800bcd4 <USB_SetTurnaroundTime+0x128>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d306      	bcc.n	800bc18 <USB_SetTurnaroundTime+0x6c>
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	4a32      	ldr	r2, [pc, #200]	; (800bcd8 <USB_SetTurnaroundTime+0x12c>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d802      	bhi.n	800bc18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bc12:	230c      	movs	r3, #12
 800bc14:	617b      	str	r3, [r7, #20]
 800bc16:	e041      	b.n	800bc9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	4a2f      	ldr	r2, [pc, #188]	; (800bcd8 <USB_SetTurnaroundTime+0x12c>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d906      	bls.n	800bc2e <USB_SetTurnaroundTime+0x82>
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	4a2e      	ldr	r2, [pc, #184]	; (800bcdc <USB_SetTurnaroundTime+0x130>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d802      	bhi.n	800bc2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bc28:	230b      	movs	r3, #11
 800bc2a:	617b      	str	r3, [r7, #20]
 800bc2c:	e036      	b.n	800bc9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	4a2a      	ldr	r2, [pc, #168]	; (800bcdc <USB_SetTurnaroundTime+0x130>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d906      	bls.n	800bc44 <USB_SetTurnaroundTime+0x98>
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	4a29      	ldr	r2, [pc, #164]	; (800bce0 <USB_SetTurnaroundTime+0x134>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d802      	bhi.n	800bc44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bc3e:	230a      	movs	r3, #10
 800bc40:	617b      	str	r3, [r7, #20]
 800bc42:	e02b      	b.n	800bc9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	4a26      	ldr	r2, [pc, #152]	; (800bce0 <USB_SetTurnaroundTime+0x134>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d906      	bls.n	800bc5a <USB_SetTurnaroundTime+0xae>
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	4a25      	ldr	r2, [pc, #148]	; (800bce4 <USB_SetTurnaroundTime+0x138>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d202      	bcs.n	800bc5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bc54:	2309      	movs	r3, #9
 800bc56:	617b      	str	r3, [r7, #20]
 800bc58:	e020      	b.n	800bc9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	4a21      	ldr	r2, [pc, #132]	; (800bce4 <USB_SetTurnaroundTime+0x138>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d306      	bcc.n	800bc70 <USB_SetTurnaroundTime+0xc4>
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	4a20      	ldr	r2, [pc, #128]	; (800bce8 <USB_SetTurnaroundTime+0x13c>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d802      	bhi.n	800bc70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bc6a:	2308      	movs	r3, #8
 800bc6c:	617b      	str	r3, [r7, #20]
 800bc6e:	e015      	b.n	800bc9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	4a1d      	ldr	r2, [pc, #116]	; (800bce8 <USB_SetTurnaroundTime+0x13c>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d906      	bls.n	800bc86 <USB_SetTurnaroundTime+0xda>
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	4a1c      	ldr	r2, [pc, #112]	; (800bcec <USB_SetTurnaroundTime+0x140>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d202      	bcs.n	800bc86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bc80:	2307      	movs	r3, #7
 800bc82:	617b      	str	r3, [r7, #20]
 800bc84:	e00a      	b.n	800bc9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bc86:	2306      	movs	r3, #6
 800bc88:	617b      	str	r3, [r7, #20]
 800bc8a:	e007      	b.n	800bc9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bc8c:	79fb      	ldrb	r3, [r7, #7]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d102      	bne.n	800bc98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bc92:	2309      	movs	r3, #9
 800bc94:	617b      	str	r3, [r7, #20]
 800bc96:	e001      	b.n	800bc9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bc98:	2309      	movs	r3, #9
 800bc9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	68da      	ldr	r2, [r3, #12]
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	029b      	lsls	r3, r3, #10
 800bcb0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bcb4:	431a      	orrs	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	371c      	adds	r7, #28
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	00d8acbf 	.word	0x00d8acbf
 800bccc:	00e4e1c0 	.word	0x00e4e1c0
 800bcd0:	00f42400 	.word	0x00f42400
 800bcd4:	01067380 	.word	0x01067380
 800bcd8:	011a499f 	.word	0x011a499f
 800bcdc:	01312cff 	.word	0x01312cff
 800bce0:	014ca43f 	.word	0x014ca43f
 800bce4:	016e3600 	.word	0x016e3600
 800bce8:	01a6ab1f 	.word	0x01a6ab1f
 800bcec:	01e84800 	.word	0x01e84800

0800bcf0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	f043 0201 	orr.w	r2, r3, #1
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd12:	b480      	push	{r7}
 800bd14:	b083      	sub	sp, #12
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	f023 0201 	bic.w	r2, r3, #1
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bd40:	2300      	movs	r3, #0
 800bd42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bd50:	78fb      	ldrb	r3, [r7, #3]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d115      	bne.n	800bd82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bd62:	200a      	movs	r0, #10
 800bd64:	f7f6 f83c 	bl	8001de0 <HAL_Delay>
      ms += 10U;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	330a      	adds	r3, #10
 800bd6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f001 f85f 	bl	800ce32 <USB_GetMode>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d01e      	beq.n	800bdb8 <USB_SetCurrentMode+0x84>
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2bc7      	cmp	r3, #199	; 0xc7
 800bd7e:	d9f0      	bls.n	800bd62 <USB_SetCurrentMode+0x2e>
 800bd80:	e01a      	b.n	800bdb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bd82:	78fb      	ldrb	r3, [r7, #3]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d115      	bne.n	800bdb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bd94:	200a      	movs	r0, #10
 800bd96:	f7f6 f823 	bl	8001de0 <HAL_Delay>
      ms += 10U;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	330a      	adds	r3, #10
 800bd9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f001 f846 	bl	800ce32 <USB_GetMode>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d005      	beq.n	800bdb8 <USB_SetCurrentMode+0x84>
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2bc7      	cmp	r3, #199	; 0xc7
 800bdb0:	d9f0      	bls.n	800bd94 <USB_SetCurrentMode+0x60>
 800bdb2:	e001      	b.n	800bdb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e005      	b.n	800bdc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2bc8      	cmp	r3, #200	; 0xc8
 800bdbc:	d101      	bne.n	800bdc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e000      	b.n	800bdc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bdcc:	b084      	sub	sp, #16
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b086      	sub	sp, #24
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bdda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bdde:	2300      	movs	r3, #0
 800bde0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bde6:	2300      	movs	r3, #0
 800bde8:	613b      	str	r3, [r7, #16]
 800bdea:	e009      	b.n	800be00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	3340      	adds	r3, #64	; 0x40
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	4413      	add	r3, r2
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	613b      	str	r3, [r7, #16]
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	2b0e      	cmp	r3, #14
 800be04:	d9f2      	bls.n	800bdec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800be06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d11c      	bne.n	800be48 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be1c:	f043 0302 	orr.w	r3, r3, #2
 800be20:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	601a      	str	r2, [r3, #0]
 800be46:	e005      	b.n	800be54 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be5a:	461a      	mov	r2, r3
 800be5c:	2300      	movs	r3, #0
 800be5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be60:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800be64:	2b01      	cmp	r3, #1
 800be66:	d10d      	bne.n	800be84 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800be68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d104      	bne.n	800be7a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800be70:	2100      	movs	r1, #0
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f968 	bl	800c148 <USB_SetDevSpeed>
 800be78:	e008      	b.n	800be8c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800be7a:	2101      	movs	r1, #1
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 f963 	bl	800c148 <USB_SetDevSpeed>
 800be82:	e003      	b.n	800be8c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800be84:	2103      	movs	r1, #3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f95e 	bl	800c148 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800be8c:	2110      	movs	r1, #16
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 f8fa 	bl	800c088 <USB_FlushTxFifo>
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d001      	beq.n	800be9e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f924 	bl	800c0ec <USB_FlushRxFifo>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d001      	beq.n	800beae <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beb4:	461a      	mov	r2, r3
 800beb6:	2300      	movs	r3, #0
 800beb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bec0:	461a      	mov	r2, r3
 800bec2:	2300      	movs	r3, #0
 800bec4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800becc:	461a      	mov	r2, r3
 800bece:	2300      	movs	r3, #0
 800bed0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bed2:	2300      	movs	r3, #0
 800bed4:	613b      	str	r3, [r7, #16]
 800bed6:	e043      	b.n	800bf60 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	015a      	lsls	r2, r3, #5
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	4413      	add	r3, r2
 800bee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800beea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800beee:	d118      	bne.n	800bf22 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d10a      	bne.n	800bf0c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	015a      	lsls	r2, r3, #5
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	4413      	add	r3, r2
 800befe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf02:	461a      	mov	r2, r3
 800bf04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bf08:	6013      	str	r3, [r2, #0]
 800bf0a:	e013      	b.n	800bf34 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	015a      	lsls	r2, r3, #5
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf18:	461a      	mov	r2, r3
 800bf1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bf1e:	6013      	str	r3, [r2, #0]
 800bf20:	e008      	b.n	800bf34 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	015a      	lsls	r2, r3, #5
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	4413      	add	r3, r2
 800bf2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf2e:	461a      	mov	r2, r3
 800bf30:	2300      	movs	r3, #0
 800bf32:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	015a      	lsls	r2, r3, #5
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf40:	461a      	mov	r2, r3
 800bf42:	2300      	movs	r3, #0
 800bf44:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	015a      	lsls	r2, r3, #5
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf52:	461a      	mov	r2, r3
 800bf54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bf58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	613b      	str	r3, [r7, #16]
 800bf60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf64:	461a      	mov	r2, r3
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d3b5      	bcc.n	800bed8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	613b      	str	r3, [r7, #16]
 800bf70:	e043      	b.n	800bffa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	015a      	lsls	r2, r3, #5
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	4413      	add	r3, r2
 800bf7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf88:	d118      	bne.n	800bfbc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10a      	bne.n	800bfa6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bfa2:	6013      	str	r3, [r2, #0]
 800bfa4:	e013      	b.n	800bfce <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	015a      	lsls	r2, r3, #5
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	4413      	add	r3, r2
 800bfae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bfb8:	6013      	str	r3, [r2, #0]
 800bfba:	e008      	b.n	800bfce <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	015a      	lsls	r2, r3, #5
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfc8:	461a      	mov	r2, r3
 800bfca:	2300      	movs	r3, #0
 800bfcc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	015a      	lsls	r2, r3, #5
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfda:	461a      	mov	r2, r3
 800bfdc:	2300      	movs	r3, #0
 800bfde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	015a      	lsls	r2, r3, #5
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfec:	461a      	mov	r2, r3
 800bfee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bff2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	3301      	adds	r3, #1
 800bff8:	613b      	str	r3, [r7, #16]
 800bffa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bffe:	461a      	mov	r2, r3
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	4293      	cmp	r3, r2
 800c004:	d3b5      	bcc.n	800bf72 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c018:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c026:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d105      	bne.n	800c03c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	f043 0210 	orr.w	r2, r3, #16
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	699a      	ldr	r2, [r3, #24]
 800c040:	4b0f      	ldr	r3, [pc, #60]	; (800c080 <USB_DevInit+0x2b4>)
 800c042:	4313      	orrs	r3, r2
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c048:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d005      	beq.n	800c05c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	699b      	ldr	r3, [r3, #24]
 800c054:	f043 0208 	orr.w	r2, r3, #8
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c05c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c060:	2b01      	cmp	r3, #1
 800c062:	d105      	bne.n	800c070 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	699a      	ldr	r2, [r3, #24]
 800c068:	4b06      	ldr	r3, [pc, #24]	; (800c084 <USB_DevInit+0x2b8>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c070:	7dfb      	ldrb	r3, [r7, #23]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3718      	adds	r7, #24
 800c076:	46bd      	mov	sp, r7
 800c078:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c07c:	b004      	add	sp, #16
 800c07e:	4770      	bx	lr
 800c080:	803c3800 	.word	0x803c3800
 800c084:	40000004 	.word	0x40000004

0800c088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c092:	2300      	movs	r3, #0
 800c094:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	3301      	adds	r3, #1
 800c09a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c0a2:	d901      	bls.n	800c0a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	e01b      	b.n	800c0e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	daf2      	bge.n	800c096 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	019b      	lsls	r3, r3, #6
 800c0b8:	f043 0220 	orr.w	r2, r3, #32
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c0cc:	d901      	bls.n	800c0d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	e006      	b.n	800c0e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	f003 0320 	and.w	r3, r3, #32
 800c0da:	2b20      	cmp	r3, #32
 800c0dc:	d0f0      	beq.n	800c0c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3714      	adds	r7, #20
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c104:	d901      	bls.n	800c10a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c106:	2303      	movs	r3, #3
 800c108:	e018      	b.n	800c13c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	691b      	ldr	r3, [r3, #16]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	daf2      	bge.n	800c0f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c112:	2300      	movs	r3, #0
 800c114:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2210      	movs	r2, #16
 800c11a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	3301      	adds	r3, #1
 800c120:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c128:	d901      	bls.n	800c12e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c12a:	2303      	movs	r3, #3
 800c12c:	e006      	b.n	800c13c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	f003 0310 	and.w	r3, r3, #16
 800c136:	2b10      	cmp	r3, #16
 800c138:	d0f0      	beq.n	800c11c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3714      	adds	r7, #20
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	460b      	mov	r3, r1
 800c152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	78fb      	ldrb	r3, [r7, #3]
 800c162:	68f9      	ldr	r1, [r7, #12]
 800c164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c168:	4313      	orrs	r3, r2
 800c16a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3714      	adds	r7, #20
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr

0800c17a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c17a:	b480      	push	{r7}
 800c17c:	b087      	sub	sp, #28
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	f003 0306 	and.w	r3, r3, #6
 800c192:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d102      	bne.n	800c1a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c19a:	2300      	movs	r3, #0
 800c19c:	75fb      	strb	r3, [r7, #23]
 800c19e:	e00a      	b.n	800c1b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d002      	beq.n	800c1ac <USB_GetDevSpeed+0x32>
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2b06      	cmp	r3, #6
 800c1aa:	d102      	bne.n	800c1b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c1ac:	2302      	movs	r3, #2
 800c1ae:	75fb      	strb	r3, [r7, #23]
 800c1b0:	e001      	b.n	800c1b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c1b2:	230f      	movs	r3, #15
 800c1b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c1b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	371c      	adds	r7, #28
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	785b      	ldrb	r3, [r3, #1]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d139      	bne.n	800c254 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1e6:	69da      	ldr	r2, [r3, #28]
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	f003 030f 	and.w	r3, r3, #15
 800c1f0:	2101      	movs	r1, #1
 800c1f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	68f9      	ldr	r1, [r7, #12]
 800c1fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1fe:	4313      	orrs	r3, r2
 800c200:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	015a      	lsls	r2, r3, #5
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	4413      	add	r3, r2
 800c20a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d153      	bne.n	800c2c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	015a      	lsls	r2, r3, #5
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	4413      	add	r3, r2
 800c220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	791b      	ldrb	r3, [r3, #4]
 800c232:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c234:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	059b      	lsls	r3, r3, #22
 800c23a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c23c:	431a      	orrs	r2, r3
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	0159      	lsls	r1, r3, #5
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	440b      	add	r3, r1
 800c246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c24a:	4619      	mov	r1, r3
 800c24c:	4b20      	ldr	r3, [pc, #128]	; (800c2d0 <USB_ActivateEndpoint+0x10c>)
 800c24e:	4313      	orrs	r3, r2
 800c250:	600b      	str	r3, [r1, #0]
 800c252:	e035      	b.n	800c2c0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c25a:	69da      	ldr	r2, [r3, #28]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	f003 030f 	and.w	r3, r3, #15
 800c264:	2101      	movs	r1, #1
 800c266:	fa01 f303 	lsl.w	r3, r1, r3
 800c26a:	041b      	lsls	r3, r3, #16
 800c26c:	68f9      	ldr	r1, [r7, #12]
 800c26e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c272:	4313      	orrs	r3, r2
 800c274:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	015a      	lsls	r2, r3, #5
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	4413      	add	r3, r2
 800c27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d119      	bne.n	800c2c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	015a      	lsls	r2, r3, #5
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	4413      	add	r3, r2
 800c294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	791b      	ldrb	r3, [r3, #4]
 800c2a6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c2a8:	430b      	orrs	r3, r1
 800c2aa:	431a      	orrs	r2, r3
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	0159      	lsls	r1, r3, #5
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	440b      	add	r3, r1
 800c2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	4b05      	ldr	r3, [pc, #20]	; (800c2d0 <USB_ActivateEndpoint+0x10c>)
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	10008000 	.word	0x10008000

0800c2d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b08a      	sub	sp, #40	; 0x28
 800c2d8:	af02      	add	r7, sp, #8
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	785b      	ldrb	r3, [r3, #1]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	f040 8181 	bne.w	800c5f8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d132      	bne.n	800c364 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	015a      	lsls	r2, r3, #5
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	4413      	add	r3, r2
 800c306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c30a:	691a      	ldr	r2, [r3, #16]
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	0159      	lsls	r1, r3, #5
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	440b      	add	r3, r1
 800c314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c318:	4619      	mov	r1, r3
 800c31a:	4ba5      	ldr	r3, [pc, #660]	; (800c5b0 <USB_EPStartXfer+0x2dc>)
 800c31c:	4013      	ands	r3, r2
 800c31e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	015a      	lsls	r2, r3, #5
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	4413      	add	r3, r2
 800c328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c32c:	691b      	ldr	r3, [r3, #16]
 800c32e:	69ba      	ldr	r2, [r7, #24]
 800c330:	0151      	lsls	r1, r2, #5
 800c332:	69fa      	ldr	r2, [r7, #28]
 800c334:	440a      	add	r2, r1
 800c336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c33a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c33e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	015a      	lsls	r2, r3, #5
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	4413      	add	r3, r2
 800c348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c34c:	691a      	ldr	r2, [r3, #16]
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	0159      	lsls	r1, r3, #5
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	440b      	add	r3, r1
 800c356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c35a:	4619      	mov	r1, r3
 800c35c:	4b95      	ldr	r3, [pc, #596]	; (800c5b4 <USB_EPStartXfer+0x2e0>)
 800c35e:	4013      	ands	r3, r2
 800c360:	610b      	str	r3, [r1, #16]
 800c362:	e092      	b.n	800c48a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	015a      	lsls	r2, r3, #5
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	4413      	add	r3, r2
 800c36c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c370:	691a      	ldr	r2, [r3, #16]
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	0159      	lsls	r1, r3, #5
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	440b      	add	r3, r1
 800c37a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c37e:	4619      	mov	r1, r3
 800c380:	4b8c      	ldr	r3, [pc, #560]	; (800c5b4 <USB_EPStartXfer+0x2e0>)
 800c382:	4013      	ands	r3, r2
 800c384:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	015a      	lsls	r2, r3, #5
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	4413      	add	r3, r2
 800c38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c392:	691a      	ldr	r2, [r3, #16]
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	0159      	lsls	r1, r3, #5
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	440b      	add	r3, r1
 800c39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	4b83      	ldr	r3, [pc, #524]	; (800c5b0 <USB_EPStartXfer+0x2dc>)
 800c3a4:	4013      	ands	r3, r2
 800c3a6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d11a      	bne.n	800c3e4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	691a      	ldr	r2, [r3, #16]
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d903      	bls.n	800c3c2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	689a      	ldr	r2, [r3, #8]
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	015a      	lsls	r2, r3, #5
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	69ba      	ldr	r2, [r7, #24]
 800c3d2:	0151      	lsls	r1, r2, #5
 800c3d4:	69fa      	ldr	r2, [r7, #28]
 800c3d6:	440a      	add	r2, r1
 800c3d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3e0:	6113      	str	r3, [r2, #16]
 800c3e2:	e01b      	b.n	800c41c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	015a      	lsls	r2, r3, #5
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3f0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	6919      	ldr	r1, [r3, #16]
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	440b      	add	r3, r1
 800c3fc:	1e59      	subs	r1, r3, #1
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	fbb1 f3f3 	udiv	r3, r1, r3
 800c406:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c408:	4b6b      	ldr	r3, [pc, #428]	; (800c5b8 <USB_EPStartXfer+0x2e4>)
 800c40a:	400b      	ands	r3, r1
 800c40c:	69b9      	ldr	r1, [r7, #24]
 800c40e:	0148      	lsls	r0, r1, #5
 800c410:	69f9      	ldr	r1, [r7, #28]
 800c412:	4401      	add	r1, r0
 800c414:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c418:	4313      	orrs	r3, r2
 800c41a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	015a      	lsls	r2, r3, #5
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	4413      	add	r3, r2
 800c424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c428:	691a      	ldr	r2, [r3, #16]
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c432:	69b9      	ldr	r1, [r7, #24]
 800c434:	0148      	lsls	r0, r1, #5
 800c436:	69f9      	ldr	r1, [r7, #28]
 800c438:	4401      	add	r1, r0
 800c43a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c43e:	4313      	orrs	r3, r2
 800c440:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	791b      	ldrb	r3, [r3, #4]
 800c446:	2b01      	cmp	r3, #1
 800c448:	d11f      	bne.n	800c48a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	015a      	lsls	r2, r3, #5
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	4413      	add	r3, r2
 800c452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	69ba      	ldr	r2, [r7, #24]
 800c45a:	0151      	lsls	r1, r2, #5
 800c45c:	69fa      	ldr	r2, [r7, #28]
 800c45e:	440a      	add	r2, r1
 800c460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c464:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c468:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	015a      	lsls	r2, r3, #5
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	4413      	add	r3, r2
 800c472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c476:	691b      	ldr	r3, [r3, #16]
 800c478:	69ba      	ldr	r2, [r7, #24]
 800c47a:	0151      	lsls	r1, r2, #5
 800c47c:	69fa      	ldr	r2, [r7, #28]
 800c47e:	440a      	add	r2, r1
 800c480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c484:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c488:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c48a:	79fb      	ldrb	r3, [r7, #7]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d14b      	bne.n	800c528 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	69db      	ldr	r3, [r3, #28]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d009      	beq.n	800c4ac <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	015a      	lsls	r2, r3, #5
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	4413      	add	r3, r2
 800c4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	69db      	ldr	r3, [r3, #28]
 800c4aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	791b      	ldrb	r3, [r3, #4]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d128      	bne.n	800c506 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d110      	bne.n	800c4e6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	015a      	lsls	r2, r3, #5
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	69ba      	ldr	r2, [r7, #24]
 800c4d4:	0151      	lsls	r1, r2, #5
 800c4d6:	69fa      	ldr	r2, [r7, #28]
 800c4d8:	440a      	add	r2, r1
 800c4da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c4e2:	6013      	str	r3, [r2, #0]
 800c4e4:	e00f      	b.n	800c506 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	015a      	lsls	r2, r3, #5
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	69ba      	ldr	r2, [r7, #24]
 800c4f6:	0151      	lsls	r1, r2, #5
 800c4f8:	69fa      	ldr	r2, [r7, #28]
 800c4fa:	440a      	add	r2, r1
 800c4fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c504:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	015a      	lsls	r2, r3, #5
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	4413      	add	r3, r2
 800c50e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	69ba      	ldr	r2, [r7, #24]
 800c516:	0151      	lsls	r1, r2, #5
 800c518:	69fa      	ldr	r2, [r7, #28]
 800c51a:	440a      	add	r2, r1
 800c51c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c520:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c524:	6013      	str	r3, [r2, #0]
 800c526:	e16a      	b.n	800c7fe <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	015a      	lsls	r2, r3, #5
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	4413      	add	r3, r2
 800c530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	69ba      	ldr	r2, [r7, #24]
 800c538:	0151      	lsls	r1, r2, #5
 800c53a:	69fa      	ldr	r2, [r7, #28]
 800c53c:	440a      	add	r2, r1
 800c53e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c542:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c546:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	791b      	ldrb	r3, [r3, #4]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d015      	beq.n	800c57c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	691b      	ldr	r3, [r3, #16]
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 8152 	beq.w	800c7fe <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	f003 030f 	and.w	r3, r3, #15
 800c56a:	2101      	movs	r1, #1
 800c56c:	fa01 f303 	lsl.w	r3, r1, r3
 800c570:	69f9      	ldr	r1, [r7, #28]
 800c572:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c576:	4313      	orrs	r3, r2
 800c578:	634b      	str	r3, [r1, #52]	; 0x34
 800c57a:	e140      	b.n	800c7fe <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d117      	bne.n	800c5bc <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	015a      	lsls	r2, r3, #5
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	4413      	add	r3, r2
 800c594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	69ba      	ldr	r2, [r7, #24]
 800c59c:	0151      	lsls	r1, r2, #5
 800c59e:	69fa      	ldr	r2, [r7, #28]
 800c5a0:	440a      	add	r2, r1
 800c5a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5aa:	6013      	str	r3, [r2, #0]
 800c5ac:	e016      	b.n	800c5dc <USB_EPStartXfer+0x308>
 800c5ae:	bf00      	nop
 800c5b0:	e007ffff 	.word	0xe007ffff
 800c5b4:	fff80000 	.word	0xfff80000
 800c5b8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	015a      	lsls	r2, r3, #5
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	69ba      	ldr	r2, [r7, #24]
 800c5cc:	0151      	lsls	r1, r2, #5
 800c5ce:	69fa      	ldr	r2, [r7, #28]
 800c5d0:	440a      	add	r2, r1
 800c5d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	68d9      	ldr	r1, [r3, #12]
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	781a      	ldrb	r2, [r3, #0]
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	691b      	ldr	r3, [r3, #16]
 800c5e8:	b298      	uxth	r0, r3
 800c5ea:	79fb      	ldrb	r3, [r7, #7]
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f000 f9b9 	bl	800c968 <USB_WritePacket>
 800c5f6:	e102      	b.n	800c7fe <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	015a      	lsls	r2, r3, #5
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	4413      	add	r3, r2
 800c600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c604:	691a      	ldr	r2, [r3, #16]
 800c606:	69bb      	ldr	r3, [r7, #24]
 800c608:	0159      	lsls	r1, r3, #5
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	440b      	add	r3, r1
 800c60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c612:	4619      	mov	r1, r3
 800c614:	4b7c      	ldr	r3, [pc, #496]	; (800c808 <USB_EPStartXfer+0x534>)
 800c616:	4013      	ands	r3, r2
 800c618:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	015a      	lsls	r2, r3, #5
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	4413      	add	r3, r2
 800c622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c626:	691a      	ldr	r2, [r3, #16]
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	0159      	lsls	r1, r3, #5
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	440b      	add	r3, r1
 800c630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c634:	4619      	mov	r1, r3
 800c636:	4b75      	ldr	r3, [pc, #468]	; (800c80c <USB_EPStartXfer+0x538>)
 800c638:	4013      	ands	r3, r2
 800c63a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c63c:	69bb      	ldr	r3, [r7, #24]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d12f      	bne.n	800c6a2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d003      	beq.n	800c652 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	689a      	ldr	r2, [r3, #8]
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	689a      	ldr	r2, [r3, #8]
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	015a      	lsls	r2, r3, #5
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	4413      	add	r3, r2
 800c662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c666:	691a      	ldr	r2, [r3, #16]
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	6a1b      	ldr	r3, [r3, #32]
 800c66c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c670:	69b9      	ldr	r1, [r7, #24]
 800c672:	0148      	lsls	r0, r1, #5
 800c674:	69f9      	ldr	r1, [r7, #28]
 800c676:	4401      	add	r1, r0
 800c678:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c67c:	4313      	orrs	r3, r2
 800c67e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	015a      	lsls	r2, r3, #5
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	4413      	add	r3, r2
 800c688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	69ba      	ldr	r2, [r7, #24]
 800c690:	0151      	lsls	r1, r2, #5
 800c692:	69fa      	ldr	r2, [r7, #28]
 800c694:	440a      	add	r2, r1
 800c696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c69a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c69e:	6113      	str	r3, [r2, #16]
 800c6a0:	e05f      	b.n	800c762 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d123      	bne.n	800c6f2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	015a      	lsls	r2, r3, #5
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6b6:	691a      	ldr	r2, [r3, #16]
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6c0:	69b9      	ldr	r1, [r7, #24]
 800c6c2:	0148      	lsls	r0, r1, #5
 800c6c4:	69f9      	ldr	r1, [r7, #28]
 800c6c6:	4401      	add	r1, r0
 800c6c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	015a      	lsls	r2, r3, #5
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	69ba      	ldr	r2, [r7, #24]
 800c6e0:	0151      	lsls	r1, r2, #5
 800c6e2:	69fa      	ldr	r2, [r7, #28]
 800c6e4:	440a      	add	r2, r1
 800c6e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6ee:	6113      	str	r3, [r2, #16]
 800c6f0:	e037      	b.n	800c762 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	691a      	ldr	r2, [r3, #16]
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	1e5a      	subs	r2, r3, #1
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	fbb2 f3f3 	udiv	r3, r2, r3
 800c706:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	8afa      	ldrh	r2, [r7, #22]
 800c70e:	fb03 f202 	mul.w	r2, r3, r2
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	015a      	lsls	r2, r3, #5
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	4413      	add	r3, r2
 800c71e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c722:	691a      	ldr	r2, [r3, #16]
 800c724:	8afb      	ldrh	r3, [r7, #22]
 800c726:	04d9      	lsls	r1, r3, #19
 800c728:	4b39      	ldr	r3, [pc, #228]	; (800c810 <USB_EPStartXfer+0x53c>)
 800c72a:	400b      	ands	r3, r1
 800c72c:	69b9      	ldr	r1, [r7, #24]
 800c72e:	0148      	lsls	r0, r1, #5
 800c730:	69f9      	ldr	r1, [r7, #28]
 800c732:	4401      	add	r1, r0
 800c734:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c738:	4313      	orrs	r3, r2
 800c73a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	015a      	lsls	r2, r3, #5
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	4413      	add	r3, r2
 800c744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c748:	691a      	ldr	r2, [r3, #16]
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	6a1b      	ldr	r3, [r3, #32]
 800c74e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c752:	69b9      	ldr	r1, [r7, #24]
 800c754:	0148      	lsls	r0, r1, #5
 800c756:	69f9      	ldr	r1, [r7, #28]
 800c758:	4401      	add	r1, r0
 800c75a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c75e:	4313      	orrs	r3, r2
 800c760:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c762:	79fb      	ldrb	r3, [r7, #7]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d10d      	bne.n	800c784 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d009      	beq.n	800c784 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	68d9      	ldr	r1, [r3, #12]
 800c774:	69bb      	ldr	r3, [r7, #24]
 800c776:	015a      	lsls	r2, r3, #5
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	4413      	add	r3, r2
 800c77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c780:	460a      	mov	r2, r1
 800c782:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	791b      	ldrb	r3, [r3, #4]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d128      	bne.n	800c7de <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d110      	bne.n	800c7be <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	015a      	lsls	r2, r3, #5
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	69ba      	ldr	r2, [r7, #24]
 800c7ac:	0151      	lsls	r1, r2, #5
 800c7ae:	69fa      	ldr	r2, [r7, #28]
 800c7b0:	440a      	add	r2, r1
 800c7b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7ba:	6013      	str	r3, [r2, #0]
 800c7bc:	e00f      	b.n	800c7de <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	015a      	lsls	r2, r3, #5
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	69ba      	ldr	r2, [r7, #24]
 800c7ce:	0151      	lsls	r1, r2, #5
 800c7d0:	69fa      	ldr	r2, [r7, #28]
 800c7d2:	440a      	add	r2, r1
 800c7d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7dc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	015a      	lsls	r2, r3, #5
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	69ba      	ldr	r2, [r7, #24]
 800c7ee:	0151      	lsls	r1, r2, #5
 800c7f0:	69fa      	ldr	r2, [r7, #28]
 800c7f2:	440a      	add	r2, r1
 800c7f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c7fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c7fe:	2300      	movs	r3, #0
}
 800c800:	4618      	mov	r0, r3
 800c802:	3720      	adds	r7, #32
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	fff80000 	.word	0xfff80000
 800c80c:	e007ffff 	.word	0xe007ffff
 800c810:	1ff80000 	.word	0x1ff80000

0800c814 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c814:	b480      	push	{r7}
 800c816:	b087      	sub	sp, #28
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c81e:	2300      	movs	r3, #0
 800c820:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c822:	2300      	movs	r3, #0
 800c824:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	785b      	ldrb	r3, [r3, #1]
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d14a      	bne.n	800c8c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	015a      	lsls	r2, r3, #5
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	4413      	add	r3, r2
 800c83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c84a:	f040 8086 	bne.w	800c95a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	015a      	lsls	r2, r3, #5
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	4413      	add	r3, r2
 800c858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	683a      	ldr	r2, [r7, #0]
 800c860:	7812      	ldrb	r2, [r2, #0]
 800c862:	0151      	lsls	r1, r2, #5
 800c864:	693a      	ldr	r2, [r7, #16]
 800c866:	440a      	add	r2, r1
 800c868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c86c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c870:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	015a      	lsls	r2, r3, #5
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	4413      	add	r3, r2
 800c87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	683a      	ldr	r2, [r7, #0]
 800c884:	7812      	ldrb	r2, [r2, #0]
 800c886:	0151      	lsls	r1, r2, #5
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	440a      	add	r2, r1
 800c88c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c894:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	3301      	adds	r3, #1
 800c89a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f242 7210 	movw	r2, #10000	; 0x2710
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d902      	bls.n	800c8ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	75fb      	strb	r3, [r7, #23]
          break;
 800c8aa:	e056      	b.n	800c95a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	015a      	lsls	r2, r3, #5
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8c4:	d0e7      	beq.n	800c896 <USB_EPStopXfer+0x82>
 800c8c6:	e048      	b.n	800c95a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	015a      	lsls	r2, r3, #5
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8e0:	d13b      	bne.n	800c95a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	015a      	lsls	r2, r3, #5
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	683a      	ldr	r2, [r7, #0]
 800c8f4:	7812      	ldrb	r2, [r2, #0]
 800c8f6:	0151      	lsls	r1, r2, #5
 800c8f8:	693a      	ldr	r2, [r7, #16]
 800c8fa:	440a      	add	r2, r1
 800c8fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c900:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c904:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	015a      	lsls	r2, r3, #5
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	4413      	add	r3, r2
 800c910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	683a      	ldr	r2, [r7, #0]
 800c918:	7812      	ldrb	r2, [r2, #0]
 800c91a:	0151      	lsls	r1, r2, #5
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	440a      	add	r2, r1
 800c920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c924:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c928:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	3301      	adds	r3, #1
 800c92e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f242 7210 	movw	r2, #10000	; 0x2710
 800c936:	4293      	cmp	r3, r2
 800c938:	d902      	bls.n	800c940 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c93a:	2301      	movs	r3, #1
 800c93c:	75fb      	strb	r3, [r7, #23]
          break;
 800c93e:	e00c      	b.n	800c95a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	015a      	lsls	r2, r3, #5
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	4413      	add	r3, r2
 800c94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c958:	d0e7      	beq.n	800c92a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c95a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	371c      	adds	r7, #28
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c968:	b480      	push	{r7}
 800c96a:	b089      	sub	sp, #36	; 0x24
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	4611      	mov	r1, r2
 800c974:	461a      	mov	r2, r3
 800c976:	460b      	mov	r3, r1
 800c978:	71fb      	strb	r3, [r7, #7]
 800c97a:	4613      	mov	r3, r2
 800c97c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c986:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d123      	bne.n	800c9d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c98e:	88bb      	ldrh	r3, [r7, #4]
 800c990:	3303      	adds	r3, #3
 800c992:	089b      	lsrs	r3, r3, #2
 800c994:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c996:	2300      	movs	r3, #0
 800c998:	61bb      	str	r3, [r7, #24]
 800c99a:	e018      	b.n	800c9ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c99c:	79fb      	ldrb	r3, [r7, #7]
 800c99e:	031a      	lsls	r2, r3, #12
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	61bb      	str	r3, [r7, #24]
 800c9ce:	69ba      	ldr	r2, [r7, #24]
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d3e2      	bcc.n	800c99c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3724      	adds	r7, #36	; 0x24
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b08b      	sub	sp, #44	; 0x2c
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c9fa:	88fb      	ldrh	r3, [r7, #6]
 800c9fc:	089b      	lsrs	r3, r3, #2
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ca02:	88fb      	ldrh	r3, [r7, #6]
 800ca04:	f003 0303 	and.w	r3, r3, #3
 800ca08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	623b      	str	r3, [r7, #32]
 800ca0e:	e014      	b.n	800ca3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1e:	3301      	adds	r3, #1
 800ca20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca24:	3301      	adds	r3, #1
 800ca26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca30:	3301      	adds	r3, #1
 800ca32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	3301      	adds	r3, #1
 800ca38:	623b      	str	r3, [r7, #32]
 800ca3a:	6a3a      	ldr	r2, [r7, #32]
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d3e6      	bcc.n	800ca10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ca42:	8bfb      	ldrh	r3, [r7, #30]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d01e      	beq.n	800ca86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca52:	461a      	mov	r2, r3
 800ca54:	f107 0310 	add.w	r3, r7, #16
 800ca58:	6812      	ldr	r2, [r2, #0]
 800ca5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ca5c:	693a      	ldr	r2, [r7, #16]
 800ca5e:	6a3b      	ldr	r3, [r7, #32]
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	00db      	lsls	r3, r3, #3
 800ca64:	fa22 f303 	lsr.w	r3, r2, r3
 800ca68:	b2da      	uxtb	r2, r3
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6c:	701a      	strb	r2, [r3, #0]
      i++;
 800ca6e:	6a3b      	ldr	r3, [r7, #32]
 800ca70:	3301      	adds	r3, #1
 800ca72:	623b      	str	r3, [r7, #32]
      pDest++;
 800ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca76:	3301      	adds	r3, #1
 800ca78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ca7a:	8bfb      	ldrh	r3, [r7, #30]
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ca80:	8bfb      	ldrh	r3, [r7, #30]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d1ea      	bne.n	800ca5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ca86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	372c      	adds	r7, #44	; 0x2c
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	785b      	ldrb	r3, [r3, #1]
 800caac:	2b01      	cmp	r3, #1
 800caae:	d12c      	bne.n	800cb0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	015a      	lsls	r2, r3, #5
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	4413      	add	r3, r2
 800cab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	db12      	blt.n	800cae8 <USB_EPSetStall+0x54>
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00f      	beq.n	800cae8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	015a      	lsls	r2, r3, #5
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	4413      	add	r3, r2
 800cad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	0151      	lsls	r1, r2, #5
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	440a      	add	r2, r1
 800cade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cae2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cae6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	015a      	lsls	r2, r3, #5
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	4413      	add	r3, r2
 800caf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	0151      	lsls	r1, r2, #5
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	440a      	add	r2, r1
 800cafe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cb06:	6013      	str	r3, [r2, #0]
 800cb08:	e02b      	b.n	800cb62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	015a      	lsls	r2, r3, #5
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	4413      	add	r3, r2
 800cb12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	db12      	blt.n	800cb42 <USB_EPSetStall+0xae>
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00f      	beq.n	800cb42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	015a      	lsls	r2, r3, #5
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	4413      	add	r3, r2
 800cb2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	0151      	lsls	r1, r2, #5
 800cb34:	68fa      	ldr	r2, [r7, #12]
 800cb36:	440a      	add	r2, r1
 800cb38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cb40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	015a      	lsls	r2, r3, #5
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	4413      	add	r3, r2
 800cb4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	0151      	lsls	r1, r2, #5
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	440a      	add	r2, r1
 800cb58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cb60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3714      	adds	r7, #20
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	785b      	ldrb	r3, [r3, #1]
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d128      	bne.n	800cbde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	015a      	lsls	r2, r3, #5
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	4413      	add	r3, r2
 800cb94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	0151      	lsls	r1, r2, #5
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	440a      	add	r2, r1
 800cba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cba6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cbaa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	791b      	ldrb	r3, [r3, #4]
 800cbb0:	2b03      	cmp	r3, #3
 800cbb2:	d003      	beq.n	800cbbc <USB_EPClearStall+0x4c>
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	791b      	ldrb	r3, [r3, #4]
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d138      	bne.n	800cc2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	015a      	lsls	r2, r3, #5
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	0151      	lsls	r1, r2, #5
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	440a      	add	r2, r1
 800cbd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbda:	6013      	str	r3, [r2, #0]
 800cbdc:	e027      	b.n	800cc2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	015a      	lsls	r2, r3, #5
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	0151      	lsls	r1, r2, #5
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	440a      	add	r2, r1
 800cbf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cbfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	791b      	ldrb	r3, [r3, #4]
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d003      	beq.n	800cc0e <USB_EPClearStall+0x9e>
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	791b      	ldrb	r3, [r3, #4]
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	d10f      	bne.n	800cc2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	015a      	lsls	r2, r3, #5
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	4413      	add	r3, r2
 800cc16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	68ba      	ldr	r2, [r7, #8]
 800cc1e:	0151      	lsls	r1, r2, #5
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	440a      	add	r2, r1
 800cc24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	460b      	mov	r3, r1
 800cc46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cc5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	78fb      	ldrb	r3, [r7, #3]
 800cc6a:	011b      	lsls	r3, r3, #4
 800cc6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cc70:	68f9      	ldr	r1, [r7, #12]
 800cc72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc76:	4313      	orrs	r3, r2
 800cc78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3714      	adds	r7, #20
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cca2:	f023 0303 	bic.w	r3, r3, #3
 800cca6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccb6:	f023 0302 	bic.w	r3, r3, #2
 800ccba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3714      	adds	r7, #20
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr

0800ccca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ccca:	b480      	push	{r7}
 800cccc:	b085      	sub	sp, #20
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cce4:	f023 0303 	bic.w	r3, r3, #3
 800cce8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccf8:	f043 0302 	orr.w	r3, r3, #2
 800ccfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3714      	adds	r7, #20
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	695b      	ldr	r3, [r3, #20]
 800cd18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	699b      	ldr	r3, [r3, #24]
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	4013      	ands	r3, r2
 800cd22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cd24:	68fb      	ldr	r3, [r7, #12]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3714      	adds	r7, #20
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr

0800cd32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cd32:	b480      	push	{r7}
 800cd34:	b085      	sub	sp, #20
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd44:	699b      	ldr	r3, [r3, #24]
 800cd46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd4e:	69db      	ldr	r3, [r3, #28]
 800cd50:	68ba      	ldr	r2, [r7, #8]
 800cd52:	4013      	ands	r3, r2
 800cd54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	0c1b      	lsrs	r3, r3, #16
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3714      	adds	r7, #20
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cd66:	b480      	push	{r7}
 800cd68:	b085      	sub	sp, #20
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd78:	699b      	ldr	r3, [r3, #24]
 800cd7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd82:	69db      	ldr	r3, [r3, #28]
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	4013      	ands	r3, r2
 800cd88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	b29b      	uxth	r3, r3
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3714      	adds	r7, #20
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr

0800cd9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cd9a:	b480      	push	{r7}
 800cd9c:	b085      	sub	sp, #20
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	460b      	mov	r3, r1
 800cda4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cdaa:	78fb      	ldrb	r3, [r7, #3]
 800cdac:	015a      	lsls	r2, r3, #5
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdb6:	689b      	ldr	r3, [r3, #8]
 800cdb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdc0:	695b      	ldr	r3, [r3, #20]
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	4013      	ands	r3, r2
 800cdc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cdc8:	68bb      	ldr	r3, [r7, #8]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3714      	adds	r7, #20
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	b087      	sub	sp, #28
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	460b      	mov	r3, r1
 800cde0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdec:	691b      	ldr	r3, [r3, #16]
 800cdee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cdfa:	78fb      	ldrb	r3, [r7, #3]
 800cdfc:	f003 030f 	and.w	r3, r3, #15
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	fa22 f303 	lsr.w	r3, r2, r3
 800ce06:	01db      	lsls	r3, r3, #7
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	693a      	ldr	r2, [r7, #16]
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ce10:	78fb      	ldrb	r3, [r7, #3]
 800ce12:	015a      	lsls	r2, r3, #5
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	4413      	add	r3, r2
 800ce18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	693a      	ldr	r2, [r7, #16]
 800ce20:	4013      	ands	r3, r2
 800ce22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ce24:	68bb      	ldr	r3, [r7, #8]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	371c      	adds	r7, #28
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr

0800ce32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce32:	b480      	push	{r7}
 800ce34:	b083      	sub	sp, #12
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	f003 0301 	and.w	r3, r3, #1
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	370c      	adds	r7, #12
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
	...

0800ce50 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4b09      	ldr	r3, [pc, #36]	; (800ce94 <USB_ActivateSetup+0x44>)
 800ce6e:	4013      	ands	r3, r2
 800ce70:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3714      	adds	r7, #20
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr
 800ce94:	fffff800 	.word	0xfffff800

0800ce98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b087      	sub	sp, #28
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	460b      	mov	r3, r1
 800cea2:	607a      	str	r2, [r7, #4]
 800cea4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	333c      	adds	r3, #60	; 0x3c
 800ceae:	3304      	adds	r3, #4
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	4a26      	ldr	r2, [pc, #152]	; (800cf50 <USB_EP0_OutStart+0xb8>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d90a      	bls.n	800ced2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cecc:	d101      	bne.n	800ced2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	e037      	b.n	800cf42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced8:	461a      	mov	r2, r3
 800ceda:	2300      	movs	r3, #0
 800cedc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	697a      	ldr	r2, [r7, #20]
 800cee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cef0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cef8:	691b      	ldr	r3, [r3, #16]
 800cefa:	697a      	ldr	r2, [r7, #20]
 800cefc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf00:	f043 0318 	orr.w	r3, r3, #24
 800cf04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf0c:	691b      	ldr	r3, [r3, #16]
 800cf0e:	697a      	ldr	r2, [r7, #20]
 800cf10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cf18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cf1a:	7afb      	ldrb	r3, [r7, #11]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d10f      	bne.n	800cf40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf26:	461a      	mov	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	697a      	ldr	r2, [r7, #20]
 800cf36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cf3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf40:	2300      	movs	r3, #0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	371c      	adds	r7, #28
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	4f54300a 	.word	0x4f54300a

0800cf54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b085      	sub	sp, #20
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	3301      	adds	r3, #1
 800cf64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800cf6c:	d901      	bls.n	800cf72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cf6e:	2303      	movs	r3, #3
 800cf70:	e01b      	b.n	800cfaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	691b      	ldr	r3, [r3, #16]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	daf2      	bge.n	800cf60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	691b      	ldr	r3, [r3, #16]
 800cf82:	f043 0201 	orr.w	r2, r3, #1
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800cf96:	d901      	bls.n	800cf9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cf98:	2303      	movs	r3, #3
 800cf9a:	e006      	b.n	800cfaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d0f0      	beq.n	800cf8a <USB_CoreReset+0x36>

  return HAL_OK;
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3714      	adds	r7, #20
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
	...

0800cfb8 <__NVIC_SystemReset>:
{
 800cfb8:	b480      	push	{r7}
 800cfba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800cfbc:	f3bf 8f4f 	dsb	sy
}
 800cfc0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cfc2:	4b06      	ldr	r3, [pc, #24]	; (800cfdc <__NVIC_SystemReset+0x24>)
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cfca:	4904      	ldr	r1, [pc, #16]	; (800cfdc <__NVIC_SystemReset+0x24>)
 800cfcc:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <__NVIC_SystemReset+0x28>)
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cfd2:	f3bf 8f4f 	dsb	sy
}
 800cfd6:	bf00      	nop
    __NOP();
 800cfd8:	bf00      	nop
 800cfda:	e7fd      	b.n	800cfd8 <__NVIC_SystemReset+0x20>
 800cfdc:	e000ed00 	.word	0xe000ed00
 800cfe0:	05fa0004 	.word	0x05fa0004

0800cfe4 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	460b      	mov	r3, r1
 800cfee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800cff0:	f44f 6084 	mov.w	r0, #1056	; 0x420
 800cff4:	f002 fee6 	bl	800fdc4 <USBD_static_malloc>
 800cff8:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d109      	bne.n	800d014 <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	32b0      	adds	r2, #176	; 0xb0
 800d00a:	2100      	movs	r1, #0
 800d00c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d010:	2302      	movs	r3, #2
 800d012:	e052      	b.n	800d0ba <USBD_DFU_Init+0xd6>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	32b0      	adds	r2, #176	; 0xb0
 800d01e:	68f9      	ldr	r1, [r7, #12]
 800d020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	32b0      	adds	r2, #176	; 0xb0
 800d02e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2200      	movs	r2, #0
 800d03c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d046:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2200      	movs	r2, #0
 800d04e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2200      	movs	r2, #0
 800d056:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2202      	movs	r2, #2
 800d066:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2200      	movs	r2, #0
 800d06e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[1] = 0U;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	2200      	movs	r2, #0
 800d076:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
  hdfu->dev_status[2] = 0U;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2200      	movs	r2, #0
 800d07e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
  hdfu->dev_status[3] = 0U;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2200      	movs	r2, #0
 800d086:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2202      	movs	r2, #2
 800d08e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[5] = 0U;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2200      	movs	r2, #0
 800d096:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	33b0      	adds	r3, #176	; 0xb0
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	4413      	add	r3, r2
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	4798      	blx	r3
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <USBD_DFU_Init+0xd4>
  {
    return (uint8_t)USBD_FAIL;
 800d0b4:	2303      	movs	r3, #3
 800d0b6:	e000      	b.n	800d0ba <USBD_DFU_Init+0xd6>
  }

  return (uint8_t)USBD_OK;
 800d0b8:	2300      	movs	r3, #0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b084      	sub	sp, #16
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	32b0      	adds	r2, #176	; 0xb0
 800d0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	e03c      	b.n	800d15e <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	32b0      	adds	r2, #176	; 0xb0
 800d0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0f2:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2202      	movs	r2, #2
 800d108:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2200      	movs	r2, #0
 800d110:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2202      	movs	r2, #2
 800d118:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	33b0      	adds	r3, #176	; 0xb0
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	4413      	add	r3, r2
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	32b0      	adds	r2, #176	; 0xb0
 800d13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d13e:	4618      	mov	r0, r3
 800d140:	f002 fe4e 	bl	800fde0 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	32b0      	adds	r2, #176	; 0xb0
 800d14e:	2100      	movs	r1, #0
 800d150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
	...

0800d168 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	32b0      	adds	r2, #176	; 0xb0
 800d17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d180:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800d182:	2300      	movs	r3, #0
 800d184:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 800d186:	2300      	movs	r3, #0
 800d188:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d101      	bne.n	800d194 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800d190:	2303      	movs	r3, #3
 800d192:	e0e8      	b.n	800d366 <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d03e      	beq.n	800d21e <USBD_DFU_Setup+0xb6>
 800d1a0:	2b20      	cmp	r3, #32
 800d1a2:	f040 80d8 	bne.w	800d356 <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	785b      	ldrb	r3, [r3, #1]
 800d1aa:	2b06      	cmp	r3, #6
 800d1ac:	d82f      	bhi.n	800d20e <USBD_DFU_Setup+0xa6>
 800d1ae:	a201      	add	r2, pc, #4	; (adr r2, 800d1b4 <USBD_DFU_Setup+0x4c>)
 800d1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b4:	0800d205 	.word	0x0800d205
 800d1b8:	0800d1d1 	.word	0x0800d1d1
 800d1bc:	0800d1db 	.word	0x0800d1db
 800d1c0:	0800d1e5 	.word	0x0800d1e5
 800d1c4:	0800d1ed 	.word	0x0800d1ed
 800d1c8:	0800d1f5 	.word	0x0800d1f5
 800d1cc:	0800d1fd 	.word	0x0800d1fd
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800d1d0:	6839      	ldr	r1, [r7, #0]
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 fac2 	bl	800d75c <DFU_Download>
          break;
 800d1d8:	e020      	b.n	800d21c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800d1da:	6839      	ldr	r1, [r7, #0]
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 fb33 	bl	800d848 <DFU_Upload>
          break;
 800d1e2:	e01b      	b.n	800d21c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 fc37 	bl	800da58 <DFU_GetStatus>
          break;
 800d1ea:	e017      	b.n	800d21c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 fcff 	bl	800dbf0 <DFU_ClearStatus>
          break;
 800d1f2:	e013      	b.n	800d21c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fd53 	bl	800dca0 <DFU_GetState>
          break;
 800d1fa:	e00f      	b.n	800d21c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 fd6b 	bl	800dcd8 <DFU_Abort>
          break;
 800d202:	e00b      	b.n	800d21c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800d204:	6839      	ldr	r1, [r7, #0]
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fa38 	bl	800d67c <DFU_Detach>
          break;
 800d20c:	e006      	b.n	800d21c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800d20e:	6839      	ldr	r1, [r7, #0]
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f002 f8a0 	bl	800f356 <USBD_CtlError>
          ret = USBD_FAIL;
 800d216:	2303      	movs	r3, #3
 800d218:	75fb      	strb	r3, [r7, #23]
          break;
 800d21a:	bf00      	nop
      }
      break;
 800d21c:	e0a2      	b.n	800d364 <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	785b      	ldrb	r3, [r3, #1]
 800d222:	2b0b      	cmp	r3, #11
 800d224:	f200 808c 	bhi.w	800d340 <USBD_DFU_Setup+0x1d8>
 800d228:	a201      	add	r2, pc, #4	; (adr r2, 800d230 <USBD_DFU_Setup+0xc8>)
 800d22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d22e:	bf00      	nop
 800d230:	0800d261 	.word	0x0800d261
 800d234:	0800d34f 	.word	0x0800d34f
 800d238:	0800d341 	.word	0x0800d341
 800d23c:	0800d341 	.word	0x0800d341
 800d240:	0800d341 	.word	0x0800d341
 800d244:	0800d341 	.word	0x0800d341
 800d248:	0800d28b 	.word	0x0800d28b
 800d24c:	0800d341 	.word	0x0800d341
 800d250:	0800d341 	.word	0x0800d341
 800d254:	0800d341 	.word	0x0800d341
 800d258:	0800d2d3 	.word	0x0800d2d3
 800d25c:	0800d2ff 	.word	0x0800d2ff
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d266:	b2db      	uxtb	r3, r3
 800d268:	2b03      	cmp	r3, #3
 800d26a:	d107      	bne.n	800d27c <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d26c:	f107 0308 	add.w	r3, r7, #8
 800d270:	2202      	movs	r2, #2
 800d272:	4619      	mov	r1, r3
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f002 f8eb 	bl	800f450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d27a:	e06b      	b.n	800d354 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800d27c:	6839      	ldr	r1, [r7, #0]
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f002 f869 	bl	800f356 <USBD_CtlError>
            ret = USBD_FAIL;
 800d284:	2303      	movs	r3, #3
 800d286:	75fb      	strb	r3, [r7, #23]
          break;
 800d288:	e064      	b.n	800d354 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	885b      	ldrh	r3, [r3, #2]
 800d28e:	0a1b      	lsrs	r3, r3, #8
 800d290:	b29b      	uxth	r3, r3
 800d292:	2b21      	cmp	r3, #33	; 0x21
 800d294:	d15d      	bne.n	800d352 <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 fdd5 	bl	800de4c <USBD_DFU_GetDfuFuncDesc>
 800d2a2:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d00c      	beq.n	800d2c4 <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	88db      	ldrh	r3, [r3, #6]
 800d2ae:	2b09      	cmp	r3, #9
 800d2b0:	bf28      	it	cs
 800d2b2:	2309      	movcs	r3, #9
 800d2b4:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800d2b6:	897b      	ldrh	r3, [r7, #10]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	68f9      	ldr	r1, [r7, #12]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f002 f8c7 	bl	800f450 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800d2c2:	e046      	b.n	800d352 <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 800d2c4:	6839      	ldr	r1, [r7, #0]
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f002 f845 	bl	800f356 <USBD_CtlError>
              ret = USBD_FAIL;
 800d2cc:	2303      	movs	r3, #3
 800d2ce:	75fb      	strb	r3, [r7, #23]
          break;
 800d2d0:	e03f      	b.n	800d352 <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d108      	bne.n	800d2f0 <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f002 f8b1 	bl	800f450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2ee:	e031      	b.n	800d354 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800d2f0:	6839      	ldr	r1, [r7, #0]
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f002 f82f 	bl	800f356 <USBD_CtlError>
            ret = USBD_FAIL;
 800d2f8:	2303      	movs	r3, #3
 800d2fa:	75fb      	strb	r3, [r7, #23]
          break;
 800d2fc:	e02a      	b.n	800d354 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	885b      	ldrh	r3, [r3, #2]
 800d302:	b2db      	uxtb	r3, r3
 800d304:	2b00      	cmp	r3, #0
 800d306:	d114      	bne.n	800d332 <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	2b03      	cmp	r3, #3
 800d312:	d107      	bne.n	800d324 <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	885b      	ldrh	r3, [r3, #2]
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	461a      	mov	r2, r3
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d322:	e017      	b.n	800d354 <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 800d324:	6839      	ldr	r1, [r7, #0]
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f002 f815 	bl	800f356 <USBD_CtlError>
              ret = USBD_FAIL;
 800d32c:	2303      	movs	r3, #3
 800d32e:	75fb      	strb	r3, [r7, #23]
          break;
 800d330:	e010      	b.n	800d354 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800d332:	6839      	ldr	r1, [r7, #0]
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f002 f80e 	bl	800f356 <USBD_CtlError>
            ret = USBD_FAIL;
 800d33a:	2303      	movs	r3, #3
 800d33c:	75fb      	strb	r3, [r7, #23]
          break;
 800d33e:	e009      	b.n	800d354 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d340:	6839      	ldr	r1, [r7, #0]
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f002 f807 	bl	800f356 <USBD_CtlError>
          ret = USBD_FAIL;
 800d348:	2303      	movs	r3, #3
 800d34a:	75fb      	strb	r3, [r7, #23]
          break;
 800d34c:	e002      	b.n	800d354 <USBD_DFU_Setup+0x1ec>
          break;
 800d34e:	bf00      	nop
 800d350:	e008      	b.n	800d364 <USBD_DFU_Setup+0x1fc>
          break;
 800d352:	bf00      	nop
      }
      break;
 800d354:	e006      	b.n	800d364 <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800d356:	6839      	ldr	r1, [r7, #0]
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f001 fffc 	bl	800f356 <USBD_CtlError>
      ret = USBD_FAIL;
 800d35e:	2303      	movs	r3, #3
 800d360:	75fb      	strb	r3, [r7, #23]
      break;
 800d362:	bf00      	nop
  }

  return (uint8_t)ret;
 800d364:	7dfb      	ldrb	r3, [r7, #23]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3718      	adds	r7, #24
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop

0800d370 <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	221b      	movs	r2, #27
 800d37c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800d37e:	4b03      	ldr	r3, [pc, #12]	; (800d38c <USBD_DFU_GetCfgDesc+0x1c>)
}
 800d380:	4618      	mov	r0, r3
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr
 800d38c:	2400004c 	.word	0x2400004c

0800d390 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800d398:	2300      	movs	r3, #0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr

0800d3a6 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b088      	sub	sp, #32
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t app_addr_ptr;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	32b0      	adds	r2, #176	; 0xb0
 800d3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3bc:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	33b0      	adds	r3, #176	; 0xb0
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4413      	add	r3, r2
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	61bb      	str	r3, [r7, #24]
#if (USBD_DFU_VENDOR_CMD_ENABLED == 1U) || (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800d3d6:	2303      	movs	r3, #3
 800d3d8:	e0f1      	b.n	800d5be <USBD_DFU_EP0_TxReady+0x218>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d3e0:	2b04      	cmp	r3, #4
 800d3e2:	f040 80e0 	bne.w	800d5a6 <USBD_DFU_EP0_TxReady+0x200>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f040 8085 	bne.w	800d4fc <USBD_DFU_EP0_TxReady+0x156>
    {
      if (hdfu->wlength == 1U)
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	f000 80b5 	beq.w	800d568 <USBD_DFU_EP0_TxReady+0x1c2>
            return (uint8_t)USBD_FAIL;
          }
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
      }
      else if (hdfu->wlength == 5U)
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d404:	2b05      	cmp	r3, #5
 800d406:	d166      	bne.n	800d4d6 <USBD_DFU_EP0_TxReady+0x130>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b21      	cmp	r3, #33	; 0x21
 800d40e:	d124      	bne.n	800d45a <USBD_DFU_EP0_TxReady+0xb4>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          hdfu->data_ptr = hdfu->buffer.d8[1];
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	785b      	ldrb	r3, [r3, #1]
 800d414:	461a      	mov	r2, r3
 800d416:	69fb      	ldr	r3, [r7, #28]
 800d418:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800d422:	69fb      	ldr	r3, [r7, #28]
 800d424:	789b      	ldrb	r3, [r3, #2]
 800d426:	021b      	lsls	r3, r3, #8
 800d428:	441a      	add	r2, r3
 800d42a:	69fb      	ldr	r3, [r7, #28]
 800d42c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	78db      	ldrb	r3, [r3, #3]
 800d43a:	041b      	lsls	r3, r3, #16
 800d43c:	441a      	add	r2, r3
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	791b      	ldrb	r3, [r3, #4]
 800d44e:	061b      	lsls	r3, r3, #24
 800d450:	441a      	add	r2, r3
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800d458:	e086      	b.n	800d568 <USBD_DFU_EP0_TxReady+0x1c2>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	2b41      	cmp	r3, #65	; 0x41
 800d460:	d137      	bne.n	800d4d2 <USBD_DFU_EP0_TxReady+0x12c>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          app_addr_ptr = hdfu->buffer.d8[1];
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	785b      	ldrb	r3, [r3, #1]
 800d466:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	789b      	ldrb	r3, [r3, #2]
 800d46c:	021b      	lsls	r3, r3, #8
 800d46e:	693a      	ldr	r2, [r7, #16]
 800d470:	4413      	add	r3, r2
 800d472:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	78db      	ldrb	r3, [r3, #3]
 800d478:	041b      	lsls	r3, r3, #16
 800d47a:	693a      	ldr	r2, [r7, #16]
 800d47c:	4413      	add	r3, r2
 800d47e:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	791b      	ldrb	r3, [r3, #4]
 800d484:	061b      	lsls	r3, r3, #24
 800d486:	693a      	ldr	r2, [r7, #16]
 800d488:	4413      	add	r3, r2
 800d48a:	613b      	str	r3, [r7, #16]

          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	68db      	ldr	r3, [r3, #12]
 800d490:	6938      	ldr	r0, [r7, #16]
 800d492:	4798      	blx	r3
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d066      	beq.n	800d568 <USBD_DFU_EP0_TxReady+0x1c2>
          {
            /* Update the state machine */
            hdfu->dev_state = DFU_STATE_ERROR;
 800d49a:	69fb      	ldr	r3, [r7, #28]
 800d49c:	220a      	movs	r2, #10
 800d49e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	220b      	movs	r2, #11
 800d4a6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            hdfu->dev_status[1] = 0U;
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
            hdfu->dev_status[2] = 0U;
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
            hdfu->dev_status[3] = 0U;
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            return (uint8_t)USBD_FAIL;
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	e075      	b.n	800d5be <USBD_DFU_EP0_TxReady+0x218>
          }
        }
#else
        else
        {
          return (uint8_t)USBD_FAIL;
 800d4d2:	2303      	movs	r3, #3
 800d4d4:	e073      	b.n	800d5be <USBD_DFU_EP0_TxReady+0x218>
          req.wLength = 1U;
          USBD_CtlError(pdev, &req);
        }
#else
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800d4d6:	69fb      	ldr	r3, [r7, #28]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 800d4ee:	f107 0308 	add.w	r3, r7, #8
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f001 ff2e 	bl	800f356 <USBD_CtlError>
 800d4fa:	e035      	b.n	800d568 <USBD_DFU_EP0_TxReady+0x1c2>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d502:	2b01      	cmp	r3, #1
 800d504:	d930      	bls.n	800d568 <USBD_DFU_EP0_TxReady+0x1c2>
          return (uint8_t)USBD_FAIL;
        }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800d506:	69fb      	ldr	r3, [r7, #28]
 800d508:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d50c:	3b02      	subs	r3, #2
 800d50e:	029a      	lsls	r2, r3, #10
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800d516:	4413      	add	r3, r2
 800d518:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	691b      	ldr	r3, [r3, #16]
 800d51e:	69f8      	ldr	r0, [r7, #28]
 800d520:	6979      	ldr	r1, [r7, #20]
 800d522:	69fa      	ldr	r2, [r7, #28]
 800d524:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800d528:	4798      	blx	r3
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d01b      	beq.n	800d568 <USBD_DFU_EP0_TxReady+0x1c2>
        {
          /* Update the state machine */
          hdfu->dev_state = DFU_STATE_ERROR;
 800d530:	69fb      	ldr	r3, [r7, #28]
 800d532:	220a      	movs	r2, #10
 800d534:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	220b      	movs	r2, #11
 800d53c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
          hdfu->dev_status[1] = 0U;
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	2200      	movs	r2, #0
 800d544:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
          hdfu->dev_status[2] = 0U;
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
          hdfu->dev_status[3] = 0U;
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	2200      	movs	r2, #0
 800d554:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          return (uint8_t)USBD_FAIL;
 800d564:	2303      	movs	r3, #3
 800d566:	e02a      	b.n	800d5be <USBD_DFU_EP0_TxReady+0x218>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	2200      	movs	r2, #0
 800d574:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	2203      	movs	r2, #3
 800d57c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	2200      	movs	r2, #0
 800d584:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	2200      	movs	r2, #0
 800d58c:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	2200      	movs	r2, #0
 800d594:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800d598:	69fb      	ldr	r3, [r7, #28]
 800d59a:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800d5a4:	e00a      	b.n	800d5bc <USBD_DFU_EP0_TxReady+0x216>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d5ac:	2b07      	cmp	r3, #7
 800d5ae:	d103      	bne.n	800d5b8 <USBD_DFU_EP0_TxReady+0x212>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 fbe6 	bl	800dd82 <DFU_Leave>
 800d5b6:	e001      	b.n	800d5bc <USBD_DFU_EP0_TxReady+0x216>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	e000      	b.n	800d5be <USBD_DFU_EP0_TxReady+0x218>
  }

  return (uint8_t)USBD_OK;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3720      	adds	r7, #32
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800d5c6:	b480      	push	{r7}
 800d5c8:	b083      	sub	sp, #12
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	370c      	adds	r7, #12
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	220a      	movs	r2, #10
 800d5e8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800d5ea:	4b03      	ldr	r3, [pc, #12]	; (800d5f8 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	24000068 	.word	0x24000068

0800d5fc <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b086      	sub	sp, #24
 800d600:	af00      	add	r7, sp, #0
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	460b      	mov	r3, r1
 800d606:	607a      	str	r2, [r7, #4]
 800d608:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	33b0      	adds	r3, #176	; 0xb0
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	4413      	add	r3, r2
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800d61c:	7afb      	ldrb	r3, [r7, #11]
 800d61e:	2b06      	cmp	r3, #6
 800d620:	d808      	bhi.n	800d634 <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	4906      	ldr	r1, [pc, #24]	; (800d644 <USBD_DFU_GetUsrStringDesc+0x48>)
 800d62a:	4618      	mov	r0, r3
 800d62c:	f001 fea4 	bl	800f378 <USBD_GetString>
    return USBD_StrDesc;
 800d630:	4b04      	ldr	r3, [pc, #16]	; (800d644 <USBD_DFU_GetUsrStringDesc+0x48>)
 800d632:	e003      	b.n	800d63c <USBD_DFU_GetUsrStringDesc+0x40>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    *length = 0U;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	801a      	strh	r2, [r3, #0]
    return NULL;
 800d63a:	2300      	movs	r3, #0
  }
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3718      	adds	r7, #24
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	24000544 	.word	0x24000544

0800d648 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d101      	bne.n	800d65c <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d658:	2303      	movs	r3, #3
 800d65a:	e009      	b.n	800d670 <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	33b0      	adds	r3, #176	; 0xb0
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	4413      	add	r3, r2
 800d66a:	683a      	ldr	r2, [r7, #0]
 800d66c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d66e:	2300      	movs	r3, #0
}
 800d670:	4618      	mov	r0, r3
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	32b0      	adds	r2, #176	; 0xb0
 800d690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d694:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800d69c:	4618      	mov	r0, r3
 800d69e:	f000 fbd5 	bl	800de4c <USBD_DFU_GetDfuFuncDesc>
 800d6a2:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d054      	beq.n	800d754 <DFU_Detach+0xd8>
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d051      	beq.n	800d754 <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d6b6:	2b02      	cmp	r3, #2
 800d6b8:	d013      	beq.n	800d6e2 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800d6c0:	2b03      	cmp	r3, #3
 800d6c2:	d00e      	beq.n	800d6e2 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800d6ca:	2b05      	cmp	r3, #5
 800d6cc:	d009      	beq.n	800d6e2 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800d6d4:	2b06      	cmp	r3, #6
 800d6d6:	d004      	beq.n	800d6e2 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800d6de:	2b09      	cmp	r3, #9
 800d6e0:	d125      	bne.n	800d72e <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2202      	movs	r2, #2
 800d6e6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2200      	movs	r2, #0
 800d706:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2200      	movs	r2, #0
 800d71a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->wblock_num = 0U;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2200      	movs	r2, #0
 800d722:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2200      	movs	r2, #0
 800d72a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	789b      	ldrb	r3, [r3, #2]
 800d732:	f003 0308 	and.w	r3, r3, #8
 800d736:	2b00      	cmp	r3, #0
 800d738:	d006      	beq.n	800d748 <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 fc44 	bl	800dfc8 <USBD_Stop>
    (void)USBD_Start(pdev);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 fc35 	bl	800dfb0 <USBD_Start>
 800d746:	e006      	b.n	800d756 <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	885b      	ldrh	r3, [r3, #2]
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7f4 fb47 	bl	8001de0 <HAL_Delay>
 800d752:	e000      	b.n	800d756 <DFU_Detach+0xda>
    return;
 800d754:	bf00      	nop
  }
}
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	32b0      	adds	r2, #176	; 0xb0
 800d770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d774:	60fb      	str	r3, [r7, #12]
#if (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

  if (hdfu == NULL)
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d061      	beq.n	800d840 <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	88db      	ldrh	r3, [r3, #6]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d033      	beq.n	800d7ec <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d78a:	2b02      	cmp	r3, #2
 800d78c:	d004      	beq.n	800d798 <DFU_Download+0x3c>
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d794:	2b05      	cmp	r3, #5
 800d796:	d124      	bne.n	800d7e2 <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	885b      	ldrh	r3, [r3, #2]
 800d79c:	461a      	mov	r2, r3
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	88db      	ldrh	r3, [r3, #6]
 800d7a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7ac:	bf28      	it	cs
 800d7ae:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2203      	movs	r2, #3
 800d7c0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800d7d0:	68f9      	ldr	r1, [r7, #12]
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7d8:	461a      	mov	r2, r3
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f001 fe64 	bl	800f4a8 <USBD_CtlPrepareRx>
 800d7e0:	e02f      	b.n	800d842 <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800d7e2:	6839      	ldr	r1, [r7, #0]
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f001 fdb6 	bl	800f356 <USBD_CtlError>
 800d7ea:	e02a      	b.n	800d842 <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation */
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d7f2:	2b05      	cmp	r3, #5
 800d7f4:	d004      	beq.n	800d800 <DFU_Download+0xa4>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d7fc:	2b02      	cmp	r3, #2
 800d7fe:	d11a      	bne.n	800d836 <DFU_Download+0xda>
        hdfu->dev_status[4] = hdfu->dev_state;
      }
      else
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */
      {
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	2201      	movs	r2, #1
 800d804:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2206      	movs	r2, #6
 800d80c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2200      	movs	r2, #0
 800d814:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2200      	movs	r2, #0
 800d81c:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2200      	movs	r2, #0
 800d824:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800d834:	e005      	b.n	800d842 <DFU_Download+0xe6>
      }
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800d836:	6839      	ldr	r1, [r7, #0]
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f001 fd8c 	bl	800f356 <USBD_CtlError>
 800d83e:	e000      	b.n	800d842 <DFU_Download+0xe6>
    return;
 800d840:	bf00      	nop
    }
  }
}
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	32b0      	adds	r2, #176	; 0xb0
 800d85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d860:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	33b0      	adds	r3, #176	; 0xb0
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	4413      	add	r3, r2
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	61bb      	str	r3, [r7, #24]
  uint8_t VendorCmdLength = 0U;
  uint8_t VendorCmdBuffer[DFU_VENDOR_CMD_MAX];
  uint8_t idx;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	2b00      	cmp	r3, #0
 800d878:	f000 80ea 	beq.w	800da50 <DFU_Upload+0x208>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	88db      	ldrh	r3, [r3, #6]
 800d880:	2b00      	cmp	r3, #0
 800d882:	f000 80ce 	beq.w	800da22 <DFU_Upload+0x1da>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	d005      	beq.n	800d89c <DFU_Upload+0x54>
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d896:	2b09      	cmp	r3, #9
 800d898:	f040 80b6 	bne.w	800da08 <DFU_Upload+0x1c0>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	885b      	ldrh	r3, [r3, #2]
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	88db      	ldrh	r3, [r3, #6]
 800d8ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8b0:	bf28      	it	cs
 800d8b2:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d12e      	bne.n	800d928 <DFU_Upload+0xe0>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8d0:	2b03      	cmp	r3, #3
 800d8d2:	d901      	bls.n	800d8d8 <DFU_Upload+0x90>
 800d8d4:	2202      	movs	r2, #2
 800d8d6:	e000      	b.n	800d8da <DFU_Upload+0x92>
 800d8d8:	2209      	movs	r2, #9
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        hdfu->dev_status[1] = 0U;
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	2200      	movs	r2, #0
 800d908:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	2221      	movs	r2, #33	; 0x21
 800d90e:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	2241      	movs	r2, #65	; 0x41
 800d914:	709a      	strb	r2, [r3, #2]

        CmdLength = 3U;
 800d916:	2303      	movs	r3, #3
 800d918:	60fb      	str	r3, [r7, #12]
          CmdLength += MIN(VendorCmdLength, DFU_VENDOR_CMD_MAX);
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	4619      	mov	r1, r3
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f001 fd95 	bl	800f450 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800d926:	e094      	b.n	800da52 <DFU_Upload+0x20a>
      }
      else if (hdfu->wblock_num > 1U)
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d94f      	bls.n	800d9d2 <DFU_Upload+0x18a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	2209      	movs	r2, #9
 800d936:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        hdfu->dev_status[1] = 0U;
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	2200      	movs	r2, #0
 800d93e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	2200      	movs	r2, #0
 800d946:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	2200      	movs	r2, #0
 800d94e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        }

        if (VendorStatus == IS_DFU_PHY_ADDRESS)
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
        {
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d964:	3b02      	subs	r3, #2
 800d966:	029a      	lsls	r2, r3, #10
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800d96e:	4413      	add	r3, r2
 800d970:	617b      	str	r3, [r7, #20]

          /* Return the physical address where data are stored */
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	695b      	ldr	r3, [r3, #20]
 800d976:	6978      	ldr	r0, [r7, #20]
 800d978:	69f9      	ldr	r1, [r7, #28]
 800d97a:	69fa      	ldr	r2, [r7, #28]
 800d97c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800d980:	4798      	blx	r3
 800d982:	6138      	str	r0, [r7, #16]

          if (phaddr == NULL)
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d11a      	bne.n	800d9c0 <DFU_Upload+0x178>
          {
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	220f      	movs	r2, #15
 800d98e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

            hdfu->dev_status[1] = 0U;
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	2200      	movs	r2, #0
 800d996:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
            hdfu->dev_status[2] = 0U;
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	2200      	movs	r2, #0
 800d99e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
            hdfu->dev_status[3] = 0U;
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

            /* Call the error management function (command will be NAKed) */
            USBD_CtlError(pdev, req);
 800d9b6:	6839      	ldr	r1, [r7, #0]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f001 fccc 	bl	800f356 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800d9be:	e048      	b.n	800da52 <DFU_Upload+0x20a>
          }
          else
          {
            /* Send the status data over EP0 */
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	6939      	ldr	r1, [r7, #16]
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f001 fd40 	bl	800f450 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800d9d0:	e03f      	b.n	800da52 <DFU_Upload+0x20a>
          }
        }
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	220f      	movs	r2, #15
 800d9d6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        hdfu->dev_status[1] = 0U;
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        /* Call the error management function (command will be NAKed) */
        USBD_CtlError(pdev, req);
 800d9fe:	6839      	ldr	r1, [r7, #0]
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f001 fca8 	bl	800f356 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800da06:	e024      	b.n	800da52 <DFU_Upload+0x20a>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	2200      	movs	r2, #0
 800da0c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	2200      	movs	r2, #0
 800da14:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed) */
      USBD_CtlError(pdev, req);
 800da18:	6839      	ldr	r1, [r7, #0]
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f001 fc9b 	bl	800f356 <USBD_CtlError>
 800da20:	e017      	b.n	800da52 <DFU_Upload+0x20a>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800da22:	69fb      	ldr	r3, [r7, #28]
 800da24:	2202      	movs	r2, #2
 800da26:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	2200      	movs	r2, #0
 800da36:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800da4e:	e000      	b.n	800da52 <DFU_Upload+0x20a>
    return;
 800da50:	bf00      	nop
  }
}
 800da52:	3720      	adds	r7, #32
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	32b0      	adds	r2, #176	; 0xb0
 800da6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da6e:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	33b0      	adds	r3, #176	; 0xb0
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	4413      	add	r3, r2
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800da88:	4618      	mov	r0, r3
 800da8a:	f000 f9df 	bl	800de4c <USBD_DFU_GetDfuFuncDesc>
 800da8e:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	2b00      	cmp	r3, #0
 800da94:	f000 80a8 	beq.w	800dbe8 <DFU_GetStatus+0x190>
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f000 80a4 	beq.w	800dbe8 <DFU_GetStatus+0x190>
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f000 80a0 	beq.w	800dbe8 <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800daae:	2b03      	cmp	r3, #3
 800dab0:	d002      	beq.n	800dab8 <DFU_GetStatus+0x60>
 800dab2:	2b06      	cmp	r3, #6
 800dab4:	d051      	beq.n	800db5a <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 800dab6:	e08e      	b.n	800dbd6 <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d034      	beq.n	800db2c <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	2204      	movs	r2, #4
 800dac6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	2200      	movs	r2, #0
 800dace:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d10e      	bne.n	800db16 <DFU_GetStatus+0xbe>
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	2b41      	cmp	r3, #65	; 0x41
 800dafe:	d10a      	bne.n	800db16 <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	699b      	ldr	r3, [r3, #24]
 800db04:	697a      	ldr	r2, [r7, #20]
 800db06:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800db0a:	697a      	ldr	r2, [r7, #20]
 800db0c:	f202 4214 	addw	r2, r2, #1044	; 0x414
 800db10:	2100      	movs	r1, #0
 800db12:	4798      	blx	r3
      break;
 800db14:	e05f      	b.n	800dbd6 <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	699b      	ldr	r3, [r3, #24]
 800db1a:	697a      	ldr	r2, [r7, #20]
 800db1c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800db20:	697a      	ldr	r2, [r7, #20]
 800db22:	f202 4214 	addw	r2, r2, #1044	; 0x414
 800db26:	2101      	movs	r1, #1
 800db28:	4798      	blx	r3
      break;
 800db2a:	e054      	b.n	800dbd6 <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	2205      	movs	r2, #5
 800db30:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	2200      	movs	r2, #0
 800db38:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	2200      	movs	r2, #0
 800db40:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	2200      	movs	r2, #0
 800db48:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      break;
 800db58:	e03d      	b.n	800dbd6 <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800db60:	2b01      	cmp	r3, #1
 800db62:	d116      	bne.n	800db92 <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	2207      	movs	r2, #7
 800db68:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	2200      	movs	r2, #0
 800db78:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	2200      	movs	r2, #0
 800db80:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      break;
 800db90:	e020      	b.n	800dbd4 <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d11b      	bne.n	800dbd4 <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	789b      	ldrb	r3, [r3, #2]
 800dba0:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d015      	beq.n	800dbd4 <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	2202      	movs	r2, #2
 800dbac:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
          hdfu->dev_status[1] = 0U;
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
          hdfu->dev_status[2] = 0U;
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
          hdfu->dev_status[3] = 0U;
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      break;
 800dbd4:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800dbdc:	2206      	movs	r2, #6
 800dbde:	4619      	mov	r1, r3
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f001 fc35 	bl	800f450 <USBD_CtlSendData>
 800dbe6:	e000      	b.n	800dbea <DFU_GetStatus+0x192>
    return;
 800dbe8:	bf00      	nop
}
 800dbea:	3718      	adds	r7, #24
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b085      	sub	sp, #20
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	32b0      	adds	r2, #176	; 0xb0
 800dc02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc06:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d042      	beq.n	800dc94 <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800dc14:	2b0a      	cmp	r3, #10
 800dc16:	d11e      	bne.n	800dc56 <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2202      	movs	r2, #2
 800dc1c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2200      	movs	r2, #0
 800dc24:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2200      	movs	r2, #0
 800dc34:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800dc54:	e01f      	b.n	800dc96 <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	220a      	movs	r2, #10
 800dc5a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	220e      	movs	r2, #14
 800dc62:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800dc92:	e000      	b.n	800dc96 <DFU_ClearStatus+0xa6>
    return;
 800dc94:	bf00      	nop
  }
}
 800dc96:	3714      	adds	r7, #20
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr

0800dca0 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	32b0      	adds	r2, #176	; 0xb0
 800dcb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcb6:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d008      	beq.n	800dcd0 <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f001 fbc1 	bl	800f450 <USBD_CtlSendData>
 800dcce:	e000      	b.n	800dcd2 <DFU_GetState+0x32>
    return;
 800dcd0:	bf00      	nop
}
 800dcd2:	3710      	adds	r7, #16
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b085      	sub	sp, #20
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	32b0      	adds	r2, #176	; 0xb0
 800dcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcee:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d03f      	beq.n	800dd76 <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800dcfc:	2b02      	cmp	r3, #2
 800dcfe:	d013      	beq.n	800dd28 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800dd06:	2b03      	cmp	r3, #3
 800dd08:	d00e      	beq.n	800dd28 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800dd10:	2b05      	cmp	r3, #5
 800dd12:	d009      	beq.n	800dd28 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800dd1a:	2b06      	cmp	r3, #6
 800dd1c:	d004      	beq.n	800dd28 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800dd24:	2b09      	cmp	r3, #9
 800dd26:	d127      	bne.n	800dd78 <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2202      	movs	r2, #2
 800dd2c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2200      	movs	r2, #0
 800dd34:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2200      	movs	r2, #0
 800dd44:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->wblock_num = 0U;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2200      	movs	r2, #0
 800dd68:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800dd74:	e000      	b.n	800dd78 <DFU_Abort+0xa0>
    return;
 800dd76:	bf00      	nop
  }
}
 800dd78:	3714      	adds	r7, #20
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr

0800dd82 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b086      	sub	sp, #24
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	32b0      	adds	r2, #176	; 0xb0
 800dd94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd98:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	33b0      	adds	r3, #176	; 0xb0
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	4413      	add	r3, r2
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f000 f84a 	bl	800de4c <USBD_DFU_GetDfuFuncDesc>
 800ddb8:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d041      	beq.n	800de44 <DFU_Leave+0xc2>
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d03e      	beq.n	800de44 <DFU_Leave+0xc2>
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d03b      	beq.n	800de44 <DFU_Leave+0xc2>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	789b      	ldrb	r3, [r3, #2]
 800ddd8:	f003 0304 	and.w	r3, r3, #4
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d016      	beq.n	800de0e <DFU_Leave+0x8c>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	2206      	movs	r2, #6
 800dde4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    return;
 800de0c:	e01b      	b.n	800de46 <DFU_Leave+0xc4>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	2208      	movs	r2, #8
 800de12:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2200      	movs	r2, #0
 800de1a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	2200      	movs	r2, #0
 800de22:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	2200      	movs	r2, #0
 800de2a:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f8c4 	bl	800dfc8 <USBD_Stop>
#if (USBD_DFU_VENDOR_EXIT_ENABLED == 1U)
    /* Jump should be ensured by user application */
    DfuInterface->LeaveDFU(hdfu->data_ptr);
#else
    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800de40:	f7ff f8ba 	bl	800cfb8 <__NVIC_SystemReset>
    return;
 800de44:	bf00      	nop
#endif /* USBD_DFU_VENDOR_EXIT_ENABLED */

    /* The next instructions will not be reached (system reset) */
  }
}
 800de46:	3718      	adds	r7, #24
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b086      	sub	sp, #24
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 800de5c:	2300      	movs	r3, #0
 800de5e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	885b      	ldrh	r3, [r3, #2]
 800de64:	b29a      	uxth	r2, r3
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d918      	bls.n	800dea2 <USBD_DFU_GetDfuFuncDesc+0x56>
  {
    ptr = desc->bLength;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	b29b      	uxth	r3, r3
 800de76:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800de78:	e00d      	b.n	800de96 <USBD_DFU_GetDfuFuncDesc+0x4a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800de7a:	f107 030a 	add.w	r3, r7, #10
 800de7e:	4619      	mov	r1, r3
 800de80:	6978      	ldr	r0, [r7, #20]
 800de82:	f000 fc19 	bl	800e6b8 <USBD_GetNextDesc>
 800de86:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	785b      	ldrb	r3, [r3, #1]
 800de8c:	2b21      	cmp	r3, #33	; 0x21
 800de8e:	d102      	bne.n	800de96 <USBD_DFU_GetDfuFuncDesc+0x4a>
      {
        pDfuDesc = (uint8_t *)pdesc;
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	613b      	str	r3, [r7, #16]
        break;
 800de94:	e005      	b.n	800dea2 <USBD_DFU_GetDfuFuncDesc+0x56>
    while (ptr < desc->wTotalLength)
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	885b      	ldrh	r3, [r3, #2]
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	897b      	ldrh	r3, [r7, #10]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d8eb      	bhi.n	800de7a <USBD_DFU_GetDfuFuncDesc+0x2e>
      }
    }
  }
  return pDfuDesc;
 800dea2:	693b      	ldr	r3, [r7, #16]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3718      	adds	r7, #24
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b086      	sub	sp, #24
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	4613      	mov	r3, r2
 800deb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10a      	bne.n	800ded6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800dec0:	4817      	ldr	r0, [pc, #92]	; (800df20 <USBD_Init+0x74>)
 800dec2:	f002 f885 	bl	800ffd0 <iprintf>
 800dec6:	4817      	ldr	r0, [pc, #92]	; (800df24 <USBD_Init+0x78>)
 800dec8:	f002 f882 	bl	800ffd0 <iprintf>
 800decc:	200a      	movs	r0, #10
 800dece:	f002 f891 	bl	800fff4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ded2:	2303      	movs	r3, #3
 800ded4:	e01f      	b.n	800df16 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2200      	movs	r2, #0
 800deda:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2200      	movs	r2, #0
 800deea:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d003      	beq.n	800defc <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	68ba      	ldr	r2, [r7, #8]
 800def8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2201      	movs	r2, #1
 800df00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	79fa      	ldrb	r2, [r7, #7]
 800df08:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f001 fde0 	bl	800fad0 <USBD_LL_Init>
 800df10:	4603      	mov	r3, r0
 800df12:	75fb      	strb	r3, [r7, #23]

  return ret;
 800df14:	7dfb      	ldrb	r3, [r7, #23]
}
 800df16:	4618      	mov	r0, r3
 800df18:	3718      	adds	r7, #24
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	08010d4c 	.word	0x08010d4c
 800df24:	08010d54 	.word	0x08010d54

0800df28 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800df32:	2300      	movs	r3, #0
 800df34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10a      	bne.n	800df52 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800df3c:	481a      	ldr	r0, [pc, #104]	; (800dfa8 <USBD_RegisterClass+0x80>)
 800df3e:	f002 f847 	bl	800ffd0 <iprintf>
 800df42:	481a      	ldr	r0, [pc, #104]	; (800dfac <USBD_RegisterClass+0x84>)
 800df44:	f002 f844 	bl	800ffd0 <iprintf>
 800df48:	200a      	movs	r0, #10
 800df4a:	f002 f853 	bl	800fff4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800df4e:	2303      	movs	r3, #3
 800df50:	e025      	b.n	800df9e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	683a      	ldr	r2, [r7, #0]
 800df56:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	32ae      	adds	r2, #174	; 0xae
 800df64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00f      	beq.n	800df8e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	32ae      	adds	r2, #174	; 0xae
 800df78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df7e:	f107 020e 	add.w	r2, r7, #14
 800df82:	4610      	mov	r0, r2
 800df84:	4798      	blx	r3
 800df86:	4602      	mov	r2, r0
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800df94:	1c5a      	adds	r2, r3, #1
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800df9c:	2300      	movs	r3, #0
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3710      	adds	r7, #16
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	08010d4c 	.word	0x08010d4c
 800dfac:	08010d6c 	.word	0x08010d6c

0800dfb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f001 fddb 	bl	800fb74 <USBD_LL_Start>
 800dfbe:	4603      	mov	r3, r0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f001 fdea 	bl	800fbaa <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d009      	beq.n	800dff4 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	6852      	ldr	r2, [r2, #4]
 800dfec:	b2d2      	uxtb	r2, r2
 800dfee:	4611      	mov	r1, r2
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 800dff4:	2300      	movs	r3, #0
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3708      	adds	r7, #8
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}

0800dffe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dffe:	b480      	push	{r7}
 800e000:	b083      	sub	sp, #12
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e006:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e008:	4618      	mov	r0, r3
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	460b      	mov	r3, r1
 800e01e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d009      	beq.n	800e042 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	78fa      	ldrb	r2, [r7, #3]
 800e038:	4611      	mov	r1, r2
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	4798      	blx	r3
 800e03e:	4603      	mov	r3, r0
 800e040:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e042:	7bfb      	ldrb	r3, [r7, #15]
}
 800e044:	4618      	mov	r0, r3
 800e046:	3710      	adds	r7, #16
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	460b      	mov	r3, r1
 800e056:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e058:	2300      	movs	r3, #0
 800e05a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	78fa      	ldrb	r2, [r7, #3]
 800e066:	4611      	mov	r1, r2
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	4798      	blx	r3
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d001      	beq.n	800e076 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e072:	2303      	movs	r3, #3
 800e074:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e076:	7bfb      	ldrb	r3, [r7, #15]
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e090:	6839      	ldr	r1, [r7, #0]
 800e092:	4618      	mov	r0, r3
 800e094:	f001 f925 	bl	800f2e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e0b4:	f003 031f 	and.w	r3, r3, #31
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d01a      	beq.n	800e0f2 <USBD_LL_SetupStage+0x72>
 800e0bc:	2b02      	cmp	r3, #2
 800e0be:	d822      	bhi.n	800e106 <USBD_LL_SetupStage+0x86>
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d002      	beq.n	800e0ca <USBD_LL_SetupStage+0x4a>
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d00a      	beq.n	800e0de <USBD_LL_SetupStage+0x5e>
 800e0c8:	e01d      	b.n	800e106 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 fb2c 	bl	800e730 <USBD_StdDevReq>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	73fb      	strb	r3, [r7, #15]
      break;
 800e0dc:	e020      	b.n	800e120 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 fb94 	bl	800e814 <USBD_StdItfReq>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800e0f0:	e016      	b.n	800e120 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f000 fbf6 	bl	800e8ec <USBD_StdEPReq>
 800e100:	4603      	mov	r3, r0
 800e102:	73fb      	strb	r3, [r7, #15]
      break;
 800e104:	e00c      	b.n	800e120 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e10c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e110:	b2db      	uxtb	r3, r3
 800e112:	4619      	mov	r1, r3
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f001 fd89 	bl	800fc2c <USBD_LL_StallEP>
 800e11a:	4603      	mov	r3, r0
 800e11c:	73fb      	strb	r3, [r7, #15]
      break;
 800e11e:	bf00      	nop
  }

  return ret;
 800e120:	7bfb      	ldrb	r3, [r7, #15]
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b086      	sub	sp, #24
 800e12e:	af00      	add	r7, sp, #0
 800e130:	60f8      	str	r0, [r7, #12]
 800e132:	460b      	mov	r3, r1
 800e134:	607a      	str	r2, [r7, #4]
 800e136:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e13c:	7afb      	ldrb	r3, [r7, #11]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d16e      	bne.n	800e220 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e148:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e150:	2b03      	cmp	r3, #3
 800e152:	f040 8098 	bne.w	800e286 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	689a      	ldr	r2, [r3, #8]
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d913      	bls.n	800e18a <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	689a      	ldr	r2, [r3, #8]
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	1ad2      	subs	r2, r2, r3
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	68da      	ldr	r2, [r3, #12]
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	689b      	ldr	r3, [r3, #8]
 800e178:	4293      	cmp	r3, r2
 800e17a:	bf28      	it	cs
 800e17c:	4613      	movcs	r3, r2
 800e17e:	461a      	mov	r2, r3
 800e180:	6879      	ldr	r1, [r7, #4]
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f001 f9ad 	bl	800f4e2 <USBD_CtlContinueRx>
 800e188:	e07d      	b.n	800e286 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e190:	f003 031f 	and.w	r3, r3, #31
 800e194:	2b02      	cmp	r3, #2
 800e196:	d014      	beq.n	800e1c2 <USBD_LL_DataOutStage+0x98>
 800e198:	2b02      	cmp	r3, #2
 800e19a:	d81d      	bhi.n	800e1d8 <USBD_LL_DataOutStage+0xae>
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d002      	beq.n	800e1a6 <USBD_LL_DataOutStage+0x7c>
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d003      	beq.n	800e1ac <USBD_LL_DataOutStage+0x82>
 800e1a4:	e018      	b.n	800e1d8 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	75bb      	strb	r3, [r7, #22]
            break;
 800e1aa:	e018      	b.n	800e1de <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f000 fa64 	bl	800e684 <USBD_CoreFindIF>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	75bb      	strb	r3, [r7, #22]
            break;
 800e1c0:	e00d      	b.n	800e1de <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f000 fa66 	bl	800e69e <USBD_CoreFindEP>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	75bb      	strb	r3, [r7, #22]
            break;
 800e1d6:	e002      	b.n	800e1de <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	75bb      	strb	r3, [r7, #22]
            break;
 800e1dc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e1de:	7dbb      	ldrb	r3, [r7, #22]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d119      	bne.n	800e218 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	2b03      	cmp	r3, #3
 800e1ee:	d113      	bne.n	800e218 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e1f0:	7dba      	ldrb	r2, [r7, #22]
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	32ae      	adds	r2, #174	; 0xae
 800e1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1fa:	691b      	ldr	r3, [r3, #16]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d00b      	beq.n	800e218 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e200:	7dba      	ldrb	r2, [r7, #22]
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e208:	7dba      	ldrb	r2, [r7, #22]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	32ae      	adds	r2, #174	; 0xae
 800e20e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e212:	691b      	ldr	r3, [r3, #16]
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f001 f973 	bl	800f504 <USBD_CtlSendStatus>
 800e21e:	e032      	b.n	800e286 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e220:	7afb      	ldrb	r3, [r7, #11]
 800e222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e226:	b2db      	uxtb	r3, r3
 800e228:	4619      	mov	r1, r3
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f000 fa37 	bl	800e69e <USBD_CoreFindEP>
 800e230:	4603      	mov	r3, r0
 800e232:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e234:	7dbb      	ldrb	r3, [r7, #22]
 800e236:	2bff      	cmp	r3, #255	; 0xff
 800e238:	d025      	beq.n	800e286 <USBD_LL_DataOutStage+0x15c>
 800e23a:	7dbb      	ldrb	r3, [r7, #22]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d122      	bne.n	800e286 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e246:	b2db      	uxtb	r3, r3
 800e248:	2b03      	cmp	r3, #3
 800e24a:	d117      	bne.n	800e27c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e24c:	7dba      	ldrb	r2, [r7, #22]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	32ae      	adds	r2, #174	; 0xae
 800e252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e256:	699b      	ldr	r3, [r3, #24]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00f      	beq.n	800e27c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e25c:	7dba      	ldrb	r2, [r7, #22]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e264:	7dba      	ldrb	r2, [r7, #22]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	32ae      	adds	r2, #174	; 0xae
 800e26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	7afa      	ldrb	r2, [r7, #11]
 800e272:	4611      	mov	r1, r2
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	4798      	blx	r3
 800e278:	4603      	mov	r3, r0
 800e27a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e27c:	7dfb      	ldrb	r3, [r7, #23]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d001      	beq.n	800e286 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e282:	7dfb      	ldrb	r3, [r7, #23]
 800e284:	e000      	b.n	800e288 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3718      	adds	r7, #24
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b086      	sub	sp, #24
 800e294:	af00      	add	r7, sp, #0
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	460b      	mov	r3, r1
 800e29a:	607a      	str	r2, [r7, #4]
 800e29c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e29e:	7afb      	ldrb	r3, [r7, #11]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d16f      	bne.n	800e384 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	3314      	adds	r3, #20
 800e2a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e2b0:	2b02      	cmp	r3, #2
 800e2b2:	d15a      	bne.n	800e36a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	689a      	ldr	r2, [r3, #8]
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d914      	bls.n	800e2ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	689a      	ldr	r2, [r3, #8]
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	68db      	ldr	r3, [r3, #12]
 800e2c8:	1ad2      	subs	r2, r2, r3
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	6879      	ldr	r1, [r7, #4]
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	f001 f8d5 	bl	800f486 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2dc:	2300      	movs	r3, #0
 800e2de:	2200      	movs	r2, #0
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f001 fd4c 	bl	800fd80 <USBD_LL_PrepareReceive>
 800e2e8:	e03f      	b.n	800e36a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	68da      	ldr	r2, [r3, #12]
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	689b      	ldr	r3, [r3, #8]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d11c      	bne.n	800e330 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	685a      	ldr	r2, [r3, #4]
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d316      	bcc.n	800e330 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	685a      	ldr	r2, [r3, #4]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d20f      	bcs.n	800e330 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e310:	2200      	movs	r2, #0
 800e312:	2100      	movs	r1, #0
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f001 f8b6 	bl	800f486 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2200      	movs	r2, #0
 800e31e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e322:	2300      	movs	r3, #0
 800e324:	2200      	movs	r2, #0
 800e326:	2100      	movs	r1, #0
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f001 fd29 	bl	800fd80 <USBD_LL_PrepareReceive>
 800e32e:	e01c      	b.n	800e36a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e336:	b2db      	uxtb	r3, r3
 800e338:	2b03      	cmp	r3, #3
 800e33a:	d10f      	bne.n	800e35c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d009      	beq.n	800e35c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	68f8      	ldr	r0, [r7, #12]
 800e35a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e35c:	2180      	movs	r1, #128	; 0x80
 800e35e:	68f8      	ldr	r0, [r7, #12]
 800e360:	f001 fc64 	bl	800fc2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e364:	68f8      	ldr	r0, [r7, #12]
 800e366:	f001 f8e0 	bl	800f52a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e370:	2b00      	cmp	r3, #0
 800e372:	d03a      	beq.n	800e3ea <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f7ff fe42 	bl	800dffe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2200      	movs	r2, #0
 800e37e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e382:	e032      	b.n	800e3ea <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e384:	7afb      	ldrb	r3, [r7, #11]
 800e386:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	4619      	mov	r1, r3
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f000 f985 	bl	800e69e <USBD_CoreFindEP>
 800e394:	4603      	mov	r3, r0
 800e396:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e398:	7dfb      	ldrb	r3, [r7, #23]
 800e39a:	2bff      	cmp	r3, #255	; 0xff
 800e39c:	d025      	beq.n	800e3ea <USBD_LL_DataInStage+0x15a>
 800e39e:	7dfb      	ldrb	r3, [r7, #23]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d122      	bne.n	800e3ea <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	2b03      	cmp	r3, #3
 800e3ae:	d11c      	bne.n	800e3ea <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e3b0:	7dfa      	ldrb	r2, [r7, #23]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	32ae      	adds	r2, #174	; 0xae
 800e3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3ba:	695b      	ldr	r3, [r3, #20]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d014      	beq.n	800e3ea <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e3c0:	7dfa      	ldrb	r2, [r7, #23]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e3c8:	7dfa      	ldrb	r2, [r7, #23]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	32ae      	adds	r2, #174	; 0xae
 800e3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3d2:	695b      	ldr	r3, [r3, #20]
 800e3d4:	7afa      	ldrb	r2, [r7, #11]
 800e3d6:	4611      	mov	r1, r2
 800e3d8:	68f8      	ldr	r0, [r7, #12]
 800e3da:	4798      	blx	r3
 800e3dc:	4603      	mov	r3, r0
 800e3de:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e3e0:	7dbb      	ldrb	r3, [r7, #22]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d001      	beq.n	800e3ea <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e3e6:	7dbb      	ldrb	r3, [r7, #22]
 800e3e8:	e000      	b.n	800e3ec <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e3ea:	2300      	movs	r3, #0
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3718      	adds	r7, #24
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2201      	movs	r2, #1
 800e404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2200      	movs	r2, #0
 800e41a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d014      	beq.n	800e45a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00e      	beq.n	800e45a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	6852      	ldr	r2, [r2, #4]
 800e448:	b2d2      	uxtb	r2, r2
 800e44a:	4611      	mov	r1, r2
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	4798      	blx	r3
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d001      	beq.n	800e45a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e456:	2303      	movs	r3, #3
 800e458:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e45a:	2340      	movs	r3, #64	; 0x40
 800e45c:	2200      	movs	r2, #0
 800e45e:	2100      	movs	r1, #0
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f001 fbbd 	bl	800fbe0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2201      	movs	r2, #1
 800e46a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2240      	movs	r2, #64	; 0x40
 800e472:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e476:	2340      	movs	r3, #64	; 0x40
 800e478:	2200      	movs	r2, #0
 800e47a:	2180      	movs	r1, #128	; 0x80
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f001 fbaf 	bl	800fbe0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2201      	movs	r2, #1
 800e486:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2240      	movs	r2, #64	; 0x40
 800e48c:	621a      	str	r2, [r3, #32]

  return ret;
 800e48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3710      	adds	r7, #16
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	78fa      	ldrb	r2, [r7, #3]
 800e4a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e4aa:	2300      	movs	r3, #0
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	370c      	adds	r7, #12
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr

0800e4b8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b083      	sub	sp, #12
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	2b04      	cmp	r3, #4
 800e4ca:	d006      	beq.n	800e4da <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4d2:	b2da      	uxtb	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2204      	movs	r2, #4
 800e4de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e4e2:	2300      	movs	r3, #0
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	2b04      	cmp	r3, #4
 800e502:	d106      	bne.n	800e512 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e512:	2300      	movs	r3, #0
}
 800e514:	4618      	mov	r0, r3
 800e516:	370c      	adds	r7, #12
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	2b03      	cmp	r3, #3
 800e532:	d110      	bne.n	800e556 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00b      	beq.n	800e556 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e544:	69db      	ldr	r3, [r3, #28]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d005      	beq.n	800e556 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e550:	69db      	ldr	r3, [r3, #28]
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e556:	2300      	movs	r3, #0
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3708      	adds	r7, #8
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	460b      	mov	r3, r1
 800e56a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	32ae      	adds	r2, #174	; 0xae
 800e576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d101      	bne.n	800e582 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e57e:	2303      	movs	r3, #3
 800e580:	e01c      	b.n	800e5bc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e588:	b2db      	uxtb	r3, r3
 800e58a:	2b03      	cmp	r3, #3
 800e58c:	d115      	bne.n	800e5ba <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	32ae      	adds	r2, #174	; 0xae
 800e598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e59c:	6a1b      	ldr	r3, [r3, #32]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00b      	beq.n	800e5ba <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	32ae      	adds	r2, #174	; 0xae
 800e5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5b0:	6a1b      	ldr	r3, [r3, #32]
 800e5b2:	78fa      	ldrb	r2, [r7, #3]
 800e5b4:	4611      	mov	r1, r2
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3708      	adds	r7, #8
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	32ae      	adds	r2, #174	; 0xae
 800e5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d101      	bne.n	800e5e6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e5e2:	2303      	movs	r3, #3
 800e5e4:	e01c      	b.n	800e620 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	2b03      	cmp	r3, #3
 800e5f0:	d115      	bne.n	800e61e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	32ae      	adds	r2, #174	; 0xae
 800e5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e602:	2b00      	cmp	r3, #0
 800e604:	d00b      	beq.n	800e61e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	32ae      	adds	r2, #174	; 0xae
 800e610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e616:	78fa      	ldrb	r2, [r7, #3]
 800e618:	4611      	mov	r1, r2
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e61e:	2300      	movs	r3, #0
}
 800e620:	4618      	mov	r0, r3
 800e622:	3708      	adds	r7, #8
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e630:	2300      	movs	r3, #0
}
 800e632:	4618      	mov	r0, r3
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr

0800e63e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b084      	sub	sp, #16
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2201      	movs	r2, #1
 800e64e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d00e      	beq.n	800e67a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	6852      	ldr	r2, [r2, #4]
 800e668:	b2d2      	uxtb	r2, r2
 800e66a:	4611      	mov	r1, r2
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	4798      	blx	r3
 800e670:	4603      	mov	r3, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	d001      	beq.n	800e67a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e676:	2303      	movs	r3, #3
 800e678:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3710      	adds	r7, #16
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e684:	b480      	push	{r7}
 800e686:	b083      	sub	sp, #12
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	460b      	mov	r3, r1
 800e68e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e690:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e692:	4618      	mov	r0, r3
 800e694:	370c      	adds	r7, #12
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr

0800e69e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e69e:	b480      	push	{r7}
 800e6a0:	b083      	sub	sp, #12
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e6aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	370c      	adds	r7, #12
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	881a      	ldrh	r2, [r3, #0]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	4413      	add	r3, r2
 800e6d2:	b29a      	uxth	r2, r3
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	461a      	mov	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e6e4:	68fb      	ldr	r3, [r7, #12]
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3714      	adds	r7, #20
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr

0800e6f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e6f2:	b480      	push	{r7}
 800e6f4:	b087      	sub	sp, #28
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	3301      	adds	r3, #1
 800e708:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e710:	8a3b      	ldrh	r3, [r7, #16]
 800e712:	021b      	lsls	r3, r3, #8
 800e714:	b21a      	sxth	r2, r3
 800e716:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e71a:	4313      	orrs	r3, r2
 800e71c:	b21b      	sxth	r3, r3
 800e71e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e720:	89fb      	ldrh	r3, [r7, #14]
}
 800e722:	4618      	mov	r0, r3
 800e724:	371c      	adds	r7, #28
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
	...

0800e730 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e73a:	2300      	movs	r3, #0
 800e73c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e746:	2b40      	cmp	r3, #64	; 0x40
 800e748:	d005      	beq.n	800e756 <USBD_StdDevReq+0x26>
 800e74a:	2b40      	cmp	r3, #64	; 0x40
 800e74c:	d857      	bhi.n	800e7fe <USBD_StdDevReq+0xce>
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00f      	beq.n	800e772 <USBD_StdDevReq+0x42>
 800e752:	2b20      	cmp	r3, #32
 800e754:	d153      	bne.n	800e7fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	32ae      	adds	r2, #174	; 0xae
 800e760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e764:	689b      	ldr	r3, [r3, #8]
 800e766:	6839      	ldr	r1, [r7, #0]
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	4798      	blx	r3
 800e76c:	4603      	mov	r3, r0
 800e76e:	73fb      	strb	r3, [r7, #15]
      break;
 800e770:	e04a      	b.n	800e808 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	785b      	ldrb	r3, [r3, #1]
 800e776:	2b09      	cmp	r3, #9
 800e778:	d83b      	bhi.n	800e7f2 <USBD_StdDevReq+0xc2>
 800e77a:	a201      	add	r2, pc, #4	; (adr r2, 800e780 <USBD_StdDevReq+0x50>)
 800e77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e780:	0800e7d5 	.word	0x0800e7d5
 800e784:	0800e7e9 	.word	0x0800e7e9
 800e788:	0800e7f3 	.word	0x0800e7f3
 800e78c:	0800e7df 	.word	0x0800e7df
 800e790:	0800e7f3 	.word	0x0800e7f3
 800e794:	0800e7b3 	.word	0x0800e7b3
 800e798:	0800e7a9 	.word	0x0800e7a9
 800e79c:	0800e7f3 	.word	0x0800e7f3
 800e7a0:	0800e7cb 	.word	0x0800e7cb
 800e7a4:	0800e7bd 	.word	0x0800e7bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e7a8:	6839      	ldr	r1, [r7, #0]
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 fa3c 	bl	800ec28 <USBD_GetDescriptor>
          break;
 800e7b0:	e024      	b.n	800e7fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e7b2:	6839      	ldr	r1, [r7, #0]
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f000 fbf1 	bl	800ef9c <USBD_SetAddress>
          break;
 800e7ba:	e01f      	b.n	800e7fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e7bc:	6839      	ldr	r1, [r7, #0]
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fc30 	bl	800f024 <USBD_SetConfig>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	73fb      	strb	r3, [r7, #15]
          break;
 800e7c8:	e018      	b.n	800e7fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e7ca:	6839      	ldr	r1, [r7, #0]
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 fcd3 	bl	800f178 <USBD_GetConfig>
          break;
 800e7d2:	e013      	b.n	800e7fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e7d4:	6839      	ldr	r1, [r7, #0]
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 fd04 	bl	800f1e4 <USBD_GetStatus>
          break;
 800e7dc:	e00e      	b.n	800e7fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e7de:	6839      	ldr	r1, [r7, #0]
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f000 fd33 	bl	800f24c <USBD_SetFeature>
          break;
 800e7e6:	e009      	b.n	800e7fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e7e8:	6839      	ldr	r1, [r7, #0]
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f000 fd57 	bl	800f29e <USBD_ClrFeature>
          break;
 800e7f0:	e004      	b.n	800e7fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e7f2:	6839      	ldr	r1, [r7, #0]
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f000 fdae 	bl	800f356 <USBD_CtlError>
          break;
 800e7fa:	bf00      	nop
      }
      break;
 800e7fc:	e004      	b.n	800e808 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e7fe:	6839      	ldr	r1, [r7, #0]
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 fda8 	bl	800f356 <USBD_CtlError>
      break;
 800e806:	bf00      	nop
  }

  return ret;
 800e808:	7bfb      	ldrb	r3, [r7, #15]
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3710      	adds	r7, #16
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
 800e812:	bf00      	nop

0800e814 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e81e:	2300      	movs	r3, #0
 800e820:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e82a:	2b40      	cmp	r3, #64	; 0x40
 800e82c:	d005      	beq.n	800e83a <USBD_StdItfReq+0x26>
 800e82e:	2b40      	cmp	r3, #64	; 0x40
 800e830:	d852      	bhi.n	800e8d8 <USBD_StdItfReq+0xc4>
 800e832:	2b00      	cmp	r3, #0
 800e834:	d001      	beq.n	800e83a <USBD_StdItfReq+0x26>
 800e836:	2b20      	cmp	r3, #32
 800e838:	d14e      	bne.n	800e8d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e840:	b2db      	uxtb	r3, r3
 800e842:	3b01      	subs	r3, #1
 800e844:	2b02      	cmp	r3, #2
 800e846:	d840      	bhi.n	800e8ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	889b      	ldrh	r3, [r3, #4]
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d836      	bhi.n	800e8c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	889b      	ldrh	r3, [r3, #4]
 800e856:	b2db      	uxtb	r3, r3
 800e858:	4619      	mov	r1, r3
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7ff ff12 	bl	800e684 <USBD_CoreFindIF>
 800e860:	4603      	mov	r3, r0
 800e862:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e864:	7bbb      	ldrb	r3, [r7, #14]
 800e866:	2bff      	cmp	r3, #255	; 0xff
 800e868:	d01d      	beq.n	800e8a6 <USBD_StdItfReq+0x92>
 800e86a:	7bbb      	ldrb	r3, [r7, #14]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d11a      	bne.n	800e8a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e870:	7bba      	ldrb	r2, [r7, #14]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	32ae      	adds	r2, #174	; 0xae
 800e876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e87a:	689b      	ldr	r3, [r3, #8]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d00f      	beq.n	800e8a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e880:	7bba      	ldrb	r2, [r7, #14]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e888:	7bba      	ldrb	r2, [r7, #14]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	32ae      	adds	r2, #174	; 0xae
 800e88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	6839      	ldr	r1, [r7, #0]
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	4798      	blx	r3
 800e89a:	4603      	mov	r3, r0
 800e89c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e89e:	e004      	b.n	800e8aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e8a0:	2303      	movs	r3, #3
 800e8a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e8a4:	e001      	b.n	800e8aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e8a6:	2303      	movs	r3, #3
 800e8a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	88db      	ldrh	r3, [r3, #6]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d110      	bne.n	800e8d4 <USBD_StdItfReq+0xc0>
 800e8b2:	7bfb      	ldrb	r3, [r7, #15]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d10d      	bne.n	800e8d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f000 fe23 	bl	800f504 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e8be:	e009      	b.n	800e8d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e8c0:	6839      	ldr	r1, [r7, #0]
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 fd47 	bl	800f356 <USBD_CtlError>
          break;
 800e8c8:	e004      	b.n	800e8d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e8ca:	6839      	ldr	r1, [r7, #0]
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 fd42 	bl	800f356 <USBD_CtlError>
          break;
 800e8d2:	e000      	b.n	800e8d6 <USBD_StdItfReq+0xc2>
          break;
 800e8d4:	bf00      	nop
      }
      break;
 800e8d6:	e004      	b.n	800e8e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e8d8:	6839      	ldr	r1, [r7, #0]
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f000 fd3b 	bl	800f356 <USBD_CtlError>
      break;
 800e8e0:	bf00      	nop
  }

  return ret;
 800e8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3710      	adds	r7, #16
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	889b      	ldrh	r3, [r3, #4]
 800e8fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e908:	2b40      	cmp	r3, #64	; 0x40
 800e90a:	d007      	beq.n	800e91c <USBD_StdEPReq+0x30>
 800e90c:	2b40      	cmp	r3, #64	; 0x40
 800e90e:	f200 817f 	bhi.w	800ec10 <USBD_StdEPReq+0x324>
 800e912:	2b00      	cmp	r3, #0
 800e914:	d02a      	beq.n	800e96c <USBD_StdEPReq+0x80>
 800e916:	2b20      	cmp	r3, #32
 800e918:	f040 817a 	bne.w	800ec10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e91c:	7bbb      	ldrb	r3, [r7, #14]
 800e91e:	4619      	mov	r1, r3
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f7ff febc 	bl	800e69e <USBD_CoreFindEP>
 800e926:	4603      	mov	r3, r0
 800e928:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e92a:	7b7b      	ldrb	r3, [r7, #13]
 800e92c:	2bff      	cmp	r3, #255	; 0xff
 800e92e:	f000 8174 	beq.w	800ec1a <USBD_StdEPReq+0x32e>
 800e932:	7b7b      	ldrb	r3, [r7, #13]
 800e934:	2b00      	cmp	r3, #0
 800e936:	f040 8170 	bne.w	800ec1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e93a:	7b7a      	ldrb	r2, [r7, #13]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e942:	7b7a      	ldrb	r2, [r7, #13]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	32ae      	adds	r2, #174	; 0xae
 800e948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	f000 8163 	beq.w	800ec1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e954:	7b7a      	ldrb	r2, [r7, #13]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	32ae      	adds	r2, #174	; 0xae
 800e95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	6839      	ldr	r1, [r7, #0]
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	4798      	blx	r3
 800e966:	4603      	mov	r3, r0
 800e968:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e96a:	e156      	b.n	800ec1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	785b      	ldrb	r3, [r3, #1]
 800e970:	2b03      	cmp	r3, #3
 800e972:	d008      	beq.n	800e986 <USBD_StdEPReq+0x9a>
 800e974:	2b03      	cmp	r3, #3
 800e976:	f300 8145 	bgt.w	800ec04 <USBD_StdEPReq+0x318>
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	f000 809b 	beq.w	800eab6 <USBD_StdEPReq+0x1ca>
 800e980:	2b01      	cmp	r3, #1
 800e982:	d03c      	beq.n	800e9fe <USBD_StdEPReq+0x112>
 800e984:	e13e      	b.n	800ec04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	2b02      	cmp	r3, #2
 800e990:	d002      	beq.n	800e998 <USBD_StdEPReq+0xac>
 800e992:	2b03      	cmp	r3, #3
 800e994:	d016      	beq.n	800e9c4 <USBD_StdEPReq+0xd8>
 800e996:	e02c      	b.n	800e9f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e998:	7bbb      	ldrb	r3, [r7, #14]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00d      	beq.n	800e9ba <USBD_StdEPReq+0xce>
 800e99e:	7bbb      	ldrb	r3, [r7, #14]
 800e9a0:	2b80      	cmp	r3, #128	; 0x80
 800e9a2:	d00a      	beq.n	800e9ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e9a4:	7bbb      	ldrb	r3, [r7, #14]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f001 f93f 	bl	800fc2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9ae:	2180      	movs	r1, #128	; 0x80
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f001 f93b 	bl	800fc2c <USBD_LL_StallEP>
 800e9b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e9b8:	e020      	b.n	800e9fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e9ba:	6839      	ldr	r1, [r7, #0]
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f000 fcca 	bl	800f356 <USBD_CtlError>
              break;
 800e9c2:	e01b      	b.n	800e9fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	885b      	ldrh	r3, [r3, #2]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d10e      	bne.n	800e9ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e9cc:	7bbb      	ldrb	r3, [r7, #14]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d00b      	beq.n	800e9ea <USBD_StdEPReq+0xfe>
 800e9d2:	7bbb      	ldrb	r3, [r7, #14]
 800e9d4:	2b80      	cmp	r3, #128	; 0x80
 800e9d6:	d008      	beq.n	800e9ea <USBD_StdEPReq+0xfe>
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	88db      	ldrh	r3, [r3, #6]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d104      	bne.n	800e9ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e9e0:	7bbb      	ldrb	r3, [r7, #14]
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f001 f921 	bl	800fc2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 fd8a 	bl	800f504 <USBD_CtlSendStatus>

              break;
 800e9f0:	e004      	b.n	800e9fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e9f2:	6839      	ldr	r1, [r7, #0]
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 fcae 	bl	800f356 <USBD_CtlError>
              break;
 800e9fa:	bf00      	nop
          }
          break;
 800e9fc:	e107      	b.n	800ec0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea04:	b2db      	uxtb	r3, r3
 800ea06:	2b02      	cmp	r3, #2
 800ea08:	d002      	beq.n	800ea10 <USBD_StdEPReq+0x124>
 800ea0a:	2b03      	cmp	r3, #3
 800ea0c:	d016      	beq.n	800ea3c <USBD_StdEPReq+0x150>
 800ea0e:	e04b      	b.n	800eaa8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ea10:	7bbb      	ldrb	r3, [r7, #14]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00d      	beq.n	800ea32 <USBD_StdEPReq+0x146>
 800ea16:	7bbb      	ldrb	r3, [r7, #14]
 800ea18:	2b80      	cmp	r3, #128	; 0x80
 800ea1a:	d00a      	beq.n	800ea32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ea1c:	7bbb      	ldrb	r3, [r7, #14]
 800ea1e:	4619      	mov	r1, r3
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f001 f903 	bl	800fc2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea26:	2180      	movs	r1, #128	; 0x80
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f001 f8ff 	bl	800fc2c <USBD_LL_StallEP>
 800ea2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ea30:	e040      	b.n	800eab4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ea32:	6839      	ldr	r1, [r7, #0]
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 fc8e 	bl	800f356 <USBD_CtlError>
              break;
 800ea3a:	e03b      	b.n	800eab4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	885b      	ldrh	r3, [r3, #2]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d136      	bne.n	800eab2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ea44:	7bbb      	ldrb	r3, [r7, #14]
 800ea46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d004      	beq.n	800ea58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ea4e:	7bbb      	ldrb	r3, [r7, #14]
 800ea50:	4619      	mov	r1, r3
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f001 f909 	bl	800fc6a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 fd53 	bl	800f504 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ea5e:	7bbb      	ldrb	r3, [r7, #14]
 800ea60:	4619      	mov	r1, r3
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f7ff fe1b 	bl	800e69e <USBD_CoreFindEP>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea6c:	7b7b      	ldrb	r3, [r7, #13]
 800ea6e:	2bff      	cmp	r3, #255	; 0xff
 800ea70:	d01f      	beq.n	800eab2 <USBD_StdEPReq+0x1c6>
 800ea72:	7b7b      	ldrb	r3, [r7, #13]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d11c      	bne.n	800eab2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ea78:	7b7a      	ldrb	r2, [r7, #13]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ea80:	7b7a      	ldrb	r2, [r7, #13]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	32ae      	adds	r2, #174	; 0xae
 800ea86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea8a:	689b      	ldr	r3, [r3, #8]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d010      	beq.n	800eab2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ea90:	7b7a      	ldrb	r2, [r7, #13]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	32ae      	adds	r2, #174	; 0xae
 800ea96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	6839      	ldr	r1, [r7, #0]
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	4798      	blx	r3
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800eaa6:	e004      	b.n	800eab2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800eaa8:	6839      	ldr	r1, [r7, #0]
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 fc53 	bl	800f356 <USBD_CtlError>
              break;
 800eab0:	e000      	b.n	800eab4 <USBD_StdEPReq+0x1c8>
              break;
 800eab2:	bf00      	nop
          }
          break;
 800eab4:	e0ab      	b.n	800ec0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eabc:	b2db      	uxtb	r3, r3
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	d002      	beq.n	800eac8 <USBD_StdEPReq+0x1dc>
 800eac2:	2b03      	cmp	r3, #3
 800eac4:	d032      	beq.n	800eb2c <USBD_StdEPReq+0x240>
 800eac6:	e097      	b.n	800ebf8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eac8:	7bbb      	ldrb	r3, [r7, #14]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d007      	beq.n	800eade <USBD_StdEPReq+0x1f2>
 800eace:	7bbb      	ldrb	r3, [r7, #14]
 800ead0:	2b80      	cmp	r3, #128	; 0x80
 800ead2:	d004      	beq.n	800eade <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ead4:	6839      	ldr	r1, [r7, #0]
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 fc3d 	bl	800f356 <USBD_CtlError>
                break;
 800eadc:	e091      	b.n	800ec02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	da0b      	bge.n	800eafe <USBD_StdEPReq+0x212>
 800eae6:	7bbb      	ldrb	r3, [r7, #14]
 800eae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eaec:	4613      	mov	r3, r2
 800eaee:	009b      	lsls	r3, r3, #2
 800eaf0:	4413      	add	r3, r2
 800eaf2:	009b      	lsls	r3, r3, #2
 800eaf4:	3310      	adds	r3, #16
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	4413      	add	r3, r2
 800eafa:	3304      	adds	r3, #4
 800eafc:	e00b      	b.n	800eb16 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eafe:	7bbb      	ldrb	r3, [r7, #14]
 800eb00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb04:	4613      	mov	r3, r2
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	4413      	add	r3, r2
 800eb0a:	009b      	lsls	r3, r3, #2
 800eb0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	4413      	add	r3, r2
 800eb14:	3304      	adds	r3, #4
 800eb16:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	2202      	movs	r2, #2
 800eb22:	4619      	mov	r1, r3
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fc93 	bl	800f450 <USBD_CtlSendData>
              break;
 800eb2a:	e06a      	b.n	800ec02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800eb2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	da11      	bge.n	800eb58 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800eb34:	7bbb      	ldrb	r3, [r7, #14]
 800eb36:	f003 020f 	and.w	r2, r3, #15
 800eb3a:	6879      	ldr	r1, [r7, #4]
 800eb3c:	4613      	mov	r3, r2
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4413      	add	r3, r2
 800eb42:	009b      	lsls	r3, r3, #2
 800eb44:	440b      	add	r3, r1
 800eb46:	3324      	adds	r3, #36	; 0x24
 800eb48:	881b      	ldrh	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d117      	bne.n	800eb7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800eb4e:	6839      	ldr	r1, [r7, #0]
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 fc00 	bl	800f356 <USBD_CtlError>
                  break;
 800eb56:	e054      	b.n	800ec02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eb58:	7bbb      	ldrb	r3, [r7, #14]
 800eb5a:	f003 020f 	and.w	r2, r3, #15
 800eb5e:	6879      	ldr	r1, [r7, #4]
 800eb60:	4613      	mov	r3, r2
 800eb62:	009b      	lsls	r3, r3, #2
 800eb64:	4413      	add	r3, r2
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	440b      	add	r3, r1
 800eb6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800eb6e:	881b      	ldrh	r3, [r3, #0]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d104      	bne.n	800eb7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800eb74:	6839      	ldr	r1, [r7, #0]
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f000 fbed 	bl	800f356 <USBD_CtlError>
                  break;
 800eb7c:	e041      	b.n	800ec02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	da0b      	bge.n	800eb9e <USBD_StdEPReq+0x2b2>
 800eb86:	7bbb      	ldrb	r3, [r7, #14]
 800eb88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb8c:	4613      	mov	r3, r2
 800eb8e:	009b      	lsls	r3, r3, #2
 800eb90:	4413      	add	r3, r2
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	3310      	adds	r3, #16
 800eb96:	687a      	ldr	r2, [r7, #4]
 800eb98:	4413      	add	r3, r2
 800eb9a:	3304      	adds	r3, #4
 800eb9c:	e00b      	b.n	800ebb6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eb9e:	7bbb      	ldrb	r3, [r7, #14]
 800eba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eba4:	4613      	mov	r3, r2
 800eba6:	009b      	lsls	r3, r3, #2
 800eba8:	4413      	add	r3, r2
 800ebaa:	009b      	lsls	r3, r3, #2
 800ebac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	3304      	adds	r3, #4
 800ebb6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ebb8:	7bbb      	ldrb	r3, [r7, #14]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d002      	beq.n	800ebc4 <USBD_StdEPReq+0x2d8>
 800ebbe:	7bbb      	ldrb	r3, [r7, #14]
 800ebc0:	2b80      	cmp	r3, #128	; 0x80
 800ebc2:	d103      	bne.n	800ebcc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	601a      	str	r2, [r3, #0]
 800ebca:	e00e      	b.n	800ebea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ebcc:	7bbb      	ldrb	r3, [r7, #14]
 800ebce:	4619      	mov	r1, r3
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f001 f869 	bl	800fca8 <USBD_LL_IsStallEP>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d003      	beq.n	800ebe4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	601a      	str	r2, [r3, #0]
 800ebe2:	e002      	b.n	800ebea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	2202      	movs	r2, #2
 800ebee:	4619      	mov	r1, r3
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f000 fc2d 	bl	800f450 <USBD_CtlSendData>
              break;
 800ebf6:	e004      	b.n	800ec02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ebf8:	6839      	ldr	r1, [r7, #0]
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 fbab 	bl	800f356 <USBD_CtlError>
              break;
 800ec00:	bf00      	nop
          }
          break;
 800ec02:	e004      	b.n	800ec0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ec04:	6839      	ldr	r1, [r7, #0]
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 fba5 	bl	800f356 <USBD_CtlError>
          break;
 800ec0c:	bf00      	nop
      }
      break;
 800ec0e:	e005      	b.n	800ec1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ec10:	6839      	ldr	r1, [r7, #0]
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 fb9f 	bl	800f356 <USBD_CtlError>
      break;
 800ec18:	e000      	b.n	800ec1c <USBD_StdEPReq+0x330>
      break;
 800ec1a:	bf00      	nop
  }

  return ret;
 800ec1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3710      	adds	r7, #16
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
	...

0800ec28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ec32:	2300      	movs	r3, #0
 800ec34:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 800ec36:	2300      	movs	r3, #0
 800ec38:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	885b      	ldrh	r3, [r3, #2]
 800ec42:	0a1b      	lsrs	r3, r3, #8
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	3b01      	subs	r3, #1
 800ec48:	2b0e      	cmp	r3, #14
 800ec4a:	f200 8179 	bhi.w	800ef40 <USBD_GetDescriptor+0x318>
 800ec4e:	a201      	add	r2, pc, #4	; (adr r2, 800ec54 <USBD_GetDescriptor+0x2c>)
 800ec50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec54:	0800ecc5 	.word	0x0800ecc5
 800ec58:	0800ecdd 	.word	0x0800ecdd
 800ec5c:	0800ed1d 	.word	0x0800ed1d
 800ec60:	0800ef41 	.word	0x0800ef41
 800ec64:	0800ef41 	.word	0x0800ef41
 800ec68:	0800eee1 	.word	0x0800eee1
 800ec6c:	0800ef0d 	.word	0x0800ef0d
 800ec70:	0800ef41 	.word	0x0800ef41
 800ec74:	0800ef41 	.word	0x0800ef41
 800ec78:	0800ef41 	.word	0x0800ef41
 800ec7c:	0800ef41 	.word	0x0800ef41
 800ec80:	0800ef41 	.word	0x0800ef41
 800ec84:	0800ef41 	.word	0x0800ef41
 800ec88:	0800ef41 	.word	0x0800ef41
 800ec8c:	0800ec91 	.word	0x0800ec91
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec96:	69db      	ldr	r3, [r3, #28]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d00b      	beq.n	800ecb4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eca2:	69db      	ldr	r3, [r3, #28]
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	7c12      	ldrb	r2, [r2, #16]
 800eca8:	f107 010a 	add.w	r1, r7, #10
 800ecac:	4610      	mov	r0, r2
 800ecae:	4798      	blx	r3
 800ecb0:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ecb2:	e14d      	b.n	800ef50 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 800ecb4:	6839      	ldr	r1, [r7, #0]
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 fb4d 	bl	800f356 <USBD_CtlError>
        err++;
 800ecbc:	7cfb      	ldrb	r3, [r7, #19]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	74fb      	strb	r3, [r7, #19]
      break;
 800ecc2:	e145      	b.n	800ef50 <USBD_GetDescriptor+0x328>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	7c12      	ldrb	r2, [r2, #16]
 800ecd0:	f107 010a 	add.w	r1, r7, #10
 800ecd4:	4610      	mov	r0, r2
 800ecd6:	4798      	blx	r3
 800ecd8:	6178      	str	r0, [r7, #20]
      break;
 800ecda:	e139      	b.n	800ef50 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	7c1b      	ldrb	r3, [r3, #16]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d10d      	bne.n	800ed00 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecec:	f107 020a 	add.w	r2, r7, #10
 800ecf0:	4610      	mov	r0, r2
 800ecf2:	4798      	blx	r3
 800ecf4:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	2202      	movs	r2, #2
 800ecfc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ecfe:	e127      	b.n	800ef50 <USBD_GetDescriptor+0x328>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed08:	f107 020a 	add.w	r2, r7, #10
 800ed0c:	4610      	mov	r0, r2
 800ed0e:	4798      	blx	r3
 800ed10:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	3301      	adds	r3, #1
 800ed16:	2202      	movs	r2, #2
 800ed18:	701a      	strb	r2, [r3, #0]
      break;
 800ed1a:	e119      	b.n	800ef50 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	885b      	ldrh	r3, [r3, #2]
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	2b05      	cmp	r3, #5
 800ed24:	f200 80ac 	bhi.w	800ee80 <USBD_GetDescriptor+0x258>
 800ed28:	a201      	add	r2, pc, #4	; (adr r2, 800ed30 <USBD_GetDescriptor+0x108>)
 800ed2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed2e:	bf00      	nop
 800ed30:	0800ed49 	.word	0x0800ed49
 800ed34:	0800ed7d 	.word	0x0800ed7d
 800ed38:	0800edb1 	.word	0x0800edb1
 800ed3c:	0800ede5 	.word	0x0800ede5
 800ed40:	0800ee19 	.word	0x0800ee19
 800ed44:	0800ee4d 	.word	0x0800ee4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d00b      	beq.n	800ed6c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	7c12      	ldrb	r2, [r2, #16]
 800ed60:	f107 010a 	add.w	r1, r7, #10
 800ed64:	4610      	mov	r0, r2
 800ed66:	4798      	blx	r3
 800ed68:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed6a:	e0b8      	b.n	800eede <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800ed6c:	6839      	ldr	r1, [r7, #0]
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 faf1 	bl	800f356 <USBD_CtlError>
            err++;
 800ed74:	7cfb      	ldrb	r3, [r7, #19]
 800ed76:	3301      	adds	r3, #1
 800ed78:	74fb      	strb	r3, [r7, #19]
          break;
 800ed7a:	e0b0      	b.n	800eede <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed82:	689b      	ldr	r3, [r3, #8]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00b      	beq.n	800eda0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	7c12      	ldrb	r2, [r2, #16]
 800ed94:	f107 010a 	add.w	r1, r7, #10
 800ed98:	4610      	mov	r0, r2
 800ed9a:	4798      	blx	r3
 800ed9c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed9e:	e09e      	b.n	800eede <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800eda0:	6839      	ldr	r1, [r7, #0]
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 fad7 	bl	800f356 <USBD_CtlError>
            err++;
 800eda8:	7cfb      	ldrb	r3, [r7, #19]
 800edaa:	3301      	adds	r3, #1
 800edac:	74fb      	strb	r3, [r7, #19]
          break;
 800edae:	e096      	b.n	800eede <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d00b      	beq.n	800edd4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	7c12      	ldrb	r2, [r2, #16]
 800edc8:	f107 010a 	add.w	r1, r7, #10
 800edcc:	4610      	mov	r0, r2
 800edce:	4798      	blx	r3
 800edd0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edd2:	e084      	b.n	800eede <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800edd4:	6839      	ldr	r1, [r7, #0]
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 fabd 	bl	800f356 <USBD_CtlError>
            err++;
 800eddc:	7cfb      	ldrb	r3, [r7, #19]
 800edde:	3301      	adds	r3, #1
 800ede0:	74fb      	strb	r3, [r7, #19]
          break;
 800ede2:	e07c      	b.n	800eede <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edea:	691b      	ldr	r3, [r3, #16]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d00b      	beq.n	800ee08 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edf6:	691b      	ldr	r3, [r3, #16]
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	7c12      	ldrb	r2, [r2, #16]
 800edfc:	f107 010a 	add.w	r1, r7, #10
 800ee00:	4610      	mov	r0, r2
 800ee02:	4798      	blx	r3
 800ee04:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee06:	e06a      	b.n	800eede <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800ee08:	6839      	ldr	r1, [r7, #0]
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 faa3 	bl	800f356 <USBD_CtlError>
            err++;
 800ee10:	7cfb      	ldrb	r3, [r7, #19]
 800ee12:	3301      	adds	r3, #1
 800ee14:	74fb      	strb	r3, [r7, #19]
          break;
 800ee16:	e062      	b.n	800eede <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee1e:	695b      	ldr	r3, [r3, #20]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d00b      	beq.n	800ee3c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee2a:	695b      	ldr	r3, [r3, #20]
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	7c12      	ldrb	r2, [r2, #16]
 800ee30:	f107 010a 	add.w	r1, r7, #10
 800ee34:	4610      	mov	r0, r2
 800ee36:	4798      	blx	r3
 800ee38:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee3a:	e050      	b.n	800eede <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800ee3c:	6839      	ldr	r1, [r7, #0]
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 fa89 	bl	800f356 <USBD_CtlError>
            err++;
 800ee44:	7cfb      	ldrb	r3, [r7, #19]
 800ee46:	3301      	adds	r3, #1
 800ee48:	74fb      	strb	r3, [r7, #19]
          break;
 800ee4a:	e048      	b.n	800eede <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee52:	699b      	ldr	r3, [r3, #24]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00b      	beq.n	800ee70 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	7c12      	ldrb	r2, [r2, #16]
 800ee64:	f107 010a 	add.w	r1, r7, #10
 800ee68:	4610      	mov	r0, r2
 800ee6a:	4798      	blx	r3
 800ee6c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee6e:	e036      	b.n	800eede <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800ee70:	6839      	ldr	r1, [r7, #0]
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 fa6f 	bl	800f356 <USBD_CtlError>
            err++;
 800ee78:	7cfb      	ldrb	r3, [r7, #19]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	74fb      	strb	r3, [r7, #19]
          break;
 800ee7e:	e02e      	b.n	800eede <USBD_GetDescriptor+0x2b6>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 800ee80:	2300      	movs	r3, #0
 800ee82:	617b      	str	r3, [r7, #20]

          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800ee84:	2300      	movs	r3, #0
 800ee86:	60fb      	str	r3, [r7, #12]
 800ee88:	e020      	b.n	800eecc <USBD_GetDescriptor+0x2a4>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	68fa      	ldr	r2, [r7, #12]
 800ee8e:	32ae      	adds	r2, #174	; 0xae
 800ee90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d015      	beq.n	800eec6 <USBD_GetDescriptor+0x29e>
            {
              pdev->classId = idx;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	68fa      	ldr	r2, [r7, #12]
 800ee9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	68fa      	ldr	r2, [r7, #12]
 800eea6:	32ae      	adds	r2, #174	; 0xae
 800eea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeae:	683a      	ldr	r2, [r7, #0]
 800eeb0:	8852      	ldrh	r2, [r2, #2]
 800eeb2:	b2d1      	uxtb	r1, r2
 800eeb4:	f107 020a 	add.w	r2, r7, #10
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	4798      	blx	r3
 800eebc:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d10a      	bne.n	800eeda <USBD_GetDescriptor+0x2b2>
              {
                continue;
 800eec4:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	3301      	adds	r3, #1
 800eeca:	60fb      	str	r3, [r7, #12]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800eed2:	68fa      	ldr	r2, [r7, #12]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d3d8      	bcc.n	800ee8a <USBD_GetDescriptor+0x262>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800eed8:	e000      	b.n	800eedc <USBD_GetDescriptor+0x2b4>
                break;
 800eeda:	bf00      	nop
          break;
 800eedc:	bf00      	nop
      }
      break;
 800eede:	e037      	b.n	800ef50 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	7c1b      	ldrb	r3, [r3, #16]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d109      	bne.n	800eefc <USBD_GetDescriptor+0x2d4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eef0:	f107 020a 	add.w	r2, r7, #10
 800eef4:	4610      	mov	r0, r2
 800eef6:	4798      	blx	r3
 800eef8:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eefa:	e029      	b.n	800ef50 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 800eefc:	6839      	ldr	r1, [r7, #0]
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f000 fa29 	bl	800f356 <USBD_CtlError>
        err++;
 800ef04:	7cfb      	ldrb	r3, [r7, #19]
 800ef06:	3301      	adds	r3, #1
 800ef08:	74fb      	strb	r3, [r7, #19]
      break;
 800ef0a:	e021      	b.n	800ef50 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	7c1b      	ldrb	r3, [r3, #16]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d10d      	bne.n	800ef30 <USBD_GetDescriptor+0x308>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef1c:	f107 020a 	add.w	r2, r7, #10
 800ef20:	4610      	mov	r0, r2
 800ef22:	4798      	blx	r3
 800ef24:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	3301      	adds	r3, #1
 800ef2a:	2207      	movs	r2, #7
 800ef2c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef2e:	e00f      	b.n	800ef50 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 800ef30:	6839      	ldr	r1, [r7, #0]
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f000 fa0f 	bl	800f356 <USBD_CtlError>
        err++;
 800ef38:	7cfb      	ldrb	r3, [r7, #19]
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	74fb      	strb	r3, [r7, #19]
      break;
 800ef3e:	e007      	b.n	800ef50 <USBD_GetDescriptor+0x328>

    default:
      USBD_CtlError(pdev, req);
 800ef40:	6839      	ldr	r1, [r7, #0]
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 fa07 	bl	800f356 <USBD_CtlError>
      err++;
 800ef48:	7cfb      	ldrb	r3, [r7, #19]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	74fb      	strb	r3, [r7, #19]
      break;
 800ef4e:	bf00      	nop
  }

  if (err != 0U)
 800ef50:	7cfb      	ldrb	r3, [r7, #19]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d11e      	bne.n	800ef94 <USBD_GetDescriptor+0x36c>
  {
    return;
  }

  if (req->wLength != 0U)
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	88db      	ldrh	r3, [r3, #6]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d016      	beq.n	800ef8c <USBD_GetDescriptor+0x364>
  {
    if (len != 0U)
 800ef5e:	897b      	ldrh	r3, [r7, #10]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00e      	beq.n	800ef82 <USBD_GetDescriptor+0x35a>
    {
      len = MIN(len, req->wLength);
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	88da      	ldrh	r2, [r3, #6]
 800ef68:	897b      	ldrh	r3, [r7, #10]
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	bf28      	it	cs
 800ef6e:	4613      	movcs	r3, r2
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ef74:	897b      	ldrh	r3, [r7, #10]
 800ef76:	461a      	mov	r2, r3
 800ef78:	6979      	ldr	r1, [r7, #20]
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 fa68 	bl	800f450 <USBD_CtlSendData>
 800ef80:	e009      	b.n	800ef96 <USBD_GetDescriptor+0x36e>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ef82:	6839      	ldr	r1, [r7, #0]
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 f9e6 	bl	800f356 <USBD_CtlError>
 800ef8a:	e004      	b.n	800ef96 <USBD_GetDescriptor+0x36e>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f000 fab9 	bl	800f504 <USBD_CtlSendStatus>
 800ef92:	e000      	b.n	800ef96 <USBD_GetDescriptor+0x36e>
    return;
 800ef94:	bf00      	nop
  }
}
 800ef96:	3718      	adds	r7, #24
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	889b      	ldrh	r3, [r3, #4]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d131      	bne.n	800f012 <USBD_SetAddress+0x76>
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	88db      	ldrh	r3, [r3, #6]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d12d      	bne.n	800f012 <USBD_SetAddress+0x76>
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	885b      	ldrh	r3, [r3, #2]
 800efba:	2b7f      	cmp	r3, #127	; 0x7f
 800efbc:	d829      	bhi.n	800f012 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	885b      	ldrh	r3, [r3, #2]
 800efc2:	b2db      	uxtb	r3, r3
 800efc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	2b03      	cmp	r3, #3
 800efd4:	d104      	bne.n	800efe0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800efd6:	6839      	ldr	r1, [r7, #0]
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f000 f9bc 	bl	800f356 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efde:	e01d      	b.n	800f01c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	7bfa      	ldrb	r2, [r7, #15]
 800efe4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800efe8:	7bfb      	ldrb	r3, [r7, #15]
 800efea:	4619      	mov	r1, r3
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f000 fe87 	bl	800fd00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 fa86 	bl	800f504 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eff8:	7bfb      	ldrb	r3, [r7, #15]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d004      	beq.n	800f008 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2202      	movs	r2, #2
 800f002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f006:	e009      	b.n	800f01c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2201      	movs	r2, #1
 800f00c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f010:	e004      	b.n	800f01c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f012:	6839      	ldr	r1, [r7, #0]
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 f99e 	bl	800f356 <USBD_CtlError>
  }
}
 800f01a:	bf00      	nop
 800f01c:	bf00      	nop
 800f01e:	3710      	adds	r7, #16
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}

0800f024 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b084      	sub	sp, #16
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f02e:	2300      	movs	r3, #0
 800f030:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	885b      	ldrh	r3, [r3, #2]
 800f036:	b2da      	uxtb	r2, r3
 800f038:	4b4e      	ldr	r3, [pc, #312]	; (800f174 <USBD_SetConfig+0x150>)
 800f03a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f03c:	4b4d      	ldr	r3, [pc, #308]	; (800f174 <USBD_SetConfig+0x150>)
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d905      	bls.n	800f050 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f044:	6839      	ldr	r1, [r7, #0]
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 f985 	bl	800f356 <USBD_CtlError>
    return USBD_FAIL;
 800f04c:	2303      	movs	r3, #3
 800f04e:	e08c      	b.n	800f16a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f056:	b2db      	uxtb	r3, r3
 800f058:	2b02      	cmp	r3, #2
 800f05a:	d002      	beq.n	800f062 <USBD_SetConfig+0x3e>
 800f05c:	2b03      	cmp	r3, #3
 800f05e:	d029      	beq.n	800f0b4 <USBD_SetConfig+0x90>
 800f060:	e075      	b.n	800f14e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f062:	4b44      	ldr	r3, [pc, #272]	; (800f174 <USBD_SetConfig+0x150>)
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d020      	beq.n	800f0ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f06a:	4b42      	ldr	r3, [pc, #264]	; (800f174 <USBD_SetConfig+0x150>)
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	461a      	mov	r2, r3
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f074:	4b3f      	ldr	r3, [pc, #252]	; (800f174 <USBD_SetConfig+0x150>)
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	4619      	mov	r1, r3
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f7fe ffca 	bl	800e014 <USBD_SetClassConfig>
 800f080:	4603      	mov	r3, r0
 800f082:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f084:	7bfb      	ldrb	r3, [r7, #15]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d008      	beq.n	800f09c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f08a:	6839      	ldr	r1, [r7, #0]
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f000 f962 	bl	800f356 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2202      	movs	r2, #2
 800f096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f09a:	e065      	b.n	800f168 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f000 fa31 	bl	800f504 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2203      	movs	r2, #3
 800f0a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f0aa:	e05d      	b.n	800f168 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f000 fa29 	bl	800f504 <USBD_CtlSendStatus>
      break;
 800f0b2:	e059      	b.n	800f168 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f0b4:	4b2f      	ldr	r3, [pc, #188]	; (800f174 <USBD_SetConfig+0x150>)
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d112      	bne.n	800f0e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2202      	movs	r2, #2
 800f0c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f0c4:	4b2b      	ldr	r3, [pc, #172]	; (800f174 <USBD_SetConfig+0x150>)
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f0ce:	4b29      	ldr	r3, [pc, #164]	; (800f174 <USBD_SetConfig+0x150>)
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	4619      	mov	r1, r3
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f7fe ffb9 	bl	800e04c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 fa12 	bl	800f504 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f0e0:	e042      	b.n	800f168 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f0e2:	4b24      	ldr	r3, [pc, #144]	; (800f174 <USBD_SetConfig+0x150>)
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d02a      	beq.n	800f146 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f7fe ffa7 	bl	800e04c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f0fe:	4b1d      	ldr	r3, [pc, #116]	; (800f174 <USBD_SetConfig+0x150>)
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	461a      	mov	r2, r3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f108:	4b1a      	ldr	r3, [pc, #104]	; (800f174 <USBD_SetConfig+0x150>)
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	4619      	mov	r1, r3
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f7fe ff80 	bl	800e014 <USBD_SetClassConfig>
 800f114:	4603      	mov	r3, r0
 800f116:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f118:	7bfb      	ldrb	r3, [r7, #15]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00f      	beq.n	800f13e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f11e:	6839      	ldr	r1, [r7, #0]
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f000 f918 	bl	800f356 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	4619      	mov	r1, r3
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7fe ff8c 	bl	800e04c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2202      	movs	r2, #2
 800f138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f13c:	e014      	b.n	800f168 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 f9e0 	bl	800f504 <USBD_CtlSendStatus>
      break;
 800f144:	e010      	b.n	800f168 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 f9dc 	bl	800f504 <USBD_CtlSendStatus>
      break;
 800f14c:	e00c      	b.n	800f168 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f14e:	6839      	ldr	r1, [r7, #0]
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 f900 	bl	800f356 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f156:	4b07      	ldr	r3, [pc, #28]	; (800f174 <USBD_SetConfig+0x150>)
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	4619      	mov	r1, r3
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f7fe ff75 	bl	800e04c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f162:	2303      	movs	r3, #3
 800f164:	73fb      	strb	r3, [r7, #15]
      break;
 800f166:	bf00      	nop
  }

  return ret;
 800f168:	7bfb      	ldrb	r3, [r7, #15]
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3710      	adds	r7, #16
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop
 800f174:	24000643 	.word	0x24000643

0800f178 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	88db      	ldrh	r3, [r3, #6]
 800f186:	2b01      	cmp	r3, #1
 800f188:	d004      	beq.n	800f194 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f18a:	6839      	ldr	r1, [r7, #0]
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f000 f8e2 	bl	800f356 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f192:	e023      	b.n	800f1dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	2b02      	cmp	r3, #2
 800f19e:	dc02      	bgt.n	800f1a6 <USBD_GetConfig+0x2e>
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	dc03      	bgt.n	800f1ac <USBD_GetConfig+0x34>
 800f1a4:	e015      	b.n	800f1d2 <USBD_GetConfig+0x5a>
 800f1a6:	2b03      	cmp	r3, #3
 800f1a8:	d00b      	beq.n	800f1c2 <USBD_GetConfig+0x4a>
 800f1aa:	e012      	b.n	800f1d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	3308      	adds	r3, #8
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f000 f948 	bl	800f450 <USBD_CtlSendData>
        break;
 800f1c0:	e00c      	b.n	800f1dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	3304      	adds	r3, #4
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f000 f940 	bl	800f450 <USBD_CtlSendData>
        break;
 800f1d0:	e004      	b.n	800f1dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f1d2:	6839      	ldr	r1, [r7, #0]
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f000 f8be 	bl	800f356 <USBD_CtlError>
        break;
 800f1da:	bf00      	nop
}
 800f1dc:	bf00      	nop
 800f1de:	3708      	adds	r7, #8
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}

0800f1e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1f4:	b2db      	uxtb	r3, r3
 800f1f6:	3b01      	subs	r3, #1
 800f1f8:	2b02      	cmp	r3, #2
 800f1fa:	d81e      	bhi.n	800f23a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	88db      	ldrh	r3, [r3, #6]
 800f200:	2b02      	cmp	r3, #2
 800f202:	d004      	beq.n	800f20e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f204:	6839      	ldr	r1, [r7, #0]
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 f8a5 	bl	800f356 <USBD_CtlError>
        break;
 800f20c:	e01a      	b.n	800f244 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2201      	movs	r2, #1
 800f212:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d005      	beq.n	800f22a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	f043 0202 	orr.w	r2, r3, #2
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	330c      	adds	r3, #12
 800f22e:	2202      	movs	r2, #2
 800f230:	4619      	mov	r1, r3
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 f90c 	bl	800f450 <USBD_CtlSendData>
      break;
 800f238:	e004      	b.n	800f244 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f23a:	6839      	ldr	r1, [r7, #0]
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 f88a 	bl	800f356 <USBD_CtlError>
      break;
 800f242:	bf00      	nop
  }
}
 800f244:	bf00      	nop
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	885b      	ldrh	r3, [r3, #2]
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d107      	bne.n	800f26e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2201      	movs	r2, #1
 800f262:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 f94c 	bl	800f504 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f26c:	e013      	b.n	800f296 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	885b      	ldrh	r3, [r3, #2]
 800f272:	2b02      	cmp	r3, #2
 800f274:	d10b      	bne.n	800f28e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	889b      	ldrh	r3, [r3, #4]
 800f27a:	0a1b      	lsrs	r3, r3, #8
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	b2da      	uxtb	r2, r3
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 f93c 	bl	800f504 <USBD_CtlSendStatus>
}
 800f28c:	e003      	b.n	800f296 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f28e:	6839      	ldr	r1, [r7, #0]
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 f860 	bl	800f356 <USBD_CtlError>
}
 800f296:	bf00      	nop
 800f298:	3708      	adds	r7, #8
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}

0800f29e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f29e:	b580      	push	{r7, lr}
 800f2a0:	b082      	sub	sp, #8
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
 800f2a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	3b01      	subs	r3, #1
 800f2b2:	2b02      	cmp	r3, #2
 800f2b4:	d80b      	bhi.n	800f2ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	885b      	ldrh	r3, [r3, #2]
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d10c      	bne.n	800f2d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 f91c 	bl	800f504 <USBD_CtlSendStatus>
      }
      break;
 800f2cc:	e004      	b.n	800f2d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 f840 	bl	800f356 <USBD_CtlError>
      break;
 800f2d6:	e000      	b.n	800f2da <USBD_ClrFeature+0x3c>
      break;
 800f2d8:	bf00      	nop
  }
}
 800f2da:	bf00      	nop
 800f2dc:	3708      	adds	r7, #8
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}

0800f2e2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f2e2:	b580      	push	{r7, lr}
 800f2e4:	b084      	sub	sp, #16
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
 800f2ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	781a      	ldrb	r2, [r3, #0]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	781a      	ldrb	r2, [r3, #0]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	3301      	adds	r3, #1
 800f30a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f7ff f9f0 	bl	800e6f2 <SWAPBYTE>
 800f312:	4603      	mov	r3, r0
 800f314:	461a      	mov	r2, r3
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	3301      	adds	r3, #1
 800f31e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	3301      	adds	r3, #1
 800f324:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f326:	68f8      	ldr	r0, [r7, #12]
 800f328:	f7ff f9e3 	bl	800e6f2 <SWAPBYTE>
 800f32c:	4603      	mov	r3, r0
 800f32e:	461a      	mov	r2, r3
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	3301      	adds	r3, #1
 800f338:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	3301      	adds	r3, #1
 800f33e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f340:	68f8      	ldr	r0, [r7, #12]
 800f342:	f7ff f9d6 	bl	800e6f2 <SWAPBYTE>
 800f346:	4603      	mov	r3, r0
 800f348:	461a      	mov	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	80da      	strh	r2, [r3, #6]
}
 800f34e:	bf00      	nop
 800f350:	3710      	adds	r7, #16
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f356:	b580      	push	{r7, lr}
 800f358:	b082      	sub	sp, #8
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	6078      	str	r0, [r7, #4]
 800f35e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f360:	2180      	movs	r1, #128	; 0x80
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f000 fc62 	bl	800fc2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f368:	2100      	movs	r1, #0
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 fc5e 	bl	800fc2c <USBD_LL_StallEP>
}
 800f370:	bf00      	nop
 800f372:	3708      	adds	r7, #8
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b086      	sub	sp, #24
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f384:	2300      	movs	r3, #0
 800f386:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d042      	beq.n	800f414 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f392:	6938      	ldr	r0, [r7, #16]
 800f394:	f000 f842 	bl	800f41c <USBD_GetLen>
 800f398:	4603      	mov	r3, r0
 800f39a:	3301      	adds	r3, #1
 800f39c:	005b      	lsls	r3, r3, #1
 800f39e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3a2:	d808      	bhi.n	800f3b6 <USBD_GetString+0x3e>
 800f3a4:	6938      	ldr	r0, [r7, #16]
 800f3a6:	f000 f839 	bl	800f41c <USBD_GetLen>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	005b      	lsls	r3, r3, #1
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	e001      	b.n	800f3ba <USBD_GetString+0x42>
 800f3b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f3be:	7dfb      	ldrb	r3, [r7, #23]
 800f3c0:	68ba      	ldr	r2, [r7, #8]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	7812      	ldrb	r2, [r2, #0]
 800f3c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800f3ca:	7dfb      	ldrb	r3, [r7, #23]
 800f3cc:	3301      	adds	r3, #1
 800f3ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f3d0:	7dfb      	ldrb	r3, [r7, #23]
 800f3d2:	68ba      	ldr	r2, [r7, #8]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	2203      	movs	r2, #3
 800f3d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800f3da:	7dfb      	ldrb	r3, [r7, #23]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f3e0:	e013      	b.n	800f40a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
 800f3e4:	68ba      	ldr	r2, [r7, #8]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	7812      	ldrb	r2, [r2, #0]
 800f3ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	613b      	str	r3, [r7, #16]
    idx++;
 800f3f4:	7dfb      	ldrb	r3, [r7, #23]
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f3fa:	7dfb      	ldrb	r3, [r7, #23]
 800f3fc:	68ba      	ldr	r2, [r7, #8]
 800f3fe:	4413      	add	r3, r2
 800f400:	2200      	movs	r2, #0
 800f402:	701a      	strb	r2, [r3, #0]
    idx++;
 800f404:	7dfb      	ldrb	r3, [r7, #23]
 800f406:	3301      	adds	r3, #1
 800f408:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d1e7      	bne.n	800f3e2 <USBD_GetString+0x6a>
 800f412:	e000      	b.n	800f416 <USBD_GetString+0x9e>
    return;
 800f414:	bf00      	nop
  }
}
 800f416:	3718      	adds	r7, #24
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b085      	sub	sp, #20
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f424:	2300      	movs	r3, #0
 800f426:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f42c:	e005      	b.n	800f43a <USBD_GetLen+0x1e>
  {
    len++;
 800f42e:	7bfb      	ldrb	r3, [r7, #15]
 800f430:	3301      	adds	r3, #1
 800f432:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	3301      	adds	r3, #1
 800f438:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d1f5      	bne.n	800f42e <USBD_GetLen+0x12>
  }

  return len;
 800f442:	7bfb      	ldrb	r3, [r7, #15]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3714      	adds	r7, #20
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	60f8      	str	r0, [r7, #12]
 800f458:	60b9      	str	r1, [r7, #8]
 800f45a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2202      	movs	r2, #2
 800f460:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	687a      	ldr	r2, [r7, #4]
 800f468:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	68ba      	ldr	r2, [r7, #8]
 800f474:	2100      	movs	r1, #0
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	f000 fc61 	bl	800fd3e <USBD_LL_Transmit>

  return USBD_OK;
 800f47c:	2300      	movs	r3, #0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}

0800f486 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f486:	b580      	push	{r7, lr}
 800f488:	b084      	sub	sp, #16
 800f48a:	af00      	add	r7, sp, #0
 800f48c:	60f8      	str	r0, [r7, #12]
 800f48e:	60b9      	str	r1, [r7, #8]
 800f490:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	68ba      	ldr	r2, [r7, #8]
 800f496:	2100      	movs	r1, #0
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f000 fc50 	bl	800fd3e <USBD_LL_Transmit>

  return USBD_OK;
 800f49e:	2300      	movs	r3, #0
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3710      	adds	r7, #16
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2203      	movs	r2, #3
 800f4b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	68ba      	ldr	r2, [r7, #8]
 800f4d0:	2100      	movs	r1, #0
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f000 fc54 	bl	800fd80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f4d8:	2300      	movs	r3, #0
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b084      	sub	sp, #16
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	60f8      	str	r0, [r7, #12]
 800f4ea:	60b9      	str	r1, [r7, #8]
 800f4ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	68ba      	ldr	r2, [r7, #8]
 800f4f2:	2100      	movs	r1, #0
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f000 fc43 	bl	800fd80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f4fa:	2300      	movs	r3, #0
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3710      	adds	r7, #16
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2204      	movs	r2, #4
 800f510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f514:	2300      	movs	r3, #0
 800f516:	2200      	movs	r2, #0
 800f518:	2100      	movs	r1, #0
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 fc0f 	bl	800fd3e <USBD_LL_Transmit>

  return USBD_OK;
 800f520:	2300      	movs	r3, #0
}
 800f522:	4618      	mov	r0, r3
 800f524:	3708      	adds	r7, #8
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}

0800f52a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f52a:	b580      	push	{r7, lr}
 800f52c:	b082      	sub	sp, #8
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2205      	movs	r2, #5
 800f536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f53a:	2300      	movs	r3, #0
 800f53c:	2200      	movs	r2, #0
 800f53e:	2100      	movs	r1, #0
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 fc1d 	bl	800fd80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f546:	2300      	movs	r3, #0
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800f554:	2201      	movs	r2, #1
 800f556:	4913      	ldr	r1, [pc, #76]	; (800f5a4 <MX_USB_DEVICE_Init+0x54>)
 800f558:	4813      	ldr	r0, [pc, #76]	; (800f5a8 <MX_USB_DEVICE_Init+0x58>)
 800f55a:	f7fe fca7 	bl	800deac <USBD_Init>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	d001      	beq.n	800f568 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f564:	f7f1 fea9 	bl	80012ba <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_DFU) != USBD_OK)
 800f568:	4910      	ldr	r1, [pc, #64]	; (800f5ac <MX_USB_DEVICE_Init+0x5c>)
 800f56a:	480f      	ldr	r0, [pc, #60]	; (800f5a8 <MX_USB_DEVICE_Init+0x58>)
 800f56c:	f7fe fcdc 	bl	800df28 <USBD_RegisterClass>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d001      	beq.n	800f57a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f576:	f7f1 fea0 	bl	80012ba <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceHS, &USBD_DFU_fops_HS) != USBD_OK)
 800f57a:	490d      	ldr	r1, [pc, #52]	; (800f5b0 <MX_USB_DEVICE_Init+0x60>)
 800f57c:	480a      	ldr	r0, [pc, #40]	; (800f5a8 <MX_USB_DEVICE_Init+0x58>)
 800f57e:	f7fe f863 	bl	800d648 <USBD_DFU_RegisterMedia>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	d001      	beq.n	800f58c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f588:	f7f1 fe97 	bl	80012ba <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800f58c:	4806      	ldr	r0, [pc, #24]	; (800f5a8 <MX_USB_DEVICE_Init+0x58>)
 800f58e:	f7fe fd0f 	bl	800dfb0 <USBD_Start>
 800f592:	4603      	mov	r3, r0
 800f594:	2b00      	cmp	r3, #0
 800f596:	d001      	beq.n	800f59c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f598:	f7f1 fe8f 	bl	80012ba <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f59c:	f7f7 f94e 	bl	800683c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f5a0:	bf00      	nop
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	24000074 	.word	0x24000074
 800f5a8:	24000644 	.word	0x24000644
 800f5ac:	24000010 	.word	0x24000010
 800f5b0:	240000c8 	.word	0x240000c8

0800f5b4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	6039      	str	r1, [r7, #0]
 800f5be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	2212      	movs	r2, #18
 800f5c4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800f5c6:	4b03      	ldr	r3, [pc, #12]	; (800f5d4 <USBD_HS_DeviceDescriptor+0x20>)
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	370c      	adds	r7, #12
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr
 800f5d4:	24000094 	.word	0x24000094

0800f5d8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	4603      	mov	r3, r0
 800f5e0:	6039      	str	r1, [r7, #0]
 800f5e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	2204      	movs	r2, #4
 800f5e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f5ea:	4b03      	ldr	r3, [pc, #12]	; (800f5f8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	370c      	adds	r7, #12
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr
 800f5f8:	240000a8 	.word	0x240000a8

0800f5fc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	4603      	mov	r3, r0
 800f604:	6039      	str	r1, [r7, #0]
 800f606:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f608:	79fb      	ldrb	r3, [r7, #7]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d105      	bne.n	800f61a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f60e:	683a      	ldr	r2, [r7, #0]
 800f610:	4907      	ldr	r1, [pc, #28]	; (800f630 <USBD_HS_ProductStrDescriptor+0x34>)
 800f612:	4808      	ldr	r0, [pc, #32]	; (800f634 <USBD_HS_ProductStrDescriptor+0x38>)
 800f614:	f7ff feb0 	bl	800f378 <USBD_GetString>
 800f618:	e004      	b.n	800f624 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f61a:	683a      	ldr	r2, [r7, #0]
 800f61c:	4904      	ldr	r1, [pc, #16]	; (800f630 <USBD_HS_ProductStrDescriptor+0x34>)
 800f61e:	4805      	ldr	r0, [pc, #20]	; (800f634 <USBD_HS_ProductStrDescriptor+0x38>)
 800f620:	f7ff feaa 	bl	800f378 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f624:	4b02      	ldr	r3, [pc, #8]	; (800f630 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800f626:	4618      	mov	r0, r3
 800f628:	3708      	adds	r7, #8
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	24000920 	.word	0x24000920
 800f634:	08010d84 	.word	0x08010d84

0800f638 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	4603      	mov	r3, r0
 800f640:	6039      	str	r1, [r7, #0]
 800f642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f644:	683a      	ldr	r2, [r7, #0]
 800f646:	4904      	ldr	r1, [pc, #16]	; (800f658 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800f648:	4804      	ldr	r0, [pc, #16]	; (800f65c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800f64a:	f7ff fe95 	bl	800f378 <USBD_GetString>
  return USBD_StrDesc;
 800f64e:	4b02      	ldr	r3, [pc, #8]	; (800f658 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800f650:	4618      	mov	r0, r3
 800f652:	3708      	adds	r7, #8
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}
 800f658:	24000920 	.word	0x24000920
 800f65c:	08010da4 	.word	0x08010da4

0800f660 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	4603      	mov	r3, r0
 800f668:	6039      	str	r1, [r7, #0]
 800f66a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	221a      	movs	r2, #26
 800f670:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f672:	f000 f843 	bl	800f6fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f676:	4b02      	ldr	r3, [pc, #8]	; (800f680 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3708      	adds	r7, #8
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}
 800f680:	240000ac 	.word	0x240000ac

0800f684 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
 800f68a:	4603      	mov	r3, r0
 800f68c:	6039      	str	r1, [r7, #0]
 800f68e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f690:	79fb      	ldrb	r3, [r7, #7]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d105      	bne.n	800f6a2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f696:	683a      	ldr	r2, [r7, #0]
 800f698:	4907      	ldr	r1, [pc, #28]	; (800f6b8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f69a:	4808      	ldr	r0, [pc, #32]	; (800f6bc <USBD_HS_ConfigStrDescriptor+0x38>)
 800f69c:	f7ff fe6c 	bl	800f378 <USBD_GetString>
 800f6a0:	e004      	b.n	800f6ac <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f6a2:	683a      	ldr	r2, [r7, #0]
 800f6a4:	4904      	ldr	r1, [pc, #16]	; (800f6b8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f6a6:	4805      	ldr	r0, [pc, #20]	; (800f6bc <USBD_HS_ConfigStrDescriptor+0x38>)
 800f6a8:	f7ff fe66 	bl	800f378 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6ac:	4b02      	ldr	r3, [pc, #8]	; (800f6b8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3708      	adds	r7, #8
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	24000920 	.word	0x24000920
 800f6bc:	08010db8 	.word	0x08010db8

0800f6c0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	6039      	str	r1, [r7, #0]
 800f6ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6cc:	79fb      	ldrb	r3, [r7, #7]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d105      	bne.n	800f6de <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f6d2:	683a      	ldr	r2, [r7, #0]
 800f6d4:	4907      	ldr	r1, [pc, #28]	; (800f6f4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f6d6:	4808      	ldr	r0, [pc, #32]	; (800f6f8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f6d8:	f7ff fe4e 	bl	800f378 <USBD_GetString>
 800f6dc:	e004      	b.n	800f6e8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f6de:	683a      	ldr	r2, [r7, #0]
 800f6e0:	4904      	ldr	r1, [pc, #16]	; (800f6f4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f6e2:	4805      	ldr	r0, [pc, #20]	; (800f6f8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f6e4:	f7ff fe48 	bl	800f378 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6e8:	4b02      	ldr	r3, [pc, #8]	; (800f6f4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3708      	adds	r7, #8
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	24000920 	.word	0x24000920
 800f6f8:	08010dc4 	.word	0x08010dc4

0800f6fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b084      	sub	sp, #16
 800f700:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f702:	4b0f      	ldr	r3, [pc, #60]	; (800f740 <Get_SerialNum+0x44>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f708:	4b0e      	ldr	r3, [pc, #56]	; (800f744 <Get_SerialNum+0x48>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f70e:	4b0e      	ldr	r3, [pc, #56]	; (800f748 <Get_SerialNum+0x4c>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f714:	68fa      	ldr	r2, [r7, #12]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	4413      	add	r3, r2
 800f71a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d009      	beq.n	800f736 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f722:	2208      	movs	r2, #8
 800f724:	4909      	ldr	r1, [pc, #36]	; (800f74c <Get_SerialNum+0x50>)
 800f726:	68f8      	ldr	r0, [r7, #12]
 800f728:	f000 f814 	bl	800f754 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f72c:	2204      	movs	r2, #4
 800f72e:	4908      	ldr	r1, [pc, #32]	; (800f750 <Get_SerialNum+0x54>)
 800f730:	68b8      	ldr	r0, [r7, #8]
 800f732:	f000 f80f 	bl	800f754 <IntToUnicode>
  }
}
 800f736:	bf00      	nop
 800f738:	3710      	adds	r7, #16
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	1ff1e800 	.word	0x1ff1e800
 800f744:	1ff1e804 	.word	0x1ff1e804
 800f748:	1ff1e808 	.word	0x1ff1e808
 800f74c:	240000ae 	.word	0x240000ae
 800f750:	240000be 	.word	0x240000be

0800f754 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f754:	b480      	push	{r7}
 800f756:	b087      	sub	sp, #28
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	4613      	mov	r3, r2
 800f760:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f762:	2300      	movs	r3, #0
 800f764:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f766:	2300      	movs	r3, #0
 800f768:	75fb      	strb	r3, [r7, #23]
 800f76a:	e027      	b.n	800f7bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	0f1b      	lsrs	r3, r3, #28
 800f770:	2b09      	cmp	r3, #9
 800f772:	d80b      	bhi.n	800f78c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	0f1b      	lsrs	r3, r3, #28
 800f778:	b2da      	uxtb	r2, r3
 800f77a:	7dfb      	ldrb	r3, [r7, #23]
 800f77c:	005b      	lsls	r3, r3, #1
 800f77e:	4619      	mov	r1, r3
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	440b      	add	r3, r1
 800f784:	3230      	adds	r2, #48	; 0x30
 800f786:	b2d2      	uxtb	r2, r2
 800f788:	701a      	strb	r2, [r3, #0]
 800f78a:	e00a      	b.n	800f7a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	0f1b      	lsrs	r3, r3, #28
 800f790:	b2da      	uxtb	r2, r3
 800f792:	7dfb      	ldrb	r3, [r7, #23]
 800f794:	005b      	lsls	r3, r3, #1
 800f796:	4619      	mov	r1, r3
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	440b      	add	r3, r1
 800f79c:	3237      	adds	r2, #55	; 0x37
 800f79e:	b2d2      	uxtb	r2, r2
 800f7a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	011b      	lsls	r3, r3, #4
 800f7a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f7a8:	7dfb      	ldrb	r3, [r7, #23]
 800f7aa:	005b      	lsls	r3, r3, #1
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	68ba      	ldr	r2, [r7, #8]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f7b6:	7dfb      	ldrb	r3, [r7, #23]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	75fb      	strb	r3, [r7, #23]
 800f7bc:	7dfa      	ldrb	r2, [r7, #23]
 800f7be:	79fb      	ldrb	r3, [r7, #7]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d3d3      	bcc.n	800f76c <IntToUnicode+0x18>
  }
}
 800f7c4:	bf00      	nop
 800f7c6:	bf00      	nop
 800f7c8:	371c      	adds	r7, #28
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr

0800f7d2 <MEM_If_Init_HS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_HS(void)
{
 800f7d2:	b480      	push	{r7}
 800f7d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800f7d6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr

0800f7e2 <MEM_If_DeInit_HS>:
/**
  * @brief  De-Initializes Memory.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_DeInit_HS(void)
{
 800f7e2:	b480      	push	{r7}
 800f7e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800f7e6:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr

0800f7f2 <MEM_If_Erase_HS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_HS(uint32_t Add)
{
 800f7f2:	b480      	push	{r7}
 800f7f4:	b083      	sub	sp, #12
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 8 */
  UNUSED(Add);

  return (USBD_OK);
 800f7fa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	370c      	adds	r7, #12
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <MEM_If_Write_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800f808:	b480      	push	{r7}
 800f80a:	b085      	sub	sp, #20
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (USBD_OK);
 800f814:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800f816:	4618      	mov	r0, r3
 800f818:	3714      	adds	r7, #20
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr

0800f822 <MEM_If_Read_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800f822:	b480      	push	{r7}
 800f824:	b085      	sub	sp, #20
 800f826:	af00      	add	r7, sp, #0
 800f828:	60f8      	str	r0, [r7, #12]
 800f82a:	60b9      	str	r1, [r7, #8]
 800f82c:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 10 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (uint8_t*)(USBD_OK);
 800f82e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800f830:	4618      	mov	r0, r3
 800f832:	3714      	adds	r7, #20
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr

0800f83c <MEM_If_GetStatus_HS>:
  * @param  Cmd: Number of data to be read (in bytes).
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval 0 if operation is successful
  */
uint16_t MEM_If_GetStatus_HS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b085      	sub	sp, #20
 800f840:	af00      	add	r7, sp, #0
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	460b      	mov	r3, r1
 800f846:	607a      	str	r2, [r7, #4]
 800f848:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 11 */
  UNUSED(Add);
  UNUSED(buffer);

  switch(Cmd)
 800f84a:	7afb      	ldrb	r3, [r7, #11]
 800f84c:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800f84e:	bf00      	nop
  }
  return  (USBD_OK);
 800f850:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800f852:	4618      	mov	r0, r3
 800f854:	3714      	adds	r7, #20
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr
	...

0800f860 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b0b2      	sub	sp, #200	; 0xc8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f868:	f107 0310 	add.w	r3, r7, #16
 800f86c:	22b8      	movs	r2, #184	; 0xb8
 800f86e:	2100      	movs	r1, #0
 800f870:	4618      	mov	r0, r3
 800f872:	f000 fc0a 	bl	801008a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	4a1a      	ldr	r2, [pc, #104]	; (800f8e4 <HAL_PCD_MspInit+0x84>)
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d12c      	bne.n	800f8da <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f880:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f884:	f04f 0300 	mov.w	r3, #0
 800f888:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f88c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800f890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f894:	f107 0310 	add.w	r3, r7, #16
 800f898:	4618      	mov	r0, r3
 800f89a:	f7f8 f859 	bl	8007950 <HAL_RCCEx_PeriphCLKConfig>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d001      	beq.n	800f8a8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 800f8a4:	f7f1 fd09 	bl	80012ba <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f8a8:	f7f6 ffc8 	bl	800683c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800f8ac:	4b0e      	ldr	r3, [pc, #56]	; (800f8e8 <HAL_PCD_MspInit+0x88>)
 800f8ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f8b2:	4a0d      	ldr	r2, [pc, #52]	; (800f8e8 <HAL_PCD_MspInit+0x88>)
 800f8b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f8b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f8bc:	4b0a      	ldr	r3, [pc, #40]	; (800f8e8 <HAL_PCD_MspInit+0x88>)
 800f8be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f8c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8c6:	60fb      	str	r3, [r7, #12]
 800f8c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	2100      	movs	r1, #0
 800f8ce:	204d      	movs	r0, #77	; 0x4d
 800f8d0:	f7f2 fb85 	bl	8001fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800f8d4:	204d      	movs	r0, #77	; 0x4d
 800f8d6:	f7f2 fb9c 	bl	8002012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800f8da:	bf00      	nop
 800f8dc:	37c8      	adds	r7, #200	; 0xc8
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	40040000 	.word	0x40040000
 800f8e8:	58024400 	.word	0x58024400

0800f8ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800f900:	4619      	mov	r1, r3
 800f902:	4610      	mov	r0, r2
 800f904:	f7fe fbbc 	bl	800e080 <USBD_LL_SetupStage>
}
 800f908:	bf00      	nop
 800f90a:	3708      	adds	r7, #8
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	460b      	mov	r3, r1
 800f91a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f922:	78fa      	ldrb	r2, [r7, #3]
 800f924:	6879      	ldr	r1, [r7, #4]
 800f926:	4613      	mov	r3, r2
 800f928:	00db      	lsls	r3, r3, #3
 800f92a:	4413      	add	r3, r2
 800f92c:	009b      	lsls	r3, r3, #2
 800f92e:	440b      	add	r3, r1
 800f930:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	78fb      	ldrb	r3, [r7, #3]
 800f938:	4619      	mov	r1, r3
 800f93a:	f7fe fbf6 	bl	800e12a <USBD_LL_DataOutStage>
}
 800f93e:	bf00      	nop
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}

0800f946 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b082      	sub	sp, #8
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
 800f94e:	460b      	mov	r3, r1
 800f950:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f958:	78fa      	ldrb	r2, [r7, #3]
 800f95a:	6879      	ldr	r1, [r7, #4]
 800f95c:	4613      	mov	r3, r2
 800f95e:	00db      	lsls	r3, r3, #3
 800f960:	4413      	add	r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	440b      	add	r3, r1
 800f966:	3320      	adds	r3, #32
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	78fb      	ldrb	r3, [r7, #3]
 800f96c:	4619      	mov	r1, r3
 800f96e:	f7fe fc8f 	bl	800e290 <USBD_LL_DataInStage>
}
 800f972:	bf00      	nop
 800f974:	3708      	adds	r7, #8
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}

0800f97a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f97a:	b580      	push	{r7, lr}
 800f97c:	b082      	sub	sp, #8
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f988:	4618      	mov	r0, r3
 800f98a:	f7fe fdc9 	bl	800e520 <USBD_LL_SOF>
}
 800f98e:	bf00      	nop
 800f990:	3708      	adds	r7, #8
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}

0800f996 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f996:	b580      	push	{r7, lr}
 800f998:	b084      	sub	sp, #16
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	79db      	ldrb	r3, [r3, #7]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d102      	bne.n	800f9b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	73fb      	strb	r3, [r7, #15]
 800f9ae:	e008      	b.n	800f9c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	79db      	ldrb	r3, [r3, #7]
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	d102      	bne.n	800f9be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	73fb      	strb	r3, [r7, #15]
 800f9bc:	e001      	b.n	800f9c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f9be:	f7f1 fc7c 	bl	80012ba <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f9c8:	7bfa      	ldrb	r2, [r7, #15]
 800f9ca:	4611      	mov	r1, r2
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7fe fd63 	bl	800e498 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7fe fd0b 	bl	800e3f4 <USBD_LL_Reset>
}
 800f9de:	bf00      	nop
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
	...

0800f9e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fe fd5e 	bl	800e4b8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	687a      	ldr	r2, [r7, #4]
 800fa08:	6812      	ldr	r2, [r2, #0]
 800fa0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa0e:	f043 0301 	orr.w	r3, r3, #1
 800fa12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	7adb      	ldrb	r3, [r3, #11]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d005      	beq.n	800fa28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa1c:	4b04      	ldr	r3, [pc, #16]	; (800fa30 <HAL_PCD_SuspendCallback+0x48>)
 800fa1e:	691b      	ldr	r3, [r3, #16]
 800fa20:	4a03      	ldr	r2, [pc, #12]	; (800fa30 <HAL_PCD_SuspendCallback+0x48>)
 800fa22:	f043 0306 	orr.w	r3, r3, #6
 800fa26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fa28:	bf00      	nop
 800fa2a:	3708      	adds	r7, #8
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	e000ed00 	.word	0xe000ed00

0800fa34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7fe fd54 	bl	800e4f0 <USBD_LL_Resume>
}
 800fa48:	bf00      	nop
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	460b      	mov	r3, r1
 800fa5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fa62:	78fa      	ldrb	r2, [r7, #3]
 800fa64:	4611      	mov	r1, r2
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7fe fdac 	bl	800e5c4 <USBD_LL_IsoOUTIncomplete>
}
 800fa6c:	bf00      	nop
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fa86:	78fa      	ldrb	r2, [r7, #3]
 800fa88:	4611      	mov	r1, r2
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fe fd68 	bl	800e560 <USBD_LL_IsoINIncomplete>
}
 800fa90:	bf00      	nop
 800fa92:	3708      	adds	r7, #8
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fe fdbe 	bl	800e628 <USBD_LL_DevConnected>
}
 800faac:	bf00      	nop
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7fe fdbb 	bl	800e63e <USBD_LL_DevDisconnected>
}
 800fac8:	bf00      	nop
 800faca:	3708      	adds	r7, #8
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}

0800fad0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d140      	bne.n	800fb62 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800fae0:	4a22      	ldr	r2, [pc, #136]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4a20      	ldr	r2, [pc, #128]	; (800fb6c <USBD_LL_Init+0x9c>)
 800faec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800faf0:	4b1e      	ldr	r3, [pc, #120]	; (800fb6c <USBD_LL_Init+0x9c>)
 800faf2:	4a1f      	ldr	r2, [pc, #124]	; (800fb70 <USBD_LL_Init+0xa0>)
 800faf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800faf6:	4b1d      	ldr	r3, [pc, #116]	; (800fb6c <USBD_LL_Init+0x9c>)
 800faf8:	2209      	movs	r2, #9
 800fafa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800fafc:	4b1b      	ldr	r3, [pc, #108]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fafe:	2202      	movs	r2, #2
 800fb00:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800fb02:	4b1a      	ldr	r3, [pc, #104]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fb04:	2200      	movs	r2, #0
 800fb06:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800fb08:	4b18      	ldr	r3, [pc, #96]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fb0a:	2202      	movs	r2, #2
 800fb0c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800fb0e:	4b17      	ldr	r3, [pc, #92]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fb10:	2200      	movs	r2, #0
 800fb12:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800fb14:	4b15      	ldr	r3, [pc, #84]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fb16:	2200      	movs	r2, #0
 800fb18:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800fb1a:	4b14      	ldr	r3, [pc, #80]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800fb20:	4b12      	ldr	r3, [pc, #72]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fb22:	2200      	movs	r2, #0
 800fb24:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800fb26:	4b11      	ldr	r3, [pc, #68]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800fb2c:	4b0f      	ldr	r3, [pc, #60]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fb2e:	2200      	movs	r2, #0
 800fb30:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800fb32:	480e      	ldr	r0, [pc, #56]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fb34:	f7f5 fbd0 	bl	80052d8 <HAL_PCD_Init>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d001      	beq.n	800fb42 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fb3e:	f7f1 fbbc 	bl	80012ba <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800fb42:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fb46:	4809      	ldr	r0, [pc, #36]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fb48:	f7f6 fdfd 	bl	8006746 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800fb4c:	2280      	movs	r2, #128	; 0x80
 800fb4e:	2100      	movs	r1, #0
 800fb50:	4806      	ldr	r0, [pc, #24]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fb52:	f7f6 fdb1 	bl	80066b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800fb56:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800fb5a:	2101      	movs	r1, #1
 800fb5c:	4803      	ldr	r0, [pc, #12]	; (800fb6c <USBD_LL_Init+0x9c>)
 800fb5e:	f7f6 fdab 	bl	80066b8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800fb62:	2300      	movs	r3, #0
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}
 800fb6c:	24000b20 	.word	0x24000b20
 800fb70:	40040000 	.word	0x40040000

0800fb74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb80:	2300      	movs	r3, #0
 800fb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7f5 fcb0 	bl	80054f0 <HAL_PCD_Start>
 800fb90:	4603      	mov	r3, r0
 800fb92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb94:	7bfb      	ldrb	r3, [r7, #15]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f000 f92c 	bl	800fdf4 <USBD_Get_USB_Status>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fba0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3710      	adds	r7, #16
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}

0800fbaa <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800fbaa:	b580      	push	{r7, lr}
 800fbac:	b084      	sub	sp, #16
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7f5 fcca 	bl	800555a <HAL_PCD_Stop>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbca:	7bfb      	ldrb	r3, [r7, #15]
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f000 f911 	bl	800fdf4 <USBD_Get_USB_Status>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3710      	adds	r7, #16
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	4608      	mov	r0, r1
 800fbea:	4611      	mov	r1, r2
 800fbec:	461a      	mov	r2, r3
 800fbee:	4603      	mov	r3, r0
 800fbf0:	70fb      	strb	r3, [r7, #3]
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	70bb      	strb	r3, [r7, #2]
 800fbf6:	4613      	mov	r3, r2
 800fbf8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc08:	78bb      	ldrb	r3, [r7, #2]
 800fc0a:	883a      	ldrh	r2, [r7, #0]
 800fc0c:	78f9      	ldrb	r1, [r7, #3]
 800fc0e:	f7f6 f9d1 	bl	8005fb4 <HAL_PCD_EP_Open>
 800fc12:	4603      	mov	r3, r0
 800fc14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc16:	7bfb      	ldrb	r3, [r7, #15]
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f000 f8eb 	bl	800fdf4 <USBD_Get_USB_Status>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc22:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3710      	adds	r7, #16
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	460b      	mov	r3, r1
 800fc36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc46:	78fa      	ldrb	r2, [r7, #3]
 800fc48:	4611      	mov	r1, r2
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7f6 fa8f 	bl	800616e <HAL_PCD_EP_SetStall>
 800fc50:	4603      	mov	r3, r0
 800fc52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc54:	7bfb      	ldrb	r3, [r7, #15]
 800fc56:	4618      	mov	r0, r3
 800fc58:	f000 f8cc 	bl	800fdf4 <USBD_Get_USB_Status>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc60:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3710      	adds	r7, #16
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}

0800fc6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc6a:	b580      	push	{r7, lr}
 800fc6c:	b084      	sub	sp, #16
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	6078      	str	r0, [r7, #4]
 800fc72:	460b      	mov	r3, r1
 800fc74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc76:	2300      	movs	r3, #0
 800fc78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc84:	78fa      	ldrb	r2, [r7, #3]
 800fc86:	4611      	mov	r1, r2
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7f6 fad3 	bl	8006234 <HAL_PCD_EP_ClrStall>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc92:	7bfb      	ldrb	r3, [r7, #15]
 800fc94:	4618      	mov	r0, r3
 800fc96:	f000 f8ad 	bl	800fdf4 <USBD_Get_USB_Status>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3710      	adds	r7, #16
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b085      	sub	sp, #20
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fcbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	da0b      	bge.n	800fcdc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fcc4:	78fb      	ldrb	r3, [r7, #3]
 800fcc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fcca:	68f9      	ldr	r1, [r7, #12]
 800fccc:	4613      	mov	r3, r2
 800fcce:	00db      	lsls	r3, r3, #3
 800fcd0:	4413      	add	r3, r2
 800fcd2:	009b      	lsls	r3, r3, #2
 800fcd4:	440b      	add	r3, r1
 800fcd6:	3316      	adds	r3, #22
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	e00b      	b.n	800fcf4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fcdc:	78fb      	ldrb	r3, [r7, #3]
 800fcde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fce2:	68f9      	ldr	r1, [r7, #12]
 800fce4:	4613      	mov	r3, r2
 800fce6:	00db      	lsls	r3, r3, #3
 800fce8:	4413      	add	r3, r2
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	440b      	add	r3, r1
 800fcee:	f203 2356 	addw	r3, r3, #598	; 0x256
 800fcf2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3714      	adds	r7, #20
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfe:	4770      	bx	lr

0800fd00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b084      	sub	sp, #16
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	460b      	mov	r3, r1
 800fd0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd10:	2300      	movs	r3, #0
 800fd12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd1a:	78fa      	ldrb	r2, [r7, #3]
 800fd1c:	4611      	mov	r1, r2
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7f6 f924 	bl	8005f6c <HAL_PCD_SetAddress>
 800fd24:	4603      	mov	r3, r0
 800fd26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd28:	7bfb      	ldrb	r3, [r7, #15]
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f000 f862 	bl	800fdf4 <USBD_Get_USB_Status>
 800fd30:	4603      	mov	r3, r0
 800fd32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd34:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3710      	adds	r7, #16
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b086      	sub	sp, #24
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	60f8      	str	r0, [r7, #12]
 800fd46:	607a      	str	r2, [r7, #4]
 800fd48:	603b      	str	r3, [r7, #0]
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd52:	2300      	movs	r3, #0
 800fd54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fd5c:	7af9      	ldrb	r1, [r7, #11]
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	f7f6 f9ca 	bl	80060fa <HAL_PCD_EP_Transmit>
 800fd66:	4603      	mov	r3, r0
 800fd68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd6a:	7dfb      	ldrb	r3, [r7, #23]
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f000 f841 	bl	800fdf4 <USBD_Get_USB_Status>
 800fd72:	4603      	mov	r3, r0
 800fd74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd76:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3718      	adds	r7, #24
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}

0800fd80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b086      	sub	sp, #24
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	60f8      	str	r0, [r7, #12]
 800fd88:	607a      	str	r2, [r7, #4]
 800fd8a:	603b      	str	r3, [r7, #0]
 800fd8c:	460b      	mov	r3, r1
 800fd8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd90:	2300      	movs	r3, #0
 800fd92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd94:	2300      	movs	r3, #0
 800fd96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fd9e:	7af9      	ldrb	r1, [r7, #11]
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	f7f6 f96e 	bl	8006084 <HAL_PCD_EP_Receive>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdac:	7dfb      	ldrb	r3, [r7, #23]
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f000 f820 	bl	800fdf4 <USBD_Get_USB_Status>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fdb8:	7dbb      	ldrb	r3, [r7, #22]
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3718      	adds	r7, #24
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
	...

0800fdc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fdcc:	4b03      	ldr	r3, [pc, #12]	; (800fddc <USBD_static_malloc+0x18>)
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	370c      	adds	r7, #12
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop
 800fddc:	24001004 	.word	0x24001004

0800fde0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b083      	sub	sp, #12
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800fde8:	bf00      	nop
 800fdea:	370c      	adds	r7, #12
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr

0800fdf4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b085      	sub	sp, #20
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fe02:	79fb      	ldrb	r3, [r7, #7]
 800fe04:	2b03      	cmp	r3, #3
 800fe06:	d817      	bhi.n	800fe38 <USBD_Get_USB_Status+0x44>
 800fe08:	a201      	add	r2, pc, #4	; (adr r2, 800fe10 <USBD_Get_USB_Status+0x1c>)
 800fe0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe0e:	bf00      	nop
 800fe10:	0800fe21 	.word	0x0800fe21
 800fe14:	0800fe27 	.word	0x0800fe27
 800fe18:	0800fe2d 	.word	0x0800fe2d
 800fe1c:	0800fe33 	.word	0x0800fe33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe20:	2300      	movs	r3, #0
 800fe22:	73fb      	strb	r3, [r7, #15]
    break;
 800fe24:	e00b      	b.n	800fe3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe26:	2303      	movs	r3, #3
 800fe28:	73fb      	strb	r3, [r7, #15]
    break;
 800fe2a:	e008      	b.n	800fe3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe30:	e005      	b.n	800fe3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe32:	2303      	movs	r3, #3
 800fe34:	73fb      	strb	r3, [r7, #15]
    break;
 800fe36:	e002      	b.n	800fe3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fe38:	2303      	movs	r3, #3
 800fe3a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe3c:	bf00      	nop
  }
  return usb_status;
 800fe3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3714      	adds	r7, #20
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr

0800fe4c <std>:
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	b510      	push	{r4, lr}
 800fe50:	4604      	mov	r4, r0
 800fe52:	e9c0 3300 	strd	r3, r3, [r0]
 800fe56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe5a:	6083      	str	r3, [r0, #8]
 800fe5c:	8181      	strh	r1, [r0, #12]
 800fe5e:	6643      	str	r3, [r0, #100]	; 0x64
 800fe60:	81c2      	strh	r2, [r0, #14]
 800fe62:	6183      	str	r3, [r0, #24]
 800fe64:	4619      	mov	r1, r3
 800fe66:	2208      	movs	r2, #8
 800fe68:	305c      	adds	r0, #92	; 0x5c
 800fe6a:	f000 f90e 	bl	801008a <memset>
 800fe6e:	4b0d      	ldr	r3, [pc, #52]	; (800fea4 <std+0x58>)
 800fe70:	6263      	str	r3, [r4, #36]	; 0x24
 800fe72:	4b0d      	ldr	r3, [pc, #52]	; (800fea8 <std+0x5c>)
 800fe74:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe76:	4b0d      	ldr	r3, [pc, #52]	; (800feac <std+0x60>)
 800fe78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe7a:	4b0d      	ldr	r3, [pc, #52]	; (800feb0 <std+0x64>)
 800fe7c:	6323      	str	r3, [r4, #48]	; 0x30
 800fe7e:	4b0d      	ldr	r3, [pc, #52]	; (800feb4 <std+0x68>)
 800fe80:	6224      	str	r4, [r4, #32]
 800fe82:	429c      	cmp	r4, r3
 800fe84:	d006      	beq.n	800fe94 <std+0x48>
 800fe86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fe8a:	4294      	cmp	r4, r2
 800fe8c:	d002      	beq.n	800fe94 <std+0x48>
 800fe8e:	33d0      	adds	r3, #208	; 0xd0
 800fe90:	429c      	cmp	r4, r3
 800fe92:	d105      	bne.n	800fea0 <std+0x54>
 800fe94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fe98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe9c:	f000 b96e 	b.w	801017c <__retarget_lock_init_recursive>
 800fea0:	bd10      	pop	{r4, pc}
 800fea2:	bf00      	nop
 800fea4:	08010005 	.word	0x08010005
 800fea8:	08010027 	.word	0x08010027
 800feac:	0801005f 	.word	0x0801005f
 800feb0:	08010083 	.word	0x08010083
 800feb4:	24001428 	.word	0x24001428

0800feb8 <stdio_exit_handler>:
 800feb8:	4a02      	ldr	r2, [pc, #8]	; (800fec4 <stdio_exit_handler+0xc>)
 800feba:	4903      	ldr	r1, [pc, #12]	; (800fec8 <stdio_exit_handler+0x10>)
 800febc:	4803      	ldr	r0, [pc, #12]	; (800fecc <stdio_exit_handler+0x14>)
 800febe:	f000 b869 	b.w	800ff94 <_fwalk_sglue>
 800fec2:	bf00      	nop
 800fec4:	240000e4 	.word	0x240000e4
 800fec8:	08010a29 	.word	0x08010a29
 800fecc:	240000f0 	.word	0x240000f0

0800fed0 <cleanup_stdio>:
 800fed0:	6841      	ldr	r1, [r0, #4]
 800fed2:	4b0c      	ldr	r3, [pc, #48]	; (800ff04 <cleanup_stdio+0x34>)
 800fed4:	4299      	cmp	r1, r3
 800fed6:	b510      	push	{r4, lr}
 800fed8:	4604      	mov	r4, r0
 800feda:	d001      	beq.n	800fee0 <cleanup_stdio+0x10>
 800fedc:	f000 fda4 	bl	8010a28 <_fflush_r>
 800fee0:	68a1      	ldr	r1, [r4, #8]
 800fee2:	4b09      	ldr	r3, [pc, #36]	; (800ff08 <cleanup_stdio+0x38>)
 800fee4:	4299      	cmp	r1, r3
 800fee6:	d002      	beq.n	800feee <cleanup_stdio+0x1e>
 800fee8:	4620      	mov	r0, r4
 800feea:	f000 fd9d 	bl	8010a28 <_fflush_r>
 800feee:	68e1      	ldr	r1, [r4, #12]
 800fef0:	4b06      	ldr	r3, [pc, #24]	; (800ff0c <cleanup_stdio+0x3c>)
 800fef2:	4299      	cmp	r1, r3
 800fef4:	d004      	beq.n	800ff00 <cleanup_stdio+0x30>
 800fef6:	4620      	mov	r0, r4
 800fef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fefc:	f000 bd94 	b.w	8010a28 <_fflush_r>
 800ff00:	bd10      	pop	{r4, pc}
 800ff02:	bf00      	nop
 800ff04:	24001428 	.word	0x24001428
 800ff08:	24001490 	.word	0x24001490
 800ff0c:	240014f8 	.word	0x240014f8

0800ff10 <global_stdio_init.part.0>:
 800ff10:	b510      	push	{r4, lr}
 800ff12:	4b0b      	ldr	r3, [pc, #44]	; (800ff40 <global_stdio_init.part.0+0x30>)
 800ff14:	4c0b      	ldr	r4, [pc, #44]	; (800ff44 <global_stdio_init.part.0+0x34>)
 800ff16:	4a0c      	ldr	r2, [pc, #48]	; (800ff48 <global_stdio_init.part.0+0x38>)
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	2104      	movs	r1, #4
 800ff20:	f7ff ff94 	bl	800fe4c <std>
 800ff24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ff28:	2201      	movs	r2, #1
 800ff2a:	2109      	movs	r1, #9
 800ff2c:	f7ff ff8e 	bl	800fe4c <std>
 800ff30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ff34:	2202      	movs	r2, #2
 800ff36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff3a:	2112      	movs	r1, #18
 800ff3c:	f7ff bf86 	b.w	800fe4c <std>
 800ff40:	24001560 	.word	0x24001560
 800ff44:	24001428 	.word	0x24001428
 800ff48:	0800feb9 	.word	0x0800feb9

0800ff4c <__sfp_lock_acquire>:
 800ff4c:	4801      	ldr	r0, [pc, #4]	; (800ff54 <__sfp_lock_acquire+0x8>)
 800ff4e:	f000 b916 	b.w	801017e <__retarget_lock_acquire_recursive>
 800ff52:	bf00      	nop
 800ff54:	24001569 	.word	0x24001569

0800ff58 <__sfp_lock_release>:
 800ff58:	4801      	ldr	r0, [pc, #4]	; (800ff60 <__sfp_lock_release+0x8>)
 800ff5a:	f000 b911 	b.w	8010180 <__retarget_lock_release_recursive>
 800ff5e:	bf00      	nop
 800ff60:	24001569 	.word	0x24001569

0800ff64 <__sinit>:
 800ff64:	b510      	push	{r4, lr}
 800ff66:	4604      	mov	r4, r0
 800ff68:	f7ff fff0 	bl	800ff4c <__sfp_lock_acquire>
 800ff6c:	6a23      	ldr	r3, [r4, #32]
 800ff6e:	b11b      	cbz	r3, 800ff78 <__sinit+0x14>
 800ff70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff74:	f7ff bff0 	b.w	800ff58 <__sfp_lock_release>
 800ff78:	4b04      	ldr	r3, [pc, #16]	; (800ff8c <__sinit+0x28>)
 800ff7a:	6223      	str	r3, [r4, #32]
 800ff7c:	4b04      	ldr	r3, [pc, #16]	; (800ff90 <__sinit+0x2c>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d1f5      	bne.n	800ff70 <__sinit+0xc>
 800ff84:	f7ff ffc4 	bl	800ff10 <global_stdio_init.part.0>
 800ff88:	e7f2      	b.n	800ff70 <__sinit+0xc>
 800ff8a:	bf00      	nop
 800ff8c:	0800fed1 	.word	0x0800fed1
 800ff90:	24001560 	.word	0x24001560

0800ff94 <_fwalk_sglue>:
 800ff94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff98:	4607      	mov	r7, r0
 800ff9a:	4688      	mov	r8, r1
 800ff9c:	4614      	mov	r4, r2
 800ff9e:	2600      	movs	r6, #0
 800ffa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ffa4:	f1b9 0901 	subs.w	r9, r9, #1
 800ffa8:	d505      	bpl.n	800ffb6 <_fwalk_sglue+0x22>
 800ffaa:	6824      	ldr	r4, [r4, #0]
 800ffac:	2c00      	cmp	r4, #0
 800ffae:	d1f7      	bne.n	800ffa0 <_fwalk_sglue+0xc>
 800ffb0:	4630      	mov	r0, r6
 800ffb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffb6:	89ab      	ldrh	r3, [r5, #12]
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d907      	bls.n	800ffcc <_fwalk_sglue+0x38>
 800ffbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	d003      	beq.n	800ffcc <_fwalk_sglue+0x38>
 800ffc4:	4629      	mov	r1, r5
 800ffc6:	4638      	mov	r0, r7
 800ffc8:	47c0      	blx	r8
 800ffca:	4306      	orrs	r6, r0
 800ffcc:	3568      	adds	r5, #104	; 0x68
 800ffce:	e7e9      	b.n	800ffa4 <_fwalk_sglue+0x10>

0800ffd0 <iprintf>:
 800ffd0:	b40f      	push	{r0, r1, r2, r3}
 800ffd2:	b507      	push	{r0, r1, r2, lr}
 800ffd4:	4906      	ldr	r1, [pc, #24]	; (800fff0 <iprintf+0x20>)
 800ffd6:	ab04      	add	r3, sp, #16
 800ffd8:	6808      	ldr	r0, [r1, #0]
 800ffda:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffde:	6881      	ldr	r1, [r0, #8]
 800ffe0:	9301      	str	r3, [sp, #4]
 800ffe2:	f000 f9f1 	bl	80103c8 <_vfiprintf_r>
 800ffe6:	b003      	add	sp, #12
 800ffe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffec:	b004      	add	sp, #16
 800ffee:	4770      	bx	lr
 800fff0:	2400013c 	.word	0x2400013c

0800fff4 <putchar>:
 800fff4:	4b02      	ldr	r3, [pc, #8]	; (8010000 <putchar+0xc>)
 800fff6:	4601      	mov	r1, r0
 800fff8:	6818      	ldr	r0, [r3, #0]
 800fffa:	6882      	ldr	r2, [r0, #8]
 800fffc:	f000 bd3c 	b.w	8010a78 <_putc_r>
 8010000:	2400013c 	.word	0x2400013c

08010004 <__sread>:
 8010004:	b510      	push	{r4, lr}
 8010006:	460c      	mov	r4, r1
 8010008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801000c:	f000 f868 	bl	80100e0 <_read_r>
 8010010:	2800      	cmp	r0, #0
 8010012:	bfab      	itete	ge
 8010014:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010016:	89a3      	ldrhlt	r3, [r4, #12]
 8010018:	181b      	addge	r3, r3, r0
 801001a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801001e:	bfac      	ite	ge
 8010020:	6563      	strge	r3, [r4, #84]	; 0x54
 8010022:	81a3      	strhlt	r3, [r4, #12]
 8010024:	bd10      	pop	{r4, pc}

08010026 <__swrite>:
 8010026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801002a:	461f      	mov	r7, r3
 801002c:	898b      	ldrh	r3, [r1, #12]
 801002e:	05db      	lsls	r3, r3, #23
 8010030:	4605      	mov	r5, r0
 8010032:	460c      	mov	r4, r1
 8010034:	4616      	mov	r6, r2
 8010036:	d505      	bpl.n	8010044 <__swrite+0x1e>
 8010038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801003c:	2302      	movs	r3, #2
 801003e:	2200      	movs	r2, #0
 8010040:	f000 f83c 	bl	80100bc <_lseek_r>
 8010044:	89a3      	ldrh	r3, [r4, #12]
 8010046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801004a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801004e:	81a3      	strh	r3, [r4, #12]
 8010050:	4632      	mov	r2, r6
 8010052:	463b      	mov	r3, r7
 8010054:	4628      	mov	r0, r5
 8010056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801005a:	f000 b853 	b.w	8010104 <_write_r>

0801005e <__sseek>:
 801005e:	b510      	push	{r4, lr}
 8010060:	460c      	mov	r4, r1
 8010062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010066:	f000 f829 	bl	80100bc <_lseek_r>
 801006a:	1c43      	adds	r3, r0, #1
 801006c:	89a3      	ldrh	r3, [r4, #12]
 801006e:	bf15      	itete	ne
 8010070:	6560      	strne	r0, [r4, #84]	; 0x54
 8010072:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010076:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801007a:	81a3      	strheq	r3, [r4, #12]
 801007c:	bf18      	it	ne
 801007e:	81a3      	strhne	r3, [r4, #12]
 8010080:	bd10      	pop	{r4, pc}

08010082 <__sclose>:
 8010082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010086:	f000 b809 	b.w	801009c <_close_r>

0801008a <memset>:
 801008a:	4402      	add	r2, r0
 801008c:	4603      	mov	r3, r0
 801008e:	4293      	cmp	r3, r2
 8010090:	d100      	bne.n	8010094 <memset+0xa>
 8010092:	4770      	bx	lr
 8010094:	f803 1b01 	strb.w	r1, [r3], #1
 8010098:	e7f9      	b.n	801008e <memset+0x4>
	...

0801009c <_close_r>:
 801009c:	b538      	push	{r3, r4, r5, lr}
 801009e:	4d06      	ldr	r5, [pc, #24]	; (80100b8 <_close_r+0x1c>)
 80100a0:	2300      	movs	r3, #0
 80100a2:	4604      	mov	r4, r0
 80100a4:	4608      	mov	r0, r1
 80100a6:	602b      	str	r3, [r5, #0]
 80100a8:	f7f1 fcfb 	bl	8001aa2 <_close>
 80100ac:	1c43      	adds	r3, r0, #1
 80100ae:	d102      	bne.n	80100b6 <_close_r+0x1a>
 80100b0:	682b      	ldr	r3, [r5, #0]
 80100b2:	b103      	cbz	r3, 80100b6 <_close_r+0x1a>
 80100b4:	6023      	str	r3, [r4, #0]
 80100b6:	bd38      	pop	{r3, r4, r5, pc}
 80100b8:	24001564 	.word	0x24001564

080100bc <_lseek_r>:
 80100bc:	b538      	push	{r3, r4, r5, lr}
 80100be:	4d07      	ldr	r5, [pc, #28]	; (80100dc <_lseek_r+0x20>)
 80100c0:	4604      	mov	r4, r0
 80100c2:	4608      	mov	r0, r1
 80100c4:	4611      	mov	r1, r2
 80100c6:	2200      	movs	r2, #0
 80100c8:	602a      	str	r2, [r5, #0]
 80100ca:	461a      	mov	r2, r3
 80100cc:	f7f1 fd10 	bl	8001af0 <_lseek>
 80100d0:	1c43      	adds	r3, r0, #1
 80100d2:	d102      	bne.n	80100da <_lseek_r+0x1e>
 80100d4:	682b      	ldr	r3, [r5, #0]
 80100d6:	b103      	cbz	r3, 80100da <_lseek_r+0x1e>
 80100d8:	6023      	str	r3, [r4, #0]
 80100da:	bd38      	pop	{r3, r4, r5, pc}
 80100dc:	24001564 	.word	0x24001564

080100e0 <_read_r>:
 80100e0:	b538      	push	{r3, r4, r5, lr}
 80100e2:	4d07      	ldr	r5, [pc, #28]	; (8010100 <_read_r+0x20>)
 80100e4:	4604      	mov	r4, r0
 80100e6:	4608      	mov	r0, r1
 80100e8:	4611      	mov	r1, r2
 80100ea:	2200      	movs	r2, #0
 80100ec:	602a      	str	r2, [r5, #0]
 80100ee:	461a      	mov	r2, r3
 80100f0:	f7f1 fc9e 	bl	8001a30 <_read>
 80100f4:	1c43      	adds	r3, r0, #1
 80100f6:	d102      	bne.n	80100fe <_read_r+0x1e>
 80100f8:	682b      	ldr	r3, [r5, #0]
 80100fa:	b103      	cbz	r3, 80100fe <_read_r+0x1e>
 80100fc:	6023      	str	r3, [r4, #0]
 80100fe:	bd38      	pop	{r3, r4, r5, pc}
 8010100:	24001564 	.word	0x24001564

08010104 <_write_r>:
 8010104:	b538      	push	{r3, r4, r5, lr}
 8010106:	4d07      	ldr	r5, [pc, #28]	; (8010124 <_write_r+0x20>)
 8010108:	4604      	mov	r4, r0
 801010a:	4608      	mov	r0, r1
 801010c:	4611      	mov	r1, r2
 801010e:	2200      	movs	r2, #0
 8010110:	602a      	str	r2, [r5, #0]
 8010112:	461a      	mov	r2, r3
 8010114:	f7f1 fca9 	bl	8001a6a <_write>
 8010118:	1c43      	adds	r3, r0, #1
 801011a:	d102      	bne.n	8010122 <_write_r+0x1e>
 801011c:	682b      	ldr	r3, [r5, #0]
 801011e:	b103      	cbz	r3, 8010122 <_write_r+0x1e>
 8010120:	6023      	str	r3, [r4, #0]
 8010122:	bd38      	pop	{r3, r4, r5, pc}
 8010124:	24001564 	.word	0x24001564

08010128 <__errno>:
 8010128:	4b01      	ldr	r3, [pc, #4]	; (8010130 <__errno+0x8>)
 801012a:	6818      	ldr	r0, [r3, #0]
 801012c:	4770      	bx	lr
 801012e:	bf00      	nop
 8010130:	2400013c 	.word	0x2400013c

08010134 <__libc_init_array>:
 8010134:	b570      	push	{r4, r5, r6, lr}
 8010136:	4d0d      	ldr	r5, [pc, #52]	; (801016c <__libc_init_array+0x38>)
 8010138:	4c0d      	ldr	r4, [pc, #52]	; (8010170 <__libc_init_array+0x3c>)
 801013a:	1b64      	subs	r4, r4, r5
 801013c:	10a4      	asrs	r4, r4, #2
 801013e:	2600      	movs	r6, #0
 8010140:	42a6      	cmp	r6, r4
 8010142:	d109      	bne.n	8010158 <__libc_init_array+0x24>
 8010144:	4d0b      	ldr	r5, [pc, #44]	; (8010174 <__libc_init_array+0x40>)
 8010146:	4c0c      	ldr	r4, [pc, #48]	; (8010178 <__libc_init_array+0x44>)
 8010148:	f000 fdf4 	bl	8010d34 <_init>
 801014c:	1b64      	subs	r4, r4, r5
 801014e:	10a4      	asrs	r4, r4, #2
 8010150:	2600      	movs	r6, #0
 8010152:	42a6      	cmp	r6, r4
 8010154:	d105      	bne.n	8010162 <__libc_init_array+0x2e>
 8010156:	bd70      	pop	{r4, r5, r6, pc}
 8010158:	f855 3b04 	ldr.w	r3, [r5], #4
 801015c:	4798      	blx	r3
 801015e:	3601      	adds	r6, #1
 8010160:	e7ee      	b.n	8010140 <__libc_init_array+0xc>
 8010162:	f855 3b04 	ldr.w	r3, [r5], #4
 8010166:	4798      	blx	r3
 8010168:	3601      	adds	r6, #1
 801016a:	e7f2      	b.n	8010152 <__libc_init_array+0x1e>
 801016c:	08010e80 	.word	0x08010e80
 8010170:	08010e80 	.word	0x08010e80
 8010174:	08010e80 	.word	0x08010e80
 8010178:	08010e84 	.word	0x08010e84

0801017c <__retarget_lock_init_recursive>:
 801017c:	4770      	bx	lr

0801017e <__retarget_lock_acquire_recursive>:
 801017e:	4770      	bx	lr

08010180 <__retarget_lock_release_recursive>:
 8010180:	4770      	bx	lr
	...

08010184 <_free_r>:
 8010184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010186:	2900      	cmp	r1, #0
 8010188:	d044      	beq.n	8010214 <_free_r+0x90>
 801018a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801018e:	9001      	str	r0, [sp, #4]
 8010190:	2b00      	cmp	r3, #0
 8010192:	f1a1 0404 	sub.w	r4, r1, #4
 8010196:	bfb8      	it	lt
 8010198:	18e4      	addlt	r4, r4, r3
 801019a:	f000 f8df 	bl	801035c <__malloc_lock>
 801019e:	4a1e      	ldr	r2, [pc, #120]	; (8010218 <_free_r+0x94>)
 80101a0:	9801      	ldr	r0, [sp, #4]
 80101a2:	6813      	ldr	r3, [r2, #0]
 80101a4:	b933      	cbnz	r3, 80101b4 <_free_r+0x30>
 80101a6:	6063      	str	r3, [r4, #4]
 80101a8:	6014      	str	r4, [r2, #0]
 80101aa:	b003      	add	sp, #12
 80101ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101b0:	f000 b8da 	b.w	8010368 <__malloc_unlock>
 80101b4:	42a3      	cmp	r3, r4
 80101b6:	d908      	bls.n	80101ca <_free_r+0x46>
 80101b8:	6825      	ldr	r5, [r4, #0]
 80101ba:	1961      	adds	r1, r4, r5
 80101bc:	428b      	cmp	r3, r1
 80101be:	bf01      	itttt	eq
 80101c0:	6819      	ldreq	r1, [r3, #0]
 80101c2:	685b      	ldreq	r3, [r3, #4]
 80101c4:	1949      	addeq	r1, r1, r5
 80101c6:	6021      	streq	r1, [r4, #0]
 80101c8:	e7ed      	b.n	80101a6 <_free_r+0x22>
 80101ca:	461a      	mov	r2, r3
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	b10b      	cbz	r3, 80101d4 <_free_r+0x50>
 80101d0:	42a3      	cmp	r3, r4
 80101d2:	d9fa      	bls.n	80101ca <_free_r+0x46>
 80101d4:	6811      	ldr	r1, [r2, #0]
 80101d6:	1855      	adds	r5, r2, r1
 80101d8:	42a5      	cmp	r5, r4
 80101da:	d10b      	bne.n	80101f4 <_free_r+0x70>
 80101dc:	6824      	ldr	r4, [r4, #0]
 80101de:	4421      	add	r1, r4
 80101e0:	1854      	adds	r4, r2, r1
 80101e2:	42a3      	cmp	r3, r4
 80101e4:	6011      	str	r1, [r2, #0]
 80101e6:	d1e0      	bne.n	80101aa <_free_r+0x26>
 80101e8:	681c      	ldr	r4, [r3, #0]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	6053      	str	r3, [r2, #4]
 80101ee:	440c      	add	r4, r1
 80101f0:	6014      	str	r4, [r2, #0]
 80101f2:	e7da      	b.n	80101aa <_free_r+0x26>
 80101f4:	d902      	bls.n	80101fc <_free_r+0x78>
 80101f6:	230c      	movs	r3, #12
 80101f8:	6003      	str	r3, [r0, #0]
 80101fa:	e7d6      	b.n	80101aa <_free_r+0x26>
 80101fc:	6825      	ldr	r5, [r4, #0]
 80101fe:	1961      	adds	r1, r4, r5
 8010200:	428b      	cmp	r3, r1
 8010202:	bf04      	itt	eq
 8010204:	6819      	ldreq	r1, [r3, #0]
 8010206:	685b      	ldreq	r3, [r3, #4]
 8010208:	6063      	str	r3, [r4, #4]
 801020a:	bf04      	itt	eq
 801020c:	1949      	addeq	r1, r1, r5
 801020e:	6021      	streq	r1, [r4, #0]
 8010210:	6054      	str	r4, [r2, #4]
 8010212:	e7ca      	b.n	80101aa <_free_r+0x26>
 8010214:	b003      	add	sp, #12
 8010216:	bd30      	pop	{r4, r5, pc}
 8010218:	2400156c 	.word	0x2400156c

0801021c <sbrk_aligned>:
 801021c:	b570      	push	{r4, r5, r6, lr}
 801021e:	4e0e      	ldr	r6, [pc, #56]	; (8010258 <sbrk_aligned+0x3c>)
 8010220:	460c      	mov	r4, r1
 8010222:	6831      	ldr	r1, [r6, #0]
 8010224:	4605      	mov	r5, r0
 8010226:	b911      	cbnz	r1, 801022e <sbrk_aligned+0x12>
 8010228:	f000 fcf0 	bl	8010c0c <_sbrk_r>
 801022c:	6030      	str	r0, [r6, #0]
 801022e:	4621      	mov	r1, r4
 8010230:	4628      	mov	r0, r5
 8010232:	f000 fceb 	bl	8010c0c <_sbrk_r>
 8010236:	1c43      	adds	r3, r0, #1
 8010238:	d00a      	beq.n	8010250 <sbrk_aligned+0x34>
 801023a:	1cc4      	adds	r4, r0, #3
 801023c:	f024 0403 	bic.w	r4, r4, #3
 8010240:	42a0      	cmp	r0, r4
 8010242:	d007      	beq.n	8010254 <sbrk_aligned+0x38>
 8010244:	1a21      	subs	r1, r4, r0
 8010246:	4628      	mov	r0, r5
 8010248:	f000 fce0 	bl	8010c0c <_sbrk_r>
 801024c:	3001      	adds	r0, #1
 801024e:	d101      	bne.n	8010254 <sbrk_aligned+0x38>
 8010250:	f04f 34ff 	mov.w	r4, #4294967295
 8010254:	4620      	mov	r0, r4
 8010256:	bd70      	pop	{r4, r5, r6, pc}
 8010258:	24001570 	.word	0x24001570

0801025c <_malloc_r>:
 801025c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010260:	1ccd      	adds	r5, r1, #3
 8010262:	f025 0503 	bic.w	r5, r5, #3
 8010266:	3508      	adds	r5, #8
 8010268:	2d0c      	cmp	r5, #12
 801026a:	bf38      	it	cc
 801026c:	250c      	movcc	r5, #12
 801026e:	2d00      	cmp	r5, #0
 8010270:	4607      	mov	r7, r0
 8010272:	db01      	blt.n	8010278 <_malloc_r+0x1c>
 8010274:	42a9      	cmp	r1, r5
 8010276:	d905      	bls.n	8010284 <_malloc_r+0x28>
 8010278:	230c      	movs	r3, #12
 801027a:	603b      	str	r3, [r7, #0]
 801027c:	2600      	movs	r6, #0
 801027e:	4630      	mov	r0, r6
 8010280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010284:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010358 <_malloc_r+0xfc>
 8010288:	f000 f868 	bl	801035c <__malloc_lock>
 801028c:	f8d8 3000 	ldr.w	r3, [r8]
 8010290:	461c      	mov	r4, r3
 8010292:	bb5c      	cbnz	r4, 80102ec <_malloc_r+0x90>
 8010294:	4629      	mov	r1, r5
 8010296:	4638      	mov	r0, r7
 8010298:	f7ff ffc0 	bl	801021c <sbrk_aligned>
 801029c:	1c43      	adds	r3, r0, #1
 801029e:	4604      	mov	r4, r0
 80102a0:	d155      	bne.n	801034e <_malloc_r+0xf2>
 80102a2:	f8d8 4000 	ldr.w	r4, [r8]
 80102a6:	4626      	mov	r6, r4
 80102a8:	2e00      	cmp	r6, #0
 80102aa:	d145      	bne.n	8010338 <_malloc_r+0xdc>
 80102ac:	2c00      	cmp	r4, #0
 80102ae:	d048      	beq.n	8010342 <_malloc_r+0xe6>
 80102b0:	6823      	ldr	r3, [r4, #0]
 80102b2:	4631      	mov	r1, r6
 80102b4:	4638      	mov	r0, r7
 80102b6:	eb04 0903 	add.w	r9, r4, r3
 80102ba:	f000 fca7 	bl	8010c0c <_sbrk_r>
 80102be:	4581      	cmp	r9, r0
 80102c0:	d13f      	bne.n	8010342 <_malloc_r+0xe6>
 80102c2:	6821      	ldr	r1, [r4, #0]
 80102c4:	1a6d      	subs	r5, r5, r1
 80102c6:	4629      	mov	r1, r5
 80102c8:	4638      	mov	r0, r7
 80102ca:	f7ff ffa7 	bl	801021c <sbrk_aligned>
 80102ce:	3001      	adds	r0, #1
 80102d0:	d037      	beq.n	8010342 <_malloc_r+0xe6>
 80102d2:	6823      	ldr	r3, [r4, #0]
 80102d4:	442b      	add	r3, r5
 80102d6:	6023      	str	r3, [r4, #0]
 80102d8:	f8d8 3000 	ldr.w	r3, [r8]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d038      	beq.n	8010352 <_malloc_r+0xf6>
 80102e0:	685a      	ldr	r2, [r3, #4]
 80102e2:	42a2      	cmp	r2, r4
 80102e4:	d12b      	bne.n	801033e <_malloc_r+0xe2>
 80102e6:	2200      	movs	r2, #0
 80102e8:	605a      	str	r2, [r3, #4]
 80102ea:	e00f      	b.n	801030c <_malloc_r+0xb0>
 80102ec:	6822      	ldr	r2, [r4, #0]
 80102ee:	1b52      	subs	r2, r2, r5
 80102f0:	d41f      	bmi.n	8010332 <_malloc_r+0xd6>
 80102f2:	2a0b      	cmp	r2, #11
 80102f4:	d917      	bls.n	8010326 <_malloc_r+0xca>
 80102f6:	1961      	adds	r1, r4, r5
 80102f8:	42a3      	cmp	r3, r4
 80102fa:	6025      	str	r5, [r4, #0]
 80102fc:	bf18      	it	ne
 80102fe:	6059      	strne	r1, [r3, #4]
 8010300:	6863      	ldr	r3, [r4, #4]
 8010302:	bf08      	it	eq
 8010304:	f8c8 1000 	streq.w	r1, [r8]
 8010308:	5162      	str	r2, [r4, r5]
 801030a:	604b      	str	r3, [r1, #4]
 801030c:	4638      	mov	r0, r7
 801030e:	f104 060b 	add.w	r6, r4, #11
 8010312:	f000 f829 	bl	8010368 <__malloc_unlock>
 8010316:	f026 0607 	bic.w	r6, r6, #7
 801031a:	1d23      	adds	r3, r4, #4
 801031c:	1af2      	subs	r2, r6, r3
 801031e:	d0ae      	beq.n	801027e <_malloc_r+0x22>
 8010320:	1b9b      	subs	r3, r3, r6
 8010322:	50a3      	str	r3, [r4, r2]
 8010324:	e7ab      	b.n	801027e <_malloc_r+0x22>
 8010326:	42a3      	cmp	r3, r4
 8010328:	6862      	ldr	r2, [r4, #4]
 801032a:	d1dd      	bne.n	80102e8 <_malloc_r+0x8c>
 801032c:	f8c8 2000 	str.w	r2, [r8]
 8010330:	e7ec      	b.n	801030c <_malloc_r+0xb0>
 8010332:	4623      	mov	r3, r4
 8010334:	6864      	ldr	r4, [r4, #4]
 8010336:	e7ac      	b.n	8010292 <_malloc_r+0x36>
 8010338:	4634      	mov	r4, r6
 801033a:	6876      	ldr	r6, [r6, #4]
 801033c:	e7b4      	b.n	80102a8 <_malloc_r+0x4c>
 801033e:	4613      	mov	r3, r2
 8010340:	e7cc      	b.n	80102dc <_malloc_r+0x80>
 8010342:	230c      	movs	r3, #12
 8010344:	603b      	str	r3, [r7, #0]
 8010346:	4638      	mov	r0, r7
 8010348:	f000 f80e 	bl	8010368 <__malloc_unlock>
 801034c:	e797      	b.n	801027e <_malloc_r+0x22>
 801034e:	6025      	str	r5, [r4, #0]
 8010350:	e7dc      	b.n	801030c <_malloc_r+0xb0>
 8010352:	605b      	str	r3, [r3, #4]
 8010354:	deff      	udf	#255	; 0xff
 8010356:	bf00      	nop
 8010358:	2400156c 	.word	0x2400156c

0801035c <__malloc_lock>:
 801035c:	4801      	ldr	r0, [pc, #4]	; (8010364 <__malloc_lock+0x8>)
 801035e:	f7ff bf0e 	b.w	801017e <__retarget_lock_acquire_recursive>
 8010362:	bf00      	nop
 8010364:	24001568 	.word	0x24001568

08010368 <__malloc_unlock>:
 8010368:	4801      	ldr	r0, [pc, #4]	; (8010370 <__malloc_unlock+0x8>)
 801036a:	f7ff bf09 	b.w	8010180 <__retarget_lock_release_recursive>
 801036e:	bf00      	nop
 8010370:	24001568 	.word	0x24001568

08010374 <__sfputc_r>:
 8010374:	6893      	ldr	r3, [r2, #8]
 8010376:	3b01      	subs	r3, #1
 8010378:	2b00      	cmp	r3, #0
 801037a:	b410      	push	{r4}
 801037c:	6093      	str	r3, [r2, #8]
 801037e:	da08      	bge.n	8010392 <__sfputc_r+0x1e>
 8010380:	6994      	ldr	r4, [r2, #24]
 8010382:	42a3      	cmp	r3, r4
 8010384:	db01      	blt.n	801038a <__sfputc_r+0x16>
 8010386:	290a      	cmp	r1, #10
 8010388:	d103      	bne.n	8010392 <__sfputc_r+0x1e>
 801038a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801038e:	f000 bba7 	b.w	8010ae0 <__swbuf_r>
 8010392:	6813      	ldr	r3, [r2, #0]
 8010394:	1c58      	adds	r0, r3, #1
 8010396:	6010      	str	r0, [r2, #0]
 8010398:	7019      	strb	r1, [r3, #0]
 801039a:	4608      	mov	r0, r1
 801039c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103a0:	4770      	bx	lr

080103a2 <__sfputs_r>:
 80103a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103a4:	4606      	mov	r6, r0
 80103a6:	460f      	mov	r7, r1
 80103a8:	4614      	mov	r4, r2
 80103aa:	18d5      	adds	r5, r2, r3
 80103ac:	42ac      	cmp	r4, r5
 80103ae:	d101      	bne.n	80103b4 <__sfputs_r+0x12>
 80103b0:	2000      	movs	r0, #0
 80103b2:	e007      	b.n	80103c4 <__sfputs_r+0x22>
 80103b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103b8:	463a      	mov	r2, r7
 80103ba:	4630      	mov	r0, r6
 80103bc:	f7ff ffda 	bl	8010374 <__sfputc_r>
 80103c0:	1c43      	adds	r3, r0, #1
 80103c2:	d1f3      	bne.n	80103ac <__sfputs_r+0xa>
 80103c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080103c8 <_vfiprintf_r>:
 80103c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103cc:	460d      	mov	r5, r1
 80103ce:	b09d      	sub	sp, #116	; 0x74
 80103d0:	4614      	mov	r4, r2
 80103d2:	4698      	mov	r8, r3
 80103d4:	4606      	mov	r6, r0
 80103d6:	b118      	cbz	r0, 80103e0 <_vfiprintf_r+0x18>
 80103d8:	6a03      	ldr	r3, [r0, #32]
 80103da:	b90b      	cbnz	r3, 80103e0 <_vfiprintf_r+0x18>
 80103dc:	f7ff fdc2 	bl	800ff64 <__sinit>
 80103e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103e2:	07d9      	lsls	r1, r3, #31
 80103e4:	d405      	bmi.n	80103f2 <_vfiprintf_r+0x2a>
 80103e6:	89ab      	ldrh	r3, [r5, #12]
 80103e8:	059a      	lsls	r2, r3, #22
 80103ea:	d402      	bmi.n	80103f2 <_vfiprintf_r+0x2a>
 80103ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103ee:	f7ff fec6 	bl	801017e <__retarget_lock_acquire_recursive>
 80103f2:	89ab      	ldrh	r3, [r5, #12]
 80103f4:	071b      	lsls	r3, r3, #28
 80103f6:	d501      	bpl.n	80103fc <_vfiprintf_r+0x34>
 80103f8:	692b      	ldr	r3, [r5, #16]
 80103fa:	b99b      	cbnz	r3, 8010424 <_vfiprintf_r+0x5c>
 80103fc:	4629      	mov	r1, r5
 80103fe:	4630      	mov	r0, r6
 8010400:	f000 fbac 	bl	8010b5c <__swsetup_r>
 8010404:	b170      	cbz	r0, 8010424 <_vfiprintf_r+0x5c>
 8010406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010408:	07dc      	lsls	r4, r3, #31
 801040a:	d504      	bpl.n	8010416 <_vfiprintf_r+0x4e>
 801040c:	f04f 30ff 	mov.w	r0, #4294967295
 8010410:	b01d      	add	sp, #116	; 0x74
 8010412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010416:	89ab      	ldrh	r3, [r5, #12]
 8010418:	0598      	lsls	r0, r3, #22
 801041a:	d4f7      	bmi.n	801040c <_vfiprintf_r+0x44>
 801041c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801041e:	f7ff feaf 	bl	8010180 <__retarget_lock_release_recursive>
 8010422:	e7f3      	b.n	801040c <_vfiprintf_r+0x44>
 8010424:	2300      	movs	r3, #0
 8010426:	9309      	str	r3, [sp, #36]	; 0x24
 8010428:	2320      	movs	r3, #32
 801042a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801042e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010432:	2330      	movs	r3, #48	; 0x30
 8010434:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80105e8 <_vfiprintf_r+0x220>
 8010438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801043c:	f04f 0901 	mov.w	r9, #1
 8010440:	4623      	mov	r3, r4
 8010442:	469a      	mov	sl, r3
 8010444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010448:	b10a      	cbz	r2, 801044e <_vfiprintf_r+0x86>
 801044a:	2a25      	cmp	r2, #37	; 0x25
 801044c:	d1f9      	bne.n	8010442 <_vfiprintf_r+0x7a>
 801044e:	ebba 0b04 	subs.w	fp, sl, r4
 8010452:	d00b      	beq.n	801046c <_vfiprintf_r+0xa4>
 8010454:	465b      	mov	r3, fp
 8010456:	4622      	mov	r2, r4
 8010458:	4629      	mov	r1, r5
 801045a:	4630      	mov	r0, r6
 801045c:	f7ff ffa1 	bl	80103a2 <__sfputs_r>
 8010460:	3001      	adds	r0, #1
 8010462:	f000 80a9 	beq.w	80105b8 <_vfiprintf_r+0x1f0>
 8010466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010468:	445a      	add	r2, fp
 801046a:	9209      	str	r2, [sp, #36]	; 0x24
 801046c:	f89a 3000 	ldrb.w	r3, [sl]
 8010470:	2b00      	cmp	r3, #0
 8010472:	f000 80a1 	beq.w	80105b8 <_vfiprintf_r+0x1f0>
 8010476:	2300      	movs	r3, #0
 8010478:	f04f 32ff 	mov.w	r2, #4294967295
 801047c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010480:	f10a 0a01 	add.w	sl, sl, #1
 8010484:	9304      	str	r3, [sp, #16]
 8010486:	9307      	str	r3, [sp, #28]
 8010488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801048c:	931a      	str	r3, [sp, #104]	; 0x68
 801048e:	4654      	mov	r4, sl
 8010490:	2205      	movs	r2, #5
 8010492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010496:	4854      	ldr	r0, [pc, #336]	; (80105e8 <_vfiprintf_r+0x220>)
 8010498:	f7ef ff3a 	bl	8000310 <memchr>
 801049c:	9a04      	ldr	r2, [sp, #16]
 801049e:	b9d8      	cbnz	r0, 80104d8 <_vfiprintf_r+0x110>
 80104a0:	06d1      	lsls	r1, r2, #27
 80104a2:	bf44      	itt	mi
 80104a4:	2320      	movmi	r3, #32
 80104a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104aa:	0713      	lsls	r3, r2, #28
 80104ac:	bf44      	itt	mi
 80104ae:	232b      	movmi	r3, #43	; 0x2b
 80104b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104b4:	f89a 3000 	ldrb.w	r3, [sl]
 80104b8:	2b2a      	cmp	r3, #42	; 0x2a
 80104ba:	d015      	beq.n	80104e8 <_vfiprintf_r+0x120>
 80104bc:	9a07      	ldr	r2, [sp, #28]
 80104be:	4654      	mov	r4, sl
 80104c0:	2000      	movs	r0, #0
 80104c2:	f04f 0c0a 	mov.w	ip, #10
 80104c6:	4621      	mov	r1, r4
 80104c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104cc:	3b30      	subs	r3, #48	; 0x30
 80104ce:	2b09      	cmp	r3, #9
 80104d0:	d94d      	bls.n	801056e <_vfiprintf_r+0x1a6>
 80104d2:	b1b0      	cbz	r0, 8010502 <_vfiprintf_r+0x13a>
 80104d4:	9207      	str	r2, [sp, #28]
 80104d6:	e014      	b.n	8010502 <_vfiprintf_r+0x13a>
 80104d8:	eba0 0308 	sub.w	r3, r0, r8
 80104dc:	fa09 f303 	lsl.w	r3, r9, r3
 80104e0:	4313      	orrs	r3, r2
 80104e2:	9304      	str	r3, [sp, #16]
 80104e4:	46a2      	mov	sl, r4
 80104e6:	e7d2      	b.n	801048e <_vfiprintf_r+0xc6>
 80104e8:	9b03      	ldr	r3, [sp, #12]
 80104ea:	1d19      	adds	r1, r3, #4
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	9103      	str	r1, [sp, #12]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	bfbb      	ittet	lt
 80104f4:	425b      	neglt	r3, r3
 80104f6:	f042 0202 	orrlt.w	r2, r2, #2
 80104fa:	9307      	strge	r3, [sp, #28]
 80104fc:	9307      	strlt	r3, [sp, #28]
 80104fe:	bfb8      	it	lt
 8010500:	9204      	strlt	r2, [sp, #16]
 8010502:	7823      	ldrb	r3, [r4, #0]
 8010504:	2b2e      	cmp	r3, #46	; 0x2e
 8010506:	d10c      	bne.n	8010522 <_vfiprintf_r+0x15a>
 8010508:	7863      	ldrb	r3, [r4, #1]
 801050a:	2b2a      	cmp	r3, #42	; 0x2a
 801050c:	d134      	bne.n	8010578 <_vfiprintf_r+0x1b0>
 801050e:	9b03      	ldr	r3, [sp, #12]
 8010510:	1d1a      	adds	r2, r3, #4
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	9203      	str	r2, [sp, #12]
 8010516:	2b00      	cmp	r3, #0
 8010518:	bfb8      	it	lt
 801051a:	f04f 33ff 	movlt.w	r3, #4294967295
 801051e:	3402      	adds	r4, #2
 8010520:	9305      	str	r3, [sp, #20]
 8010522:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80105f8 <_vfiprintf_r+0x230>
 8010526:	7821      	ldrb	r1, [r4, #0]
 8010528:	2203      	movs	r2, #3
 801052a:	4650      	mov	r0, sl
 801052c:	f7ef fef0 	bl	8000310 <memchr>
 8010530:	b138      	cbz	r0, 8010542 <_vfiprintf_r+0x17a>
 8010532:	9b04      	ldr	r3, [sp, #16]
 8010534:	eba0 000a 	sub.w	r0, r0, sl
 8010538:	2240      	movs	r2, #64	; 0x40
 801053a:	4082      	lsls	r2, r0
 801053c:	4313      	orrs	r3, r2
 801053e:	3401      	adds	r4, #1
 8010540:	9304      	str	r3, [sp, #16]
 8010542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010546:	4829      	ldr	r0, [pc, #164]	; (80105ec <_vfiprintf_r+0x224>)
 8010548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801054c:	2206      	movs	r2, #6
 801054e:	f7ef fedf 	bl	8000310 <memchr>
 8010552:	2800      	cmp	r0, #0
 8010554:	d03f      	beq.n	80105d6 <_vfiprintf_r+0x20e>
 8010556:	4b26      	ldr	r3, [pc, #152]	; (80105f0 <_vfiprintf_r+0x228>)
 8010558:	bb1b      	cbnz	r3, 80105a2 <_vfiprintf_r+0x1da>
 801055a:	9b03      	ldr	r3, [sp, #12]
 801055c:	3307      	adds	r3, #7
 801055e:	f023 0307 	bic.w	r3, r3, #7
 8010562:	3308      	adds	r3, #8
 8010564:	9303      	str	r3, [sp, #12]
 8010566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010568:	443b      	add	r3, r7
 801056a:	9309      	str	r3, [sp, #36]	; 0x24
 801056c:	e768      	b.n	8010440 <_vfiprintf_r+0x78>
 801056e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010572:	460c      	mov	r4, r1
 8010574:	2001      	movs	r0, #1
 8010576:	e7a6      	b.n	80104c6 <_vfiprintf_r+0xfe>
 8010578:	2300      	movs	r3, #0
 801057a:	3401      	adds	r4, #1
 801057c:	9305      	str	r3, [sp, #20]
 801057e:	4619      	mov	r1, r3
 8010580:	f04f 0c0a 	mov.w	ip, #10
 8010584:	4620      	mov	r0, r4
 8010586:	f810 2b01 	ldrb.w	r2, [r0], #1
 801058a:	3a30      	subs	r2, #48	; 0x30
 801058c:	2a09      	cmp	r2, #9
 801058e:	d903      	bls.n	8010598 <_vfiprintf_r+0x1d0>
 8010590:	2b00      	cmp	r3, #0
 8010592:	d0c6      	beq.n	8010522 <_vfiprintf_r+0x15a>
 8010594:	9105      	str	r1, [sp, #20]
 8010596:	e7c4      	b.n	8010522 <_vfiprintf_r+0x15a>
 8010598:	fb0c 2101 	mla	r1, ip, r1, r2
 801059c:	4604      	mov	r4, r0
 801059e:	2301      	movs	r3, #1
 80105a0:	e7f0      	b.n	8010584 <_vfiprintf_r+0x1bc>
 80105a2:	ab03      	add	r3, sp, #12
 80105a4:	9300      	str	r3, [sp, #0]
 80105a6:	462a      	mov	r2, r5
 80105a8:	4b12      	ldr	r3, [pc, #72]	; (80105f4 <_vfiprintf_r+0x22c>)
 80105aa:	a904      	add	r1, sp, #16
 80105ac:	4630      	mov	r0, r6
 80105ae:	f3af 8000 	nop.w
 80105b2:	4607      	mov	r7, r0
 80105b4:	1c78      	adds	r0, r7, #1
 80105b6:	d1d6      	bne.n	8010566 <_vfiprintf_r+0x19e>
 80105b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105ba:	07d9      	lsls	r1, r3, #31
 80105bc:	d405      	bmi.n	80105ca <_vfiprintf_r+0x202>
 80105be:	89ab      	ldrh	r3, [r5, #12]
 80105c0:	059a      	lsls	r2, r3, #22
 80105c2:	d402      	bmi.n	80105ca <_vfiprintf_r+0x202>
 80105c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105c6:	f7ff fddb 	bl	8010180 <__retarget_lock_release_recursive>
 80105ca:	89ab      	ldrh	r3, [r5, #12]
 80105cc:	065b      	lsls	r3, r3, #25
 80105ce:	f53f af1d 	bmi.w	801040c <_vfiprintf_r+0x44>
 80105d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105d4:	e71c      	b.n	8010410 <_vfiprintf_r+0x48>
 80105d6:	ab03      	add	r3, sp, #12
 80105d8:	9300      	str	r3, [sp, #0]
 80105da:	462a      	mov	r2, r5
 80105dc:	4b05      	ldr	r3, [pc, #20]	; (80105f4 <_vfiprintf_r+0x22c>)
 80105de:	a904      	add	r1, sp, #16
 80105e0:	4630      	mov	r0, r6
 80105e2:	f000 f879 	bl	80106d8 <_printf_i>
 80105e6:	e7e4      	b.n	80105b2 <_vfiprintf_r+0x1ea>
 80105e8:	08010e4c 	.word	0x08010e4c
 80105ec:	08010e56 	.word	0x08010e56
 80105f0:	00000000 	.word	0x00000000
 80105f4:	080103a3 	.word	0x080103a3
 80105f8:	08010e52 	.word	0x08010e52

080105fc <_printf_common>:
 80105fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010600:	4616      	mov	r6, r2
 8010602:	4699      	mov	r9, r3
 8010604:	688a      	ldr	r2, [r1, #8]
 8010606:	690b      	ldr	r3, [r1, #16]
 8010608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801060c:	4293      	cmp	r3, r2
 801060e:	bfb8      	it	lt
 8010610:	4613      	movlt	r3, r2
 8010612:	6033      	str	r3, [r6, #0]
 8010614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010618:	4607      	mov	r7, r0
 801061a:	460c      	mov	r4, r1
 801061c:	b10a      	cbz	r2, 8010622 <_printf_common+0x26>
 801061e:	3301      	adds	r3, #1
 8010620:	6033      	str	r3, [r6, #0]
 8010622:	6823      	ldr	r3, [r4, #0]
 8010624:	0699      	lsls	r1, r3, #26
 8010626:	bf42      	ittt	mi
 8010628:	6833      	ldrmi	r3, [r6, #0]
 801062a:	3302      	addmi	r3, #2
 801062c:	6033      	strmi	r3, [r6, #0]
 801062e:	6825      	ldr	r5, [r4, #0]
 8010630:	f015 0506 	ands.w	r5, r5, #6
 8010634:	d106      	bne.n	8010644 <_printf_common+0x48>
 8010636:	f104 0a19 	add.w	sl, r4, #25
 801063a:	68e3      	ldr	r3, [r4, #12]
 801063c:	6832      	ldr	r2, [r6, #0]
 801063e:	1a9b      	subs	r3, r3, r2
 8010640:	42ab      	cmp	r3, r5
 8010642:	dc26      	bgt.n	8010692 <_printf_common+0x96>
 8010644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010648:	1e13      	subs	r3, r2, #0
 801064a:	6822      	ldr	r2, [r4, #0]
 801064c:	bf18      	it	ne
 801064e:	2301      	movne	r3, #1
 8010650:	0692      	lsls	r2, r2, #26
 8010652:	d42b      	bmi.n	80106ac <_printf_common+0xb0>
 8010654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010658:	4649      	mov	r1, r9
 801065a:	4638      	mov	r0, r7
 801065c:	47c0      	blx	r8
 801065e:	3001      	adds	r0, #1
 8010660:	d01e      	beq.n	80106a0 <_printf_common+0xa4>
 8010662:	6823      	ldr	r3, [r4, #0]
 8010664:	6922      	ldr	r2, [r4, #16]
 8010666:	f003 0306 	and.w	r3, r3, #6
 801066a:	2b04      	cmp	r3, #4
 801066c:	bf02      	ittt	eq
 801066e:	68e5      	ldreq	r5, [r4, #12]
 8010670:	6833      	ldreq	r3, [r6, #0]
 8010672:	1aed      	subeq	r5, r5, r3
 8010674:	68a3      	ldr	r3, [r4, #8]
 8010676:	bf0c      	ite	eq
 8010678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801067c:	2500      	movne	r5, #0
 801067e:	4293      	cmp	r3, r2
 8010680:	bfc4      	itt	gt
 8010682:	1a9b      	subgt	r3, r3, r2
 8010684:	18ed      	addgt	r5, r5, r3
 8010686:	2600      	movs	r6, #0
 8010688:	341a      	adds	r4, #26
 801068a:	42b5      	cmp	r5, r6
 801068c:	d11a      	bne.n	80106c4 <_printf_common+0xc8>
 801068e:	2000      	movs	r0, #0
 8010690:	e008      	b.n	80106a4 <_printf_common+0xa8>
 8010692:	2301      	movs	r3, #1
 8010694:	4652      	mov	r2, sl
 8010696:	4649      	mov	r1, r9
 8010698:	4638      	mov	r0, r7
 801069a:	47c0      	blx	r8
 801069c:	3001      	adds	r0, #1
 801069e:	d103      	bne.n	80106a8 <_printf_common+0xac>
 80106a0:	f04f 30ff 	mov.w	r0, #4294967295
 80106a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106a8:	3501      	adds	r5, #1
 80106aa:	e7c6      	b.n	801063a <_printf_common+0x3e>
 80106ac:	18e1      	adds	r1, r4, r3
 80106ae:	1c5a      	adds	r2, r3, #1
 80106b0:	2030      	movs	r0, #48	; 0x30
 80106b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80106b6:	4422      	add	r2, r4
 80106b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80106bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80106c0:	3302      	adds	r3, #2
 80106c2:	e7c7      	b.n	8010654 <_printf_common+0x58>
 80106c4:	2301      	movs	r3, #1
 80106c6:	4622      	mov	r2, r4
 80106c8:	4649      	mov	r1, r9
 80106ca:	4638      	mov	r0, r7
 80106cc:	47c0      	blx	r8
 80106ce:	3001      	adds	r0, #1
 80106d0:	d0e6      	beq.n	80106a0 <_printf_common+0xa4>
 80106d2:	3601      	adds	r6, #1
 80106d4:	e7d9      	b.n	801068a <_printf_common+0x8e>
	...

080106d8 <_printf_i>:
 80106d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106dc:	7e0f      	ldrb	r7, [r1, #24]
 80106de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80106e0:	2f78      	cmp	r7, #120	; 0x78
 80106e2:	4691      	mov	r9, r2
 80106e4:	4680      	mov	r8, r0
 80106e6:	460c      	mov	r4, r1
 80106e8:	469a      	mov	sl, r3
 80106ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80106ee:	d807      	bhi.n	8010700 <_printf_i+0x28>
 80106f0:	2f62      	cmp	r7, #98	; 0x62
 80106f2:	d80a      	bhi.n	801070a <_printf_i+0x32>
 80106f4:	2f00      	cmp	r7, #0
 80106f6:	f000 80d4 	beq.w	80108a2 <_printf_i+0x1ca>
 80106fa:	2f58      	cmp	r7, #88	; 0x58
 80106fc:	f000 80c0 	beq.w	8010880 <_printf_i+0x1a8>
 8010700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010708:	e03a      	b.n	8010780 <_printf_i+0xa8>
 801070a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801070e:	2b15      	cmp	r3, #21
 8010710:	d8f6      	bhi.n	8010700 <_printf_i+0x28>
 8010712:	a101      	add	r1, pc, #4	; (adr r1, 8010718 <_printf_i+0x40>)
 8010714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010718:	08010771 	.word	0x08010771
 801071c:	08010785 	.word	0x08010785
 8010720:	08010701 	.word	0x08010701
 8010724:	08010701 	.word	0x08010701
 8010728:	08010701 	.word	0x08010701
 801072c:	08010701 	.word	0x08010701
 8010730:	08010785 	.word	0x08010785
 8010734:	08010701 	.word	0x08010701
 8010738:	08010701 	.word	0x08010701
 801073c:	08010701 	.word	0x08010701
 8010740:	08010701 	.word	0x08010701
 8010744:	08010889 	.word	0x08010889
 8010748:	080107b1 	.word	0x080107b1
 801074c:	08010843 	.word	0x08010843
 8010750:	08010701 	.word	0x08010701
 8010754:	08010701 	.word	0x08010701
 8010758:	080108ab 	.word	0x080108ab
 801075c:	08010701 	.word	0x08010701
 8010760:	080107b1 	.word	0x080107b1
 8010764:	08010701 	.word	0x08010701
 8010768:	08010701 	.word	0x08010701
 801076c:	0801084b 	.word	0x0801084b
 8010770:	682b      	ldr	r3, [r5, #0]
 8010772:	1d1a      	adds	r2, r3, #4
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	602a      	str	r2, [r5, #0]
 8010778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801077c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010780:	2301      	movs	r3, #1
 8010782:	e09f      	b.n	80108c4 <_printf_i+0x1ec>
 8010784:	6820      	ldr	r0, [r4, #0]
 8010786:	682b      	ldr	r3, [r5, #0]
 8010788:	0607      	lsls	r7, r0, #24
 801078a:	f103 0104 	add.w	r1, r3, #4
 801078e:	6029      	str	r1, [r5, #0]
 8010790:	d501      	bpl.n	8010796 <_printf_i+0xbe>
 8010792:	681e      	ldr	r6, [r3, #0]
 8010794:	e003      	b.n	801079e <_printf_i+0xc6>
 8010796:	0646      	lsls	r6, r0, #25
 8010798:	d5fb      	bpl.n	8010792 <_printf_i+0xba>
 801079a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801079e:	2e00      	cmp	r6, #0
 80107a0:	da03      	bge.n	80107aa <_printf_i+0xd2>
 80107a2:	232d      	movs	r3, #45	; 0x2d
 80107a4:	4276      	negs	r6, r6
 80107a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107aa:	485a      	ldr	r0, [pc, #360]	; (8010914 <_printf_i+0x23c>)
 80107ac:	230a      	movs	r3, #10
 80107ae:	e012      	b.n	80107d6 <_printf_i+0xfe>
 80107b0:	682b      	ldr	r3, [r5, #0]
 80107b2:	6820      	ldr	r0, [r4, #0]
 80107b4:	1d19      	adds	r1, r3, #4
 80107b6:	6029      	str	r1, [r5, #0]
 80107b8:	0605      	lsls	r5, r0, #24
 80107ba:	d501      	bpl.n	80107c0 <_printf_i+0xe8>
 80107bc:	681e      	ldr	r6, [r3, #0]
 80107be:	e002      	b.n	80107c6 <_printf_i+0xee>
 80107c0:	0641      	lsls	r1, r0, #25
 80107c2:	d5fb      	bpl.n	80107bc <_printf_i+0xe4>
 80107c4:	881e      	ldrh	r6, [r3, #0]
 80107c6:	4853      	ldr	r0, [pc, #332]	; (8010914 <_printf_i+0x23c>)
 80107c8:	2f6f      	cmp	r7, #111	; 0x6f
 80107ca:	bf0c      	ite	eq
 80107cc:	2308      	moveq	r3, #8
 80107ce:	230a      	movne	r3, #10
 80107d0:	2100      	movs	r1, #0
 80107d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80107d6:	6865      	ldr	r5, [r4, #4]
 80107d8:	60a5      	str	r5, [r4, #8]
 80107da:	2d00      	cmp	r5, #0
 80107dc:	bfa2      	ittt	ge
 80107de:	6821      	ldrge	r1, [r4, #0]
 80107e0:	f021 0104 	bicge.w	r1, r1, #4
 80107e4:	6021      	strge	r1, [r4, #0]
 80107e6:	b90e      	cbnz	r6, 80107ec <_printf_i+0x114>
 80107e8:	2d00      	cmp	r5, #0
 80107ea:	d04b      	beq.n	8010884 <_printf_i+0x1ac>
 80107ec:	4615      	mov	r5, r2
 80107ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80107f2:	fb03 6711 	mls	r7, r3, r1, r6
 80107f6:	5dc7      	ldrb	r7, [r0, r7]
 80107f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80107fc:	4637      	mov	r7, r6
 80107fe:	42bb      	cmp	r3, r7
 8010800:	460e      	mov	r6, r1
 8010802:	d9f4      	bls.n	80107ee <_printf_i+0x116>
 8010804:	2b08      	cmp	r3, #8
 8010806:	d10b      	bne.n	8010820 <_printf_i+0x148>
 8010808:	6823      	ldr	r3, [r4, #0]
 801080a:	07de      	lsls	r6, r3, #31
 801080c:	d508      	bpl.n	8010820 <_printf_i+0x148>
 801080e:	6923      	ldr	r3, [r4, #16]
 8010810:	6861      	ldr	r1, [r4, #4]
 8010812:	4299      	cmp	r1, r3
 8010814:	bfde      	ittt	le
 8010816:	2330      	movle	r3, #48	; 0x30
 8010818:	f805 3c01 	strble.w	r3, [r5, #-1]
 801081c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010820:	1b52      	subs	r2, r2, r5
 8010822:	6122      	str	r2, [r4, #16]
 8010824:	f8cd a000 	str.w	sl, [sp]
 8010828:	464b      	mov	r3, r9
 801082a:	aa03      	add	r2, sp, #12
 801082c:	4621      	mov	r1, r4
 801082e:	4640      	mov	r0, r8
 8010830:	f7ff fee4 	bl	80105fc <_printf_common>
 8010834:	3001      	adds	r0, #1
 8010836:	d14a      	bne.n	80108ce <_printf_i+0x1f6>
 8010838:	f04f 30ff 	mov.w	r0, #4294967295
 801083c:	b004      	add	sp, #16
 801083e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010842:	6823      	ldr	r3, [r4, #0]
 8010844:	f043 0320 	orr.w	r3, r3, #32
 8010848:	6023      	str	r3, [r4, #0]
 801084a:	4833      	ldr	r0, [pc, #204]	; (8010918 <_printf_i+0x240>)
 801084c:	2778      	movs	r7, #120	; 0x78
 801084e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010852:	6823      	ldr	r3, [r4, #0]
 8010854:	6829      	ldr	r1, [r5, #0]
 8010856:	061f      	lsls	r7, r3, #24
 8010858:	f851 6b04 	ldr.w	r6, [r1], #4
 801085c:	d402      	bmi.n	8010864 <_printf_i+0x18c>
 801085e:	065f      	lsls	r7, r3, #25
 8010860:	bf48      	it	mi
 8010862:	b2b6      	uxthmi	r6, r6
 8010864:	07df      	lsls	r7, r3, #31
 8010866:	bf48      	it	mi
 8010868:	f043 0320 	orrmi.w	r3, r3, #32
 801086c:	6029      	str	r1, [r5, #0]
 801086e:	bf48      	it	mi
 8010870:	6023      	strmi	r3, [r4, #0]
 8010872:	b91e      	cbnz	r6, 801087c <_printf_i+0x1a4>
 8010874:	6823      	ldr	r3, [r4, #0]
 8010876:	f023 0320 	bic.w	r3, r3, #32
 801087a:	6023      	str	r3, [r4, #0]
 801087c:	2310      	movs	r3, #16
 801087e:	e7a7      	b.n	80107d0 <_printf_i+0xf8>
 8010880:	4824      	ldr	r0, [pc, #144]	; (8010914 <_printf_i+0x23c>)
 8010882:	e7e4      	b.n	801084e <_printf_i+0x176>
 8010884:	4615      	mov	r5, r2
 8010886:	e7bd      	b.n	8010804 <_printf_i+0x12c>
 8010888:	682b      	ldr	r3, [r5, #0]
 801088a:	6826      	ldr	r6, [r4, #0]
 801088c:	6961      	ldr	r1, [r4, #20]
 801088e:	1d18      	adds	r0, r3, #4
 8010890:	6028      	str	r0, [r5, #0]
 8010892:	0635      	lsls	r5, r6, #24
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	d501      	bpl.n	801089c <_printf_i+0x1c4>
 8010898:	6019      	str	r1, [r3, #0]
 801089a:	e002      	b.n	80108a2 <_printf_i+0x1ca>
 801089c:	0670      	lsls	r0, r6, #25
 801089e:	d5fb      	bpl.n	8010898 <_printf_i+0x1c0>
 80108a0:	8019      	strh	r1, [r3, #0]
 80108a2:	2300      	movs	r3, #0
 80108a4:	6123      	str	r3, [r4, #16]
 80108a6:	4615      	mov	r5, r2
 80108a8:	e7bc      	b.n	8010824 <_printf_i+0x14c>
 80108aa:	682b      	ldr	r3, [r5, #0]
 80108ac:	1d1a      	adds	r2, r3, #4
 80108ae:	602a      	str	r2, [r5, #0]
 80108b0:	681d      	ldr	r5, [r3, #0]
 80108b2:	6862      	ldr	r2, [r4, #4]
 80108b4:	2100      	movs	r1, #0
 80108b6:	4628      	mov	r0, r5
 80108b8:	f7ef fd2a 	bl	8000310 <memchr>
 80108bc:	b108      	cbz	r0, 80108c2 <_printf_i+0x1ea>
 80108be:	1b40      	subs	r0, r0, r5
 80108c0:	6060      	str	r0, [r4, #4]
 80108c2:	6863      	ldr	r3, [r4, #4]
 80108c4:	6123      	str	r3, [r4, #16]
 80108c6:	2300      	movs	r3, #0
 80108c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108cc:	e7aa      	b.n	8010824 <_printf_i+0x14c>
 80108ce:	6923      	ldr	r3, [r4, #16]
 80108d0:	462a      	mov	r2, r5
 80108d2:	4649      	mov	r1, r9
 80108d4:	4640      	mov	r0, r8
 80108d6:	47d0      	blx	sl
 80108d8:	3001      	adds	r0, #1
 80108da:	d0ad      	beq.n	8010838 <_printf_i+0x160>
 80108dc:	6823      	ldr	r3, [r4, #0]
 80108de:	079b      	lsls	r3, r3, #30
 80108e0:	d413      	bmi.n	801090a <_printf_i+0x232>
 80108e2:	68e0      	ldr	r0, [r4, #12]
 80108e4:	9b03      	ldr	r3, [sp, #12]
 80108e6:	4298      	cmp	r0, r3
 80108e8:	bfb8      	it	lt
 80108ea:	4618      	movlt	r0, r3
 80108ec:	e7a6      	b.n	801083c <_printf_i+0x164>
 80108ee:	2301      	movs	r3, #1
 80108f0:	4632      	mov	r2, r6
 80108f2:	4649      	mov	r1, r9
 80108f4:	4640      	mov	r0, r8
 80108f6:	47d0      	blx	sl
 80108f8:	3001      	adds	r0, #1
 80108fa:	d09d      	beq.n	8010838 <_printf_i+0x160>
 80108fc:	3501      	adds	r5, #1
 80108fe:	68e3      	ldr	r3, [r4, #12]
 8010900:	9903      	ldr	r1, [sp, #12]
 8010902:	1a5b      	subs	r3, r3, r1
 8010904:	42ab      	cmp	r3, r5
 8010906:	dcf2      	bgt.n	80108ee <_printf_i+0x216>
 8010908:	e7eb      	b.n	80108e2 <_printf_i+0x20a>
 801090a:	2500      	movs	r5, #0
 801090c:	f104 0619 	add.w	r6, r4, #25
 8010910:	e7f5      	b.n	80108fe <_printf_i+0x226>
 8010912:	bf00      	nop
 8010914:	08010e5d 	.word	0x08010e5d
 8010918:	08010e6e 	.word	0x08010e6e

0801091c <__sflush_r>:
 801091c:	898a      	ldrh	r2, [r1, #12]
 801091e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010922:	4605      	mov	r5, r0
 8010924:	0710      	lsls	r0, r2, #28
 8010926:	460c      	mov	r4, r1
 8010928:	d458      	bmi.n	80109dc <__sflush_r+0xc0>
 801092a:	684b      	ldr	r3, [r1, #4]
 801092c:	2b00      	cmp	r3, #0
 801092e:	dc05      	bgt.n	801093c <__sflush_r+0x20>
 8010930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010932:	2b00      	cmp	r3, #0
 8010934:	dc02      	bgt.n	801093c <__sflush_r+0x20>
 8010936:	2000      	movs	r0, #0
 8010938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801093c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801093e:	2e00      	cmp	r6, #0
 8010940:	d0f9      	beq.n	8010936 <__sflush_r+0x1a>
 8010942:	2300      	movs	r3, #0
 8010944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010948:	682f      	ldr	r7, [r5, #0]
 801094a:	6a21      	ldr	r1, [r4, #32]
 801094c:	602b      	str	r3, [r5, #0]
 801094e:	d032      	beq.n	80109b6 <__sflush_r+0x9a>
 8010950:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010952:	89a3      	ldrh	r3, [r4, #12]
 8010954:	075a      	lsls	r2, r3, #29
 8010956:	d505      	bpl.n	8010964 <__sflush_r+0x48>
 8010958:	6863      	ldr	r3, [r4, #4]
 801095a:	1ac0      	subs	r0, r0, r3
 801095c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801095e:	b10b      	cbz	r3, 8010964 <__sflush_r+0x48>
 8010960:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010962:	1ac0      	subs	r0, r0, r3
 8010964:	2300      	movs	r3, #0
 8010966:	4602      	mov	r2, r0
 8010968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801096a:	6a21      	ldr	r1, [r4, #32]
 801096c:	4628      	mov	r0, r5
 801096e:	47b0      	blx	r6
 8010970:	1c43      	adds	r3, r0, #1
 8010972:	89a3      	ldrh	r3, [r4, #12]
 8010974:	d106      	bne.n	8010984 <__sflush_r+0x68>
 8010976:	6829      	ldr	r1, [r5, #0]
 8010978:	291d      	cmp	r1, #29
 801097a:	d82b      	bhi.n	80109d4 <__sflush_r+0xb8>
 801097c:	4a29      	ldr	r2, [pc, #164]	; (8010a24 <__sflush_r+0x108>)
 801097e:	410a      	asrs	r2, r1
 8010980:	07d6      	lsls	r6, r2, #31
 8010982:	d427      	bmi.n	80109d4 <__sflush_r+0xb8>
 8010984:	2200      	movs	r2, #0
 8010986:	6062      	str	r2, [r4, #4]
 8010988:	04d9      	lsls	r1, r3, #19
 801098a:	6922      	ldr	r2, [r4, #16]
 801098c:	6022      	str	r2, [r4, #0]
 801098e:	d504      	bpl.n	801099a <__sflush_r+0x7e>
 8010990:	1c42      	adds	r2, r0, #1
 8010992:	d101      	bne.n	8010998 <__sflush_r+0x7c>
 8010994:	682b      	ldr	r3, [r5, #0]
 8010996:	b903      	cbnz	r3, 801099a <__sflush_r+0x7e>
 8010998:	6560      	str	r0, [r4, #84]	; 0x54
 801099a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801099c:	602f      	str	r7, [r5, #0]
 801099e:	2900      	cmp	r1, #0
 80109a0:	d0c9      	beq.n	8010936 <__sflush_r+0x1a>
 80109a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109a6:	4299      	cmp	r1, r3
 80109a8:	d002      	beq.n	80109b0 <__sflush_r+0x94>
 80109aa:	4628      	mov	r0, r5
 80109ac:	f7ff fbea 	bl	8010184 <_free_r>
 80109b0:	2000      	movs	r0, #0
 80109b2:	6360      	str	r0, [r4, #52]	; 0x34
 80109b4:	e7c0      	b.n	8010938 <__sflush_r+0x1c>
 80109b6:	2301      	movs	r3, #1
 80109b8:	4628      	mov	r0, r5
 80109ba:	47b0      	blx	r6
 80109bc:	1c41      	adds	r1, r0, #1
 80109be:	d1c8      	bne.n	8010952 <__sflush_r+0x36>
 80109c0:	682b      	ldr	r3, [r5, #0]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d0c5      	beq.n	8010952 <__sflush_r+0x36>
 80109c6:	2b1d      	cmp	r3, #29
 80109c8:	d001      	beq.n	80109ce <__sflush_r+0xb2>
 80109ca:	2b16      	cmp	r3, #22
 80109cc:	d101      	bne.n	80109d2 <__sflush_r+0xb6>
 80109ce:	602f      	str	r7, [r5, #0]
 80109d0:	e7b1      	b.n	8010936 <__sflush_r+0x1a>
 80109d2:	89a3      	ldrh	r3, [r4, #12]
 80109d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109d8:	81a3      	strh	r3, [r4, #12]
 80109da:	e7ad      	b.n	8010938 <__sflush_r+0x1c>
 80109dc:	690f      	ldr	r7, [r1, #16]
 80109de:	2f00      	cmp	r7, #0
 80109e0:	d0a9      	beq.n	8010936 <__sflush_r+0x1a>
 80109e2:	0793      	lsls	r3, r2, #30
 80109e4:	680e      	ldr	r6, [r1, #0]
 80109e6:	bf08      	it	eq
 80109e8:	694b      	ldreq	r3, [r1, #20]
 80109ea:	600f      	str	r7, [r1, #0]
 80109ec:	bf18      	it	ne
 80109ee:	2300      	movne	r3, #0
 80109f0:	eba6 0807 	sub.w	r8, r6, r7
 80109f4:	608b      	str	r3, [r1, #8]
 80109f6:	f1b8 0f00 	cmp.w	r8, #0
 80109fa:	dd9c      	ble.n	8010936 <__sflush_r+0x1a>
 80109fc:	6a21      	ldr	r1, [r4, #32]
 80109fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010a00:	4643      	mov	r3, r8
 8010a02:	463a      	mov	r2, r7
 8010a04:	4628      	mov	r0, r5
 8010a06:	47b0      	blx	r6
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	dc06      	bgt.n	8010a1a <__sflush_r+0xfe>
 8010a0c:	89a3      	ldrh	r3, [r4, #12]
 8010a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a12:	81a3      	strh	r3, [r4, #12]
 8010a14:	f04f 30ff 	mov.w	r0, #4294967295
 8010a18:	e78e      	b.n	8010938 <__sflush_r+0x1c>
 8010a1a:	4407      	add	r7, r0
 8010a1c:	eba8 0800 	sub.w	r8, r8, r0
 8010a20:	e7e9      	b.n	80109f6 <__sflush_r+0xda>
 8010a22:	bf00      	nop
 8010a24:	dfbffffe 	.word	0xdfbffffe

08010a28 <_fflush_r>:
 8010a28:	b538      	push	{r3, r4, r5, lr}
 8010a2a:	690b      	ldr	r3, [r1, #16]
 8010a2c:	4605      	mov	r5, r0
 8010a2e:	460c      	mov	r4, r1
 8010a30:	b913      	cbnz	r3, 8010a38 <_fflush_r+0x10>
 8010a32:	2500      	movs	r5, #0
 8010a34:	4628      	mov	r0, r5
 8010a36:	bd38      	pop	{r3, r4, r5, pc}
 8010a38:	b118      	cbz	r0, 8010a42 <_fflush_r+0x1a>
 8010a3a:	6a03      	ldr	r3, [r0, #32]
 8010a3c:	b90b      	cbnz	r3, 8010a42 <_fflush_r+0x1a>
 8010a3e:	f7ff fa91 	bl	800ff64 <__sinit>
 8010a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d0f3      	beq.n	8010a32 <_fflush_r+0xa>
 8010a4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010a4c:	07d0      	lsls	r0, r2, #31
 8010a4e:	d404      	bmi.n	8010a5a <_fflush_r+0x32>
 8010a50:	0599      	lsls	r1, r3, #22
 8010a52:	d402      	bmi.n	8010a5a <_fflush_r+0x32>
 8010a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a56:	f7ff fb92 	bl	801017e <__retarget_lock_acquire_recursive>
 8010a5a:	4628      	mov	r0, r5
 8010a5c:	4621      	mov	r1, r4
 8010a5e:	f7ff ff5d 	bl	801091c <__sflush_r>
 8010a62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a64:	07da      	lsls	r2, r3, #31
 8010a66:	4605      	mov	r5, r0
 8010a68:	d4e4      	bmi.n	8010a34 <_fflush_r+0xc>
 8010a6a:	89a3      	ldrh	r3, [r4, #12]
 8010a6c:	059b      	lsls	r3, r3, #22
 8010a6e:	d4e1      	bmi.n	8010a34 <_fflush_r+0xc>
 8010a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a72:	f7ff fb85 	bl	8010180 <__retarget_lock_release_recursive>
 8010a76:	e7dd      	b.n	8010a34 <_fflush_r+0xc>

08010a78 <_putc_r>:
 8010a78:	b570      	push	{r4, r5, r6, lr}
 8010a7a:	460d      	mov	r5, r1
 8010a7c:	4614      	mov	r4, r2
 8010a7e:	4606      	mov	r6, r0
 8010a80:	b118      	cbz	r0, 8010a8a <_putc_r+0x12>
 8010a82:	6a03      	ldr	r3, [r0, #32]
 8010a84:	b90b      	cbnz	r3, 8010a8a <_putc_r+0x12>
 8010a86:	f7ff fa6d 	bl	800ff64 <__sinit>
 8010a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a8c:	07d8      	lsls	r0, r3, #31
 8010a8e:	d405      	bmi.n	8010a9c <_putc_r+0x24>
 8010a90:	89a3      	ldrh	r3, [r4, #12]
 8010a92:	0599      	lsls	r1, r3, #22
 8010a94:	d402      	bmi.n	8010a9c <_putc_r+0x24>
 8010a96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a98:	f7ff fb71 	bl	801017e <__retarget_lock_acquire_recursive>
 8010a9c:	68a3      	ldr	r3, [r4, #8]
 8010a9e:	3b01      	subs	r3, #1
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	60a3      	str	r3, [r4, #8]
 8010aa4:	da05      	bge.n	8010ab2 <_putc_r+0x3a>
 8010aa6:	69a2      	ldr	r2, [r4, #24]
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	db12      	blt.n	8010ad2 <_putc_r+0x5a>
 8010aac:	b2eb      	uxtb	r3, r5
 8010aae:	2b0a      	cmp	r3, #10
 8010ab0:	d00f      	beq.n	8010ad2 <_putc_r+0x5a>
 8010ab2:	6823      	ldr	r3, [r4, #0]
 8010ab4:	1c5a      	adds	r2, r3, #1
 8010ab6:	6022      	str	r2, [r4, #0]
 8010ab8:	701d      	strb	r5, [r3, #0]
 8010aba:	b2ed      	uxtb	r5, r5
 8010abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010abe:	07da      	lsls	r2, r3, #31
 8010ac0:	d405      	bmi.n	8010ace <_putc_r+0x56>
 8010ac2:	89a3      	ldrh	r3, [r4, #12]
 8010ac4:	059b      	lsls	r3, r3, #22
 8010ac6:	d402      	bmi.n	8010ace <_putc_r+0x56>
 8010ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010aca:	f7ff fb59 	bl	8010180 <__retarget_lock_release_recursive>
 8010ace:	4628      	mov	r0, r5
 8010ad0:	bd70      	pop	{r4, r5, r6, pc}
 8010ad2:	4629      	mov	r1, r5
 8010ad4:	4622      	mov	r2, r4
 8010ad6:	4630      	mov	r0, r6
 8010ad8:	f000 f802 	bl	8010ae0 <__swbuf_r>
 8010adc:	4605      	mov	r5, r0
 8010ade:	e7ed      	b.n	8010abc <_putc_r+0x44>

08010ae0 <__swbuf_r>:
 8010ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ae2:	460e      	mov	r6, r1
 8010ae4:	4614      	mov	r4, r2
 8010ae6:	4605      	mov	r5, r0
 8010ae8:	b118      	cbz	r0, 8010af2 <__swbuf_r+0x12>
 8010aea:	6a03      	ldr	r3, [r0, #32]
 8010aec:	b90b      	cbnz	r3, 8010af2 <__swbuf_r+0x12>
 8010aee:	f7ff fa39 	bl	800ff64 <__sinit>
 8010af2:	69a3      	ldr	r3, [r4, #24]
 8010af4:	60a3      	str	r3, [r4, #8]
 8010af6:	89a3      	ldrh	r3, [r4, #12]
 8010af8:	071a      	lsls	r2, r3, #28
 8010afa:	d525      	bpl.n	8010b48 <__swbuf_r+0x68>
 8010afc:	6923      	ldr	r3, [r4, #16]
 8010afe:	b31b      	cbz	r3, 8010b48 <__swbuf_r+0x68>
 8010b00:	6823      	ldr	r3, [r4, #0]
 8010b02:	6922      	ldr	r2, [r4, #16]
 8010b04:	1a98      	subs	r0, r3, r2
 8010b06:	6963      	ldr	r3, [r4, #20]
 8010b08:	b2f6      	uxtb	r6, r6
 8010b0a:	4283      	cmp	r3, r0
 8010b0c:	4637      	mov	r7, r6
 8010b0e:	dc04      	bgt.n	8010b1a <__swbuf_r+0x3a>
 8010b10:	4621      	mov	r1, r4
 8010b12:	4628      	mov	r0, r5
 8010b14:	f7ff ff88 	bl	8010a28 <_fflush_r>
 8010b18:	b9e0      	cbnz	r0, 8010b54 <__swbuf_r+0x74>
 8010b1a:	68a3      	ldr	r3, [r4, #8]
 8010b1c:	3b01      	subs	r3, #1
 8010b1e:	60a3      	str	r3, [r4, #8]
 8010b20:	6823      	ldr	r3, [r4, #0]
 8010b22:	1c5a      	adds	r2, r3, #1
 8010b24:	6022      	str	r2, [r4, #0]
 8010b26:	701e      	strb	r6, [r3, #0]
 8010b28:	6962      	ldr	r2, [r4, #20]
 8010b2a:	1c43      	adds	r3, r0, #1
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d004      	beq.n	8010b3a <__swbuf_r+0x5a>
 8010b30:	89a3      	ldrh	r3, [r4, #12]
 8010b32:	07db      	lsls	r3, r3, #31
 8010b34:	d506      	bpl.n	8010b44 <__swbuf_r+0x64>
 8010b36:	2e0a      	cmp	r6, #10
 8010b38:	d104      	bne.n	8010b44 <__swbuf_r+0x64>
 8010b3a:	4621      	mov	r1, r4
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	f7ff ff73 	bl	8010a28 <_fflush_r>
 8010b42:	b938      	cbnz	r0, 8010b54 <__swbuf_r+0x74>
 8010b44:	4638      	mov	r0, r7
 8010b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b48:	4621      	mov	r1, r4
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	f000 f806 	bl	8010b5c <__swsetup_r>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	d0d5      	beq.n	8010b00 <__swbuf_r+0x20>
 8010b54:	f04f 37ff 	mov.w	r7, #4294967295
 8010b58:	e7f4      	b.n	8010b44 <__swbuf_r+0x64>
	...

08010b5c <__swsetup_r>:
 8010b5c:	b538      	push	{r3, r4, r5, lr}
 8010b5e:	4b2a      	ldr	r3, [pc, #168]	; (8010c08 <__swsetup_r+0xac>)
 8010b60:	4605      	mov	r5, r0
 8010b62:	6818      	ldr	r0, [r3, #0]
 8010b64:	460c      	mov	r4, r1
 8010b66:	b118      	cbz	r0, 8010b70 <__swsetup_r+0x14>
 8010b68:	6a03      	ldr	r3, [r0, #32]
 8010b6a:	b90b      	cbnz	r3, 8010b70 <__swsetup_r+0x14>
 8010b6c:	f7ff f9fa 	bl	800ff64 <__sinit>
 8010b70:	89a3      	ldrh	r3, [r4, #12]
 8010b72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b76:	0718      	lsls	r0, r3, #28
 8010b78:	d422      	bmi.n	8010bc0 <__swsetup_r+0x64>
 8010b7a:	06d9      	lsls	r1, r3, #27
 8010b7c:	d407      	bmi.n	8010b8e <__swsetup_r+0x32>
 8010b7e:	2309      	movs	r3, #9
 8010b80:	602b      	str	r3, [r5, #0]
 8010b82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b86:	81a3      	strh	r3, [r4, #12]
 8010b88:	f04f 30ff 	mov.w	r0, #4294967295
 8010b8c:	e034      	b.n	8010bf8 <__swsetup_r+0x9c>
 8010b8e:	0758      	lsls	r0, r3, #29
 8010b90:	d512      	bpl.n	8010bb8 <__swsetup_r+0x5c>
 8010b92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b94:	b141      	cbz	r1, 8010ba8 <__swsetup_r+0x4c>
 8010b96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b9a:	4299      	cmp	r1, r3
 8010b9c:	d002      	beq.n	8010ba4 <__swsetup_r+0x48>
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	f7ff faf0 	bl	8010184 <_free_r>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	6363      	str	r3, [r4, #52]	; 0x34
 8010ba8:	89a3      	ldrh	r3, [r4, #12]
 8010baa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010bae:	81a3      	strh	r3, [r4, #12]
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	6063      	str	r3, [r4, #4]
 8010bb4:	6923      	ldr	r3, [r4, #16]
 8010bb6:	6023      	str	r3, [r4, #0]
 8010bb8:	89a3      	ldrh	r3, [r4, #12]
 8010bba:	f043 0308 	orr.w	r3, r3, #8
 8010bbe:	81a3      	strh	r3, [r4, #12]
 8010bc0:	6923      	ldr	r3, [r4, #16]
 8010bc2:	b94b      	cbnz	r3, 8010bd8 <__swsetup_r+0x7c>
 8010bc4:	89a3      	ldrh	r3, [r4, #12]
 8010bc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bce:	d003      	beq.n	8010bd8 <__swsetup_r+0x7c>
 8010bd0:	4621      	mov	r1, r4
 8010bd2:	4628      	mov	r0, r5
 8010bd4:	f000 f850 	bl	8010c78 <__smakebuf_r>
 8010bd8:	89a0      	ldrh	r0, [r4, #12]
 8010bda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010bde:	f010 0301 	ands.w	r3, r0, #1
 8010be2:	d00a      	beq.n	8010bfa <__swsetup_r+0x9e>
 8010be4:	2300      	movs	r3, #0
 8010be6:	60a3      	str	r3, [r4, #8]
 8010be8:	6963      	ldr	r3, [r4, #20]
 8010bea:	425b      	negs	r3, r3
 8010bec:	61a3      	str	r3, [r4, #24]
 8010bee:	6923      	ldr	r3, [r4, #16]
 8010bf0:	b943      	cbnz	r3, 8010c04 <__swsetup_r+0xa8>
 8010bf2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010bf6:	d1c4      	bne.n	8010b82 <__swsetup_r+0x26>
 8010bf8:	bd38      	pop	{r3, r4, r5, pc}
 8010bfa:	0781      	lsls	r1, r0, #30
 8010bfc:	bf58      	it	pl
 8010bfe:	6963      	ldrpl	r3, [r4, #20]
 8010c00:	60a3      	str	r3, [r4, #8]
 8010c02:	e7f4      	b.n	8010bee <__swsetup_r+0x92>
 8010c04:	2000      	movs	r0, #0
 8010c06:	e7f7      	b.n	8010bf8 <__swsetup_r+0x9c>
 8010c08:	2400013c 	.word	0x2400013c

08010c0c <_sbrk_r>:
 8010c0c:	b538      	push	{r3, r4, r5, lr}
 8010c0e:	4d06      	ldr	r5, [pc, #24]	; (8010c28 <_sbrk_r+0x1c>)
 8010c10:	2300      	movs	r3, #0
 8010c12:	4604      	mov	r4, r0
 8010c14:	4608      	mov	r0, r1
 8010c16:	602b      	str	r3, [r5, #0]
 8010c18:	f7f0 ff78 	bl	8001b0c <_sbrk>
 8010c1c:	1c43      	adds	r3, r0, #1
 8010c1e:	d102      	bne.n	8010c26 <_sbrk_r+0x1a>
 8010c20:	682b      	ldr	r3, [r5, #0]
 8010c22:	b103      	cbz	r3, 8010c26 <_sbrk_r+0x1a>
 8010c24:	6023      	str	r3, [r4, #0]
 8010c26:	bd38      	pop	{r3, r4, r5, pc}
 8010c28:	24001564 	.word	0x24001564

08010c2c <__swhatbuf_r>:
 8010c2c:	b570      	push	{r4, r5, r6, lr}
 8010c2e:	460c      	mov	r4, r1
 8010c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c34:	2900      	cmp	r1, #0
 8010c36:	b096      	sub	sp, #88	; 0x58
 8010c38:	4615      	mov	r5, r2
 8010c3a:	461e      	mov	r6, r3
 8010c3c:	da0d      	bge.n	8010c5a <__swhatbuf_r+0x2e>
 8010c3e:	89a3      	ldrh	r3, [r4, #12]
 8010c40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010c44:	f04f 0100 	mov.w	r1, #0
 8010c48:	bf0c      	ite	eq
 8010c4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010c4e:	2340      	movne	r3, #64	; 0x40
 8010c50:	2000      	movs	r0, #0
 8010c52:	6031      	str	r1, [r6, #0]
 8010c54:	602b      	str	r3, [r5, #0]
 8010c56:	b016      	add	sp, #88	; 0x58
 8010c58:	bd70      	pop	{r4, r5, r6, pc}
 8010c5a:	466a      	mov	r2, sp
 8010c5c:	f000 f848 	bl	8010cf0 <_fstat_r>
 8010c60:	2800      	cmp	r0, #0
 8010c62:	dbec      	blt.n	8010c3e <__swhatbuf_r+0x12>
 8010c64:	9901      	ldr	r1, [sp, #4]
 8010c66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010c6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010c6e:	4259      	negs	r1, r3
 8010c70:	4159      	adcs	r1, r3
 8010c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c76:	e7eb      	b.n	8010c50 <__swhatbuf_r+0x24>

08010c78 <__smakebuf_r>:
 8010c78:	898b      	ldrh	r3, [r1, #12]
 8010c7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c7c:	079d      	lsls	r5, r3, #30
 8010c7e:	4606      	mov	r6, r0
 8010c80:	460c      	mov	r4, r1
 8010c82:	d507      	bpl.n	8010c94 <__smakebuf_r+0x1c>
 8010c84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c88:	6023      	str	r3, [r4, #0]
 8010c8a:	6123      	str	r3, [r4, #16]
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	6163      	str	r3, [r4, #20]
 8010c90:	b002      	add	sp, #8
 8010c92:	bd70      	pop	{r4, r5, r6, pc}
 8010c94:	ab01      	add	r3, sp, #4
 8010c96:	466a      	mov	r2, sp
 8010c98:	f7ff ffc8 	bl	8010c2c <__swhatbuf_r>
 8010c9c:	9900      	ldr	r1, [sp, #0]
 8010c9e:	4605      	mov	r5, r0
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	f7ff fadb 	bl	801025c <_malloc_r>
 8010ca6:	b948      	cbnz	r0, 8010cbc <__smakebuf_r+0x44>
 8010ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cac:	059a      	lsls	r2, r3, #22
 8010cae:	d4ef      	bmi.n	8010c90 <__smakebuf_r+0x18>
 8010cb0:	f023 0303 	bic.w	r3, r3, #3
 8010cb4:	f043 0302 	orr.w	r3, r3, #2
 8010cb8:	81a3      	strh	r3, [r4, #12]
 8010cba:	e7e3      	b.n	8010c84 <__smakebuf_r+0xc>
 8010cbc:	89a3      	ldrh	r3, [r4, #12]
 8010cbe:	6020      	str	r0, [r4, #0]
 8010cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cc4:	81a3      	strh	r3, [r4, #12]
 8010cc6:	9b00      	ldr	r3, [sp, #0]
 8010cc8:	6163      	str	r3, [r4, #20]
 8010cca:	9b01      	ldr	r3, [sp, #4]
 8010ccc:	6120      	str	r0, [r4, #16]
 8010cce:	b15b      	cbz	r3, 8010ce8 <__smakebuf_r+0x70>
 8010cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cd4:	4630      	mov	r0, r6
 8010cd6:	f000 f81d 	bl	8010d14 <_isatty_r>
 8010cda:	b128      	cbz	r0, 8010ce8 <__smakebuf_r+0x70>
 8010cdc:	89a3      	ldrh	r3, [r4, #12]
 8010cde:	f023 0303 	bic.w	r3, r3, #3
 8010ce2:	f043 0301 	orr.w	r3, r3, #1
 8010ce6:	81a3      	strh	r3, [r4, #12]
 8010ce8:	89a3      	ldrh	r3, [r4, #12]
 8010cea:	431d      	orrs	r5, r3
 8010cec:	81a5      	strh	r5, [r4, #12]
 8010cee:	e7cf      	b.n	8010c90 <__smakebuf_r+0x18>

08010cf0 <_fstat_r>:
 8010cf0:	b538      	push	{r3, r4, r5, lr}
 8010cf2:	4d07      	ldr	r5, [pc, #28]	; (8010d10 <_fstat_r+0x20>)
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	4608      	mov	r0, r1
 8010cfa:	4611      	mov	r1, r2
 8010cfc:	602b      	str	r3, [r5, #0]
 8010cfe:	f7f0 fedc 	bl	8001aba <_fstat>
 8010d02:	1c43      	adds	r3, r0, #1
 8010d04:	d102      	bne.n	8010d0c <_fstat_r+0x1c>
 8010d06:	682b      	ldr	r3, [r5, #0]
 8010d08:	b103      	cbz	r3, 8010d0c <_fstat_r+0x1c>
 8010d0a:	6023      	str	r3, [r4, #0]
 8010d0c:	bd38      	pop	{r3, r4, r5, pc}
 8010d0e:	bf00      	nop
 8010d10:	24001564 	.word	0x24001564

08010d14 <_isatty_r>:
 8010d14:	b538      	push	{r3, r4, r5, lr}
 8010d16:	4d06      	ldr	r5, [pc, #24]	; (8010d30 <_isatty_r+0x1c>)
 8010d18:	2300      	movs	r3, #0
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	4608      	mov	r0, r1
 8010d1e:	602b      	str	r3, [r5, #0]
 8010d20:	f7f0 fedb 	bl	8001ada <_isatty>
 8010d24:	1c43      	adds	r3, r0, #1
 8010d26:	d102      	bne.n	8010d2e <_isatty_r+0x1a>
 8010d28:	682b      	ldr	r3, [r5, #0]
 8010d2a:	b103      	cbz	r3, 8010d2e <_isatty_r+0x1a>
 8010d2c:	6023      	str	r3, [r4, #0]
 8010d2e:	bd38      	pop	{r3, r4, r5, pc}
 8010d30:	24001564 	.word	0x24001564

08010d34 <_init>:
 8010d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d36:	bf00      	nop
 8010d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d3a:	bc08      	pop	{r3}
 8010d3c:	469e      	mov	lr, r3
 8010d3e:	4770      	bx	lr

08010d40 <_fini>:
 8010d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d42:	bf00      	nop
 8010d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d46:	bc08      	pop	{r3}
 8010d48:	469e      	mov	lr, r3
 8010d4a:	4770      	bx	lr
