
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .sdram_section 00000052  c0000000  c0000000  00030000  2**2
                  ALLOC
  2 .text         00007338  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  08007604  08007604  00017604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007620  08007620  00017620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000304  24000010  08007634  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000314  08007634  00020314  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00011d1d  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002b6a  00000000  00000000  00031d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000da0  00000000  00000000  00034908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000a48  00000000  00000000  000356a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00003ac0  00000000  00000000  000360f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015008  00000000  00000000  00039bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014319f  00000000  00000000  0004ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000036c0  00000000  00000000  00191d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000082  00000000  00000000  00195418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080075ec 	.word	0x080075ec

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	080075ec 	.word	0x080075ec

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <MX_DMA_Init+0x6c>)
 8000314:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000318:	4a17      	ldr	r2, [pc, #92]	; (8000378 <MX_DMA_Init+0x6c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_DMA_Init+0x6c>)
 8000324:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000330:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_DMA_Init+0x6c>)
 8000332:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000336:	4a10      	ldr	r2, [pc, #64]	; (8000378 <MX_DMA_Init+0x6c>)
 8000338:	f043 0302 	orr.w	r3, r3, #2
 800033c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <MX_DMA_Init+0x6c>)
 8000342:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000346:	f003 0302 	and.w	r3, r3, #2
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2100      	movs	r1, #0
 8000352:	200b      	movs	r0, #11
 8000354:	f001 f863 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000358:	200b      	movs	r0, #11
 800035a:	f001 f87a 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	2038      	movs	r0, #56	; 0x38
 8000364:	f001 f85b 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000368:	2038      	movs	r0, #56	; 0x38
 800036a:	f001 f872 	bl	8001452 <HAL_NVIC_EnableIRQ>

}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	58024400 	.word	0x58024400

0800037c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08c      	sub	sp, #48	; 0x30
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]
 8000392:	615a      	str	r2, [r3, #20]
 8000394:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000396:	4b3c      	ldr	r3, [pc, #240]	; (8000488 <MX_FMC_Init+0x10c>)
 8000398:	4a3c      	ldr	r2, [pc, #240]	; (800048c <MX_FMC_Init+0x110>)
 800039a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800039c:	4b3a      	ldr	r3, [pc, #232]	; (8000488 <MX_FMC_Init+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80003a2:	4b39      	ldr	r3, [pc, #228]	; (8000488 <MX_FMC_Init+0x10c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80003a8:	4b37      	ldr	r3, [pc, #220]	; (8000488 <MX_FMC_Init+0x10c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80003ae:	4b36      	ldr	r3, [pc, #216]	; (8000488 <MX_FMC_Init+0x10c>)
 80003b0:	2210      	movs	r2, #16
 80003b2:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80003b4:	4b34      	ldr	r3, [pc, #208]	; (8000488 <MX_FMC_Init+0x10c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80003ba:	4b33      	ldr	r3, [pc, #204]	; (8000488 <MX_FMC_Init+0x10c>)
 80003bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80003c0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80003c2:	4b31      	ldr	r3, [pc, #196]	; (8000488 <MX_FMC_Init+0x10c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80003c8:	4b2f      	ldr	r3, [pc, #188]	; (8000488 <MX_FMC_Init+0x10c>)
 80003ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003ce:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80003d0:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <MX_FMC_Init+0x10c>)
 80003d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003d6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80003d8:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <MX_FMC_Init+0x10c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80003de:	2310      	movs	r3, #16
 80003e0:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80003e2:	2310      	movs	r3, #16
 80003e4:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 16;
 80003e6:	2310      	movs	r3, #16
 80003e8:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 16;
 80003ea:	2310      	movs	r3, #16
 80003ec:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 16;
 80003ee:	2310      	movs	r3, #16
 80003f0:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 16;
 80003f2:	2310      	movs	r3, #16
 80003f4:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 16;
 80003f6:	2310      	movs	r3, #16
 80003f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80003fa:	f107 0314 	add.w	r3, r7, #20
 80003fe:	4619      	mov	r1, r3
 8000400:	4821      	ldr	r0, [pc, #132]	; (8000488 <MX_FMC_Init+0x10c>)
 8000402:	f006 fdeb 	bl	8006fdc <HAL_SDRAM_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 800040c:	f000 fb4d 	bl	8000aaa <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
   /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
   /* Step 3: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000410:	2301      	movs	r3, #1
 8000412:	607b      	str	r3, [r7, #4]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1; /* configure the Target Bank bits */
 8000414:	2310      	movs	r3, #16
 8000416:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber      = 1;
 8000418:	2301      	movs	r3, #1
 800041a:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	613b      	str	r3, [r7, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000426:	4619      	mov	r1, r3
 8000428:	4817      	ldr	r0, [pc, #92]	; (8000488 <MX_FMC_Init+0x10c>)
 800042a:	f006 fe13 	bl	8007054 <HAL_SDRAM_SendCommand>
    HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 800042e:	2001      	movs	r0, #1
 8000430:	f000 fef6 	bl	8001220 <HAL_Delay>
    /* Step 5: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000434:	2302      	movs	r3, #2
 8000436:	607b      	str	r3, [r7, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800043e:	4619      	mov	r1, r3
 8000440:	4811      	ldr	r0, [pc, #68]	; (8000488 <MX_FMC_Init+0x10c>)
 8000442:	f006 fe07 	bl	8007054 <HAL_SDRAM_SendCommand>
    /* Step 6: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000446:	2303      	movs	r3, #3
 8000448:	607b      	str	r3, [r7, #4]
    Command.AutoRefreshNumber      = 2;
 800044a:	2302      	movs	r3, #2
 800044c:	60fb      	str	r3, [r7, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000454:	4619      	mov	r1, r3
 8000456:	480c      	ldr	r0, [pc, #48]	; (8000488 <MX_FMC_Init+0x10c>)
 8000458:	f006 fdfc 	bl	8007054 <HAL_SDRAM_SendCommand>
    /* Step 7: Program the external memory mode register */
    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 800045c:	2304      	movs	r3, #4
 800045e:	607b      	str	r3, [r7, #4]
    Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000460:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000464:	613b      	str	r3, [r7, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	f640 72ff 	movw	r2, #4095	; 0xfff
 800046c:	4619      	mov	r1, r3
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <MX_FMC_Init+0x10c>)
 8000470:	f006 fdf0 	bl	8007054 <HAL_SDRAM_SendCommand>
    /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
    /* Set the device refresh rate
     * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
             = [(32ms/2048) * 270/2MHz] - 20 = 2089*/

    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2500);
 8000474:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000478:	4803      	ldr	r0, [pc, #12]	; (8000488 <MX_FMC_Init+0x10c>)
 800047a:	f006 fe20 	bl	80070be <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 800047e:	bf00      	nop
 8000480:	3730      	adds	r7, #48	; 0x30
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	2400002c 	.word	0x2400002c
 800048c:	52004140 	.word	0x52004140

08000490 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000490:	b580      	push	{r7, lr}
 8000492:	b0b6      	sub	sp, #216	; 0xd8
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80004a6:	4b7b      	ldr	r3, [pc, #492]	; (8000694 <HAL_FMC_MspInit+0x204>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 80ee 	bne.w	800068c <HAL_FMC_MspInit+0x1fc>
    return;
  }
  FMC_Initialized = 1;
 80004b0:	4b78      	ldr	r3, [pc, #480]	; (8000694 <HAL_FMC_MspInit+0x204>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	22b8      	movs	r2, #184	; 0xb8
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f007 f868 	bl	8007594 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80004c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004c8:	f04f 0300 	mov.w	r3, #0
 80004cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80004d0:	2300      	movs	r3, #0
 80004d2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004d4:	f107 0308 	add.w	r3, r7, #8
 80004d8:	4618      	mov	r0, r3
 80004da:	f003 fddf 	bl	800409c <HAL_RCCEx_PeriphCLKConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80004e4:	f000 fae1 	bl	8000aaa <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80004e8:	4b6b      	ldr	r3, [pc, #428]	; (8000698 <HAL_FMC_MspInit+0x208>)
 80004ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80004ee:	4a6a      	ldr	r2, [pc, #424]	; (8000698 <HAL_FMC_MspInit+0x208>)
 80004f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004f4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80004f8:	4b67      	ldr	r3, [pc, #412]	; (8000698 <HAL_FMC_MspInit+0x208>)
 80004fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80004fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000506:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800050a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050e:	2302      	movs	r3, #2
 8000510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800051a:	2303      	movs	r3, #3
 800051c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000520:	230c      	movs	r3, #12
 8000522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000526:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800052a:	4619      	mov	r1, r3
 800052c:	485b      	ldr	r0, [pc, #364]	; (800069c <HAL_FMC_MspInit+0x20c>)
 800052e:	f002 fc69 	bl	8002e04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000532:	230d      	movs	r3, #13
 8000534:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000538:	2302      	movs	r3, #2
 800053a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800053e:	2301      	movs	r3, #1
 8000540:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000544:	2303      	movs	r3, #3
 8000546:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800054a:	230c      	movs	r3, #12
 800054c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000550:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000554:	4619      	mov	r1, r3
 8000556:	4852      	ldr	r0, [pc, #328]	; (80006a0 <HAL_FMC_MspInit+0x210>)
 8000558:	f002 fc54 	bl	8002e04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800055c:	2330      	movs	r3, #48	; 0x30
 800055e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000562:	2302      	movs	r3, #2
 8000564:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056e:	2303      	movs	r3, #3
 8000570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000574:	230c      	movs	r3, #12
 8000576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800057e:	4619      	mov	r1, r3
 8000580:	4848      	ldr	r0, [pc, #288]	; (80006a4 <HAL_FMC_MspInit+0x214>)
 8000582:	f002 fc3f 	bl	8002e04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000586:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800058a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	2302      	movs	r3, #2
 8000590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000594:	2301      	movs	r3, #1
 8000596:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059a:	2303      	movs	r3, #3
 800059c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005a0:	230c      	movs	r3, #12
 80005a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005aa:	4619      	mov	r1, r3
 80005ac:	483b      	ldr	r0, [pc, #236]	; (800069c <HAL_FMC_MspInit+0x20c>)
 80005ae:	f002 fc29 	bl	8002e04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005b2:	2301      	movs	r3, #1
 80005b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b8:	2302      	movs	r3, #2
 80005ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005ca:	230c      	movs	r3, #12
 80005cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4834      	ldr	r0, [pc, #208]	; (80006a8 <HAL_FMC_MspInit+0x218>)
 80005d8:	f002 fc14 	bl	8002e04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80005dc:	f24e 7380 	movw	r3, #59264	; 0xe780
 80005e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e4:	2302      	movs	r3, #2
 80005e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f0:	2303      	movs	r3, #3
 80005f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005f6:	230c      	movs	r3, #12
 80005f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000600:	4619      	mov	r1, r3
 8000602:	482a      	ldr	r0, [pc, #168]	; (80006ac <HAL_FMC_MspInit+0x21c>)
 8000604:	f002 fbfe 	bl	8002e04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000608:	f24c 7303 	movw	r3, #50947	; 0xc703
 800060c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	2302      	movs	r3, #2
 8000612:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061c:	2303      	movs	r3, #3
 800061e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000622:	230c      	movs	r3, #12
 8000624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000628:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800062c:	4619      	mov	r1, r3
 800062e:	4820      	ldr	r0, [pc, #128]	; (80006b0 <HAL_FMC_MspInit+0x220>)
 8000630:	f002 fbe8 	bl	8002e04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8000634:	f248 1310 	movw	r3, #33040	; 0x8110
 8000638:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000642:	2301      	movs	r3, #1
 8000644:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000648:	2303      	movs	r3, #3
 800064a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800064e:	230c      	movs	r3, #12
 8000650:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000654:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000658:	4619      	mov	r1, r3
 800065a:	4813      	ldr	r0, [pc, #76]	; (80006a8 <HAL_FMC_MspInit+0x218>)
 800065c:	f002 fbd2 	bl	8002e04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000660:	2303      	movs	r3, #3
 8000662:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	2302      	movs	r3, #2
 8000668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800066c:	2301      	movs	r3, #1
 800066e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000672:	2303      	movs	r3, #3
 8000674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000678:	230c      	movs	r3, #12
 800067a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800067e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000682:	4619      	mov	r1, r3
 8000684:	4809      	ldr	r0, [pc, #36]	; (80006ac <HAL_FMC_MspInit+0x21c>)
 8000686:	f002 fbbd 	bl	8002e04 <HAL_GPIO_Init>
 800068a:	e000      	b.n	800068e <HAL_FMC_MspInit+0x1fe>
    return;
 800068c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800068e:	37d8      	adds	r7, #216	; 0xd8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	24000060 	.word	0x24000060
 8000698:	58024400 	.word	0x58024400
 800069c:	58021400 	.word	0x58021400
 80006a0:	58020800 	.word	0x58020800
 80006a4:	58020000 	.word	0x58020000
 80006a8:	58021800 	.word	0x58021800
 80006ac:	58021000 	.word	0x58021000
 80006b0:	58020c00 	.word	0x58020c00

080006b4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006bc:	f7ff fee8 	bl	8000490 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	; 0x30
 80006cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006de:	4b40      	ldr	r3, [pc, #256]	; (80007e0 <MX_GPIO_Init+0x118>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e4:	4a3e      	ldr	r2, [pc, #248]	; (80007e0 <MX_GPIO_Init+0x118>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ee:	4b3c      	ldr	r3, [pc, #240]	; (80007e0 <MX_GPIO_Init+0x118>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f4:	f003 0310 	and.w	r3, r3, #16
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006fc:	4b38      	ldr	r3, [pc, #224]	; (80007e0 <MX_GPIO_Init+0x118>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000702:	4a37      	ldr	r2, [pc, #220]	; (80007e0 <MX_GPIO_Init+0x118>)
 8000704:	f043 0320 	orr.w	r3, r3, #32
 8000708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070c:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <MX_GPIO_Init+0x118>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000712:	f003 0320 	and.w	r3, r3, #32
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <MX_GPIO_Init+0x118>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000720:	4a2f      	ldr	r2, [pc, #188]	; (80007e0 <MX_GPIO_Init+0x118>)
 8000722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072a:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_GPIO_Init+0x118>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000738:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <MX_GPIO_Init+0x118>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073e:	4a28      	ldr	r2, [pc, #160]	; (80007e0 <MX_GPIO_Init+0x118>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <MX_GPIO_Init+0x118>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_GPIO_Init+0x118>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075c:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <MX_GPIO_Init+0x118>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_GPIO_Init+0x118>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_GPIO_Init+0x118>)
 8000776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077a:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <MX_GPIO_Init+0x118>)
 800077c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000780:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_GPIO_Init+0x118>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_GPIO_Init+0x118>)
 8000794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000798:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <MX_GPIO_Init+0x118>)
 800079a:	f043 0308 	orr.w	r3, r3, #8
 800079e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_GPIO_Init+0x118>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2120      	movs	r1, #32
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MX_GPIO_Init+0x11c>)
 80007b6:	f002 fccd 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ba:	2320      	movs	r3, #32
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0x11c>)
 80007d2:	f002 fb17 	bl	8002e04 <HAL_GPIO_Init>

}
 80007d6:	bf00      	nop
 80007d8:	3730      	adds	r7, #48	; 0x30
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	58024400 	.word	0x58024400
 80007e4:	58021800 	.word	0x58021800

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fc85 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f8b9 	bl	8000968 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007f6:	f000 f925 	bl	8000a44 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f7ff ff65 	bl	80006c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007fe:	f7ff fd85 	bl	800030c <MX_DMA_Init>
  MX_SAI1_Init();
 8000802:	f000 f957 	bl	8000ab4 <MX_SAI1_Init>
  MX_SPI1_Init();
 8000806:	f000 fa9b 	bl	8000d40 <MX_SPI1_Init>
  MX_FMC_Init();
 800080a:	f7ff fdb7 	bl	800037c <MX_FMC_Init>
  while (1)
  {
	  uint32_t fmctestStart;
	  uint32_t fmctestStop;

	  fmctestStart = HAL_GetTick();
 800080e:	f000 fcfb 	bl	8001208 <HAL_GetTick>
 8000812:	60f8      	str	r0, [r7, #12]
	  uint32_t errorCounter =0;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for(uint32_t i = 0; i<10000;i++){
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
 800081c:	e082      	b.n	8000924 <main+0x13c>

		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 800081e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
 8000824:	e077      	b.n	8000916 <main+0x12e>
			  fmctestStart = HAL_GetTick();
 8000826:	f000 fcef 	bl	8001208 <HAL_GetTick>
 800082a:	60f8      	str	r0, [r7, #12]
			  uint8_t number_inc = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			  for(uint32_t counter = 0; counter<SDRAM_SIZE; counter++){
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	e00e      	b.n	8000856 <main+0x6e>
				  *(__IO uint8_t*)(SDRAM_ADDRESS_START+6 + counter) = (uint8_t) number_inc;
 8000838:	69fa      	ldr	r2, [r7, #28]
 800083a:	4b43      	ldr	r3, [pc, #268]	; (8000948 <main+0x160>)
 800083c:	4413      	add	r3, r2
 800083e:	461a      	mov	r2, r3
 8000840:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000844:	7013      	strb	r3, [r2, #0]
				  number_inc++;
 8000846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800084a:	3301      	adds	r3, #1
 800084c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			  for(uint32_t counter = 0; counter<SDRAM_SIZE; counter++){
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	3301      	adds	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800085c:	d3ec      	bcc.n	8000838 <main+0x50>
			  }
			  for(uint32_t counter = 1; counter<SDRAM_SIZE; counter=counter+2){
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
 8000862:	e00e      	b.n	8000882 <main+0x9a>
				  *(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t) number_inc;
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800086a:	461a      	mov	r2, r3
 800086c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000870:	7013      	strb	r3, [r2, #0]
				  number_inc++;
 8000872:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000876:	3301      	adds	r3, #1
 8000878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			  for(uint32_t counter = 1; counter<SDRAM_SIZE; counter=counter+2){
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	3302      	adds	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000888:	d3ec      	bcc.n	8000864 <main+0x7c>
			  }

			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e011      	b.n	80008b4 <main+0xcc>
			 				  sdram_array[counter] = 0xDEADBEEF;
 8000890:	4a2e      	ldr	r2, [pc, #184]	; (800094c <main+0x164>)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	492e      	ldr	r1, [pc, #184]	; (8000950 <main+0x168>)
 8000896:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 				  if(counter+1 == ARRAY_SIZE){
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	2b13      	cmp	r3, #19
 800089e:	d106      	bne.n	80008ae <main+0xc6>
			 					 sdram_array[counter] = j<<16 | j>>16;
 80008a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a2:	ea4f 4233 	mov.w	r2, r3, ror #16
 80008a6:	4929      	ldr	r1, [pc, #164]	; (800094c <main+0x164>)
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	3301      	adds	r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	2b13      	cmp	r3, #19
 80008b8:	d9ea      	bls.n	8000890 <main+0xa8>

			 				  }
			 			  }

			  sdram_byte = 0xFE;
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <main+0x16c>)
 80008bc:	22fe      	movs	r2, #254	; 0xfe
 80008be:	801a      	strh	r2, [r3, #0]
			  j=0x11111100;
 80008c0:	4b25      	ldr	r3, [pc, #148]	; (8000958 <main+0x170>)
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
			  sdram_array[0] = j;
 80008c4:	4a21      	ldr	r2, [pc, #132]	; (800094c <main+0x164>)
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	6013      	str	r3, [r2, #0]

			  j=0x22222200;
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <main+0x174>)
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
			  sdram_array[1] = j;
 80008ce:	4a1f      	ldr	r2, [pc, #124]	; (800094c <main+0x164>)
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	6053      	str	r3, [r2, #4]

			  j=0x33333300;
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <main+0x178>)
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
			  sdram_array[2] = j;
 80008d8:	4a1c      	ldr	r2, [pc, #112]	; (800094c <main+0x164>)
 80008da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008dc:	6093      	str	r3, [r2, #8]
//			  				  if(*(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) != j){
//			  					  errorCounter++;
//			  				  }


			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	e00c      	b.n	80008fe <main+0x116>
				  if( sdram_array[counter] != j){
 80008e4:	4a19      	ldr	r2, [pc, #100]	; (800094c <main+0x164>)
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d002      	beq.n	80008f8 <main+0x110>
					  errorCounter++;
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	3301      	adds	r3, #1
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	3301      	adds	r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	2b13      	cmp	r3, #19
 8000902:	d9ef      	bls.n	80008e4 <main+0xfc>
				  }
			  }
			  fmctestStop = (HAL_GetTick()-fmctestStart);
 8000904:	f000 fc80 	bl	8001208 <HAL_GetTick>
 8000908:	4602      	mov	r2, r0
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	607b      	str	r3, [r7, #4]
		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000912:	3301      	adds	r3, #1
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	4a12      	ldr	r2, [pc, #72]	; (8000964 <main+0x17c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d983      	bls.n	8000826 <main+0x3e>
	  for(uint32_t i = 0; i<10000;i++){
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	3301      	adds	r3, #1
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
 8000924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000926:	f242 720f 	movw	r2, #9999	; 0x270f
 800092a:	4293      	cmp	r3, r2
 800092c:	f67f af77 	bls.w	800081e <main+0x36>
		  }

	  }

	  if(errorCounter){
 8000930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000932:	2b00      	cmp	r3, #0
 8000934:	d000      	beq.n	8000938 <main+0x150>
		  while(1){
 8000936:	e7fe      	b.n	8000936 <main+0x14e>

		  }
	  }

	  uint8_t var = *(__IO uint8_t*)(SDRAM_ADDRESS_START);
 8000938:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	72fb      	strb	r3, [r7, #11]
	  HAL_Delay(50);
 8000940:	2032      	movs	r0, #50	; 0x32
 8000942:	f000 fc6d 	bl	8001220 <HAL_Delay>
  {
 8000946:	e762      	b.n	800080e <main+0x26>
 8000948:	c0000006 	.word	0xc0000006
 800094c:	c0000000 	.word	0xc0000000
 8000950:	deadbeef 	.word	0xdeadbeef
 8000954:	c0000050 	.word	0xc0000050
 8000958:	11111100 	.word	0x11111100
 800095c:	22222200 	.word	0x22222200
 8000960:	33333300 	.word	0x33333300
 8000964:	000100c7 	.word	0x000100c7

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09c      	sub	sp, #112	; 0x70
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	224c      	movs	r2, #76	; 0x4c
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f006 fe0c 	bl	8007594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2220      	movs	r2, #32
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f006 fe06 	bl	8007594 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000988:	2002      	movs	r0, #2
 800098a:	f002 fbfd 	bl	8003188 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <SystemClock_Config+0xd8>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	4a2a      	ldr	r2, [pc, #168]	; (8000a40 <SystemClock_Config+0xd8>)
 8000998:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800099c:	6193      	str	r3, [r2, #24]
 800099e:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <SystemClock_Config+0xd8>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009aa:	bf00      	nop
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <SystemClock_Config+0xd8>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009b8:	d1f8      	bne.n	80009ac <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ba:	2301      	movs	r3, #1
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	2302      	movs	r3, #2
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80009d0:	232c      	movs	r3, #44	; 0x2c
 80009d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009dc:	2302      	movs	r3, #2
 80009de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009e0:	230c      	movs	r3, #12
 80009e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 fc03 	bl	80031fc <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009fc:	f000 f855 	bl	8000aaa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	233f      	movs	r3, #63	; 0x3f
 8000a02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2303      	movs	r3, #3
 8000a06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a10:	2340      	movs	r3, #64	; 0x40
 8000a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a14:	2340      	movs	r3, #64	; 0x40
 8000a16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a1e:	2340      	movs	r3, #64	; 0x40
 8000a20:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2103      	movs	r1, #3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 ffc2 	bl	80039b0 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a32:	f000 f83a 	bl	8000aaa <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	3770      	adds	r7, #112	; 0x70
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	58024800 	.word	0x58024800

08000a44 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0ae      	sub	sp, #184	; 0xb8
 8000a48:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	22b8      	movs	r2, #184	; 0xb8
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f006 fd9f 	bl	8007594 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 8000a56:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8000a5a:	f04f 0300 	mov.w	r3, #0
 8000a5e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 8000a66:	230f      	movs	r3, #15
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000a76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 8000a80:	f640 3386 	movw	r3, #2950	; 0xb86
 8000a84:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8000a86:	2302      	movs	r3, #2
 8000a88:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a90:	463b      	mov	r3, r7
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 fb02 	bl	800409c <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8000a9e:	f000 f804 	bl	8000aaa <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	37b8      	adds	r7, #184	; 0xb8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aae:	b672      	cpsid	i
}
 8000ab0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <Error_Handler+0x8>

08000ab4 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <MX_SAI1_Init+0xb0>)
 8000aba:	4a2b      	ldr	r2, [pc, #172]	; (8000b68 <MX_SAI1_Init+0xb4>)
 8000abc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <MX_SAI1_Init+0xb0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <MX_SAI1_Init+0xb0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000aca:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <MX_SAI1_Init+0xb0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ad0:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <MX_SAI1_Init+0xb0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ad6:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <MX_SAI1_Init+0xb0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000adc:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <MX_SAI1_Init+0xb0>)
 8000ade:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ae2:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <MX_SAI1_Init+0xb0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000aea:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <MX_SAI1_Init+0xb0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <MX_SAI1_Init+0xb0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_SAI1_Init+0xb0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8000afc:	2308      	movs	r3, #8
 8000afe:	2202      	movs	r2, #2
 8000b00:	2100      	movs	r1, #0
 8000b02:	4818      	ldr	r0, [pc, #96]	; (8000b64 <MX_SAI1_Init+0xb0>)
 8000b04:	f005 feb0 	bl	8006868 <HAL_SAI_InitProtocol>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000b0e:	f7ff ffcc 	bl	8000aaa <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_SAI1_Init+0xb8>)
 8000b14:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <MX_SAI1_Init+0xbc>)
 8000b16:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_SAI1_Init+0xb8>)
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_SAI1_Init+0xb8>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_SAI1_Init+0xb8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_SAI1_Init+0xb8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_SAI1_Init+0xb8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_SAI1_Init+0xb8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_SAI1_Init+0xb8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_SAI1_Init+0xb8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8000b48:	2308      	movs	r3, #8
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <MX_SAI1_Init+0xb8>)
 8000b50:	f005 fe8a 	bl	8006868 <HAL_SAI_InitProtocol>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000b5a:	f7ff ffa6 	bl	8000aaa <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	24000064 	.word	0x24000064
 8000b68:	40015804 	.word	0x40015804
 8000b6c:	240000fc 	.word	0x240000fc
 8000b70:	40015824 	.word	0x40015824

08000b74 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a66      	ldr	r2, [pc, #408]	; (8000d1c <HAL_SAI_MspInit+0x1a8>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d160      	bne.n	8000c48 <HAL_SAI_MspInit+0xd4>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8000b86:	4b66      	ldr	r3, [pc, #408]	; (8000d20 <HAL_SAI_MspInit+0x1ac>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d10e      	bne.n	8000bac <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000b8e:	4b65      	ldr	r3, [pc, #404]	; (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b94:	4a63      	ldr	r2, [pc, #396]	; (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000b96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000b9e:	4b61      	ldr	r3, [pc, #388]	; (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8000bac:	4b5c      	ldr	r3, [pc, #368]	; (8000d20 <HAL_SAI_MspInit+0x1ac>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	4a5b      	ldr	r2, [pc, #364]	; (8000d20 <HAL_SAI_MspInit+0x1ac>)
 8000bb4:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000bb6:	2370      	movs	r3, #112	; 0x70
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000bc6:	2306      	movs	r3, #6
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4855      	ldr	r0, [pc, #340]	; (8000d28 <HAL_SAI_MspInit+0x1b4>)
 8000bd2:	f002 f917 	bl	8002e04 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8000bd6:	4b55      	ldr	r3, [pc, #340]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000bd8:	4a55      	ldr	r2, [pc, #340]	; (8000d30 <HAL_SAI_MspInit+0x1bc>)
 8000bda:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8000bdc:	4b53      	ldr	r3, [pc, #332]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000bde:	2257      	movs	r2, #87	; 0x57
 8000be0:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000be2:	4b52      	ldr	r3, [pc, #328]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000be4:	2240      	movs	r2, #64	; 0x40
 8000be6:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be8:	4b50      	ldr	r3, [pc, #320]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8000bee:	4b4f      	ldr	r3, [pc, #316]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf4:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bf6:	4b4d      	ldr	r3, [pc, #308]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000bf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bfc:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bfe:	4b4b      	ldr	r3, [pc, #300]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000c00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c04:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000c06:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c0c:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c0e:	4b47      	ldr	r3, [pc, #284]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000c10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c14:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c16:	4b45      	ldr	r3, [pc, #276]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000c1c:	4843      	ldr	r0, [pc, #268]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000c1e:	f000 fc33 	bl	8001488 <HAL_DMA_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000c28:	f7ff ff3f 	bl	8000aaa <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a3f      	ldr	r2, [pc, #252]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000c34:	4a3d      	ldr	r2, [pc, #244]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a3b      	ldr	r2, [pc, #236]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000c42:	4a3a      	ldr	r2, [pc, #232]	; (8000d2c <HAL_SAI_MspInit+0x1b8>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a39      	ldr	r2, [pc, #228]	; (8000d34 <HAL_SAI_MspInit+0x1c0>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d160      	bne.n	8000d14 <HAL_SAI_MspInit+0x1a0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8000c52:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <HAL_SAI_MspInit+0x1ac>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10e      	bne.n	8000c78 <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000c5a:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c60:	4a30      	ldr	r2, [pc, #192]	; (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000c62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <HAL_SAI_MspInit+0x1b0>)
 8000c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8000c78:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <HAL_SAI_MspInit+0x1ac>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <HAL_SAI_MspInit+0x1ac>)
 8000c80:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c82:	2308      	movs	r3, #8
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000c92:	2306      	movs	r3, #6
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4822      	ldr	r0, [pc, #136]	; (8000d28 <HAL_SAI_MspInit+0x1b4>)
 8000c9e:	f002 f8b1 	bl	8002e04 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000ca4:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <HAL_SAI_MspInit+0x1c8>)
 8000ca6:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000caa:	2258      	movs	r2, #88	; 0x58
 8000cac:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cae:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000cbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc0:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000cc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cc8:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000ccc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cd0:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd8:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000cdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ce0:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8000ce8:	4813      	ldr	r0, [pc, #76]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000cea:	f000 fbcd 	bl	8001488 <HAL_DMA_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 8000cf4:	f7ff fed9 	bl	8000aaa <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_SAI_MspInit+0x1c4>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	; 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40015804 	.word	0x40015804
 8000d20:	24000284 	.word	0x24000284
 8000d24:	58024400 	.word	0x58024400
 8000d28:	58021000 	.word	0x58021000
 8000d2c:	24000194 	.word	0x24000194
 8000d30:	40020010 	.word	0x40020010
 8000d34:	40015824 	.word	0x40015824
 8000d38:	2400020c 	.word	0x2400020c
 8000d3c:	40020410 	.word	0x40020410

08000d40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d46:	4a28      	ldr	r2, [pc, #160]	; (8000de8 <MX_SPI1_Init+0xa8>)
 8000d48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d52:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d98:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_SPI1_Init+0xa4>)
 8000dd2:	f006 f99d 	bl	8007110 <HAL_SPI_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000ddc:	f7ff fe65 	bl	8000aaa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	24000288 	.word	0x24000288
 8000de8:	40013000 	.word	0x40013000

08000dec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	; 0x30
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a3a      	ldr	r2, [pc, #232]	; (8000ef4 <HAL_SPI_MspInit+0x108>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d16d      	bne.n	8000eea <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_SPI_MspInit+0x10c>)
 8000e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e14:	4a38      	ldr	r2, [pc, #224]	; (8000ef8 <HAL_SPI_MspInit+0x10c>)
 8000e16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e1e:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <HAL_SPI_MspInit+0x10c>)
 8000e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b32      	ldr	r3, [pc, #200]	; (8000ef8 <HAL_SPI_MspInit+0x10c>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	4a31      	ldr	r2, [pc, #196]	; (8000ef8 <HAL_SPI_MspInit+0x10c>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <HAL_SPI_MspInit+0x10c>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <HAL_SPI_MspInit+0x10c>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	4a29      	ldr	r2, [pc, #164]	; (8000ef8 <HAL_SPI_MspInit+0x10c>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5a:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <HAL_SPI_MspInit+0x10c>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e68:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <HAL_SPI_MspInit+0x10c>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <HAL_SPI_MspInit+0x10c>)
 8000e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <HAL_SPI_MspInit+0x10c>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 8000e86:	f248 0340 	movw	r3, #32832	; 0x8040
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e98:	2305      	movs	r3, #5
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4816      	ldr	r0, [pc, #88]	; (8000efc <HAL_SPI_MspInit+0x110>)
 8000ea4:	f001 ffae 	bl	8002e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eb8:	2305      	movs	r3, #5
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480f      	ldr	r0, [pc, #60]	; (8000f00 <HAL_SPI_MspInit+0x114>)
 8000ec4:	f001 ff9e 	bl	8002e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eda:	2305      	movs	r3, #5
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <HAL_SPI_MspInit+0x118>)
 8000ee6:	f001 ff8d 	bl	8002e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	3730      	adds	r7, #48	; 0x30
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40013000 	.word	0x40013000
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58020000 	.word	0x58020000
 8000f00:	58020c00 	.word	0x58020c00
 8000f04:	58021800 	.word	0x58021800

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_MspInit+0x30>)
 8000f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <HAL_MspInit+0x30>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_MspInit+0x30>)
 8000f20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	58024400 	.word	0x58024400

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f88:	f000 f92a 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <DMA1_Stream0_IRQHandler+0x10>)
 8000f96:	f000 fdcf 	bl	8001b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	24000194 	.word	0x24000194

08000fa4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA2_Stream0_IRQHandler+0x10>)
 8000faa:	f000 fdc5 	bl	8001b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2400020c 	.word	0x2400020c

08000fb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b32      	ldr	r3, [pc, #200]	; (8001088 <SystemInit+0xd0>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc2:	4a31      	ldr	r2, [pc, #196]	; (8001088 <SystemInit+0xd0>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <SystemInit+0xd4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 030f 	and.w	r3, r3, #15
 8000fd4:	2b06      	cmp	r3, #6
 8000fd6:	d807      	bhi.n	8000fe8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	; (800108c <SystemInit+0xd4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f023 030f 	bic.w	r3, r3, #15
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	; (800108c <SystemInit+0xd4>)
 8000fe2:	f043 0307 	orr.w	r3, r3, #7
 8000fe6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <SystemInit+0xd8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a28      	ldr	r2, [pc, #160]	; (8001090 <SystemInit+0xd8>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <SystemInit+0xd8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <SystemInit+0xd8>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4924      	ldr	r1, [pc, #144]	; (8001090 <SystemInit+0xd8>)
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <SystemInit+0xdc>)
 8001002:	4013      	ands	r3, r2
 8001004:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <SystemInit+0xd4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	2b00      	cmp	r3, #0
 8001010:	d007      	beq.n	8001022 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <SystemInit+0xd4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f023 030f 	bic.w	r3, r3, #15
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <SystemInit+0xd4>)
 800101c:	f043 0307 	orr.w	r3, r3, #7
 8001020:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <SystemInit+0xd8>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <SystemInit+0xd8>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <SystemInit+0xd8>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <SystemInit+0xd8>)
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <SystemInit+0xe0>)
 8001038:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <SystemInit+0xd8>)
 800103c:	4a17      	ldr	r2, [pc, #92]	; (800109c <SystemInit+0xe4>)
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <SystemInit+0xd8>)
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <SystemInit+0xe8>)
 8001044:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <SystemInit+0xd8>)
 8001048:	2200      	movs	r2, #0
 800104a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <SystemInit+0xd8>)
 800104e:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <SystemInit+0xe8>)
 8001050:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <SystemInit+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <SystemInit+0xd8>)
 800105a:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <SystemInit+0xe8>)
 800105c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <SystemInit+0xd8>)
 8001060:	2200      	movs	r2, #0
 8001062:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <SystemInit+0xd8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a09      	ldr	r2, [pc, #36]	; (8001090 <SystemInit+0xd8>)
 800106a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <SystemInit+0xd8>)
 8001072:	2200      	movs	r2, #0
 8001074:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <SystemInit+0xec>)
 8001078:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800107c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	52002000 	.word	0x52002000
 8001090:	58024400 	.word	0x58024400
 8001094:	eaf6ed7f 	.word	0xeaf6ed7f
 8001098:	02020200 	.word	0x02020200
 800109c:	01ff0000 	.word	0x01ff0000
 80010a0:	01010280 	.word	0x01010280
 80010a4:	52004000 	.word	0x52004000

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010ac:	f7ff ff84 	bl	8000fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b2:	490d      	ldr	r1, [pc, #52]	; (80010e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c8:	4c0a      	ldr	r4, [pc, #40]	; (80010f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d6:	f006 fa65 	bl	80075a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff fb85 	bl	80007e8 <main>
  bx  lr
 80010de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80010e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010e8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010ec:	08007624 	.word	0x08007624
  ldr r2, =_sbss
 80010f0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80010f4:	24000314 	.word	0x24000314

080010f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC3_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001102:	2003      	movs	r0, #3
 8001104:	f000 f980 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001108:	f002 fe08 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 800110c:	4602      	mov	r2, r0
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_Init+0x68>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	0a1b      	lsrs	r3, r3, #8
 8001114:	f003 030f 	and.w	r3, r3, #15
 8001118:	4913      	ldr	r1, [pc, #76]	; (8001168 <HAL_Init+0x6c>)
 800111a:	5ccb      	ldrb	r3, [r1, r3]
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	fa22 f303 	lsr.w	r3, r2, r3
 8001124:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_Init+0x68>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_Init+0x6c>)
 8001130:	5cd3      	ldrb	r3, [r2, r3]
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	fa22 f303 	lsr.w	r3, r2, r3
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <HAL_Init+0x70>)
 800113e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001140:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <HAL_Init+0x74>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001146:	200f      	movs	r0, #15
 8001148:	f000 f814 	bl	8001174 <HAL_InitTick>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e002      	b.n	800115c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001156:	f7ff fed7 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	58024400 	.word	0x58024400
 8001168:	08007604 	.word	0x08007604
 800116c:	24000004 	.word	0x24000004
 8001170:	24000000 	.word	0x24000000

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_InitTick+0x60>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e021      	b.n	80011cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_InitTick+0x64>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_InitTick+0x60>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f965 	bl	800146e <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 f92f 	bl	800141e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x68>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	2400000c 	.word	0x2400000c
 80011d8:	24000000 	.word	0x24000000
 80011dc:	24000008 	.word	0x24000008

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	2400000c 	.word	0x2400000c
 8001204:	24000310 	.word	0x24000310

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	24000310 	.word	0x24000310

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2400000c 	.word	0x2400000c

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <__NVIC_SetPriorityGrouping+0x40>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	4313      	orrs	r3, r2
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00
 80012ac:	05fa0000 	.word	0x05fa0000

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff29 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff40 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff90 	bl	800135c <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5f 	bl	8001308 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff33 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa4 	bl	80013c4 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff feba 	bl	8001208 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e312      	b.n	8001ac6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a66      	ldr	r2, [pc, #408]	; (8001640 <HAL_DMA_Init+0x1b8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d04a      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a65      	ldr	r2, [pc, #404]	; (8001644 <HAL_DMA_Init+0x1bc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d045      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a63      	ldr	r2, [pc, #396]	; (8001648 <HAL_DMA_Init+0x1c0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d040      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a62      	ldr	r2, [pc, #392]	; (800164c <HAL_DMA_Init+0x1c4>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d03b      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a60      	ldr	r2, [pc, #384]	; (8001650 <HAL_DMA_Init+0x1c8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d036      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a5f      	ldr	r2, [pc, #380]	; (8001654 <HAL_DMA_Init+0x1cc>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d031      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a5d      	ldr	r2, [pc, #372]	; (8001658 <HAL_DMA_Init+0x1d0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d02c      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a5c      	ldr	r2, [pc, #368]	; (800165c <HAL_DMA_Init+0x1d4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d027      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a5a      	ldr	r2, [pc, #360]	; (8001660 <HAL_DMA_Init+0x1d8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d022      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a59      	ldr	r2, [pc, #356]	; (8001664 <HAL_DMA_Init+0x1dc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d01d      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a57      	ldr	r2, [pc, #348]	; (8001668 <HAL_DMA_Init+0x1e0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d018      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a56      	ldr	r2, [pc, #344]	; (800166c <HAL_DMA_Init+0x1e4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d013      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a54      	ldr	r2, [pc, #336]	; (8001670 <HAL_DMA_Init+0x1e8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00e      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a53      	ldr	r2, [pc, #332]	; (8001674 <HAL_DMA_Init+0x1ec>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d009      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a51      	ldr	r2, [pc, #324]	; (8001678 <HAL_DMA_Init+0x1f0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d004      	beq.n	8001540 <HAL_DMA_Init+0xb8>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a50      	ldr	r2, [pc, #320]	; (800167c <HAL_DMA_Init+0x1f4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d101      	bne.n	8001544 <HAL_DMA_Init+0xbc>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <HAL_DMA_Init+0xbe>
 8001544:	2300      	movs	r3, #0
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 813c 	beq.w	80017c4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a37      	ldr	r2, [pc, #220]	; (8001640 <HAL_DMA_Init+0x1b8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d04a      	beq.n	80015fc <HAL_DMA_Init+0x174>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a36      	ldr	r2, [pc, #216]	; (8001644 <HAL_DMA_Init+0x1bc>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d045      	beq.n	80015fc <HAL_DMA_Init+0x174>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a34      	ldr	r2, [pc, #208]	; (8001648 <HAL_DMA_Init+0x1c0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d040      	beq.n	80015fc <HAL_DMA_Init+0x174>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a33      	ldr	r2, [pc, #204]	; (800164c <HAL_DMA_Init+0x1c4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d03b      	beq.n	80015fc <HAL_DMA_Init+0x174>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a31      	ldr	r2, [pc, #196]	; (8001650 <HAL_DMA_Init+0x1c8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d036      	beq.n	80015fc <HAL_DMA_Init+0x174>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a30      	ldr	r2, [pc, #192]	; (8001654 <HAL_DMA_Init+0x1cc>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d031      	beq.n	80015fc <HAL_DMA_Init+0x174>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a2e      	ldr	r2, [pc, #184]	; (8001658 <HAL_DMA_Init+0x1d0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d02c      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a2d      	ldr	r2, [pc, #180]	; (800165c <HAL_DMA_Init+0x1d4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d027      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a2b      	ldr	r2, [pc, #172]	; (8001660 <HAL_DMA_Init+0x1d8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d022      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a2a      	ldr	r2, [pc, #168]	; (8001664 <HAL_DMA_Init+0x1dc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d01d      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a28      	ldr	r2, [pc, #160]	; (8001668 <HAL_DMA_Init+0x1e0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d018      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_DMA_Init+0x1e4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d013      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a25      	ldr	r2, [pc, #148]	; (8001670 <HAL_DMA_Init+0x1e8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00e      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a24      	ldr	r2, [pc, #144]	; (8001674 <HAL_DMA_Init+0x1ec>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d009      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a22      	ldr	r2, [pc, #136]	; (8001678 <HAL_DMA_Init+0x1f0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d004      	beq.n	80015fc <HAL_DMA_Init+0x174>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a21      	ldr	r2, [pc, #132]	; (800167c <HAL_DMA_Init+0x1f4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d108      	bne.n	800160e <HAL_DMA_Init+0x186>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e007      	b.n	800161e <HAL_DMA_Init+0x196>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800161e:	e02f      	b.n	8001680 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001620:	f7ff fdf2 	bl	8001208 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b05      	cmp	r3, #5
 800162c:	d928      	bls.n	8001680 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2220      	movs	r2, #32
 8001632:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2203      	movs	r2, #3
 8001638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e242      	b.n	8001ac6 <HAL_DMA_Init+0x63e>
 8001640:	40020010 	.word	0x40020010
 8001644:	40020028 	.word	0x40020028
 8001648:	40020040 	.word	0x40020040
 800164c:	40020058 	.word	0x40020058
 8001650:	40020070 	.word	0x40020070
 8001654:	40020088 	.word	0x40020088
 8001658:	400200a0 	.word	0x400200a0
 800165c:	400200b8 	.word	0x400200b8
 8001660:	40020410 	.word	0x40020410
 8001664:	40020428 	.word	0x40020428
 8001668:	40020440 	.word	0x40020440
 800166c:	40020458 	.word	0x40020458
 8001670:	40020470 	.word	0x40020470
 8001674:	40020488 	.word	0x40020488
 8001678:	400204a0 	.word	0x400204a0
 800167c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1c8      	bne.n	8001620 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4b83      	ldr	r3, [pc, #524]	; (80018a8 <HAL_DMA_Init+0x420>)
 800169a:	4013      	ands	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80016a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d107      	bne.n	80016e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	4313      	orrs	r3, r2
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b28      	cmp	r3, #40	; 0x28
 80016ea:	d903      	bls.n	80016f4 <HAL_DMA_Init+0x26c>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b2e      	cmp	r3, #46	; 0x2e
 80016f2:	d91f      	bls.n	8001734 <HAL_DMA_Init+0x2ac>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b3e      	cmp	r3, #62	; 0x3e
 80016fa:	d903      	bls.n	8001704 <HAL_DMA_Init+0x27c>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b42      	cmp	r3, #66	; 0x42
 8001702:	d917      	bls.n	8001734 <HAL_DMA_Init+0x2ac>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b46      	cmp	r3, #70	; 0x46
 800170a:	d903      	bls.n	8001714 <HAL_DMA_Init+0x28c>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b48      	cmp	r3, #72	; 0x48
 8001712:	d90f      	bls.n	8001734 <HAL_DMA_Init+0x2ac>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b4e      	cmp	r3, #78	; 0x4e
 800171a:	d903      	bls.n	8001724 <HAL_DMA_Init+0x29c>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b52      	cmp	r3, #82	; 0x52
 8001722:	d907      	bls.n	8001734 <HAL_DMA_Init+0x2ac>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b73      	cmp	r3, #115	; 0x73
 800172a:	d905      	bls.n	8001738 <HAL_DMA_Init+0x2b0>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b77      	cmp	r3, #119	; 0x77
 8001732:	d801      	bhi.n	8001738 <HAL_DMA_Init+0x2b0>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_DMA_Init+0x2b2>
 8001738:	2300      	movs	r3, #0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001744:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f023 0307 	bic.w	r3, r3, #7
 800175c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4313      	orrs	r3, r2
 8001766:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	2b04      	cmp	r3, #4
 800176e:	d117      	bne.n	80017a0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	4313      	orrs	r3, r2
 8001778:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00e      	beq.n	80017a0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f001 f9b4 	bl	8002af0 <DMA_CheckFifoParam>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d008      	beq.n	80017a0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e192      	b.n	8001ac6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f001 f8ef 	bl	800298c <DMA_CalcBaseAndBitshift>
 80017ae:	4603      	mov	r3, r0
 80017b0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	223f      	movs	r2, #63	; 0x3f
 80017bc:	409a      	lsls	r2, r3
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	e0c8      	b.n	8001956 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a38      	ldr	r2, [pc, #224]	; (80018ac <HAL_DMA_Init+0x424>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d022      	beq.n	8001814 <HAL_DMA_Init+0x38c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a37      	ldr	r2, [pc, #220]	; (80018b0 <HAL_DMA_Init+0x428>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d01d      	beq.n	8001814 <HAL_DMA_Init+0x38c>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a35      	ldr	r2, [pc, #212]	; (80018b4 <HAL_DMA_Init+0x42c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d018      	beq.n	8001814 <HAL_DMA_Init+0x38c>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a34      	ldr	r2, [pc, #208]	; (80018b8 <HAL_DMA_Init+0x430>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d013      	beq.n	8001814 <HAL_DMA_Init+0x38c>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a32      	ldr	r2, [pc, #200]	; (80018bc <HAL_DMA_Init+0x434>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00e      	beq.n	8001814 <HAL_DMA_Init+0x38c>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a31      	ldr	r2, [pc, #196]	; (80018c0 <HAL_DMA_Init+0x438>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d009      	beq.n	8001814 <HAL_DMA_Init+0x38c>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a2f      	ldr	r2, [pc, #188]	; (80018c4 <HAL_DMA_Init+0x43c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d004      	beq.n	8001814 <HAL_DMA_Init+0x38c>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a2e      	ldr	r2, [pc, #184]	; (80018c8 <HAL_DMA_Init+0x440>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d101      	bne.n	8001818 <HAL_DMA_Init+0x390>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_DMA_Init+0x392>
 8001818:	2300      	movs	r3, #0
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8092 	beq.w	8001944 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a21      	ldr	r2, [pc, #132]	; (80018ac <HAL_DMA_Init+0x424>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d021      	beq.n	800186e <HAL_DMA_Init+0x3e6>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <HAL_DMA_Init+0x428>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d01c      	beq.n	800186e <HAL_DMA_Init+0x3e6>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <HAL_DMA_Init+0x42c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d017      	beq.n	800186e <HAL_DMA_Init+0x3e6>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <HAL_DMA_Init+0x430>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d012      	beq.n	800186e <HAL_DMA_Init+0x3e6>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <HAL_DMA_Init+0x434>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00d      	beq.n	800186e <HAL_DMA_Init+0x3e6>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1a      	ldr	r2, [pc, #104]	; (80018c0 <HAL_DMA_Init+0x438>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d008      	beq.n	800186e <HAL_DMA_Init+0x3e6>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <HAL_DMA_Init+0x43c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d003      	beq.n	800186e <HAL_DMA_Init+0x3e6>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_DMA_Init+0x440>)
 800186c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2202      	movs	r2, #2
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_DMA_Init+0x444>)
 800188a:	4013      	ands	r3, r2
 800188c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b40      	cmp	r3, #64	; 0x40
 8001894:	d01c      	beq.n	80018d0 <HAL_DMA_Init+0x448>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b80      	cmp	r3, #128	; 0x80
 800189c:	d102      	bne.n	80018a4 <HAL_DMA_Init+0x41c>
 800189e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018a2:	e016      	b.n	80018d2 <HAL_DMA_Init+0x44a>
 80018a4:	2300      	movs	r3, #0
 80018a6:	e014      	b.n	80018d2 <HAL_DMA_Init+0x44a>
 80018a8:	fe10803f 	.word	0xfe10803f
 80018ac:	58025408 	.word	0x58025408
 80018b0:	5802541c 	.word	0x5802541c
 80018b4:	58025430 	.word	0x58025430
 80018b8:	58025444 	.word	0x58025444
 80018bc:	58025458 	.word	0x58025458
 80018c0:	5802546c 	.word	0x5802546c
 80018c4:	58025480 	.word	0x58025480
 80018c8:	58025494 	.word	0x58025494
 80018cc:	fffe000f 	.word	0xfffe000f
 80018d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68d2      	ldr	r2, [r2, #12]
 80018d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80018e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80018e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80018f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80018f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001900:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b6e      	ldr	r3, [pc, #440]	; (8001ad0 <HAL_DMA_Init+0x648>)
 8001918:	4413      	add	r3, r2
 800191a:	4a6e      	ldr	r2, [pc, #440]	; (8001ad4 <HAL_DMA_Init+0x64c>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	009a      	lsls	r2, r3, #2
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f001 f82f 	bl	800298c <DMA_CalcBaseAndBitshift>
 800192e:	4603      	mov	r3, r0
 8001930:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	2201      	movs	r2, #1
 800193c:	409a      	lsls	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	e008      	b.n	8001956 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2240      	movs	r2, #64	; 0x40
 8001948:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2203      	movs	r2, #3
 800194e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0b7      	b.n	8001ac6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a5f      	ldr	r2, [pc, #380]	; (8001ad8 <HAL_DMA_Init+0x650>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d072      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a5d      	ldr	r2, [pc, #372]	; (8001adc <HAL_DMA_Init+0x654>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d06d      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a5c      	ldr	r2, [pc, #368]	; (8001ae0 <HAL_DMA_Init+0x658>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d068      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a5a      	ldr	r2, [pc, #360]	; (8001ae4 <HAL_DMA_Init+0x65c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d063      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a59      	ldr	r2, [pc, #356]	; (8001ae8 <HAL_DMA_Init+0x660>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d05e      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a57      	ldr	r2, [pc, #348]	; (8001aec <HAL_DMA_Init+0x664>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d059      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a56      	ldr	r2, [pc, #344]	; (8001af0 <HAL_DMA_Init+0x668>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d054      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a54      	ldr	r2, [pc, #336]	; (8001af4 <HAL_DMA_Init+0x66c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d04f      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a53      	ldr	r2, [pc, #332]	; (8001af8 <HAL_DMA_Init+0x670>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d04a      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a51      	ldr	r2, [pc, #324]	; (8001afc <HAL_DMA_Init+0x674>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d045      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a50      	ldr	r2, [pc, #320]	; (8001b00 <HAL_DMA_Init+0x678>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d040      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a4e      	ldr	r2, [pc, #312]	; (8001b04 <HAL_DMA_Init+0x67c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d03b      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a4d      	ldr	r2, [pc, #308]	; (8001b08 <HAL_DMA_Init+0x680>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d036      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a4b      	ldr	r2, [pc, #300]	; (8001b0c <HAL_DMA_Init+0x684>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d031      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a4a      	ldr	r2, [pc, #296]	; (8001b10 <HAL_DMA_Init+0x688>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d02c      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a48      	ldr	r2, [pc, #288]	; (8001b14 <HAL_DMA_Init+0x68c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d027      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a47      	ldr	r2, [pc, #284]	; (8001b18 <HAL_DMA_Init+0x690>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d022      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a45      	ldr	r2, [pc, #276]	; (8001b1c <HAL_DMA_Init+0x694>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d01d      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a44      	ldr	r2, [pc, #272]	; (8001b20 <HAL_DMA_Init+0x698>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d018      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a42      	ldr	r2, [pc, #264]	; (8001b24 <HAL_DMA_Init+0x69c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a41      	ldr	r2, [pc, #260]	; (8001b28 <HAL_DMA_Init+0x6a0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d00e      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a3f      	ldr	r2, [pc, #252]	; (8001b2c <HAL_DMA_Init+0x6a4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d009      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a3e      	ldr	r2, [pc, #248]	; (8001b30 <HAL_DMA_Init+0x6a8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d004      	beq.n	8001a46 <HAL_DMA_Init+0x5be>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a3c      	ldr	r2, [pc, #240]	; (8001b34 <HAL_DMA_Init+0x6ac>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_DMA_Init+0x5c2>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_DMA_Init+0x5c4>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d032      	beq.n	8001ab6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f001 f8c9 	bl	8002be8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b80      	cmp	r3, #128	; 0x80
 8001a5c:	d102      	bne.n	8001a64 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a78:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d010      	beq.n	8001aa4 <HAL_DMA_Init+0x61c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d80c      	bhi.n	8001aa4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f001 f946 	bl	8002d1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	e008      	b.n	8001ab6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	a7fdabf8 	.word	0xa7fdabf8
 8001ad4:	cccccccd 	.word	0xcccccccd
 8001ad8:	40020010 	.word	0x40020010
 8001adc:	40020028 	.word	0x40020028
 8001ae0:	40020040 	.word	0x40020040
 8001ae4:	40020058 	.word	0x40020058
 8001ae8:	40020070 	.word	0x40020070
 8001aec:	40020088 	.word	0x40020088
 8001af0:	400200a0 	.word	0x400200a0
 8001af4:	400200b8 	.word	0x400200b8
 8001af8:	40020410 	.word	0x40020410
 8001afc:	40020428 	.word	0x40020428
 8001b00:	40020440 	.word	0x40020440
 8001b04:	40020458 	.word	0x40020458
 8001b08:	40020470 	.word	0x40020470
 8001b0c:	40020488 	.word	0x40020488
 8001b10:	400204a0 	.word	0x400204a0
 8001b14:	400204b8 	.word	0x400204b8
 8001b18:	58025408 	.word	0x58025408
 8001b1c:	5802541c 	.word	0x5802541c
 8001b20:	58025430 	.word	0x58025430
 8001b24:	58025444 	.word	0x58025444
 8001b28:	58025458 	.word	0x58025458
 8001b2c:	5802546c 	.word	0x5802546c
 8001b30:	58025480 	.word	0x58025480
 8001b34:	58025494 	.word	0x58025494

08001b38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b44:	4b67      	ldr	r3, [pc, #412]	; (8001ce4 <HAL_DMA_IRQHandler+0x1ac>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a67      	ldr	r2, [pc, #412]	; (8001ce8 <HAL_DMA_IRQHandler+0x1b0>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	0a9b      	lsrs	r3, r3, #10
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a5f      	ldr	r2, [pc, #380]	; (8001cec <HAL_DMA_IRQHandler+0x1b4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d04a      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a5d      	ldr	r2, [pc, #372]	; (8001cf0 <HAL_DMA_IRQHandler+0x1b8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d045      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a5c      	ldr	r2, [pc, #368]	; (8001cf4 <HAL_DMA_IRQHandler+0x1bc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d040      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a5a      	ldr	r2, [pc, #360]	; (8001cf8 <HAL_DMA_IRQHandler+0x1c0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d03b      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a59      	ldr	r2, [pc, #356]	; (8001cfc <HAL_DMA_IRQHandler+0x1c4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d036      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a57      	ldr	r2, [pc, #348]	; (8001d00 <HAL_DMA_IRQHandler+0x1c8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d031      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a56      	ldr	r2, [pc, #344]	; (8001d04 <HAL_DMA_IRQHandler+0x1cc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d02c      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a54      	ldr	r2, [pc, #336]	; (8001d08 <HAL_DMA_IRQHandler+0x1d0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d027      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a53      	ldr	r2, [pc, #332]	; (8001d0c <HAL_DMA_IRQHandler+0x1d4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d022      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a51      	ldr	r2, [pc, #324]	; (8001d10 <HAL_DMA_IRQHandler+0x1d8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d01d      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a50      	ldr	r2, [pc, #320]	; (8001d14 <HAL_DMA_IRQHandler+0x1dc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d018      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a4e      	ldr	r2, [pc, #312]	; (8001d18 <HAL_DMA_IRQHandler+0x1e0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a4d      	ldr	r2, [pc, #308]	; (8001d1c <HAL_DMA_IRQHandler+0x1e4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00e      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a4b      	ldr	r2, [pc, #300]	; (8001d20 <HAL_DMA_IRQHandler+0x1e8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d009      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a4a      	ldr	r2, [pc, #296]	; (8001d24 <HAL_DMA_IRQHandler+0x1ec>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d004      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xd2>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a48      	ldr	r2, [pc, #288]	; (8001d28 <HAL_DMA_IRQHandler+0x1f0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_DMA_IRQHandler+0xd6>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_DMA_IRQHandler+0xd8>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 842b 	beq.w	800246c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2208      	movs	r2, #8
 8001c20:	409a      	lsls	r2, r3
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 80a2 	beq.w	8001d70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a2e      	ldr	r2, [pc, #184]	; (8001cec <HAL_DMA_IRQHandler+0x1b4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d04a      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <HAL_DMA_IRQHandler+0x1b8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d045      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2b      	ldr	r2, [pc, #172]	; (8001cf4 <HAL_DMA_IRQHandler+0x1bc>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d040      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a2a      	ldr	r2, [pc, #168]	; (8001cf8 <HAL_DMA_IRQHandler+0x1c0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d03b      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a28      	ldr	r2, [pc, #160]	; (8001cfc <HAL_DMA_IRQHandler+0x1c4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d036      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a27      	ldr	r2, [pc, #156]	; (8001d00 <HAL_DMA_IRQHandler+0x1c8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d031      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a25      	ldr	r2, [pc, #148]	; (8001d04 <HAL_DMA_IRQHandler+0x1cc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d02c      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a24      	ldr	r2, [pc, #144]	; (8001d08 <HAL_DMA_IRQHandler+0x1d0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d027      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <HAL_DMA_IRQHandler+0x1d4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d022      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <HAL_DMA_IRQHandler+0x1d8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d01d      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_DMA_IRQHandler+0x1dc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d018      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_DMA_IRQHandler+0x1e0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d013      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_DMA_IRQHandler+0x1e4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00e      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_DMA_IRQHandler+0x1e8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d009      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_DMA_IRQHandler+0x1ec>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d004      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x194>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <HAL_DMA_IRQHandler+0x1f0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d12f      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x1f4>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	bf14      	ite	ne
 8001cda:	2301      	movne	r3, #1
 8001cdc:	2300      	moveq	r3, #0
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	e02e      	b.n	8001d40 <HAL_DMA_IRQHandler+0x208>
 8001ce2:	bf00      	nop
 8001ce4:	24000000 	.word	0x24000000
 8001ce8:	1b4e81b5 	.word	0x1b4e81b5
 8001cec:	40020010 	.word	0x40020010
 8001cf0:	40020028 	.word	0x40020028
 8001cf4:	40020040 	.word	0x40020040
 8001cf8:	40020058 	.word	0x40020058
 8001cfc:	40020070 	.word	0x40020070
 8001d00:	40020088 	.word	0x40020088
 8001d04:	400200a0 	.word	0x400200a0
 8001d08:	400200b8 	.word	0x400200b8
 8001d0c:	40020410 	.word	0x40020410
 8001d10:	40020428 	.word	0x40020428
 8001d14:	40020440 	.word	0x40020440
 8001d18:	40020458 	.word	0x40020458
 8001d1c:	40020470 	.word	0x40020470
 8001d20:	40020488 	.word	0x40020488
 8001d24:	400204a0 	.word	0x400204a0
 8001d28:	400204b8 	.word	0x400204b8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf14      	ite	ne
 8001d3a:	2301      	movne	r3, #1
 8001d3c:	2300      	moveq	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d015      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0204 	bic.w	r2, r2, #4
 8001d52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d68:	f043 0201 	orr.w	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d06e      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a69      	ldr	r2, [pc, #420]	; (8001f30 <HAL_DMA_IRQHandler+0x3f8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d04a      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a67      	ldr	r2, [pc, #412]	; (8001f34 <HAL_DMA_IRQHandler+0x3fc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d045      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a66      	ldr	r2, [pc, #408]	; (8001f38 <HAL_DMA_IRQHandler+0x400>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d040      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a64      	ldr	r2, [pc, #400]	; (8001f3c <HAL_DMA_IRQHandler+0x404>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d03b      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a63      	ldr	r2, [pc, #396]	; (8001f40 <HAL_DMA_IRQHandler+0x408>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d036      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a61      	ldr	r2, [pc, #388]	; (8001f44 <HAL_DMA_IRQHandler+0x40c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d031      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a60      	ldr	r2, [pc, #384]	; (8001f48 <HAL_DMA_IRQHandler+0x410>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d02c      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a5e      	ldr	r2, [pc, #376]	; (8001f4c <HAL_DMA_IRQHandler+0x414>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d027      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a5d      	ldr	r2, [pc, #372]	; (8001f50 <HAL_DMA_IRQHandler+0x418>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d022      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a5b      	ldr	r2, [pc, #364]	; (8001f54 <HAL_DMA_IRQHandler+0x41c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01d      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a5a      	ldr	r2, [pc, #360]	; (8001f58 <HAL_DMA_IRQHandler+0x420>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d018      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a58      	ldr	r2, [pc, #352]	; (8001f5c <HAL_DMA_IRQHandler+0x424>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a57      	ldr	r2, [pc, #348]	; (8001f60 <HAL_DMA_IRQHandler+0x428>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00e      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a55      	ldr	r2, [pc, #340]	; (8001f64 <HAL_DMA_IRQHandler+0x42c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d009      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a54      	ldr	r2, [pc, #336]	; (8001f68 <HAL_DMA_IRQHandler+0x430>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d004      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2ee>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <HAL_DMA_IRQHandler+0x434>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10a      	bne.n	8001e3c <HAL_DMA_IRQHandler+0x304>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e003      	b.n	8001e44 <HAL_DMA_IRQHandler+0x30c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2300      	movs	r3, #0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00d      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	2201      	movs	r2, #1
 8001e52:	409a      	lsls	r2, r3
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5c:	f043 0202 	orr.w	r2, r3, #2
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 808f 	beq.w	8001f98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a2c      	ldr	r2, [pc, #176]	; (8001f30 <HAL_DMA_IRQHandler+0x3f8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d04a      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a2a      	ldr	r2, [pc, #168]	; (8001f34 <HAL_DMA_IRQHandler+0x3fc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d045      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <HAL_DMA_IRQHandler+0x400>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d040      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <HAL_DMA_IRQHandler+0x404>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d03b      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <HAL_DMA_IRQHandler+0x408>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d036      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <HAL_DMA_IRQHandler+0x40c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d031      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a23      	ldr	r2, [pc, #140]	; (8001f48 <HAL_DMA_IRQHandler+0x410>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d02c      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <HAL_DMA_IRQHandler+0x414>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d027      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a20      	ldr	r2, [pc, #128]	; (8001f50 <HAL_DMA_IRQHandler+0x418>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d022      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <HAL_DMA_IRQHandler+0x41c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01d      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_DMA_IRQHandler+0x420>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d018      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1b      	ldr	r2, [pc, #108]	; (8001f5c <HAL_DMA_IRQHandler+0x424>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1a      	ldr	r2, [pc, #104]	; (8001f60 <HAL_DMA_IRQHandler+0x428>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00e      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <HAL_DMA_IRQHandler+0x42c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d009      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_DMA_IRQHandler+0x430>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d004      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x3e2>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <HAL_DMA_IRQHandler+0x434>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d12a      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x438>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf14      	ite	ne
 8001f28:	2301      	movne	r3, #1
 8001f2a:	2300      	moveq	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	e023      	b.n	8001f78 <HAL_DMA_IRQHandler+0x440>
 8001f30:	40020010 	.word	0x40020010
 8001f34:	40020028 	.word	0x40020028
 8001f38:	40020040 	.word	0x40020040
 8001f3c:	40020058 	.word	0x40020058
 8001f40:	40020070 	.word	0x40020070
 8001f44:	40020088 	.word	0x40020088
 8001f48:	400200a0 	.word	0x400200a0
 8001f4c:	400200b8 	.word	0x400200b8
 8001f50:	40020410 	.word	0x40020410
 8001f54:	40020428 	.word	0x40020428
 8001f58:	40020440 	.word	0x40020440
 8001f5c:	40020458 	.word	0x40020458
 8001f60:	40020470 	.word	0x40020470
 8001f64:	40020488 	.word	0x40020488
 8001f68:	400204a0 	.word	0x400204a0
 8001f6c:	400204b8 	.word	0x400204b8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2300      	movs	r3, #0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00d      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2204      	movs	r2, #4
 8001f86:	409a      	lsls	r2, r3
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f90:	f043 0204 	orr.w	r2, r3, #4
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80a6 	beq.w	80020fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a85      	ldr	r2, [pc, #532]	; (80021c8 <HAL_DMA_IRQHandler+0x690>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d04a      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a83      	ldr	r2, [pc, #524]	; (80021cc <HAL_DMA_IRQHandler+0x694>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d045      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a82      	ldr	r2, [pc, #520]	; (80021d0 <HAL_DMA_IRQHandler+0x698>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d040      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a80      	ldr	r2, [pc, #512]	; (80021d4 <HAL_DMA_IRQHandler+0x69c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d03b      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7f      	ldr	r2, [pc, #508]	; (80021d8 <HAL_DMA_IRQHandler+0x6a0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d036      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a7d      	ldr	r2, [pc, #500]	; (80021dc <HAL_DMA_IRQHandler+0x6a4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d031      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7c      	ldr	r2, [pc, #496]	; (80021e0 <HAL_DMA_IRQHandler+0x6a8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d02c      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a7a      	ldr	r2, [pc, #488]	; (80021e4 <HAL_DMA_IRQHandler+0x6ac>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d027      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a79      	ldr	r2, [pc, #484]	; (80021e8 <HAL_DMA_IRQHandler+0x6b0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a77      	ldr	r2, [pc, #476]	; (80021ec <HAL_DMA_IRQHandler+0x6b4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01d      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a76      	ldr	r2, [pc, #472]	; (80021f0 <HAL_DMA_IRQHandler+0x6b8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d018      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a74      	ldr	r2, [pc, #464]	; (80021f4 <HAL_DMA_IRQHandler+0x6bc>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a73      	ldr	r2, [pc, #460]	; (80021f8 <HAL_DMA_IRQHandler+0x6c0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00e      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a71      	ldr	r2, [pc, #452]	; (80021fc <HAL_DMA_IRQHandler+0x6c4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d009      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a70      	ldr	r2, [pc, #448]	; (8002200 <HAL_DMA_IRQHandler+0x6c8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d004      	beq.n	800204e <HAL_DMA_IRQHandler+0x516>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a6e      	ldr	r2, [pc, #440]	; (8002204 <HAL_DMA_IRQHandler+0x6cc>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10a      	bne.n	8002064 <HAL_DMA_IRQHandler+0x52c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e009      	b.n	8002078 <HAL_DMA_IRQHandler+0x540>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	bf14      	ite	ne
 8002072:	2301      	movne	r3, #1
 8002074:	2300      	moveq	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d03e      	beq.n	80020fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	2210      	movs	r2, #16
 8002086:	409a      	lsls	r2, r3
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d018      	beq.n	80020cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d108      	bne.n	80020ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d024      	beq.n	80020fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4798      	blx	r3
 80020b8:	e01f      	b.n	80020fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01b      	beq.n	80020fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4798      	blx	r3
 80020ca:	e016      	b.n	80020fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d107      	bne.n	80020ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0208 	bic.w	r2, r2, #8
 80020e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2220      	movs	r2, #32
 8002104:	409a      	lsls	r2, r3
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8110 	beq.w	8002330 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a2c      	ldr	r2, [pc, #176]	; (80021c8 <HAL_DMA_IRQHandler+0x690>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d04a      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a2b      	ldr	r2, [pc, #172]	; (80021cc <HAL_DMA_IRQHandler+0x694>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d045      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a29      	ldr	r2, [pc, #164]	; (80021d0 <HAL_DMA_IRQHandler+0x698>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d040      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <HAL_DMA_IRQHandler+0x69c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d03b      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a26      	ldr	r2, [pc, #152]	; (80021d8 <HAL_DMA_IRQHandler+0x6a0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d036      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a25      	ldr	r2, [pc, #148]	; (80021dc <HAL_DMA_IRQHandler+0x6a4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d031      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <HAL_DMA_IRQHandler+0x6a8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d02c      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a22      	ldr	r2, [pc, #136]	; (80021e4 <HAL_DMA_IRQHandler+0x6ac>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d027      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a20      	ldr	r2, [pc, #128]	; (80021e8 <HAL_DMA_IRQHandler+0x6b0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d022      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1f      	ldr	r2, [pc, #124]	; (80021ec <HAL_DMA_IRQHandler+0x6b4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d01d      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_DMA_IRQHandler+0x6b8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d018      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <HAL_DMA_IRQHandler+0x6bc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d013      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <HAL_DMA_IRQHandler+0x6c0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00e      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a19      	ldr	r2, [pc, #100]	; (80021fc <HAL_DMA_IRQHandler+0x6c4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d009      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a17      	ldr	r2, [pc, #92]	; (8002200 <HAL_DMA_IRQHandler+0x6c8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d004      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x678>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a16      	ldr	r2, [pc, #88]	; (8002204 <HAL_DMA_IRQHandler+0x6cc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d12b      	bne.n	8002208 <HAL_DMA_IRQHandler+0x6d0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bf14      	ite	ne
 80021be:	2301      	movne	r3, #1
 80021c0:	2300      	moveq	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	e02a      	b.n	800221c <HAL_DMA_IRQHandler+0x6e4>
 80021c6:	bf00      	nop
 80021c8:	40020010 	.word	0x40020010
 80021cc:	40020028 	.word	0x40020028
 80021d0:	40020040 	.word	0x40020040
 80021d4:	40020058 	.word	0x40020058
 80021d8:	40020070 	.word	0x40020070
 80021dc:	40020088 	.word	0x40020088
 80021e0:	400200a0 	.word	0x400200a0
 80021e4:	400200b8 	.word	0x400200b8
 80021e8:	40020410 	.word	0x40020410
 80021ec:	40020428 	.word	0x40020428
 80021f0:	40020440 	.word	0x40020440
 80021f4:	40020458 	.word	0x40020458
 80021f8:	40020470 	.word	0x40020470
 80021fc:	40020488 	.word	0x40020488
 8002200:	400204a0 	.word	0x400204a0
 8002204:	400204b8 	.word	0x400204b8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	bf14      	ite	ne
 8002216:	2301      	movne	r3, #1
 8002218:	2300      	moveq	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8087 	beq.w	8002330 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	2220      	movs	r2, #32
 800222c:	409a      	lsls	r2, r3
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b04      	cmp	r3, #4
 800223c:	d139      	bne.n	80022b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0216 	bic.w	r2, r2, #22
 800224c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800225c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d103      	bne.n	800226e <HAL_DMA_IRQHandler+0x736>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0208 	bic.w	r2, r2, #8
 800227c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	223f      	movs	r2, #63	; 0x3f
 8002288:	409a      	lsls	r2, r3
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 834a 	beq.w	800293c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
          }
          return;
 80022b0:	e344      	b.n	800293c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d018      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d108      	bne.n	80022e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d02c      	beq.n	8002330 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4798      	blx	r3
 80022de:	e027      	b.n	8002330 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d023      	beq.n	8002330 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
 80022f0:	e01e      	b.n	8002330 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10f      	bne.n	8002320 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0210 	bic.w	r2, r2, #16
 800230e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8306 	beq.w	8002946 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8088 	beq.w	8002458 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2204      	movs	r2, #4
 800234c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a7a      	ldr	r2, [pc, #488]	; (8002540 <HAL_DMA_IRQHandler+0xa08>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d04a      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a79      	ldr	r2, [pc, #484]	; (8002544 <HAL_DMA_IRQHandler+0xa0c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d045      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a77      	ldr	r2, [pc, #476]	; (8002548 <HAL_DMA_IRQHandler+0xa10>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d040      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a76      	ldr	r2, [pc, #472]	; (800254c <HAL_DMA_IRQHandler+0xa14>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d03b      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a74      	ldr	r2, [pc, #464]	; (8002550 <HAL_DMA_IRQHandler+0xa18>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d036      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a73      	ldr	r2, [pc, #460]	; (8002554 <HAL_DMA_IRQHandler+0xa1c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d031      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a71      	ldr	r2, [pc, #452]	; (8002558 <HAL_DMA_IRQHandler+0xa20>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d02c      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a70      	ldr	r2, [pc, #448]	; (800255c <HAL_DMA_IRQHandler+0xa24>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d027      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a6e      	ldr	r2, [pc, #440]	; (8002560 <HAL_DMA_IRQHandler+0xa28>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d022      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6d      	ldr	r2, [pc, #436]	; (8002564 <HAL_DMA_IRQHandler+0xa2c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d01d      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a6b      	ldr	r2, [pc, #428]	; (8002568 <HAL_DMA_IRQHandler+0xa30>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d018      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6a      	ldr	r2, [pc, #424]	; (800256c <HAL_DMA_IRQHandler+0xa34>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d013      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a68      	ldr	r2, [pc, #416]	; (8002570 <HAL_DMA_IRQHandler+0xa38>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00e      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a67      	ldr	r2, [pc, #412]	; (8002574 <HAL_DMA_IRQHandler+0xa3c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d009      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a65      	ldr	r2, [pc, #404]	; (8002578 <HAL_DMA_IRQHandler+0xa40>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d004      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x8b8>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a64      	ldr	r2, [pc, #400]	; (800257c <HAL_DMA_IRQHandler+0xa44>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d108      	bne.n	8002402 <HAL_DMA_IRQHandler+0x8ca>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e007      	b.n	8002412 <HAL_DMA_IRQHandler+0x8da>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	3301      	adds	r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241a:	429a      	cmp	r2, r3
 800241c:	d307      	bcc.n	800242e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f2      	bne.n	8002412 <HAL_DMA_IRQHandler+0x8da>
 800242c:	e000      	b.n	8002430 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800242e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2203      	movs	r2, #3
 8002442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002446:	e003      	b.n	8002450 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8272 	beq.w	8002946 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	4798      	blx	r3
 800246a:	e26c      	b.n	8002946 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a43      	ldr	r2, [pc, #268]	; (8002580 <HAL_DMA_IRQHandler+0xa48>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d022      	beq.n	80024bc <HAL_DMA_IRQHandler+0x984>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a42      	ldr	r2, [pc, #264]	; (8002584 <HAL_DMA_IRQHandler+0xa4c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d01d      	beq.n	80024bc <HAL_DMA_IRQHandler+0x984>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a40      	ldr	r2, [pc, #256]	; (8002588 <HAL_DMA_IRQHandler+0xa50>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d018      	beq.n	80024bc <HAL_DMA_IRQHandler+0x984>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a3f      	ldr	r2, [pc, #252]	; (800258c <HAL_DMA_IRQHandler+0xa54>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d013      	beq.n	80024bc <HAL_DMA_IRQHandler+0x984>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a3d      	ldr	r2, [pc, #244]	; (8002590 <HAL_DMA_IRQHandler+0xa58>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00e      	beq.n	80024bc <HAL_DMA_IRQHandler+0x984>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a3c      	ldr	r2, [pc, #240]	; (8002594 <HAL_DMA_IRQHandler+0xa5c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_DMA_IRQHandler+0x984>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a3a      	ldr	r2, [pc, #232]	; (8002598 <HAL_DMA_IRQHandler+0xa60>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d004      	beq.n	80024bc <HAL_DMA_IRQHandler+0x984>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a39      	ldr	r2, [pc, #228]	; (800259c <HAL_DMA_IRQHandler+0xa64>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d101      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x988>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_DMA_IRQHandler+0x98a>
 80024c0:	2300      	movs	r3, #0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 823f 	beq.w	8002946 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	2204      	movs	r2, #4
 80024da:	409a      	lsls	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80cd 	beq.w	8002680 <HAL_DMA_IRQHandler+0xb48>
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80c7 	beq.w	8002680 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2204      	movs	r2, #4
 80024fc:	409a      	lsls	r2, r3
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d049      	beq.n	80025a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 8210 	beq.w	8002940 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002528:	e20a      	b.n	8002940 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8206 	beq.w	8002940 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800253c:	e200      	b.n	8002940 <HAL_DMA_IRQHandler+0xe08>
 800253e:	bf00      	nop
 8002540:	40020010 	.word	0x40020010
 8002544:	40020028 	.word	0x40020028
 8002548:	40020040 	.word	0x40020040
 800254c:	40020058 	.word	0x40020058
 8002550:	40020070 	.word	0x40020070
 8002554:	40020088 	.word	0x40020088
 8002558:	400200a0 	.word	0x400200a0
 800255c:	400200b8 	.word	0x400200b8
 8002560:	40020410 	.word	0x40020410
 8002564:	40020428 	.word	0x40020428
 8002568:	40020440 	.word	0x40020440
 800256c:	40020458 	.word	0x40020458
 8002570:	40020470 	.word	0x40020470
 8002574:	40020488 	.word	0x40020488
 8002578:	400204a0 	.word	0x400204a0
 800257c:	400204b8 	.word	0x400204b8
 8002580:	58025408 	.word	0x58025408
 8002584:	5802541c 	.word	0x5802541c
 8002588:	58025430 	.word	0x58025430
 800258c:	58025444 	.word	0x58025444
 8002590:	58025458 	.word	0x58025458
 8002594:	5802546c 	.word	0x5802546c
 8002598:	58025480 	.word	0x58025480
 800259c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d160      	bne.n	800266c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7f      	ldr	r2, [pc, #508]	; (80027ac <HAL_DMA_IRQHandler+0xc74>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d04a      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a7d      	ldr	r2, [pc, #500]	; (80027b0 <HAL_DMA_IRQHandler+0xc78>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d045      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7c      	ldr	r2, [pc, #496]	; (80027b4 <HAL_DMA_IRQHandler+0xc7c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d040      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a7a      	ldr	r2, [pc, #488]	; (80027b8 <HAL_DMA_IRQHandler+0xc80>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d03b      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a79      	ldr	r2, [pc, #484]	; (80027bc <HAL_DMA_IRQHandler+0xc84>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d036      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a77      	ldr	r2, [pc, #476]	; (80027c0 <HAL_DMA_IRQHandler+0xc88>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d031      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a76      	ldr	r2, [pc, #472]	; (80027c4 <HAL_DMA_IRQHandler+0xc8c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d02c      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a74      	ldr	r2, [pc, #464]	; (80027c8 <HAL_DMA_IRQHandler+0xc90>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d027      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a73      	ldr	r2, [pc, #460]	; (80027cc <HAL_DMA_IRQHandler+0xc94>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d022      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a71      	ldr	r2, [pc, #452]	; (80027d0 <HAL_DMA_IRQHandler+0xc98>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01d      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a70      	ldr	r2, [pc, #448]	; (80027d4 <HAL_DMA_IRQHandler+0xc9c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d018      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a6e      	ldr	r2, [pc, #440]	; (80027d8 <HAL_DMA_IRQHandler+0xca0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6d      	ldr	r2, [pc, #436]	; (80027dc <HAL_DMA_IRQHandler+0xca4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00e      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a6b      	ldr	r2, [pc, #428]	; (80027e0 <HAL_DMA_IRQHandler+0xca8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d009      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a6a      	ldr	r2, [pc, #424]	; (80027e4 <HAL_DMA_IRQHandler+0xcac>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d004      	beq.n	800264a <HAL_DMA_IRQHandler+0xb12>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a68      	ldr	r2, [pc, #416]	; (80027e8 <HAL_DMA_IRQHandler+0xcb0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d108      	bne.n	800265c <HAL_DMA_IRQHandler+0xb24>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0208 	bic.w	r2, r2, #8
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e007      	b.n	800266c <HAL_DMA_IRQHandler+0xb34>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0204 	bic.w	r2, r2, #4
 800266a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8165 	beq.w	8002940 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800267e:	e15f      	b.n	8002940 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2202      	movs	r2, #2
 800268a:	409a      	lsls	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80c5 	beq.w	8002820 <HAL_DMA_IRQHandler+0xce8>
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80bf 	beq.w	8002820 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	2202      	movs	r2, #2
 80026ac:	409a      	lsls	r2, r3
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d018      	beq.n	80026ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 813a 	beq.w	8002944 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026d8:	e134      	b.n	8002944 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8130 	beq.w	8002944 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026ec:	e12a      	b.n	8002944 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 8089 	bne.w	800280c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2b      	ldr	r2, [pc, #172]	; (80027ac <HAL_DMA_IRQHandler+0xc74>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d04a      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a29      	ldr	r2, [pc, #164]	; (80027b0 <HAL_DMA_IRQHandler+0xc78>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d045      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a28      	ldr	r2, [pc, #160]	; (80027b4 <HAL_DMA_IRQHandler+0xc7c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d040      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <HAL_DMA_IRQHandler+0xc80>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d03b      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a25      	ldr	r2, [pc, #148]	; (80027bc <HAL_DMA_IRQHandler+0xc84>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d036      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <HAL_DMA_IRQHandler+0xc88>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d031      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <HAL_DMA_IRQHandler+0xc8c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d02c      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <HAL_DMA_IRQHandler+0xc90>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d027      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1f      	ldr	r2, [pc, #124]	; (80027cc <HAL_DMA_IRQHandler+0xc94>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d022      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <HAL_DMA_IRQHandler+0xc98>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d01d      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <HAL_DMA_IRQHandler+0xc9c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d018      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <HAL_DMA_IRQHandler+0xca0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a19      	ldr	r2, [pc, #100]	; (80027dc <HAL_DMA_IRQHandler+0xca4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00e      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <HAL_DMA_IRQHandler+0xca8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d009      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a16      	ldr	r2, [pc, #88]	; (80027e4 <HAL_DMA_IRQHandler+0xcac>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d004      	beq.n	800279a <HAL_DMA_IRQHandler+0xc62>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <HAL_DMA_IRQHandler+0xcb0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d128      	bne.n	80027ec <HAL_DMA_IRQHandler+0xcb4>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0214 	bic.w	r2, r2, #20
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e027      	b.n	80027fc <HAL_DMA_IRQHandler+0xcc4>
 80027ac:	40020010 	.word	0x40020010
 80027b0:	40020028 	.word	0x40020028
 80027b4:	40020040 	.word	0x40020040
 80027b8:	40020058 	.word	0x40020058
 80027bc:	40020070 	.word	0x40020070
 80027c0:	40020088 	.word	0x40020088
 80027c4:	400200a0 	.word	0x400200a0
 80027c8:	400200b8 	.word	0x400200b8
 80027cc:	40020410 	.word	0x40020410
 80027d0:	40020428 	.word	0x40020428
 80027d4:	40020440 	.word	0x40020440
 80027d8:	40020458 	.word	0x40020458
 80027dc:	40020470 	.word	0x40020470
 80027e0:	40020488 	.word	0x40020488
 80027e4:	400204a0 	.word	0x400204a0
 80027e8:	400204b8 	.word	0x400204b8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 020a 	bic.w	r2, r2, #10
 80027fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8097 	beq.w	8002944 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800281e:	e091      	b.n	8002944 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	2208      	movs	r2, #8
 800282a:	409a      	lsls	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8088 	beq.w	8002946 <HAL_DMA_IRQHandler+0xe0e>
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8082 	beq.w	8002946 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a41      	ldr	r2, [pc, #260]	; (800294c <HAL_DMA_IRQHandler+0xe14>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d04a      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3f      	ldr	r2, [pc, #252]	; (8002950 <HAL_DMA_IRQHandler+0xe18>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d045      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a3e      	ldr	r2, [pc, #248]	; (8002954 <HAL_DMA_IRQHandler+0xe1c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d040      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a3c      	ldr	r2, [pc, #240]	; (8002958 <HAL_DMA_IRQHandler+0xe20>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d03b      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a3b      	ldr	r2, [pc, #236]	; (800295c <HAL_DMA_IRQHandler+0xe24>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d036      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a39      	ldr	r2, [pc, #228]	; (8002960 <HAL_DMA_IRQHandler+0xe28>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d031      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a38      	ldr	r2, [pc, #224]	; (8002964 <HAL_DMA_IRQHandler+0xe2c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d02c      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a36      	ldr	r2, [pc, #216]	; (8002968 <HAL_DMA_IRQHandler+0xe30>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d027      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a35      	ldr	r2, [pc, #212]	; (800296c <HAL_DMA_IRQHandler+0xe34>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d022      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a33      	ldr	r2, [pc, #204]	; (8002970 <HAL_DMA_IRQHandler+0xe38>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01d      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a32      	ldr	r2, [pc, #200]	; (8002974 <HAL_DMA_IRQHandler+0xe3c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d018      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a30      	ldr	r2, [pc, #192]	; (8002978 <HAL_DMA_IRQHandler+0xe40>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a2f      	ldr	r2, [pc, #188]	; (800297c <HAL_DMA_IRQHandler+0xe44>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00e      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a2d      	ldr	r2, [pc, #180]	; (8002980 <HAL_DMA_IRQHandler+0xe48>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2c      	ldr	r2, [pc, #176]	; (8002984 <HAL_DMA_IRQHandler+0xe4c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xdaa>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2a      	ldr	r2, [pc, #168]	; (8002988 <HAL_DMA_IRQHandler+0xe50>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d108      	bne.n	80028f4 <HAL_DMA_IRQHandler+0xdbc>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 021c 	bic.w	r2, r2, #28
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	e007      	b.n	8002904 <HAL_DMA_IRQHandler+0xdcc>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 020e 	bic.w	r2, r2, #14
 8002902:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2201      	movs	r2, #1
 800290e:	409a      	lsls	r2, r3
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
 800293a:	e004      	b.n	8002946 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800293c:	bf00      	nop
 800293e:	e002      	b.n	8002946 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002940:	bf00      	nop
 8002942:	e000      	b.n	8002946 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002944:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002946:	3728      	adds	r7, #40	; 0x28
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40020010 	.word	0x40020010
 8002950:	40020028 	.word	0x40020028
 8002954:	40020040 	.word	0x40020040
 8002958:	40020058 	.word	0x40020058
 800295c:	40020070 	.word	0x40020070
 8002960:	40020088 	.word	0x40020088
 8002964:	400200a0 	.word	0x400200a0
 8002968:	400200b8 	.word	0x400200b8
 800296c:	40020410 	.word	0x40020410
 8002970:	40020428 	.word	0x40020428
 8002974:	40020440 	.word	0x40020440
 8002978:	40020458 	.word	0x40020458
 800297c:	40020470 	.word	0x40020470
 8002980:	40020488 	.word	0x40020488
 8002984:	400204a0 	.word	0x400204a0
 8002988:	400204b8 	.word	0x400204b8

0800298c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a42      	ldr	r2, [pc, #264]	; (8002aa4 <DMA_CalcBaseAndBitshift+0x118>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d04a      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a41      	ldr	r2, [pc, #260]	; (8002aa8 <DMA_CalcBaseAndBitshift+0x11c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d045      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a3f      	ldr	r2, [pc, #252]	; (8002aac <DMA_CalcBaseAndBitshift+0x120>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d040      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a3e      	ldr	r2, [pc, #248]	; (8002ab0 <DMA_CalcBaseAndBitshift+0x124>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d03b      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a3c      	ldr	r2, [pc, #240]	; (8002ab4 <DMA_CalcBaseAndBitshift+0x128>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d036      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a3b      	ldr	r2, [pc, #236]	; (8002ab8 <DMA_CalcBaseAndBitshift+0x12c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d031      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a39      	ldr	r2, [pc, #228]	; (8002abc <DMA_CalcBaseAndBitshift+0x130>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d02c      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a38      	ldr	r2, [pc, #224]	; (8002ac0 <DMA_CalcBaseAndBitshift+0x134>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d027      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a36      	ldr	r2, [pc, #216]	; (8002ac4 <DMA_CalcBaseAndBitshift+0x138>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d022      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a35      	ldr	r2, [pc, #212]	; (8002ac8 <DMA_CalcBaseAndBitshift+0x13c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d01d      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a33      	ldr	r2, [pc, #204]	; (8002acc <DMA_CalcBaseAndBitshift+0x140>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d018      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a32      	ldr	r2, [pc, #200]	; (8002ad0 <DMA_CalcBaseAndBitshift+0x144>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d013      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a30      	ldr	r2, [pc, #192]	; (8002ad4 <DMA_CalcBaseAndBitshift+0x148>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00e      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2f      	ldr	r2, [pc, #188]	; (8002ad8 <DMA_CalcBaseAndBitshift+0x14c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d009      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2d      	ldr	r2, [pc, #180]	; (8002adc <DMA_CalcBaseAndBitshift+0x150>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d004      	beq.n	8002a34 <DMA_CalcBaseAndBitshift+0xa8>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2c      	ldr	r2, [pc, #176]	; (8002ae0 <DMA_CalcBaseAndBitshift+0x154>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d101      	bne.n	8002a38 <DMA_CalcBaseAndBitshift+0xac>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <DMA_CalcBaseAndBitshift+0xae>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d024      	beq.n	8002a88 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	3b10      	subs	r3, #16
 8002a46:	4a27      	ldr	r2, [pc, #156]	; (8002ae4 <DMA_CalcBaseAndBitshift+0x158>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	4a24      	ldr	r2, [pc, #144]	; (8002ae8 <DMA_CalcBaseAndBitshift+0x15c>)
 8002a58:	5cd3      	ldrb	r3, [r2, r3]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d908      	bls.n	8002a78 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <DMA_CalcBaseAndBitshift+0x160>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	1d1a      	adds	r2, r3, #4
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	659a      	str	r2, [r3, #88]	; 0x58
 8002a76:	e00d      	b.n	8002a94 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <DMA_CalcBaseAndBitshift+0x160>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6593      	str	r3, [r2, #88]	; 0x58
 8002a86:	e005      	b.n	8002a94 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40020010 	.word	0x40020010
 8002aa8:	40020028 	.word	0x40020028
 8002aac:	40020040 	.word	0x40020040
 8002ab0:	40020058 	.word	0x40020058
 8002ab4:	40020070 	.word	0x40020070
 8002ab8:	40020088 	.word	0x40020088
 8002abc:	400200a0 	.word	0x400200a0
 8002ac0:	400200b8 	.word	0x400200b8
 8002ac4:	40020410 	.word	0x40020410
 8002ac8:	40020428 	.word	0x40020428
 8002acc:	40020440 	.word	0x40020440
 8002ad0:	40020458 	.word	0x40020458
 8002ad4:	40020470 	.word	0x40020470
 8002ad8:	40020488 	.word	0x40020488
 8002adc:	400204a0 	.word	0x400204a0
 8002ae0:	400204b8 	.word	0x400204b8
 8002ae4:	aaaaaaab 	.word	0xaaaaaaab
 8002ae8:	08007614 	.word	0x08007614
 8002aec:	fffffc00 	.word	0xfffffc00

08002af0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d120      	bne.n	8002b46 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d858      	bhi.n	8002bbe <DMA_CheckFifoParam+0xce>
 8002b0c:	a201      	add	r2, pc, #4	; (adr r2, 8002b14 <DMA_CheckFifoParam+0x24>)
 8002b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b12:	bf00      	nop
 8002b14:	08002b25 	.word	0x08002b25
 8002b18:	08002b37 	.word	0x08002b37
 8002b1c:	08002b25 	.word	0x08002b25
 8002b20:	08002bbf 	.word	0x08002bbf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d048      	beq.n	8002bc2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002b34:	e045      	b.n	8002bc2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b3e:	d142      	bne.n	8002bc6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002b44:	e03f      	b.n	8002bc6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4e:	d123      	bne.n	8002b98 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d838      	bhi.n	8002bca <DMA_CheckFifoParam+0xda>
 8002b58:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <DMA_CheckFifoParam+0x70>)
 8002b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5e:	bf00      	nop
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002b77 	.word	0x08002b77
 8002b68:	08002b71 	.word	0x08002b71
 8002b6c:	08002b89 	.word	0x08002b89
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
        break;
 8002b74:	e030      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d025      	beq.n	8002bce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002b86:	e022      	b.n	8002bce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b90:	d11f      	bne.n	8002bd2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002b96:	e01c      	b.n	8002bd2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d902      	bls.n	8002ba6 <DMA_CheckFifoParam+0xb6>
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d003      	beq.n	8002bac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002ba4:	e018      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
        break;
 8002baa:	e015      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00e      	beq.n	8002bd6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
    break;
 8002bbc:	e00b      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
        break;
 8002bbe:	bf00      	nop
 8002bc0:	e00a      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8002bc2:	bf00      	nop
 8002bc4:	e008      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8002bc6:	bf00      	nop
 8002bc8:	e006      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8002bca:	bf00      	nop
 8002bcc:	e004      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8002bce:	bf00      	nop
 8002bd0:	e002      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
        break;
 8002bd2:	bf00      	nop
 8002bd4:	e000      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
    break;
 8002bd6:	bf00      	nop
    }
  }

  return status;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop

08002be8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a38      	ldr	r2, [pc, #224]	; (8002cdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a36      	ldr	r2, [pc, #216]	; (8002ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01d      	beq.n	8002c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a35      	ldr	r2, [pc, #212]	; (8002ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d018      	beq.n	8002c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a33      	ldr	r2, [pc, #204]	; (8002ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a32      	ldr	r2, [pc, #200]	; (8002cec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00e      	beq.n	8002c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a30      	ldr	r2, [pc, #192]	; (8002cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2f      	ldr	r2, [pc, #188]	; (8002cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d004      	beq.n	8002c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a2d      	ldr	r2, [pc, #180]	; (8002cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01a      	beq.n	8002c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3b08      	subs	r3, #8
 8002c58:	4a28      	ldr	r2, [pc, #160]	; (8002cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002c74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002c84:	e024      	b.n	8002cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	3b10      	subs	r3, #16
 8002c8e:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d806      	bhi.n	8002cae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4a1b      	ldr	r2, [pc, #108]	; (8002d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d902      	bls.n	8002cae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3308      	adds	r3, #8
 8002cac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002cc0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2201      	movs	r2, #1
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	58025408 	.word	0x58025408
 8002ce0:	5802541c 	.word	0x5802541c
 8002ce4:	58025430 	.word	0x58025430
 8002ce8:	58025444 	.word	0x58025444
 8002cec:	58025458 	.word	0x58025458
 8002cf0:	5802546c 	.word	0x5802546c
 8002cf4:	58025480 	.word	0x58025480
 8002cf8:	58025494 	.word	0x58025494
 8002cfc:	cccccccd 	.word	0xcccccccd
 8002d00:	16009600 	.word	0x16009600
 8002d04:	58025880 	.word	0x58025880
 8002d08:	aaaaaaab 	.word	0xaaaaaaab
 8002d0c:	400204b8 	.word	0x400204b8
 8002d10:	4002040f 	.word	0x4002040f
 8002d14:	10008200 	.word	0x10008200
 8002d18:	40020880 	.word	0x40020880

08002d1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d04a      	beq.n	8002dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d847      	bhi.n	8002dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d022      	beq.n	8002d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a24      	ldr	r2, [pc, #144]	; (8002dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d01d      	beq.n	8002d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d018      	beq.n	8002d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d013      	beq.n	8002d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00e      	beq.n	8002d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d009      	beq.n	8002d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d004      	beq.n	8002d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d101      	bne.n	8002d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002da4:	671a      	str	r2, [r3, #112]	; 0x70
 8002da6:	e009      	b.n	8002dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	461a      	mov	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a11      	ldr	r2, [pc, #68]	; (8002e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002dba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	58025408 	.word	0x58025408
 8002dd8:	5802541c 	.word	0x5802541c
 8002ddc:	58025430 	.word	0x58025430
 8002de0:	58025444 	.word	0x58025444
 8002de4:	58025458 	.word	0x58025458
 8002de8:	5802546c 	.word	0x5802546c
 8002dec:	58025480 	.word	0x58025480
 8002df0:	58025494 	.word	0x58025494
 8002df4:	1600963f 	.word	0x1600963f
 8002df8:	58025940 	.word	0x58025940
 8002dfc:	1000823f 	.word	0x1000823f
 8002e00:	40020940 	.word	0x40020940

08002e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	; 0x24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002e12:	4b86      	ldr	r3, [pc, #536]	; (800302c <HAL_GPIO_Init+0x228>)
 8002e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e16:	e18c      	b.n	8003132 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 817e 	beq.w	800312c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d005      	beq.n	8002e48 <HAL_GPIO_Init+0x44>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d130      	bne.n	8002eaa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e7e:	2201      	movs	r2, #1
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0201 	and.w	r2, r3, #1
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d017      	beq.n	8002ee6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d123      	bne.n	8002f3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	08da      	lsrs	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3208      	adds	r2, #8
 8002efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	220f      	movs	r2, #15
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	08da      	lsrs	r2, r3, #3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3208      	adds	r2, #8
 8002f34:	69b9      	ldr	r1, [r7, #24]
 8002f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0203 	and.w	r2, r3, #3
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 80d8 	beq.w	800312c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7c:	4b2c      	ldr	r3, [pc, #176]	; (8003030 <HAL_GPIO_Init+0x22c>)
 8002f7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f82:	4a2b      	ldr	r2, [pc, #172]	; (8003030 <HAL_GPIO_Init+0x22c>)
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f8c:	4b28      	ldr	r3, [pc, #160]	; (8003030 <HAL_GPIO_Init+0x22c>)
 8002f8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f9a:	4a26      	ldr	r2, [pc, #152]	; (8003034 <HAL_GPIO_Init+0x230>)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <HAL_GPIO_Init+0x234>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d04a      	beq.n	800305c <HAL_GPIO_Init+0x258>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a1c      	ldr	r2, [pc, #112]	; (800303c <HAL_GPIO_Init+0x238>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d02b      	beq.n	8003026 <HAL_GPIO_Init+0x222>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <HAL_GPIO_Init+0x23c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d025      	beq.n	8003022 <HAL_GPIO_Init+0x21e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a1a      	ldr	r2, [pc, #104]	; (8003044 <HAL_GPIO_Init+0x240>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01f      	beq.n	800301e <HAL_GPIO_Init+0x21a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <HAL_GPIO_Init+0x244>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d019      	beq.n	800301a <HAL_GPIO_Init+0x216>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a18      	ldr	r2, [pc, #96]	; (800304c <HAL_GPIO_Init+0x248>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <HAL_GPIO_Init+0x212>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_GPIO_Init+0x24c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00d      	beq.n	8003012 <HAL_GPIO_Init+0x20e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a16      	ldr	r2, [pc, #88]	; (8003054 <HAL_GPIO_Init+0x250>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <HAL_GPIO_Init+0x20a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a15      	ldr	r2, [pc, #84]	; (8003058 <HAL_GPIO_Init+0x254>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d101      	bne.n	800300a <HAL_GPIO_Init+0x206>
 8003006:	2309      	movs	r3, #9
 8003008:	e029      	b.n	800305e <HAL_GPIO_Init+0x25a>
 800300a:	230a      	movs	r3, #10
 800300c:	e027      	b.n	800305e <HAL_GPIO_Init+0x25a>
 800300e:	2307      	movs	r3, #7
 8003010:	e025      	b.n	800305e <HAL_GPIO_Init+0x25a>
 8003012:	2306      	movs	r3, #6
 8003014:	e023      	b.n	800305e <HAL_GPIO_Init+0x25a>
 8003016:	2305      	movs	r3, #5
 8003018:	e021      	b.n	800305e <HAL_GPIO_Init+0x25a>
 800301a:	2304      	movs	r3, #4
 800301c:	e01f      	b.n	800305e <HAL_GPIO_Init+0x25a>
 800301e:	2303      	movs	r3, #3
 8003020:	e01d      	b.n	800305e <HAL_GPIO_Init+0x25a>
 8003022:	2302      	movs	r3, #2
 8003024:	e01b      	b.n	800305e <HAL_GPIO_Init+0x25a>
 8003026:	2301      	movs	r3, #1
 8003028:	e019      	b.n	800305e <HAL_GPIO_Init+0x25a>
 800302a:	bf00      	nop
 800302c:	58000080 	.word	0x58000080
 8003030:	58024400 	.word	0x58024400
 8003034:	58000400 	.word	0x58000400
 8003038:	58020000 	.word	0x58020000
 800303c:	58020400 	.word	0x58020400
 8003040:	58020800 	.word	0x58020800
 8003044:	58020c00 	.word	0x58020c00
 8003048:	58021000 	.word	0x58021000
 800304c:	58021400 	.word	0x58021400
 8003050:	58021800 	.word	0x58021800
 8003054:	58021c00 	.word	0x58021c00
 8003058:	58022400 	.word	0x58022400
 800305c:	2300      	movs	r3, #0
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	f002 0203 	and.w	r2, r2, #3
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	4093      	lsls	r3, r2
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800306e:	4938      	ldr	r1, [pc, #224]	; (8003150 <HAL_GPIO_Init+0x34c>)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	3302      	adds	r3, #2
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800307c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80030a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	3301      	adds	r3, #1
 8003130:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	f47f ae6b 	bne.w	8002e18 <HAL_GPIO_Init+0x14>
  }
}
 8003142:	bf00      	nop
 8003144:	bf00      	nop
 8003146:	3724      	adds	r7, #36	; 0x24
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	58000400 	.word	0x58000400

08003154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	807b      	strh	r3, [r7, #2]
 8003160:	4613      	mov	r3, r2
 8003162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003164:	787b      	ldrb	r3, [r7, #1]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800316a:	887a      	ldrh	r2, [r7, #2]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003170:	e003      	b.n	800317a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003172:	887b      	ldrh	r3, [r7, #2]
 8003174:	041a      	lsls	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	619a      	str	r2, [r3, #24]
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_PWREx_ConfigSupply+0x70>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b04      	cmp	r3, #4
 800319a:	d00a      	beq.n	80031b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800319c:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <HAL_PWREx_ConfigSupply+0x70>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d001      	beq.n	80031ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e01f      	b.n	80031ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e01d      	b.n	80031ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_PWREx_ConfigSupply+0x70>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f023 0207 	bic.w	r2, r3, #7
 80031ba:	490f      	ldr	r1, [pc, #60]	; (80031f8 <HAL_PWREx_ConfigSupply+0x70>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031c2:	f7fe f821 	bl	8001208 <HAL_GetTick>
 80031c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031c8:	e009      	b.n	80031de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031ca:	f7fe f81d 	bl	8001208 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031d8:	d901      	bls.n	80031de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e007      	b.n	80031ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_PWREx_ConfigSupply+0x70>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ea:	d1ee      	bne.n	80031ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	58024800 	.word	0x58024800

080031fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08c      	sub	sp, #48	; 0x30
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e3c8      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8087 	beq.w	800332a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800321c:	4b88      	ldr	r3, [pc, #544]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003226:	4b86      	ldr	r3, [pc, #536]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	2b10      	cmp	r3, #16
 8003230:	d007      	beq.n	8003242 <HAL_RCC_OscConfig+0x46>
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	2b18      	cmp	r3, #24
 8003236:	d110      	bne.n	800325a <HAL_RCC_OscConfig+0x5e>
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d10b      	bne.n	800325a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003242:	4b7f      	ldr	r3, [pc, #508]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d06c      	beq.n	8003328 <HAL_RCC_OscConfig+0x12c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d168      	bne.n	8003328 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e3a2      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003262:	d106      	bne.n	8003272 <HAL_RCC_OscConfig+0x76>
 8003264:	4b76      	ldr	r3, [pc, #472]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a75      	ldr	r2, [pc, #468]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 800326a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	e02e      	b.n	80032d0 <HAL_RCC_OscConfig+0xd4>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x98>
 800327a:	4b71      	ldr	r3, [pc, #452]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a70      	ldr	r2, [pc, #448]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 8003280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4b6e      	ldr	r3, [pc, #440]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6d      	ldr	r2, [pc, #436]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 800328c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e01d      	b.n	80032d0 <HAL_RCC_OscConfig+0xd4>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0xbc>
 800329e:	4b68      	ldr	r3, [pc, #416]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a67      	ldr	r2, [pc, #412]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80032a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a64      	ldr	r2, [pc, #400]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e00b      	b.n	80032d0 <HAL_RCC_OscConfig+0xd4>
 80032b8:	4b61      	ldr	r3, [pc, #388]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a60      	ldr	r2, [pc, #384]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80032be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	4b5e      	ldr	r3, [pc, #376]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a5d      	ldr	r2, [pc, #372]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80032ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d013      	beq.n	8003300 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fd ff96 	bl	8001208 <HAL_GetTick>
 80032dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e0:	f7fd ff92 	bl	8001208 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e356      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032f2:	4b53      	ldr	r3, [pc, #332]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0xe4>
 80032fe:	e014      	b.n	800332a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fd ff82 	bl	8001208 <HAL_GetTick>
 8003304:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003308:	f7fd ff7e 	bl	8001208 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e342      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800331a:	4b49      	ldr	r3, [pc, #292]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x10c>
 8003326:	e000      	b.n	800332a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 808c 	beq.w	8003450 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003338:	4b41      	ldr	r3, [pc, #260]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003340:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003342:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <HAL_RCC_OscConfig+0x162>
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	2b18      	cmp	r3, #24
 8003352:	d137      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1c8>
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d132      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_RCC_OscConfig+0x17a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e314      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003376:	4b32      	ldr	r3, [pc, #200]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 0219 	bic.w	r2, r3, #25
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	492f      	ldr	r1, [pc, #188]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fd ff3e 	bl	8001208 <HAL_GetTick>
 800338c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003390:	f7fd ff3a 	bl	8001208 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e2fe      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	061b      	lsls	r3, r3, #24
 80033bc:	4920      	ldr	r1, [pc, #128]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c2:	e045      	b.n	8003450 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d026      	beq.n	800341a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033cc:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f023 0219 	bic.w	r2, r3, #25
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4919      	ldr	r1, [pc, #100]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033de:	f7fd ff13 	bl	8001208 <HAL_GetTick>
 80033e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e6:	f7fd ff0f 	bl	8001208 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e2d3      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003404:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	490b      	ldr	r1, [pc, #44]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
 8003418:	e01a      	b.n	8003450 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a08      	ldr	r2, [pc, #32]	; (8003440 <HAL_RCC_OscConfig+0x244>)
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003426:	f7fd feef 	bl	8001208 <HAL_GetTick>
 800342a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342e:	f7fd feeb 	bl	8001208 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d903      	bls.n	8003444 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e2af      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
 8003440:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003444:	4b96      	ldr	r3, [pc, #600]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ee      	bne.n	800342e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	d06a      	beq.n	8003532 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800345c:	4b90      	ldr	r3, [pc, #576]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003464:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003466:	4b8e      	ldr	r3, [pc, #568]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b08      	cmp	r3, #8
 8003470:	d007      	beq.n	8003482 <HAL_RCC_OscConfig+0x286>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b18      	cmp	r3, #24
 8003476:	d11b      	bne.n	80034b0 <HAL_RCC_OscConfig+0x2b4>
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b01      	cmp	r3, #1
 8003480:	d116      	bne.n	80034b0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003482:	4b87      	ldr	r3, [pc, #540]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_RCC_OscConfig+0x29e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e282      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800349a:	4b81      	ldr	r3, [pc, #516]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	061b      	lsls	r3, r3, #24
 80034a8:	497d      	ldr	r1, [pc, #500]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034ae:	e040      	b.n	8003532 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d023      	beq.n	8003500 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034b8:	4b79      	ldr	r3, [pc, #484]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a78      	ldr	r2, [pc, #480]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 80034be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd fea0 	bl	8001208 <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034cc:	f7fd fe9c 	bl	8001208 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e260      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034de:	4b70      	ldr	r3, [pc, #448]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ea:	4b6d      	ldr	r3, [pc, #436]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	061b      	lsls	r3, r3, #24
 80034f8:	4969      	ldr	r1, [pc, #420]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60cb      	str	r3, [r1, #12]
 80034fe:	e018      	b.n	8003532 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003500:	4b67      	ldr	r3, [pc, #412]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a66      	ldr	r2, [pc, #408]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 8003506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800350a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fd fe7c 	bl	8001208 <HAL_GetTick>
 8003510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003514:	f7fd fe78 	bl	8001208 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e23c      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003526:	4b5e      	ldr	r3, [pc, #376]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d036      	beq.n	80035ac <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d019      	beq.n	800357a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003546:	4b56      	ldr	r3, [pc, #344]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 8003548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354a:	4a55      	ldr	r2, [pc, #340]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003552:	f7fd fe59 	bl	8001208 <HAL_GetTick>
 8003556:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355a:	f7fd fe55 	bl	8001208 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e219      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800356c:	4b4c      	ldr	r3, [pc, #304]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 800356e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x35e>
 8003578:	e018      	b.n	80035ac <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357a:	4b49      	ldr	r3, [pc, #292]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	4a48      	ldr	r2, [pc, #288]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fd fe3f 	bl	8001208 <HAL_GetTick>
 800358a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358e:	f7fd fe3b 	bl	8001208 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e1ff      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035a0:	4b3f      	ldr	r3, [pc, #252]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 80035a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d036      	beq.n	8003626 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d019      	beq.n	80035f4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035c0:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a36      	ldr	r2, [pc, #216]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 80035c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035cc:	f7fd fe1c 	bl	8001208 <HAL_GetTick>
 80035d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035d4:	f7fd fe18 	bl	8001208 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e1dc      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035e6:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x3d8>
 80035f2:	e018      	b.n	8003626 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035f4:	4b2a      	ldr	r3, [pc, #168]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a29      	ldr	r2, [pc, #164]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 80035fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003600:	f7fd fe02 	bl	8001208 <HAL_GetTick>
 8003604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003608:	f7fd fdfe 	bl	8001208 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e1c2      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8086 	beq.w	8003740 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003634:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <HAL_RCC_OscConfig+0x4a8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <HAL_RCC_OscConfig+0x4a8>)
 800363a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003640:	f7fd fde2 	bl	8001208 <HAL_GetTick>
 8003644:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003648:	f7fd fdde 	bl	8001208 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	; 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e1a2      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_RCC_OscConfig+0x4a8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d106      	bne.n	800367c <HAL_RCC_OscConfig+0x480>
 800366e:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
 800367a:	e032      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d111      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4ac>
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a05      	ldr	r2, [pc, #20]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	4a02      	ldr	r2, [pc, #8]	; (80036a0 <HAL_RCC_OscConfig+0x4a4>)
 8003696:	f023 0304 	bic.w	r3, r3, #4
 800369a:	6713      	str	r3, [r2, #112]	; 0x70
 800369c:	e021      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e6>
 800369e:	bf00      	nop
 80036a0:	58024400 	.word	0x58024400
 80036a4:	58024800 	.word	0x58024800
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b05      	cmp	r3, #5
 80036ae:	d10c      	bne.n	80036ca <HAL_RCC_OscConfig+0x4ce>
 80036b0:	4b83      	ldr	r3, [pc, #524]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	4a82      	ldr	r2, [pc, #520]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80036b6:	f043 0304 	orr.w	r3, r3, #4
 80036ba:	6713      	str	r3, [r2, #112]	; 0x70
 80036bc:	4b80      	ldr	r3, [pc, #512]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	4a7f      	ldr	r2, [pc, #508]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6713      	str	r3, [r2, #112]	; 0x70
 80036c8:	e00b      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e6>
 80036ca:	4b7d      	ldr	r3, [pc, #500]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	4a7c      	ldr	r2, [pc, #496]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6713      	str	r3, [r2, #112]	; 0x70
 80036d6:	4b7a      	ldr	r3, [pc, #488]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a79      	ldr	r2, [pc, #484]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d015      	beq.n	8003716 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fd fd8d 	bl	8001208 <HAL_GetTick>
 80036ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036f0:	e00a      	b.n	8003708 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fd fd89 	bl	8001208 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e14b      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003708:	4b6d      	ldr	r3, [pc, #436]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0ee      	beq.n	80036f2 <HAL_RCC_OscConfig+0x4f6>
 8003714:	e014      	b.n	8003740 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003716:	f7fd fd77 	bl	8001208 <HAL_GetTick>
 800371a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fd fd73 	bl	8001208 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	; 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e135      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003734:	4b62      	ldr	r3, [pc, #392]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ee      	bne.n	800371e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 812a 	beq.w	800399e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800374a:	4b5d      	ldr	r3, [pc, #372]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003752:	2b18      	cmp	r3, #24
 8003754:	f000 80ba 	beq.w	80038cc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	2b02      	cmp	r3, #2
 800375e:	f040 8095 	bne.w	800388c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003762:	4b57      	ldr	r3, [pc, #348]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a56      	ldr	r2, [pc, #344]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003768:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800376c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fd fd4b 	bl	8001208 <HAL_GetTick>
 8003772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003776:	f7fd fd47 	bl	8001208 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e10b      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003788:	4b4d      	ldr	r3, [pc, #308]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f0      	bne.n	8003776 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003794:	4b4a      	ldr	r3, [pc, #296]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003798:	4b4a      	ldr	r3, [pc, #296]	; (80038c4 <HAL_RCC_OscConfig+0x6c8>)
 800379a:	4013      	ands	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037a4:	0112      	lsls	r2, r2, #4
 80037a6:	430a      	orrs	r2, r1
 80037a8:	4945      	ldr	r1, [pc, #276]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	628b      	str	r3, [r1, #40]	; 0x28
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	3b01      	subs	r3, #1
 80037b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037bc:	3b01      	subs	r3, #1
 80037be:	025b      	lsls	r3, r3, #9
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	3b01      	subs	r3, #1
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	3b01      	subs	r3, #1
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037de:	4938      	ldr	r1, [pc, #224]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80037e4:	4b36      	ldr	r3, [pc, #216]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	4a35      	ldr	r2, [pc, #212]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037f0:	4b33      	ldr	r3, [pc, #204]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80037f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f4:	4b34      	ldr	r3, [pc, #208]	; (80038c8 <HAL_RCC_OscConfig+0x6cc>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037fc:	00d2      	lsls	r2, r2, #3
 80037fe:	4930      	ldr	r1, [pc, #192]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003804:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	f023 020c 	bic.w	r2, r3, #12
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	492b      	ldr	r1, [pc, #172]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003812:	4313      	orrs	r3, r2
 8003814:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003816:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	f023 0202 	bic.w	r2, r3, #2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	4927      	ldr	r1, [pc, #156]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003828:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4a24      	ldr	r2, [pc, #144]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 800382e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003834:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	4a21      	ldr	r2, [pc, #132]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 800383a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003840:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800384a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800384c:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	4a1b      	ldr	r2, [pc, #108]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 800385e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fd fcd0 	bl	8001208 <HAL_GetTick>
 8003868:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fd fccc 	bl	8001208 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e090      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x670>
 800388a:	e088      	b.n	800399e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a0b      	ldr	r2, [pc, #44]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 8003892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fd fcb6 	bl	8001208 <HAL_GetTick>
 800389c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fd fcb2 	bl	8001208 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e076      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038b2:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <HAL_RCC_OscConfig+0x6c4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x6a4>
 80038be:	e06e      	b.n	800399e <HAL_RCC_OscConfig+0x7a2>
 80038c0:	58024400 	.word	0x58024400
 80038c4:	fffffc0c 	.word	0xfffffc0c
 80038c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038cc:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <HAL_RCC_OscConfig+0x7ac>)
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038d2:	4b35      	ldr	r3, [pc, #212]	; (80039a8 <HAL_RCC_OscConfig+0x7ac>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d031      	beq.n	8003944 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f003 0203 	and.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d12a      	bne.n	8003944 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d122      	bne.n	8003944 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d11a      	bne.n	8003944 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	0a5b      	lsrs	r3, r3, #9
 8003912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d111      	bne.n	8003944 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d108      	bne.n	8003944 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	0e1b      	lsrs	r3, r3, #24
 8003936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e02b      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003948:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <HAL_RCC_OscConfig+0x7ac>)
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	08db      	lsrs	r3, r3, #3
 800394e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003952:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	429a      	cmp	r2, r3
 800395c:	d01f      	beq.n	800399e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_RCC_OscConfig+0x7ac>)
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	4a11      	ldr	r2, [pc, #68]	; (80039a8 <HAL_RCC_OscConfig+0x7ac>)
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800396a:	f7fd fc4d 	bl	8001208 <HAL_GetTick>
 800396e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003970:	bf00      	nop
 8003972:	f7fd fc49 	bl	8001208 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	4293      	cmp	r3, r2
 800397c:	d0f9      	beq.n	8003972 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800397e:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <HAL_RCC_OscConfig+0x7ac>)
 8003980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_RCC_OscConfig+0x7b0>)
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800398a:	00d2      	lsls	r2, r2, #3
 800398c:	4906      	ldr	r1, [pc, #24]	; (80039a8 <HAL_RCC_OscConfig+0x7ac>)
 800398e:	4313      	orrs	r3, r2
 8003990:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_OscConfig+0x7ac>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <HAL_RCC_OscConfig+0x7ac>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3730      	adds	r7, #48	; 0x30
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	58024400 	.word	0x58024400
 80039ac:	ffff0007 	.word	0xffff0007

080039b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e19c      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b8a      	ldr	r3, [pc, #552]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d910      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b87      	ldr	r3, [pc, #540]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 020f 	bic.w	r2, r3, #15
 80039da:	4985      	ldr	r1, [pc, #532]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b83      	ldr	r3, [pc, #524]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e184      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d010      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	4b7b      	ldr	r3, [pc, #492]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d908      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a10:	4b78      	ldr	r3, [pc, #480]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	4975      	ldr	r1, [pc, #468]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d010      	beq.n	8003a50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	4b70      	ldr	r3, [pc, #448]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d908      	bls.n	8003a50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a3e:	4b6d      	ldr	r3, [pc, #436]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	496a      	ldr	r1, [pc, #424]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d010      	beq.n	8003a7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	4b64      	ldr	r3, [pc, #400]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d908      	bls.n	8003a7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a6c:	4b61      	ldr	r3, [pc, #388]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	495e      	ldr	r1, [pc, #376]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d010      	beq.n	8003aac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d908      	bls.n	8003aac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a9a:	4b56      	ldr	r3, [pc, #344]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	4953      	ldr	r1, [pc, #332]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d010      	beq.n	8003ada <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	4b4d      	ldr	r3, [pc, #308]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d908      	bls.n	8003ada <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac8:	4b4a      	ldr	r3, [pc, #296]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f023 020f 	bic.w	r2, r3, #15
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4947      	ldr	r1, [pc, #284]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d055      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ae6:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	4940      	ldr	r1, [pc, #256]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b00:	4b3c      	ldr	r3, [pc, #240]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d121      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0f6      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b18:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d115      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0ea      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b30:	4b30      	ldr	r3, [pc, #192]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d109      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0de      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b40:	4b2c      	ldr	r3, [pc, #176]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0d6      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b50:	4b28      	ldr	r3, [pc, #160]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f023 0207 	bic.w	r2, r3, #7
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4925      	ldr	r1, [pc, #148]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b62:	f7fd fb51 	bl	8001208 <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b68:	e00a      	b.n	8003b80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6a:	f7fd fb4d 	bl	8001208 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e0be      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b80:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d1eb      	bne.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d010      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d208      	bcs.n	8003bc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bae:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f023 020f 	bic.w	r2, r3, #15
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	490e      	ldr	r1, [pc, #56]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d214      	bcs.n	8003bf8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 020f 	bic.w	r2, r3, #15
 8003bd6:	4906      	ldr	r1, [pc, #24]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e086      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
 8003bf0:	52002000 	.word	0x52002000
 8003bf4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d010      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	4b3f      	ldr	r3, [pc, #252]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d208      	bcs.n	8003c26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c14:	4b3c      	ldr	r3, [pc, #240]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	4939      	ldr	r1, [pc, #228]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d010      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	4b34      	ldr	r3, [pc, #208]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d208      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c42:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	492e      	ldr	r1, [pc, #184]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d010      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699a      	ldr	r2, [r3, #24]
 8003c64:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d208      	bcs.n	8003c82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c70:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	4922      	ldr	r1, [pc, #136]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d010      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d208      	bcs.n	8003cb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4917      	ldr	r1, [pc, #92]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cb0:	f000 f834 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	4912      	ldr	r1, [pc, #72]	; (8003d0c <HAL_RCC_ClockConfig+0x35c>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ccc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cce:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	4a0d      	ldr	r2, [pc, #52]	; (8003d0c <HAL_RCC_ClockConfig+0x35c>)
 8003cd8:	5cd3      	ldrb	r3, [r2, r3]
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <HAL_RCC_ClockConfig+0x360>)
 8003ce6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <HAL_RCC_ClockConfig+0x364>)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_RCC_ClockConfig+0x368>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd fa3e 	bl	8001174 <HAL_InitTick>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	58024400 	.word	0x58024400
 8003d0c:	08007604 	.word	0x08007604
 8003d10:	24000004 	.word	0x24000004
 8003d14:	24000000 	.word	0x24000000
 8003d18:	24000008 	.word	0x24000008

08003d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d22:	4bb3      	ldr	r3, [pc, #716]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d2a:	2b18      	cmp	r3, #24
 8003d2c:	f200 8155 	bhi.w	8003fda <HAL_RCC_GetSysClockFreq+0x2be>
 8003d30:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d9d 	.word	0x08003d9d
 8003d3c:	08003fdb 	.word	0x08003fdb
 8003d40:	08003fdb 	.word	0x08003fdb
 8003d44:	08003fdb 	.word	0x08003fdb
 8003d48:	08003fdb 	.word	0x08003fdb
 8003d4c:	08003fdb 	.word	0x08003fdb
 8003d50:	08003fdb 	.word	0x08003fdb
 8003d54:	08003fdb 	.word	0x08003fdb
 8003d58:	08003dc3 	.word	0x08003dc3
 8003d5c:	08003fdb 	.word	0x08003fdb
 8003d60:	08003fdb 	.word	0x08003fdb
 8003d64:	08003fdb 	.word	0x08003fdb
 8003d68:	08003fdb 	.word	0x08003fdb
 8003d6c:	08003fdb 	.word	0x08003fdb
 8003d70:	08003fdb 	.word	0x08003fdb
 8003d74:	08003fdb 	.word	0x08003fdb
 8003d78:	08003dc9 	.word	0x08003dc9
 8003d7c:	08003fdb 	.word	0x08003fdb
 8003d80:	08003fdb 	.word	0x08003fdb
 8003d84:	08003fdb 	.word	0x08003fdb
 8003d88:	08003fdb 	.word	0x08003fdb
 8003d8c:	08003fdb 	.word	0x08003fdb
 8003d90:	08003fdb 	.word	0x08003fdb
 8003d94:	08003fdb 	.word	0x08003fdb
 8003d98:	08003dcf 	.word	0x08003dcf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d9c:	4b94      	ldr	r3, [pc, #592]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d009      	beq.n	8003dbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003da8:	4b91      	ldr	r3, [pc, #580]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	08db      	lsrs	r3, r3, #3
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	4a90      	ldr	r2, [pc, #576]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
 8003db8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003dba:	e111      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003dbc:	4b8d      	ldr	r3, [pc, #564]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dbe:	61bb      	str	r3, [r7, #24]
      break;
 8003dc0:	e10e      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003dc2:	4b8d      	ldr	r3, [pc, #564]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003dc4:	61bb      	str	r3, [r7, #24]
      break;
 8003dc6:	e10b      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003dc8:	4b8c      	ldr	r3, [pc, #560]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003dca:	61bb      	str	r3, [r7, #24]
      break;
 8003dcc:	e108      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dce:	4b88      	ldr	r3, [pc, #544]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003dd8:	4b85      	ldr	r3, [pc, #532]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003de4:	4b82      	ldr	r3, [pc, #520]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003dee:	4b80      	ldr	r3, [pc, #512]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df2:	08db      	lsrs	r3, r3, #3
 8003df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80e1 	beq.w	8003fd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	f000 8083 	beq.w	8003f20 <HAL_RCC_GetSysClockFreq+0x204>
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	f200 80a1 	bhi.w	8003f64 <HAL_RCC_GetSysClockFreq+0x248>
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x114>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d056      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e2e:	e099      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e30:	4b6f      	ldr	r3, [pc, #444]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d02d      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e3c:	4b6c      	ldr	r3, [pc, #432]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	08db      	lsrs	r3, r3, #3
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	4a6b      	ldr	r2, [pc, #428]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	ee07 3a90 	vmov	s15, r3
 8003e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e66:	4b62      	ldr	r3, [pc, #392]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003e96:	e087      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004004 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eaa:	4b51      	ldr	r3, [pc, #324]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ebe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003eda:	e065      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eee:	4b40      	ldr	r3, [pc, #256]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f1e:	e043      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800400c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f32:	4b2f      	ldr	r3, [pc, #188]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f62:	e021      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f76:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fa6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	0a5b      	lsrs	r3, r3, #9
 8003fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fcc:	ee17 3a90 	vmov	r3, s15
 8003fd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003fd2:	e005      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61bb      	str	r3, [r7, #24]
      break;
 8003fd8:	e002      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fdc:	61bb      	str	r3, [r7, #24]
      break;
 8003fde:	bf00      	nop
  }

  return sysclockfreq;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3724      	adds	r7, #36	; 0x24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	03d09000 	.word	0x03d09000
 8003ff8:	003d0900 	.word	0x003d0900
 8003ffc:	017d7840 	.word	0x017d7840
 8004000:	46000000 	.word	0x46000000
 8004004:	4c742400 	.word	0x4c742400
 8004008:	4a742400 	.word	0x4a742400
 800400c:	4bbebc20 	.word	0x4bbebc20

08004010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004016:	f7ff fe81 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 800401a:	4602      	mov	r2, r0
 800401c:	4b10      	ldr	r3, [pc, #64]	; (8004060 <HAL_RCC_GetHCLKFreq+0x50>)
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	0a1b      	lsrs	r3, r3, #8
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	490f      	ldr	r1, [pc, #60]	; (8004064 <HAL_RCC_GetHCLKFreq+0x54>)
 8004028:	5ccb      	ldrb	r3, [r1, r3]
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_RCC_GetHCLKFreq+0x50>)
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	4a09      	ldr	r2, [pc, #36]	; (8004064 <HAL_RCC_GetHCLKFreq+0x54>)
 800403e:	5cd3      	ldrb	r3, [r2, r3]
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	fa22 f303 	lsr.w	r3, r2, r3
 800404a:	4a07      	ldr	r2, [pc, #28]	; (8004068 <HAL_RCC_GetHCLKFreq+0x58>)
 800404c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800404e:	4a07      	ldr	r2, [pc, #28]	; (800406c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <HAL_RCC_GetHCLKFreq+0x58>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	58024400 	.word	0x58024400
 8004064:	08007604 	.word	0x08007604
 8004068:	24000004 	.word	0x24000004
 800406c:	24000000 	.word	0x24000000

08004070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004074:	f7ff ffcc 	bl	8004010 <HAL_RCC_GetHCLKFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	4904      	ldr	r1, [pc, #16]	; (8004098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	58024400 	.word	0x58024400
 8004098:	08007604 	.word	0x08007604

0800409c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800409c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a0:	b0c6      	sub	sp, #280	; 0x118
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040a8:	2300      	movs	r3, #0
 80040aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040ae:	2300      	movs	r3, #0
 80040b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80040c0:	2500      	movs	r5, #0
 80040c2:	ea54 0305 	orrs.w	r3, r4, r5
 80040c6:	d049      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80040c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040d2:	d02f      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80040d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040d8:	d828      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040de:	d01a      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040e4:	d822      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80040ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ee:	d007      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040f0:	e01c      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f2:	4bab      	ldr	r3, [pc, #684]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	4aaa      	ldr	r2, [pc, #680]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040fe:	e01a      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004104:	3308      	adds	r3, #8
 8004106:	2102      	movs	r1, #2
 8004108:	4618      	mov	r0, r3
 800410a:	f002 fa49 	bl	80065a0 <RCCEx_PLL2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004114:	e00f      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800411a:	3328      	adds	r3, #40	; 0x28
 800411c:	2102      	movs	r1, #2
 800411e:	4618      	mov	r0, r3
 8004120:	f002 faf0 	bl	8006704 <RCCEx_PLL3_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800412a:	e004      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004132:	e000      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004136:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800413e:	4b98      	ldr	r3, [pc, #608]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800414a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800414c:	4a94      	ldr	r2, [pc, #592]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800414e:	430b      	orrs	r3, r1
 8004150:	6513      	str	r3, [r2, #80]	; 0x50
 8004152:	e003      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004158:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800415c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004168:	f04f 0900 	mov.w	r9, #0
 800416c:	ea58 0309 	orrs.w	r3, r8, r9
 8004170:	d047      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004178:	2b04      	cmp	r3, #4
 800417a:	d82a      	bhi.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	08004199 	.word	0x08004199
 8004188:	080041a7 	.word	0x080041a7
 800418c:	080041bd 	.word	0x080041bd
 8004190:	080041db 	.word	0x080041db
 8004194:	080041db 	.word	0x080041db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004198:	4b81      	ldr	r3, [pc, #516]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	4a80      	ldr	r2, [pc, #512]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800419e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041a4:	e01a      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041aa:	3308      	adds	r3, #8
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f002 f9f6 	bl	80065a0 <RCCEx_PLL2_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041ba:	e00f      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041c0:	3328      	adds	r3, #40	; 0x28
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f002 fa9d 	bl	8006704 <RCCEx_PLL3_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041d0:	e004      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80041d8:	e000      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80041da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041e4:	4b6e      	ldr	r3, [pc, #440]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e8:	f023 0107 	bic.w	r1, r3, #7
 80041ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	4a6b      	ldr	r2, [pc, #428]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041f4:	430b      	orrs	r3, r1
 80041f6:	6513      	str	r3, [r2, #80]	; 0x50
 80041f8:	e003      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800420e:	f04f 0b00 	mov.w	fp, #0
 8004212:	ea5a 030b 	orrs.w	r3, sl, fp
 8004216:	d05b      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800421c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004220:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004224:	d03b      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004226:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800422a:	d834      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800422c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004230:	d037      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004232:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004236:	d82e      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004238:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800423c:	d033      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800423e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004242:	d828      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004248:	d01a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800424a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424e:	d822      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004254:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004258:	d007      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800425a:	e01c      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425c:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4a4f      	ldr	r2, [pc, #316]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004268:	e01e      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800426a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800426e:	3308      	adds	r3, #8
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f002 f994 	bl	80065a0 <RCCEx_PLL2_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800427e:	e013      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004284:	3328      	adds	r3, #40	; 0x28
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f002 fa3b 	bl	8006704 <RCCEx_PLL3_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004294:	e008      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800429c:	e004      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80042a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80042b0:	4b3b      	ldr	r3, [pc, #236]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80042b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042c0:	4a37      	ldr	r2, [pc, #220]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042c2:	430b      	orrs	r3, r1
 80042c4:	6593      	str	r3, [r2, #88]	; 0x58
 80042c6:	e003      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80042d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80042dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80042e0:	2300      	movs	r3, #0
 80042e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80042e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80042ea:	460b      	mov	r3, r1
 80042ec:	4313      	orrs	r3, r2
 80042ee:	d05d      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80042f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80042f8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80042fc:	d03b      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80042fe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004302:	d834      	bhi.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004308:	d037      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800430a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800430e:	d82e      	bhi.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004310:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004314:	d033      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004316:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800431a:	d828      	bhi.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800431c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004320:	d01a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004322:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004326:	d822      	bhi.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800432c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004330:	d007      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004332:	e01c      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004334:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	4a19      	ldr	r2, [pc, #100]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800433a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800433e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004340:	e01e      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004346:	3308      	adds	r3, #8
 8004348:	2100      	movs	r1, #0
 800434a:	4618      	mov	r0, r3
 800434c:	f002 f928 	bl	80065a0 <RCCEx_PLL2_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004356:	e013      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800435c:	3328      	adds	r3, #40	; 0x28
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f002 f9cf 	bl	8006704 <RCCEx_PLL3_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800436c:	e008      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004374:	e004      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004376:	bf00      	nop
 8004378:	e002      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800437a:	bf00      	nop
 800437c:	e000      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800437e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004380:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10d      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004394:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004398:	4a01      	ldr	r2, [pc, #4]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800439a:	430b      	orrs	r3, r1
 800439c:	6593      	str	r3, [r2, #88]	; 0x58
 800439e:	e005      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80043a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80043b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80043bc:	2300      	movs	r3, #0
 80043be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80043c2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d03a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80043cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d2:	2b30      	cmp	r3, #48	; 0x30
 80043d4:	d01f      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80043d6:	2b30      	cmp	r3, #48	; 0x30
 80043d8:	d819      	bhi.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d00c      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80043de:	2b20      	cmp	r3, #32
 80043e0:	d815      	bhi.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d019      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80043e6:	2b10      	cmp	r3, #16
 80043e8:	d111      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ea:	4baa      	ldr	r3, [pc, #680]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	4aa9      	ldr	r2, [pc, #676]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80043f6:	e011      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043fc:	3308      	adds	r3, #8
 80043fe:	2102      	movs	r1, #2
 8004400:	4618      	mov	r0, r3
 8004402:	f002 f8cd 	bl	80065a0 <RCCEx_PLL2_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800440c:	e006      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004414:	e002      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800441a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004424:	4b9b      	ldr	r3, [pc, #620]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004428:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800442c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	4a98      	ldr	r2, [pc, #608]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004434:	430b      	orrs	r3, r1
 8004436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004438:	e003      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800443e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800444e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004452:	2300      	movs	r3, #0
 8004454:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004458:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800445c:	460b      	mov	r3, r1
 800445e:	4313      	orrs	r3, r2
 8004460:	d051      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800446c:	d035      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800446e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004472:	d82e      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004474:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004478:	d031      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x442>
 800447a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800447e:	d828      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004484:	d01a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448a:	d822      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004494:	d007      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004496:	e01c      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004498:	4b7e      	ldr	r3, [pc, #504]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	4a7d      	ldr	r2, [pc, #500]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800449e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044a4:	e01c      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044aa:	3308      	adds	r3, #8
 80044ac:	2100      	movs	r1, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f002 f876 	bl	80065a0 <RCCEx_PLL2_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044ba:	e011      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044c0:	3328      	adds	r3, #40	; 0x28
 80044c2:	2100      	movs	r1, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f002 f91d 	bl	8006704 <RCCEx_PLL3_Config>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044d0:	e006      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80044d8:	e002      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80044de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044e8:	4b6a      	ldr	r3, [pc, #424]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80044f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f6:	4a67      	ldr	r2, [pc, #412]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044f8:	430b      	orrs	r3, r1
 80044fa:	6513      	str	r3, [r2, #80]	; 0x50
 80044fc:	e003      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004502:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004512:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004516:	2300      	movs	r3, #0
 8004518:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800451c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004520:	460b      	mov	r3, r1
 8004522:	4313      	orrs	r3, r2
 8004524:	d053      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800452a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004530:	d033      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004532:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004536:	d82c      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004538:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800453c:	d02f      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800453e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004542:	d826      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004544:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004548:	d02b      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800454a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800454e:	d820      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004554:	d012      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800455a:	d81a      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d022      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004564:	d115      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800456a:	3308      	adds	r3, #8
 800456c:	2101      	movs	r1, #1
 800456e:	4618      	mov	r0, r3
 8004570:	f002 f816 	bl	80065a0 <RCCEx_PLL2_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800457a:	e015      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800457c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004580:	3328      	adds	r3, #40	; 0x28
 8004582:	2101      	movs	r1, #1
 8004584:	4618      	mov	r0, r3
 8004586:	f002 f8bd 	bl	8006704 <RCCEx_PLL3_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004590:	e00a      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004598:	e006      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800459a:	bf00      	nop
 800459c:	e004      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800459e:	bf00      	nop
 80045a0:	e002      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80045a2:	bf00      	nop
 80045a4:	e000      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80045a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10a      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80045b0:	4b38      	ldr	r3, [pc, #224]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80045b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045be:	4a35      	ldr	r2, [pc, #212]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6513      	str	r3, [r2, #80]	; 0x50
 80045c4:	e003      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80045ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80045da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045de:	2300      	movs	r3, #0
 80045e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80045e4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045e8:	460b      	mov	r3, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	d058      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80045ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045fa:	d033      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80045fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004600:	d82c      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004606:	d02f      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460c:	d826      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800460e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004612:	d02b      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004614:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004618:	d820      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800461a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800461e:	d012      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004624:	d81a      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d022      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800462a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800462e:	d115      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004634:	3308      	adds	r3, #8
 8004636:	2101      	movs	r1, #1
 8004638:	4618      	mov	r0, r3
 800463a:	f001 ffb1 	bl	80065a0 <RCCEx_PLL2_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004644:	e015      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800464a:	3328      	adds	r3, #40	; 0x28
 800464c:	2101      	movs	r1, #1
 800464e:	4618      	mov	r0, r3
 8004650:	f002 f858 	bl	8006704 <RCCEx_PLL3_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800465a:	e00a      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004662:	e006      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004664:	bf00      	nop
 8004666:	e004      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004668:	bf00      	nop
 800466a:	e002      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800466c:	bf00      	nop
 800466e:	e000      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004672:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10e      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004686:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800468a:	4a02      	ldr	r2, [pc, #8]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800468c:	430b      	orrs	r3, r1
 800468e:	6593      	str	r3, [r2, #88]	; 0x58
 8004690:	e006      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004692:	bf00      	nop
 8004694:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800469c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80046ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046b0:	2300      	movs	r3, #0
 80046b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80046b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	d037      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80046c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ca:	d00e      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80046cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046d0:	d816      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d018      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80046d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046da:	d111      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046dc:	4bc4      	ldr	r3, [pc, #784]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	4ac3      	ldr	r2, [pc, #780]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046e8:	e00f      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ee:	3308      	adds	r3, #8
 80046f0:	2101      	movs	r1, #1
 80046f2:	4618      	mov	r0, r3
 80046f4:	f001 ff54 	bl	80065a0 <RCCEx_PLL2_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046fe:	e004      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004706:	e000      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800470a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004712:	4bb7      	ldr	r3, [pc, #732]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800471a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800471e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004720:	4ab3      	ldr	r2, [pc, #716]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004722:	430b      	orrs	r3, r1
 8004724:	6513      	str	r3, [r2, #80]	; 0x50
 8004726:	e003      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800472c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800473c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004740:	2300      	movs	r3, #0
 8004742:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004746:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800474a:	460b      	mov	r3, r1
 800474c:	4313      	orrs	r3, r2
 800474e:	d039      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004756:	2b03      	cmp	r3, #3
 8004758:	d81c      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800475a:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004760:	0800479d 	.word	0x0800479d
 8004764:	08004771 	.word	0x08004771
 8004768:	0800477f 	.word	0x0800477f
 800476c:	0800479d 	.word	0x0800479d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004770:	4b9f      	ldr	r3, [pc, #636]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	4a9e      	ldr	r2, [pc, #632]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800477a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800477c:	e00f      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800477e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004782:	3308      	adds	r3, #8
 8004784:	2102      	movs	r1, #2
 8004786:	4618      	mov	r0, r3
 8004788:	f001 ff0a 	bl	80065a0 <RCCEx_PLL2_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004792:	e004      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800479a:	e000      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800479c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800479e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10a      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80047a6:	4b92      	ldr	r3, [pc, #584]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047aa:	f023 0103 	bic.w	r1, r3, #3
 80047ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b4:	4a8e      	ldr	r2, [pc, #568]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047b6:	430b      	orrs	r3, r1
 80047b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047ba:	e003      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80047d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047d4:	2300      	movs	r3, #0
 80047d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047de:	460b      	mov	r3, r1
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f000 8099 	beq.w	8004918 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047e6:	4b83      	ldr	r3, [pc, #524]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a82      	ldr	r2, [pc, #520]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047f2:	f7fc fd09 	bl	8001208 <HAL_GetTick>
 80047f6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047fa:	e00b      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fc:	f7fc fd04 	bl	8001208 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b64      	cmp	r3, #100	; 0x64
 800480a:	d903      	bls.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004812:	e005      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004814:	4b77      	ldr	r3, [pc, #476]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0ed      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004820:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004824:	2b00      	cmp	r3, #0
 8004826:	d173      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004828:	4b71      	ldr	r3, [pc, #452]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800482a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800482c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004830:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004834:	4053      	eors	r3, r2
 8004836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483a:	2b00      	cmp	r3, #0
 800483c:	d015      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800483e:	4b6c      	ldr	r3, [pc, #432]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004846:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800484a:	4b69      	ldr	r3, [pc, #420]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	4a68      	ldr	r2, [pc, #416]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004854:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004856:	4b66      	ldr	r3, [pc, #408]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a65      	ldr	r2, [pc, #404]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800485c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004862:	4a63      	ldr	r2, [pc, #396]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800486a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800486e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004876:	d118      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fc fcc6 	bl	8001208 <HAL_GetTick>
 800487c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004880:	e00d      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004882:	f7fc fcc1 	bl	8001208 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800488c:	1ad2      	subs	r2, r2, r3
 800488e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004892:	429a      	cmp	r2, r3
 8004894:	d903      	bls.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800489c:	e005      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800489e:	4b54      	ldr	r3, [pc, #336]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0eb      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80048aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d129      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c2:	d10e      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80048c4:	4b4a      	ldr	r3, [pc, #296]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80048cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048d4:	091a      	lsrs	r2, r3, #4
 80048d6:	4b48      	ldr	r3, [pc, #288]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048d8:	4013      	ands	r3, r2
 80048da:	4a45      	ldr	r2, [pc, #276]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048dc:	430b      	orrs	r3, r1
 80048de:	6113      	str	r3, [r2, #16]
 80048e0:	e005      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x852>
 80048e2:	4b43      	ldr	r3, [pc, #268]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	4a42      	ldr	r2, [pc, #264]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048ec:	6113      	str	r3, [r2, #16]
 80048ee:	4b40      	ldr	r3, [pc, #256]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80048f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048fe:	4a3c      	ldr	r2, [pc, #240]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004900:	430b      	orrs	r3, r1
 8004902:	6713      	str	r3, [r2, #112]	; 0x70
 8004904:	e008      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004906:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800490a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800490e:	e003      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004910:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004914:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f002 0301 	and.w	r3, r2, #1
 8004924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004928:	2300      	movs	r3, #0
 800492a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800492e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004932:	460b      	mov	r3, r1
 8004934:	4313      	orrs	r3, r2
 8004936:	f000 808f 	beq.w	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800493a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800493e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004940:	2b28      	cmp	r3, #40	; 0x28
 8004942:	d871      	bhi.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004944:	a201      	add	r2, pc, #4	; (adr r2, 800494c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	08004a31 	.word	0x08004a31
 8004950:	08004a29 	.word	0x08004a29
 8004954:	08004a29 	.word	0x08004a29
 8004958:	08004a29 	.word	0x08004a29
 800495c:	08004a29 	.word	0x08004a29
 8004960:	08004a29 	.word	0x08004a29
 8004964:	08004a29 	.word	0x08004a29
 8004968:	08004a29 	.word	0x08004a29
 800496c:	080049fd 	.word	0x080049fd
 8004970:	08004a29 	.word	0x08004a29
 8004974:	08004a29 	.word	0x08004a29
 8004978:	08004a29 	.word	0x08004a29
 800497c:	08004a29 	.word	0x08004a29
 8004980:	08004a29 	.word	0x08004a29
 8004984:	08004a29 	.word	0x08004a29
 8004988:	08004a29 	.word	0x08004a29
 800498c:	08004a13 	.word	0x08004a13
 8004990:	08004a29 	.word	0x08004a29
 8004994:	08004a29 	.word	0x08004a29
 8004998:	08004a29 	.word	0x08004a29
 800499c:	08004a29 	.word	0x08004a29
 80049a0:	08004a29 	.word	0x08004a29
 80049a4:	08004a29 	.word	0x08004a29
 80049a8:	08004a29 	.word	0x08004a29
 80049ac:	08004a31 	.word	0x08004a31
 80049b0:	08004a29 	.word	0x08004a29
 80049b4:	08004a29 	.word	0x08004a29
 80049b8:	08004a29 	.word	0x08004a29
 80049bc:	08004a29 	.word	0x08004a29
 80049c0:	08004a29 	.word	0x08004a29
 80049c4:	08004a29 	.word	0x08004a29
 80049c8:	08004a29 	.word	0x08004a29
 80049cc:	08004a31 	.word	0x08004a31
 80049d0:	08004a29 	.word	0x08004a29
 80049d4:	08004a29 	.word	0x08004a29
 80049d8:	08004a29 	.word	0x08004a29
 80049dc:	08004a29 	.word	0x08004a29
 80049e0:	08004a29 	.word	0x08004a29
 80049e4:	08004a29 	.word	0x08004a29
 80049e8:	08004a29 	.word	0x08004a29
 80049ec:	08004a31 	.word	0x08004a31
 80049f0:	58024400 	.word	0x58024400
 80049f4:	58024800 	.word	0x58024800
 80049f8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a00:	3308      	adds	r3, #8
 8004a02:	2101      	movs	r1, #1
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 fdcb 	bl	80065a0 <RCCEx_PLL2_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a10:	e00f      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a16:	3328      	adds	r3, #40	; 0x28
 8004a18:	2101      	movs	r1, #1
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f001 fe72 	bl	8006704 <RCCEx_PLL3_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a26:	e004      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a2e:	e000      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10a      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a3a:	4bbf      	ldr	r3, [pc, #764]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a48:	4abb      	ldr	r2, [pc, #748]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	6553      	str	r3, [r2, #84]	; 0x54
 8004a4e:	e003      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a60:	f002 0302 	and.w	r3, r2, #2
 8004a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4313      	orrs	r3, r2
 8004a76:	d041      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d824      	bhi.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004ad5 	.word	0x08004ad5
 8004a8c:	08004aa1 	.word	0x08004aa1
 8004a90:	08004ab7 	.word	0x08004ab7
 8004a94:	08004ad5 	.word	0x08004ad5
 8004a98:	08004ad5 	.word	0x08004ad5
 8004a9c:	08004ad5 	.word	0x08004ad5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 fd79 	bl	80065a0 <RCCEx_PLL2_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004ab4:	e00f      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aba:	3328      	adds	r3, #40	; 0x28
 8004abc:	2101      	movs	r1, #1
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 fe20 	bl	8006704 <RCCEx_PLL3_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004aca:	e004      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ad2:	e000      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10a      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ade:	4b96      	ldr	r3, [pc, #600]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	f023 0107 	bic.w	r1, r3, #7
 8004ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aec:	4a92      	ldr	r2, [pc, #584]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004aee:	430b      	orrs	r3, r1
 8004af0:	6553      	str	r3, [r2, #84]	; 0x54
 8004af2:	e003      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004af8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	f002 0304 	and.w	r3, r2, #4
 8004b08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b12:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b16:	460b      	mov	r3, r1
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	d044      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d825      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b7d 	.word	0x08004b7d
 8004b34:	08004b49 	.word	0x08004b49
 8004b38:	08004b5f 	.word	0x08004b5f
 8004b3c:	08004b7d 	.word	0x08004b7d
 8004b40:	08004b7d 	.word	0x08004b7d
 8004b44:	08004b7d 	.word	0x08004b7d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	2101      	movs	r1, #1
 8004b50:	4618      	mov	r0, r3
 8004b52:	f001 fd25 	bl	80065a0 <RCCEx_PLL2_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b5c:	e00f      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b62:	3328      	adds	r3, #40	; 0x28
 8004b64:	2101      	movs	r1, #1
 8004b66:	4618      	mov	r0, r3
 8004b68:	f001 fdcc 	bl	8006704 <RCCEx_PLL3_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b72:	e004      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b7a:	e000      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10b      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b86:	4b6c      	ldr	r3, [pc, #432]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8a:	f023 0107 	bic.w	r1, r3, #7
 8004b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b96:	4a68      	ldr	r2, [pc, #416]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b9c:	e003      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ba2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f002 0320 	and.w	r3, r2, #32
 8004bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004bbc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	d055      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bd2:	d033      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bd8:	d82c      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bde:	d02f      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be4:	d826      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004be6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bea:	d02b      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004bec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bf0:	d820      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bf6:	d012      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bfc:	d81a      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d022      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c06:	d115      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 fcc5 	bl	80065a0 <RCCEx_PLL2_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c1c:	e015      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c22:	3328      	adds	r3, #40	; 0x28
 8004c24:	2102      	movs	r1, #2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 fd6c 	bl	8006704 <RCCEx_PLL3_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c32:	e00a      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c3a:	e006      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004c3c:	bf00      	nop
 8004c3e:	e004      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004c40:	bf00      	nop
 8004c42:	e002      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004c44:	bf00      	nop
 8004c46:	e000      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10b      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c52:	4b39      	ldr	r3, [pc, #228]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c62:	4a35      	ldr	r2, [pc, #212]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6553      	str	r3, [r2, #84]	; 0x54
 8004c68:	e003      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c6e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004c7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c82:	2300      	movs	r3, #0
 8004c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c88:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	d058      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c9e:	d033      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004ca0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ca4:	d82c      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004caa:	d02f      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb0:	d826      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004cb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cb6:	d02b      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cbc:	d820      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc2:	d012      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc8:	d81a      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d022      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd2:	d115      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cd8:	3308      	adds	r3, #8
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 fc5f 	bl	80065a0 <RCCEx_PLL2_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ce8:	e015      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cee:	3328      	adds	r3, #40	; 0x28
 8004cf0:	2102      	movs	r1, #2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 fd06 	bl	8006704 <RCCEx_PLL3_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d06:	e006      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004d08:	bf00      	nop
 8004d0a:	e004      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004d0c:	bf00      	nop
 8004d0e:	e002      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004d10:	bf00      	nop
 8004d12:	e000      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10e      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d1e:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d2e:	4a02      	ldr	r2, [pc, #8]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6593      	str	r3, [r2, #88]	; 0x58
 8004d34:	e006      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004d36:	bf00      	nop
 8004d38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004d50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d54:	2300      	movs	r3, #0
 8004d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4313      	orrs	r3, r2
 8004d62:	d055      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d70:	d033      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004d72:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d76:	d82c      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7c:	d02f      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d82:	d826      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004d84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d88:	d02b      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004d8a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d8e:	d820      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d94:	d012      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d9a:	d81a      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d022      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da4:	d115      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004daa:	3308      	adds	r3, #8
 8004dac:	2100      	movs	r1, #0
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 fbf6 	bl	80065a0 <RCCEx_PLL2_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004dba:	e015      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dc0:	3328      	adds	r3, #40	; 0x28
 8004dc2:	2102      	movs	r1, #2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 fc9d 	bl	8006704 <RCCEx_PLL3_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004dd8:	e006      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004dda:	bf00      	nop
 8004ddc:	e004      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004dde:	bf00      	nop
 8004de0:	e002      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004de2:	bf00      	nop
 8004de4:	e000      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10b      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004df0:	4ba0      	ldr	r3, [pc, #640]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e00:	4a9c      	ldr	r2, [pc, #624]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e02:	430b      	orrs	r3, r1
 8004e04:	6593      	str	r3, [r2, #88]	; 0x58
 8004e06:	e003      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f002 0308 	and.w	r3, r2, #8
 8004e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e20:	2300      	movs	r3, #0
 8004e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e26:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	d01e      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3c:	d10c      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e42:	3328      	adds	r3, #40	; 0x28
 8004e44:	2102      	movs	r1, #2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 fc5c 	bl	8006704 <RCCEx_PLL3_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004e58:	4b86      	ldr	r3, [pc, #536]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e68:	4a82      	ldr	r2, [pc, #520]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e76:	f002 0310 	and.w	r3, r2, #16
 8004e7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e84:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	d01e      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e9a:	d10c      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea0:	3328      	adds	r3, #40	; 0x28
 8004ea2:	2102      	movs	r1, #2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f001 fc2d 	bl	8006704 <RCCEx_PLL3_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004eb6:	4b6f      	ldr	r3, [pc, #444]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec6:	4a6b      	ldr	r2, [pc, #428]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004ed8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eda:	2300      	movs	r3, #0
 8004edc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ede:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	d03e      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef4:	d022      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004ef6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004efa:	d81b      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f04:	d00b      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004f06:	e015      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f001 fb45 	bl	80065a0 <RCCEx_PLL2_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f1c:	e00f      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f22:	3328      	adds	r3, #40	; 0x28
 8004f24:	2102      	movs	r1, #2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 fbec 	bl	8006704 <RCCEx_PLL3_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f32:	e004      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f3a:	e000      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10b      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f46:	4b4b      	ldr	r3, [pc, #300]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f56:	4a47      	ldr	r2, [pc, #284]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f5c:	e003      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f62:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004f72:	673b      	str	r3, [r7, #112]	; 0x70
 8004f74:	2300      	movs	r3, #0
 8004f76:	677b      	str	r3, [r7, #116]	; 0x74
 8004f78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	d03b      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f8e:	d01f      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004f90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f94:	d818      	bhi.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9a:	d003      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fa0:	d007      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004fa2:	e011      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa4:	4b33      	ldr	r3, [pc, #204]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	4a32      	ldr	r2, [pc, #200]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004fb0:	e00f      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fb6:	3328      	adds	r3, #40	; 0x28
 8004fb8:	2101      	movs	r1, #1
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 fba2 	bl	8006704 <RCCEx_PLL3_Config>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004fc6:	e004      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004fce:	e000      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10b      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fda:	4b26      	ldr	r3, [pc, #152]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fde:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fea:	4a22      	ldr	r2, [pc, #136]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fec:	430b      	orrs	r3, r1
 8004fee:	6553      	str	r3, [r2, #84]	; 0x54
 8004ff0:	e003      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ff6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005006:	66bb      	str	r3, [r7, #104]	; 0x68
 8005008:	2300      	movs	r3, #0
 800500a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800500c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005010:	460b      	mov	r3, r1
 8005012:	4313      	orrs	r3, r2
 8005014:	d034      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800501a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005024:	d007      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005026:	e011      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005028:	4b12      	ldr	r3, [pc, #72]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	4a11      	ldr	r2, [pc, #68]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800502e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005034:	e00e      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800503a:	3308      	adds	r3, #8
 800503c:	2102      	movs	r1, #2
 800503e:	4618      	mov	r0, r3
 8005040:	f001 faae 	bl	80065a0 <RCCEx_PLL2_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800504a:	e003      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005054:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10d      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800505e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506a:	4a02      	ldr	r2, [pc, #8]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800506c:	430b      	orrs	r3, r1
 800506e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005070:	e006      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005072:	bf00      	nop
 8005074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800507c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800508c:	663b      	str	r3, [r7, #96]	; 0x60
 800508e:	2300      	movs	r3, #0
 8005090:	667b      	str	r3, [r7, #100]	; 0x64
 8005092:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005096:	460b      	mov	r3, r1
 8005098:	4313      	orrs	r3, r2
 800509a:	d00c      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800509c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a0:	3328      	adds	r3, #40	; 0x28
 80050a2:	2102      	movs	r1, #2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f001 fb2d 	bl	8006704 <RCCEx_PLL3_Config>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80050b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80050c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80050c4:	2300      	movs	r3, #0
 80050c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050c8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80050cc:	460b      	mov	r3, r1
 80050ce:	4313      	orrs	r3, r2
 80050d0:	d036      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80050d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050dc:	d018      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80050de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e2:	d811      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80050e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e8:	d014      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80050ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ee:	d80b      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d011      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80050f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f8:	d106      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050fa:	4bb7      	ldr	r3, [pc, #732]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	4ab6      	ldr	r2, [pc, #728]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005104:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005106:	e008      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800510e:	e004      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005110:	bf00      	nop
 8005112:	e002      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005114:	bf00      	nop
 8005116:	e000      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800511a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005122:	4bad      	ldr	r3, [pc, #692]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005126:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800512a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005130:	4aa9      	ldr	r2, [pc, #676]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005132:	430b      	orrs	r3, r1
 8005134:	6553      	str	r3, [r2, #84]	; 0x54
 8005136:	e003      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005138:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800513c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800514c:	653b      	str	r3, [r7, #80]	; 0x50
 800514e:	2300      	movs	r3, #0
 8005150:	657b      	str	r3, [r7, #84]	; 0x54
 8005152:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005156:	460b      	mov	r3, r1
 8005158:	4313      	orrs	r3, r2
 800515a:	d009      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800515c:	4b9e      	ldr	r3, [pc, #632]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800515e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005160:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	4a9b      	ldr	r2, [pc, #620]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800516c:	430b      	orrs	r3, r1
 800516e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800517c:	64bb      	str	r3, [r7, #72]	; 0x48
 800517e:	2300      	movs	r3, #0
 8005180:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005182:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005186:	460b      	mov	r3, r1
 8005188:	4313      	orrs	r3, r2
 800518a:	d009      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800518c:	4b92      	ldr	r3, [pc, #584]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800518e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005190:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800519a:	4a8f      	ldr	r2, [pc, #572]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800519c:	430b      	orrs	r3, r1
 800519e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80051ac:	643b      	str	r3, [r7, #64]	; 0x40
 80051ae:	2300      	movs	r3, #0
 80051b0:	647b      	str	r3, [r7, #68]	; 0x44
 80051b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80051b6:	460b      	mov	r3, r1
 80051b8:	4313      	orrs	r3, r2
 80051ba:	d00e      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051bc:	4b86      	ldr	r3, [pc, #536]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	4a85      	ldr	r2, [pc, #532]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051c6:	6113      	str	r3, [r2, #16]
 80051c8:	4b83      	ldr	r3, [pc, #524]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051ca:	6919      	ldr	r1, [r3, #16]
 80051cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051d4:	4a80      	ldr	r2, [pc, #512]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051d6:	430b      	orrs	r3, r1
 80051d8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80051e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80051e8:	2300      	movs	r3, #0
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80051f0:	460b      	mov	r3, r1
 80051f2:	4313      	orrs	r3, r2
 80051f4:	d009      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80051f6:	4b78      	ldr	r3, [pc, #480]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80051fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005204:	4a74      	ldr	r2, [pc, #464]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005206:	430b      	orrs	r3, r1
 8005208:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800520a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005216:	633b      	str	r3, [r7, #48]	; 0x30
 8005218:	2300      	movs	r3, #0
 800521a:	637b      	str	r3, [r7, #52]	; 0x34
 800521c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005220:	460b      	mov	r3, r1
 8005222:	4313      	orrs	r3, r2
 8005224:	d00a      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005226:	4b6c      	ldr	r3, [pc, #432]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800522e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005236:	4a68      	ldr	r2, [pc, #416]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005238:	430b      	orrs	r3, r1
 800523a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	2100      	movs	r1, #0
 8005246:	62b9      	str	r1, [r7, #40]	; 0x28
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800524e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005252:	460b      	mov	r3, r1
 8005254:	4313      	orrs	r3, r2
 8005256:	d011      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525c:	3308      	adds	r3, #8
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f001 f99d 	bl	80065a0 <RCCEx_PLL2_Config>
 8005266:	4603      	mov	r3, r0
 8005268:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800526c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005274:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005278:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800527c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	2100      	movs	r1, #0
 8005286:	6239      	str	r1, [r7, #32]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
 800528e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005292:	460b      	mov	r3, r1
 8005294:	4313      	orrs	r3, r2
 8005296:	d011      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529c:	3308      	adds	r3, #8
 800529e:	2101      	movs	r1, #1
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 f97d 	bl	80065a0 <RCCEx_PLL2_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80052ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	2100      	movs	r1, #0
 80052c6:	61b9      	str	r1, [r7, #24]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80052d2:	460b      	mov	r3, r1
 80052d4:	4313      	orrs	r3, r2
 80052d6:	d011      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052dc:	3308      	adds	r3, #8
 80052de:	2102      	movs	r1, #2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f001 f95d 	bl	80065a0 <RCCEx_PLL2_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80052ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	2100      	movs	r1, #0
 8005306:	6139      	str	r1, [r7, #16]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005312:	460b      	mov	r3, r1
 8005314:	4313      	orrs	r3, r2
 8005316:	d011      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800531c:	3328      	adds	r3, #40	; 0x28
 800531e:	2100      	movs	r1, #0
 8005320:	4618      	mov	r0, r3
 8005322:	f001 f9ef 	bl	8006704 <RCCEx_PLL3_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800532c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005334:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005338:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	2100      	movs	r1, #0
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005352:	460b      	mov	r3, r1
 8005354:	4313      	orrs	r3, r2
 8005356:	d011      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535c:	3328      	adds	r3, #40	; 0x28
 800535e:	2101      	movs	r1, #1
 8005360:	4618      	mov	r0, r3
 8005362:	f001 f9cf 	bl	8006704 <RCCEx_PLL3_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800536c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005378:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800537c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	2100      	movs	r1, #0
 8005386:	6039      	str	r1, [r7, #0]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	607b      	str	r3, [r7, #4]
 800538e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005392:	460b      	mov	r3, r1
 8005394:	4313      	orrs	r3, r2
 8005396:	d011      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539c:	3328      	adds	r3, #40	; 0x28
 800539e:	2102      	movs	r1, #2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f001 f9af 	bl	8006704 <RCCEx_PLL3_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80053ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80053bc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e000      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80053d0:	46bd      	mov	sp, r7
 80053d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053d6:	bf00      	nop
 80053d8:	58024400 	.word	0x58024400

080053dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b090      	sub	sp, #64	; 0x40
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80053e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053ea:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80053ee:	430b      	orrs	r3, r1
 80053f0:	f040 8094 	bne.w	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80053f4:	4b9b      	ldr	r3, [pc, #620]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80053f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	2b04      	cmp	r3, #4
 8005402:	f200 8087 	bhi.w	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005406:	a201      	add	r2, pc, #4	; (adr r2, 800540c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	08005421 	.word	0x08005421
 8005410:	08005449 	.word	0x08005449
 8005414:	08005471 	.word	0x08005471
 8005418:	0800550d 	.word	0x0800550d
 800541c:	08005499 	.word	0x08005499
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005420:	4b90      	ldr	r3, [pc, #576]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800542c:	d108      	bne.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800542e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005432:	4618      	mov	r0, r3
 8005434:	f000 ff62 	bl	80062fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800543c:	f000 bc93 	b.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005444:	f000 bc8f 	b.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005448:	4b86      	ldr	r3, [pc, #536]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005454:	d108      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005456:	f107 0318 	add.w	r3, r7, #24
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fca6 	bl	8005dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005464:	f000 bc7f 	b.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800546c:	f000 bc7b 	b.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005470:	4b7c      	ldr	r3, [pc, #496]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800547c:	d108      	bne.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800547e:	f107 030c 	add.w	r3, r7, #12
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fde6 	bl	8006054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800548c:	f000 bc6b 	b.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005494:	f000 bc67 	b.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005498:	4b72      	ldr	r3, [pc, #456]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800549a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800549c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054a2:	4b70      	ldr	r3, [pc, #448]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d10c      	bne.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80054ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d109      	bne.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054b4:	4b6b      	ldr	r3, [pc, #428]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	08db      	lsrs	r3, r3, #3
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	4a6a      	ldr	r2, [pc, #424]	; (8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
 80054c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054c6:	e01f      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054c8:	4b66      	ldr	r3, [pc, #408]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d4:	d106      	bne.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80054d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054dc:	d102      	bne.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80054de:	4b63      	ldr	r3, [pc, #396]	; (800566c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80054e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e2:	e011      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054e4:	4b5f      	ldr	r3, [pc, #380]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054f0:	d106      	bne.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f8:	d102      	bne.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80054fa:	4b5d      	ldr	r3, [pc, #372]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fe:	e003      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005504:	f000 bc2f 	b.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005508:	f000 bc2d 	b.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800550c:	4b59      	ldr	r3, [pc, #356]	; (8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800550e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005510:	f000 bc29 	b.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005518:	f000 bc25 	b.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800551c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005520:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005524:	430b      	orrs	r3, r1
 8005526:	f040 80a7 	bne.w	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800552a:	4b4e      	ldr	r3, [pc, #312]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800552c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005532:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800553a:	d054      	beq.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005542:	f200 808b 	bhi.w	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800554c:	f000 8083 	beq.w	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005556:	f200 8081 	bhi.w	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005560:	d02f      	beq.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005568:	d878      	bhi.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005576:	d012      	beq.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8005578:	e070      	b.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800557a:	4b3a      	ldr	r3, [pc, #232]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005586:	d107      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800558c:	4618      	mov	r0, r3
 800558e:	f000 feb5 	bl	80062fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005596:	e3e6      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800559c:	e3e3      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800559e:	4b31      	ldr	r3, [pc, #196]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055aa:	d107      	bne.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ac:	f107 0318 	add.w	r3, r7, #24
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fbfb 	bl	8005dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055ba:	e3d4      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c0:	e3d1      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055c2:	4b28      	ldr	r3, [pc, #160]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ce:	d107      	bne.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055d0:	f107 030c 	add.w	r3, r7, #12
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fd3d 	bl	8006054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055de:	e3c2      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055e4:	e3bf      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80055e6:	4b1f      	ldr	r3, [pc, #124]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055f0:	4b1c      	ldr	r3, [pc, #112]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d10c      	bne.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80055fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005602:	4b18      	ldr	r3, [pc, #96]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	08db      	lsrs	r3, r3, #3
 8005608:	f003 0303 	and.w	r3, r3, #3
 800560c:	4a16      	ldr	r2, [pc, #88]	; (8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800560e:	fa22 f303 	lsr.w	r3, r2, r3
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005614:	e01e      	b.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005616:	4b13      	ldr	r3, [pc, #76]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005622:	d106      	bne.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800562a:	d102      	bne.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800562c:	4b0f      	ldr	r3, [pc, #60]	; (800566c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005630:	e010      	b.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005632:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800563e:	d106      	bne.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005646:	d102      	bne.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005648:	4b09      	ldr	r3, [pc, #36]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800564c:	e002      	b.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005652:	e388      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005654:	e387      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005656:	4b07      	ldr	r3, [pc, #28]	; (8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800565a:	e384      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005660:	e381      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005662:	bf00      	nop
 8005664:	58024400 	.word	0x58024400
 8005668:	03d09000 	.word	0x03d09000
 800566c:	003d0900 	.word	0x003d0900
 8005670:	017d7840 	.word	0x017d7840
 8005674:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800567c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005680:	430b      	orrs	r3, r1
 8005682:	f040 809c 	bne.w	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005686:	4b9e      	ldr	r3, [pc, #632]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800568e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005696:	d054      	beq.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800569e:	f200 808b 	bhi.w	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056a8:	f000 8083 	beq.w	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056b2:	f200 8081 	bhi.w	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056bc:	d02f      	beq.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c4:	d878      	bhi.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056d2:	d012      	beq.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80056d4:	e070      	b.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056d6:	4b8a      	ldr	r3, [pc, #552]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056e2:	d107      	bne.n	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 fe07 	bl	80062fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056f2:	e338      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056f8:	e335      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056fa:	4b81      	ldr	r3, [pc, #516]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005706:	d107      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005708:	f107 0318 	add.w	r3, r7, #24
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fb4d 	bl	8005dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005716:	e326      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800571c:	e323      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800571e:	4b78      	ldr	r3, [pc, #480]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800572a:	d107      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800572c:	f107 030c 	add.w	r3, r7, #12
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fc8f 	bl	8006054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800573a:	e314      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005740:	e311      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005742:	4b6f      	ldr	r3, [pc, #444]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005746:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800574a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800574c:	4b6c      	ldr	r3, [pc, #432]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b04      	cmp	r3, #4
 8005756:	d10c      	bne.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	2b00      	cmp	r3, #0
 800575c:	d109      	bne.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800575e:	4b68      	ldr	r3, [pc, #416]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	08db      	lsrs	r3, r3, #3
 8005764:	f003 0303 	and.w	r3, r3, #3
 8005768:	4a66      	ldr	r2, [pc, #408]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800576a:	fa22 f303 	lsr.w	r3, r2, r3
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005770:	e01e      	b.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005772:	4b63      	ldr	r3, [pc, #396]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577e:	d106      	bne.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005786:	d102      	bne.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005788:	4b5f      	ldr	r3, [pc, #380]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800578c:	e010      	b.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800578e:	4b5c      	ldr	r3, [pc, #368]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005796:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800579a:	d106      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800579c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a2:	d102      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80057a4:	4b59      	ldr	r3, [pc, #356]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a8:	e002      	b.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80057ae:	e2da      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80057b0:	e2d9      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80057b2:	4b57      	ldr	r3, [pc, #348]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057b6:	e2d6      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057bc:	e2d3      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80057be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057c2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80057c6:	430b      	orrs	r3, r1
 80057c8:	f040 80a7 	bne.w	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80057cc:	4b4c      	ldr	r3, [pc, #304]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80057ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80057d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057dc:	d055      	beq.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057e4:	f200 8096 	bhi.w	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057ee:	f000 8084 	beq.w	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057f8:	f200 808c 	bhi.w	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005802:	d030      	beq.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580a:	f200 8083 	bhi.w	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d004      	beq.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581a:	d012      	beq.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800581c:	e07a      	b.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800581e:	4b38      	ldr	r3, [pc, #224]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800582a:	d107      	bne.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800582c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fd63 	bl	80062fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800583a:	e294      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005840:	e291      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005842:	4b2f      	ldr	r3, [pc, #188]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800584a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800584e:	d107      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005850:	f107 0318 	add.w	r3, r7, #24
 8005854:	4618      	mov	r0, r3
 8005856:	f000 faa9 	bl	8005dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800585e:	e282      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005864:	e27f      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005866:	4b26      	ldr	r3, [pc, #152]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800586e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005872:	d107      	bne.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005874:	f107 030c 	add.w	r3, r7, #12
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fbeb 	bl	8006054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005882:	e270      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005884:	2300      	movs	r3, #0
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005888:	e26d      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800588a:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800588c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800588e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005892:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005894:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b04      	cmp	r3, #4
 800589e:	d10c      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80058a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d109      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058a6:	4b16      	ldr	r3, [pc, #88]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	08db      	lsrs	r3, r3, #3
 80058ac:	f003 0303 	and.w	r3, r3, #3
 80058b0:	4a14      	ldr	r2, [pc, #80]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80058b2:	fa22 f303 	lsr.w	r3, r2, r3
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b8:	e01e      	b.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058ba:	4b11      	ldr	r3, [pc, #68]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c6:	d106      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80058c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ce:	d102      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80058d0:	4b0d      	ldr	r3, [pc, #52]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d4:	e010      	b.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058d6:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e2:	d106      	bne.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80058e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ea:	d102      	bne.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80058ec:	4b07      	ldr	r3, [pc, #28]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f0:	e002      	b.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80058f6:	e236      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80058f8:	e235      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058fe:	e232      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005900:	58024400 	.word	0x58024400
 8005904:	03d09000 	.word	0x03d09000
 8005908:	003d0900 	.word	0x003d0900
 800590c:	017d7840 	.word	0x017d7840
 8005910:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005918:	e225      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800591a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800591e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005922:	430b      	orrs	r3, r1
 8005924:	f040 8085 	bne.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005928:	4b9c      	ldr	r3, [pc, #624]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800592a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800592c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005930:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005938:	d06b      	beq.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005940:	d874      	bhi.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005948:	d056      	beq.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005950:	d86c      	bhi.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005958:	d03b      	beq.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005960:	d864      	bhi.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005968:	d021      	beq.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005970:	d85c      	bhi.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	2b00      	cmp	r3, #0
 8005976:	d004      	beq.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597e:	d004      	beq.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8005980:	e054      	b.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005982:	f7fe fb75 	bl	8004070 <HAL_RCC_GetPCLK1Freq>
 8005986:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005988:	e1ed      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800598a:	4b84      	ldr	r3, [pc, #528]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005996:	d107      	bne.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005998:	f107 0318 	add.w	r3, r7, #24
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fa05 	bl	8005dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059a6:	e1de      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059ac:	e1db      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059ae:	4b7b      	ldr	r3, [pc, #492]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ba:	d107      	bne.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059bc:	f107 030c 	add.w	r3, r7, #12
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fb47 	bl	8006054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059ca:	e1cc      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059d0:	e1c9      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059d2:	4b72      	ldr	r3, [pc, #456]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d109      	bne.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059de:	4b6f      	ldr	r3, [pc, #444]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	08db      	lsrs	r3, r3, #3
 80059e4:	f003 0303 	and.w	r3, r3, #3
 80059e8:	4a6d      	ldr	r2, [pc, #436]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80059ea:	fa22 f303 	lsr.w	r3, r2, r3
 80059ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059f0:	e1b9      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059f6:	e1b6      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80059f8:	4b68      	ldr	r3, [pc, #416]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a04:	d102      	bne.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8005a06:	4b67      	ldr	r3, [pc, #412]	; (8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a0a:	e1ac      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a10:	e1a9      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a12:	4b62      	ldr	r3, [pc, #392]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a1e:	d102      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8005a20:	4b61      	ldr	r3, [pc, #388]	; (8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a24:	e19f      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a2a:	e19c      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a30:	e199      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a36:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005a3a:	430b      	orrs	r3, r1
 8005a3c:	d173      	bne.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005a3e:	4b57      	ldr	r3, [pc, #348]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a46:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a4e:	d02f      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a56:	d863      	bhi.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8005a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d004      	beq.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a64:	d012      	beq.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8005a66:	e05b      	b.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a68:	4b4c      	ldr	r3, [pc, #304]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a74:	d107      	bne.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a76:	f107 0318 	add.w	r3, r7, #24
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f996 	bl	8005dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a84:	e16f      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a86:	2300      	movs	r3, #0
 8005a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a8a:	e16c      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a8c:	4b43      	ldr	r3, [pc, #268]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a98:	d107      	bne.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a9a:	f107 030c 	add.w	r3, r7, #12
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fad8 	bl	8006054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aa8:	e15d      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aae:	e15a      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ab0:	4b3a      	ldr	r3, [pc, #232]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005aba:	4b38      	ldr	r3, [pc, #224]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d109      	bne.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005acc:	4b33      	ldr	r3, [pc, #204]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	08db      	lsrs	r3, r3, #3
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	4a32      	ldr	r2, [pc, #200]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8005adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ade:	e01e      	b.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ae0:	4b2e      	ldr	r3, [pc, #184]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aec:	d106      	bne.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005af4:	d102      	bne.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005af6:	4b2b      	ldr	r3, [pc, #172]	; (8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005afa:	e010      	b.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005afc:	4b27      	ldr	r3, [pc, #156]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b08:	d106      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b10:	d102      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b12:	4b25      	ldr	r3, [pc, #148]	; (8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b16:	e002      	b.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005b1c:	e123      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005b1e:	e122      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b24:	e11f      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b2a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005b2e:	430b      	orrs	r3, r1
 8005b30:	d13c      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005b32:	4b1a      	ldr	r3, [pc, #104]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b3a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d004      	beq.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b48:	d012      	beq.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8005b4a:	e023      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b4c:	4b13      	ldr	r3, [pc, #76]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b58:	d107      	bne.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fbcc 	bl	80062fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b68:	e0fd      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b6e:	e0fa      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b7c:	d107      	bne.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b7e:	f107 0318 	add.w	r3, r7, #24
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 f912 	bl	8005dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b8c:	e0eb      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b92:	e0e8      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b98:	e0e5      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005b9a:	bf00      	nop
 8005b9c:	58024400 	.word	0x58024400
 8005ba0:	03d09000 	.word	0x03d09000
 8005ba4:	003d0900 	.word	0x003d0900
 8005ba8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	f040 8085 	bne.w	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005bba:	4b6d      	ldr	r3, [pc, #436]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005bc2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bca:	d06b      	beq.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bd2:	d874      	bhi.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bda:	d056      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be2:	d86c      	bhi.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bea:	d03b      	beq.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bf2:	d864      	bhi.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bfa:	d021      	beq.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c02:	d85c      	bhi.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c10:	d004      	beq.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005c12:	e054      	b.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005c14:	f000 f8b4 	bl	8005d80 <HAL_RCCEx_GetD3PCLK1Freq>
 8005c18:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c1a:	e0a4      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c1c:	4b54      	ldr	r3, [pc, #336]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c28:	d107      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c2a:	f107 0318 	add.w	r3, r7, #24
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 f8bc 	bl	8005dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c38:	e095      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c3e:	e092      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c40:	4b4b      	ldr	r3, [pc, #300]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c4c:	d107      	bne.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c4e:	f107 030c 	add.w	r3, r7, #12
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 f9fe 	bl	8006054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c5c:	e083      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c62:	e080      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c64:	4b42      	ldr	r3, [pc, #264]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d109      	bne.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c70:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	08db      	lsrs	r3, r3, #3
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	4a3e      	ldr	r2, [pc, #248]	; (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c82:	e070      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c88:	e06d      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005c8a:	4b39      	ldr	r3, [pc, #228]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c96:	d102      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8005c98:	4b37      	ldr	r3, [pc, #220]	; (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c9c:	e063      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ca2:	e060      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ca4:	4b32      	ldr	r3, [pc, #200]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb0:	d102      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8005cb2:	4b32      	ldr	r3, [pc, #200]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cb6:	e056      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cbc:	e053      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cc2:	e050      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cc8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	d148      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005cd0:	4b27      	ldr	r3, [pc, #156]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cd8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ce0:	d02a      	beq.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ce8:	d838      	bhi.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d004      	beq.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cf6:	d00d      	beq.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005cf8:	e030      	b.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005cfa:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d06:	d102      	bne.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8005d08:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d0c:	e02b      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d12:	e028      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d20:	d107      	bne.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fae8 	bl	80062fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d30:	e019      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d36:	e016      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d38:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d44:	d107      	bne.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d46:	f107 0318 	add.w	r3, r7, #24
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 f82e 	bl	8005dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d54:	e007      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d5a:	e004      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d60:	e001      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3740      	adds	r7, #64	; 0x40
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	58024400 	.word	0x58024400
 8005d74:	03d09000 	.word	0x03d09000
 8005d78:	003d0900 	.word	0x003d0900
 8005d7c:	017d7840 	.word	0x017d7840

08005d80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d84:	f7fe f944 	bl	8004010 <HAL_RCC_GetHCLKFreq>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	091b      	lsrs	r3, r3, #4
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	4904      	ldr	r1, [pc, #16]	; (8005da8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d96:	5ccb      	ldrb	r3, [r1, r3]
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	58024400 	.word	0x58024400
 8005da8:	08007604 	.word	0x08007604

08005dac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b089      	sub	sp, #36	; 0x24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005db4:	4ba1      	ldr	r3, [pc, #644]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005dbe:	4b9f      	ldr	r3, [pc, #636]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc2:	0b1b      	lsrs	r3, r3, #12
 8005dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005dca:	4b9c      	ldr	r3, [pc, #624]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dce:	091b      	lsrs	r3, r3, #4
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005dd6:	4b99      	ldr	r3, [pc, #612]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dda:	08db      	lsrs	r3, r3, #3
 8005ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	fb02 f303 	mul.w	r3, r2, r3
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 8111 	beq.w	800601c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	f000 8083 	beq.w	8005f08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	f200 80a1 	bhi.w	8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d056      	beq.n	8005ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e16:	e099      	b.n	8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e18:	4b88      	ldr	r3, [pc, #544]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d02d      	beq.n	8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e24:	4b85      	ldr	r3, [pc, #532]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	08db      	lsrs	r3, r3, #3
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	4a84      	ldr	r2, [pc, #528]	; (8006040 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e30:	fa22 f303 	lsr.w	r3, r2, r3
 8005e34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e4e:	4b7b      	ldr	r3, [pc, #492]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e7e:	e087      	b.n	8005f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006048 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e92:	4b6a      	ldr	r3, [pc, #424]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ea6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ec2:	e065      	b.n	8005f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ece:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800604c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed6:	4b59      	ldr	r3, [pc, #356]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f06:	e043      	b.n	8005f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1a:	4b48      	ldr	r3, [pc, #288]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f4a:	e021      	b.n	8005f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800604c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5e:	4b37      	ldr	r3, [pc, #220]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005f90:	4b2a      	ldr	r3, [pc, #168]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	0a5b      	lsrs	r3, r3, #9
 8005f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fb6:	ee17 2a90 	vmov	r2, s15
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005fbe:	4b1f      	ldr	r3, [pc, #124]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc8:	ee07 3a90 	vmov	s15, r3
 8005fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fe4:	ee17 2a90 	vmov	r2, s15
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005fec:	4b13      	ldr	r3, [pc, #76]	; (800603c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	0e1b      	lsrs	r3, r3, #24
 8005ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006006:	edd7 6a07 	vldr	s13, [r7, #28]
 800600a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800600e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006012:	ee17 2a90 	vmov	r2, s15
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800601a:	e008      	b.n	800602e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	609a      	str	r2, [r3, #8]
}
 800602e:	bf00      	nop
 8006030:	3724      	adds	r7, #36	; 0x24
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	58024400 	.word	0x58024400
 8006040:	03d09000 	.word	0x03d09000
 8006044:	46000000 	.word	0x46000000
 8006048:	4c742400 	.word	0x4c742400
 800604c:	4a742400 	.word	0x4a742400
 8006050:	4bbebc20 	.word	0x4bbebc20

08006054 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006054:	b480      	push	{r7}
 8006056:	b089      	sub	sp, #36	; 0x24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800605c:	4ba1      	ldr	r3, [pc, #644]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	f003 0303 	and.w	r3, r3, #3
 8006064:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006066:	4b9f      	ldr	r3, [pc, #636]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606a:	0d1b      	lsrs	r3, r3, #20
 800606c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006070:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006072:	4b9c      	ldr	r3, [pc, #624]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800607e:	4b99      	ldr	r3, [pc, #612]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006082:	08db      	lsrs	r3, r3, #3
 8006084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	fb02 f303 	mul.w	r3, r2, r3
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 8111 	beq.w	80062c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	f000 8083 	beq.w	80061b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	f200 80a1 	bhi.w	80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d056      	beq.n	800616c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060be:	e099      	b.n	80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060c0:	4b88      	ldr	r3, [pc, #544]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d02d      	beq.n	8006128 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060cc:	4b85      	ldr	r3, [pc, #532]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	08db      	lsrs	r3, r3, #3
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	4a84      	ldr	r2, [pc, #528]	; (80062e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80060d8:	fa22 f303 	lsr.w	r3, r2, r3
 80060dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	ee07 3a90 	vmov	s15, r3
 80060e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f6:	4b7b      	ldr	r3, [pc, #492]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006106:	ed97 6a03 	vldr	s12, [r7, #12]
 800610a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80062ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800610e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800611a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006122:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006126:	e087      	b.n	8006238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006132:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80062f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800613a:	4b6a      	ldr	r3, [pc, #424]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800614a:	ed97 6a03 	vldr	s12, [r7, #12]
 800614e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80062ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800615a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800615e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800616a:	e065      	b.n	8006238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006176:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800617a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800617e:	4b59      	ldr	r3, [pc, #356]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800618e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006192:	eddf 5a56 	vldr	s11, [pc, #344]	; 80062ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800619a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800619e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ae:	e043      	b.n	8006238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80062f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c2:	4b48      	ldr	r3, [pc, #288]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80062ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061f2:	e021      	b.n	8006238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006206:	4b37      	ldr	r3, [pc, #220]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006216:	ed97 6a03 	vldr	s12, [r7, #12]
 800621a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80062ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800621e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800622a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006236:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006238:	4b2a      	ldr	r3, [pc, #168]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	0a5b      	lsrs	r3, r3, #9
 800623e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800624e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006252:	edd7 6a07 	vldr	s13, [r7, #28]
 8006256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800625a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800625e:	ee17 2a90 	vmov	r2, s15
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006266:	4b1f      	ldr	r3, [pc, #124]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	0c1b      	lsrs	r3, r3, #16
 800626c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006270:	ee07 3a90 	vmov	s15, r3
 8006274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800627c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006280:	edd7 6a07 	vldr	s13, [r7, #28]
 8006284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800628c:	ee17 2a90 	vmov	r2, s15
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006294:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006298:	0e1b      	lsrs	r3, r3, #24
 800629a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80062b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ba:	ee17 2a90 	vmov	r2, s15
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062c2:	e008      	b.n	80062d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	609a      	str	r2, [r3, #8]
}
 80062d6:	bf00      	nop
 80062d8:	3724      	adds	r7, #36	; 0x24
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	58024400 	.word	0x58024400
 80062e8:	03d09000 	.word	0x03d09000
 80062ec:	46000000 	.word	0x46000000
 80062f0:	4c742400 	.word	0x4c742400
 80062f4:	4a742400 	.word	0x4a742400
 80062f8:	4bbebc20 	.word	0x4bbebc20

080062fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b089      	sub	sp, #36	; 0x24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006304:	4ba0      	ldr	r3, [pc, #640]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	f003 0303 	and.w	r3, r3, #3
 800630c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800630e:	4b9e      	ldr	r3, [pc, #632]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	091b      	lsrs	r3, r3, #4
 8006314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006318:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800631a:	4b9b      	ldr	r3, [pc, #620]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006324:	4b98      	ldr	r3, [pc, #608]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006328:	08db      	lsrs	r3, r3, #3
 800632a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	fb02 f303 	mul.w	r3, r2, r3
 8006334:	ee07 3a90 	vmov	s15, r3
 8006338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 8111 	beq.w	800656a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2b02      	cmp	r3, #2
 800634c:	f000 8083 	beq.w	8006456 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	2b02      	cmp	r3, #2
 8006354:	f200 80a1 	bhi.w	800649a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d056      	beq.n	8006412 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006364:	e099      	b.n	800649a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006366:	4b88      	ldr	r3, [pc, #544]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d02d      	beq.n	80063ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006372:	4b85      	ldr	r3, [pc, #532]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	08db      	lsrs	r3, r3, #3
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	4a83      	ldr	r2, [pc, #524]	; (800658c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800637e:	fa22 f303 	lsr.w	r3, r2, r3
 8006382:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	ee07 3a90 	vmov	s15, r3
 8006394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800639c:	4b7a      	ldr	r3, [pc, #488]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80063b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80063cc:	e087      	b.n	80064de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	ee07 3a90 	vmov	s15, r3
 80063d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006594 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80063dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063e0:	4b69      	ldr	r3, [pc, #420]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e8:	ee07 3a90 	vmov	s15, r3
 80063ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80063f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006400:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006404:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800640c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006410:	e065      	b.n	80064de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	ee07 3a90 	vmov	s15, r3
 8006418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006598 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006424:	4b58      	ldr	r3, [pc, #352]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642c:	ee07 3a90 	vmov	s15, r3
 8006430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006434:	ed97 6a03 	vldr	s12, [r7, #12]
 8006438:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800643c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006448:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800644c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006450:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006454:	e043      	b.n	80064de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	ee07 3a90 	vmov	s15, r3
 800645c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006460:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800659c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006468:	4b47      	ldr	r3, [pc, #284]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006470:	ee07 3a90 	vmov	s15, r3
 8006474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006478:	ed97 6a03 	vldr	s12, [r7, #12]
 800647c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006480:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800648c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006494:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006498:	e021      	b.n	80064de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	ee07 3a90 	vmov	s15, r3
 80064a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006594 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80064a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ac:	4b36      	ldr	r3, [pc, #216]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b4:	ee07 3a90 	vmov	s15, r3
 80064b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80064c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80064c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80064de:	4b2a      	ldr	r3, [pc, #168]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	0a5b      	lsrs	r3, r3, #9
 80064e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e8:	ee07 3a90 	vmov	s15, r3
 80064ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80064fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006504:	ee17 2a90 	vmov	r2, s15
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800650c:	4b1e      	ldr	r3, [pc, #120]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006526:	edd7 6a07 	vldr	s13, [r7, #28]
 800652a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800652e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006532:	ee17 2a90 	vmov	r2, s15
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800653a:	4b13      	ldr	r3, [pc, #76]	; (8006588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	0e1b      	lsrs	r3, r3, #24
 8006540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006544:	ee07 3a90 	vmov	s15, r3
 8006548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006550:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006554:	edd7 6a07 	vldr	s13, [r7, #28]
 8006558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800655c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006560:	ee17 2a90 	vmov	r2, s15
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006568:	e008      	b.n	800657c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	609a      	str	r2, [r3, #8]
}
 800657c:	bf00      	nop
 800657e:	3724      	adds	r7, #36	; 0x24
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	58024400 	.word	0x58024400
 800658c:	03d09000 	.word	0x03d09000
 8006590:	46000000 	.word	0x46000000
 8006594:	4c742400 	.word	0x4c742400
 8006598:	4a742400 	.word	0x4a742400
 800659c:	4bbebc20 	.word	0x4bbebc20

080065a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065ae:	4b53      	ldr	r3, [pc, #332]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 80065b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d101      	bne.n	80065be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e099      	b.n	80066f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80065be:	4b4f      	ldr	r3, [pc, #316]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a4e      	ldr	r2, [pc, #312]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 80065c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ca:	f7fa fe1d 	bl	8001208 <HAL_GetTick>
 80065ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065d0:	e008      	b.n	80065e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80065d2:	f7fa fe19 	bl	8001208 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e086      	b.n	80066f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065e4:	4b45      	ldr	r3, [pc, #276]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f0      	bne.n	80065d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80065f0:	4b42      	ldr	r3, [pc, #264]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	031b      	lsls	r3, r3, #12
 80065fe:	493f      	ldr	r1, [pc, #252]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 8006600:	4313      	orrs	r3, r2
 8006602:	628b      	str	r3, [r1, #40]	; 0x28
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	3b01      	subs	r3, #1
 800660a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	3b01      	subs	r3, #1
 8006614:	025b      	lsls	r3, r3, #9
 8006616:	b29b      	uxth	r3, r3
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	3b01      	subs	r3, #1
 8006620:	041b      	lsls	r3, r3, #16
 8006622:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	3b01      	subs	r3, #1
 800662e:	061b      	lsls	r3, r3, #24
 8006630:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006634:	4931      	ldr	r1, [pc, #196]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 8006636:	4313      	orrs	r3, r2
 8006638:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800663a:	4b30      	ldr	r3, [pc, #192]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	492d      	ldr	r1, [pc, #180]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 8006648:	4313      	orrs	r3, r2
 800664a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800664c:	4b2b      	ldr	r3, [pc, #172]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	f023 0220 	bic.w	r2, r3, #32
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	4928      	ldr	r1, [pc, #160]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 800665a:	4313      	orrs	r3, r2
 800665c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800665e:	4b27      	ldr	r3, [pc, #156]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 8006660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006662:	4a26      	ldr	r2, [pc, #152]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 8006664:	f023 0310 	bic.w	r3, r3, #16
 8006668:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800666a:	4b24      	ldr	r3, [pc, #144]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 800666c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800666e:	4b24      	ldr	r3, [pc, #144]	; (8006700 <RCCEx_PLL2_Config+0x160>)
 8006670:	4013      	ands	r3, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	69d2      	ldr	r2, [r2, #28]
 8006676:	00d2      	lsls	r2, r2, #3
 8006678:	4920      	ldr	r1, [pc, #128]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 800667a:	4313      	orrs	r3, r2
 800667c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800667e:	4b1f      	ldr	r3, [pc, #124]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	4a1e      	ldr	r2, [pc, #120]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 8006684:	f043 0310 	orr.w	r3, r3, #16
 8006688:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d106      	bne.n	800669e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006690:	4b1a      	ldr	r3, [pc, #104]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	4a19      	ldr	r2, [pc, #100]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 8006696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800669a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800669c:	e00f      	b.n	80066be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d106      	bne.n	80066b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80066a4:	4b15      	ldr	r3, [pc, #84]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	4a14      	ldr	r2, [pc, #80]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 80066aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066b0:	e005      	b.n	80066be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80066b2:	4b12      	ldr	r3, [pc, #72]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	4a11      	ldr	r2, [pc, #68]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 80066b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80066be:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a0e      	ldr	r2, [pc, #56]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 80066c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ca:	f7fa fd9d 	bl	8001208 <HAL_GetTick>
 80066ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066d0:	e008      	b.n	80066e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80066d2:	f7fa fd99 	bl	8001208 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e006      	b.n	80066f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066e4:	4b05      	ldr	r3, [pc, #20]	; (80066fc <RCCEx_PLL2_Config+0x15c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0f0      	beq.n	80066d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	58024400 	.word	0x58024400
 8006700:	ffff0007 	.word	0xffff0007

08006704 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006712:	4b53      	ldr	r3, [pc, #332]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 8006714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	2b03      	cmp	r3, #3
 800671c:	d101      	bne.n	8006722 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e099      	b.n	8006856 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006722:	4b4f      	ldr	r3, [pc, #316]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a4e      	ldr	r2, [pc, #312]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 8006728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800672c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800672e:	f7fa fd6b 	bl	8001208 <HAL_GetTick>
 8006732:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006734:	e008      	b.n	8006748 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006736:	f7fa fd67 	bl	8001208 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e086      	b.n	8006856 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006748:	4b45      	ldr	r3, [pc, #276]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1f0      	bne.n	8006736 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006754:	4b42      	ldr	r3, [pc, #264]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	051b      	lsls	r3, r3, #20
 8006762:	493f      	ldr	r1, [pc, #252]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 8006764:	4313      	orrs	r3, r2
 8006766:	628b      	str	r3, [r1, #40]	; 0x28
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	3b01      	subs	r3, #1
 800676e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	3b01      	subs	r3, #1
 8006778:	025b      	lsls	r3, r3, #9
 800677a:	b29b      	uxth	r3, r3
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	3b01      	subs	r3, #1
 8006784:	041b      	lsls	r3, r3, #16
 8006786:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	3b01      	subs	r3, #1
 8006792:	061b      	lsls	r3, r3, #24
 8006794:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006798:	4931      	ldr	r1, [pc, #196]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 800679a:	4313      	orrs	r3, r2
 800679c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800679e:	4b30      	ldr	r3, [pc, #192]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	492d      	ldr	r1, [pc, #180]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80067b0:	4b2b      	ldr	r3, [pc, #172]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	4928      	ldr	r1, [pc, #160]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80067c2:	4b27      	ldr	r3, [pc, #156]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 80067c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c6:	4a26      	ldr	r2, [pc, #152]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 80067c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80067ce:	4b24      	ldr	r3, [pc, #144]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 80067d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067d2:	4b24      	ldr	r3, [pc, #144]	; (8006864 <RCCEx_PLL3_Config+0x160>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	69d2      	ldr	r2, [r2, #28]
 80067da:	00d2      	lsls	r2, r2, #3
 80067dc:	4920      	ldr	r1, [pc, #128]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80067e2:	4b1f      	ldr	r3, [pc, #124]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	4a1e      	ldr	r2, [pc, #120]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 80067e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d106      	bne.n	8006802 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80067f4:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	4a19      	ldr	r2, [pc, #100]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 80067fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006800:	e00f      	b.n	8006822 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d106      	bne.n	8006816 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006808:	4b15      	ldr	r3, [pc, #84]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	4a14      	ldr	r2, [pc, #80]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 800680e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006812:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006814:	e005      	b.n	8006822 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006816:	4b12      	ldr	r3, [pc, #72]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 8006818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681a:	4a11      	ldr	r2, [pc, #68]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 800681c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006820:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006822:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a0e      	ldr	r2, [pc, #56]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 8006828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800682c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800682e:	f7fa fceb 	bl	8001208 <HAL_GetTick>
 8006832:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006834:	e008      	b.n	8006848 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006836:	f7fa fce7 	bl	8001208 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e006      	b.n	8006856 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006848:	4b05      	ldr	r3, [pc, #20]	; (8006860 <RCCEx_PLL3_Config+0x15c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0f0      	beq.n	8006836 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	58024400 	.word	0x58024400
 8006864:	ffff0007 	.word	0xffff0007

08006868 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d904      	bls.n	8006886 <HAL_SAI_InitProtocol+0x1e>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	3b03      	subs	r3, #3
 8006880:	2b01      	cmp	r3, #1
 8006882:	d812      	bhi.n	80068aa <HAL_SAI_InitProtocol+0x42>
 8006884:	e008      	b.n	8006898 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 fa37 	bl	8006d00 <SAI_InitI2S>
 8006892:	4603      	mov	r3, r0
 8006894:	75fb      	strb	r3, [r7, #23]
      break;
 8006896:	e00b      	b.n	80068b0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	68b9      	ldr	r1, [r7, #8]
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 fae0 	bl	8006e64 <SAI_InitPCM>
 80068a4:	4603      	mov	r3, r0
 80068a6:	75fb      	strb	r3, [r7, #23]
      break;
 80068a8:	e002      	b.n	80068b0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]
      break;
 80068ae:	bf00      	nop
  }

  if (status == HAL_OK)
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d104      	bne.n	80068c0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f808 	bl	80068cc <HAL_SAI_Init>
 80068bc:	4603      	mov	r3, r0
 80068be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08a      	sub	sp, #40	; 0x28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e201      	b.n	8006ce2 <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d113      	bne.n	8006910 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a99      	ldr	r2, [pc, #612]	; (8006b54 <HAL_SAI_Init+0x288>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d004      	beq.n	80068fc <HAL_SAI_Init+0x30>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a98      	ldr	r2, [pc, #608]	; (8006b58 <HAL_SAI_Init+0x28c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d107      	bne.n	800690c <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006900:	2b01      	cmp	r3, #1
 8006902:	d103      	bne.n	800690c <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e1e8      	b.n	8006ce2 <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a8f      	ldr	r2, [pc, #572]	; (8006b54 <HAL_SAI_Init+0x288>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d004      	beq.n	8006924 <HAL_SAI_Init+0x58>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a8f      	ldr	r2, [pc, #572]	; (8006b5c <HAL_SAI_Init+0x290>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d102      	bne.n	800692a <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8006924:	4b8e      	ldr	r3, [pc, #568]	; (8006b60 <HAL_SAI_Init+0x294>)
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	e00e      	b.n	8006948 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a8a      	ldr	r2, [pc, #552]	; (8006b58 <HAL_SAI_Init+0x28c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d004      	beq.n	800693e <HAL_SAI_Init+0x72>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a8a      	ldr	r2, [pc, #552]	; (8006b64 <HAL_SAI_Init+0x298>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d102      	bne.n	8006944 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800693e:	4b8a      	ldr	r3, [pc, #552]	; (8006b68 <HAL_SAI_Init+0x29c>)
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	e001      	b.n	8006948 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e1cc      	b.n	8006ce2 <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d106      	bne.n	8006962 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7fa f909 	bl	8000b74 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fb00 	bl	8006f68 <SAI_Disable>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e1b7      	b.n	8006ce2 <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2202      	movs	r2, #2
 8006976:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d00c      	beq.n	800699c <HAL_SAI_Init+0xd0>
 8006982:	2b02      	cmp	r3, #2
 8006984:	d80d      	bhi.n	80069a2 <HAL_SAI_Init+0xd6>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_SAI_Init+0xc4>
 800698a:	2b01      	cmp	r3, #1
 800698c:	d003      	beq.n	8006996 <HAL_SAI_Init+0xca>
 800698e:	e008      	b.n	80069a2 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006990:	2300      	movs	r3, #0
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006994:	e008      	b.n	80069a8 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006996:	2310      	movs	r3, #16
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800699a:	e005      	b.n	80069a8 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800699c:	2320      	movs	r3, #32
 800699e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80069a0:	e002      	b.n	80069a8 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80069a6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	2b05      	cmp	r3, #5
 80069ae:	d822      	bhi.n	80069f6 <HAL_SAI_Init+0x12a>
 80069b0:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <HAL_SAI_Init+0xec>)
 80069b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b6:	bf00      	nop
 80069b8:	080069d1 	.word	0x080069d1
 80069bc:	080069d7 	.word	0x080069d7
 80069c0:	080069df 	.word	0x080069df
 80069c4:	080069f7 	.word	0x080069f7
 80069c8:	080069f7 	.word	0x080069f7
 80069cc:	080069e7 	.word	0x080069e7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61fb      	str	r3, [r7, #28]
      break;
 80069d4:	e012      	b.n	80069fc <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80069d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069da:	61fb      	str	r3, [r7, #28]
      break;
 80069dc:	e00e      	b.n	80069fc <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80069de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069e2:	61fb      	str	r3, [r7, #28]
      break;
 80069e4:	e00a      	b.n	80069fc <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80069e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069ea:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	f043 0303 	orr.w	r3, r3, #3
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80069f4:	e002      	b.n	80069fc <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61fb      	str	r3, [r7, #28]
      break;
 80069fa:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a00:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 808a 	beq.w	8006b20 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a4f      	ldr	r2, [pc, #316]	; (8006b54 <HAL_SAI_Init+0x288>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d004      	beq.n	8006a24 <HAL_SAI_Init+0x158>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a4f      	ldr	r2, [pc, #316]	; (8006b5c <HAL_SAI_Init+0x290>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d106      	bne.n	8006a32 <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006a24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006a28:	f04f 0100 	mov.w	r1, #0
 8006a2c:	f7fe fcd6 	bl	80053dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006a30:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a48      	ldr	r2, [pc, #288]	; (8006b58 <HAL_SAI_Init+0x28c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d106      	bne.n	8006a4a <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006a3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006a40:	f04f 0100 	mov.w	r1, #0
 8006a44:	f7fe fcca 	bl	80053dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006a48:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a45      	ldr	r2, [pc, #276]	; (8006b64 <HAL_SAI_Init+0x298>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d106      	bne.n	8006a62 <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006a54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006a58:	f04f 0100 	mov.w	r1, #0
 8006a5c:	f7fe fcbe 	bl	80053dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006a60:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a6a:	d120      	bne.n	8006aae <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d102      	bne.n	8006a7a <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8006a74:	2340      	movs	r3, #64	; 0x40
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	e00a      	b.n	8006a90 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d103      	bne.n	8006a8a <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8006a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	e002      	b.n	8006a90 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	fb02 f303 	mul.w	r3, r2, r3
 8006aa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006aaa:	613b      	str	r3, [r7, #16]
 8006aac:	e017      	b.n	8006ade <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ab6:	d101      	bne.n	8006abc <HAL_SAI_Init+0x1f0>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e000      	b.n	8006abe <HAL_SAI_Init+0x1f2>
 8006abc:	2301      	movs	r3, #1
 8006abe:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	4619      	mov	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	fb02 f303 	mul.w	r3, r2, r3
 8006ad6:	021b      	lsls	r3, r3, #8
 8006ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006adc:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	4a22      	ldr	r2, [pc, #136]	; (8006b6c <HAL_SAI_Init+0x2a0>)
 8006ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae6:	08da      	lsrs	r2, r3, #3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006aec:	6939      	ldr	r1, [r7, #16]
 8006aee:	4b1f      	ldr	r3, [pc, #124]	; (8006b6c <HAL_SAI_Init+0x2a0>)
 8006af0:	fba3 2301 	umull	r2, r3, r3, r1
 8006af4:	08da      	lsrs	r2, r3, #3
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	1aca      	subs	r2, r1, r3
 8006b00:	2a08      	cmp	r2, #8
 8006b02:	d904      	bls.n	8006b0e <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d104      	bne.n	8006b20 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	085a      	lsrs	r2, r3, #1
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <HAL_SAI_Init+0x264>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d109      	bne.n	8006b44 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_SAI_Init+0x270>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	e001      	b.n	8006b40 <HAL_SAI_Init+0x274>
 8006b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b40:	623b      	str	r3, [r7, #32]
 8006b42:	e017      	b.n	8006b74 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d111      	bne.n	8006b70 <HAL_SAI_Init+0x2a4>
 8006b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b50:	e00f      	b.n	8006b72 <HAL_SAI_Init+0x2a6>
 8006b52:	bf00      	nop
 8006b54:	40015804 	.word	0x40015804
 8006b58:	58005404 	.word	0x58005404
 8006b5c:	40015824 	.word	0x40015824
 8006b60:	40015800 	.word	0x40015800
 8006b64:	58005424 	.word	0x58005424
 8006b68:	58005400 	.word	0x58005400
 8006b6c:	cccccccd 	.word	0xcccccccd
 8006b70:	2300      	movs	r3, #0
 8006b72:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6819      	ldr	r1, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	4b5b      	ldr	r3, [pc, #364]	; (8006cec <HAL_SAI_Init+0x420>)
 8006b80:	400b      	ands	r3, r1
 8006b82:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6819      	ldr	r1, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b92:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006b98:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006bac:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006bb8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	051b      	lsls	r3, r3, #20
 8006bc0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006bc6:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6859      	ldr	r1, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	4b43      	ldr	r3, [pc, #268]	; (8006cf0 <HAL_SAI_Init+0x424>)
 8006be2:	400b      	ands	r3, r1
 8006be4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6859      	ldr	r1, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69da      	ldr	r2, [r3, #28]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6899      	ldr	r1, [r3, #8]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4b39      	ldr	r3, [pc, #228]	; (8006cf4 <HAL_SAI_Init+0x428>)
 8006c10:	400b      	ands	r3, r1
 8006c12:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6899      	ldr	r1, [r3, #8]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006c24:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006c2a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006c30:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c36:	3b01      	subs	r3, #1
 8006c38:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006c3a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68d9      	ldr	r1, [r3, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006c52:	400b      	ands	r3, r1
 8006c54:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68d9      	ldr	r1, [r3, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c64:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006c6c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c72:	3b01      	subs	r3, #1
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a1c      	ldr	r2, [pc, #112]	; (8006cf8 <HAL_SAI_Init+0x42c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <HAL_SAI_Init+0x3c8>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a1b      	ldr	r2, [pc, #108]	; (8006cfc <HAL_SAI_Init+0x430>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d119      	bne.n	8006cc8 <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c98:	f023 0201 	bic.w	r2, r3, #1
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d10e      	bne.n	8006cc8 <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc0:	f043 0201 	orr.w	r2, r3, #1
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3728      	adds	r7, #40	; 0x28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	f005c010 	.word	0xf005c010
 8006cf0:	ffff1ff0 	.word	0xffff1ff0
 8006cf4:	fff88000 	.word	0xfff88000
 8006cf8:	40015804 	.word	0x40015804
 8006cfc:	58005404 	.word	0x58005404

08006d00 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <SAI_InitI2S+0x2e>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d103      	bne.n	8006d36 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	651a      	str	r2, [r3, #80]	; 0x50
 8006d34:	e002      	b.n	8006d3c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d42:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d4a:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e077      	b.n	8006e56 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d107      	bne.n	8006d7c <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006d78:	665a      	str	r2, [r3, #100]	; 0x64
 8006d7a:	e006      	b.n	8006d8a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d82:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d84f      	bhi.n	8006e30 <SAI_InitI2S+0x130>
 8006d90:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <SAI_InitI2S+0x98>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006da9 	.word	0x08006da9
 8006d9c:	08006dcb 	.word	0x08006dcb
 8006da0:	08006ded 	.word	0x08006ded
 8006da4:	08006e0f 	.word	0x08006e0f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2280      	movs	r2, #128	; 0x80
 8006dac:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	085b      	lsrs	r3, r3, #1
 8006dbc:	011a      	lsls	r2, r3, #4
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2240      	movs	r2, #64	; 0x40
 8006dc6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006dc8:	e035      	b.n	8006e36 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2280      	movs	r2, #128	; 0x80
 8006dce:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	085b      	lsrs	r3, r3, #1
 8006dd4:	019a      	lsls	r2, r3, #6
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	085b      	lsrs	r3, r3, #1
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2280      	movs	r2, #128	; 0x80
 8006de8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006dea:	e024      	b.n	8006e36 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	22c0      	movs	r2, #192	; 0xc0
 8006df0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	085b      	lsrs	r3, r3, #1
 8006df6:	019a      	lsls	r2, r3, #6
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	085b      	lsrs	r3, r3, #1
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2280      	movs	r2, #128	; 0x80
 8006e0a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006e0c:	e013      	b.n	8006e36 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	22e0      	movs	r2, #224	; 0xe0
 8006e12:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	085b      	lsrs	r3, r3, #1
 8006e18:	019a      	lsls	r2, r3, #6
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	085b      	lsrs	r3, r3, #1
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2280      	movs	r2, #128	; 0x80
 8006e2c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006e2e:	e002      	b.n	8006e36 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	75fb      	strb	r3, [r7, #23]
      break;
 8006e34:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d10b      	bne.n	8006e54 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d102      	bne.n	8006e48 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2210      	movs	r2, #16
 8006e46:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d102      	bne.n	8006e54 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2208      	movs	r2, #8
 8006e52:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	371c      	adds	r7, #28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop

08006e64 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <SAI_InitPCM+0x2e>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d103      	bne.n	8006e9a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	651a      	str	r2, [r3, #80]	; 0x50
 8006e98:	e002      	b.n	8006ea0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006eac:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006eb4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ec8:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d103      	bne.n	8006ed8 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	659a      	str	r2, [r3, #88]	; 0x58
 8006ed6:	e002      	b.n	8006ede <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	220d      	movs	r2, #13
 8006edc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d837      	bhi.n	8006f54 <SAI_InitPCM+0xf0>
 8006ee4:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <SAI_InitPCM+0x88>)
 8006ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eea:	bf00      	nop
 8006eec:	08006efd 	.word	0x08006efd
 8006ef0:	08006f13 	.word	0x08006f13
 8006ef4:	08006f29 	.word	0x08006f29
 8006ef8:	08006f3f 	.word	0x08006f3f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2280      	movs	r2, #128	; 0x80
 8006f00:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	011a      	lsls	r2, r3, #4
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2240      	movs	r2, #64	; 0x40
 8006f0e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006f10:	e023      	b.n	8006f5a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2280      	movs	r2, #128	; 0x80
 8006f16:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2280      	movs	r2, #128	; 0x80
 8006f24:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006f26:	e018      	b.n	8006f5a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	22c0      	movs	r2, #192	; 0xc0
 8006f2c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2280      	movs	r2, #128	; 0x80
 8006f3a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006f3c:	e00d      	b.n	8006f5a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	22e0      	movs	r2, #224	; 0xe0
 8006f42:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2280      	movs	r2, #128	; 0x80
 8006f50:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006f52:	e002      	b.n	8006f5a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	75fb      	strb	r3, [r7, #23]
      break;
 8006f58:	bf00      	nop
  }

  return status;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006f70:	4b18      	ldr	r3, [pc, #96]	; (8006fd4 <SAI_Disable+0x6c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <SAI_Disable+0x70>)
 8006f76:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7a:	0b1b      	lsrs	r3, r3, #12
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f92:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fa0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	72fb      	strb	r3, [r7, #11]
      break;
 8006fae:	e009      	b.n	8006fc4 <SAI_Disable+0x5c>
    }
    count--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e7      	bne.n	8006f94 <SAI_Disable+0x2c>

  return status;
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	24000000 	.word	0x24000000
 8006fd8:	95cbec1b 	.word	0x95cbec1b

08006fdc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e02b      	b.n	8007048 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d106      	bne.n	800700a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7f9 fb55 	bl	80006b4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2202      	movs	r2, #2
 800700e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3304      	adds	r3, #4
 800701a:	4619      	mov	r1, r3
 800701c:	4610      	mov	r0, r2
 800701e:	f000 f9b7 	bl	8007390 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6818      	ldr	r0, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	461a      	mov	r2, r3
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	f000 fa0b 	bl	8007448 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007032:	4b07      	ldr	r3, [pc, #28]	; (8007050 <HAL_SDRAM_Init+0x74>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a06      	ldr	r2, [pc, #24]	; (8007050 <HAL_SDRAM_Init+0x74>)
 8007038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800703c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	52004000 	.word	0x52004000

08007054 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007066:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d101      	bne.n	8007072 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800706e:	2302      	movs	r3, #2
 8007070:	e021      	b.n	80070b6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d002      	beq.n	800707e <HAL_SDRAM_SendCommand+0x2a>
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	2b05      	cmp	r3, #5
 800707c:	d118      	bne.n	80070b0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2202      	movs	r2, #2
 8007082:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	68b9      	ldr	r1, [r7, #8]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fa44 	bl	800751c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b02      	cmp	r3, #2
 800709a:	d104      	bne.n	80070a6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2205      	movs	r2, #5
 80070a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80070a4:	e006      	b.n	80070b4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80070ae:	e001      	b.n	80070b4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d101      	bne.n	80070d8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80070d4:	2302      	movs	r3, #2
 80070d6:	e016      	b.n	8007106 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d10f      	bne.n	8007104 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fa36 	bl	8007564 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e000      	b.n	8007106 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
}
 8007106:	4618      	mov	r0, r3
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e10f      	b.n	8007342 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a87      	ldr	r2, [pc, #540]	; (800734c <HAL_SPI_Init+0x23c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d00f      	beq.n	8007152 <HAL_SPI_Init+0x42>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a86      	ldr	r2, [pc, #536]	; (8007350 <HAL_SPI_Init+0x240>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00a      	beq.n	8007152 <HAL_SPI_Init+0x42>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a84      	ldr	r2, [pc, #528]	; (8007354 <HAL_SPI_Init+0x244>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d005      	beq.n	8007152 <HAL_SPI_Init+0x42>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	2b0f      	cmp	r3, #15
 800714c:	d901      	bls.n	8007152 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e0f7      	b.n	8007342 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f900 	bl	8007358 <SPI_GetPacketSize>
 8007158:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a7b      	ldr	r2, [pc, #492]	; (800734c <HAL_SPI_Init+0x23c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d00c      	beq.n	800717e <HAL_SPI_Init+0x6e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a79      	ldr	r2, [pc, #484]	; (8007350 <HAL_SPI_Init+0x240>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d007      	beq.n	800717e <HAL_SPI_Init+0x6e>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a78      	ldr	r2, [pc, #480]	; (8007354 <HAL_SPI_Init+0x244>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d002      	beq.n	800717e <HAL_SPI_Init+0x6e>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b08      	cmp	r3, #8
 800717c:	d811      	bhi.n	80071a2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007182:	4a72      	ldr	r2, [pc, #456]	; (800734c <HAL_SPI_Init+0x23c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d009      	beq.n	800719c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a70      	ldr	r2, [pc, #448]	; (8007350 <HAL_SPI_Init+0x240>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d004      	beq.n	800719c <HAL_SPI_Init+0x8c>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a6f      	ldr	r2, [pc, #444]	; (8007354 <HAL_SPI_Init+0x244>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d104      	bne.n	80071a6 <HAL_SPI_Init+0x96>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b10      	cmp	r3, #16
 80071a0:	d901      	bls.n	80071a6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e0cd      	b.n	8007342 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7f9 fe16 	bl	8000dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0201 	bic.w	r2, r2, #1
 80071d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80071e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071ec:	d119      	bne.n	8007222 <HAL_SPI_Init+0x112>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071f6:	d103      	bne.n	8007200 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d008      	beq.n	8007212 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10c      	bne.n	8007222 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800720c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007210:	d107      	bne.n	8007222 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007220:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00f      	beq.n	800724e <HAL_SPI_Init+0x13e>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	2b06      	cmp	r3, #6
 8007234:	d90b      	bls.n	800724e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	e007      	b.n	800725e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800725c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69da      	ldr	r2, [r3, #28]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007266:	431a      	orrs	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	431a      	orrs	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007270:	ea42 0103 	orr.w	r1, r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	431a      	orrs	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	431a      	orrs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	431a      	orrs	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	431a      	orrs	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072be:	ea42 0103 	orr.w	r1, r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d113      	bne.n	80072fe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072e8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072fc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0201 	bic.w	r2, r2, #1
 800730c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	40013000 	.word	0x40013000
 8007350:	40003800 	.word	0x40003800
 8007354:	40003c00 	.word	0x40003c00

08007358 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007364:	095b      	lsrs	r3, r3, #5
 8007366:	3301      	adds	r3, #1
 8007368:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	3301      	adds	r3, #1
 8007370:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	3307      	adds	r3, #7
 8007376:	08db      	lsrs	r3, r3, #3
 8007378:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
	...

08007390 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d121      	bne.n	80073e6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	4b27      	ldr	r3, [pc, #156]	; (8007444 <FMC_SDRAM_Init+0xb4>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	6851      	ldr	r1, [r2, #4]
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	6892      	ldr	r2, [r2, #8]
 80073b2:	4311      	orrs	r1, r2
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	68d2      	ldr	r2, [r2, #12]
 80073b8:	4311      	orrs	r1, r2
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	6912      	ldr	r2, [r2, #16]
 80073be:	4311      	orrs	r1, r2
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	6952      	ldr	r2, [r2, #20]
 80073c4:	4311      	orrs	r1, r2
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	6992      	ldr	r2, [r2, #24]
 80073ca:	4311      	orrs	r1, r2
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	69d2      	ldr	r2, [r2, #28]
 80073d0:	4311      	orrs	r1, r2
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	6a12      	ldr	r2, [r2, #32]
 80073d6:	4311      	orrs	r1, r2
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073dc:	430a      	orrs	r2, r1
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	e026      	b.n	8007434 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	69d9      	ldr	r1, [r3, #28]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	4319      	orrs	r1, r3
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	430b      	orrs	r3, r1
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	4b0e      	ldr	r3, [pc, #56]	; (8007444 <FMC_SDRAM_Init+0xb4>)
 800740a:	4013      	ands	r3, r2
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	6851      	ldr	r1, [r2, #4]
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	6892      	ldr	r2, [r2, #8]
 8007414:	4311      	orrs	r1, r2
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	68d2      	ldr	r2, [r2, #12]
 800741a:	4311      	orrs	r1, r2
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	6912      	ldr	r2, [r2, #16]
 8007420:	4311      	orrs	r1, r2
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	6952      	ldr	r2, [r2, #20]
 8007426:	4311      	orrs	r1, r2
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	6992      	ldr	r2, [r2, #24]
 800742c:	430a      	orrs	r2, r1
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	ffff8000 	.word	0xffff8000

08007448 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d128      	bne.n	80074ac <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	1e59      	subs	r1, r3, #1
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	3b01      	subs	r3, #1
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	4319      	orrs	r1, r3
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	3b01      	subs	r3, #1
 8007478:	021b      	lsls	r3, r3, #8
 800747a:	4319      	orrs	r1, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	3b01      	subs	r3, #1
 8007482:	031b      	lsls	r3, r3, #12
 8007484:	4319      	orrs	r1, r3
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	3b01      	subs	r3, #1
 800748c:	041b      	lsls	r3, r3, #16
 800748e:	4319      	orrs	r1, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	3b01      	subs	r3, #1
 8007496:	051b      	lsls	r3, r3, #20
 8007498:	4319      	orrs	r1, r3
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	3b01      	subs	r3, #1
 80074a0:	061b      	lsls	r3, r3, #24
 80074a2:	430b      	orrs	r3, r1
 80074a4:	431a      	orrs	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	609a      	str	r2, [r3, #8]
 80074aa:	e02d      	b.n	8007508 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	4b19      	ldr	r3, [pc, #100]	; (8007518 <FMC_SDRAM_Timing_Init+0xd0>)
 80074b2:	4013      	ands	r3, r2
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	68d2      	ldr	r2, [r2, #12]
 80074b8:	3a01      	subs	r2, #1
 80074ba:	0311      	lsls	r1, r2, #12
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	6952      	ldr	r2, [r2, #20]
 80074c0:	3a01      	subs	r2, #1
 80074c2:	0512      	lsls	r2, r2, #20
 80074c4:	430a      	orrs	r2, r1
 80074c6:	431a      	orrs	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	1e59      	subs	r1, r3, #1
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	3b01      	subs	r3, #1
 80074e0:	011b      	lsls	r3, r3, #4
 80074e2:	4319      	orrs	r1, r3
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	4319      	orrs	r1, r3
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	041b      	lsls	r3, r3, #16
 80074f6:	4319      	orrs	r1, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	061b      	lsls	r3, r3, #24
 8007500:	430b      	orrs	r3, r1
 8007502:	431a      	orrs	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	ff0f0fff 	.word	0xff0f0fff

0800751c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <FMC_SDRAM_SendCommand+0x44>)
 800752e:	4013      	ands	r3, r2
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	6811      	ldr	r1, [r2, #0]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	6852      	ldr	r2, [r2, #4]
 8007538:	4311      	orrs	r1, r2
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	6892      	ldr	r2, [r2, #8]
 800753e:	3a01      	subs	r2, #1
 8007540:	0152      	lsls	r2, r2, #5
 8007542:	4311      	orrs	r1, r2
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	68d2      	ldr	r2, [r2, #12]
 8007548:	0252      	lsls	r2, r2, #9
 800754a:	430a      	orrs	r2, r1
 800754c:	431a      	orrs	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	ffc00000 	.word	0xffc00000

08007564 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	695a      	ldr	r2, [r3, #20]
 8007572:	4b07      	ldr	r3, [pc, #28]	; (8007590 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8007574:	4013      	ands	r3, r2
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	0052      	lsls	r2, r2, #1
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	ffffc001 	.word	0xffffc001

08007594 <memset>:
 8007594:	4402      	add	r2, r0
 8007596:	4603      	mov	r3, r0
 8007598:	4293      	cmp	r3, r2
 800759a:	d100      	bne.n	800759e <memset+0xa>
 800759c:	4770      	bx	lr
 800759e:	f803 1b01 	strb.w	r1, [r3], #1
 80075a2:	e7f9      	b.n	8007598 <memset+0x4>

080075a4 <__libc_init_array>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	4d0d      	ldr	r5, [pc, #52]	; (80075dc <__libc_init_array+0x38>)
 80075a8:	4c0d      	ldr	r4, [pc, #52]	; (80075e0 <__libc_init_array+0x3c>)
 80075aa:	1b64      	subs	r4, r4, r5
 80075ac:	10a4      	asrs	r4, r4, #2
 80075ae:	2600      	movs	r6, #0
 80075b0:	42a6      	cmp	r6, r4
 80075b2:	d109      	bne.n	80075c8 <__libc_init_array+0x24>
 80075b4:	4d0b      	ldr	r5, [pc, #44]	; (80075e4 <__libc_init_array+0x40>)
 80075b6:	4c0c      	ldr	r4, [pc, #48]	; (80075e8 <__libc_init_array+0x44>)
 80075b8:	f000 f818 	bl	80075ec <_init>
 80075bc:	1b64      	subs	r4, r4, r5
 80075be:	10a4      	asrs	r4, r4, #2
 80075c0:	2600      	movs	r6, #0
 80075c2:	42a6      	cmp	r6, r4
 80075c4:	d105      	bne.n	80075d2 <__libc_init_array+0x2e>
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
 80075c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80075cc:	4798      	blx	r3
 80075ce:	3601      	adds	r6, #1
 80075d0:	e7ee      	b.n	80075b0 <__libc_init_array+0xc>
 80075d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d6:	4798      	blx	r3
 80075d8:	3601      	adds	r6, #1
 80075da:	e7f2      	b.n	80075c2 <__libc_init_array+0x1e>
 80075dc:	0800761c 	.word	0x0800761c
 80075e0:	0800761c 	.word	0x0800761c
 80075e4:	0800761c 	.word	0x0800761c
 80075e8:	08007620 	.word	0x08007620

080075ec <_init>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	bf00      	nop
 80075f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f2:	bc08      	pop	{r3}
 80075f4:	469e      	mov	lr, r3
 80075f6:	4770      	bx	lr

080075f8 <_fini>:
 80075f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fa:	bf00      	nop
 80075fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fe:	bc08      	pop	{r3}
 8007600:	469e      	mov	lr, r3
 8007602:	4770      	bx	lr
