
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d4c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08009018  08009018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009030  08009030  00019030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08009038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000394  24000010  08009048  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240003a4  08009048  000203a4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011430  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025a7  00000000  00000000  000314b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d60  00000000  00000000  00033a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a2d  00000000  00000000  000347b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000327c0  00000000  00000000  000351e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012cf4  00000000  00000000  000679a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00143183  00000000  00000000  0007a699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003710  00000000  00000000  001bd81c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000092  00000000  00000000  001c0f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009000 	.word	0x08009000

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08009000 	.word	0x08009000

0800030c <ad1939_write_reg>:
#include "AD1939_driver.h"


// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af02      	add	r7, sp, #8
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
	int8_t retval = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	73fb      	strb	r3, [r7, #15]
	TXdata[0] = AD1939_Global_Address_Write;
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <ad1939_write_reg+0x4c>)
 8000322:	2208      	movs	r2, #8
 8000324:	701a      	strb	r2, [r3, #0]
	TXdata[1] = reg_address;
 8000326:	4a0c      	ldr	r2, [pc, #48]	; (8000358 <ad1939_write_reg+0x4c>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	7053      	strb	r3, [r2, #1]
	TXdata[2] = data;
 800032c:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <ad1939_write_reg+0x4c>)
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	7093      	strb	r3, [r2, #2]

//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <ad1939_write_reg+0x50>)
 8000334:	6818      	ldr	r0, [r3, #0]
 8000336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2303      	movs	r3, #3
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <ad1939_write_reg+0x54>)
 8000340:	4905      	ldr	r1, [pc, #20]	; (8000358 <ad1939_write_reg+0x4c>)
 8000342:	f008 f90b 	bl	800855c <HAL_SPI_TransmitReceive>
 8000346:	4603      	mov	r3, r0
 8000348:	73fb      	strb	r3, [r7, #15]
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 //HAL_Delay(10);
	return retval;
 800034a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	24000030 	.word	0x24000030
 800035c:	2400002c 	.word	0x2400002c
 8000360:	24000034 	.word	0x24000034

08000364 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af02      	add	r7, sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <ad1939_pll_locked+0x3c>)
 800036c:	2209      	movs	r2, #9
 800036e:	701a      	strb	r2, [r3, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000372:	2201      	movs	r2, #1
 8000374:	705a      	strb	r2, [r3, #1]
	TXdata[2] = 0b00000100;
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000378:	2204      	movs	r2, #4
 800037a:	709a      	strb	r2, [r3, #2]
	HAL_Delay(10);
 800037c:	200a      	movs	r0, #10
 800037e:	f001 f9f7 	bl	8001770 <HAL_Delay>
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <ad1939_pll_locked+0x40>)
 8000384:	6818      	ldr	r0, [r3, #0]
 8000386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2303      	movs	r3, #3
 800038e:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <ad1939_pll_locked+0x44>)
 8000390:	4903      	ldr	r1, [pc, #12]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000392:	f008 f8e3 	bl	800855c <HAL_SPI_TransmitReceive>
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 return 0;
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	24000030 	.word	0x24000030
 80003a4:	2400002c 	.word	0x2400002c
 80003a8:	24000034 	.word	0x24000034

080003ac <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
    AD1939_spi = hspi_codec;
 80003b4:	4a3d      	ldr	r2, [pc, #244]	; (80004ac <ad1939_init+0x100>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6013      	str	r3, [r2, #0]

    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 80003ba:	21be      	movs	r1, #190	; 0xbe
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff ffa5 	bl	800030c <ad1939_write_reg>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d002      	beq.n	80003ce <ad1939_init+0x22>
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295
 80003cc:	e069      	b.n	80004a2 <ad1939_init+0xf6>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 80003ce:	2104      	movs	r1, #4
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff9b 	bl	800030c <ad1939_write_reg>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d002      	beq.n	80003e2 <ad1939_init+0x36>
 80003dc:	f04f 33ff 	mov.w	r3, #4294967295
 80003e0:	e05f      	b.n	80004a2 <ad1939_init+0xf6>





    HAL_Delay(100);
 80003e2:	2064      	movs	r0, #100	; 0x64
 80003e4:	f001 f9c4 	bl	8001770 <HAL_Delay>

    if(ad1939_pll_locked()){
 80003e8:	f7ff ffbc 	bl	8000364 <ad1939_pll_locked>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b01000000)) return -1;
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	2002      	movs	r0, #2
 80003f0:	f7ff ff8c 	bl	800030c <ad1939_write_reg>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d002      	beq.n	8000400 <ad1939_init+0x54>
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
 80003fe:	e050      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000100)) return -1; // Slave setup
 8000400:	2104      	movs	r1, #4
 8000402:	2003      	movs	r0, #3
 8000404:	f7ff ff82 	bl	800030c <ad1939_write_reg>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <ad1939_init+0x68>
 800040e:	f04f 33ff 	mov.w	r3, #4294967295
 8000412:	e046      	b.n	80004a2 <ad1939_init+0xf6>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 8000414:	2100      	movs	r1, #0
 8000416:	2004      	movs	r0, #4
 8000418:	f7ff ff78 	bl	800030c <ad1939_write_reg>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d002      	beq.n	8000428 <ad1939_init+0x7c>
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	e03c      	b.n	80004a2 <ad1939_init+0xf6>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 8000428:	2100      	movs	r1, #0
 800042a:	2005      	movs	r0, #5
 800042c:	f7ff ff6e 	bl	800030c <ad1939_write_reg>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d002      	beq.n	800043c <ad1939_init+0x90>
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
 800043a:	e032      	b.n	80004a2 <ad1939_init+0xf6>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 800043c:	2100      	movs	r1, #0
 800043e:	2008      	movs	r0, #8
 8000440:	f7ff ff64 	bl	800030c <ad1939_write_reg>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d002      	beq.n	8000450 <ad1939_init+0xa4>
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
 800044e:	e028      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 8000450:	2100      	movs	r1, #0
 8000452:	2009      	movs	r0, #9
 8000454:	f7ff ff5a 	bl	800030c <ad1939_write_reg>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d002      	beq.n	8000464 <ad1939_init+0xb8>
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	e01e      	b.n	80004a2 <ad1939_init+0xf6>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000464:	2100      	movs	r1, #0
 8000466:	200e      	movs	r0, #14
 8000468:	f7ff ff50 	bl	800030c <ad1939_write_reg>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d002      	beq.n	8000478 <ad1939_init+0xcc>
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	e014      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0b00100000 )) return -1;
 8000478:	2120      	movs	r1, #32
 800047a:	200f      	movs	r0, #15
 800047c:	f7ff ff46 	bl	800030c <ad1939_write_reg>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <ad1939_init+0xe0>
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e00a      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 800048c:	2100      	movs	r1, #0
 800048e:	2010      	movs	r0, #16
 8000490:	f7ff ff3c 	bl	800030c <ad1939_write_reg>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d002      	beq.n	80004a0 <ad1939_init+0xf4>
 800049a:	f04f 33ff 	mov.w	r3, #4294967295
 800049e:	e000      	b.n	80004a2 <ad1939_init+0xf6>



    return 0; // Return 0 if all writes are successful
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	2400002c 	.word	0x2400002c

080004b0 <HAL_SAI_TxCpltCallback>:
volatile uint8_t 			ADC_HALF_COMPLETE_FLAG = 0;
volatile uint8_t 			DAC_HALF_COMPLETE_FLAG = 0;
volatile uint32_t input_i2s_buffer_au32[16];
volatile uint32_t output_i2s_buffer_au32[16];

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 80004b0:	b480      	push	{r7}
 80004b2:	b08b      	sub	sp, #44	; 0x2c
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 0;
 80004b8:	4b2a      	ldr	r3, [pc, #168]	; (8000564 <HAL_SAI_TxCpltCallback+0xb4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
 80004be:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <HAL_SAI_TxCpltCallback+0xb8>)
 80004c0:	617b      	str	r3, [r7, #20]
 80004c2:	2340      	movs	r3, #64	; 0x40
 80004c4:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	dd1d      	ble.n	8000508 <HAL_SAI_TxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	f003 021f 	and.w	r2, r3, #31
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	4413      	add	r3, r2
 80004d6:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004dc:	f3bf 8f4f 	dsb	sy
}
 80004e0:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80004e2:	4a22      	ldr	r2, [pc, #136]	; (800056c <HAL_SAI_TxCpltCallback+0xbc>)
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	3320      	adds	r3, #32
 80004ee:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3b20      	subs	r3, #32
 80004f4:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	dcf2      	bgt.n	80004e2 <HAL_SAI_TxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 80004fc:	f3bf 8f4f 	dsb	sy
}
 8000500:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000502:	f3bf 8f6f 	isb	sy
}
 8000506:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000508:	bf00      	nop
 800050a:	4b19      	ldr	r3, [pc, #100]	; (8000570 <HAL_SAI_TxCpltCallback+0xc0>)
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
 800050e:	2340      	movs	r3, #64	; 0x40
 8000510:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000512:	6a3b      	ldr	r3, [r7, #32]
 8000514:	2b00      	cmp	r3, #0
 8000516:	dd1d      	ble.n	8000554 <HAL_SAI_TxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051a:	f003 021f 	and.w	r2, r3, #31
 800051e:	6a3b      	ldr	r3, [r7, #32]
 8000520:	4413      	add	r3, r2
 8000522:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000528:	f3bf 8f4f 	dsb	sy
}
 800052c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800052e:	4a0f      	ldr	r2, [pc, #60]	; (800056c <HAL_SAI_TxCpltCallback+0xbc>)
 8000530:	69bb      	ldr	r3, [r7, #24]
 8000532:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000536:	69bb      	ldr	r3, [r7, #24]
 8000538:	3320      	adds	r3, #32
 800053a:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	3b20      	subs	r3, #32
 8000540:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	2b00      	cmp	r3, #0
 8000546:	dcf2      	bgt.n	800052e <HAL_SAI_TxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
}
 8000554:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000556:	bf00      	nop
 8000558:	372c      	adds	r7, #44	; 0x2c
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	24000315 	.word	0x24000315
 8000568:	24000318 	.word	0x24000318
 800056c:	e000ed00 	.word	0xe000ed00
 8000570:	24000358 	.word	0x24000358

08000574 <HAL_SAI_TxHalfCpltCallback>:
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000574:	b480      	push	{r7}
 8000576:	b08b      	sub	sp, #44	; 0x2c
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 1;
 800057c:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
 8000582:	4b2a      	ldr	r3, [pc, #168]	; (800062c <HAL_SAI_TxHalfCpltCallback+0xb8>)
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	2b00      	cmp	r3, #0
 800058e:	dd1d      	ble.n	80005cc <HAL_SAI_TxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	f003 021f 	and.w	r2, r3, #31
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	4413      	add	r3, r2
 800059a:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80005a0:	f3bf 8f4f 	dsb	sy
}
 80005a4:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80005a6:	4a22      	ldr	r2, [pc, #136]	; (8000630 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	3320      	adds	r3, #32
 80005b2:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3b20      	subs	r3, #32
 80005b8:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	dcf2      	bgt.n	80005a6 <HAL_SAI_TxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 80005c0:	f3bf 8f4f 	dsb	sy
}
 80005c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c6:	f3bf 8f6f 	isb	sy
}
 80005ca:	bf00      	nop
}
 80005cc:	bf00      	nop
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <HAL_SAI_TxHalfCpltCallback+0xc0>)
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
 80005d2:	2340      	movs	r3, #64	; 0x40
 80005d4:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 80005d6:	6a3b      	ldr	r3, [r7, #32]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dd1d      	ble.n	8000618 <HAL_SAI_TxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80005dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005de:	f003 021f 	and.w	r2, r3, #31
 80005e2:	6a3b      	ldr	r3, [r7, #32]
 80005e4:	4413      	add	r3, r2
 80005e6:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80005e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
}
 80005f0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 80005f4:	69bb      	ldr	r3, [r7, #24]
 80005f6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	3320      	adds	r3, #32
 80005fe:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	3b20      	subs	r3, #32
 8000604:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	2b00      	cmp	r3, #0
 800060a:	dcf2      	bgt.n	80005f2 <HAL_SAI_TxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 800060c:	f3bf 8f4f 	dsb	sy
}
 8000610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000612:	f3bf 8f6f 	isb	sy
}
 8000616:	bf00      	nop
}
 8000618:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
		SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 800061a:	bf00      	nop
 800061c:	372c      	adds	r7, #44	; 0x2c
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	24000315 	.word	0x24000315
 800062c:	24000318 	.word	0x24000318
 8000630:	e000ed00 	.word	0xe000ed00
 8000634:	24000358 	.word	0x24000358

08000638 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000638:	b480      	push	{r7}
 800063a:	b093      	sub	sp, #76	; 0x4c
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 0;
 8000640:	4b54      	ldr	r3, [pc, #336]	; (8000794 <HAL_SAI_RxCpltCallback+0x15c>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	4b54      	ldr	r3, [pc, #336]	; (8000798 <HAL_SAI_RxCpltCallback+0x160>)
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	2340      	movs	r3, #64	; 0x40
 800064c:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	2b00      	cmp	r3, #0
 8000652:	dd1d      	ble.n	8000690 <HAL_SAI_RxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	f003 021f 	and.w	r2, r3, #31
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	4413      	add	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000664:	f3bf 8f4f 	dsb	sy
}
 8000668:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800066a:	4a4c      	ldr	r2, [pc, #304]	; (800079c <HAL_SAI_RxCpltCallback+0x164>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	3320      	adds	r3, #32
 8000676:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3b20      	subs	r3, #32
 800067c:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	dcf2      	bgt.n	800066a <HAL_SAI_RxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000684:	f3bf 8f4f 	dsb	sy
}
 8000688:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800068a:	f3bf 8f6f 	isb	sy
}
 800068e:	bf00      	nop
}
 8000690:	bf00      	nop
 8000692:	4b43      	ldr	r3, [pc, #268]	; (80007a0 <HAL_SAI_RxCpltCallback+0x168>)
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
 8000696:	2340      	movs	r3, #64	; 0x40
 8000698:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	2b00      	cmp	r3, #0
 800069e:	dd1d      	ble.n	80006dc <HAL_SAI_RxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	f003 021f 	and.w	r2, r3, #31
 80006a6:	6a3b      	ldr	r3, [r7, #32]
 80006a8:	4413      	add	r3, r2
 80006aa:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80006ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 80006b0:	f3bf 8f4f 	dsb	sy
}
 80006b4:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80006b6:	4a39      	ldr	r2, [pc, #228]	; (800079c <HAL_SAI_RxCpltCallback+0x164>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	3320      	adds	r3, #32
 80006c2:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	3b20      	subs	r3, #32
 80006c8:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dcf2      	bgt.n	80006b6 <HAL_SAI_RxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 80006d0:	f3bf 8f4f 	dsb	sy
}
 80006d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d6:	f3bf 8f6f 	isb	sy
}
 80006da:	bf00      	nop
}
 80006dc:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[14] = input_i2s_buffer_au32[10];
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <HAL_SAI_RxCpltCallback+0x160>)
 80006e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e2:	4a2f      	ldr	r2, [pc, #188]	; (80007a0 <HAL_SAI_RxCpltCallback+0x168>)
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38
	output_i2s_buffer_au32[15] = input_i2s_buffer_au32[11];
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <HAL_SAI_RxCpltCallback+0x160>)
 80006e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ea:	4a2d      	ldr	r2, [pc, #180]	; (80007a0 <HAL_SAI_RxCpltCallback+0x168>)
 80006ec:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <HAL_SAI_RxCpltCallback+0x160>)
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
 80006f2:	2340      	movs	r3, #64	; 0x40
 80006f4:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 80006f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dd1d      	ble.n	8000738 <HAL_SAI_RxCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80006fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006fe:	f003 021f 	and.w	r2, r3, #31
 8000702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000704:	4413      	add	r3, r2
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 800070c:	f3bf 8f4f 	dsb	sy
}
 8000710:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <HAL_SAI_RxCpltCallback+0x164>)
 8000714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000716:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800071a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071c:	3320      	adds	r3, #32
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000722:	3b20      	subs	r3, #32
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf2      	bgt.n	8000712 <HAL_SAI_RxCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 800072c:	f3bf 8f4f 	dsb	sy
}
 8000730:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000732:	f3bf 8f6f 	isb	sy
}
 8000736:	bf00      	nop
}
 8000738:	bf00      	nop
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_SAI_RxCpltCallback+0x168>)
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000744:	2b00      	cmp	r3, #0
 8000746:	dd1d      	ble.n	8000784 <HAL_SAI_RxCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800074a:	f003 021f 	and.w	r2, r3, #31
 800074e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000750:	4413      	add	r3, r2
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000758:	f3bf 8f4f 	dsb	sy
}
 800075c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <HAL_SAI_RxCpltCallback+0x164>)
 8000760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000762:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000768:	3320      	adds	r3, #32
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800076c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800076e:	3b20      	subs	r3, #32
 8000770:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000774:	2b00      	cmp	r3, #0
 8000776:	dcf2      	bgt.n	800075e <HAL_SAI_RxCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8000778:	f3bf 8f4f 	dsb	sy
}
 800077c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800077e:	f3bf 8f6f 	isb	sy
}
 8000782:	bf00      	nop
}
 8000784:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000786:	bf00      	nop
 8000788:	374c      	adds	r7, #76	; 0x4c
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	24000314 	.word	0x24000314
 8000798:	24000318 	.word	0x24000318
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	24000358 	.word	0x24000358

080007a4 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 80007a4:	b480      	push	{r7}
 80007a6:	b093      	sub	sp, #76	; 0x4c
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 1;
 80007ac:	4b54      	ldr	r3, [pc, #336]	; (8000900 <HAL_SAI_RxHalfCpltCallback+0x15c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	4b54      	ldr	r3, [pc, #336]	; (8000904 <HAL_SAI_RxHalfCpltCallback+0x160>)
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	2340      	movs	r3, #64	; 0x40
 80007b8:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dd1d      	ble.n	80007fc <HAL_SAI_RxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	f003 021f 	and.w	r2, r3, #31
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	4413      	add	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80007d0:	f3bf 8f4f 	dsb	sy
}
 80007d4:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80007d6:	4a4c      	ldr	r2, [pc, #304]	; (8000908 <HAL_SAI_RxHalfCpltCallback+0x164>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3320      	adds	r3, #32
 80007e2:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3b20      	subs	r3, #32
 80007e8:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dcf2      	bgt.n	80007d6 <HAL_SAI_RxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 80007f0:	f3bf 8f4f 	dsb	sy
}
 80007f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f6:	f3bf 8f6f 	isb	sy
}
 80007fa:	bf00      	nop
}
 80007fc:	bf00      	nop
 80007fe:	4b43      	ldr	r3, [pc, #268]	; (800090c <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
 8000802:	2340      	movs	r3, #64	; 0x40
 8000804:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	2b00      	cmp	r3, #0
 800080a:	dd1d      	ble.n	8000848 <HAL_SAI_RxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080e:	f003 021f 	and.w	r2, r3, #31
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	4413      	add	r3, r2
 8000816:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 800081c:	f3bf 8f4f 	dsb	sy
}
 8000820:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000822:	4a39      	ldr	r2, [pc, #228]	; (8000908 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	3320      	adds	r3, #32
 800082e:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	3b20      	subs	r3, #32
 8000834:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dcf2      	bgt.n	8000822 <HAL_SAI_RxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 800083c:	f3bf 8f4f 	dsb	sy
}
 8000840:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000842:	f3bf 8f6f 	isb	sy
}
 8000846:	bf00      	nop
}
 8000848:	bf00      	nop


	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[6] = input_i2s_buffer_au32[2];
 800084a:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <HAL_SAI_RxHalfCpltCallback+0x160>)
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	4a2f      	ldr	r2, [pc, #188]	; (800090c <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000850:	6193      	str	r3, [r2, #24]
	output_i2s_buffer_au32[7] = input_i2s_buffer_au32[3];
 8000852:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	4a2d      	ldr	r2, [pc, #180]	; (800090c <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <HAL_SAI_RxHalfCpltCallback+0x168>)
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
 800085e:	2340      	movs	r3, #64	; 0x40
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000864:	2b00      	cmp	r3, #0
 8000866:	dd1d      	ble.n	80008a4 <HAL_SAI_RxHalfCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800086a:	f003 021f 	and.w	r2, r3, #31
 800086e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000870:	4413      	add	r3, r2
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000878:	f3bf 8f4f 	dsb	sy
}
 800087c:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800087e:	4a22      	ldr	r2, [pc, #136]	; (8000908 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000882:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000888:	3320      	adds	r3, #32
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088e:	3b20      	subs	r3, #32
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000894:	2b00      	cmp	r3, #0
 8000896:	dcf2      	bgt.n	800087e <HAL_SAI_RxHalfCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8000898:	f3bf 8f4f 	dsb	sy
}
 800089c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800089e:	f3bf 8f6f 	isb	sy
}
 80008a2:	bf00      	nop
}
 80008a4:	bf00      	nop
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <HAL_SAI_RxHalfCpltCallback+0x160>)
 80008a8:	647b      	str	r3, [r7, #68]	; 0x44
 80008aa:	2340      	movs	r3, #64	; 0x40
 80008ac:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 80008ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	dd1d      	ble.n	80008f0 <HAL_SAI_RxHalfCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80008b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008b6:	f003 021f 	and.w	r2, r3, #31
 80008ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008bc:	4413      	add	r3, r2
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80008c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 80008c4:	f3bf 8f4f 	dsb	sy
}
 80008c8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <HAL_SAI_RxHalfCpltCallback+0x164>)
 80008cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008ce:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80008d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d4:	3320      	adds	r3, #32
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80008d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008da:	3b20      	subs	r3, #32
 80008dc:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 80008de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	dcf2      	bgt.n	80008ca <HAL_SAI_RxHalfCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 80008e4:	f3bf 8f4f 	dsb	sy
}
 80008e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008ea:	f3bf 8f6f 	isb	sy
}
 80008ee:	bf00      	nop
}
 80008f0:	bf00      	nop

	SCB_CleanDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
}
 80008f2:	bf00      	nop
 80008f4:	374c      	adds	r7, #76	; 0x4c
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	24000314 	.word	0x24000314
 8000904:	24000318 	.word	0x24000318
 8000908:	e000ed00 	.word	0xe000ed00
 800090c:	24000358 	.word	0x24000358

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000916:	4b4a      	ldr	r3, [pc, #296]	; (8000a40 <main+0x130>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d11b      	bne.n	800095a <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8000922:	f3bf 8f4f 	dsb	sy
}
 8000926:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000928:	f3bf 8f6f 	isb	sy
}
 800092c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800092e:	4b44      	ldr	r3, [pc, #272]	; (8000a40 <main+0x130>)
 8000930:	2200      	movs	r2, #0
 8000932:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000936:	f3bf 8f4f 	dsb	sy
}
 800093a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800093c:	f3bf 8f6f 	isb	sy
}
 8000940:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <main+0x130>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	4a3e      	ldr	r2, [pc, #248]	; (8000a40 <main+0x130>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800094e:	f3bf 8f4f 	dsb	sy
}
 8000952:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000954:	f3bf 8f6f 	isb	sy
}
 8000958:	e000      	b.n	800095c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800095a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800095c:	4b38      	ldr	r3, [pc, #224]	; (8000a40 <main+0x130>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000964:	2b00      	cmp	r3, #0
 8000966:	d138      	bne.n	80009da <main+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000968:	4b35      	ldr	r3, [pc, #212]	; (8000a40 <main+0x130>)
 800096a:	2200      	movs	r2, #0
 800096c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000970:	f3bf 8f4f 	dsb	sy
}
 8000974:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000976:	4b32      	ldr	r3, [pc, #200]	; (8000a40 <main+0x130>)
 8000978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800097c:	613b      	str	r3, [r7, #16]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	0b5b      	lsrs	r3, r3, #13
 8000982:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000986:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000990:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	015a      	lsls	r2, r3, #5
 8000996:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800099a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800099c:	68ba      	ldr	r2, [r7, #8]
 800099e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009a0:	4927      	ldr	r1, [pc, #156]	; (8000a40 <main+0x130>)
 80009a2:	4313      	orrs	r3, r2
 80009a4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	1e5a      	subs	r2, r3, #1
 80009ac:	60ba      	str	r2, [r7, #8]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1ef      	bne.n	8000992 <main+0x82>
    } while(sets-- != 0U);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	60fa      	str	r2, [r7, #12]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1e5      	bne.n	8000988 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80009bc:	f3bf 8f4f 	dsb	sy
}
 80009c0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <main+0x130>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a1e      	ldr	r2, [pc, #120]	; (8000a40 <main+0x130>)
 80009c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ce:	f3bf 8f4f 	dsb	sy
}
 80009d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009d4:	f3bf 8f6f 	isb	sy
}
 80009d8:	e000      	b.n	80009dc <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009da:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f000 fe36 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f83a 	bl	8000a58 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009e4:	f000 f8a6 	bl	8000b34 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f000 fa50 	bl	8000e8c <MX_GPIO_Init>
  MX_DMA_Init();
 80009ec:	f000 f98c 	bl	8000d08 <MX_DMA_Init>
  MX_SAI1_Init();
 80009f0:	f000 f8d4 	bl	8000b9c <MX_SAI1_Init>
  MX_SPI1_Init();
 80009f4:	f000 f932 	bl	8000c5c <MX_SPI1_Init>
  MX_FMC_Init();
 80009f8:	f000 f9be 	bl	8000d78 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  // init SAI interface
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, output_i2s_buffer_au32, 	16);
 80009fc:	2210      	movs	r2, #16
 80009fe:	4911      	ldr	r1, [pc, #68]	; (8000a44 <main+0x134>)
 8000a00:	4811      	ldr	r0, [pc, #68]	; (8000a48 <main+0x138>)
 8000a02:	f007 f847 	bl	8007a94 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, input_i2s_buffer_au32, 	16);
 8000a06:	2210      	movs	r2, #16
 8000a08:	4910      	ldr	r1, [pc, #64]	; (8000a4c <main+0x13c>)
 8000a0a:	4811      	ldr	r0, [pc, #68]	; (8000a50 <main+0x140>)
 8000a0c:	f007 f8f8 	bl	8007c00 <HAL_SAI_Receive_DMA>

  // init CODEC
	ad1939_init(&hspi1);
 8000a10:	4810      	ldr	r0, [pc, #64]	; (8000a54 <main+0x144>)
 8000a12:	f7ff fccb 	bl	80003ac <ad1939_init>
  /* USER CODE BEGIN WHILE */
	uint32_t fmctestStart  __attribute__((at(0xC0000000)));
  while (1)
  {

	  uint32_t fmctestStop = &fmctestStart;
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	61fb      	str	r3, [r7, #28]

	  fmctestStart = HAL_GetTick();
 8000a1a:	f000 fe9d 	bl	8001758 <HAL_GetTick>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	607b      	str	r3, [r7, #4]
	  uint32_t errorCounter =0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
//			  fmctestStop = (HAL_GetTick()-fmctestStart);
//		  }
//
//	  }

	  if(errorCounter){
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d000      	beq.n	8000a2e <main+0x11e>
		  while(1){
 8000a2c:	e7fe      	b.n	8000a2c <main+0x11c>

		  }
	  }

	  uint8_t var = *(__IO uint8_t*)(SDRAM_ADDRESS_START);
 8000a2e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	75fb      	strb	r3, [r7, #23]
	  HAL_Delay(50);
 8000a36:	2032      	movs	r0, #50	; 0x32
 8000a38:	f000 fe9a 	bl	8001770 <HAL_Delay>
  {
 8000a3c:	e7eb      	b.n	8000a16 <main+0x106>
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00
 8000a44:	24000358 	.word	0x24000358
 8000a48:	24000038 	.word	0x24000038
 8000a4c:	24000318 	.word	0x24000318
 8000a50:	240000d0 	.word	0x240000d0
 8000a54:	24000258 	.word	0x24000258

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09c      	sub	sp, #112	; 0x70
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	224c      	movs	r2, #76	; 0x4c
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f008 fa9e 	bl	8008fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2220      	movs	r2, #32
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f008 fa98 	bl	8008fa8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f003 fa4f 	bl	8003f1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	4a2a      	ldr	r2, [pc, #168]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a8c:	6193      	str	r3, [r2, #24]
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a9a:	bf00      	nop
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa8:	d1f8      	bne.n	8000a9c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000ac0:	232c      	movs	r3, #44	; 0x2c
 8000ac2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 fa55 	bl	8003f90 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000aec:	f000 fa5e 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	233f      	movs	r3, #63	; 0x3f
 8000af2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2303      	movs	r3, #3
 8000af6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000afc:	2308      	movs	r3, #8
 8000afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b00:	2340      	movs	r3, #64	; 0x40
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b04:	2340      	movs	r3, #64	; 0x40
 8000b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2103      	movs	r1, #3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fe14 	bl	8004744 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b22:	f000 fa43 	bl	8000fac <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3770      	adds	r7, #112	; 0x70
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	58024800 	.word	0x58024800

08000b34 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0ae      	sub	sp, #184	; 0xb8
 8000b38:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	22b8      	movs	r2, #184	; 0xb8
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f008 fa31 	bl	8008fa8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 8000b46:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8000b4a:	f04f 0300 	mov.w	r3, #0
 8000b4e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 8000b56:	230f      	movs	r3, #15
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000b62:	2302      	movs	r3, #2
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000b66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 8000b70:	f640 3386 	movw	r3, #2950	; 0xb86
 8000b74:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8000b76:	2302      	movs	r3, #2
 8000b78:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	4618      	mov	r0, r3
 8000b84:	f004 f954 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8000b8e:	f000 fa0d 	bl	8000fac <Error_Handler>
  }
}
 8000b92:	bf00      	nop
 8000b94:	37b8      	adds	r7, #184	; 0xb8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <MX_SAI1_Init+0xb0>)
 8000ba2:	4a2b      	ldr	r2, [pc, #172]	; (8000c50 <MX_SAI1_Init+0xb4>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <MX_SAI1_Init+0xb0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <MX_SAI1_Init+0xb0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bb2:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <MX_SAI1_Init+0xb0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <MX_SAI1_Init+0xb0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_SAI1_Init+0xb0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_SAI1_Init+0xb0>)
 8000bc6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000bca:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_SAI1_Init+0xb0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_SAI1_Init+0xb0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_SAI1_Init+0xb0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_SAI1_Init+0xb0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8000be4:	2308      	movs	r3, #8
 8000be6:	2202      	movs	r2, #2
 8000be8:	2100      	movs	r1, #0
 8000bea:	4818      	ldr	r0, [pc, #96]	; (8000c4c <MX_SAI1_Init+0xb0>)
 8000bec:	f006 fd06 	bl	80075fc <HAL_SAI_InitProtocol>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000bf6:	f000 f9d9 	bl	8000fac <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_SAI1_Init+0xb8>)
 8000bfc:	4a16      	ldr	r2, [pc, #88]	; (8000c58 <MX_SAI1_Init+0xbc>)
 8000bfe:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_SAI1_Init+0xb8>)
 8000c02:	2203      	movs	r2, #3
 8000c04:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_SAI1_Init+0xb8>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_SAI1_Init+0xb8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_SAI1_Init+0xb8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_SAI1_Init+0xb8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <MX_SAI1_Init+0xb8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_SAI1_Init+0xb8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <MX_SAI1_Init+0xb8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8000c30:	2308      	movs	r3, #8
 8000c32:	2202      	movs	r2, #2
 8000c34:	2100      	movs	r1, #0
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <MX_SAI1_Init+0xb8>)
 8000c38:	f006 fce0 	bl	80075fc <HAL_SAI_InitProtocol>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000c42:	f000 f9b3 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	24000038 	.word	0x24000038
 8000c50:	40015804 	.word	0x40015804
 8000c54:	240000d0 	.word	0x240000d0
 8000c58:	40015824 	.word	0x40015824

08000c5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000c62:	4a28      	ldr	r2, [pc, #160]	; (8000d04 <MX_SPI1_Init+0xa8>)
 8000c64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000c68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000c76:	2207      	movs	r2, #7
 8000c78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000c88:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000c90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_SPI1_Init+0xa4>)
 8000cee:	f007 fb11 	bl	8008314 <HAL_SPI_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000cf8:	f000 f958 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	24000258 	.word	0x24000258
 8000d04:	40013000 	.word	0x40013000

08000d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_DMA_Init+0x6c>)
 8000d10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d14:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <MX_DMA_Init+0x6c>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_DMA_Init+0x6c>)
 8000d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_DMA_Init+0x6c>)
 8000d2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d32:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <MX_DMA_Init+0x6c>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_DMA_Init+0x6c>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	200b      	movs	r0, #11
 8000d50:	f000 fe0d 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d54:	200b      	movs	r0, #11
 8000d56:	f000 fe24 	bl	80019a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2038      	movs	r0, #56	; 0x38
 8000d60:	f000 fe05 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d64:	2038      	movs	r0, #56	; 0x38
 8000d66:	f000 fe1c 	bl	80019a2 <HAL_NVIC_EnableIRQ>

}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	58024400 	.word	0x58024400

08000d78 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
 8000d8e:	615a      	str	r2, [r3, #20]
 8000d90:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d92:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000d94:	4a3c      	ldr	r2, [pc, #240]	; (8000e88 <MX_FMC_Init+0x110>)
 8000d96:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000d98:	4b3a      	ldr	r3, [pc, #232]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d9e:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000da4:	4b37      	ldr	r3, [pc, #220]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000dac:	2210      	movs	r2, #16
 8000dae:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000db0:	4b34      	ldr	r3, [pc, #208]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000db6:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000db8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000dbc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000dc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dca:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000dcc:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000dce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000dd4:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000dde:	2307      	movs	r3, #7
 8000de0:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000de2:	2305      	movs	r3, #5
 8000de4:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000de6:	2306      	movs	r3, #6
 8000de8:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000dea:	2303      	movs	r3, #3
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4821      	ldr	r0, [pc, #132]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000dfe:	f007 f9ef 	bl	80081e0 <HAL_SDRAM_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000e08:	f000 f8d0 	bl	8000fac <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
   FMC_SDRAM_CommandTypeDef Command;
   /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
   /* Step 3: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1; /* configure the Target Bank bits */
 8000e10:	2310      	movs	r3, #16
 8000e12:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber      = 1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e22:	4619      	mov	r1, r3
 8000e24:	4817      	ldr	r0, [pc, #92]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000e26:	f007 fa17 	bl	8008258 <HAL_SDRAM_SendCommand>
    HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f000 fca0 	bl	8001770 <HAL_Delay>
    /* Step 5: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000e30:	2302      	movs	r3, #2
 8000e32:	607b      	str	r3, [r7, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4811      	ldr	r0, [pc, #68]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000e3e:	f007 fa0b 	bl	8008258 <HAL_SDRAM_SendCommand>
    /* Step 6: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000e42:	2303      	movs	r3, #3
 8000e44:	607b      	str	r3, [r7, #4]
    Command.AutoRefreshNumber      = 2;
 8000e46:	2302      	movs	r3, #2
 8000e48:	60fb      	str	r3, [r7, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e50:	4619      	mov	r1, r3
 8000e52:	480c      	ldr	r0, [pc, #48]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000e54:	f007 fa00 	bl	8008258 <HAL_SDRAM_SendCommand>
    /* Step 7: Program the external memory mode register */
    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000e58:	2304      	movs	r3, #4
 8000e5a:	607b      	str	r3, [r7, #4]
    Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000e5c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000e60:	613b      	str	r3, [r7, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000e6c:	f007 f9f4 	bl	8008258 <HAL_SDRAM_SendCommand>
    /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
    /* Set the device refresh rate
     * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
             = [(32ms/2048) * 270/2MHz] - 20 = 2089*/

    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2156);
 8000e70:	f640 016c 	movw	r1, #2156	; 0x86c
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <MX_FMC_Init+0x10c>)
 8000e76:	f007 fa24 	bl	80082c2 <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3730      	adds	r7, #48	; 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	240002e0 	.word	0x240002e0
 8000e88:	52004140 	.word	0x52004140

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	; 0x30
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea2:	4b40      	ldr	r3, [pc, #256]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	4a3e      	ldr	r2, [pc, #248]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb2:	4b3c      	ldr	r3, [pc, #240]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec0:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	4a37      	ldr	r2, [pc, #220]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000ec8:	f043 0320 	orr.w	r3, r3, #32
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed0:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	f003 0320 	and.w	r3, r3, #32
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee4:	4a2f      	ldr	r2, [pc, #188]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efc:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	4a20      	ldr	r2, [pc, #128]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2120      	movs	r1, #32
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <MX_GPIO_Init+0x11c>)
 8000f7a:	f002 ffb5 	bl	8003ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f7e:	2320      	movs	r3, #32
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_GPIO_Init+0x11c>)
 8000f96:	f002 fdff 	bl	8003b98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	; 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	58021800 	.word	0x58021800

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_MspInit+0x30>)
 8000fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc4:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_MspInit+0x30>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_MspInit+0x30>)
 8000fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	58024400 	.word	0x58024400

08000fec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a3a      	ldr	r2, [pc, #232]	; (80010f4 <HAL_SPI_MspInit+0x108>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d16d      	bne.n	80010ea <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800100e:	4b3a      	ldr	r3, [pc, #232]	; (80010f8 <HAL_SPI_MspInit+0x10c>)
 8001010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001014:	4a38      	ldr	r2, [pc, #224]	; (80010f8 <HAL_SPI_MspInit+0x10c>)
 8001016:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800101a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800101e:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <HAL_SPI_MspInit+0x10c>)
 8001020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <HAL_SPI_MspInit+0x10c>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	4a31      	ldr	r2, [pc, #196]	; (80010f8 <HAL_SPI_MspInit+0x10c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103c:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <HAL_SPI_MspInit+0x10c>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800104a:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <HAL_SPI_MspInit+0x10c>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	4a29      	ldr	r2, [pc, #164]	; (80010f8 <HAL_SPI_MspInit+0x10c>)
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105a:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <HAL_SPI_MspInit+0x10c>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_SPI_MspInit+0x10c>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <HAL_SPI_MspInit+0x10c>)
 8001070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <HAL_SPI_MspInit+0x10c>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 8001086:	f248 0340 	movw	r3, #32832	; 0x8040
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001098:	2305      	movs	r3, #5
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	4816      	ldr	r0, [pc, #88]	; (80010fc <HAL_SPI_MspInit+0x110>)
 80010a4:	f002 fd78 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b8:	2305      	movs	r3, #5
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	480f      	ldr	r0, [pc, #60]	; (8001100 <HAL_SPI_MspInit+0x114>)
 80010c4:	f002 fd68 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010da:	2305      	movs	r3, #5
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	4807      	ldr	r0, [pc, #28]	; (8001104 <HAL_SPI_MspInit+0x118>)
 80010e6:	f002 fd57 	bl	8003b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3730      	adds	r7, #48	; 0x30
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40013000 	.word	0x40013000
 80010f8:	58024400 	.word	0x58024400
 80010fc:	58020000 	.word	0x58020000
 8001100:	58020c00 	.word	0x58020c00
 8001104:	58021800 	.word	0x58021800

08001108 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	b0b6      	sub	sp, #216	; 0xd8
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800110e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800111e:	4b5b      	ldr	r3, [pc, #364]	; (800128c <HAL_FMC_MspInit+0x184>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 80ae 	bne.w	8001284 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 8001128:	4b58      	ldr	r3, [pc, #352]	; (800128c <HAL_FMC_MspInit+0x184>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	22b8      	movs	r2, #184	; 0xb8
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f007 ff36 	bl	8008fa8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800113c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001148:	2300      	movs	r3, #0
 800114a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	4618      	mov	r0, r3
 8001152:	f003 fe6d 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 800115c:	f7ff ff26 	bl	8000fac <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001160:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <HAL_FMC_MspInit+0x188>)
 8001162:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001166:	4a4a      	ldr	r2, [pc, #296]	; (8001290 <HAL_FMC_MspInit+0x188>)
 8001168:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800116c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001170:	4b47      	ldr	r3, [pc, #284]	; (8001290 <HAL_FMC_MspInit+0x188>)
 8001172:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800117e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001182:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001198:	230c      	movs	r3, #12
 800119a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800119e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011a2:	4619      	mov	r1, r3
 80011a4:	483b      	ldr	r0, [pc, #236]	; (8001294 <HAL_FMC_MspInit+0x18c>)
 80011a6:	f002 fcf7 	bl	8003b98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80011aa:	230d      	movs	r3, #13
 80011ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c2:	230c      	movs	r3, #12
 80011c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4832      	ldr	r0, [pc, #200]	; (8001298 <HAL_FMC_MspInit+0x190>)
 80011d0:	f002 fce2 	bl	8003b98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011d4:	2330      	movs	r3, #48	; 0x30
 80011d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ec:	230c      	movs	r3, #12
 80011ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4828      	ldr	r0, [pc, #160]	; (800129c <HAL_FMC_MspInit+0x194>)
 80011fa:	f002 fccd 	bl	8003b98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 80011fe:	f248 1311 	movw	r3, #33041	; 0x8111
 8001202:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001218:	230c      	movs	r3, #12
 800121a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800121e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001222:	4619      	mov	r1, r3
 8001224:	481e      	ldr	r0, [pc, #120]	; (80012a0 <HAL_FMC_MspInit+0x198>)
 8001226:	f002 fcb7 	bl	8003b98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800122a:	f24e 7383 	movw	r3, #59267	; 0xe783
 800122e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001244:	230c      	movs	r3, #12
 8001246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800124a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800124e:	4619      	mov	r1, r3
 8001250:	4814      	ldr	r0, [pc, #80]	; (80012a4 <HAL_FMC_MspInit+0x19c>)
 8001252:	f002 fca1 	bl	8003b98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001256:	f24c 7303 	movw	r3, #50947	; 0xc703
 800125a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001270:	230c      	movs	r3, #12
 8001272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001276:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800127a:	4619      	mov	r1, r3
 800127c:	480a      	ldr	r0, [pc, #40]	; (80012a8 <HAL_FMC_MspInit+0x1a0>)
 800127e:	f002 fc8b 	bl	8003b98 <HAL_GPIO_Init>
 8001282:	e000      	b.n	8001286 <HAL_FMC_MspInit+0x17e>
    return;
 8001284:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001286:	37d8      	adds	r7, #216	; 0xd8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	24000398 	.word	0x24000398
 8001290:	58024400 	.word	0x58024400
 8001294:	58021400 	.word	0x58021400
 8001298:	58020800 	.word	0x58020800
 800129c:	58020000 	.word	0x58020000
 80012a0:	58021800 	.word	0x58021800
 80012a4:	58021000 	.word	0x58021000
 80012a8:	58020c00 	.word	0x58020c00

080012ac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012b4:	f7ff ff28 	bl	8001108 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a66      	ldr	r2, [pc, #408]	; (8001468 <HAL_SAI_MspInit+0x1a8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d160      	bne.n	8001394 <HAL_SAI_MspInit+0xd4>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80012d2:	4b66      	ldr	r3, [pc, #408]	; (800146c <HAL_SAI_MspInit+0x1ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10e      	bne.n	80012f8 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80012da:	4b65      	ldr	r3, [pc, #404]	; (8001470 <HAL_SAI_MspInit+0x1b0>)
 80012dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012e0:	4a63      	ldr	r2, [pc, #396]	; (8001470 <HAL_SAI_MspInit+0x1b0>)
 80012e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012ea:	4b61      	ldr	r3, [pc, #388]	; (8001470 <HAL_SAI_MspInit+0x1b0>)
 80012ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80012f8:	4b5c      	ldr	r3, [pc, #368]	; (800146c <HAL_SAI_MspInit+0x1ac>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a5b      	ldr	r2, [pc, #364]	; (800146c <HAL_SAI_MspInit+0x1ac>)
 8001300:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001302:	2370      	movs	r3, #112	; 0x70
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001312:	2306      	movs	r3, #6
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4855      	ldr	r0, [pc, #340]	; (8001474 <HAL_SAI_MspInit+0x1b4>)
 800131e:	f002 fc3b 	bl	8003b98 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8001322:	4b55      	ldr	r3, [pc, #340]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 8001324:	4a55      	ldr	r2, [pc, #340]	; (800147c <HAL_SAI_MspInit+0x1bc>)
 8001326:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001328:	4b53      	ldr	r3, [pc, #332]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 800132a:	2257      	movs	r2, #87	; 0x57
 800132c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800132e:	4b52      	ldr	r3, [pc, #328]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 8001330:	2240      	movs	r2, #64	; 0x40
 8001332:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001334:	4b50      	ldr	r3, [pc, #320]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800133a:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 800133c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001340:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001342:	4b4d      	ldr	r3, [pc, #308]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 8001344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001348:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800134a:	4b4b      	ldr	r3, [pc, #300]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 800134c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001350:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001352:	4b49      	ldr	r3, [pc, #292]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 8001354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001358:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 800135c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001360:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001368:	4843      	ldr	r0, [pc, #268]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 800136a:	f000 fb35 	bl	80019d8 <HAL_DMA_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8001374:	f7ff fe1a 	bl	8000fac <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a3f      	ldr	r2, [pc, #252]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 800137c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001380:	4a3d      	ldr	r2, [pc, #244]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a3b      	ldr	r2, [pc, #236]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 800138a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800138e:	4a3a      	ldr	r2, [pc, #232]	; (8001478 <HAL_SAI_MspInit+0x1b8>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a39      	ldr	r2, [pc, #228]	; (8001480 <HAL_SAI_MspInit+0x1c0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d160      	bne.n	8001460 <HAL_SAI_MspInit+0x1a0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800139e:	4b33      	ldr	r3, [pc, #204]	; (800146c <HAL_SAI_MspInit+0x1ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10e      	bne.n	80013c4 <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <HAL_SAI_MspInit+0x1b0>)
 80013a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013ac:	4a30      	ldr	r2, [pc, #192]	; (8001470 <HAL_SAI_MspInit+0x1b0>)
 80013ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013b6:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <HAL_SAI_MspInit+0x1b0>)
 80013b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <HAL_SAI_MspInit+0x1ac>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a28      	ldr	r2, [pc, #160]	; (800146c <HAL_SAI_MspInit+0x1ac>)
 80013cc:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ce:	2308      	movs	r3, #8
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80013de:	2306      	movs	r3, #6
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4822      	ldr	r0, [pc, #136]	; (8001474 <HAL_SAI_MspInit+0x1b4>)
 80013ea:	f002 fbd5 	bl	8003b98 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 80013f0:	4a25      	ldr	r2, [pc, #148]	; (8001488 <HAL_SAI_MspInit+0x1c8>)
 80013f2:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 80013f6:	2258      	movs	r2, #88	; 0x58
 80013f8:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 8001408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800140c:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 8001410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001414:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 8001418:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800141c:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 8001420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001424:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 8001428:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800142c:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001434:	4813      	ldr	r0, [pc, #76]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 8001436:	f000 facf 	bl	80019d8 <HAL_DMA_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 8001440:	f7ff fdb4 	bl	8000fac <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 8001448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 8001456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HAL_SAI_MspInit+0x1c4>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40015804 	.word	0x40015804
 800146c:	2400039c 	.word	0x2400039c
 8001470:	58024400 	.word	0x58024400
 8001474:	58021000 	.word	0x58021000
 8001478:	24000168 	.word	0x24000168
 800147c:	40020010 	.word	0x40020010
 8001480:	40015824 	.word	0x40015824
 8001484:	240001e0 	.word	0x240001e0
 8001488:	40020410 	.word	0x40020410

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 f92a 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <DMA1_Stream0_IRQHandler+0x10>)
 80014e6:	f001 f839 	bl	800255c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	24000168 	.word	0x24000168

080014f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <DMA2_Stream0_IRQHandler+0x10>)
 80014fa:	f001 f82f 	bl	800255c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	240001e0 	.word	0x240001e0

08001508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800150c:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <SystemInit+0xd0>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	4a31      	ldr	r2, [pc, #196]	; (80015d8 <SystemInit+0xd0>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <SystemInit+0xd4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 030f 	and.w	r3, r3, #15
 8001524:	2b06      	cmp	r3, #6
 8001526:	d807      	bhi.n	8001538 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001528:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <SystemInit+0xd4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 030f 	bic.w	r3, r3, #15
 8001530:	4a2a      	ldr	r2, [pc, #168]	; (80015dc <SystemInit+0xd4>)
 8001532:	f043 0307 	orr.w	r3, r3, #7
 8001536:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <SystemInit+0xd8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <SystemInit+0xd8>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <SystemInit+0xd8>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800154a:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <SystemInit+0xd8>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4924      	ldr	r1, [pc, #144]	; (80015e0 <SystemInit+0xd8>)
 8001550:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <SystemInit+0xdc>)
 8001552:	4013      	ands	r3, r2
 8001554:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <SystemInit+0xd4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <SystemInit+0xd4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 030f 	bic.w	r3, r3, #15
 800156a:	4a1c      	ldr	r2, [pc, #112]	; (80015dc <SystemInit+0xd4>)
 800156c:	f043 0307 	orr.w	r3, r3, #7
 8001570:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <SystemInit+0xd8>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <SystemInit+0xd8>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <SystemInit+0xd8>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <SystemInit+0xd8>)
 8001586:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <SystemInit+0xe0>)
 8001588:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <SystemInit+0xd8>)
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <SystemInit+0xe4>)
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <SystemInit+0xd8>)
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <SystemInit+0xe8>)
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <SystemInit+0xd8>)
 8001598:	2200      	movs	r2, #0
 800159a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <SystemInit+0xd8>)
 800159e:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <SystemInit+0xe8>)
 80015a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <SystemInit+0xd8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <SystemInit+0xd8>)
 80015aa:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <SystemInit+0xe8>)
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <SystemInit+0xd8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <SystemInit+0xd8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <SystemInit+0xd8>)
 80015ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <SystemInit+0xd8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <SystemInit+0xec>)
 80015c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	52002000 	.word	0x52002000
 80015e0:	58024400 	.word	0x58024400
 80015e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80015e8:	02020200 	.word	0x02020200
 80015ec:	01ff0000 	.word	0x01ff0000
 80015f0:	01010280 	.word	0x01010280
 80015f4:	52004000 	.word	0x52004000

080015f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001630 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015fc:	f7ff ff84 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	; (8001638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	; (8001644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001626:	f007 fcc7 	bl	8008fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162a:	f7ff f971 	bl	8000910 <main>
  bx  lr
 800162e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001630:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001634:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001638:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800163c:	08009038 	.word	0x08009038
  ldr r2, =_sbss
 8001640:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001644:	240003a4 	.word	0x240003a4

08001648 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC3_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001652:	2003      	movs	r0, #3
 8001654:	f000 f980 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001658:	f003 fa2a 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 800165c:	4602      	mov	r2, r0
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_Init+0x68>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	4913      	ldr	r1, [pc, #76]	; (80016b8 <HAL_Init+0x6c>)
 800166a:	5ccb      	ldrb	r3, [r1, r3]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_Init+0x68>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_Init+0x6c>)
 8001680:	5cd3      	ldrb	r3, [r2, r3]
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <HAL_Init+0x70>)
 800168e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_Init+0x74>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001696:	200f      	movs	r0, #15
 8001698:	f000 f814 	bl	80016c4 <HAL_InitTick>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e002      	b.n	80016ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016a6:	f7ff fc87 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	58024400 	.word	0x58024400
 80016b8:	08009018 	.word	0x08009018
 80016bc:	24000004 	.word	0x24000004
 80016c0:	24000000 	.word	0x24000000

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_InitTick+0x60>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e021      	b.n	800171c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_InitTick+0x64>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_InitTick+0x60>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f965 	bl	80019be <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00e      	b.n	800171c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d80a      	bhi.n	800171a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f000 f92f 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001710:	4a06      	ldr	r2, [pc, #24]	; (800172c <HAL_InitTick+0x68>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2400000c 	.word	0x2400000c
 8001728:	24000000 	.word	0x24000000
 800172c:	24000008 	.word	0x24000008

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2400000c 	.word	0x2400000c
 8001754:	240003a0 	.word	0x240003a0

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	240003a0 	.word	0x240003a0

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2400000c 	.word	0x2400000c

080017b8 <__NVIC_SetPriorityGrouping>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <__NVIC_SetPriorityGrouping+0x40>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <__NVIC_SetPriorityGrouping+0x40>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00
 80017fc:	05fa0000 	.word	0x05fa0000

08001800 <__NVIC_GetPriorityGrouping>:
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff40 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff33 	bl	800181c <__NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa4 	bl	8001914 <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff feba 	bl	8001758 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e312      	b.n	8002016 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a66      	ldr	r2, [pc, #408]	; (8001b90 <HAL_DMA_Init+0x1b8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d04a      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a65      	ldr	r2, [pc, #404]	; (8001b94 <HAL_DMA_Init+0x1bc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d045      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a63      	ldr	r2, [pc, #396]	; (8001b98 <HAL_DMA_Init+0x1c0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d040      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a62      	ldr	r2, [pc, #392]	; (8001b9c <HAL_DMA_Init+0x1c4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d03b      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a60      	ldr	r2, [pc, #384]	; (8001ba0 <HAL_DMA_Init+0x1c8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d036      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a5f      	ldr	r2, [pc, #380]	; (8001ba4 <HAL_DMA_Init+0x1cc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d031      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a5d      	ldr	r2, [pc, #372]	; (8001ba8 <HAL_DMA_Init+0x1d0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d02c      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a5c      	ldr	r2, [pc, #368]	; (8001bac <HAL_DMA_Init+0x1d4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d027      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a5a      	ldr	r2, [pc, #360]	; (8001bb0 <HAL_DMA_Init+0x1d8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d022      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a59      	ldr	r2, [pc, #356]	; (8001bb4 <HAL_DMA_Init+0x1dc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d01d      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a57      	ldr	r2, [pc, #348]	; (8001bb8 <HAL_DMA_Init+0x1e0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d018      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a56      	ldr	r2, [pc, #344]	; (8001bbc <HAL_DMA_Init+0x1e4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d013      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a54      	ldr	r2, [pc, #336]	; (8001bc0 <HAL_DMA_Init+0x1e8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00e      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a53      	ldr	r2, [pc, #332]	; (8001bc4 <HAL_DMA_Init+0x1ec>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d009      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <HAL_DMA_Init+0x1f0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d004      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a50      	ldr	r2, [pc, #320]	; (8001bcc <HAL_DMA_Init+0x1f4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_DMA_Init+0xbc>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_DMA_Init+0xbe>
 8001a94:	2300      	movs	r3, #0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 813c 	beq.w	8001d14 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a37      	ldr	r2, [pc, #220]	; (8001b90 <HAL_DMA_Init+0x1b8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d04a      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a36      	ldr	r2, [pc, #216]	; (8001b94 <HAL_DMA_Init+0x1bc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d045      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a34      	ldr	r2, [pc, #208]	; (8001b98 <HAL_DMA_Init+0x1c0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d040      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a33      	ldr	r2, [pc, #204]	; (8001b9c <HAL_DMA_Init+0x1c4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d03b      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a31      	ldr	r2, [pc, #196]	; (8001ba0 <HAL_DMA_Init+0x1c8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d036      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a30      	ldr	r2, [pc, #192]	; (8001ba4 <HAL_DMA_Init+0x1cc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d031      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a2e      	ldr	r2, [pc, #184]	; (8001ba8 <HAL_DMA_Init+0x1d0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d02c      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2d      	ldr	r2, [pc, #180]	; (8001bac <HAL_DMA_Init+0x1d4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d027      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <HAL_DMA_Init+0x1d8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d022      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a2a      	ldr	r2, [pc, #168]	; (8001bb4 <HAL_DMA_Init+0x1dc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d01d      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a28      	ldr	r2, [pc, #160]	; (8001bb8 <HAL_DMA_Init+0x1e0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d018      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a27      	ldr	r2, [pc, #156]	; (8001bbc <HAL_DMA_Init+0x1e4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a25      	ldr	r2, [pc, #148]	; (8001bc0 <HAL_DMA_Init+0x1e8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00e      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a24      	ldr	r2, [pc, #144]	; (8001bc4 <HAL_DMA_Init+0x1ec>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d009      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a22      	ldr	r2, [pc, #136]	; (8001bc8 <HAL_DMA_Init+0x1f0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <HAL_DMA_Init+0x1f4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d108      	bne.n	8001b5e <HAL_DMA_Init+0x186>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e007      	b.n	8001b6e <HAL_DMA_Init+0x196>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b6e:	e02f      	b.n	8001bd0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b70:	f7ff fdf2 	bl	8001758 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b05      	cmp	r3, #5
 8001b7c:	d928      	bls.n	8001bd0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2220      	movs	r2, #32
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2203      	movs	r2, #3
 8001b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e242      	b.n	8002016 <HAL_DMA_Init+0x63e>
 8001b90:	40020010 	.word	0x40020010
 8001b94:	40020028 	.word	0x40020028
 8001b98:	40020040 	.word	0x40020040
 8001b9c:	40020058 	.word	0x40020058
 8001ba0:	40020070 	.word	0x40020070
 8001ba4:	40020088 	.word	0x40020088
 8001ba8:	400200a0 	.word	0x400200a0
 8001bac:	400200b8 	.word	0x400200b8
 8001bb0:	40020410 	.word	0x40020410
 8001bb4:	40020428 	.word	0x40020428
 8001bb8:	40020440 	.word	0x40020440
 8001bbc:	40020458 	.word	0x40020458
 8001bc0:	40020470 	.word	0x40020470
 8001bc4:	40020488 	.word	0x40020488
 8001bc8:	400204a0 	.word	0x400204a0
 8001bcc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1c8      	bne.n	8001b70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4b83      	ldr	r3, [pc, #524]	; (8001df8 <HAL_DMA_Init+0x420>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001bf6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d107      	bne.n	8001c34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b28      	cmp	r3, #40	; 0x28
 8001c3a:	d903      	bls.n	8001c44 <HAL_DMA_Init+0x26c>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b2e      	cmp	r3, #46	; 0x2e
 8001c42:	d91f      	bls.n	8001c84 <HAL_DMA_Init+0x2ac>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b3e      	cmp	r3, #62	; 0x3e
 8001c4a:	d903      	bls.n	8001c54 <HAL_DMA_Init+0x27c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b42      	cmp	r3, #66	; 0x42
 8001c52:	d917      	bls.n	8001c84 <HAL_DMA_Init+0x2ac>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b46      	cmp	r3, #70	; 0x46
 8001c5a:	d903      	bls.n	8001c64 <HAL_DMA_Init+0x28c>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b48      	cmp	r3, #72	; 0x48
 8001c62:	d90f      	bls.n	8001c84 <HAL_DMA_Init+0x2ac>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b4e      	cmp	r3, #78	; 0x4e
 8001c6a:	d903      	bls.n	8001c74 <HAL_DMA_Init+0x29c>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b52      	cmp	r3, #82	; 0x52
 8001c72:	d907      	bls.n	8001c84 <HAL_DMA_Init+0x2ac>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b73      	cmp	r3, #115	; 0x73
 8001c7a:	d905      	bls.n	8001c88 <HAL_DMA_Init+0x2b0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b77      	cmp	r3, #119	; 0x77
 8001c82:	d801      	bhi.n	8001c88 <HAL_DMA_Init+0x2b0>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <HAL_DMA_Init+0x2b2>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c94:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f023 0307 	bic.w	r3, r3, #7
 8001cac:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d117      	bne.n	8001cf0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00e      	beq.n	8001cf0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f001 fdd6 	bl	8003884 <DMA_CheckFifoParam>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2240      	movs	r2, #64	; 0x40
 8001ce2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e192      	b.n	8002016 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f001 fd11 	bl	8003720 <DMA_CalcBaseAndBitshift>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	223f      	movs	r2, #63	; 0x3f
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	e0c8      	b.n	8001ea6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a38      	ldr	r2, [pc, #224]	; (8001dfc <HAL_DMA_Init+0x424>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d022      	beq.n	8001d64 <HAL_DMA_Init+0x38c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a37      	ldr	r2, [pc, #220]	; (8001e00 <HAL_DMA_Init+0x428>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d01d      	beq.n	8001d64 <HAL_DMA_Init+0x38c>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a35      	ldr	r2, [pc, #212]	; (8001e04 <HAL_DMA_Init+0x42c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d018      	beq.n	8001d64 <HAL_DMA_Init+0x38c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a34      	ldr	r2, [pc, #208]	; (8001e08 <HAL_DMA_Init+0x430>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d013      	beq.n	8001d64 <HAL_DMA_Init+0x38c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a32      	ldr	r2, [pc, #200]	; (8001e0c <HAL_DMA_Init+0x434>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00e      	beq.n	8001d64 <HAL_DMA_Init+0x38c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <HAL_DMA_Init+0x438>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d009      	beq.n	8001d64 <HAL_DMA_Init+0x38c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a2f      	ldr	r2, [pc, #188]	; (8001e14 <HAL_DMA_Init+0x43c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d004      	beq.n	8001d64 <HAL_DMA_Init+0x38c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2e      	ldr	r2, [pc, #184]	; (8001e18 <HAL_DMA_Init+0x440>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d101      	bne.n	8001d68 <HAL_DMA_Init+0x390>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_DMA_Init+0x392>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8092 	beq.w	8001e94 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <HAL_DMA_Init+0x424>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d021      	beq.n	8001dbe <HAL_DMA_Init+0x3e6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a20      	ldr	r2, [pc, #128]	; (8001e00 <HAL_DMA_Init+0x428>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d01c      	beq.n	8001dbe <HAL_DMA_Init+0x3e6>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <HAL_DMA_Init+0x42c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d017      	beq.n	8001dbe <HAL_DMA_Init+0x3e6>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <HAL_DMA_Init+0x430>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d012      	beq.n	8001dbe <HAL_DMA_Init+0x3e6>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <HAL_DMA_Init+0x434>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00d      	beq.n	8001dbe <HAL_DMA_Init+0x3e6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <HAL_DMA_Init+0x438>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d008      	beq.n	8001dbe <HAL_DMA_Init+0x3e6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <HAL_DMA_Init+0x43c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d003      	beq.n	8001dbe <HAL_DMA_Init+0x3e6>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <HAL_DMA_Init+0x440>)
 8001dbc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_DMA_Init+0x444>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b40      	cmp	r3, #64	; 0x40
 8001de4:	d01c      	beq.n	8001e20 <HAL_DMA_Init+0x448>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b80      	cmp	r3, #128	; 0x80
 8001dec:	d102      	bne.n	8001df4 <HAL_DMA_Init+0x41c>
 8001dee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001df2:	e016      	b.n	8001e22 <HAL_DMA_Init+0x44a>
 8001df4:	2300      	movs	r3, #0
 8001df6:	e014      	b.n	8001e22 <HAL_DMA_Init+0x44a>
 8001df8:	fe10803f 	.word	0xfe10803f
 8001dfc:	58025408 	.word	0x58025408
 8001e00:	5802541c 	.word	0x5802541c
 8001e04:	58025430 	.word	0x58025430
 8001e08:	58025444 	.word	0x58025444
 8001e0c:	58025458 	.word	0x58025458
 8001e10:	5802546c 	.word	0x5802546c
 8001e14:	58025480 	.word	0x58025480
 8001e18:	58025494 	.word	0x58025494
 8001e1c:	fffe000f 	.word	0xfffe000f
 8001e20:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68d2      	ldr	r2, [r2, #12]
 8001e26:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e50:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b6e      	ldr	r3, [pc, #440]	; (8002020 <HAL_DMA_Init+0x648>)
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a6e      	ldr	r2, [pc, #440]	; (8002024 <HAL_DMA_Init+0x64c>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	009a      	lsls	r2, r3, #2
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f001 fc51 	bl	8003720 <DMA_CalcBaseAndBitshift>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	e008      	b.n	8001ea6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2240      	movs	r2, #64	; 0x40
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0b7      	b.n	8002016 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5f      	ldr	r2, [pc, #380]	; (8002028 <HAL_DMA_Init+0x650>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d072      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a5d      	ldr	r2, [pc, #372]	; (800202c <HAL_DMA_Init+0x654>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d06d      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a5c      	ldr	r2, [pc, #368]	; (8002030 <HAL_DMA_Init+0x658>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d068      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a5a      	ldr	r2, [pc, #360]	; (8002034 <HAL_DMA_Init+0x65c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d063      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a59      	ldr	r2, [pc, #356]	; (8002038 <HAL_DMA_Init+0x660>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d05e      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a57      	ldr	r2, [pc, #348]	; (800203c <HAL_DMA_Init+0x664>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d059      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a56      	ldr	r2, [pc, #344]	; (8002040 <HAL_DMA_Init+0x668>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d054      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a54      	ldr	r2, [pc, #336]	; (8002044 <HAL_DMA_Init+0x66c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d04f      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a53      	ldr	r2, [pc, #332]	; (8002048 <HAL_DMA_Init+0x670>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d04a      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a51      	ldr	r2, [pc, #324]	; (800204c <HAL_DMA_Init+0x674>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d045      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a50      	ldr	r2, [pc, #320]	; (8002050 <HAL_DMA_Init+0x678>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d040      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a4e      	ldr	r2, [pc, #312]	; (8002054 <HAL_DMA_Init+0x67c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d03b      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a4d      	ldr	r2, [pc, #308]	; (8002058 <HAL_DMA_Init+0x680>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d036      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a4b      	ldr	r2, [pc, #300]	; (800205c <HAL_DMA_Init+0x684>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d031      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a4a      	ldr	r2, [pc, #296]	; (8002060 <HAL_DMA_Init+0x688>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d02c      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a48      	ldr	r2, [pc, #288]	; (8002064 <HAL_DMA_Init+0x68c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d027      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a47      	ldr	r2, [pc, #284]	; (8002068 <HAL_DMA_Init+0x690>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d022      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a45      	ldr	r2, [pc, #276]	; (800206c <HAL_DMA_Init+0x694>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01d      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a44      	ldr	r2, [pc, #272]	; (8002070 <HAL_DMA_Init+0x698>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d018      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a42      	ldr	r2, [pc, #264]	; (8002074 <HAL_DMA_Init+0x69c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a41      	ldr	r2, [pc, #260]	; (8002078 <HAL_DMA_Init+0x6a0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00e      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a3f      	ldr	r2, [pc, #252]	; (800207c <HAL_DMA_Init+0x6a4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d009      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a3e      	ldr	r2, [pc, #248]	; (8002080 <HAL_DMA_Init+0x6a8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d004      	beq.n	8001f96 <HAL_DMA_Init+0x5be>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a3c      	ldr	r2, [pc, #240]	; (8002084 <HAL_DMA_Init+0x6ac>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_DMA_Init+0x5c2>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_DMA_Init+0x5c4>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d032      	beq.n	8002006 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f001 fceb 	bl	800397c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b80      	cmp	r3, #128	; 0x80
 8001fac:	d102      	bne.n	8001fb4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fc8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d010      	beq.n	8001ff4 <HAL_DMA_Init+0x61c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d80c      	bhi.n	8001ff4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f001 fd68 	bl	8003ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	e008      	b.n	8002006 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	a7fdabf8 	.word	0xa7fdabf8
 8002024:	cccccccd 	.word	0xcccccccd
 8002028:	40020010 	.word	0x40020010
 800202c:	40020028 	.word	0x40020028
 8002030:	40020040 	.word	0x40020040
 8002034:	40020058 	.word	0x40020058
 8002038:	40020070 	.word	0x40020070
 800203c:	40020088 	.word	0x40020088
 8002040:	400200a0 	.word	0x400200a0
 8002044:	400200b8 	.word	0x400200b8
 8002048:	40020410 	.word	0x40020410
 800204c:	40020428 	.word	0x40020428
 8002050:	40020440 	.word	0x40020440
 8002054:	40020458 	.word	0x40020458
 8002058:	40020470 	.word	0x40020470
 800205c:	40020488 	.word	0x40020488
 8002060:	400204a0 	.word	0x400204a0
 8002064:	400204b8 	.word	0x400204b8
 8002068:	58025408 	.word	0x58025408
 800206c:	5802541c 	.word	0x5802541c
 8002070:	58025430 	.word	0x58025430
 8002074:	58025444 	.word	0x58025444
 8002078:	58025458 	.word	0x58025458
 800207c:	5802546c 	.word	0x5802546c
 8002080:	58025480 	.word	0x58025480
 8002084:	58025494 	.word	0x58025494

08002088 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e226      	b.n	80024f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_DMA_Start_IT+0x2a>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e21f      	b.n	80024f2 <HAL_DMA_Start_IT+0x46a>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	f040 820a 	bne.w	80024dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a68      	ldr	r2, [pc, #416]	; (800227c <HAL_DMA_Start_IT+0x1f4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d04a      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a66      	ldr	r2, [pc, #408]	; (8002280 <HAL_DMA_Start_IT+0x1f8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d045      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a65      	ldr	r2, [pc, #404]	; (8002284 <HAL_DMA_Start_IT+0x1fc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d040      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a63      	ldr	r2, [pc, #396]	; (8002288 <HAL_DMA_Start_IT+0x200>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d03b      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a62      	ldr	r2, [pc, #392]	; (800228c <HAL_DMA_Start_IT+0x204>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d036      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a60      	ldr	r2, [pc, #384]	; (8002290 <HAL_DMA_Start_IT+0x208>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d031      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a5f      	ldr	r2, [pc, #380]	; (8002294 <HAL_DMA_Start_IT+0x20c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d02c      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a5d      	ldr	r2, [pc, #372]	; (8002298 <HAL_DMA_Start_IT+0x210>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d027      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a5c      	ldr	r2, [pc, #368]	; (800229c <HAL_DMA_Start_IT+0x214>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d022      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a5a      	ldr	r2, [pc, #360]	; (80022a0 <HAL_DMA_Start_IT+0x218>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01d      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a59      	ldr	r2, [pc, #356]	; (80022a4 <HAL_DMA_Start_IT+0x21c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d018      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a57      	ldr	r2, [pc, #348]	; (80022a8 <HAL_DMA_Start_IT+0x220>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a56      	ldr	r2, [pc, #344]	; (80022ac <HAL_DMA_Start_IT+0x224>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00e      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a54      	ldr	r2, [pc, #336]	; (80022b0 <HAL_DMA_Start_IT+0x228>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d009      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a53      	ldr	r2, [pc, #332]	; (80022b4 <HAL_DMA_Start_IT+0x22c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d004      	beq.n	8002176 <HAL_DMA_Start_IT+0xee>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a51      	ldr	r2, [pc, #324]	; (80022b8 <HAL_DMA_Start_IT+0x230>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d108      	bne.n	8002188 <HAL_DMA_Start_IT+0x100>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0201 	bic.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e007      	b.n	8002198 <HAL_DMA_Start_IT+0x110>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f001 f912 	bl	80033c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a34      	ldr	r2, [pc, #208]	; (800227c <HAL_DMA_Start_IT+0x1f4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d04a      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a33      	ldr	r2, [pc, #204]	; (8002280 <HAL_DMA_Start_IT+0x1f8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d045      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a31      	ldr	r2, [pc, #196]	; (8002284 <HAL_DMA_Start_IT+0x1fc>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d040      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a30      	ldr	r2, [pc, #192]	; (8002288 <HAL_DMA_Start_IT+0x200>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d03b      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a2e      	ldr	r2, [pc, #184]	; (800228c <HAL_DMA_Start_IT+0x204>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d036      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a2d      	ldr	r2, [pc, #180]	; (8002290 <HAL_DMA_Start_IT+0x208>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d031      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a2b      	ldr	r2, [pc, #172]	; (8002294 <HAL_DMA_Start_IT+0x20c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d02c      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a2a      	ldr	r2, [pc, #168]	; (8002298 <HAL_DMA_Start_IT+0x210>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d027      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a28      	ldr	r2, [pc, #160]	; (800229c <HAL_DMA_Start_IT+0x214>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d022      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a27      	ldr	r2, [pc, #156]	; (80022a0 <HAL_DMA_Start_IT+0x218>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d01d      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a25      	ldr	r2, [pc, #148]	; (80022a4 <HAL_DMA_Start_IT+0x21c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d018      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a24      	ldr	r2, [pc, #144]	; (80022a8 <HAL_DMA_Start_IT+0x220>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a22      	ldr	r2, [pc, #136]	; (80022ac <HAL_DMA_Start_IT+0x224>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00e      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a21      	ldr	r2, [pc, #132]	; (80022b0 <HAL_DMA_Start_IT+0x228>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d009      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a1f      	ldr	r2, [pc, #124]	; (80022b4 <HAL_DMA_Start_IT+0x22c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d004      	beq.n	8002244 <HAL_DMA_Start_IT+0x1bc>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <HAL_DMA_Start_IT+0x230>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_DMA_Start_IT+0x1c0>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_DMA_Start_IT+0x1c2>
 8002248:	2300      	movs	r3, #0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d036      	beq.n	80022bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 021e 	bic.w	r2, r3, #30
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0216 	orr.w	r2, r2, #22
 8002260:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d03e      	beq.n	80022e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0208 	orr.w	r2, r2, #8
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e035      	b.n	80022e8 <HAL_DMA_Start_IT+0x260>
 800227c:	40020010 	.word	0x40020010
 8002280:	40020028 	.word	0x40020028
 8002284:	40020040 	.word	0x40020040
 8002288:	40020058 	.word	0x40020058
 800228c:	40020070 	.word	0x40020070
 8002290:	40020088 	.word	0x40020088
 8002294:	400200a0 	.word	0x400200a0
 8002298:	400200b8 	.word	0x400200b8
 800229c:	40020410 	.word	0x40020410
 80022a0:	40020428 	.word	0x40020428
 80022a4:	40020440 	.word	0x40020440
 80022a8:	40020458 	.word	0x40020458
 80022ac:	40020470 	.word	0x40020470
 80022b0:	40020488 	.word	0x40020488
 80022b4:	400204a0 	.word	0x400204a0
 80022b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 020e 	bic.w	r2, r3, #14
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 020a 	orr.w	r2, r2, #10
 80022ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0204 	orr.w	r2, r2, #4
 80022e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a83      	ldr	r2, [pc, #524]	; (80024fc <HAL_DMA_Start_IT+0x474>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d072      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a82      	ldr	r2, [pc, #520]	; (8002500 <HAL_DMA_Start_IT+0x478>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d06d      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a80      	ldr	r2, [pc, #512]	; (8002504 <HAL_DMA_Start_IT+0x47c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d068      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7f      	ldr	r2, [pc, #508]	; (8002508 <HAL_DMA_Start_IT+0x480>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d063      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a7d      	ldr	r2, [pc, #500]	; (800250c <HAL_DMA_Start_IT+0x484>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d05e      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a7c      	ldr	r2, [pc, #496]	; (8002510 <HAL_DMA_Start_IT+0x488>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d059      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a7a      	ldr	r2, [pc, #488]	; (8002514 <HAL_DMA_Start_IT+0x48c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d054      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a79      	ldr	r2, [pc, #484]	; (8002518 <HAL_DMA_Start_IT+0x490>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d04f      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a77      	ldr	r2, [pc, #476]	; (800251c <HAL_DMA_Start_IT+0x494>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d04a      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a76      	ldr	r2, [pc, #472]	; (8002520 <HAL_DMA_Start_IT+0x498>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d045      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a74      	ldr	r2, [pc, #464]	; (8002524 <HAL_DMA_Start_IT+0x49c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d040      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a73      	ldr	r2, [pc, #460]	; (8002528 <HAL_DMA_Start_IT+0x4a0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d03b      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a71      	ldr	r2, [pc, #452]	; (800252c <HAL_DMA_Start_IT+0x4a4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d036      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a70      	ldr	r2, [pc, #448]	; (8002530 <HAL_DMA_Start_IT+0x4a8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d031      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a6e      	ldr	r2, [pc, #440]	; (8002534 <HAL_DMA_Start_IT+0x4ac>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d02c      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6d      	ldr	r2, [pc, #436]	; (8002538 <HAL_DMA_Start_IT+0x4b0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d027      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6b      	ldr	r2, [pc, #428]	; (800253c <HAL_DMA_Start_IT+0x4b4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d022      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a6a      	ldr	r2, [pc, #424]	; (8002540 <HAL_DMA_Start_IT+0x4b8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d01d      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a68      	ldr	r2, [pc, #416]	; (8002544 <HAL_DMA_Start_IT+0x4bc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d018      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a67      	ldr	r2, [pc, #412]	; (8002548 <HAL_DMA_Start_IT+0x4c0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d013      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a65      	ldr	r2, [pc, #404]	; (800254c <HAL_DMA_Start_IT+0x4c4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a64      	ldr	r2, [pc, #400]	; (8002550 <HAL_DMA_Start_IT+0x4c8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a62      	ldr	r2, [pc, #392]	; (8002554 <HAL_DMA_Start_IT+0x4cc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_DMA_Start_IT+0x350>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a61      	ldr	r2, [pc, #388]	; (8002558 <HAL_DMA_Start_IT+0x4d0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_DMA_Start_IT+0x354>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_DMA_Start_IT+0x356>
 80023dc:	2300      	movs	r3, #0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01a      	beq.n	8002418 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002416:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a37      	ldr	r2, [pc, #220]	; (80024fc <HAL_DMA_Start_IT+0x474>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d04a      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a36      	ldr	r2, [pc, #216]	; (8002500 <HAL_DMA_Start_IT+0x478>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d045      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a34      	ldr	r2, [pc, #208]	; (8002504 <HAL_DMA_Start_IT+0x47c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d040      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a33      	ldr	r2, [pc, #204]	; (8002508 <HAL_DMA_Start_IT+0x480>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d03b      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a31      	ldr	r2, [pc, #196]	; (800250c <HAL_DMA_Start_IT+0x484>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d036      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a30      	ldr	r2, [pc, #192]	; (8002510 <HAL_DMA_Start_IT+0x488>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d031      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2e      	ldr	r2, [pc, #184]	; (8002514 <HAL_DMA_Start_IT+0x48c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02c      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2d      	ldr	r2, [pc, #180]	; (8002518 <HAL_DMA_Start_IT+0x490>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d027      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2b      	ldr	r2, [pc, #172]	; (800251c <HAL_DMA_Start_IT+0x494>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d022      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2a      	ldr	r2, [pc, #168]	; (8002520 <HAL_DMA_Start_IT+0x498>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d01d      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a28      	ldr	r2, [pc, #160]	; (8002524 <HAL_DMA_Start_IT+0x49c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d018      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a27      	ldr	r2, [pc, #156]	; (8002528 <HAL_DMA_Start_IT+0x4a0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d013      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a25      	ldr	r2, [pc, #148]	; (800252c <HAL_DMA_Start_IT+0x4a4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00e      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a24      	ldr	r2, [pc, #144]	; (8002530 <HAL_DMA_Start_IT+0x4a8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d009      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a22      	ldr	r2, [pc, #136]	; (8002534 <HAL_DMA_Start_IT+0x4ac>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d004      	beq.n	80024b8 <HAL_DMA_Start_IT+0x430>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a21      	ldr	r2, [pc, #132]	; (8002538 <HAL_DMA_Start_IT+0x4b0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d108      	bne.n	80024ca <HAL_DMA_Start_IT+0x442>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e012      	b.n	80024f0 <HAL_DMA_Start_IT+0x468>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e009      	b.n	80024f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40020010 	.word	0x40020010
 8002500:	40020028 	.word	0x40020028
 8002504:	40020040 	.word	0x40020040
 8002508:	40020058 	.word	0x40020058
 800250c:	40020070 	.word	0x40020070
 8002510:	40020088 	.word	0x40020088
 8002514:	400200a0 	.word	0x400200a0
 8002518:	400200b8 	.word	0x400200b8
 800251c:	40020410 	.word	0x40020410
 8002520:	40020428 	.word	0x40020428
 8002524:	40020440 	.word	0x40020440
 8002528:	40020458 	.word	0x40020458
 800252c:	40020470 	.word	0x40020470
 8002530:	40020488 	.word	0x40020488
 8002534:	400204a0 	.word	0x400204a0
 8002538:	400204b8 	.word	0x400204b8
 800253c:	58025408 	.word	0x58025408
 8002540:	5802541c 	.word	0x5802541c
 8002544:	58025430 	.word	0x58025430
 8002548:	58025444 	.word	0x58025444
 800254c:	58025458 	.word	0x58025458
 8002550:	5802546c 	.word	0x5802546c
 8002554:	58025480 	.word	0x58025480
 8002558:	58025494 	.word	0x58025494

0800255c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002568:	4b67      	ldr	r3, [pc, #412]	; (8002708 <HAL_DMA_IRQHandler+0x1ac>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a67      	ldr	r2, [pc, #412]	; (800270c <HAL_DMA_IRQHandler+0x1b0>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0a9b      	lsrs	r3, r3, #10
 8002574:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a5f      	ldr	r2, [pc, #380]	; (8002710 <HAL_DMA_IRQHandler+0x1b4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d04a      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a5d      	ldr	r2, [pc, #372]	; (8002714 <HAL_DMA_IRQHandler+0x1b8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d045      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a5c      	ldr	r2, [pc, #368]	; (8002718 <HAL_DMA_IRQHandler+0x1bc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d040      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5a      	ldr	r2, [pc, #360]	; (800271c <HAL_DMA_IRQHandler+0x1c0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d03b      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a59      	ldr	r2, [pc, #356]	; (8002720 <HAL_DMA_IRQHandler+0x1c4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d036      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a57      	ldr	r2, [pc, #348]	; (8002724 <HAL_DMA_IRQHandler+0x1c8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d031      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a56      	ldr	r2, [pc, #344]	; (8002728 <HAL_DMA_IRQHandler+0x1cc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d02c      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a54      	ldr	r2, [pc, #336]	; (800272c <HAL_DMA_IRQHandler+0x1d0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d027      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a53      	ldr	r2, [pc, #332]	; (8002730 <HAL_DMA_IRQHandler+0x1d4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d022      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a51      	ldr	r2, [pc, #324]	; (8002734 <HAL_DMA_IRQHandler+0x1d8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01d      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a50      	ldr	r2, [pc, #320]	; (8002738 <HAL_DMA_IRQHandler+0x1dc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d018      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a4e      	ldr	r2, [pc, #312]	; (800273c <HAL_DMA_IRQHandler+0x1e0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d013      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a4d      	ldr	r2, [pc, #308]	; (8002740 <HAL_DMA_IRQHandler+0x1e4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00e      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a4b      	ldr	r2, [pc, #300]	; (8002744 <HAL_DMA_IRQHandler+0x1e8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d009      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a4a      	ldr	r2, [pc, #296]	; (8002748 <HAL_DMA_IRQHandler+0x1ec>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d004      	beq.n	800262e <HAL_DMA_IRQHandler+0xd2>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a48      	ldr	r2, [pc, #288]	; (800274c <HAL_DMA_IRQHandler+0x1f0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_DMA_IRQHandler+0xd6>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_DMA_IRQHandler+0xd8>
 8002632:	2300      	movs	r3, #0
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 842b 	beq.w	8002e90 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2208      	movs	r2, #8
 8002644:	409a      	lsls	r2, r3
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80a2 	beq.w	8002794 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2e      	ldr	r2, [pc, #184]	; (8002710 <HAL_DMA_IRQHandler+0x1b4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d04a      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2d      	ldr	r2, [pc, #180]	; (8002714 <HAL_DMA_IRQHandler+0x1b8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d045      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2b      	ldr	r2, [pc, #172]	; (8002718 <HAL_DMA_IRQHandler+0x1bc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d040      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a2a      	ldr	r2, [pc, #168]	; (800271c <HAL_DMA_IRQHandler+0x1c0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d03b      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a28      	ldr	r2, [pc, #160]	; (8002720 <HAL_DMA_IRQHandler+0x1c4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d036      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a27      	ldr	r2, [pc, #156]	; (8002724 <HAL_DMA_IRQHandler+0x1c8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d031      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a25      	ldr	r2, [pc, #148]	; (8002728 <HAL_DMA_IRQHandler+0x1cc>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d02c      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a24      	ldr	r2, [pc, #144]	; (800272c <HAL_DMA_IRQHandler+0x1d0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d027      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a22      	ldr	r2, [pc, #136]	; (8002730 <HAL_DMA_IRQHandler+0x1d4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d022      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a21      	ldr	r2, [pc, #132]	; (8002734 <HAL_DMA_IRQHandler+0x1d8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d01d      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1f      	ldr	r2, [pc, #124]	; (8002738 <HAL_DMA_IRQHandler+0x1dc>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d018      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1e      	ldr	r2, [pc, #120]	; (800273c <HAL_DMA_IRQHandler+0x1e0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d013      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <HAL_DMA_IRQHandler+0x1e4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00e      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_DMA_IRQHandler+0x1e8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d009      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <HAL_DMA_IRQHandler+0x1ec>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d004      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x194>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a18      	ldr	r2, [pc, #96]	; (800274c <HAL_DMA_IRQHandler+0x1f0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d12f      	bne.n	8002750 <HAL_DMA_IRQHandler+0x1f4>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	e02e      	b.n	8002764 <HAL_DMA_IRQHandler+0x208>
 8002706:	bf00      	nop
 8002708:	24000000 	.word	0x24000000
 800270c:	1b4e81b5 	.word	0x1b4e81b5
 8002710:	40020010 	.word	0x40020010
 8002714:	40020028 	.word	0x40020028
 8002718:	40020040 	.word	0x40020040
 800271c:	40020058 	.word	0x40020058
 8002720:	40020070 	.word	0x40020070
 8002724:	40020088 	.word	0x40020088
 8002728:	400200a0 	.word	0x400200a0
 800272c:	400200b8 	.word	0x400200b8
 8002730:	40020410 	.word	0x40020410
 8002734:	40020428 	.word	0x40020428
 8002738:	40020440 	.word	0x40020440
 800273c:	40020458 	.word	0x40020458
 8002740:	40020470 	.word	0x40020470
 8002744:	40020488 	.word	0x40020488
 8002748:	400204a0 	.word	0x400204a0
 800274c:	400204b8 	.word	0x400204b8
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	bf14      	ite	ne
 800275e:	2301      	movne	r3, #1
 8002760:	2300      	moveq	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0204 	bic.w	r2, r2, #4
 8002776:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2208      	movs	r2, #8
 8002782:	409a      	lsls	r2, r3
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d06e      	beq.n	8002888 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a69      	ldr	r2, [pc, #420]	; (8002954 <HAL_DMA_IRQHandler+0x3f8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d04a      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a67      	ldr	r2, [pc, #412]	; (8002958 <HAL_DMA_IRQHandler+0x3fc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d045      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a66      	ldr	r2, [pc, #408]	; (800295c <HAL_DMA_IRQHandler+0x400>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d040      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a64      	ldr	r2, [pc, #400]	; (8002960 <HAL_DMA_IRQHandler+0x404>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d03b      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a63      	ldr	r2, [pc, #396]	; (8002964 <HAL_DMA_IRQHandler+0x408>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d036      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a61      	ldr	r2, [pc, #388]	; (8002968 <HAL_DMA_IRQHandler+0x40c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d031      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a60      	ldr	r2, [pc, #384]	; (800296c <HAL_DMA_IRQHandler+0x410>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d02c      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5e      	ldr	r2, [pc, #376]	; (8002970 <HAL_DMA_IRQHandler+0x414>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d027      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a5d      	ldr	r2, [pc, #372]	; (8002974 <HAL_DMA_IRQHandler+0x418>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d022      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a5b      	ldr	r2, [pc, #364]	; (8002978 <HAL_DMA_IRQHandler+0x41c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d01d      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a5a      	ldr	r2, [pc, #360]	; (800297c <HAL_DMA_IRQHandler+0x420>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d018      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a58      	ldr	r2, [pc, #352]	; (8002980 <HAL_DMA_IRQHandler+0x424>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a57      	ldr	r2, [pc, #348]	; (8002984 <HAL_DMA_IRQHandler+0x428>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00e      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a55      	ldr	r2, [pc, #340]	; (8002988 <HAL_DMA_IRQHandler+0x42c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d009      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a54      	ldr	r2, [pc, #336]	; (800298c <HAL_DMA_IRQHandler+0x430>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_DMA_IRQHandler+0x2ee>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a52      	ldr	r2, [pc, #328]	; (8002990 <HAL_DMA_IRQHandler+0x434>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10a      	bne.n	8002860 <HAL_DMA_IRQHandler+0x304>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e003      	b.n	8002868 <HAL_DMA_IRQHandler+0x30c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2300      	movs	r3, #0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00d      	beq.n	8002888 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	2201      	movs	r2, #1
 8002876:	409a      	lsls	r2, r3
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	f043 0202 	orr.w	r2, r3, #2
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	2204      	movs	r2, #4
 8002892:	409a      	lsls	r2, r3
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 808f 	beq.w	80029bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2c      	ldr	r2, [pc, #176]	; (8002954 <HAL_DMA_IRQHandler+0x3f8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d04a      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a2a      	ldr	r2, [pc, #168]	; (8002958 <HAL_DMA_IRQHandler+0x3fc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d045      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a29      	ldr	r2, [pc, #164]	; (800295c <HAL_DMA_IRQHandler+0x400>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d040      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a27      	ldr	r2, [pc, #156]	; (8002960 <HAL_DMA_IRQHandler+0x404>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d03b      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a26      	ldr	r2, [pc, #152]	; (8002964 <HAL_DMA_IRQHandler+0x408>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d036      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a24      	ldr	r2, [pc, #144]	; (8002968 <HAL_DMA_IRQHandler+0x40c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d031      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a23      	ldr	r2, [pc, #140]	; (800296c <HAL_DMA_IRQHandler+0x410>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d02c      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a21      	ldr	r2, [pc, #132]	; (8002970 <HAL_DMA_IRQHandler+0x414>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d027      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a20      	ldr	r2, [pc, #128]	; (8002974 <HAL_DMA_IRQHandler+0x418>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d022      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <HAL_DMA_IRQHandler+0x41c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d01d      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <HAL_DMA_IRQHandler+0x420>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d018      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <HAL_DMA_IRQHandler+0x424>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1a      	ldr	r2, [pc, #104]	; (8002984 <HAL_DMA_IRQHandler+0x428>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00e      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a18      	ldr	r2, [pc, #96]	; (8002988 <HAL_DMA_IRQHandler+0x42c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d009      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a17      	ldr	r2, [pc, #92]	; (800298c <HAL_DMA_IRQHandler+0x430>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d004      	beq.n	800293e <HAL_DMA_IRQHandler+0x3e2>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a15      	ldr	r2, [pc, #84]	; (8002990 <HAL_DMA_IRQHandler+0x434>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d12a      	bne.n	8002994 <HAL_DMA_IRQHandler+0x438>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e023      	b.n	800299c <HAL_DMA_IRQHandler+0x440>
 8002954:	40020010 	.word	0x40020010
 8002958:	40020028 	.word	0x40020028
 800295c:	40020040 	.word	0x40020040
 8002960:	40020058 	.word	0x40020058
 8002964:	40020070 	.word	0x40020070
 8002968:	40020088 	.word	0x40020088
 800296c:	400200a0 	.word	0x400200a0
 8002970:	400200b8 	.word	0x400200b8
 8002974:	40020410 	.word	0x40020410
 8002978:	40020428 	.word	0x40020428
 800297c:	40020440 	.word	0x40020440
 8002980:	40020458 	.word	0x40020458
 8002984:	40020470 	.word	0x40020470
 8002988:	40020488 	.word	0x40020488
 800298c:	400204a0 	.word	0x400204a0
 8002990:	400204b8 	.word	0x400204b8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2300      	movs	r3, #0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00d      	beq.n	80029bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	2204      	movs	r2, #4
 80029aa:	409a      	lsls	r2, r3
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	f043 0204 	orr.w	r2, r3, #4
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2210      	movs	r2, #16
 80029c6:	409a      	lsls	r2, r3
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80a6 	beq.w	8002b1e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a85      	ldr	r2, [pc, #532]	; (8002bec <HAL_DMA_IRQHandler+0x690>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d04a      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a83      	ldr	r2, [pc, #524]	; (8002bf0 <HAL_DMA_IRQHandler+0x694>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d045      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a82      	ldr	r2, [pc, #520]	; (8002bf4 <HAL_DMA_IRQHandler+0x698>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d040      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a80      	ldr	r2, [pc, #512]	; (8002bf8 <HAL_DMA_IRQHandler+0x69c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d03b      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7f      	ldr	r2, [pc, #508]	; (8002bfc <HAL_DMA_IRQHandler+0x6a0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d036      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a7d      	ldr	r2, [pc, #500]	; (8002c00 <HAL_DMA_IRQHandler+0x6a4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d031      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a7c      	ldr	r2, [pc, #496]	; (8002c04 <HAL_DMA_IRQHandler+0x6a8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d02c      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a7a      	ldr	r2, [pc, #488]	; (8002c08 <HAL_DMA_IRQHandler+0x6ac>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d027      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a79      	ldr	r2, [pc, #484]	; (8002c0c <HAL_DMA_IRQHandler+0x6b0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d022      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a77      	ldr	r2, [pc, #476]	; (8002c10 <HAL_DMA_IRQHandler+0x6b4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01d      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a76      	ldr	r2, [pc, #472]	; (8002c14 <HAL_DMA_IRQHandler+0x6b8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d018      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a74      	ldr	r2, [pc, #464]	; (8002c18 <HAL_DMA_IRQHandler+0x6bc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a73      	ldr	r2, [pc, #460]	; (8002c1c <HAL_DMA_IRQHandler+0x6c0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00e      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a71      	ldr	r2, [pc, #452]	; (8002c20 <HAL_DMA_IRQHandler+0x6c4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d009      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a70      	ldr	r2, [pc, #448]	; (8002c24 <HAL_DMA_IRQHandler+0x6c8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d004      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x516>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a6e      	ldr	r2, [pc, #440]	; (8002c28 <HAL_DMA_IRQHandler+0x6cc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10a      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x52c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf14      	ite	ne
 8002a80:	2301      	movne	r3, #1
 8002a82:	2300      	moveq	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e009      	b.n	8002a9c <HAL_DMA_IRQHandler+0x540>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d03e      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2210      	movs	r2, #16
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d018      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d108      	bne.n	8002ade <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d024      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
 8002adc:	e01f      	b.n	8002b1e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01b      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4798      	blx	r3
 8002aee:	e016      	b.n	8002b1e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d107      	bne.n	8002b0e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0208 	bic.w	r2, r2, #8
 8002b0c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	2220      	movs	r2, #32
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8110 	beq.w	8002d54 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2c      	ldr	r2, [pc, #176]	; (8002bec <HAL_DMA_IRQHandler+0x690>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d04a      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2b      	ldr	r2, [pc, #172]	; (8002bf0 <HAL_DMA_IRQHandler+0x694>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d045      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a29      	ldr	r2, [pc, #164]	; (8002bf4 <HAL_DMA_IRQHandler+0x698>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d040      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a28      	ldr	r2, [pc, #160]	; (8002bf8 <HAL_DMA_IRQHandler+0x69c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d03b      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a26      	ldr	r2, [pc, #152]	; (8002bfc <HAL_DMA_IRQHandler+0x6a0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d036      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <HAL_DMA_IRQHandler+0x6a4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d031      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a23      	ldr	r2, [pc, #140]	; (8002c04 <HAL_DMA_IRQHandler+0x6a8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d02c      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <HAL_DMA_IRQHandler+0x6ac>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d027      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a20      	ldr	r2, [pc, #128]	; (8002c0c <HAL_DMA_IRQHandler+0x6b0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d022      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1f      	ldr	r2, [pc, #124]	; (8002c10 <HAL_DMA_IRQHandler+0x6b4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d01d      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <HAL_DMA_IRQHandler+0x6b8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d018      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <HAL_DMA_IRQHandler+0x6bc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d013      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	; (8002c1c <HAL_DMA_IRQHandler+0x6c0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00e      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <HAL_DMA_IRQHandler+0x6c4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_DMA_IRQHandler+0x6c8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x678>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <HAL_DMA_IRQHandler+0x6cc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d12b      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x6d0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf14      	ite	ne
 8002be2:	2301      	movne	r3, #1
 8002be4:	2300      	moveq	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	e02a      	b.n	8002c40 <HAL_DMA_IRQHandler+0x6e4>
 8002bea:	bf00      	nop
 8002bec:	40020010 	.word	0x40020010
 8002bf0:	40020028 	.word	0x40020028
 8002bf4:	40020040 	.word	0x40020040
 8002bf8:	40020058 	.word	0x40020058
 8002bfc:	40020070 	.word	0x40020070
 8002c00:	40020088 	.word	0x40020088
 8002c04:	400200a0 	.word	0x400200a0
 8002c08:	400200b8 	.word	0x400200b8
 8002c0c:	40020410 	.word	0x40020410
 8002c10:	40020428 	.word	0x40020428
 8002c14:	40020440 	.word	0x40020440
 8002c18:	40020458 	.word	0x40020458
 8002c1c:	40020470 	.word	0x40020470
 8002c20:	40020488 	.word	0x40020488
 8002c24:	400204a0 	.word	0x400204a0
 8002c28:	400204b8 	.word	0x400204b8
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8087 	beq.w	8002d54 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	2220      	movs	r2, #32
 8002c50:	409a      	lsls	r2, r3
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d139      	bne.n	8002cd6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0216 	bic.w	r2, r2, #22
 8002c70:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c80:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <HAL_DMA_IRQHandler+0x736>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0208 	bic.w	r2, r2, #8
 8002ca0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	223f      	movs	r2, #63	; 0x3f
 8002cac:	409a      	lsls	r2, r3
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 834a 	beq.w	8003360 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
          }
          return;
 8002cd4:	e344      	b.n	8003360 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d018      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d108      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d02c      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
 8002d02:	e027      	b.n	8002d54 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d023      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
 8002d14:	e01e      	b.n	8002d54 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10f      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0210 	bic.w	r2, r2, #16
 8002d32:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8306 	beq.w	800336a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8088 	beq.w	8002e7c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a7a      	ldr	r2, [pc, #488]	; (8002f64 <HAL_DMA_IRQHandler+0xa08>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d04a      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a79      	ldr	r2, [pc, #484]	; (8002f68 <HAL_DMA_IRQHandler+0xa0c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d045      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a77      	ldr	r2, [pc, #476]	; (8002f6c <HAL_DMA_IRQHandler+0xa10>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d040      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a76      	ldr	r2, [pc, #472]	; (8002f70 <HAL_DMA_IRQHandler+0xa14>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d03b      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a74      	ldr	r2, [pc, #464]	; (8002f74 <HAL_DMA_IRQHandler+0xa18>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d036      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a73      	ldr	r2, [pc, #460]	; (8002f78 <HAL_DMA_IRQHandler+0xa1c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d031      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a71      	ldr	r2, [pc, #452]	; (8002f7c <HAL_DMA_IRQHandler+0xa20>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d02c      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a70      	ldr	r2, [pc, #448]	; (8002f80 <HAL_DMA_IRQHandler+0xa24>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d027      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a6e      	ldr	r2, [pc, #440]	; (8002f84 <HAL_DMA_IRQHandler+0xa28>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d022      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6d      	ldr	r2, [pc, #436]	; (8002f88 <HAL_DMA_IRQHandler+0xa2c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d01d      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a6b      	ldr	r2, [pc, #428]	; (8002f8c <HAL_DMA_IRQHandler+0xa30>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d018      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6a      	ldr	r2, [pc, #424]	; (8002f90 <HAL_DMA_IRQHandler+0xa34>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d013      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a68      	ldr	r2, [pc, #416]	; (8002f94 <HAL_DMA_IRQHandler+0xa38>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00e      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a67      	ldr	r2, [pc, #412]	; (8002f98 <HAL_DMA_IRQHandler+0xa3c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d009      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a65      	ldr	r2, [pc, #404]	; (8002f9c <HAL_DMA_IRQHandler+0xa40>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d004      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x8b8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a64      	ldr	r2, [pc, #400]	; (8002fa0 <HAL_DMA_IRQHandler+0xa44>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d108      	bne.n	8002e26 <HAL_DMA_IRQHandler+0x8ca>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	e007      	b.n	8002e36 <HAL_DMA_IRQHandler+0x8da>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d307      	bcc.n	8002e52 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f2      	bne.n	8002e36 <HAL_DMA_IRQHandler+0x8da>
 8002e50:	e000      	b.n	8002e54 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002e52:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2203      	movs	r2, #3
 8002e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002e6a:	e003      	b.n	8002e74 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8272 	beq.w	800336a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	4798      	blx	r3
 8002e8e:	e26c      	b.n	800336a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a43      	ldr	r2, [pc, #268]	; (8002fa4 <HAL_DMA_IRQHandler+0xa48>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d022      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x984>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a42      	ldr	r2, [pc, #264]	; (8002fa8 <HAL_DMA_IRQHandler+0xa4c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d01d      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x984>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a40      	ldr	r2, [pc, #256]	; (8002fac <HAL_DMA_IRQHandler+0xa50>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d018      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x984>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a3f      	ldr	r2, [pc, #252]	; (8002fb0 <HAL_DMA_IRQHandler+0xa54>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x984>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a3d      	ldr	r2, [pc, #244]	; (8002fb4 <HAL_DMA_IRQHandler+0xa58>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00e      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x984>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a3c      	ldr	r2, [pc, #240]	; (8002fb8 <HAL_DMA_IRQHandler+0xa5c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d009      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x984>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a3a      	ldr	r2, [pc, #232]	; (8002fbc <HAL_DMA_IRQHandler+0xa60>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d004      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x984>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a39      	ldr	r2, [pc, #228]	; (8002fc0 <HAL_DMA_IRQHandler+0xa64>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d101      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0x988>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <HAL_DMA_IRQHandler+0x98a>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 823f 	beq.w	800336a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	2204      	movs	r2, #4
 8002efe:	409a      	lsls	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80cd 	beq.w	80030a4 <HAL_DMA_IRQHandler+0xb48>
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80c7 	beq.w	80030a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	2204      	movs	r2, #4
 8002f20:	409a      	lsls	r2, r3
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d049      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8210 	beq.w	8003364 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f4c:	e20a      	b.n	8003364 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8206 	beq.w	8003364 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f60:	e200      	b.n	8003364 <HAL_DMA_IRQHandler+0xe08>
 8002f62:	bf00      	nop
 8002f64:	40020010 	.word	0x40020010
 8002f68:	40020028 	.word	0x40020028
 8002f6c:	40020040 	.word	0x40020040
 8002f70:	40020058 	.word	0x40020058
 8002f74:	40020070 	.word	0x40020070
 8002f78:	40020088 	.word	0x40020088
 8002f7c:	400200a0 	.word	0x400200a0
 8002f80:	400200b8 	.word	0x400200b8
 8002f84:	40020410 	.word	0x40020410
 8002f88:	40020428 	.word	0x40020428
 8002f8c:	40020440 	.word	0x40020440
 8002f90:	40020458 	.word	0x40020458
 8002f94:	40020470 	.word	0x40020470
 8002f98:	40020488 	.word	0x40020488
 8002f9c:	400204a0 	.word	0x400204a0
 8002fa0:	400204b8 	.word	0x400204b8
 8002fa4:	58025408 	.word	0x58025408
 8002fa8:	5802541c 	.word	0x5802541c
 8002fac:	58025430 	.word	0x58025430
 8002fb0:	58025444 	.word	0x58025444
 8002fb4:	58025458 	.word	0x58025458
 8002fb8:	5802546c 	.word	0x5802546c
 8002fbc:	58025480 	.word	0x58025480
 8002fc0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d160      	bne.n	8003090 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a7f      	ldr	r2, [pc, #508]	; (80031d0 <HAL_DMA_IRQHandler+0xc74>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d04a      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a7d      	ldr	r2, [pc, #500]	; (80031d4 <HAL_DMA_IRQHandler+0xc78>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d045      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a7c      	ldr	r2, [pc, #496]	; (80031d8 <HAL_DMA_IRQHandler+0xc7c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d040      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a7a      	ldr	r2, [pc, #488]	; (80031dc <HAL_DMA_IRQHandler+0xc80>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d03b      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a79      	ldr	r2, [pc, #484]	; (80031e0 <HAL_DMA_IRQHandler+0xc84>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d036      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a77      	ldr	r2, [pc, #476]	; (80031e4 <HAL_DMA_IRQHandler+0xc88>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d031      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a76      	ldr	r2, [pc, #472]	; (80031e8 <HAL_DMA_IRQHandler+0xc8c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d02c      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a74      	ldr	r2, [pc, #464]	; (80031ec <HAL_DMA_IRQHandler+0xc90>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d027      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a73      	ldr	r2, [pc, #460]	; (80031f0 <HAL_DMA_IRQHandler+0xc94>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d022      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a71      	ldr	r2, [pc, #452]	; (80031f4 <HAL_DMA_IRQHandler+0xc98>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d01d      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a70      	ldr	r2, [pc, #448]	; (80031f8 <HAL_DMA_IRQHandler+0xc9c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d018      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a6e      	ldr	r2, [pc, #440]	; (80031fc <HAL_DMA_IRQHandler+0xca0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6d      	ldr	r2, [pc, #436]	; (8003200 <HAL_DMA_IRQHandler+0xca4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00e      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a6b      	ldr	r2, [pc, #428]	; (8003204 <HAL_DMA_IRQHandler+0xca8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d009      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a6a      	ldr	r2, [pc, #424]	; (8003208 <HAL_DMA_IRQHandler+0xcac>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d004      	beq.n	800306e <HAL_DMA_IRQHandler+0xb12>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a68      	ldr	r2, [pc, #416]	; (800320c <HAL_DMA_IRQHandler+0xcb0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d108      	bne.n	8003080 <HAL_DMA_IRQHandler+0xb24>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0208 	bic.w	r2, r2, #8
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e007      	b.n	8003090 <HAL_DMA_IRQHandler+0xb34>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0204 	bic.w	r2, r2, #4
 800308e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8165 	beq.w	8003364 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030a2:	e15f      	b.n	8003364 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	2202      	movs	r2, #2
 80030ae:	409a      	lsls	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80c5 	beq.w	8003244 <HAL_DMA_IRQHandler+0xce8>
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80bf 	beq.w	8003244 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	2202      	movs	r2, #2
 80030d0:	409a      	lsls	r2, r3
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d018      	beq.n	8003112 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 813a 	beq.w	8003368 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030fc:	e134      	b.n	8003368 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8130 	beq.w	8003368 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003110:	e12a      	b.n	8003368 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	f040 8089 	bne.w	8003230 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2b      	ldr	r2, [pc, #172]	; (80031d0 <HAL_DMA_IRQHandler+0xc74>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d04a      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a29      	ldr	r2, [pc, #164]	; (80031d4 <HAL_DMA_IRQHandler+0xc78>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d045      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a28      	ldr	r2, [pc, #160]	; (80031d8 <HAL_DMA_IRQHandler+0xc7c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d040      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a26      	ldr	r2, [pc, #152]	; (80031dc <HAL_DMA_IRQHandler+0xc80>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d03b      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a25      	ldr	r2, [pc, #148]	; (80031e0 <HAL_DMA_IRQHandler+0xc84>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d036      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <HAL_DMA_IRQHandler+0xc88>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d031      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a22      	ldr	r2, [pc, #136]	; (80031e8 <HAL_DMA_IRQHandler+0xc8c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d02c      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a20      	ldr	r2, [pc, #128]	; (80031ec <HAL_DMA_IRQHandler+0xc90>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d027      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1f      	ldr	r2, [pc, #124]	; (80031f0 <HAL_DMA_IRQHandler+0xc94>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d022      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <HAL_DMA_IRQHandler+0xc98>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d01d      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <HAL_DMA_IRQHandler+0xc9c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d018      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1a      	ldr	r2, [pc, #104]	; (80031fc <HAL_DMA_IRQHandler+0xca0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a19      	ldr	r2, [pc, #100]	; (8003200 <HAL_DMA_IRQHandler+0xca4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00e      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a17      	ldr	r2, [pc, #92]	; (8003204 <HAL_DMA_IRQHandler+0xca8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d009      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a16      	ldr	r2, [pc, #88]	; (8003208 <HAL_DMA_IRQHandler+0xcac>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d004      	beq.n	80031be <HAL_DMA_IRQHandler+0xc62>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a14      	ldr	r2, [pc, #80]	; (800320c <HAL_DMA_IRQHandler+0xcb0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d128      	bne.n	8003210 <HAL_DMA_IRQHandler+0xcb4>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0214 	bic.w	r2, r2, #20
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e027      	b.n	8003220 <HAL_DMA_IRQHandler+0xcc4>
 80031d0:	40020010 	.word	0x40020010
 80031d4:	40020028 	.word	0x40020028
 80031d8:	40020040 	.word	0x40020040
 80031dc:	40020058 	.word	0x40020058
 80031e0:	40020070 	.word	0x40020070
 80031e4:	40020088 	.word	0x40020088
 80031e8:	400200a0 	.word	0x400200a0
 80031ec:	400200b8 	.word	0x400200b8
 80031f0:	40020410 	.word	0x40020410
 80031f4:	40020428 	.word	0x40020428
 80031f8:	40020440 	.word	0x40020440
 80031fc:	40020458 	.word	0x40020458
 8003200:	40020470 	.word	0x40020470
 8003204:	40020488 	.word	0x40020488
 8003208:	400204a0 	.word	0x400204a0
 800320c:	400204b8 	.word	0x400204b8
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 020a 	bic.w	r2, r2, #10
 800321e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8097 	beq.w	8003368 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003242:	e091      	b.n	8003368 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	2208      	movs	r2, #8
 800324e:	409a      	lsls	r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8088 	beq.w	800336a <HAL_DMA_IRQHandler+0xe0e>
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 8082 	beq.w	800336a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a41      	ldr	r2, [pc, #260]	; (8003370 <HAL_DMA_IRQHandler+0xe14>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d04a      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a3f      	ldr	r2, [pc, #252]	; (8003374 <HAL_DMA_IRQHandler+0xe18>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d045      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a3e      	ldr	r2, [pc, #248]	; (8003378 <HAL_DMA_IRQHandler+0xe1c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d040      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a3c      	ldr	r2, [pc, #240]	; (800337c <HAL_DMA_IRQHandler+0xe20>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d03b      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a3b      	ldr	r2, [pc, #236]	; (8003380 <HAL_DMA_IRQHandler+0xe24>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d036      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a39      	ldr	r2, [pc, #228]	; (8003384 <HAL_DMA_IRQHandler+0xe28>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d031      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a38      	ldr	r2, [pc, #224]	; (8003388 <HAL_DMA_IRQHandler+0xe2c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d02c      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a36      	ldr	r2, [pc, #216]	; (800338c <HAL_DMA_IRQHandler+0xe30>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d027      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a35      	ldr	r2, [pc, #212]	; (8003390 <HAL_DMA_IRQHandler+0xe34>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d022      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a33      	ldr	r2, [pc, #204]	; (8003394 <HAL_DMA_IRQHandler+0xe38>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01d      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a32      	ldr	r2, [pc, #200]	; (8003398 <HAL_DMA_IRQHandler+0xe3c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d018      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a30      	ldr	r2, [pc, #192]	; (800339c <HAL_DMA_IRQHandler+0xe40>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2f      	ldr	r2, [pc, #188]	; (80033a0 <HAL_DMA_IRQHandler+0xe44>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00e      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2d      	ldr	r2, [pc, #180]	; (80033a4 <HAL_DMA_IRQHandler+0xe48>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d009      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <HAL_DMA_IRQHandler+0xe4c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d004      	beq.n	8003306 <HAL_DMA_IRQHandler+0xdaa>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2a      	ldr	r2, [pc, #168]	; (80033ac <HAL_DMA_IRQHandler+0xe50>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d108      	bne.n	8003318 <HAL_DMA_IRQHandler+0xdbc>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 021c 	bic.w	r2, r2, #28
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e007      	b.n	8003328 <HAL_DMA_IRQHandler+0xdcc>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 020e 	bic.w	r2, r2, #14
 8003326:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2201      	movs	r2, #1
 8003332:	409a      	lsls	r2, r3
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
 800335e:	e004      	b.n	800336a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003360:	bf00      	nop
 8003362:	e002      	b.n	800336a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003364:	bf00      	nop
 8003366:	e000      	b.n	800336a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003368:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800336a:	3728      	adds	r7, #40	; 0x28
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40020010 	.word	0x40020010
 8003374:	40020028 	.word	0x40020028
 8003378:	40020040 	.word	0x40020040
 800337c:	40020058 	.word	0x40020058
 8003380:	40020070 	.word	0x40020070
 8003384:	40020088 	.word	0x40020088
 8003388:	400200a0 	.word	0x400200a0
 800338c:	400200b8 	.word	0x400200b8
 8003390:	40020410 	.word	0x40020410
 8003394:	40020428 	.word	0x40020428
 8003398:	40020440 	.word	0x40020440
 800339c:	40020458 	.word	0x40020458
 80033a0:	40020470 	.word	0x40020470
 80033a4:	40020488 	.word	0x40020488
 80033a8:	400204a0 	.word	0x400204a0
 80033ac:	400204b8 	.word	0x400204b8

080033b0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a7f      	ldr	r2, [pc, #508]	; (80035e4 <DMA_SetConfig+0x21c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d072      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a7d      	ldr	r2, [pc, #500]	; (80035e8 <DMA_SetConfig+0x220>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d06d      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7c      	ldr	r2, [pc, #496]	; (80035ec <DMA_SetConfig+0x224>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d068      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a7a      	ldr	r2, [pc, #488]	; (80035f0 <DMA_SetConfig+0x228>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d063      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a79      	ldr	r2, [pc, #484]	; (80035f4 <DMA_SetConfig+0x22c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d05e      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a77      	ldr	r2, [pc, #476]	; (80035f8 <DMA_SetConfig+0x230>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d059      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a76      	ldr	r2, [pc, #472]	; (80035fc <DMA_SetConfig+0x234>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d054      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a74      	ldr	r2, [pc, #464]	; (8003600 <DMA_SetConfig+0x238>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d04f      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a73      	ldr	r2, [pc, #460]	; (8003604 <DMA_SetConfig+0x23c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d04a      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a71      	ldr	r2, [pc, #452]	; (8003608 <DMA_SetConfig+0x240>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d045      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a70      	ldr	r2, [pc, #448]	; (800360c <DMA_SetConfig+0x244>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d040      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a6e      	ldr	r2, [pc, #440]	; (8003610 <DMA_SetConfig+0x248>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d03b      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6d      	ldr	r2, [pc, #436]	; (8003614 <DMA_SetConfig+0x24c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d036      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a6b      	ldr	r2, [pc, #428]	; (8003618 <DMA_SetConfig+0x250>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d031      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a6a      	ldr	r2, [pc, #424]	; (800361c <DMA_SetConfig+0x254>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d02c      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a68      	ldr	r2, [pc, #416]	; (8003620 <DMA_SetConfig+0x258>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d027      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a67      	ldr	r2, [pc, #412]	; (8003624 <DMA_SetConfig+0x25c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d022      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a65      	ldr	r2, [pc, #404]	; (8003628 <DMA_SetConfig+0x260>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d01d      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a64      	ldr	r2, [pc, #400]	; (800362c <DMA_SetConfig+0x264>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d018      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a62      	ldr	r2, [pc, #392]	; (8003630 <DMA_SetConfig+0x268>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a61      	ldr	r2, [pc, #388]	; (8003634 <DMA_SetConfig+0x26c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00e      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a5f      	ldr	r2, [pc, #380]	; (8003638 <DMA_SetConfig+0x270>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d009      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a5e      	ldr	r2, [pc, #376]	; (800363c <DMA_SetConfig+0x274>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a5c      	ldr	r2, [pc, #368]	; (8003640 <DMA_SetConfig+0x278>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <DMA_SetConfig+0x10e>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <DMA_SetConfig+0x110>
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a39      	ldr	r2, [pc, #228]	; (80035e4 <DMA_SetConfig+0x21c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d04a      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a38      	ldr	r2, [pc, #224]	; (80035e8 <DMA_SetConfig+0x220>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d045      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a36      	ldr	r2, [pc, #216]	; (80035ec <DMA_SetConfig+0x224>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d040      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a35      	ldr	r2, [pc, #212]	; (80035f0 <DMA_SetConfig+0x228>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d03b      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a33      	ldr	r2, [pc, #204]	; (80035f4 <DMA_SetConfig+0x22c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d036      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a32      	ldr	r2, [pc, #200]	; (80035f8 <DMA_SetConfig+0x230>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d031      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a30      	ldr	r2, [pc, #192]	; (80035fc <DMA_SetConfig+0x234>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d02c      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2f      	ldr	r2, [pc, #188]	; (8003600 <DMA_SetConfig+0x238>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d027      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2d      	ldr	r2, [pc, #180]	; (8003604 <DMA_SetConfig+0x23c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d022      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2c      	ldr	r2, [pc, #176]	; (8003608 <DMA_SetConfig+0x240>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d01d      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2a      	ldr	r2, [pc, #168]	; (800360c <DMA_SetConfig+0x244>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d018      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <DMA_SetConfig+0x248>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a27      	ldr	r2, [pc, #156]	; (8003614 <DMA_SetConfig+0x24c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00e      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a26      	ldr	r2, [pc, #152]	; (8003618 <DMA_SetConfig+0x250>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d009      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a24      	ldr	r2, [pc, #144]	; (800361c <DMA_SetConfig+0x254>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a23      	ldr	r2, [pc, #140]	; (8003620 <DMA_SetConfig+0x258>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <DMA_SetConfig+0x1d4>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <DMA_SetConfig+0x1d6>
 800359c:	2300      	movs	r3, #0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d059      	beq.n	8003656 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	223f      	movs	r2, #63	; 0x3f
 80035ac:	409a      	lsls	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d138      	bne.n	8003644 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80035e2:	e086      	b.n	80036f2 <DMA_SetConfig+0x32a>
 80035e4:	40020010 	.word	0x40020010
 80035e8:	40020028 	.word	0x40020028
 80035ec:	40020040 	.word	0x40020040
 80035f0:	40020058 	.word	0x40020058
 80035f4:	40020070 	.word	0x40020070
 80035f8:	40020088 	.word	0x40020088
 80035fc:	400200a0 	.word	0x400200a0
 8003600:	400200b8 	.word	0x400200b8
 8003604:	40020410 	.word	0x40020410
 8003608:	40020428 	.word	0x40020428
 800360c:	40020440 	.word	0x40020440
 8003610:	40020458 	.word	0x40020458
 8003614:	40020470 	.word	0x40020470
 8003618:	40020488 	.word	0x40020488
 800361c:	400204a0 	.word	0x400204a0
 8003620:	400204b8 	.word	0x400204b8
 8003624:	58025408 	.word	0x58025408
 8003628:	5802541c 	.word	0x5802541c
 800362c:	58025430 	.word	0x58025430
 8003630:	58025444 	.word	0x58025444
 8003634:	58025458 	.word	0x58025458
 8003638:	5802546c 	.word	0x5802546c
 800363c:	58025480 	.word	0x58025480
 8003640:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]
}
 8003654:	e04d      	b.n	80036f2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a29      	ldr	r2, [pc, #164]	; (8003700 <DMA_SetConfig+0x338>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d022      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a27      	ldr	r2, [pc, #156]	; (8003704 <DMA_SetConfig+0x33c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01d      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a26      	ldr	r2, [pc, #152]	; (8003708 <DMA_SetConfig+0x340>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d018      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a24      	ldr	r2, [pc, #144]	; (800370c <DMA_SetConfig+0x344>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a23      	ldr	r2, [pc, #140]	; (8003710 <DMA_SetConfig+0x348>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a21      	ldr	r2, [pc, #132]	; (8003714 <DMA_SetConfig+0x34c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d009      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a20      	ldr	r2, [pc, #128]	; (8003718 <DMA_SetConfig+0x350>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1e      	ldr	r2, [pc, #120]	; (800371c <DMA_SetConfig+0x354>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <DMA_SetConfig+0x2e2>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <DMA_SetConfig+0x2e4>
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2201      	movs	r2, #1
 80036ba:	409a      	lsls	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b40      	cmp	r3, #64	; 0x40
 80036ce:	d108      	bne.n	80036e2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	60da      	str	r2, [r3, #12]
}
 80036e0:	e007      	b.n	80036f2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	60da      	str	r2, [r3, #12]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	58025408 	.word	0x58025408
 8003704:	5802541c 	.word	0x5802541c
 8003708:	58025430 	.word	0x58025430
 800370c:	58025444 	.word	0x58025444
 8003710:	58025458 	.word	0x58025458
 8003714:	5802546c 	.word	0x5802546c
 8003718:	58025480 	.word	0x58025480
 800371c:	58025494 	.word	0x58025494

08003720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a42      	ldr	r2, [pc, #264]	; (8003838 <DMA_CalcBaseAndBitshift+0x118>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d04a      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a41      	ldr	r2, [pc, #260]	; (800383c <DMA_CalcBaseAndBitshift+0x11c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d045      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a3f      	ldr	r2, [pc, #252]	; (8003840 <DMA_CalcBaseAndBitshift+0x120>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d040      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a3e      	ldr	r2, [pc, #248]	; (8003844 <DMA_CalcBaseAndBitshift+0x124>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d03b      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a3c      	ldr	r2, [pc, #240]	; (8003848 <DMA_CalcBaseAndBitshift+0x128>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d036      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a3b      	ldr	r2, [pc, #236]	; (800384c <DMA_CalcBaseAndBitshift+0x12c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d031      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a39      	ldr	r2, [pc, #228]	; (8003850 <DMA_CalcBaseAndBitshift+0x130>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d02c      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a38      	ldr	r2, [pc, #224]	; (8003854 <DMA_CalcBaseAndBitshift+0x134>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d027      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a36      	ldr	r2, [pc, #216]	; (8003858 <DMA_CalcBaseAndBitshift+0x138>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d022      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a35      	ldr	r2, [pc, #212]	; (800385c <DMA_CalcBaseAndBitshift+0x13c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d01d      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a33      	ldr	r2, [pc, #204]	; (8003860 <DMA_CalcBaseAndBitshift+0x140>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d018      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a32      	ldr	r2, [pc, #200]	; (8003864 <DMA_CalcBaseAndBitshift+0x144>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a30      	ldr	r2, [pc, #192]	; (8003868 <DMA_CalcBaseAndBitshift+0x148>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00e      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2f      	ldr	r2, [pc, #188]	; (800386c <DMA_CalcBaseAndBitshift+0x14c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d009      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2d      	ldr	r2, [pc, #180]	; (8003870 <DMA_CalcBaseAndBitshift+0x150>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2c      	ldr	r2, [pc, #176]	; (8003874 <DMA_CalcBaseAndBitshift+0x154>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d101      	bne.n	80037cc <DMA_CalcBaseAndBitshift+0xac>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <DMA_CalcBaseAndBitshift+0xae>
 80037cc:	2300      	movs	r3, #0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d024      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	3b10      	subs	r3, #16
 80037da:	4a27      	ldr	r2, [pc, #156]	; (8003878 <DMA_CalcBaseAndBitshift+0x158>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	4a24      	ldr	r2, [pc, #144]	; (800387c <DMA_CalcBaseAndBitshift+0x15c>)
 80037ec:	5cd3      	ldrb	r3, [r2, r3]
 80037ee:	461a      	mov	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d908      	bls.n	800380c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <DMA_CalcBaseAndBitshift+0x160>)
 8003802:	4013      	ands	r3, r2
 8003804:	1d1a      	adds	r2, r3, #4
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	659a      	str	r2, [r3, #88]	; 0x58
 800380a:	e00d      	b.n	8003828 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <DMA_CalcBaseAndBitshift+0x160>)
 8003814:	4013      	ands	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6593      	str	r3, [r2, #88]	; 0x58
 800381a:	e005      	b.n	8003828 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8
 8003878:	aaaaaaab 	.word	0xaaaaaaab
 800387c:	08009028 	.word	0x08009028
 8003880:	fffffc00 	.word	0xfffffc00

08003884 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d120      	bne.n	80038da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	2b03      	cmp	r3, #3
 800389e:	d858      	bhi.n	8003952 <DMA_CheckFifoParam+0xce>
 80038a0:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <DMA_CheckFifoParam+0x24>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038b9 	.word	0x080038b9
 80038ac:	080038cb 	.word	0x080038cb
 80038b0:	080038b9 	.word	0x080038b9
 80038b4:	08003953 	.word	0x08003953
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d048      	beq.n	8003956 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80038c8:	e045      	b.n	8003956 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038d2:	d142      	bne.n	800395a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80038d8:	e03f      	b.n	800395a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e2:	d123      	bne.n	800392c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d838      	bhi.n	800395e <DMA_CheckFifoParam+0xda>
 80038ec:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <DMA_CheckFifoParam+0x70>)
 80038ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f2:	bf00      	nop
 80038f4:	08003905 	.word	0x08003905
 80038f8:	0800390b 	.word	0x0800390b
 80038fc:	08003905 	.word	0x08003905
 8003900:	0800391d 	.word	0x0800391d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
        break;
 8003908:	e030      	b.n	800396c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d025      	beq.n	8003962 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800391a:	e022      	b.n	8003962 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003924:	d11f      	bne.n	8003966 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800392a:	e01c      	b.n	8003966 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	2b02      	cmp	r3, #2
 8003932:	d902      	bls.n	800393a <DMA_CheckFifoParam+0xb6>
 8003934:	2b03      	cmp	r3, #3
 8003936:	d003      	beq.n	8003940 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003938:	e018      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
        break;
 800393e:	e015      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00e      	beq.n	800396a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
    break;
 8003950:	e00b      	b.n	800396a <DMA_CheckFifoParam+0xe6>
        break;
 8003952:	bf00      	nop
 8003954:	e00a      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        break;
 8003956:	bf00      	nop
 8003958:	e008      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        break;
 800395a:	bf00      	nop
 800395c:	e006      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        break;
 800395e:	bf00      	nop
 8003960:	e004      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        break;
 8003962:	bf00      	nop
 8003964:	e002      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        break;
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <DMA_CheckFifoParam+0xe8>
    break;
 800396a:	bf00      	nop
    }
  }

  return status;
 800396c:	7bfb      	ldrb	r3, [r7, #15]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop

0800397c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a38      	ldr	r2, [pc, #224]	; (8003a70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d022      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a36      	ldr	r2, [pc, #216]	; (8003a74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01d      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a35      	ldr	r2, [pc, #212]	; (8003a78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d018      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a33      	ldr	r2, [pc, #204]	; (8003a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a32      	ldr	r2, [pc, #200]	; (8003a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00e      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a30      	ldr	r2, [pc, #192]	; (8003a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d009      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d004      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2d      	ldr	r2, [pc, #180]	; (8003a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d101      	bne.n	80039de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80039de:	2300      	movs	r3, #0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01a      	beq.n	8003a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	3b08      	subs	r3, #8
 80039ec:	4a28      	ldr	r2, [pc, #160]	; (8003a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4b26      	ldr	r3, [pc, #152]	; (8003a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	461a      	mov	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003a08:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2201      	movs	r2, #1
 8003a12:	409a      	lsls	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003a18:	e024      	b.n	8003a64 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	3b10      	subs	r3, #16
 8003a22:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d806      	bhi.n	8003a42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4a1b      	ldr	r2, [pc, #108]	; (8003aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d902      	bls.n	8003a42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3308      	adds	r3, #8
 8003a40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a16      	ldr	r2, [pc, #88]	; (8003aac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003a54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	58025408 	.word	0x58025408
 8003a74:	5802541c 	.word	0x5802541c
 8003a78:	58025430 	.word	0x58025430
 8003a7c:	58025444 	.word	0x58025444
 8003a80:	58025458 	.word	0x58025458
 8003a84:	5802546c 	.word	0x5802546c
 8003a88:	58025480 	.word	0x58025480
 8003a8c:	58025494 	.word	0x58025494
 8003a90:	cccccccd 	.word	0xcccccccd
 8003a94:	16009600 	.word	0x16009600
 8003a98:	58025880 	.word	0x58025880
 8003a9c:	aaaaaaab 	.word	0xaaaaaaab
 8003aa0:	400204b8 	.word	0x400204b8
 8003aa4:	4002040f 	.word	0x4002040f
 8003aa8:	10008200 	.word	0x10008200
 8003aac:	40020880 	.word	0x40020880

08003ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04a      	beq.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d847      	bhi.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a25      	ldr	r2, [pc, #148]	; (8003b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d022      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a24      	ldr	r2, [pc, #144]	; (8003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d01d      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d018      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a21      	ldr	r2, [pc, #132]	; (8003b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1f      	ldr	r2, [pc, #124]	; (8003b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00e      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a1e      	ldr	r2, [pc, #120]	; (8003b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d009      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d004      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d101      	bne.n	8003b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003b20:	2300      	movs	r3, #0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003b38:	671a      	str	r2, [r3, #112]	; 0x70
 8003b3a:	e009      	b.n	8003b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	461a      	mov	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003b4e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	2201      	movs	r2, #1
 8003b56:	409a      	lsls	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	58025408 	.word	0x58025408
 8003b6c:	5802541c 	.word	0x5802541c
 8003b70:	58025430 	.word	0x58025430
 8003b74:	58025444 	.word	0x58025444
 8003b78:	58025458 	.word	0x58025458
 8003b7c:	5802546c 	.word	0x5802546c
 8003b80:	58025480 	.word	0x58025480
 8003b84:	58025494 	.word	0x58025494
 8003b88:	1600963f 	.word	0x1600963f
 8003b8c:	58025940 	.word	0x58025940
 8003b90:	1000823f 	.word	0x1000823f
 8003b94:	40020940 	.word	0x40020940

08003b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	; 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003ba6:	4b86      	ldr	r3, [pc, #536]	; (8003dc0 <HAL_GPIO_Init+0x228>)
 8003ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003baa:	e18c      	b.n	8003ec6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 817e 	beq.w	8003ec0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d005      	beq.n	8003bdc <HAL_GPIO_Init+0x44>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d130      	bne.n	8003c3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c12:	2201      	movs	r2, #1
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 0201 	and.w	r2, r3, #1
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d017      	beq.n	8003c7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d123      	bne.n	8003cce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	08da      	lsrs	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3208      	adds	r2, #8
 8003c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	08da      	lsrs	r2, r3, #3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3208      	adds	r2, #8
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	2203      	movs	r2, #3
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0203 	and.w	r2, r3, #3
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80d8 	beq.w	8003ec0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d10:	4b2c      	ldr	r3, [pc, #176]	; (8003dc4 <HAL_GPIO_Init+0x22c>)
 8003d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d16:	4a2b      	ldr	r2, [pc, #172]	; (8003dc4 <HAL_GPIO_Init+0x22c>)
 8003d18:	f043 0302 	orr.w	r3, r3, #2
 8003d1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <HAL_GPIO_Init+0x22c>)
 8003d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d2e:	4a26      	ldr	r2, [pc, #152]	; (8003dc8 <HAL_GPIO_Init+0x230>)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	3302      	adds	r3, #2
 8003d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	220f      	movs	r2, #15
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1d      	ldr	r2, [pc, #116]	; (8003dcc <HAL_GPIO_Init+0x234>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d04a      	beq.n	8003df0 <HAL_GPIO_Init+0x258>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <HAL_GPIO_Init+0x238>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02b      	beq.n	8003dba <HAL_GPIO_Init+0x222>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1b      	ldr	r2, [pc, #108]	; (8003dd4 <HAL_GPIO_Init+0x23c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d025      	beq.n	8003db6 <HAL_GPIO_Init+0x21e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1a      	ldr	r2, [pc, #104]	; (8003dd8 <HAL_GPIO_Init+0x240>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01f      	beq.n	8003db2 <HAL_GPIO_Init+0x21a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <HAL_GPIO_Init+0x244>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d019      	beq.n	8003dae <HAL_GPIO_Init+0x216>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <HAL_GPIO_Init+0x248>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <HAL_GPIO_Init+0x212>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <HAL_GPIO_Init+0x24c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00d      	beq.n	8003da6 <HAL_GPIO_Init+0x20e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <HAL_GPIO_Init+0x250>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d007      	beq.n	8003da2 <HAL_GPIO_Init+0x20a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a15      	ldr	r2, [pc, #84]	; (8003dec <HAL_GPIO_Init+0x254>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d101      	bne.n	8003d9e <HAL_GPIO_Init+0x206>
 8003d9a:	2309      	movs	r3, #9
 8003d9c:	e029      	b.n	8003df2 <HAL_GPIO_Init+0x25a>
 8003d9e:	230a      	movs	r3, #10
 8003da0:	e027      	b.n	8003df2 <HAL_GPIO_Init+0x25a>
 8003da2:	2307      	movs	r3, #7
 8003da4:	e025      	b.n	8003df2 <HAL_GPIO_Init+0x25a>
 8003da6:	2306      	movs	r3, #6
 8003da8:	e023      	b.n	8003df2 <HAL_GPIO_Init+0x25a>
 8003daa:	2305      	movs	r3, #5
 8003dac:	e021      	b.n	8003df2 <HAL_GPIO_Init+0x25a>
 8003dae:	2304      	movs	r3, #4
 8003db0:	e01f      	b.n	8003df2 <HAL_GPIO_Init+0x25a>
 8003db2:	2303      	movs	r3, #3
 8003db4:	e01d      	b.n	8003df2 <HAL_GPIO_Init+0x25a>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e01b      	b.n	8003df2 <HAL_GPIO_Init+0x25a>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e019      	b.n	8003df2 <HAL_GPIO_Init+0x25a>
 8003dbe:	bf00      	nop
 8003dc0:	58000080 	.word	0x58000080
 8003dc4:	58024400 	.word	0x58024400
 8003dc8:	58000400 	.word	0x58000400
 8003dcc:	58020000 	.word	0x58020000
 8003dd0:	58020400 	.word	0x58020400
 8003dd4:	58020800 	.word	0x58020800
 8003dd8:	58020c00 	.word	0x58020c00
 8003ddc:	58021000 	.word	0x58021000
 8003de0:	58021400 	.word	0x58021400
 8003de4:	58021800 	.word	0x58021800
 8003de8:	58021c00 	.word	0x58021c00
 8003dec:	58022400 	.word	0x58022400
 8003df0:	2300      	movs	r3, #0
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	f002 0203 	and.w	r2, r2, #3
 8003df8:	0092      	lsls	r2, r2, #2
 8003dfa:	4093      	lsls	r3, r2
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e02:	4938      	ldr	r1, [pc, #224]	; (8003ee4 <HAL_GPIO_Init+0x34c>)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	3302      	adds	r3, #2
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f47f ae6b 	bne.w	8003bac <HAL_GPIO_Init+0x14>
  }
}
 8003ed6:	bf00      	nop
 8003ed8:	bf00      	nop
 8003eda:	3724      	adds	r7, #36	; 0x24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	58000400 	.word	0x58000400

08003ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ef8:	787b      	ldrb	r3, [r7, #1]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003efe:	887a      	ldrh	r2, [r7, #2]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003f04:	e003      	b.n	8003f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003f06:	887b      	ldrh	r3, [r7, #2]
 8003f08:	041a      	lsls	r2, r3, #16
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	619a      	str	r2, [r3, #24]
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <HAL_PWREx_ConfigSupply+0x70>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d00a      	beq.n	8003f46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f30:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <HAL_PWREx_ConfigSupply+0x70>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d001      	beq.n	8003f42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e01f      	b.n	8003f82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e01d      	b.n	8003f82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f46:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <HAL_PWREx_ConfigSupply+0x70>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f023 0207 	bic.w	r2, r3, #7
 8003f4e:	490f      	ldr	r1, [pc, #60]	; (8003f8c <HAL_PWREx_ConfigSupply+0x70>)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f56:	f7fd fbff 	bl	8001758 <HAL_GetTick>
 8003f5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f5c:	e009      	b.n	8003f72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f5e:	f7fd fbfb 	bl	8001758 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f6c:	d901      	bls.n	8003f72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e007      	b.n	8003f82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f72:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <HAL_PWREx_ConfigSupply+0x70>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f7e:	d1ee      	bne.n	8003f5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	58024800 	.word	0x58024800

08003f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08c      	sub	sp, #48	; 0x30
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e3c8      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8087 	beq.w	80040be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb0:	4b88      	ldr	r3, [pc, #544]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fba:	4b86      	ldr	r3, [pc, #536]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc2:	2b10      	cmp	r3, #16
 8003fc4:	d007      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x46>
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	2b18      	cmp	r3, #24
 8003fca:	d110      	bne.n	8003fee <HAL_RCC_OscConfig+0x5e>
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d10b      	bne.n	8003fee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd6:	4b7f      	ldr	r3, [pc, #508]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d06c      	beq.n	80040bc <HAL_RCC_OscConfig+0x12c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d168      	bne.n	80040bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e3a2      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x76>
 8003ff8:	4b76      	ldr	r3, [pc, #472]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a75      	ldr	r2, [pc, #468]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8003ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	e02e      	b.n	8004064 <HAL_RCC_OscConfig+0xd4>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x98>
 800400e:	4b71      	ldr	r3, [pc, #452]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a70      	ldr	r2, [pc, #448]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	4b6e      	ldr	r3, [pc, #440]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a6d      	ldr	r2, [pc, #436]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e01d      	b.n	8004064 <HAL_RCC_OscConfig+0xd4>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0xbc>
 8004032:	4b68      	ldr	r3, [pc, #416]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a67      	ldr	r2, [pc, #412]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	4b65      	ldr	r3, [pc, #404]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a64      	ldr	r2, [pc, #400]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e00b      	b.n	8004064 <HAL_RCC_OscConfig+0xd4>
 800404c:	4b61      	ldr	r3, [pc, #388]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a60      	ldr	r2, [pc, #384]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b5e      	ldr	r3, [pc, #376]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a5d      	ldr	r2, [pc, #372]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 800405e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d013      	beq.n	8004094 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd fb74 	bl	8001758 <HAL_GetTick>
 8004070:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004074:	f7fd fb70 	bl	8001758 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e356      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004086:	4b53      	ldr	r3, [pc, #332]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0xe4>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fd fb60 	bl	8001758 <HAL_GetTick>
 8004098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fd fb5c 	bl	8001758 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e342      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040ae:	4b49      	ldr	r3, [pc, #292]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x10c>
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 808c 	beq.w	80041e4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040cc:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040d6:	4b3f      	ldr	r3, [pc, #252]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <HAL_RCC_OscConfig+0x162>
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	2b18      	cmp	r3, #24
 80040e6:	d137      	bne.n	8004158 <HAL_RCC_OscConfig+0x1c8>
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d132      	bne.n	8004158 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f2:	4b38      	ldr	r3, [pc, #224]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <HAL_RCC_OscConfig+0x17a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e314      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800410a:	4b32      	ldr	r3, [pc, #200]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 0219 	bic.w	r2, r3, #25
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	492f      	ldr	r1, [pc, #188]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd fb1c 	bl	8001758 <HAL_GetTick>
 8004120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004124:	f7fd fb18 	bl	8001758 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e2fe      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004136:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004142:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	4920      	ldr	r1, [pc, #128]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004152:	4313      	orrs	r3, r2
 8004154:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004156:	e045      	b.n	80041e4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d026      	beq.n	80041ae <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004160:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f023 0219 	bic.w	r2, r3, #25
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4919      	ldr	r1, [pc, #100]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7fd faf1 	bl	8001758 <HAL_GetTick>
 8004176:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417a:	f7fd faed 	bl	8001758 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e2d3      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004198:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	061b      	lsls	r3, r3, #24
 80041a6:	490b      	ldr	r1, [pc, #44]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	604b      	str	r3, [r1, #4]
 80041ac:	e01a      	b.n	80041e4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a08      	ldr	r2, [pc, #32]	; (80041d4 <HAL_RCC_OscConfig+0x244>)
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ba:	f7fd facd 	bl	8001758 <HAL_GetTick>
 80041be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c2:	f7fd fac9 	bl	8001758 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d903      	bls.n	80041d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e2af      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
 80041d4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041d8:	4b96      	ldr	r3, [pc, #600]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1ee      	bne.n	80041c2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d06a      	beq.n	80042c6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041f0:	4b90      	ldr	r3, [pc, #576]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041f8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041fa:	4b8e      	ldr	r3, [pc, #568]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2b08      	cmp	r3, #8
 8004204:	d007      	beq.n	8004216 <HAL_RCC_OscConfig+0x286>
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b18      	cmp	r3, #24
 800420a:	d11b      	bne.n	8004244 <HAL_RCC_OscConfig+0x2b4>
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d116      	bne.n	8004244 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004216:	4b87      	ldr	r3, [pc, #540]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_RCC_OscConfig+0x29e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e282      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800422e:	4b81      	ldr	r3, [pc, #516]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	061b      	lsls	r3, r3, #24
 800423c:	497d      	ldr	r1, [pc, #500]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 800423e:	4313      	orrs	r3, r2
 8004240:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004242:	e040      	b.n	80042c6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d023      	beq.n	8004294 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800424c:	4b79      	ldr	r3, [pc, #484]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a78      	ldr	r2, [pc, #480]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fd fa7e 	bl	8001758 <HAL_GetTick>
 800425c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004260:	f7fd fa7a 	bl	8001758 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e260      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004272:	4b70      	ldr	r3, [pc, #448]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800427e:	4b6d      	ldr	r3, [pc, #436]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	061b      	lsls	r3, r3, #24
 800428c:	4969      	ldr	r1, [pc, #420]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	60cb      	str	r3, [r1, #12]
 8004292:	e018      	b.n	80042c6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004294:	4b67      	ldr	r3, [pc, #412]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a66      	ldr	r2, [pc, #408]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 800429a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800429e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fd fa5a 	bl	8001758 <HAL_GetTick>
 80042a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80042a8:	f7fd fa56 	bl	8001758 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e23c      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042ba:	4b5e      	ldr	r3, [pc, #376]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d036      	beq.n	8004340 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d019      	beq.n	800430e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042da:	4b56      	ldr	r3, [pc, #344]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 80042dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042de:	4a55      	ldr	r2, [pc, #340]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e6:	f7fd fa37 	bl	8001758 <HAL_GetTick>
 80042ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ee:	f7fd fa33 	bl	8001758 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e219      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004300:	4b4c      	ldr	r3, [pc, #304]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x35e>
 800430c:	e018      	b.n	8004340 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800430e:	4b49      	ldr	r3, [pc, #292]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004312:	4a48      	ldr	r2, [pc, #288]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431a:	f7fd fa1d 	bl	8001758 <HAL_GetTick>
 800431e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004322:	f7fd fa19 	bl	8001758 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e1ff      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004334:	4b3f      	ldr	r3, [pc, #252]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f0      	bne.n	8004322 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d036      	beq.n	80043ba <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d019      	beq.n	8004388 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004354:	4b37      	ldr	r3, [pc, #220]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a36      	ldr	r2, [pc, #216]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 800435a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800435e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004360:	f7fd f9fa 	bl	8001758 <HAL_GetTick>
 8004364:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004368:	f7fd f9f6 	bl	8001758 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e1dc      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800437a:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x3d8>
 8004386:	e018      	b.n	80043ba <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004388:	4b2a      	ldr	r3, [pc, #168]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a29      	ldr	r2, [pc, #164]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 800438e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004392:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004394:	f7fd f9e0 	bl	8001758 <HAL_GetTick>
 8004398:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800439c:	f7fd f9dc 	bl	8001758 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e1c2      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043ae:	4b21      	ldr	r3, [pc, #132]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 8086 	beq.w	80044d4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <HAL_RCC_OscConfig+0x4a8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <HAL_RCC_OscConfig+0x4a8>)
 80043ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043d4:	f7fd f9c0 	bl	8001758 <HAL_GetTick>
 80043d8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043dc:	f7fd f9bc 	bl	8001758 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	; 0x64
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e1a2      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043ee:	4b12      	ldr	r3, [pc, #72]	; (8004438 <HAL_RCC_OscConfig+0x4a8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d106      	bne.n	8004410 <HAL_RCC_OscConfig+0x480>
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004406:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	6713      	str	r3, [r2, #112]	; 0x70
 800440e:	e032      	b.n	8004476 <HAL_RCC_OscConfig+0x4e6>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d111      	bne.n	800443c <HAL_RCC_OscConfig+0x4ac>
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	4a05      	ldr	r2, [pc, #20]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	6713      	str	r3, [r2, #112]	; 0x70
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	4a02      	ldr	r2, [pc, #8]	; (8004434 <HAL_RCC_OscConfig+0x4a4>)
 800442a:	f023 0304 	bic.w	r3, r3, #4
 800442e:	6713      	str	r3, [r2, #112]	; 0x70
 8004430:	e021      	b.n	8004476 <HAL_RCC_OscConfig+0x4e6>
 8004432:	bf00      	nop
 8004434:	58024400 	.word	0x58024400
 8004438:	58024800 	.word	0x58024800
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b05      	cmp	r3, #5
 8004442:	d10c      	bne.n	800445e <HAL_RCC_OscConfig+0x4ce>
 8004444:	4b83      	ldr	r3, [pc, #524]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004448:	4a82      	ldr	r2, [pc, #520]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 800444a:	f043 0304 	orr.w	r3, r3, #4
 800444e:	6713      	str	r3, [r2, #112]	; 0x70
 8004450:	4b80      	ldr	r3, [pc, #512]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004454:	4a7f      	ldr	r2, [pc, #508]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6713      	str	r3, [r2, #112]	; 0x70
 800445c:	e00b      	b.n	8004476 <HAL_RCC_OscConfig+0x4e6>
 800445e:	4b7d      	ldr	r3, [pc, #500]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	4a7c      	ldr	r2, [pc, #496]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	6713      	str	r3, [r2, #112]	; 0x70
 800446a:	4b7a      	ldr	r3, [pc, #488]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	4a79      	ldr	r2, [pc, #484]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 8004470:	f023 0304 	bic.w	r3, r3, #4
 8004474:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d015      	beq.n	80044aa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447e:	f7fd f96b 	bl	8001758 <HAL_GetTick>
 8004482:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004484:	e00a      	b.n	800449c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004486:	f7fd f967 	bl	8001758 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	f241 3288 	movw	r2, #5000	; 0x1388
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e14b      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800449c:	4b6d      	ldr	r3, [pc, #436]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0ee      	beq.n	8004486 <HAL_RCC_OscConfig+0x4f6>
 80044a8:	e014      	b.n	80044d4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044aa:	f7fd f955 	bl	8001758 <HAL_GetTick>
 80044ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044b0:	e00a      	b.n	80044c8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b2:	f7fd f951 	bl	8001758 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e135      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044c8:	4b62      	ldr	r3, [pc, #392]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1ee      	bne.n	80044b2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 812a 	beq.w	8004732 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044de:	4b5d      	ldr	r3, [pc, #372]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044e6:	2b18      	cmp	r3, #24
 80044e8:	f000 80ba 	beq.w	8004660 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	f040 8095 	bne.w	8004620 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f6:	4b57      	ldr	r3, [pc, #348]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a56      	ldr	r2, [pc, #344]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80044fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004502:	f7fd f929 	bl	8001758 <HAL_GetTick>
 8004506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450a:	f7fd f925 	bl	8001758 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e10b      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800451c:	4b4d      	ldr	r3, [pc, #308]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f0      	bne.n	800450a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004528:	4b4a      	ldr	r3, [pc, #296]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 800452a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800452c:	4b4a      	ldr	r3, [pc, #296]	; (8004658 <HAL_RCC_OscConfig+0x6c8>)
 800452e:	4013      	ands	r3, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004538:	0112      	lsls	r2, r2, #4
 800453a:	430a      	orrs	r2, r1
 800453c:	4945      	ldr	r1, [pc, #276]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 800453e:	4313      	orrs	r3, r2
 8004540:	628b      	str	r3, [r1, #40]	; 0x28
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	3b01      	subs	r3, #1
 8004548:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004550:	3b01      	subs	r3, #1
 8004552:	025b      	lsls	r3, r3, #9
 8004554:	b29b      	uxth	r3, r3
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	3b01      	subs	r3, #1
 800455e:	041b      	lsls	r3, r3, #16
 8004560:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456a:	3b01      	subs	r3, #1
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004572:	4938      	ldr	r1, [pc, #224]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 8004574:	4313      	orrs	r3, r2
 8004576:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004578:	4b36      	ldr	r3, [pc, #216]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	4a35      	ldr	r2, [pc, #212]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004584:	4b33      	ldr	r3, [pc, #204]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 8004586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004588:	4b34      	ldr	r3, [pc, #208]	; (800465c <HAL_RCC_OscConfig+0x6cc>)
 800458a:	4013      	ands	r3, r2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004590:	00d2      	lsls	r2, r2, #3
 8004592:	4930      	ldr	r1, [pc, #192]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 8004594:	4313      	orrs	r3, r2
 8004596:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004598:	4b2e      	ldr	r3, [pc, #184]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	f023 020c 	bic.w	r2, r3, #12
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	492b      	ldr	r1, [pc, #172]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045aa:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	f023 0202 	bic.w	r2, r3, #2
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b6:	4927      	ldr	r1, [pc, #156]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045bc:	4b25      	ldr	r3, [pc, #148]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	4a24      	ldr	r2, [pc, #144]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80045c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c8:	4b22      	ldr	r3, [pc, #136]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	4a21      	ldr	r2, [pc, #132]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80045ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045d4:	4b1f      	ldr	r3, [pc, #124]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80045da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80045e0:	4b1c      	ldr	r3, [pc, #112]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ec:	4b19      	ldr	r3, [pc, #100]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a18      	ldr	r2, [pc, #96]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 80045f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd f8ae 	bl	8001758 <HAL_GetTick>
 80045fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004600:	f7fd f8aa 	bl	8001758 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e090      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x670>
 800461e:	e088      	b.n	8004732 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a0b      	ldr	r2, [pc, #44]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 8004626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800462a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fd f894 	bl	8001758 <HAL_GetTick>
 8004630:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fd f890 	bl	8001758 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e076      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004646:	4b03      	ldr	r3, [pc, #12]	; (8004654 <HAL_RCC_OscConfig+0x6c4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x6a4>
 8004652:	e06e      	b.n	8004732 <HAL_RCC_OscConfig+0x7a2>
 8004654:	58024400 	.word	0x58024400
 8004658:	fffffc0c 	.word	0xfffffc0c
 800465c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004660:	4b36      	ldr	r3, [pc, #216]	; (800473c <HAL_RCC_OscConfig+0x7ac>)
 8004662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004664:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004666:	4b35      	ldr	r3, [pc, #212]	; (800473c <HAL_RCC_OscConfig+0x7ac>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	2b01      	cmp	r3, #1
 8004672:	d031      	beq.n	80046d8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f003 0203 	and.w	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d12a      	bne.n	80046d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d122      	bne.n	80046d8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d11a      	bne.n	80046d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	0a5b      	lsrs	r3, r3, #9
 80046a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d111      	bne.n	80046d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	0c1b      	lsrs	r3, r3, #16
 80046b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d108      	bne.n	80046d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	0e1b      	lsrs	r3, r3, #24
 80046ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e02b      	b.n	8004734 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80046dc:	4b17      	ldr	r3, [pc, #92]	; (800473c <HAL_RCC_OscConfig+0x7ac>)
 80046de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e0:	08db      	lsrs	r3, r3, #3
 80046e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d01f      	beq.n	8004732 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <HAL_RCC_OscConfig+0x7ac>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	4a11      	ldr	r2, [pc, #68]	; (800473c <HAL_RCC_OscConfig+0x7ac>)
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046fe:	f7fd f82b 	bl	8001758 <HAL_GetTick>
 8004702:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004704:	bf00      	nop
 8004706:	f7fd f827 	bl	8001758 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	4293      	cmp	r3, r2
 8004710:	d0f9      	beq.n	8004706 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <HAL_RCC_OscConfig+0x7ac>)
 8004714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_RCC_OscConfig+0x7b0>)
 8004718:	4013      	ands	r3, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800471e:	00d2      	lsls	r2, r2, #3
 8004720:	4906      	ldr	r1, [pc, #24]	; (800473c <HAL_RCC_OscConfig+0x7ac>)
 8004722:	4313      	orrs	r3, r2
 8004724:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCC_OscConfig+0x7ac>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	4a04      	ldr	r2, [pc, #16]	; (800473c <HAL_RCC_OscConfig+0x7ac>)
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3730      	adds	r7, #48	; 0x30
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	58024400 	.word	0x58024400
 8004740:	ffff0007 	.word	0xffff0007

08004744 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e19c      	b.n	8004a92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004758:	4b8a      	ldr	r3, [pc, #552]	; (8004984 <HAL_RCC_ClockConfig+0x240>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d910      	bls.n	8004788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	4b87      	ldr	r3, [pc, #540]	; (8004984 <HAL_RCC_ClockConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 020f 	bic.w	r2, r3, #15
 800476e:	4985      	ldr	r1, [pc, #532]	; (8004984 <HAL_RCC_ClockConfig+0x240>)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	4b83      	ldr	r3, [pc, #524]	; (8004984 <HAL_RCC_ClockConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e184      	b.n	8004a92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d010      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	4b7b      	ldr	r3, [pc, #492]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d908      	bls.n	80047b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047a4:	4b78      	ldr	r3, [pc, #480]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	4975      	ldr	r1, [pc, #468]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d010      	beq.n	80047e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	4b70      	ldr	r3, [pc, #448]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d908      	bls.n	80047e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047d2:	4b6d      	ldr	r3, [pc, #436]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	496a      	ldr	r1, [pc, #424]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d010      	beq.n	8004812 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699a      	ldr	r2, [r3, #24]
 80047f4:	4b64      	ldr	r3, [pc, #400]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d908      	bls.n	8004812 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004800:	4b61      	ldr	r3, [pc, #388]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	495e      	ldr	r1, [pc, #376]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 800480e:	4313      	orrs	r3, r2
 8004810:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b00      	cmp	r3, #0
 800481c:	d010      	beq.n	8004840 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69da      	ldr	r2, [r3, #28]
 8004822:	4b59      	ldr	r3, [pc, #356]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800482a:	429a      	cmp	r2, r3
 800482c:	d908      	bls.n	8004840 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800482e:	4b56      	ldr	r3, [pc, #344]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	4953      	ldr	r1, [pc, #332]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 800483c:	4313      	orrs	r3, r2
 800483e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d010      	beq.n	800486e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	4b4d      	ldr	r3, [pc, #308]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	429a      	cmp	r2, r3
 800485a:	d908      	bls.n	800486e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800485c:	4b4a      	ldr	r3, [pc, #296]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f023 020f 	bic.w	r2, r3, #15
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4947      	ldr	r1, [pc, #284]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 800486a:	4313      	orrs	r3, r2
 800486c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d055      	beq.n	8004926 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800487a:	4b43      	ldr	r3, [pc, #268]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	4940      	ldr	r1, [pc, #256]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 8004888:	4313      	orrs	r3, r2
 800488a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d107      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004894:	4b3c      	ldr	r3, [pc, #240]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d121      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0f6      	b.n	8004a92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d107      	bne.n	80048bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048ac:	4b36      	ldr	r3, [pc, #216]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d115      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0ea      	b.n	8004a92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048c4:	4b30      	ldr	r3, [pc, #192]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d109      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0de      	b.n	8004a92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048d4:	4b2c      	ldr	r3, [pc, #176]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0d6      	b.n	8004a92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048e4:	4b28      	ldr	r3, [pc, #160]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f023 0207 	bic.w	r2, r3, #7
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	4925      	ldr	r1, [pc, #148]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f6:	f7fc ff2f 	bl	8001758 <HAL_GetTick>
 80048fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fc:	e00a      	b.n	8004914 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fe:	f7fc ff2b 	bl	8001758 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f241 3288 	movw	r2, #5000	; 0x1388
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e0be      	b.n	8004a92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004914:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	429a      	cmp	r2, r3
 8004924:	d1eb      	bne.n	80048fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d010      	beq.n	8004954 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	4b14      	ldr	r3, [pc, #80]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	429a      	cmp	r2, r3
 8004940:	d208      	bcs.n	8004954 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004942:	4b11      	ldr	r3, [pc, #68]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f023 020f 	bic.w	r2, r3, #15
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	490e      	ldr	r1, [pc, #56]	; (8004988 <HAL_RCC_ClockConfig+0x244>)
 8004950:	4313      	orrs	r3, r2
 8004952:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCC_ClockConfig+0x240>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d214      	bcs.n	800498c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <HAL_RCC_ClockConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f023 020f 	bic.w	r2, r3, #15
 800496a:	4906      	ldr	r1, [pc, #24]	; (8004984 <HAL_RCC_ClockConfig+0x240>)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004972:	4b04      	ldr	r3, [pc, #16]	; (8004984 <HAL_RCC_ClockConfig+0x240>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d005      	beq.n	800498c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e086      	b.n	8004a92 <HAL_RCC_ClockConfig+0x34e>
 8004984:	52002000 	.word	0x52002000
 8004988:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d010      	beq.n	80049ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	4b3f      	ldr	r3, [pc, #252]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d208      	bcs.n	80049ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049a8:	4b3c      	ldr	r3, [pc, #240]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	4939      	ldr	r1, [pc, #228]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d010      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	4b34      	ldr	r3, [pc, #208]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d208      	bcs.n	80049e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049d6:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	492e      	ldr	r1, [pc, #184]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d010      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699a      	ldr	r2, [r3, #24]
 80049f8:	4b28      	ldr	r3, [pc, #160]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d208      	bcs.n	8004a16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a04:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	4922      	ldr	r1, [pc, #136]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d010      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d208      	bcs.n	8004a44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a32:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	4917      	ldr	r1, [pc, #92]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a44:	f000 f834 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	0a1b      	lsrs	r3, r3, #8
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	4912      	ldr	r1, [pc, #72]	; (8004aa0 <HAL_RCC_ClockConfig+0x35c>)
 8004a56:	5ccb      	ldrb	r3, [r1, r3]
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a62:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <HAL_RCC_ClockConfig+0x358>)
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	4a0d      	ldr	r2, [pc, #52]	; (8004aa0 <HAL_RCC_ClockConfig+0x35c>)
 8004a6c:	5cd3      	ldrb	r3, [r2, r3]
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
 8004a78:	4a0a      	ldr	r2, [pc, #40]	; (8004aa4 <HAL_RCC_ClockConfig+0x360>)
 8004a7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a7c:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <HAL_RCC_ClockConfig+0x364>)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <HAL_RCC_ClockConfig+0x368>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fc fe1c 	bl	80016c4 <HAL_InitTick>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	58024400 	.word	0x58024400
 8004aa0:	08009018 	.word	0x08009018
 8004aa4:	24000004 	.word	0x24000004
 8004aa8:	24000000 	.word	0x24000000
 8004aac:	24000008 	.word	0x24000008

08004ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b089      	sub	sp, #36	; 0x24
 8004ab4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ab6:	4bb3      	ldr	r3, [pc, #716]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004abe:	2b18      	cmp	r3, #24
 8004ac0:	f200 8155 	bhi.w	8004d6e <HAL_RCC_GetSysClockFreq+0x2be>
 8004ac4:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004b31 	.word	0x08004b31
 8004ad0:	08004d6f 	.word	0x08004d6f
 8004ad4:	08004d6f 	.word	0x08004d6f
 8004ad8:	08004d6f 	.word	0x08004d6f
 8004adc:	08004d6f 	.word	0x08004d6f
 8004ae0:	08004d6f 	.word	0x08004d6f
 8004ae4:	08004d6f 	.word	0x08004d6f
 8004ae8:	08004d6f 	.word	0x08004d6f
 8004aec:	08004b57 	.word	0x08004b57
 8004af0:	08004d6f 	.word	0x08004d6f
 8004af4:	08004d6f 	.word	0x08004d6f
 8004af8:	08004d6f 	.word	0x08004d6f
 8004afc:	08004d6f 	.word	0x08004d6f
 8004b00:	08004d6f 	.word	0x08004d6f
 8004b04:	08004d6f 	.word	0x08004d6f
 8004b08:	08004d6f 	.word	0x08004d6f
 8004b0c:	08004b5d 	.word	0x08004b5d
 8004b10:	08004d6f 	.word	0x08004d6f
 8004b14:	08004d6f 	.word	0x08004d6f
 8004b18:	08004d6f 	.word	0x08004d6f
 8004b1c:	08004d6f 	.word	0x08004d6f
 8004b20:	08004d6f 	.word	0x08004d6f
 8004b24:	08004d6f 	.word	0x08004d6f
 8004b28:	08004d6f 	.word	0x08004d6f
 8004b2c:	08004b63 	.word	0x08004b63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b30:	4b94      	ldr	r3, [pc, #592]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d009      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b3c:	4b91      	ldr	r3, [pc, #580]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	08db      	lsrs	r3, r3, #3
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	4a90      	ldr	r2, [pc, #576]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b4e:	e111      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b50:	4b8d      	ldr	r3, [pc, #564]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b52:	61bb      	str	r3, [r7, #24]
      break;
 8004b54:	e10e      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b56:	4b8d      	ldr	r3, [pc, #564]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b58:	61bb      	str	r3, [r7, #24]
      break;
 8004b5a:	e10b      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b5c:	4b8c      	ldr	r3, [pc, #560]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b5e:	61bb      	str	r3, [r7, #24]
      break;
 8004b60:	e108      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b62:	4b88      	ldr	r3, [pc, #544]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b6c:	4b85      	ldr	r3, [pc, #532]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b78:	4b82      	ldr	r3, [pc, #520]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b82:	4b80      	ldr	r3, [pc, #512]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b86:	08db      	lsrs	r3, r3, #3
 8004b88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80e1 	beq.w	8004d68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	f000 8083 	beq.w	8004cb4 <HAL_RCC_GetSysClockFreq+0x204>
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	f200 80a1 	bhi.w	8004cf8 <HAL_RCC_GetSysClockFreq+0x248>
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x114>
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d056      	beq.n	8004c70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004bc2:	e099      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bc4:	4b6f      	ldr	r3, [pc, #444]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d02d      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bd0:	4b6c      	ldr	r3, [pc, #432]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	08db      	lsrs	r3, r3, #3
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	4a6b      	ldr	r2, [pc, #428]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004be0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	ee07 3a90 	vmov	s15, r3
 8004be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfa:	4b62      	ldr	r3, [pc, #392]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004d94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004c2a:	e087      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	ee07 3a90 	vmov	s15, r3
 8004c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c36:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004d98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c3e:	4b51      	ldr	r3, [pc, #324]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c52:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004d94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c6e:	e065      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004d9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c82:	4b40      	ldr	r3, [pc, #256]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004d94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cb2:	e043      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004da0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cda:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004d94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cf6:	e021      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004d9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0a:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004d94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d3c:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	0a5b      	lsrs	r3, r3, #9
 8004d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d46:	3301      	adds	r3, #1
 8004d48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	ee07 3a90 	vmov	s15, r3
 8004d50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d54:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d60:	ee17 3a90 	vmov	r3, s15
 8004d64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004d66:	e005      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61bb      	str	r3, [r7, #24]
      break;
 8004d6c:	e002      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004d6e:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d70:	61bb      	str	r3, [r7, #24]
      break;
 8004d72:	bf00      	nop
  }

  return sysclockfreq;
 8004d74:	69bb      	ldr	r3, [r7, #24]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3724      	adds	r7, #36	; 0x24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	58024400 	.word	0x58024400
 8004d88:	03d09000 	.word	0x03d09000
 8004d8c:	003d0900 	.word	0x003d0900
 8004d90:	017d7840 	.word	0x017d7840
 8004d94:	46000000 	.word	0x46000000
 8004d98:	4c742400 	.word	0x4c742400
 8004d9c:	4a742400 	.word	0x4a742400
 8004da0:	4bbebc20 	.word	0x4bbebc20

08004da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004daa:	f7ff fe81 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8004dae:	4602      	mov	r2, r0
 8004db0:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	0a1b      	lsrs	r3, r3, #8
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	490f      	ldr	r1, [pc, #60]	; (8004df8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dbc:	5ccb      	ldrb	r3, [r1, r3]
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dd2:	5cd3      	ldrb	r3, [r2, r3]
 8004dd4:	f003 031f 	and.w	r3, r3, #31
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	fa22 f303 	lsr.w	r3, r2, r3
 8004dde:	4a07      	ldr	r2, [pc, #28]	; (8004dfc <HAL_RCC_GetHCLKFreq+0x58>)
 8004de0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004de2:	4a07      	ldr	r2, [pc, #28]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004de8:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <HAL_RCC_GetHCLKFreq+0x58>)
 8004dea:	681b      	ldr	r3, [r3, #0]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	58024400 	.word	0x58024400
 8004df8:	08009018 	.word	0x08009018
 8004dfc:	24000004 	.word	0x24000004
 8004e00:	24000000 	.word	0x24000000

08004e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e08:	f7ff ffcc 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	4904      	ldr	r1, [pc, #16]	; (8004e2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e1a:	5ccb      	ldrb	r3, [r1, r3]
 8004e1c:	f003 031f 	and.w	r3, r3, #31
 8004e20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	58024400 	.word	0x58024400
 8004e2c:	08009018 	.word	0x08009018

08004e30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e34:	b0c6      	sub	sp, #280	; 0x118
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e42:	2300      	movs	r3, #0
 8004e44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004e54:	2500      	movs	r5, #0
 8004e56:	ea54 0305 	orrs.w	r3, r4, r5
 8004e5a:	d049      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e66:	d02f      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004e68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e6c:	d828      	bhi.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e72:	d01a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e78:	d822      	bhi.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e82:	d007      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e84:	e01c      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e86:	4bab      	ldr	r3, [pc, #684]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	4aaa      	ldr	r2, [pc, #680]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e92:	e01a      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e98:	3308      	adds	r3, #8
 8004e9a:	2102      	movs	r1, #2
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f002 fa49 	bl	8007334 <RCCEx_PLL2_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ea8:	e00f      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eae:	3328      	adds	r3, #40	; 0x28
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f002 faf0 	bl	8007498 <RCCEx_PLL3_Config>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ebe:	e004      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ec6:	e000      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ed2:	4b98      	ldr	r3, [pc, #608]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee0:	4a94      	ldr	r2, [pc, #592]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	6513      	str	r3, [r2, #80]	; 0x50
 8004ee6:	e003      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004eec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004efc:	f04f 0900 	mov.w	r9, #0
 8004f00:	ea58 0309 	orrs.w	r3, r8, r9
 8004f04:	d047      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d82a      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004f10:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f2d 	.word	0x08004f2d
 8004f1c:	08004f3b 	.word	0x08004f3b
 8004f20:	08004f51 	.word	0x08004f51
 8004f24:	08004f6f 	.word	0x08004f6f
 8004f28:	08004f6f 	.word	0x08004f6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f2c:	4b81      	ldr	r3, [pc, #516]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	4a80      	ldr	r2, [pc, #512]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f38:	e01a      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f3e:	3308      	adds	r3, #8
 8004f40:	2100      	movs	r1, #0
 8004f42:	4618      	mov	r0, r3
 8004f44:	f002 f9f6 	bl	8007334 <RCCEx_PLL2_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f4e:	e00f      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f54:	3328      	adds	r3, #40	; 0x28
 8004f56:	2100      	movs	r1, #0
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f002 fa9d 	bl	8007498 <RCCEx_PLL3_Config>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f64:	e004      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f6c:	e000      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f78:	4b6e      	ldr	r3, [pc, #440]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	f023 0107 	bic.w	r1, r3, #7
 8004f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f86:	4a6b      	ldr	r2, [pc, #428]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	6513      	str	r3, [r2, #80]	; 0x50
 8004f8c:	e003      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8004fa2:	f04f 0b00 	mov.w	fp, #0
 8004fa6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004faa:	d05b      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fb4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004fb8:	d03b      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004fba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004fbe:	d834      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004fc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fc4:	d037      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004fc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fca:	d82e      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004fcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fd0:	d033      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004fd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fd6:	d828      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fdc:	d01a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe2:	d822      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004fe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fec:	d007      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004fee:	e01c      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff0:	4b50      	ldr	r3, [pc, #320]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	4a4f      	ldr	r2, [pc, #316]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ffc:	e01e      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005002:	3308      	adds	r3, #8
 8005004:	2100      	movs	r1, #0
 8005006:	4618      	mov	r0, r3
 8005008:	f002 f994 	bl	8007334 <RCCEx_PLL2_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005012:	e013      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005018:	3328      	adds	r3, #40	; 0x28
 800501a:	2100      	movs	r1, #0
 800501c:	4618      	mov	r0, r3
 800501e:	f002 fa3b 	bl	8007498 <RCCEx_PLL3_Config>
 8005022:	4603      	mov	r3, r0
 8005024:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005028:	e008      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005030:	e004      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005032:	bf00      	nop
 8005034:	e002      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005036:	bf00      	nop
 8005038:	e000      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800503a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800503c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005044:	4b3b      	ldr	r3, [pc, #236]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005048:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800504c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005050:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005054:	4a37      	ldr	r2, [pc, #220]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005056:	430b      	orrs	r3, r1
 8005058:	6593      	str	r3, [r2, #88]	; 0x58
 800505a:	e003      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005060:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005070:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005074:	2300      	movs	r3, #0
 8005076:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800507a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800507e:	460b      	mov	r3, r1
 8005080:	4313      	orrs	r3, r2
 8005082:	d05d      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005088:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800508c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005090:	d03b      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005092:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005096:	d834      	bhi.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800509c:	d037      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800509e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050a2:	d82e      	bhi.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80050a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050a8:	d033      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80050aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050ae:	d828      	bhi.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80050b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050b4:	d01a      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80050b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050ba:	d822      	bhi.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80050c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050c4:	d007      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80050c6:	e01c      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c8:	4b1a      	ldr	r3, [pc, #104]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	4a19      	ldr	r2, [pc, #100]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050d4:	e01e      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050da:	3308      	adds	r3, #8
 80050dc:	2100      	movs	r1, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f002 f928 	bl	8007334 <RCCEx_PLL2_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80050ea:	e013      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050f0:	3328      	adds	r3, #40	; 0x28
 80050f2:	2100      	movs	r1, #0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f002 f9cf 	bl	8007498 <RCCEx_PLL3_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005100:	e008      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005108:	e004      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800510a:	bf00      	nop
 800510c:	e002      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800510e:	bf00      	nop
 8005110:	e000      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005114:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10d      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800511c:	4b05      	ldr	r3, [pc, #20]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800511e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005120:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005128:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800512c:	4a01      	ldr	r2, [pc, #4]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800512e:	430b      	orrs	r3, r1
 8005130:	6593      	str	r3, [r2, #88]	; 0x58
 8005132:	e005      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005138:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800513c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800514c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005150:	2300      	movs	r3, #0
 8005152:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005156:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800515a:	460b      	mov	r3, r1
 800515c:	4313      	orrs	r3, r2
 800515e:	d03a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005166:	2b30      	cmp	r3, #48	; 0x30
 8005168:	d01f      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800516a:	2b30      	cmp	r3, #48	; 0x30
 800516c:	d819      	bhi.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800516e:	2b20      	cmp	r3, #32
 8005170:	d00c      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005172:	2b20      	cmp	r3, #32
 8005174:	d815      	bhi.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d019      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800517a:	2b10      	cmp	r3, #16
 800517c:	d111      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800517e:	4baa      	ldr	r3, [pc, #680]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	4aa9      	ldr	r2, [pc, #676]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005188:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800518a:	e011      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800518c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005190:	3308      	adds	r3, #8
 8005192:	2102      	movs	r1, #2
 8005194:	4618      	mov	r0, r3
 8005196:	f002 f8cd 	bl	8007334 <RCCEx_PLL2_Config>
 800519a:	4603      	mov	r3, r0
 800519c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80051a0:	e006      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80051a8:	e002      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80051aa:	bf00      	nop
 80051ac:	e000      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80051ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10a      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80051b8:	4b9b      	ldr	r3, [pc, #620]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051bc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80051c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c6:	4a98      	ldr	r2, [pc, #608]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051c8:	430b      	orrs	r3, r1
 80051ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051cc:	e003      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80051d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80051e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051e6:	2300      	movs	r3, #0
 80051e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80051ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80051f0:	460b      	mov	r3, r1
 80051f2:	4313      	orrs	r3, r2
 80051f4:	d051      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80051f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005200:	d035      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005206:	d82e      	bhi.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005208:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800520c:	d031      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800520e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005212:	d828      	bhi.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005218:	d01a      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800521a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521e:	d822      	bhi.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005228:	d007      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800522a:	e01c      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800522c:	4b7e      	ldr	r3, [pc, #504]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4a7d      	ldr	r2, [pc, #500]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005238:	e01c      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800523a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800523e:	3308      	adds	r3, #8
 8005240:	2100      	movs	r1, #0
 8005242:	4618      	mov	r0, r3
 8005244:	f002 f876 	bl	8007334 <RCCEx_PLL2_Config>
 8005248:	4603      	mov	r3, r0
 800524a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800524e:	e011      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005254:	3328      	adds	r3, #40	; 0x28
 8005256:	2100      	movs	r1, #0
 8005258:	4618      	mov	r0, r3
 800525a:	f002 f91d 	bl	8007498 <RCCEx_PLL3_Config>
 800525e:	4603      	mov	r3, r0
 8005260:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005264:	e006      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800526c:	e002      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800526e:	bf00      	nop
 8005270:	e000      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005274:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800527c:	4b6a      	ldr	r3, [pc, #424]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800527e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005280:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528a:	4a67      	ldr	r2, [pc, #412]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800528c:	430b      	orrs	r3, r1
 800528e:	6513      	str	r3, [r2, #80]	; 0x50
 8005290:	e003      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005292:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005296:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800529a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80052a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052aa:	2300      	movs	r3, #0
 80052ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052b0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4313      	orrs	r3, r2
 80052b8:	d053      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80052ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052c4:	d033      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80052c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ca:	d82c      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80052cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052d0:	d02f      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80052d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052d6:	d826      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80052d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052dc:	d02b      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80052de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052e2:	d820      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80052e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052e8:	d012      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80052ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ee:	d81a      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d022      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80052f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f8:	d115      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052fe:	3308      	adds	r3, #8
 8005300:	2101      	movs	r1, #1
 8005302:	4618      	mov	r0, r3
 8005304:	f002 f816 	bl	8007334 <RCCEx_PLL2_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800530e:	e015      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005314:	3328      	adds	r3, #40	; 0x28
 8005316:	2101      	movs	r1, #1
 8005318:	4618      	mov	r0, r3
 800531a:	f002 f8bd 	bl	8007498 <RCCEx_PLL3_Config>
 800531e:	4603      	mov	r3, r0
 8005320:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005324:	e00a      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800532c:	e006      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800532e:	bf00      	nop
 8005330:	e004      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005332:	bf00      	nop
 8005334:	e002      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005336:	bf00      	nop
 8005338:	e000      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800533a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800533c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005344:	4b38      	ldr	r3, [pc, #224]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005348:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800534c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005352:	4a35      	ldr	r2, [pc, #212]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005354:	430b      	orrs	r3, r1
 8005356:	6513      	str	r3, [r2, #80]	; 0x50
 8005358:	e003      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800535e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800536e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005372:	2300      	movs	r3, #0
 8005374:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005378:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800537c:	460b      	mov	r3, r1
 800537e:	4313      	orrs	r3, r2
 8005380:	d058      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005386:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800538a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800538e:	d033      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005394:	d82c      	bhi.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539a:	d02f      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800539c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a0:	d826      	bhi.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80053a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053a6:	d02b      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80053a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053ac:	d820      	bhi.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80053ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053b2:	d012      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80053b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053b8:	d81a      	bhi.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d022      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80053be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053c2:	d115      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c8:	3308      	adds	r3, #8
 80053ca:	2101      	movs	r1, #1
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 ffb1 	bl	8007334 <RCCEx_PLL2_Config>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053d8:	e015      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053de:	3328      	adds	r3, #40	; 0x28
 80053e0:	2101      	movs	r1, #1
 80053e2:	4618      	mov	r0, r3
 80053e4:	f002 f858 	bl	8007498 <RCCEx_PLL3_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053ee:	e00a      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80053f6:	e006      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80053f8:	bf00      	nop
 80053fa:	e004      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80053fc:	bf00      	nop
 80053fe:	e002      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005400:	bf00      	nop
 8005402:	e000      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005406:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10e      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005412:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800541a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800541e:	4a02      	ldr	r2, [pc, #8]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005420:	430b      	orrs	r3, r1
 8005422:	6593      	str	r3, [r2, #88]	; 0x58
 8005424:	e006      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005426:	bf00      	nop
 8005428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005430:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005444:	2300      	movs	r3, #0
 8005446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800544a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800544e:	460b      	mov	r3, r1
 8005450:	4313      	orrs	r3, r2
 8005452:	d037      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800545a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545e:	d00e      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005464:	d816      	bhi.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d018      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800546a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800546e:	d111      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005470:	4bc4      	ldr	r3, [pc, #784]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	4ac3      	ldr	r2, [pc, #780]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800547a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800547c:	e00f      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800547e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005482:	3308      	adds	r3, #8
 8005484:	2101      	movs	r1, #1
 8005486:	4618      	mov	r0, r3
 8005488:	f001 ff54 	bl	8007334 <RCCEx_PLL2_Config>
 800548c:	4603      	mov	r3, r0
 800548e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005492:	e004      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800549a:	e000      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800549c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800549e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054a6:	4bb7      	ldr	r3, [pc, #732]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80054ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b4:	4ab3      	ldr	r2, [pc, #716]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054b6:	430b      	orrs	r3, r1
 80054b8:	6513      	str	r3, [r2, #80]	; 0x50
 80054ba:	e003      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80054d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054d4:	2300      	movs	r3, #0
 80054d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80054de:	460b      	mov	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	d039      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80054e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d81c      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80054ee:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80054f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f4:	08005531 	.word	0x08005531
 80054f8:	08005505 	.word	0x08005505
 80054fc:	08005513 	.word	0x08005513
 8005500:	08005531 	.word	0x08005531
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005504:	4b9f      	ldr	r3, [pc, #636]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	4a9e      	ldr	r2, [pc, #632]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800550a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800550e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005510:	e00f      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005516:	3308      	adds	r3, #8
 8005518:	2102      	movs	r1, #2
 800551a:	4618      	mov	r0, r3
 800551c:	f001 ff0a 	bl	8007334 <RCCEx_PLL2_Config>
 8005520:	4603      	mov	r3, r0
 8005522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005526:	e004      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800552e:	e000      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005532:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800553a:	4b92      	ldr	r3, [pc, #584]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800553c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553e:	f023 0103 	bic.w	r1, r3, #3
 8005542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005548:	4a8e      	ldr	r2, [pc, #568]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800554a:	430b      	orrs	r3, r1
 800554c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800554e:	e003      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005550:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005554:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005564:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005568:	2300      	movs	r3, #0
 800556a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800556e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005572:	460b      	mov	r3, r1
 8005574:	4313      	orrs	r3, r2
 8005576:	f000 8099 	beq.w	80056ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800557a:	4b83      	ldr	r3, [pc, #524]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a82      	ldr	r2, [pc, #520]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005584:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005586:	f7fc f8e7 	bl	8001758 <HAL_GetTick>
 800558a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800558e:	e00b      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005590:	f7fc f8e2 	bl	8001758 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b64      	cmp	r3, #100	; 0x64
 800559e:	d903      	bls.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80055a6:	e005      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055a8:	4b77      	ldr	r3, [pc, #476]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0ed      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80055b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d173      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80055bc:	4b71      	ldr	r3, [pc, #452]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055c8:	4053      	eors	r3, r2
 80055ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d015      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055d2:	4b6c      	ldr	r3, [pc, #432]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055de:	4b69      	ldr	r3, [pc, #420]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	4a68      	ldr	r2, [pc, #416]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055ea:	4b66      	ldr	r3, [pc, #408]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	4a65      	ldr	r2, [pc, #404]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80055f6:	4a63      	ldr	r2, [pc, #396]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005602:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560a:	d118      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560c:	f7fc f8a4 	bl	8001758 <HAL_GetTick>
 8005610:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005614:	e00d      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005616:	f7fc f89f 	bl	8001758 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005620:	1ad2      	subs	r2, r2, r3
 8005622:	f241 3388 	movw	r3, #5000	; 0x1388
 8005626:	429a      	cmp	r2, r3
 8005628:	d903      	bls.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8005630:	e005      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005632:	4b54      	ldr	r3, [pc, #336]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0eb      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800563e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005642:	2b00      	cmp	r3, #0
 8005644:	d129      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800564e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005656:	d10e      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005658:	4b4a      	ldr	r3, [pc, #296]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005664:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005668:	091a      	lsrs	r2, r3, #4
 800566a:	4b48      	ldr	r3, [pc, #288]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800566c:	4013      	ands	r3, r2
 800566e:	4a45      	ldr	r2, [pc, #276]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005670:	430b      	orrs	r3, r1
 8005672:	6113      	str	r3, [r2, #16]
 8005674:	e005      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005676:	4b43      	ldr	r3, [pc, #268]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	4a42      	ldr	r2, [pc, #264]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800567c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005680:	6113      	str	r3, [r2, #16]
 8005682:	4b40      	ldr	r3, [pc, #256]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005684:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800568e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005692:	4a3c      	ldr	r2, [pc, #240]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005694:	430b      	orrs	r3, r1
 8005696:	6713      	str	r3, [r2, #112]	; 0x70
 8005698:	e008      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800569a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800569e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80056a2:	e003      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80056ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f002 0301 	and.w	r3, r2, #1
 80056b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056bc:	2300      	movs	r3, #0
 80056be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80056c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80056c6:	460b      	mov	r3, r1
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f000 808f 	beq.w	80057ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80056ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056d4:	2b28      	cmp	r3, #40	; 0x28
 80056d6:	d871      	bhi.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80056d8:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	080057c5 	.word	0x080057c5
 80056e4:	080057bd 	.word	0x080057bd
 80056e8:	080057bd 	.word	0x080057bd
 80056ec:	080057bd 	.word	0x080057bd
 80056f0:	080057bd 	.word	0x080057bd
 80056f4:	080057bd 	.word	0x080057bd
 80056f8:	080057bd 	.word	0x080057bd
 80056fc:	080057bd 	.word	0x080057bd
 8005700:	08005791 	.word	0x08005791
 8005704:	080057bd 	.word	0x080057bd
 8005708:	080057bd 	.word	0x080057bd
 800570c:	080057bd 	.word	0x080057bd
 8005710:	080057bd 	.word	0x080057bd
 8005714:	080057bd 	.word	0x080057bd
 8005718:	080057bd 	.word	0x080057bd
 800571c:	080057bd 	.word	0x080057bd
 8005720:	080057a7 	.word	0x080057a7
 8005724:	080057bd 	.word	0x080057bd
 8005728:	080057bd 	.word	0x080057bd
 800572c:	080057bd 	.word	0x080057bd
 8005730:	080057bd 	.word	0x080057bd
 8005734:	080057bd 	.word	0x080057bd
 8005738:	080057bd 	.word	0x080057bd
 800573c:	080057bd 	.word	0x080057bd
 8005740:	080057c5 	.word	0x080057c5
 8005744:	080057bd 	.word	0x080057bd
 8005748:	080057bd 	.word	0x080057bd
 800574c:	080057bd 	.word	0x080057bd
 8005750:	080057bd 	.word	0x080057bd
 8005754:	080057bd 	.word	0x080057bd
 8005758:	080057bd 	.word	0x080057bd
 800575c:	080057bd 	.word	0x080057bd
 8005760:	080057c5 	.word	0x080057c5
 8005764:	080057bd 	.word	0x080057bd
 8005768:	080057bd 	.word	0x080057bd
 800576c:	080057bd 	.word	0x080057bd
 8005770:	080057bd 	.word	0x080057bd
 8005774:	080057bd 	.word	0x080057bd
 8005778:	080057bd 	.word	0x080057bd
 800577c:	080057bd 	.word	0x080057bd
 8005780:	080057c5 	.word	0x080057c5
 8005784:	58024400 	.word	0x58024400
 8005788:	58024800 	.word	0x58024800
 800578c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005794:	3308      	adds	r3, #8
 8005796:	2101      	movs	r1, #1
 8005798:	4618      	mov	r0, r3
 800579a:	f001 fdcb 	bl	8007334 <RCCEx_PLL2_Config>
 800579e:	4603      	mov	r3, r0
 80057a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057a4:	e00f      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057aa:	3328      	adds	r3, #40	; 0x28
 80057ac:	2101      	movs	r1, #1
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 fe72 	bl	8007498 <RCCEx_PLL3_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057ba:	e004      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80057c2:	e000      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80057c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80057ce:	4bbf      	ldr	r3, [pc, #764]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80057d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80057d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057dc:	4abb      	ldr	r2, [pc, #748]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80057de:	430b      	orrs	r3, r1
 80057e0:	6553      	str	r3, [r2, #84]	; 0x54
 80057e2:	e003      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f002 0302 	and.w	r3, r2, #2
 80057f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057fc:	2300      	movs	r3, #0
 80057fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005802:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005806:	460b      	mov	r3, r1
 8005808:	4313      	orrs	r3, r2
 800580a:	d041      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800580c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005812:	2b05      	cmp	r3, #5
 8005814:	d824      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005816:	a201      	add	r2, pc, #4	; (adr r2, 800581c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581c:	08005869 	.word	0x08005869
 8005820:	08005835 	.word	0x08005835
 8005824:	0800584b 	.word	0x0800584b
 8005828:	08005869 	.word	0x08005869
 800582c:	08005869 	.word	0x08005869
 8005830:	08005869 	.word	0x08005869
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005838:	3308      	adds	r3, #8
 800583a:	2101      	movs	r1, #1
 800583c:	4618      	mov	r0, r3
 800583e:	f001 fd79 	bl	8007334 <RCCEx_PLL2_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005848:	e00f      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800584a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800584e:	3328      	adds	r3, #40	; 0x28
 8005850:	2101      	movs	r1, #1
 8005852:	4618      	mov	r0, r3
 8005854:	f001 fe20 	bl	8007498 <RCCEx_PLL3_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800585e:	e004      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005866:	e000      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10a      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005872:	4b96      	ldr	r3, [pc, #600]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	f023 0107 	bic.w	r1, r3, #7
 800587a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800587e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005880:	4a92      	ldr	r2, [pc, #584]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005882:	430b      	orrs	r3, r1
 8005884:	6553      	str	r3, [r2, #84]	; 0x54
 8005886:	e003      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005888:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800588c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f002 0304 	and.w	r3, r2, #4
 800589c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058a0:	2300      	movs	r3, #0
 80058a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058aa:	460b      	mov	r3, r1
 80058ac:	4313      	orrs	r3, r2
 80058ae:	d044      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b8:	2b05      	cmp	r3, #5
 80058ba:	d825      	bhi.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	08005911 	.word	0x08005911
 80058c8:	080058dd 	.word	0x080058dd
 80058cc:	080058f3 	.word	0x080058f3
 80058d0:	08005911 	.word	0x08005911
 80058d4:	08005911 	.word	0x08005911
 80058d8:	08005911 	.word	0x08005911
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e0:	3308      	adds	r3, #8
 80058e2:	2101      	movs	r1, #1
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 fd25 	bl	8007334 <RCCEx_PLL2_Config>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058f0:	e00f      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f6:	3328      	adds	r3, #40	; 0x28
 80058f8:	2101      	movs	r1, #1
 80058fa:	4618      	mov	r0, r3
 80058fc:	f001 fdcc 	bl	8007498 <RCCEx_PLL3_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005906:	e004      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800590e:	e000      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005912:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10b      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800591a:	4b6c      	ldr	r3, [pc, #432]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800591c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591e:	f023 0107 	bic.w	r1, r3, #7
 8005922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592a:	4a68      	ldr	r2, [pc, #416]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800592c:	430b      	orrs	r3, r1
 800592e:	6593      	str	r3, [r2, #88]	; 0x58
 8005930:	e003      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005932:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005936:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800593a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	f002 0320 	and.w	r3, r2, #32
 8005946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800594a:	2300      	movs	r3, #0
 800594c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005950:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005954:	460b      	mov	r3, r1
 8005956:	4313      	orrs	r3, r2
 8005958:	d055      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800595a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005966:	d033      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800596c:	d82c      	bhi.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005972:	d02f      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005978:	d826      	bhi.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800597a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800597e:	d02b      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005980:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005984:	d820      	bhi.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800598a:	d012      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800598c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005990:	d81a      	bhi.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d022      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800599a:	d115      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a0:	3308      	adds	r3, #8
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 fcc5 	bl	8007334 <RCCEx_PLL2_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059b0:	e015      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b6:	3328      	adds	r3, #40	; 0x28
 80059b8:	2102      	movs	r1, #2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 fd6c 	bl	8007498 <RCCEx_PLL3_Config>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059c6:	e00a      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80059ce:	e006      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80059d0:	bf00      	nop
 80059d2:	e004      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80059d4:	bf00      	nop
 80059d6:	e002      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80059dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10b      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059e6:	4b39      	ldr	r3, [pc, #228]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80059ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059f6:	4a35      	ldr	r2, [pc, #212]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059f8:	430b      	orrs	r3, r1
 80059fa:	6553      	str	r3, [r2, #84]	; 0x54
 80059fc:	e003      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005a12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a16:	2300      	movs	r3, #0
 8005a18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a1c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005a20:	460b      	mov	r3, r1
 8005a22:	4313      	orrs	r3, r2
 8005a24:	d058      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a32:	d033      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005a34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a38:	d82c      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3e:	d02f      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a44:	d826      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005a46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a4a:	d02b      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005a4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a50:	d820      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a56:	d012      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5c:	d81a      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d022      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a66:	d115      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	2100      	movs	r1, #0
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 fc5f 	bl	8007334 <RCCEx_PLL2_Config>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a7c:	e015      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a82:	3328      	adds	r3, #40	; 0x28
 8005a84:	2102      	movs	r1, #2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 fd06 	bl	8007498 <RCCEx_PLL3_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a92:	e00a      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005a9a:	e006      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005a9c:	bf00      	nop
 8005a9e:	e004      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005aa0:	bf00      	nop
 8005aa2:	e002      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005aa4:	bf00      	nop
 8005aa6:	e000      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aaa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10e      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ac2:	4a02      	ldr	r2, [pc, #8]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8005ac8:	e006      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005aca:	bf00      	nop
 8005acc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ad4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005ae4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005aee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005af2:	460b      	mov	r3, r1
 8005af4:	4313      	orrs	r3, r2
 8005af6:	d055      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005b04:	d033      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005b06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005b0a:	d82c      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b10:	d02f      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b16:	d826      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b18:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005b1c:	d02b      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005b1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005b22:	d820      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b28:	d012      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b2e:	d81a      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d022      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b38:	d115      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3e:	3308      	adds	r3, #8
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f001 fbf6 	bl	8007334 <RCCEx_PLL2_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b4e:	e015      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b54:	3328      	adds	r3, #40	; 0x28
 8005b56:	2102      	movs	r1, #2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f001 fc9d 	bl	8007498 <RCCEx_PLL3_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b64:	e00a      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005b6c:	e006      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005b6e:	bf00      	nop
 8005b70:	e004      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005b72:	bf00      	nop
 8005b74:	e002      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005b76:	bf00      	nop
 8005b78:	e000      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10b      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b84:	4ba0      	ldr	r3, [pc, #640]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b88:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b94:	4a9c      	ldr	r2, [pc, #624]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b96:	430b      	orrs	r3, r1
 8005b98:	6593      	str	r3, [r2, #88]	; 0x58
 8005b9a:	e003      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ba0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	f002 0308 	and.w	r3, r2, #8
 8005bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005bba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	d01e      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd0:	d10c      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd6:	3328      	adds	r3, #40	; 0x28
 8005bd8:	2102      	movs	r1, #2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 fc5c 	bl	8007498 <RCCEx_PLL3_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005bec:	4b86      	ldr	r3, [pc, #536]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bfc:	4a82      	ldr	r2, [pc, #520]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	f002 0310 	and.w	r3, r2, #16
 8005c0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c12:	2300      	movs	r3, #0
 8005c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c18:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	d01e      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2e:	d10c      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c34:	3328      	adds	r3, #40	; 0x28
 8005c36:	2102      	movs	r1, #2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 fc2d 	bl	8007498 <RCCEx_PLL3_Config>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c4a:	4b6f      	ldr	r3, [pc, #444]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c5a:	4a6b      	ldr	r2, [pc, #428]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005c6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c6e:	2300      	movs	r3, #0
 8005c70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c72:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005c76:	460b      	mov	r3, r1
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	d03e      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c88:	d022      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c8e:	d81b      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c98:	d00b      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005c9a:	e015      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 fb45 	bl	8007334 <RCCEx_PLL2_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005cb0:	e00f      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb6:	3328      	adds	r3, #40	; 0x28
 8005cb8:	2102      	movs	r1, #2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 fbec 	bl	8007498 <RCCEx_PLL3_Config>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005cc6:	e004      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005cce:	e000      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10b      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cda:	4b4b      	ldr	r3, [pc, #300]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cde:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005cea:	4a47      	ldr	r2, [pc, #284]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cec:	430b      	orrs	r3, r1
 8005cee:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf0:	e003      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cf6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005d06:	673b      	str	r3, [r7, #112]	; 0x70
 8005d08:	2300      	movs	r3, #0
 8005d0a:	677b      	str	r3, [r7, #116]	; 0x74
 8005d0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005d10:	460b      	mov	r3, r1
 8005d12:	4313      	orrs	r3, r2
 8005d14:	d03b      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d22:	d01f      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005d24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d28:	d818      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d2e:	d003      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005d30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d34:	d007      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005d36:	e011      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d38:	4b33      	ldr	r3, [pc, #204]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	4a32      	ldr	r2, [pc, #200]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d44:	e00f      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d4a:	3328      	adds	r3, #40	; 0x28
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 fba2 	bl	8007498 <RCCEx_PLL3_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d5a:	e004      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d62:	e000      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d6e:	4b26      	ldr	r3, [pc, #152]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d72:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d7e:	4a22      	ldr	r2, [pc, #136]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6553      	str	r3, [r2, #84]	; 0x54
 8005d84:	e003      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005da0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005da4:	460b      	mov	r3, r1
 8005da6:	4313      	orrs	r3, r2
 8005da8:	d034      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db8:	d007      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005dba:	e011      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dbc:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	4a11      	ldr	r2, [pc, #68]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dc8:	e00e      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dce:	3308      	adds	r3, #8
 8005dd0:	2102      	movs	r1, #2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 faae 	bl	8007334 <RCCEx_PLL2_Config>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dde:	e003      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10d      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfe:	4a02      	ldr	r2, [pc, #8]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e00:	430b      	orrs	r3, r1
 8005e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e04:	e006      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005e06:	bf00      	nop
 8005e08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005e20:	663b      	str	r3, [r7, #96]	; 0x60
 8005e22:	2300      	movs	r3, #0
 8005e24:	667b      	str	r3, [r7, #100]	; 0x64
 8005e26:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	d00c      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e34:	3328      	adds	r3, #40	; 0x28
 8005e36:	2102      	movs	r1, #2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 fb2d 	bl	8007498 <RCCEx_PLL3_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005e56:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e58:	2300      	movs	r3, #0
 8005e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e5c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005e60:	460b      	mov	r3, r1
 8005e62:	4313      	orrs	r3, r2
 8005e64:	d036      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e70:	d018      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e76:	d811      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e7c:	d014      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e82:	d80b      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d011      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e8c:	d106      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e8e:	4bb7      	ldr	r3, [pc, #732]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	4ab6      	ldr	r2, [pc, #728]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005e9a:	e008      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005ea2:	e004      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005ea4:	bf00      	nop
 8005ea6:	e002      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005ea8:	bf00      	nop
 8005eaa:	e000      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10a      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eb6:	4bad      	ldr	r3, [pc, #692]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec4:	4aa9      	ldr	r2, [pc, #676]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	6553      	str	r3, [r2, #84]	; 0x54
 8005eca:	e003      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ed0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005ee0:	653b      	str	r3, [r7, #80]	; 0x50
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ee6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005eea:	460b      	mov	r3, r1
 8005eec:	4313      	orrs	r3, r2
 8005eee:	d009      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ef0:	4b9e      	ldr	r3, [pc, #632]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	4a9b      	ldr	r2, [pc, #620]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f12:	2300      	movs	r3, #0
 8005f14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f16:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	d009      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f20:	4b92      	ldr	r3, [pc, #584]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f24:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f2e:	4a8f      	ldr	r2, [pc, #572]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f30:	430b      	orrs	r3, r1
 8005f32:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005f40:	643b      	str	r3, [r7, #64]	; 0x40
 8005f42:	2300      	movs	r3, #0
 8005f44:	647b      	str	r3, [r7, #68]	; 0x44
 8005f46:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	d00e      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f50:	4b86      	ldr	r3, [pc, #536]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	4a85      	ldr	r2, [pc, #532]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f5a:	6113      	str	r3, [r2, #16]
 8005f5c:	4b83      	ldr	r3, [pc, #524]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f5e:	6919      	ldr	r1, [r3, #16]
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f68:	4a80      	ldr	r2, [pc, #512]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f6a:	430b      	orrs	r3, r1
 8005f6c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f80:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005f84:	460b      	mov	r3, r1
 8005f86:	4313      	orrs	r3, r2
 8005f88:	d009      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f8a:	4b78      	ldr	r3, [pc, #480]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f98:	4a74      	ldr	r2, [pc, #464]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005faa:	633b      	str	r3, [r7, #48]	; 0x30
 8005fac:	2300      	movs	r3, #0
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fba:	4b6c      	ldr	r3, [pc, #432]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbe:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fca:	4a68      	ldr	r2, [pc, #416]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	2100      	movs	r1, #0
 8005fda:	62b9      	str	r1, [r7, #40]	; 0x28
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	d011      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff0:	3308      	adds	r3, #8
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 f99d 	bl	8007334 <RCCEx_PLL2_Config>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006000:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006008:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800600c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	2100      	movs	r1, #0
 800601a:	6239      	str	r1, [r7, #32]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
 8006022:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006026:	460b      	mov	r3, r1
 8006028:	4313      	orrs	r3, r2
 800602a:	d011      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800602c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006030:	3308      	adds	r3, #8
 8006032:	2101      	movs	r1, #1
 8006034:	4618      	mov	r0, r3
 8006036:	f001 f97d 	bl	8007334 <RCCEx_PLL2_Config>
 800603a:	4603      	mov	r3, r0
 800603c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006048:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800604c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	2100      	movs	r1, #0
 800605a:	61b9      	str	r1, [r7, #24]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006066:	460b      	mov	r3, r1
 8006068:	4313      	orrs	r3, r2
 800606a:	d011      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006070:	3308      	adds	r3, #8
 8006072:	2102      	movs	r1, #2
 8006074:	4618      	mov	r0, r3
 8006076:	f001 f95d 	bl	8007334 <RCCEx_PLL2_Config>
 800607a:	4603      	mov	r3, r0
 800607c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006080:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006088:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800608c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	2100      	movs	r1, #0
 800609a:	6139      	str	r1, [r7, #16]
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80060a6:	460b      	mov	r3, r1
 80060a8:	4313      	orrs	r3, r2
 80060aa:	d011      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b0:	3328      	adds	r3, #40	; 0x28
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 f9ef 	bl	8007498 <RCCEx_PLL3_Config>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80060c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80060d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	2100      	movs	r1, #0
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	f003 0310 	and.w	r3, r3, #16
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060e6:	460b      	mov	r3, r1
 80060e8:	4313      	orrs	r3, r2
 80060ea:	d011      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f0:	3328      	adds	r3, #40	; 0x28
 80060f2:	2101      	movs	r1, #1
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 f9cf 	bl	8007498 <RCCEx_PLL3_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006100:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800610c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	2100      	movs	r1, #0
 800611a:	6039      	str	r1, [r7, #0]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006126:	460b      	mov	r3, r1
 8006128:	4313      	orrs	r3, r2
 800612a:	d011      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800612c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006130:	3328      	adds	r3, #40	; 0x28
 8006132:	2102      	movs	r1, #2
 8006134:	4618      	mov	r0, r3
 8006136:	f001 f9af 	bl	8007498 <RCCEx_PLL3_Config>
 800613a:	4603      	mov	r3, r0
 800613c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006140:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006148:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800614c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006150:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	e000      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
}
 800615e:	4618      	mov	r0, r3
 8006160:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006164:	46bd      	mov	sp, r7
 8006166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800616a:	bf00      	nop
 800616c:	58024400 	.word	0x58024400

08006170 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b090      	sub	sp, #64	; 0x40
 8006174:	af00      	add	r7, sp, #0
 8006176:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800617a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800617e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006182:	430b      	orrs	r3, r1
 8006184:	f040 8094 	bne.w	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006188:	4b9b      	ldr	r3, [pc, #620]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800618a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	2b04      	cmp	r3, #4
 8006196:	f200 8087 	bhi.w	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800619a:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061b5 	.word	0x080061b5
 80061a4:	080061dd 	.word	0x080061dd
 80061a8:	08006205 	.word	0x08006205
 80061ac:	080062a1 	.word	0x080062a1
 80061b0:	0800622d 	.word	0x0800622d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061b4:	4b90      	ldr	r3, [pc, #576]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061c0:	d108      	bne.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 ff62 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061d0:	f000 bc93 	b.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061d8:	f000 bc8f 	b.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061dc:	4b86      	ldr	r3, [pc, #536]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061e8:	d108      	bne.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ea:	f107 0318 	add.w	r3, r7, #24
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fca6 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061f8:	f000 bc7f 	b.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006200:	f000 bc7b 	b.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006204:	4b7c      	ldr	r3, [pc, #496]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800620c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006210:	d108      	bne.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006212:	f107 030c 	add.w	r3, r7, #12
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fde6 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006220:	f000 bc6b 	b.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006228:	f000 bc67 	b.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800622c:	4b72      	ldr	r3, [pc, #456]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800622e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006230:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006234:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006236:	4b70      	ldr	r3, [pc, #448]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b04      	cmp	r3, #4
 8006240:	d10c      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006244:	2b00      	cmp	r3, #0
 8006246:	d109      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006248:	4b6b      	ldr	r3, [pc, #428]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	08db      	lsrs	r3, r3, #3
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	4a6a      	ldr	r2, [pc, #424]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006254:	fa22 f303 	lsr.w	r3, r2, r3
 8006258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800625a:	e01f      	b.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800625c:	4b66      	ldr	r3, [pc, #408]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006268:	d106      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006270:	d102      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006272:	4b63      	ldr	r3, [pc, #396]	; (8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006276:	e011      	b.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006278:	4b5f      	ldr	r3, [pc, #380]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006284:	d106      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800628c:	d102      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800628e:	4b5d      	ldr	r3, [pc, #372]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006292:	e003      	b.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006298:	f000 bc2f 	b.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800629c:	f000 bc2d 	b.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80062a0:	4b59      	ldr	r3, [pc, #356]	; (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80062a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062a4:	f000 bc29 	b.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062ac:	f000 bc25 	b.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80062b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062b4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80062b8:	430b      	orrs	r3, r1
 80062ba:	f040 80a7 	bne.w	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80062be:	4b4e      	ldr	r3, [pc, #312]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80062c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062ce:	d054      	beq.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80062d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062d6:	f200 808b 	bhi.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062e0:	f000 8083 	beq.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062ea:	f200 8081 	bhi.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062f4:	d02f      	beq.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062fc:	d878      	bhi.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800630a:	d012      	beq.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800630c:	e070      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800630e:	4b3a      	ldr	r3, [pc, #232]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800631a:	d107      	bne.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800631c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006320:	4618      	mov	r0, r3
 8006322:	f000 feb5 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800632a:	e3e6      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006330:	e3e3      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006332:	4b31      	ldr	r3, [pc, #196]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800633a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800633e:	d107      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006340:	f107 0318 	add.w	r3, r7, #24
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fbfb 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800634e:	e3d4      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006354:	e3d1      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006356:	4b28      	ldr	r3, [pc, #160]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800635e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006362:	d107      	bne.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006364:	f107 030c 	add.w	r3, r7, #12
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fd3d 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006372:	e3c2      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006378:	e3bf      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800637a:	4b1f      	ldr	r3, [pc, #124]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800637c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006382:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006384:	4b1c      	ldr	r3, [pc, #112]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b04      	cmp	r3, #4
 800638e:	d10c      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006396:	4b18      	ldr	r3, [pc, #96]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	08db      	lsrs	r3, r3, #3
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	4a16      	ldr	r2, [pc, #88]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80063a2:	fa22 f303 	lsr.w	r3, r2, r3
 80063a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a8:	e01e      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063aa:	4b13      	ldr	r3, [pc, #76]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b6:	d106      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80063b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063be:	d102      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063c0:	4b0f      	ldr	r3, [pc, #60]	; (8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80063c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c4:	e010      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063c6:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063d2:	d106      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80063d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063da:	d102      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063dc:	4b09      	ldr	r3, [pc, #36]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e0:	e002      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80063e6:	e388      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80063e8:	e387      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ee:	e384      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80063f0:	2300      	movs	r3, #0
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063f4:	e381      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80063f6:	bf00      	nop
 80063f8:	58024400 	.word	0x58024400
 80063fc:	03d09000 	.word	0x03d09000
 8006400:	003d0900 	.word	0x003d0900
 8006404:	017d7840 	.word	0x017d7840
 8006408:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800640c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006410:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006414:	430b      	orrs	r3, r1
 8006416:	f040 809c 	bne.w	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800641a:	4b9e      	ldr	r3, [pc, #632]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800641c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006422:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800642a:	d054      	beq.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006432:	f200 808b 	bhi.w	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800643c:	f000 8083 	beq.w	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006446:	f200 8081 	bhi.w	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006450:	d02f      	beq.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006458:	d878      	bhi.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006466:	d012      	beq.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006468:	e070      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800646a:	4b8a      	ldr	r3, [pc, #552]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006476:	d107      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800647c:	4618      	mov	r0, r3
 800647e:	f000 fe07 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006484:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006486:	e338      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800648c:	e335      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800648e:	4b81      	ldr	r3, [pc, #516]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800649a:	d107      	bne.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800649c:	f107 0318 	add.w	r3, r7, #24
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fb4d 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064aa:	e326      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064b0:	e323      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064b2:	4b78      	ldr	r3, [pc, #480]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064be:	d107      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c0:	f107 030c 	add.w	r3, r7, #12
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fc8f 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ce:	e314      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064d4:	e311      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064d6:	4b6f      	ldr	r3, [pc, #444]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064e0:	4b6c      	ldr	r3, [pc, #432]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d10c      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80064ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064f2:	4b68      	ldr	r3, [pc, #416]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	08db      	lsrs	r3, r3, #3
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	4a66      	ldr	r2, [pc, #408]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80064fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006504:	e01e      	b.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006506:	4b63      	ldr	r3, [pc, #396]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006512:	d106      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800651a:	d102      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800651c:	4b5f      	ldr	r3, [pc, #380]	; (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006520:	e010      	b.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006522:	4b5c      	ldr	r3, [pc, #368]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800652e:	d106      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8006530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006536:	d102      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006538:	4b59      	ldr	r3, [pc, #356]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800653c:	e002      	b.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006542:	e2da      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006544:	e2d9      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006546:	4b57      	ldr	r3, [pc, #348]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800654a:	e2d6      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006550:	e2d3      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006556:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800655a:	430b      	orrs	r3, r1
 800655c:	f040 80a7 	bne.w	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006560:	4b4c      	ldr	r3, [pc, #304]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006564:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006568:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006570:	d055      	beq.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8006572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006578:	f200 8096 	bhi.w	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006582:	f000 8084 	beq.w	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800658c:	f200 808c 	bhi.w	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006596:	d030      	beq.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659e:	f200 8083 	bhi.w	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ae:	d012      	beq.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80065b0:	e07a      	b.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065b2:	4b38      	ldr	r3, [pc, #224]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065be:	d107      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fd63 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065ce:	e294      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d4:	e291      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065d6:	4b2f      	ldr	r3, [pc, #188]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e2:	d107      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065e4:	f107 0318 	add.w	r3, r7, #24
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 faa9 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065f2:	e282      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f8:	e27f      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065fa:	4b26      	ldr	r3, [pc, #152]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006606:	d107      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006608:	f107 030c 	add.w	r3, r7, #12
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fbeb 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006616:	e270      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800661c:	e26d      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800661e:	4b1d      	ldr	r3, [pc, #116]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006622:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006626:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006628:	4b1a      	ldr	r3, [pc, #104]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b04      	cmp	r3, #4
 8006632:	d10c      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800663a:	4b16      	ldr	r3, [pc, #88]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	08db      	lsrs	r3, r3, #3
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	4a14      	ldr	r2, [pc, #80]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006646:	fa22 f303 	lsr.w	r3, r2, r3
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800664c:	e01e      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800664e:	4b11      	ldr	r3, [pc, #68]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800665a:	d106      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800665c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006662:	d102      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006664:	4b0d      	ldr	r3, [pc, #52]	; (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006668:	e010      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800666a:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006676:	d106      	bne.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800667e:	d102      	bne.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006680:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006684:	e002      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006686:	2300      	movs	r3, #0
 8006688:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800668a:	e236      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800668c:	e235      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800668e:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006690:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006692:	e232      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006694:	58024400 	.word	0x58024400
 8006698:	03d09000 	.word	0x03d09000
 800669c:	003d0900 	.word	0x003d0900
 80066a0:	017d7840 	.word	0x017d7840
 80066a4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ac:	e225      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80066ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80066b6:	430b      	orrs	r3, r1
 80066b8:	f040 8085 	bne.w	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80066bc:	4b9c      	ldr	r3, [pc, #624]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80066be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80066c4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066cc:	d06b      	beq.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066d4:	d874      	bhi.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066dc:	d056      	beq.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066e4:	d86c      	bhi.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066ec:	d03b      	beq.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066f4:	d864      	bhi.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066fc:	d021      	beq.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006704:	d85c      	bhi.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006712:	d004      	beq.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8006714:	e054      	b.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006716:	f7fe fb75 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 800671a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800671c:	e1ed      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800671e:	4b84      	ldr	r3, [pc, #528]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800672a:	d107      	bne.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800672c:	f107 0318 	add.w	r3, r7, #24
 8006730:	4618      	mov	r0, r3
 8006732:	f000 fa05 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800673a:	e1de      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006740:	e1db      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006742:	4b7b      	ldr	r3, [pc, #492]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800674a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800674e:	d107      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006750:	f107 030c 	add.w	r3, r7, #12
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fb47 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800675e:	e1cc      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006764:	e1c9      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006766:	4b72      	ldr	r3, [pc, #456]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b04      	cmp	r3, #4
 8006770:	d109      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006772:	4b6f      	ldr	r3, [pc, #444]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	08db      	lsrs	r3, r3, #3
 8006778:	f003 0303 	and.w	r3, r3, #3
 800677c:	4a6d      	ldr	r2, [pc, #436]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800677e:	fa22 f303 	lsr.w	r3, r2, r3
 8006782:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006784:	e1b9      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800678a:	e1b6      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800678c:	4b68      	ldr	r3, [pc, #416]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006798:	d102      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800679a:	4b67      	ldr	r3, [pc, #412]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800679e:	e1ac      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a4:	e1a9      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067a6:	4b62      	ldr	r3, [pc, #392]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b2:	d102      	bne.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80067b4:	4b61      	ldr	r3, [pc, #388]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80067b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067b8:	e19f      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067be:	e19c      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c4:	e199      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80067c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ca:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80067ce:	430b      	orrs	r3, r1
 80067d0:	d173      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80067d2:	4b57      	ldr	r3, [pc, #348]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067da:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80067dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067e2:	d02f      	beq.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ea:	d863      	bhi.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d004      	beq.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80067f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f8:	d012      	beq.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80067fa:	e05b      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067fc:	4b4c      	ldr	r3, [pc, #304]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006808:	d107      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800680a:	f107 0318 	add.w	r3, r7, #24
 800680e:	4618      	mov	r0, r3
 8006810:	f000 f996 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006818:	e16f      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800681e:	e16c      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006820:	4b43      	ldr	r3, [pc, #268]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682c:	d107      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800682e:	f107 030c 	add.w	r3, r7, #12
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fad8 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800683c:	e15d      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006842:	e15a      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006844:	4b3a      	ldr	r3, [pc, #232]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800684c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800684e:	4b38      	ldr	r3, [pc, #224]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	2b04      	cmp	r3, #4
 8006858:	d10c      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006860:	4b33      	ldr	r3, [pc, #204]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	08db      	lsrs	r3, r3, #3
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	4a32      	ldr	r2, [pc, #200]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006872:	e01e      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006874:	4b2e      	ldr	r3, [pc, #184]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006880:	d106      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006888:	d102      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800688a:	4b2b      	ldr	r3, [pc, #172]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800688c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800688e:	e010      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006890:	4b27      	ldr	r3, [pc, #156]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800689c:	d106      	bne.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800689e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a4:	d102      	bne.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068a6:	4b25      	ldr	r3, [pc, #148]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80068a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068aa:	e002      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80068b0:	e123      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80068b2:	e122      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b8:	e11f      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80068ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068be:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80068c2:	430b      	orrs	r3, r1
 80068c4:	d13c      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80068c6:	4b1a      	ldr	r3, [pc, #104]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ce:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80068d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068dc:	d012      	beq.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80068de:	e023      	b.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068e0:	4b13      	ldr	r3, [pc, #76]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ec:	d107      	bne.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fbcc 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068fc:	e0fd      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006902:	e0fa      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006904:	4b0a      	ldr	r3, [pc, #40]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800690c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006910:	d107      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006912:	f107 0318 	add.w	r3, r7, #24
 8006916:	4618      	mov	r0, r3
 8006918:	f000 f912 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006920:	e0eb      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006926:	e0e8      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006928:	2300      	movs	r3, #0
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800692c:	e0e5      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800692e:	bf00      	nop
 8006930:	58024400 	.word	0x58024400
 8006934:	03d09000 	.word	0x03d09000
 8006938:	003d0900 	.word	0x003d0900
 800693c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006944:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006948:	430b      	orrs	r3, r1
 800694a:	f040 8085 	bne.w	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800694e:	4b6d      	ldr	r3, [pc, #436]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006952:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006956:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800695e:	d06b      	beq.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006966:	d874      	bhi.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696e:	d056      	beq.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006976:	d86c      	bhi.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800697e:	d03b      	beq.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006986:	d864      	bhi.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800698e:	d021      	beq.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006996:	d85c      	bhi.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699a:	2b00      	cmp	r3, #0
 800699c:	d004      	beq.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069a4:	d004      	beq.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80069a6:	e054      	b.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80069a8:	f000 f8b4 	bl	8006b14 <HAL_RCCEx_GetD3PCLK1Freq>
 80069ac:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069ae:	e0a4      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069b0:	4b54      	ldr	r3, [pc, #336]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069bc:	d107      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069be:	f107 0318 	add.w	r3, r7, #24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 f8bc 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069cc:	e095      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d2:	e092      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069d4:	4b4b      	ldr	r3, [pc, #300]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e0:	d107      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069e2:	f107 030c 	add.w	r3, r7, #12
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f9fe 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069f0:	e083      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069f6:	e080      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069f8:	4b42      	ldr	r3, [pc, #264]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d109      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a04:	4b3f      	ldr	r3, [pc, #252]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	08db      	lsrs	r3, r3, #3
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	4a3e      	ldr	r2, [pc, #248]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006a10:	fa22 f303 	lsr.w	r3, r2, r3
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a16:	e070      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a1c:	e06d      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a1e:	4b39      	ldr	r3, [pc, #228]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a2a:	d102      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006a2c:	4b37      	ldr	r3, [pc, #220]	; (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a30:	e063      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a36:	e060      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a38:	4b32      	ldr	r3, [pc, #200]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a44:	d102      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8006a46:	4b32      	ldr	r3, [pc, #200]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a4a:	e056      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a50:	e053      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a56:	e050      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a5c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006a60:	430b      	orrs	r3, r1
 8006a62:	d148      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006a64:	4b27      	ldr	r3, [pc, #156]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a6c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a74:	d02a      	beq.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a7c:	d838      	bhi.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d004      	beq.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a8a:	d00d      	beq.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006a8c:	e030      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a8e:	4b1d      	ldr	r3, [pc, #116]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a9a:	d102      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006a9c:	4b1c      	ldr	r3, [pc, #112]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa0:	e02b      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa6:	e028      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006aa8:	4b16      	ldr	r3, [pc, #88]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ab4:	d107      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fae8 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ac4:	e019      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aca:	e016      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006acc:	4b0d      	ldr	r3, [pc, #52]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ad8:	d107      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ada:	f107 0318 	add.w	r3, r7, #24
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 f82e 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ae8:	e007      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aee:	e004      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af4:	e001      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3740      	adds	r7, #64	; 0x40
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	58024400 	.word	0x58024400
 8006b08:	03d09000 	.word	0x03d09000
 8006b0c:	003d0900 	.word	0x003d0900
 8006b10:	017d7840 	.word	0x017d7840

08006b14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b18:	f7fe f944 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	091b      	lsrs	r3, r3, #4
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	4904      	ldr	r1, [pc, #16]	; (8006b3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b2a:	5ccb      	ldrb	r3, [r1, r3]
 8006b2c:	f003 031f 	and.w	r3, r3, #31
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	58024400 	.word	0x58024400
 8006b3c:	08009018 	.word	0x08009018

08006b40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b089      	sub	sp, #36	; 0x24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b48:	4ba1      	ldr	r3, [pc, #644]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b52:	4b9f      	ldr	r3, [pc, #636]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	0b1b      	lsrs	r3, r3, #12
 8006b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b5e:	4b9c      	ldr	r3, [pc, #624]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b62:	091b      	lsrs	r3, r3, #4
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006b6a:	4b99      	ldr	r3, [pc, #612]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	08db      	lsrs	r3, r3, #3
 8006b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8111 	beq.w	8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	f000 8083 	beq.w	8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	f200 80a1 	bhi.w	8006ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d056      	beq.n	8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006baa:	e099      	b.n	8006ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bac:	4b88      	ldr	r3, [pc, #544]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d02d      	beq.n	8006c14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bb8:	4b85      	ldr	r3, [pc, #532]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	08db      	lsrs	r3, r3, #3
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	4a84      	ldr	r2, [pc, #528]	; (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be2:	4b7b      	ldr	r3, [pc, #492]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c12:	e087      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c26:	4b6a      	ldr	r3, [pc, #424]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c56:	e065      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6a:	4b59      	ldr	r3, [pc, #356]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c9a:	e043      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cae:	4b48      	ldr	r3, [pc, #288]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cde:	e021      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf2:	4b37      	ldr	r3, [pc, #220]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d24:	4b2a      	ldr	r3, [pc, #168]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d28:	0a5b      	lsrs	r3, r3, #9
 8006d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d4a:	ee17 2a90 	vmov	r2, s15
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d52:	4b1f      	ldr	r3, [pc, #124]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d78:	ee17 2a90 	vmov	r2, s15
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d80:	4b13      	ldr	r3, [pc, #76]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	0e1b      	lsrs	r3, r3, #24
 8006d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da6:	ee17 2a90 	vmov	r2, s15
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006dae:	e008      	b.n	8006dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	609a      	str	r2, [r3, #8]
}
 8006dc2:	bf00      	nop
 8006dc4:	3724      	adds	r7, #36	; 0x24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	03d09000 	.word	0x03d09000
 8006dd8:	46000000 	.word	0x46000000
 8006ddc:	4c742400 	.word	0x4c742400
 8006de0:	4a742400 	.word	0x4a742400
 8006de4:	4bbebc20 	.word	0x4bbebc20

08006de8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	; 0x24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006df0:	4ba1      	ldr	r3, [pc, #644]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006dfa:	4b9f      	ldr	r3, [pc, #636]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	0d1b      	lsrs	r3, r3, #20
 8006e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e06:	4b9c      	ldr	r3, [pc, #624]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e12:	4b99      	ldr	r3, [pc, #612]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e16:	08db      	lsrs	r3, r3, #3
 8006e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8111 	beq.w	8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	f000 8083 	beq.w	8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	f200 80a1 	bhi.w	8006f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d056      	beq.n	8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e52:	e099      	b.n	8006f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e54:	4b88      	ldr	r3, [pc, #544]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0320 	and.w	r3, r3, #32
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d02d      	beq.n	8006ebc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e60:	4b85      	ldr	r3, [pc, #532]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	08db      	lsrs	r3, r3, #3
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	4a84      	ldr	r2, [pc, #528]	; (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8a:	4b7b      	ldr	r3, [pc, #492]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006eba:	e087      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ece:	4b6a      	ldr	r3, [pc, #424]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006efe:	e065      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f12:	4b59      	ldr	r3, [pc, #356]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f42:	e043      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800708c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f56:	4b48      	ldr	r3, [pc, #288]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f86:	e021      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9a:	4b37      	ldr	r3, [pc, #220]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006fcc:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	0a5b      	lsrs	r3, r3, #9
 8006fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff2:	ee17 2a90 	vmov	r2, s15
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ffa:	4b1f      	ldr	r3, [pc, #124]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007014:	edd7 6a07 	vldr	s13, [r7, #28]
 8007018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800701c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007020:	ee17 2a90 	vmov	r2, s15
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007028:	4b13      	ldr	r3, [pc, #76]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	0e1b      	lsrs	r3, r3, #24
 800702e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800703e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007042:	edd7 6a07 	vldr	s13, [r7, #28]
 8007046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704e:	ee17 2a90 	vmov	r2, s15
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007056:	e008      	b.n	800706a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	609a      	str	r2, [r3, #8]
}
 800706a:	bf00      	nop
 800706c:	3724      	adds	r7, #36	; 0x24
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	58024400 	.word	0x58024400
 800707c:	03d09000 	.word	0x03d09000
 8007080:	46000000 	.word	0x46000000
 8007084:	4c742400 	.word	0x4c742400
 8007088:	4a742400 	.word	0x4a742400
 800708c:	4bbebc20 	.word	0x4bbebc20

08007090 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007090:	b480      	push	{r7}
 8007092:	b089      	sub	sp, #36	; 0x24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007098:	4ba0      	ldr	r3, [pc, #640]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80070a2:	4b9e      	ldr	r3, [pc, #632]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	091b      	lsrs	r3, r3, #4
 80070a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80070ae:	4b9b      	ldr	r3, [pc, #620]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80070b8:	4b98      	ldr	r3, [pc, #608]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070bc:	08db      	lsrs	r3, r3, #3
 80070be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 8111 	beq.w	80072fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	f000 8083 	beq.w	80071ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	f200 80a1 	bhi.w	800722e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d056      	beq.n	80071a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80070f8:	e099      	b.n	800722e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070fa:	4b88      	ldr	r3, [pc, #544]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d02d      	beq.n	8007162 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007106:	4b85      	ldr	r3, [pc, #532]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	08db      	lsrs	r3, r3, #3
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	4a83      	ldr	r2, [pc, #524]	; (8007320 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007112:	fa22 f303 	lsr.w	r3, r2, r3
 8007116:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007130:	4b7a      	ldr	r3, [pc, #488]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007138:	ee07 3a90 	vmov	s15, r3
 800713c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007140:	ed97 6a03 	vldr	s12, [r7, #12]
 8007144:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007148:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007160:	e087      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	ee07 3a90 	vmov	s15, r3
 8007168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007174:	4b69      	ldr	r3, [pc, #420]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007184:	ed97 6a03 	vldr	s12, [r7, #12]
 8007188:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800718c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007194:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071a4:	e065      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800732c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80071b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b8:	4b58      	ldr	r3, [pc, #352]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80071cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071e8:	e043      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007330 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80071f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fc:	4b47      	ldr	r3, [pc, #284]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007204:	ee07 3a90 	vmov	s15, r3
 8007208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007210:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007228:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800722c:	e021      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007238:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800723c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007240:	4b36      	ldr	r3, [pc, #216]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007250:	ed97 6a03 	vldr	s12, [r7, #12]
 8007254:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007270:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007272:	4b2a      	ldr	r3, [pc, #168]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	0a5b      	lsrs	r3, r3, #9
 8007278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727c:	ee07 3a90 	vmov	s15, r3
 8007280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007288:	ee37 7a87 	vadd.f32	s14, s15, s14
 800728c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007298:	ee17 2a90 	vmov	r2, s15
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80072a0:	4b1e      	ldr	r3, [pc, #120]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	0c1b      	lsrs	r3, r3, #16
 80072a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80072be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c6:	ee17 2a90 	vmov	r2, s15
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80072ce:	4b13      	ldr	r3, [pc, #76]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d2:	0e1b      	lsrs	r3, r3, #24
 80072d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f4:	ee17 2a90 	vmov	r2, s15
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80072fc:	e008      	b.n	8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	609a      	str	r2, [r3, #8]
}
 8007310:	bf00      	nop
 8007312:	3724      	adds	r7, #36	; 0x24
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	58024400 	.word	0x58024400
 8007320:	03d09000 	.word	0x03d09000
 8007324:	46000000 	.word	0x46000000
 8007328:	4c742400 	.word	0x4c742400
 800732c:	4a742400 	.word	0x4a742400
 8007330:	4bbebc20 	.word	0x4bbebc20

08007334 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007342:	4b53      	ldr	r3, [pc, #332]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	2b03      	cmp	r3, #3
 800734c:	d101      	bne.n	8007352 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e099      	b.n	8007486 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007352:	4b4f      	ldr	r3, [pc, #316]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a4e      	ldr	r2, [pc, #312]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007358:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800735c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800735e:	f7fa f9fb 	bl	8001758 <HAL_GetTick>
 8007362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007364:	e008      	b.n	8007378 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007366:	f7fa f9f7 	bl	8001758 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e086      	b.n	8007486 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007378:	4b45      	ldr	r3, [pc, #276]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f0      	bne.n	8007366 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007384:	4b42      	ldr	r3, [pc, #264]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	031b      	lsls	r3, r3, #12
 8007392:	493f      	ldr	r1, [pc, #252]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007394:	4313      	orrs	r3, r2
 8007396:	628b      	str	r3, [r1, #40]	; 0x28
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	3b01      	subs	r3, #1
 800739e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	025b      	lsls	r3, r3, #9
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	041b      	lsls	r3, r3, #16
 80073b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	061b      	lsls	r3, r3, #24
 80073c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073c8:	4931      	ldr	r1, [pc, #196]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073ce:	4b30      	ldr	r3, [pc, #192]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	492d      	ldr	r1, [pc, #180]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073e0:	4b2b      	ldr	r3, [pc, #172]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	f023 0220 	bic.w	r2, r3, #32
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	4928      	ldr	r1, [pc, #160]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073f2:	4b27      	ldr	r3, [pc, #156]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	4a26      	ldr	r2, [pc, #152]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073f8:	f023 0310 	bic.w	r3, r3, #16
 80073fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073fe:	4b24      	ldr	r3, [pc, #144]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007402:	4b24      	ldr	r3, [pc, #144]	; (8007494 <RCCEx_PLL2_Config+0x160>)
 8007404:	4013      	ands	r3, r2
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	69d2      	ldr	r2, [r2, #28]
 800740a:	00d2      	lsls	r2, r2, #3
 800740c:	4920      	ldr	r1, [pc, #128]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800740e:	4313      	orrs	r3, r2
 8007410:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007412:	4b1f      	ldr	r3, [pc, #124]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	4a1e      	ldr	r2, [pc, #120]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007418:	f043 0310 	orr.w	r3, r3, #16
 800741c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d106      	bne.n	8007432 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007424:	4b1a      	ldr	r3, [pc, #104]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	4a19      	ldr	r2, [pc, #100]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800742a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800742e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007430:	e00f      	b.n	8007452 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d106      	bne.n	8007446 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007438:	4b15      	ldr	r3, [pc, #84]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	4a14      	ldr	r2, [pc, #80]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800743e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007442:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007444:	e005      	b.n	8007452 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007446:	4b12      	ldr	r3, [pc, #72]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	4a11      	ldr	r2, [pc, #68]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800744c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007450:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a0e      	ldr	r2, [pc, #56]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007458:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800745c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800745e:	f7fa f97b 	bl	8001758 <HAL_GetTick>
 8007462:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007464:	e008      	b.n	8007478 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007466:	f7fa f977 	bl	8001758 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e006      	b.n	8007486 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0f0      	beq.n	8007466 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	58024400 	.word	0x58024400
 8007494:	ffff0007 	.word	0xffff0007

08007498 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074a6:	4b53      	ldr	r3, [pc, #332]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d101      	bne.n	80074b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e099      	b.n	80075ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074b6:	4b4f      	ldr	r3, [pc, #316]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a4e      	ldr	r2, [pc, #312]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074c2:	f7fa f949 	bl	8001758 <HAL_GetTick>
 80074c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074c8:	e008      	b.n	80074dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074ca:	f7fa f945 	bl	8001758 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d901      	bls.n	80074dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e086      	b.n	80075ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074dc:	4b45      	ldr	r3, [pc, #276]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1f0      	bne.n	80074ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074e8:	4b42      	ldr	r3, [pc, #264]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	051b      	lsls	r3, r3, #20
 80074f6:	493f      	ldr	r1, [pc, #252]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	628b      	str	r3, [r1, #40]	; 0x28
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	3b01      	subs	r3, #1
 8007502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	3b01      	subs	r3, #1
 800750c:	025b      	lsls	r3, r3, #9
 800750e:	b29b      	uxth	r3, r3
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	3b01      	subs	r3, #1
 8007518:	041b      	lsls	r3, r3, #16
 800751a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	3b01      	subs	r3, #1
 8007526:	061b      	lsls	r3, r3, #24
 8007528:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800752c:	4931      	ldr	r1, [pc, #196]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800752e:	4313      	orrs	r3, r2
 8007530:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007532:	4b30      	ldr	r3, [pc, #192]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	492d      	ldr	r1, [pc, #180]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007540:	4313      	orrs	r3, r2
 8007542:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007544:	4b2b      	ldr	r3, [pc, #172]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	4928      	ldr	r1, [pc, #160]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007552:	4313      	orrs	r3, r2
 8007554:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007556:	4b27      	ldr	r3, [pc, #156]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755a:	4a26      	ldr	r2, [pc, #152]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800755c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007560:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007562:	4b24      	ldr	r3, [pc, #144]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007566:	4b24      	ldr	r3, [pc, #144]	; (80075f8 <RCCEx_PLL3_Config+0x160>)
 8007568:	4013      	ands	r3, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	69d2      	ldr	r2, [r2, #28]
 800756e:	00d2      	lsls	r2, r2, #3
 8007570:	4920      	ldr	r1, [pc, #128]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007572:	4313      	orrs	r3, r2
 8007574:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007576:	4b1f      	ldr	r3, [pc, #124]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	4a1e      	ldr	r2, [pc, #120]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800757c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007580:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007588:	4b1a      	ldr	r3, [pc, #104]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	4a19      	ldr	r2, [pc, #100]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800758e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007592:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007594:	e00f      	b.n	80075b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d106      	bne.n	80075aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800759c:	4b15      	ldr	r3, [pc, #84]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	4a14      	ldr	r2, [pc, #80]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075a8:	e005      	b.n	80075b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ae:	4a11      	ldr	r2, [pc, #68]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075b6:	4b0f      	ldr	r3, [pc, #60]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a0e      	ldr	r2, [pc, #56]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075c2:	f7fa f8c9 	bl	8001758 <HAL_GetTick>
 80075c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075c8:	e008      	b.n	80075dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075ca:	f7fa f8c5 	bl	8001758 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d901      	bls.n	80075dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e006      	b.n	80075ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075dc:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0f0      	beq.n	80075ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	58024400 	.word	0x58024400
 80075f8:	ffff0007 	.word	0xffff0007

080075fc <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d904      	bls.n	800761a <HAL_SAI_InitProtocol+0x1e>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	3b03      	subs	r3, #3
 8007614:	2b01      	cmp	r3, #1
 8007616:	d812      	bhi.n	800763e <HAL_SAI_InitProtocol+0x42>
 8007618:	e008      	b.n	800762c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fb8b 	bl	8007d3c <SAI_InitI2S>
 8007626:	4603      	mov	r3, r0
 8007628:	75fb      	strb	r3, [r7, #23]
      break;
 800762a:	e00b      	b.n	8007644 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	68b9      	ldr	r1, [r7, #8]
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 fc34 	bl	8007ea0 <SAI_InitPCM>
 8007638:	4603      	mov	r3, r0
 800763a:	75fb      	strb	r3, [r7, #23]
      break;
 800763c:	e002      	b.n	8007644 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	75fb      	strb	r3, [r7, #23]
      break;
 8007642:	bf00      	nop
  }

  if (status == HAL_OK)
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d104      	bne.n	8007654 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 f808 	bl	8007660 <HAL_SAI_Init>
 8007650:	4603      	mov	r3, r0
 8007652:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007654:	7dfb      	ldrb	r3, [r7, #23]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b08a      	sub	sp, #40	; 0x28
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e201      	b.n	8007a76 <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007678:	2b01      	cmp	r3, #1
 800767a:	d113      	bne.n	80076a4 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a99      	ldr	r2, [pc, #612]	; (80078e8 <HAL_SAI_Init+0x288>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d004      	beq.n	8007690 <HAL_SAI_Init+0x30>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a98      	ldr	r2, [pc, #608]	; (80078ec <HAL_SAI_Init+0x28c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d107      	bne.n	80076a0 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007694:	2b01      	cmp	r3, #1
 8007696:	d103      	bne.n	80076a0 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e1e8      	b.n	8007a76 <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a8f      	ldr	r2, [pc, #572]	; (80078e8 <HAL_SAI_Init+0x288>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <HAL_SAI_Init+0x58>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a8f      	ldr	r2, [pc, #572]	; (80078f0 <HAL_SAI_Init+0x290>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d102      	bne.n	80076be <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 80076b8:	4b8e      	ldr	r3, [pc, #568]	; (80078f4 <HAL_SAI_Init+0x294>)
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	e00e      	b.n	80076dc <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a8a      	ldr	r2, [pc, #552]	; (80078ec <HAL_SAI_Init+0x28c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d004      	beq.n	80076d2 <HAL_SAI_Init+0x72>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a8a      	ldr	r2, [pc, #552]	; (80078f8 <HAL_SAI_Init+0x298>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d102      	bne.n	80076d8 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 80076d2:	4b8a      	ldr	r3, [pc, #552]	; (80078fc <HAL_SAI_Init+0x29c>)
 80076d4:	61bb      	str	r3, [r7, #24]
 80076d6:	e001      	b.n	80076dc <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e1cc      	b.n	8007a76 <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d106      	bne.n	80076f6 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7f9 fde5 	bl	80012c0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fc8c 	bl	8008014 <SAI_Disable>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e1b7      	b.n	8007a76 <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	2b02      	cmp	r3, #2
 8007714:	d00c      	beq.n	8007730 <HAL_SAI_Init+0xd0>
 8007716:	2b02      	cmp	r3, #2
 8007718:	d80d      	bhi.n	8007736 <HAL_SAI_Init+0xd6>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <HAL_SAI_Init+0xc4>
 800771e:	2b01      	cmp	r3, #1
 8007720:	d003      	beq.n	800772a <HAL_SAI_Init+0xca>
 8007722:	e008      	b.n	8007736 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007728:	e008      	b.n	800773c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800772a:	2310      	movs	r3, #16
 800772c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800772e:	e005      	b.n	800773c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007730:	2320      	movs	r3, #32
 8007732:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007734:	e002      	b.n	800773c <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8007736:	2300      	movs	r3, #0
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800773a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	2b05      	cmp	r3, #5
 8007742:	d822      	bhi.n	800778a <HAL_SAI_Init+0x12a>
 8007744:	a201      	add	r2, pc, #4	; (adr r2, 800774c <HAL_SAI_Init+0xec>)
 8007746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774a:	bf00      	nop
 800774c:	08007765 	.word	0x08007765
 8007750:	0800776b 	.word	0x0800776b
 8007754:	08007773 	.word	0x08007773
 8007758:	0800778b 	.word	0x0800778b
 800775c:	0800778b 	.word	0x0800778b
 8007760:	0800777b 	.word	0x0800777b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	61fb      	str	r3, [r7, #28]
      break;
 8007768:	e012      	b.n	8007790 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800776a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800776e:	61fb      	str	r3, [r7, #28]
      break;
 8007770:	e00e      	b.n	8007790 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007772:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007776:	61fb      	str	r3, [r7, #28]
      break;
 8007778:	e00a      	b.n	8007790 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800777a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800777e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	f043 0303 	orr.w	r3, r3, #3
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007788:	e002      	b.n	8007790 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	61fb      	str	r3, [r7, #28]
      break;
 800778e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007794:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 808a 	beq.w	80078b4 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a4f      	ldr	r2, [pc, #316]	; (80078e8 <HAL_SAI_Init+0x288>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d004      	beq.n	80077b8 <HAL_SAI_Init+0x158>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a4f      	ldr	r2, [pc, #316]	; (80078f0 <HAL_SAI_Init+0x290>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d106      	bne.n	80077c6 <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80077b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80077bc:	f04f 0100 	mov.w	r1, #0
 80077c0:	f7fe fcd6 	bl	8006170 <HAL_RCCEx_GetPeriphCLKFreq>
 80077c4:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a48      	ldr	r2, [pc, #288]	; (80078ec <HAL_SAI_Init+0x28c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d106      	bne.n	80077de <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80077d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80077d4:	f04f 0100 	mov.w	r1, #0
 80077d8:	f7fe fcca 	bl	8006170 <HAL_RCCEx_GetPeriphCLKFreq>
 80077dc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a45      	ldr	r2, [pc, #276]	; (80078f8 <HAL_SAI_Init+0x298>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d106      	bne.n	80077f6 <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80077e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80077ec:	f04f 0100 	mov.w	r1, #0
 80077f0:	f7fe fcbe 	bl	8006170 <HAL_RCCEx_GetPeriphCLKFreq>
 80077f4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80077fe:	d120      	bne.n	8007842 <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007804:	2b04      	cmp	r3, #4
 8007806:	d102      	bne.n	800780e <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007808:	2340      	movs	r3, #64	; 0x40
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	e00a      	b.n	8007824 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007812:	2b08      	cmp	r3, #8
 8007814:	d103      	bne.n	800781e <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8007816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	e002      	b.n	8007824 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007822:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	4619      	mov	r1, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	fb02 f303 	mul.w	r3, r2, r3
 800783a:	fbb1 f3f3 	udiv	r3, r1, r3
 800783e:	613b      	str	r3, [r7, #16]
 8007840:	e017      	b.n	8007872 <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800784a:	d101      	bne.n	8007850 <HAL_SAI_Init+0x1f0>
 800784c:	2302      	movs	r3, #2
 800784e:	e000      	b.n	8007852 <HAL_SAI_Init+0x1f2>
 8007850:	2301      	movs	r3, #1
 8007852:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	4619      	mov	r1, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	fb02 f303 	mul.w	r3, r2, r3
 800786a:	021b      	lsls	r3, r3, #8
 800786c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007870:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	4a22      	ldr	r2, [pc, #136]	; (8007900 <HAL_SAI_Init+0x2a0>)
 8007876:	fba2 2303 	umull	r2, r3, r2, r3
 800787a:	08da      	lsrs	r2, r3, #3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007880:	6939      	ldr	r1, [r7, #16]
 8007882:	4b1f      	ldr	r3, [pc, #124]	; (8007900 <HAL_SAI_Init+0x2a0>)
 8007884:	fba3 2301 	umull	r2, r3, r3, r1
 8007888:	08da      	lsrs	r2, r3, #3
 800788a:	4613      	mov	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	1aca      	subs	r2, r1, r3
 8007894:	2a08      	cmp	r2, #8
 8007896:	d904      	bls.n	80078a2 <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	1c5a      	adds	r2, r3, #1
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d104      	bne.n	80078b4 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	085a      	lsrs	r2, r3, #1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <HAL_SAI_Init+0x264>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d109      	bne.n	80078d8 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_SAI_Init+0x270>
 80078cc:	2300      	movs	r3, #0
 80078ce:	e001      	b.n	80078d4 <HAL_SAI_Init+0x274>
 80078d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078d4:	623b      	str	r3, [r7, #32]
 80078d6:	e017      	b.n	8007908 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d111      	bne.n	8007904 <HAL_SAI_Init+0x2a4>
 80078e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078e4:	e00f      	b.n	8007906 <HAL_SAI_Init+0x2a6>
 80078e6:	bf00      	nop
 80078e8:	40015804 	.word	0x40015804
 80078ec:	58005404 	.word	0x58005404
 80078f0:	40015824 	.word	0x40015824
 80078f4:	40015800 	.word	0x40015800
 80078f8:	58005424 	.word	0x58005424
 80078fc:	58005400 	.word	0x58005400
 8007900:	cccccccd 	.word	0xcccccccd
 8007904:	2300      	movs	r3, #0
 8007906:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6819      	ldr	r1, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4b5b      	ldr	r3, [pc, #364]	; (8007a80 <HAL_SAI_Init+0x420>)
 8007914:	400b      	ands	r3, r1
 8007916:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6819      	ldr	r1, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007926:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800792c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007932:	431a      	orrs	r2, r3
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8007940:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800794c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007952:	051b      	lsls	r3, r3, #20
 8007954:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800795a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6859      	ldr	r1, [r3, #4]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	4b43      	ldr	r3, [pc, #268]	; (8007a84 <HAL_SAI_Init+0x424>)
 8007976:	400b      	ands	r3, r1
 8007978:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6859      	ldr	r1, [r3, #4]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	69da      	ldr	r2, [r3, #28]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798e:	431a      	orrs	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6899      	ldr	r1, [r3, #8]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4b39      	ldr	r3, [pc, #228]	; (8007a88 <HAL_SAI_Init+0x428>)
 80079a4:	400b      	ands	r3, r1
 80079a6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6899      	ldr	r1, [r3, #8]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80079b8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80079be:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80079c4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ca:	3b01      	subs	r3, #1
 80079cc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80079ce:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68d9      	ldr	r1, [r3, #12]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	f24f 0320 	movw	r3, #61472	; 0xf020
 80079e6:	400b      	ands	r3, r1
 80079e8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68d9      	ldr	r1, [r3, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079f8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079fe:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007a00:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a06:	3b01      	subs	r3, #1
 8007a08:	021b      	lsls	r3, r3, #8
 8007a0a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a1c      	ldr	r2, [pc, #112]	; (8007a8c <HAL_SAI_Init+0x42c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d004      	beq.n	8007a28 <HAL_SAI_Init+0x3c8>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a1b      	ldr	r2, [pc, #108]	; (8007a90 <HAL_SAI_Init+0x430>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d119      	bne.n	8007a5c <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2c:	f023 0201 	bic.w	r2, r3, #1
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d10e      	bne.n	8007a5c <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a46:	3b01      	subs	r3, #1
 8007a48:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a54:	f043 0201 	orr.w	r2, r3, #1
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3728      	adds	r7, #40	; 0x28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	f005c010 	.word	0xf005c010
 8007a84:	ffff1ff0 	.word	0xffff1ff0
 8007a88:	fff88000 	.word	0xfff88000
 8007a8c:	40015804 	.word	0x40015804
 8007a90:	58005404 	.word	0x58005404

08007a94 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007aa2:	f7f9 fe59 	bl	8001758 <HAL_GetTick>
 8007aa6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <HAL_SAI_Transmit_DMA+0x20>
 8007aae:	88fb      	ldrh	r3, [r7, #6]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e098      	b.n	8007bea <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	f040 8091 	bne.w	8007be8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_SAI_Transmit_DMA+0x40>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e08a      	b.n	8007bea <HAL_SAI_Transmit_DMA+0x156>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	88fa      	ldrh	r2, [r7, #6]
 8007ae6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	88fa      	ldrh	r2, [r7, #6]
 8007aee:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2212      	movs	r2, #18
 8007afe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b08:	4a3a      	ldr	r2, [pc, #232]	; (8007bf4 <HAL_SAI_Transmit_DMA+0x160>)
 8007b0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b12:	4a39      	ldr	r2, [pc, #228]	; (8007bf8 <HAL_SAI_Transmit_DMA+0x164>)
 8007b14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b1c:	4a37      	ldr	r2, [pc, #220]	; (8007bfc <HAL_SAI_Transmit_DMA+0x168>)
 8007b1e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b26:	2200      	movs	r2, #0
 8007b28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b34:	4619      	mov	r1, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	331c      	adds	r3, #28
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007b44:	f7fa faa0 	bl	8002088 <HAL_DMA_Start_IT>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e047      	b.n	8007bea <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 fa21 	bl	8007fa4 <SAI_InterruptFlag>
 8007b62:	4601      	mov	r1, r0
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	691a      	ldr	r2, [r3, #16]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007b80:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007b82:	e015      	b.n	8007bb0 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007b84:	f7f9 fde8 	bl	8001758 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b92:	d90d      	bls.n	8007bb0 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e01c      	b.n	8007bea <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0e2      	beq.n	8007b84 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d107      	bne.n	8007bdc <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007bda:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	e000      	b.n	8007bea <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8007be8:	2302      	movs	r3, #2
  }
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	080080e9 	.word	0x080080e9
 8007bf8:	08008089 	.word	0x08008089
 8007bfc:	08008181 	.word	0x08008181

08007c00 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <HAL_SAI_Receive_DMA+0x1a>
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e079      	b.n	8007d12 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d172      	bne.n	8007d10 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d101      	bne.n	8007c38 <HAL_SAI_Receive_DMA+0x38>
 8007c34:	2302      	movs	r3, #2
 8007c36:	e06c      	b.n	8007d12 <HAL_SAI_Receive_DMA+0x112>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	88fa      	ldrh	r2, [r7, #6]
 8007c4a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	88fa      	ldrh	r2, [r7, #6]
 8007c52:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2222      	movs	r2, #34	; 0x22
 8007c62:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c6c:	4a2b      	ldr	r2, [pc, #172]	; (8007d1c <HAL_SAI_Receive_DMA+0x11c>)
 8007c6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c76:	4a2a      	ldr	r2, [pc, #168]	; (8007d20 <HAL_SAI_Receive_DMA+0x120>)
 8007c78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c80:	4a28      	ldr	r2, [pc, #160]	; (8007d24 <HAL_SAI_Receive_DMA+0x124>)
 8007c82:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	331c      	adds	r3, #28
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007ca8:	f7fa f9ee 	bl	8002088 <HAL_DMA_Start_IT>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d005      	beq.n	8007cbe <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e029      	b.n	8007d12 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 f96f 	bl	8007fa4 <SAI_InterruptFlag>
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691a      	ldr	r2, [r3, #16]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007ce4:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d107      	bne.n	8007d04 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d02:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e000      	b.n	8007d12 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8007d10:	2302      	movs	r3, #2
  }
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	08008165 	.word	0x08008165
 8007d20:	08008105 	.word	0x08008105
 8007d24:	08008181 	.word	0x08008181

08007d28 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <SAI_InitI2S+0x2e>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d103      	bne.n	8007d72 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	651a      	str	r2, [r3, #80]	; 0x50
 8007d70:	e002      	b.n	8007d78 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007d7e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d86:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e077      	b.n	8007e92 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d107      	bne.n	8007db8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007db4:	665a      	str	r2, [r3, #100]	; 0x64
 8007db6:	e006      	b.n	8007dc6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007dbe:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d84f      	bhi.n	8007e6c <SAI_InitI2S+0x130>
 8007dcc:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <SAI_InitI2S+0x98>)
 8007dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd2:	bf00      	nop
 8007dd4:	08007de5 	.word	0x08007de5
 8007dd8:	08007e07 	.word	0x08007e07
 8007ddc:	08007e29 	.word	0x08007e29
 8007de0:	08007e4b 	.word	0x08007e4b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2280      	movs	r2, #128	; 0x80
 8007de8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	085b      	lsrs	r3, r3, #1
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	085b      	lsrs	r3, r3, #1
 8007df8:	011a      	lsls	r2, r3, #4
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2240      	movs	r2, #64	; 0x40
 8007e02:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007e04:	e035      	b.n	8007e72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2280      	movs	r2, #128	; 0x80
 8007e0a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	085b      	lsrs	r3, r3, #1
 8007e10:	019a      	lsls	r2, r3, #6
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	085b      	lsrs	r3, r3, #1
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2280      	movs	r2, #128	; 0x80
 8007e24:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007e26:	e024      	b.n	8007e72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	22c0      	movs	r2, #192	; 0xc0
 8007e2c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	085b      	lsrs	r3, r3, #1
 8007e32:	019a      	lsls	r2, r3, #6
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	085b      	lsrs	r3, r3, #1
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2280      	movs	r2, #128	; 0x80
 8007e46:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007e48:	e013      	b.n	8007e72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	22e0      	movs	r2, #224	; 0xe0
 8007e4e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	019a      	lsls	r2, r3, #6
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	085b      	lsrs	r3, r3, #1
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2280      	movs	r2, #128	; 0x80
 8007e68:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007e6a:	e002      	b.n	8007e72 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e70:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d10b      	bne.n	8007e90 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d102      	bne.n	8007e84 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2210      	movs	r2, #16
 8007e82:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d102      	bne.n	8007e90 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2208      	movs	r2, #8
 8007e8e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8007e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop

08007ea0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <SAI_InitPCM+0x2e>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d103      	bne.n	8007ed6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	651a      	str	r2, [r3, #80]	; 0x50
 8007ed4:	e002      	b.n	8007edc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007ee8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007ef0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f04:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	d103      	bne.n	8007f14 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	659a      	str	r2, [r3, #88]	; 0x58
 8007f12:	e002      	b.n	8007f1a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	220d      	movs	r2, #13
 8007f18:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	d837      	bhi.n	8007f90 <SAI_InitPCM+0xf0>
 8007f20:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <SAI_InitPCM+0x88>)
 8007f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f26:	bf00      	nop
 8007f28:	08007f39 	.word	0x08007f39
 8007f2c:	08007f4f 	.word	0x08007f4f
 8007f30:	08007f65 	.word	0x08007f65
 8007f34:	08007f7b 	.word	0x08007f7b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2280      	movs	r2, #128	; 0x80
 8007f3c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	011a      	lsls	r2, r3, #4
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2240      	movs	r2, #64	; 0x40
 8007f4a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f4c:	e023      	b.n	8007f96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2280      	movs	r2, #128	; 0x80
 8007f52:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2280      	movs	r2, #128	; 0x80
 8007f60:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f62:	e018      	b.n	8007f96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	22c0      	movs	r2, #192	; 0xc0
 8007f68:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2280      	movs	r2, #128	; 0x80
 8007f76:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f78:	e00d      	b.n	8007f96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	22e0      	movs	r2, #224	; 0xe0
 8007f7e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2280      	movs	r2, #128	; 0x80
 8007f8c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f8e:	e002      	b.n	8007f96 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	75fb      	strb	r3, [r7, #23]
      break;
 8007f94:	bf00      	nop
  }

  return status;
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	371c      	adds	r7, #28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d103      	bne.n	8007fc2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f043 0308 	orr.w	r3, r3, #8
 8007fc0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc6:	2b08      	cmp	r3, #8
 8007fc8:	d10b      	bne.n	8007fe2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d003      	beq.n	8007fda <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d103      	bne.n	8007fe2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f043 0310 	orr.w	r3, r3, #16
 8007fe0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d003      	beq.n	8007ff2 <SAI_InterruptFlag+0x4e>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d104      	bne.n	8007ffc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007ff8:	60fb      	str	r3, [r7, #12]
 8007ffa:	e003      	b.n	8008004 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f043 0304 	orr.w	r3, r3, #4
 8008002:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008004:	68fb      	ldr	r3, [r7, #12]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
	...

08008014 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800801c:	4b18      	ldr	r3, [pc, #96]	; (8008080 <SAI_Disable+0x6c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a18      	ldr	r2, [pc, #96]	; (8008084 <SAI_Disable+0x70>)
 8008022:	fba2 2303 	umull	r2, r3, r2, r3
 8008026:	0b1b      	lsrs	r3, r3, #12
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800803e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800804c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	72fb      	strb	r3, [r7, #11]
      break;
 800805a:	e009      	b.n	8008070 <SAI_Disable+0x5c>
    }
    count--;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3b01      	subs	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1e7      	bne.n	8008040 <SAI_Disable+0x2c>

  return status;
 8008070:	7afb      	ldrb	r3, [r7, #11]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	24000000 	.word	0x24000000
 8008084:	95cbec1b 	.word	0x95cbec1b

08008088 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008094:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800809e:	d01c      	beq.n	80080da <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80080b6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80080b8:	2100      	movs	r1, #0
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff ff72 	bl	8007fa4 <SAI_InterruptFlag>
 80080c0:	4603      	mov	r3, r0
 80080c2:	43d9      	mvns	r1, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691a      	ldr	r2, [r3, #16]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	400a      	ands	r2, r1
 80080d0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f7f8 f9e8 	bl	80004b0 <HAL_SAI_TxCpltCallback>
#endif
}
 80080e0:	bf00      	nop
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f7f8 fa3c 	bl	8000574 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80080fc:	bf00      	nop
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800811a:	d01c      	beq.n	8008156 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800812a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008134:	2100      	movs	r1, #0
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7ff ff34 	bl	8007fa4 <SAI_InterruptFlag>
 800813c:	4603      	mov	r3, r0
 800813e:	43d9      	mvns	r1, r3
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	691a      	ldr	r2, [r3, #16]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	400a      	ands	r2, r1
 800814c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f7f8 fa6e 	bl	8000638 <HAL_SAI_RxCpltCallback>
#endif
}
 800815c:	bf00      	nop
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f7f8 fb16 	bl	80007a4 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008178:	bf00      	nop
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7fb f90e 	bl	80033b0 <HAL_DMA_GetError>
 8008194:	4603      	mov	r3, r0
 8008196:	2b02      	cmp	r3, #2
 8008198:	d01d      	beq.n	80081d6 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80081b8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f7ff ff2a 	bl	8008014 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f7ff fda9 	bl	8007d28 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80081d6:	bf00      	nop
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e02b      	b.n	800824c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d106      	bne.n	800820e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7f9 f84f 	bl	80012ac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2202      	movs	r2, #2
 8008212:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	3304      	adds	r3, #4
 800821e:	4619      	mov	r1, r3
 8008220:	4610      	mov	r0, r2
 8008222:	f000 fdbf 	bl	8008da4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	461a      	mov	r2, r3
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	f000 fe13 	bl	8008e5c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008236:	4b07      	ldr	r3, [pc, #28]	; (8008254 <HAL_SDRAM_Init+0x74>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a06      	ldr	r2, [pc, #24]	; (8008254 <HAL_SDRAM_Init+0x74>)
 800823c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008240:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	52004000 	.word	0x52004000

08008258 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800826a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	2b02      	cmp	r3, #2
 8008270:	d101      	bne.n	8008276 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008272:	2302      	movs	r3, #2
 8008274:	e021      	b.n	80082ba <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008276:	7dfb      	ldrb	r3, [r7, #23]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d002      	beq.n	8008282 <HAL_SDRAM_SendCommand+0x2a>
 800827c:	7dfb      	ldrb	r3, [r7, #23]
 800827e:	2b05      	cmp	r3, #5
 8008280:	d118      	bne.n	80082b4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2202      	movs	r2, #2
 8008286:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	68b9      	ldr	r1, [r7, #8]
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fe4c 	bl	8008f30 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d104      	bne.n	80082aa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2205      	movs	r2, #5
 80082a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80082a8:	e006      	b.n	80082b8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80082b2:	e001      	b.n	80082b8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e000      	b.n	80082ba <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d101      	bne.n	80082dc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80082d8:	2302      	movs	r3, #2
 80082da:	e016      	b.n	800830a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d10f      	bne.n	8008308 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fe3e 	bl	8008f78 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	e000      	b.n	800830a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e10f      	b.n	8008546 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a87      	ldr	r2, [pc, #540]	; (8008550 <HAL_SPI_Init+0x23c>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d00f      	beq.n	8008356 <HAL_SPI_Init+0x42>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a86      	ldr	r2, [pc, #536]	; (8008554 <HAL_SPI_Init+0x240>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d00a      	beq.n	8008356 <HAL_SPI_Init+0x42>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a84      	ldr	r2, [pc, #528]	; (8008558 <HAL_SPI_Init+0x244>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d005      	beq.n	8008356 <HAL_SPI_Init+0x42>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	2b0f      	cmp	r3, #15
 8008350:	d901      	bls.n	8008356 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e0f7      	b.n	8008546 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fd08 	bl	8008d6c <SPI_GetPacketSize>
 800835c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a7b      	ldr	r2, [pc, #492]	; (8008550 <HAL_SPI_Init+0x23c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d00c      	beq.n	8008382 <HAL_SPI_Init+0x6e>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a79      	ldr	r2, [pc, #484]	; (8008554 <HAL_SPI_Init+0x240>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d007      	beq.n	8008382 <HAL_SPI_Init+0x6e>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a78      	ldr	r2, [pc, #480]	; (8008558 <HAL_SPI_Init+0x244>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d002      	beq.n	8008382 <HAL_SPI_Init+0x6e>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b08      	cmp	r3, #8
 8008380:	d811      	bhi.n	80083a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008386:	4a72      	ldr	r2, [pc, #456]	; (8008550 <HAL_SPI_Init+0x23c>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d009      	beq.n	80083a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a70      	ldr	r2, [pc, #448]	; (8008554 <HAL_SPI_Init+0x240>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d004      	beq.n	80083a0 <HAL_SPI_Init+0x8c>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a6f      	ldr	r2, [pc, #444]	; (8008558 <HAL_SPI_Init+0x244>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d104      	bne.n	80083aa <HAL_SPI_Init+0x96>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b10      	cmp	r3, #16
 80083a4:	d901      	bls.n	80083aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e0cd      	b.n	8008546 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7f8 fe14 	bl	8000fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f022 0201 	bic.w	r2, r2, #1
 80083da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80083e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083f0:	d119      	bne.n	8008426 <HAL_SPI_Init+0x112>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083fa:	d103      	bne.n	8008404 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008400:	2b00      	cmp	r3, #0
 8008402:	d008      	beq.n	8008416 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10c      	bne.n	8008426 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008414:	d107      	bne.n	8008426 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008424:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00f      	beq.n	8008452 <HAL_SPI_Init+0x13e>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	2b06      	cmp	r3, #6
 8008438:	d90b      	bls.n	8008452 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	e007      	b.n	8008462 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008460:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	69da      	ldr	r2, [r3, #28]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846a:	431a      	orrs	r2, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008474:	ea42 0103 	orr.w	r1, r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68da      	ldr	r2, [r3, #12]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	431a      	orrs	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008492:	431a      	orrs	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	431a      	orrs	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	431a      	orrs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	431a      	orrs	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	431a      	orrs	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084c2:	ea42 0103 	orr.w	r1, r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d113      	bne.n	8008502 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008500:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 0201 	bic.w	r2, r2, #1
 8008510:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	40013000 	.word	0x40013000
 8008554:	40003800 	.word	0x40003800
 8008558:	40003c00 	.word	0x40003c00

0800855c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08e      	sub	sp, #56	; 0x38
 8008560:	af02      	add	r7, sp, #8
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3320      	adds	r3, #32
 8008570:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3330      	adds	r3, #48	; 0x30
 8008578:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857e:	095b      	lsrs	r3, r3, #5
 8008580:	b29b      	uxth	r3, r3
 8008582:	3301      	adds	r3, #1
 8008584:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008586:	f7f9 f8e7 	bl	8001758 <HAL_GetTick>
 800858a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800858c:	887b      	ldrh	r3, [r7, #2]
 800858e:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8008590:	887b      	ldrh	r3, [r7, #2]
 8008592:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b01      	cmp	r3, #1
 800859e:	d001      	beq.n	80085a4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80085a0:	2302      	movs	r3, #2
 80085a2:	e310      	b.n	8008bc6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d005      	beq.n	80085b6 <HAL_SPI_TransmitReceive+0x5a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <HAL_SPI_TransmitReceive+0x5a>
 80085b0:	887b      	ldrh	r3, [r7, #2]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e305      	b.n	8008bc6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_SPI_TransmitReceive+0x6c>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e2fe      	b.n	8008bc6 <HAL_SPI_TransmitReceive+0x66a>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2205      	movs	r2, #5
 80085d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	887a      	ldrh	r2, [r7, #2]
 80085ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	887a      	ldrh	r2, [r7, #2]
 80085f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	887a      	ldrh	r2, [r7, #2]
 8008600:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	887a      	ldrh	r2, [r7, #2]
 8008608:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68da      	ldr	r2, [r3, #12]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8008626:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a70      	ldr	r2, [pc, #448]	; (80087f0 <HAL_SPI_TransmitReceive+0x294>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d009      	beq.n	8008646 <HAL_SPI_TransmitReceive+0xea>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a6f      	ldr	r2, [pc, #444]	; (80087f4 <HAL_SPI_TransmitReceive+0x298>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d004      	beq.n	8008646 <HAL_SPI_TransmitReceive+0xea>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a6d      	ldr	r2, [pc, #436]	; (80087f8 <HAL_SPI_TransmitReceive+0x29c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d102      	bne.n	800864c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8008646:	2310      	movs	r3, #16
 8008648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800864a:	e001      	b.n	8008650 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800864c:	2308      	movs	r3, #8
 800864e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	4b69      	ldr	r3, [pc, #420]	; (80087fc <HAL_SPI_TransmitReceive+0x2a0>)
 8008658:	4013      	ands	r3, r2
 800865a:	8879      	ldrh	r1, [r7, #2]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	6812      	ldr	r2, [r2, #0]
 8008660:	430b      	orrs	r3, r1
 8008662:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0201 	orr.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800867c:	d107      	bne.n	800868e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800868c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	2b0f      	cmp	r3, #15
 8008694:	f240 80a2 	bls.w	80087dc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869a:	089b      	lsrs	r3, r3, #2
 800869c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800869e:	e094      	b.n	80087ca <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	f003 0302 	and.w	r3, r3, #2
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d120      	bne.n	80086f0 <HAL_SPI_TransmitReceive+0x194>
 80086ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d01d      	beq.n	80086f0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80086b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80086b6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80086b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ba:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80086bc:	429a      	cmp	r2, r3
 80086be:	d217      	bcs.n	80086f0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6812      	ldr	r2, [r2, #0]
 80086ca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d0:	1d1a      	adds	r2, r3, #4
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086dc:	b29b      	uxth	r3, r3
 80086de:	3b01      	subs	r3, #1
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086ee:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80086f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d065      	beq.n	80087ca <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b01      	cmp	r3, #1
 800870a:	d118      	bne.n	800873e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008714:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008716:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800871c:	1d1a      	adds	r2, r3, #4
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008728:	b29b      	uxth	r3, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	b29a      	uxth	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800873a:	853b      	strh	r3, [r7, #40]	; 0x28
 800873c:	e045      	b.n	80087ca <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800873e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008740:	8bfb      	ldrh	r3, [r7, #30]
 8008742:	429a      	cmp	r2, r3
 8008744:	d21d      	bcs.n	8008782 <HAL_SPI_TransmitReceive+0x226>
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d018      	beq.n	8008782 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008758:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800875a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008760:	1d1a      	adds	r2, r3, #4
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800876c:	b29b      	uxth	r3, r3
 800876e:	3b01      	subs	r3, #1
 8008770:	b29a      	uxth	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800877e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008780:	e023      	b.n	80087ca <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008782:	f7f8 ffe9 	bl	8001758 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800878e:	429a      	cmp	r2, r3
 8008790:	d803      	bhi.n	800879a <HAL_SPI_TransmitReceive+0x23e>
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008798:	d102      	bne.n	80087a0 <HAL_SPI_TransmitReceive+0x244>
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	2b00      	cmp	r3, #0
 800879e:	d114      	bne.n	80087ca <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 fa15 	bl	8008bd0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e1fd      	b.n	8008bc6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80087ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f47f af67 	bne.w	80086a0 <HAL_SPI_TransmitReceive+0x144>
 80087d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f47f af63 	bne.w	80086a0 <HAL_SPI_TransmitReceive+0x144>
 80087da:	e1ce      	b.n	8008b7a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	2b07      	cmp	r3, #7
 80087e2:	f240 81c2 	bls.w	8008b6a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	085b      	lsrs	r3, r3, #1
 80087ea:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80087ec:	e0c9      	b.n	8008982 <HAL_SPI_TransmitReceive+0x426>
 80087ee:	bf00      	nop
 80087f0:	40013000 	.word	0x40013000
 80087f4:	40003800 	.word	0x40003800
 80087f8:	40003c00 	.word	0x40003c00
 80087fc:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b02      	cmp	r3, #2
 800880c:	d11f      	bne.n	800884e <HAL_SPI_TransmitReceive+0x2f2>
 800880e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008810:	2b00      	cmp	r3, #0
 8008812:	d01c      	beq.n	800884e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008814:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008816:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800881c:	429a      	cmp	r2, r3
 800881e:	d216      	bcs.n	800884e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008824:	881a      	ldrh	r2, [r3, #0]
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800882e:	1c9a      	adds	r2, r3, #2
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800883a:	b29b      	uxth	r3, r3
 800883c:	3b01      	subs	r3, #1
 800883e:	b29a      	uxth	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800884c:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008856:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 8092 	beq.w	8008982 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b01      	cmp	r3, #1
 800886a:	d118      	bne.n	800889e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008870:	6a3a      	ldr	r2, [r7, #32]
 8008872:	8812      	ldrh	r2, [r2, #0]
 8008874:	b292      	uxth	r2, r2
 8008876:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800887c:	1c9a      	adds	r2, r3, #2
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008888:	b29b      	uxth	r3, r3
 800888a:	3b01      	subs	r3, #1
 800888c:	b29a      	uxth	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800889a:	853b      	strh	r3, [r7, #40]	; 0x28
 800889c:	e071      	b.n	8008982 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800889e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80088a0:	8bfb      	ldrh	r3, [r7, #30]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d228      	bcs.n	80088f8 <HAL_SPI_TransmitReceive+0x39c>
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d023      	beq.n	80088f8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088b4:	6a3a      	ldr	r2, [r7, #32]
 80088b6:	8812      	ldrh	r2, [r2, #0]
 80088b8:	b292      	uxth	r2, r2
 80088ba:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088c0:	1c9a      	adds	r2, r3, #2
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ca:	6a3a      	ldr	r2, [r7, #32]
 80088cc:	8812      	ldrh	r2, [r2, #0]
 80088ce:	b292      	uxth	r2, r2
 80088d0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088d6:	1c9a      	adds	r2, r3, #2
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	3b02      	subs	r3, #2
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088f4:	853b      	strh	r3, [r7, #40]	; 0x28
 80088f6:	e044      	b.n	8008982 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80088f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d11d      	bne.n	800893a <HAL_SPI_TransmitReceive+0x3de>
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d018      	beq.n	800893a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800890c:	6a3a      	ldr	r2, [r7, #32]
 800890e:	8812      	ldrh	r2, [r2, #0]
 8008910:	b292      	uxth	r2, r2
 8008912:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008918:	1c9a      	adds	r2, r3, #2
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008924:	b29b      	uxth	r3, r3
 8008926:	3b01      	subs	r3, #1
 8008928:	b29a      	uxth	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008936:	853b      	strh	r3, [r7, #40]	; 0x28
 8008938:	e023      	b.n	8008982 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800893a:	f7f8 ff0d 	bl	8001758 <HAL_GetTick>
 800893e:	4602      	mov	r2, r0
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008946:	429a      	cmp	r2, r3
 8008948:	d803      	bhi.n	8008952 <HAL_SPI_TransmitReceive+0x3f6>
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008950:	d102      	bne.n	8008958 <HAL_SPI_TransmitReceive+0x3fc>
 8008952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008954:	2b00      	cmp	r3, #0
 8008956:	d114      	bne.n	8008982 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 f939 	bl	8008bd0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008964:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e121      	b.n	8008bc6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008982:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008984:	2b00      	cmp	r3, #0
 8008986:	f47f af3b 	bne.w	8008800 <HAL_SPI_TransmitReceive+0x2a4>
 800898a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800898c:	2b00      	cmp	r3, #0
 800898e:	f47f af37 	bne.w	8008800 <HAL_SPI_TransmitReceive+0x2a4>
 8008992:	e0f2      	b.n	8008b7a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d121      	bne.n	80089e6 <HAL_SPI_TransmitReceive+0x48a>
 80089a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d01e      	beq.n	80089e6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80089a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80089aa:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80089ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ae:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d218      	bcs.n	80089e6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3320      	adds	r3, #32
 80089be:	7812      	ldrb	r2, [r2, #0]
 80089c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c6:	1c5a      	adds	r2, r3, #1
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	3b01      	subs	r3, #1
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089e4:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80089ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 80ba 	beq.w	8008b6a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d11b      	bne.n	8008a3c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a10:	7812      	ldrb	r2, [r2, #0]
 8008a12:	b2d2      	uxtb	r2, r2
 8008a14:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a38:	853b      	strh	r3, [r7, #40]	; 0x28
 8008a3a:	e096      	b.n	8008b6a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008a3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008a3e:	8bfb      	ldrh	r3, [r7, #30]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d24a      	bcs.n	8008ada <HAL_SPI_TransmitReceive+0x57e>
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d045      	beq.n	8008ada <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a5a:	7812      	ldrb	r2, [r2, #0]
 8008a5c:	b2d2      	uxtb	r2, r2
 8008a5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a64:	1c5a      	adds	r2, r3, #1
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a76:	7812      	ldrb	r2, [r2, #0]
 8008a78:	b2d2      	uxtb	r2, r2
 8008a7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a92:	7812      	ldrb	r2, [r2, #0]
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aae:	7812      	ldrb	r2, [r2, #0]
 8008ab0:	b2d2      	uxtb	r2, r2
 8008ab2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	3b04      	subs	r3, #4
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ad6:	853b      	strh	r3, [r7, #40]	; 0x28
 8008ad8:	e047      	b.n	8008b6a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008ada:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d820      	bhi.n	8008b22 <HAL_SPI_TransmitReceive+0x5c6>
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d01b      	beq.n	8008b22 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008af6:	7812      	ldrb	r2, [r2, #0]
 8008af8:	b2d2      	uxtb	r2, r2
 8008afa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b00:	1c5a      	adds	r2, r3, #1
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b1e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008b20:	e023      	b.n	8008b6a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b22:	f7f8 fe19 	bl	8001758 <HAL_GetTick>
 8008b26:	4602      	mov	r2, r0
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d803      	bhi.n	8008b3a <HAL_SPI_TransmitReceive+0x5de>
 8008b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b38:	d102      	bne.n	8008b40 <HAL_SPI_TransmitReceive+0x5e4>
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d114      	bne.n	8008b6a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 f845 	bl	8008bd0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e02d      	b.n	8008bc6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008b6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f47f af11 	bne.w	8008994 <HAL_SPI_TransmitReceive+0x438>
 8008b72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f47f af0d 	bne.w	8008994 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b80:	2200      	movs	r2, #0
 8008b82:	2108      	movs	r1, #8
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f000 f8c3 	bl	8008d10 <SPI_WaitOnFlagUntilTimeout>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d007      	beq.n	8008ba0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b96:	f043 0220 	orr.w	r2, r3, #32
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 f815 	bl	8008bd0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
  }
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3730      	adds	r7, #48	; 0x30
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop

08008bd0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	699a      	ldr	r2, [r3, #24]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f042 0208 	orr.w	r2, r2, #8
 8008bee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699a      	ldr	r2, [r3, #24]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f042 0210 	orr.w	r2, r2, #16
 8008bfe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0201 	bic.w	r2, r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6919      	ldr	r1, [r3, #16]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	4b3c      	ldr	r3, [pc, #240]	; (8008d0c <SPI_CloseTransfer+0x13c>)
 8008c1c:	400b      	ands	r3, r1
 8008c1e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689a      	ldr	r2, [r3, #8]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008c2e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d014      	beq.n	8008c66 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f003 0320 	and.w	r3, r3, #32
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00f      	beq.n	8008c66 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	699a      	ldr	r2, [r3, #24]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f042 0220 	orr.w	r2, r2, #32
 8008c64:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d014      	beq.n	8008c9c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00f      	beq.n	8008c9c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c82:	f043 0204 	orr.w	r2, r3, #4
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	699a      	ldr	r2, [r3, #24]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c9a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00f      	beq.n	8008cc6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cac:	f043 0201 	orr.w	r2, r3, #1
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	699a      	ldr	r2, [r3, #24]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cc4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00f      	beq.n	8008cf0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cd6:	f043 0208 	orr.w	r2, r3, #8
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	699a      	ldr	r2, [r3, #24]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008d00:	bf00      	nop
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	fffffc90 	.word	0xfffffc90

08008d10 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008d20:	e010      	b.n	8008d44 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d22:	f7f8 fd19 	bl	8001758 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d803      	bhi.n	8008d3a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d38:	d102      	bne.n	8008d40 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e00f      	b.n	8008d64 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	695a      	ldr	r2, [r3, #20]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	bf0c      	ite	eq
 8008d54:	2301      	moveq	r3, #1
 8008d56:	2300      	movne	r3, #0
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d0df      	beq.n	8008d22 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d78:	095b      	lsrs	r3, r3, #5
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	3301      	adds	r3, #1
 8008d84:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	3307      	adds	r3, #7
 8008d8a:	08db      	lsrs	r3, r3, #3
 8008d8c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	fb02 f303 	mul.w	r3, r2, r3
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d121      	bne.n	8008dfa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	4b27      	ldr	r3, [pc, #156]	; (8008e58 <FMC_SDRAM_Init+0xb4>)
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	6851      	ldr	r1, [r2, #4]
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	6892      	ldr	r2, [r2, #8]
 8008dc6:	4311      	orrs	r1, r2
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	68d2      	ldr	r2, [r2, #12]
 8008dcc:	4311      	orrs	r1, r2
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	6912      	ldr	r2, [r2, #16]
 8008dd2:	4311      	orrs	r1, r2
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	6952      	ldr	r2, [r2, #20]
 8008dd8:	4311      	orrs	r1, r2
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	6992      	ldr	r2, [r2, #24]
 8008dde:	4311      	orrs	r1, r2
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	69d2      	ldr	r2, [r2, #28]
 8008de4:	4311      	orrs	r1, r2
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	6a12      	ldr	r2, [r2, #32]
 8008dea:	4311      	orrs	r1, r2
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008df0:	430a      	orrs	r2, r1
 8008df2:	431a      	orrs	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	e026      	b.n	8008e48 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	69d9      	ldr	r1, [r3, #28]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	4319      	orrs	r1, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	430b      	orrs	r3, r1
 8008e12:	431a      	orrs	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	4b0e      	ldr	r3, [pc, #56]	; (8008e58 <FMC_SDRAM_Init+0xb4>)
 8008e1e:	4013      	ands	r3, r2
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	6851      	ldr	r1, [r2, #4]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	6892      	ldr	r2, [r2, #8]
 8008e28:	4311      	orrs	r1, r2
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	68d2      	ldr	r2, [r2, #12]
 8008e2e:	4311      	orrs	r1, r2
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	6912      	ldr	r2, [r2, #16]
 8008e34:	4311      	orrs	r1, r2
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	6952      	ldr	r2, [r2, #20]
 8008e3a:	4311      	orrs	r1, r2
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	6992      	ldr	r2, [r2, #24]
 8008e40:	430a      	orrs	r2, r1
 8008e42:	431a      	orrs	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	ffff8000 	.word	0xffff8000

08008e5c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d128      	bne.n	8008ec0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	1e59      	subs	r1, r3, #1
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	011b      	lsls	r3, r3, #4
 8008e84:	4319      	orrs	r1, r3
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	021b      	lsls	r3, r3, #8
 8008e8e:	4319      	orrs	r1, r3
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	031b      	lsls	r3, r3, #12
 8008e98:	4319      	orrs	r1, r3
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	041b      	lsls	r3, r3, #16
 8008ea2:	4319      	orrs	r1, r3
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	051b      	lsls	r3, r3, #20
 8008eac:	4319      	orrs	r1, r3
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	061b      	lsls	r3, r3, #24
 8008eb6:	430b      	orrs	r3, r1
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	609a      	str	r2, [r3, #8]
 8008ebe:	e02d      	b.n	8008f1c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	689a      	ldr	r2, [r3, #8]
 8008ec4:	4b19      	ldr	r3, [pc, #100]	; (8008f2c <FMC_SDRAM_Timing_Init+0xd0>)
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	68d2      	ldr	r2, [r2, #12]
 8008ecc:	3a01      	subs	r2, #1
 8008ece:	0311      	lsls	r1, r2, #12
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	6952      	ldr	r2, [r2, #20]
 8008ed4:	3a01      	subs	r2, #1
 8008ed6:	0512      	lsls	r2, r2, #20
 8008ed8:	430a      	orrs	r2, r1
 8008eda:	431a      	orrs	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	1e59      	subs	r1, r3, #1
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	011b      	lsls	r3, r3, #4
 8008ef6:	4319      	orrs	r1, r3
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	021b      	lsls	r3, r3, #8
 8008f00:	4319      	orrs	r1, r3
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	041b      	lsls	r3, r3, #16
 8008f0a:	4319      	orrs	r1, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	061b      	lsls	r3, r3, #24
 8008f14:	430b      	orrs	r3, r1
 8008f16:	431a      	orrs	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	ff0f0fff 	.word	0xff0f0fff

08008f30 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	691a      	ldr	r2, [r3, #16]
 8008f40:	4b0c      	ldr	r3, [pc, #48]	; (8008f74 <FMC_SDRAM_SendCommand+0x44>)
 8008f42:	4013      	ands	r3, r2
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	6811      	ldr	r1, [r2, #0]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	6852      	ldr	r2, [r2, #4]
 8008f4c:	4311      	orrs	r1, r2
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	6892      	ldr	r2, [r2, #8]
 8008f52:	3a01      	subs	r2, #1
 8008f54:	0152      	lsls	r2, r2, #5
 8008f56:	4311      	orrs	r1, r2
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	68d2      	ldr	r2, [r2, #12]
 8008f5c:	0252      	lsls	r2, r2, #9
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	431a      	orrs	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	ffc00000 	.word	0xffc00000

08008f78 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	695a      	ldr	r2, [r3, #20]
 8008f86:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8008f88:	4013      	ands	r3, r2
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	0052      	lsls	r2, r2, #1
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	ffffc001 	.word	0xffffc001

08008fa8 <memset>:
 8008fa8:	4402      	add	r2, r0
 8008faa:	4603      	mov	r3, r0
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d100      	bne.n	8008fb2 <memset+0xa>
 8008fb0:	4770      	bx	lr
 8008fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fb6:	e7f9      	b.n	8008fac <memset+0x4>

08008fb8 <__libc_init_array>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	4d0d      	ldr	r5, [pc, #52]	; (8008ff0 <__libc_init_array+0x38>)
 8008fbc:	4c0d      	ldr	r4, [pc, #52]	; (8008ff4 <__libc_init_array+0x3c>)
 8008fbe:	1b64      	subs	r4, r4, r5
 8008fc0:	10a4      	asrs	r4, r4, #2
 8008fc2:	2600      	movs	r6, #0
 8008fc4:	42a6      	cmp	r6, r4
 8008fc6:	d109      	bne.n	8008fdc <__libc_init_array+0x24>
 8008fc8:	4d0b      	ldr	r5, [pc, #44]	; (8008ff8 <__libc_init_array+0x40>)
 8008fca:	4c0c      	ldr	r4, [pc, #48]	; (8008ffc <__libc_init_array+0x44>)
 8008fcc:	f000 f818 	bl	8009000 <_init>
 8008fd0:	1b64      	subs	r4, r4, r5
 8008fd2:	10a4      	asrs	r4, r4, #2
 8008fd4:	2600      	movs	r6, #0
 8008fd6:	42a6      	cmp	r6, r4
 8008fd8:	d105      	bne.n	8008fe6 <__libc_init_array+0x2e>
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fe0:	4798      	blx	r3
 8008fe2:	3601      	adds	r6, #1
 8008fe4:	e7ee      	b.n	8008fc4 <__libc_init_array+0xc>
 8008fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fea:	4798      	blx	r3
 8008fec:	3601      	adds	r6, #1
 8008fee:	e7f2      	b.n	8008fd6 <__libc_init_array+0x1e>
 8008ff0:	08009030 	.word	0x08009030
 8008ff4:	08009030 	.word	0x08009030
 8008ff8:	08009030 	.word	0x08009030
 8008ffc:	08009034 	.word	0x08009034

08009000 <_init>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	bf00      	nop
 8009004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009006:	bc08      	pop	{r3}
 8009008:	469e      	mov	lr, r3
 800900a:	4770      	bx	lr

0800900c <_fini>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	bf00      	nop
 8009010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009012:	bc08      	pop	{r3}
 8009014:	469e      	mov	lr, r3
 8009016:	4770      	bx	lr
