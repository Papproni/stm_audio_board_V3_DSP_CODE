
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .sdram_section 00000000  c0000000  c0000000  000304c4  2**0
                  CONTENTS
  2 .text         000113e0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000134  080116b0  080116b0  000216b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080117e4  080117e4  000217e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080117e8  080117e8  000217e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004c4  24000000  080117ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000027e0  240004c4  08011cb0  000304c4  2**2
                  ALLOC
  8 ._user_heap_stack 00006004  24002ca4  08011cb0  00032ca4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000304c4  2**0
                  CONTENTS, READONLY
 10 .comment      000000b8  00000000  00000000  000304f2  2**0
                  CONTENTS, READONLY
 11 .debug_info   00026702  00000000  00000000  000305aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000061f6  00000000  00000000  00056cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000019a0  00000000  00000000  0005cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000012a6  00000000  00000000  0005e848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000397f2  00000000  00000000  0005faee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028c84  00000000  00000000  000992e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00150b4e  00000000  00000000  000c1f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006e00  00000000  00000000  00212ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000092  00000000  00000000  002198b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000017a3  00000000  00000000  00219946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000070  00000000  00000000  0021b0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240004c4 	.word	0x240004c4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011698 	.word	0x08011698

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240004c8 	.word	0x240004c8
 800030c:	08011698 	.word	0x08011698

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <ad1939_write_reg>:
#include "AD1939_driver.h"


// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af02      	add	r7, sp, #8
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
	int8_t retval = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	73fb      	strb	r3, [r7, #15]
	TXdata[0] = AD1939_Global_Address_Write;
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <ad1939_write_reg+0x4c>)
 80003c6:	2208      	movs	r2, #8
 80003c8:	701a      	strb	r2, [r3, #0]
	TXdata[1] = reg_address;
 80003ca:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <ad1939_write_reg+0x4c>)
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	7053      	strb	r3, [r2, #1]
	TXdata[2] = data;
 80003d0:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <ad1939_write_reg+0x4c>)
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	7093      	strb	r3, [r2, #2]

//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <ad1939_write_reg+0x50>)
 80003d8:	6818      	ldr	r0, [r3, #0]
 80003da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003de:	9300      	str	r3, [sp, #0]
 80003e0:	2303      	movs	r3, #3
 80003e2:	4a08      	ldr	r2, [pc, #32]	; (8000404 <ad1939_write_reg+0x54>)
 80003e4:	4905      	ldr	r1, [pc, #20]	; (80003fc <ad1939_write_reg+0x4c>)
 80003e6:	f00a ff85 	bl	800b2f4 <HAL_SPI_TransmitReceive>
 80003ea:	4603      	mov	r3, r0
 80003ec:	73fb      	strb	r3, [r7, #15]
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 //HAL_Delay(10);
	return retval;
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3710      	adds	r7, #16
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	240004e4 	.word	0x240004e4
 8000400:	240004e0 	.word	0x240004e0
 8000404:	240004e8 	.word	0x240004e8

08000408 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af02      	add	r7, sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <ad1939_pll_locked+0x3c>)
 8000410:	2209      	movs	r2, #9
 8000412:	701a      	strb	r2, [r3, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <ad1939_pll_locked+0x3c>)
 8000416:	2201      	movs	r2, #1
 8000418:	705a      	strb	r2, [r3, #1]
	TXdata[2] = 0b00000100;
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <ad1939_pll_locked+0x3c>)
 800041c:	2204      	movs	r2, #4
 800041e:	709a      	strb	r2, [r3, #2]
	HAL_Delay(10);
 8000420:	200a      	movs	r0, #10
 8000422:	f001 ff43 	bl	80022ac <HAL_Delay>
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <ad1939_pll_locked+0x40>)
 8000428:	6818      	ldr	r0, [r3, #0]
 800042a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2303      	movs	r3, #3
 8000432:	4a06      	ldr	r2, [pc, #24]	; (800044c <ad1939_pll_locked+0x44>)
 8000434:	4903      	ldr	r1, [pc, #12]	; (8000444 <ad1939_pll_locked+0x3c>)
 8000436:	f00a ff5d 	bl	800b2f4 <HAL_SPI_TransmitReceive>
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 return 0;
 800043a:	2300      	movs	r3, #0
}
 800043c:	4618      	mov	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	240004e4 	.word	0x240004e4
 8000448:	240004e0 	.word	0x240004e0
 800044c:	240004e8 	.word	0x240004e8

08000450 <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
    AD1939_spi = hspi_codec;
 8000458:	4a3d      	ldr	r2, [pc, #244]	; (8000550 <ad1939_init+0x100>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6013      	str	r3, [r2, #0]

    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 800045e:	21be      	movs	r1, #190	; 0xbe
 8000460:	2000      	movs	r0, #0
 8000462:	f7ff ffa5 	bl	80003b0 <ad1939_write_reg>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <ad1939_init+0x22>
 800046c:	f04f 33ff 	mov.w	r3, #4294967295
 8000470:	e069      	b.n	8000546 <ad1939_init+0xf6>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 8000472:	2104      	movs	r1, #4
 8000474:	2001      	movs	r0, #1
 8000476:	f7ff ff9b 	bl	80003b0 <ad1939_write_reg>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d002      	beq.n	8000486 <ad1939_init+0x36>
 8000480:	f04f 33ff 	mov.w	r3, #4294967295
 8000484:	e05f      	b.n	8000546 <ad1939_init+0xf6>





    HAL_Delay(100);
 8000486:	2064      	movs	r0, #100	; 0x64
 8000488:	f001 ff10 	bl	80022ac <HAL_Delay>

    if(ad1939_pll_locked()){
 800048c:	f7ff ffbc 	bl	8000408 <ad1939_pll_locked>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b01000000)) return -1;
 8000490:	2140      	movs	r1, #64	; 0x40
 8000492:	2002      	movs	r0, #2
 8000494:	f7ff ff8c 	bl	80003b0 <ad1939_write_reg>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d002      	beq.n	80004a4 <ad1939_init+0x54>
 800049e:	f04f 33ff 	mov.w	r3, #4294967295
 80004a2:	e050      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000100)) return -1; // Slave setup
 80004a4:	2104      	movs	r1, #4
 80004a6:	2003      	movs	r0, #3
 80004a8:	f7ff ff82 	bl	80003b0 <ad1939_write_reg>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d002      	beq.n	80004b8 <ad1939_init+0x68>
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
 80004b6:	e046      	b.n	8000546 <ad1939_init+0xf6>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 80004b8:	2100      	movs	r1, #0
 80004ba:	2004      	movs	r0, #4
 80004bc:	f7ff ff78 	bl	80003b0 <ad1939_write_reg>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <ad1939_init+0x7c>
 80004c6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ca:	e03c      	b.n	8000546 <ad1939_init+0xf6>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 80004cc:	2100      	movs	r1, #0
 80004ce:	2005      	movs	r0, #5
 80004d0:	f7ff ff6e 	bl	80003b0 <ad1939_write_reg>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d002      	beq.n	80004e0 <ad1939_init+0x90>
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	e032      	b.n	8000546 <ad1939_init+0xf6>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 80004e0:	2100      	movs	r1, #0
 80004e2:	2008      	movs	r0, #8
 80004e4:	f7ff ff64 	bl	80003b0 <ad1939_write_reg>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d002      	beq.n	80004f4 <ad1939_init+0xa4>
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295
 80004f2:	e028      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 80004f4:	2100      	movs	r1, #0
 80004f6:	2009      	movs	r0, #9
 80004f8:	f7ff ff5a 	bl	80003b0 <ad1939_write_reg>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <ad1939_init+0xb8>
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	e01e      	b.n	8000546 <ad1939_init+0xf6>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000508:	2100      	movs	r1, #0
 800050a:	200e      	movs	r0, #14
 800050c:	f7ff ff50 	bl	80003b0 <ad1939_write_reg>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <ad1939_init+0xcc>
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	e014      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0b00100000 )) return -1;
 800051c:	2120      	movs	r1, #32
 800051e:	200f      	movs	r0, #15
 8000520:	f7ff ff46 	bl	80003b0 <ad1939_write_reg>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <ad1939_init+0xe0>
 800052a:	f04f 33ff 	mov.w	r3, #4294967295
 800052e:	e00a      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 8000530:	2100      	movs	r1, #0
 8000532:	2010      	movs	r0, #16
 8000534:	f7ff ff3c 	bl	80003b0 <ad1939_write_reg>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d002      	beq.n	8000544 <ad1939_init+0xf4>
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	e000      	b.n	8000546 <ad1939_init+0xf6>



    return 0; // Return 0 if all writes are successful
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	240004e0 	.word	0x240004e0

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <MX_DMA_Init+0x6c>)
 800055c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000560:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <MX_DMA_Init+0x6c>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_DMA_Init+0x6c>)
 800056c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_DMA_Init+0x6c>)
 800057a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800057e:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <MX_DMA_Init+0x6c>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_DMA_Init+0x6c>)
 800058a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	200b      	movs	r0, #11
 800059c:	f001 ff85 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005a0:	200b      	movs	r0, #11
 80005a2:	f001 ff9c 	bl	80024de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2038      	movs	r0, #56	; 0x38
 80005ac:	f001 ff7d 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005b0:	2038      	movs	r0, #56	; 0x38
 80005b2:	f001 ff94 	bl	80024de <HAL_NVIC_EnableIRQ>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	58024400 	.word	0x58024400

080005c4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b090      	sub	sp, #64	; 0x40
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80005ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <MX_FMC_Init+0xcc>)
 80005e0:	4a2c      	ldr	r2, [pc, #176]	; (8000694 <MX_FMC_Init+0xd0>)
 80005e2:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <MX_FMC_Init+0xcc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80005ea:	4b29      	ldr	r3, [pc, #164]	; (8000690 <MX_FMC_Init+0xcc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <MX_FMC_Init+0xcc>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80005f6:	4b26      	ldr	r3, [pc, #152]	; (8000690 <MX_FMC_Init+0xcc>)
 80005f8:	2210      	movs	r2, #16
 80005fa:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MX_FMC_Init+0xcc>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000602:	4b23      	ldr	r3, [pc, #140]	; (8000690 <MX_FMC_Init+0xcc>)
 8000604:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000608:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <MX_FMC_Init+0xcc>)
 800060c:	2200      	movs	r2, #0
 800060e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_FMC_Init+0xcc>)
 8000612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000616:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_FMC_Init+0xcc>)
 800061a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_FMC_Init+0xcc>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000626:	2310      	movs	r3, #16
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 16;
 800062a:	2310      	movs	r3, #16
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 16;
 800062e:	2310      	movs	r3, #16
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 16;
 8000632:	2310      	movs	r3, #16
 8000634:	633b      	str	r3, [r7, #48]	; 0x30
  SdramTiming.WriteRecoveryTime = 16;
 8000636:	2310      	movs	r3, #16
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  SdramTiming.RPDelay = 16;
 800063a:	2310      	movs	r3, #16
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  SdramTiming.RCDDelay = 16;
 800063e:	2310      	movs	r3, #16
 8000640:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	4619      	mov	r1, r3
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <MX_FMC_Init+0xcc>)
 800064a:	f00a fc95 	bl	800af78 <HAL_SDRAM_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000654:	f001 f897 	bl	8001786 <Error_Handler>

//    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2500);


    IS42S16800J_Context_t my_sdram;
    my_sdram.TargetBank  = FMC_SDRAM_CMD_TARGET_BANK1;
 8000658:	2310      	movs	r3, #16
 800065a:	607b      	str	r3, [r7, #4]
    my_sdram.RefreshMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800065c:	2303      	movs	r3, #3
 800065e:	60bb      	str	r3, [r7, #8]
    my_sdram.RefreshRate = REFRESH_COUNT;
 8000660:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8000664:	60fb      	str	r3, [r7, #12]
    my_sdram.CASLatency  = IS42S16800J_CAS_LATENCY_3;
 8000666:	2330      	movs	r3, #48	; 0x30
 8000668:	61bb      	str	r3, [r7, #24]
    my_sdram.OperationMode = IS42S16800J_OPERATING_MODE_STANDARD;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    my_sdram.WriteBurstMode = IS42S16800J_WRITEBURST_MODE_SINGLE;
 800066e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000672:	623b      	str	r3, [r7, #32]
    my_sdram.BurstType 		= IS42S16800J_BURST_TYPE_SEQUENTIAL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
    my_sdram.BurstLength 	= IS42S16800J_BURST_LENGTH_1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]

    IS42S16800J_Init(&hsdram1, &my_sdram);
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4619      	mov	r1, r3
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <MX_FMC_Init+0xcc>)
 8000682:	f000 fcbf 	bl	8001004 <IS42S16800J_Init>
  /* USER CODE END FMC_Init 2 */
}
 8000686:	bf00      	nop
 8000688:	3740      	adds	r7, #64	; 0x40
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	240004ec 	.word	0x240004ec
 8000694:	52004140 	.word	0x52004140

08000698 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	b0b6      	sub	sp, #216	; 0xd8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006ae:	4b5b      	ldr	r3, [pc, #364]	; (800081c <HAL_FMC_MspInit+0x184>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f040 80ae 	bne.w	8000814 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 80006b8:	4b58      	ldr	r3, [pc, #352]	; (800081c <HAL_FMC_MspInit+0x184>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	22b8      	movs	r2, #184	; 0xb8
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f010 f991 	bl	80109ee <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80006cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80006d8:	2300      	movs	r3, #0
 80006da:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	4618      	mov	r0, r3
 80006e2:	f007 fa71 	bl	8007bc8 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80006ec:	f001 f84b 	bl	8001786 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006f0:	4b4b      	ldr	r3, [pc, #300]	; (8000820 <HAL_FMC_MspInit+0x188>)
 80006f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80006f6:	4a4a      	ldr	r2, [pc, #296]	; (8000820 <HAL_FMC_MspInit+0x188>)
 80006f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006fc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000700:	4b47      	ldr	r3, [pc, #284]	; (8000820 <HAL_FMC_MspInit+0x188>)
 8000702:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800070e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000712:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000728:	230c      	movs	r3, #12
 800072a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800072e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000732:	4619      	mov	r1, r3
 8000734:	483b      	ldr	r0, [pc, #236]	; (8000824 <HAL_FMC_MspInit+0x18c>)
 8000736:	f003 ffcd 	bl	80046d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800073a:	230d      	movs	r3, #13
 800073c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000752:	230c      	movs	r3, #12
 8000754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000758:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800075c:	4619      	mov	r1, r3
 800075e:	4832      	ldr	r0, [pc, #200]	; (8000828 <HAL_FMC_MspInit+0x190>)
 8000760:	f003 ffb8 	bl	80046d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000764:	2310      	movs	r3, #16
 8000766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800077c:	230c      	movs	r3, #12
 800077e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000786:	4619      	mov	r1, r3
 8000788:	4828      	ldr	r0, [pc, #160]	; (800082c <HAL_FMC_MspInit+0x194>)
 800078a:	f003 ffa3 	bl	80046d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 800078e:	f248 1311 	movw	r3, #33041	; 0x8111
 8000792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007a8:	230c      	movs	r3, #12
 80007aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007b2:	4619      	mov	r1, r3
 80007b4:	481e      	ldr	r0, [pc, #120]	; (8000830 <HAL_FMC_MspInit+0x198>)
 80007b6:	f003 ff8d 	bl	80046d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80007ba:	f24f 7383 	movw	r3, #63363	; 0xf783
 80007be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007d4:	230c      	movs	r3, #12
 80007d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007de:	4619      	mov	r1, r3
 80007e0:	4814      	ldr	r0, [pc, #80]	; (8000834 <HAL_FMC_MspInit+0x19c>)
 80007e2:	f003 ff77 	bl	80046d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80007ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000800:	230c      	movs	r3, #12
 8000802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000806:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800080a:	4619      	mov	r1, r3
 800080c:	480a      	ldr	r0, [pc, #40]	; (8000838 <HAL_FMC_MspInit+0x1a0>)
 800080e:	f003 ff61 	bl	80046d4 <HAL_GPIO_Init>
 8000812:	e000      	b.n	8000816 <HAL_FMC_MspInit+0x17e>
    return;
 8000814:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000816:	37d8      	adds	r7, #216	; 0xd8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	24000520 	.word	0x24000520
 8000820:	58024400 	.word	0x58024400
 8000824:	58021400 	.word	0x58021400
 8000828:	58020800 	.word	0x58020800
 800082c:	58020000 	.word	0x58020000
 8000830:	58021800 	.word	0x58021800
 8000834:	58021000 	.word	0x58021000
 8000838:	58020c00 	.word	0x58020c00

0800083c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000844:	f7ff ff28 	bl	8000698 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000866:	4b40      	ldr	r3, [pc, #256]	; (8000968 <MX_GPIO_Init+0x118>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	4a3e      	ldr	r2, [pc, #248]	; (8000968 <MX_GPIO_Init+0x118>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000876:	4b3c      	ldr	r3, [pc, #240]	; (8000968 <MX_GPIO_Init+0x118>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087c:	f003 0310 	and.w	r3, r3, #16
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000884:	4b38      	ldr	r3, [pc, #224]	; (8000968 <MX_GPIO_Init+0x118>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088a:	4a37      	ldr	r2, [pc, #220]	; (8000968 <MX_GPIO_Init+0x118>)
 800088c:	f043 0320 	orr.w	r3, r3, #32
 8000890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000894:	4b34      	ldr	r3, [pc, #208]	; (8000968 <MX_GPIO_Init+0x118>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089a:	f003 0320 	and.w	r3, r3, #32
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	4b31      	ldr	r3, [pc, #196]	; (8000968 <MX_GPIO_Init+0x118>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <MX_GPIO_Init+0x118>)
 80008aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b2:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <MX_GPIO_Init+0x118>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_GPIO_Init+0x118>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	4a28      	ldr	r2, [pc, #160]	; (8000968 <MX_GPIO_Init+0x118>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <MX_GPIO_Init+0x118>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_GPIO_Init+0x118>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	4a20      	ldr	r2, [pc, #128]	; (8000968 <MX_GPIO_Init+0x118>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_GPIO_Init+0x118>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_GPIO_Init+0x118>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	4a19      	ldr	r2, [pc, #100]	; (8000968 <MX_GPIO_Init+0x118>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000908:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_GPIO_Init+0x118>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_GPIO_Init+0x118>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	4a11      	ldr	r2, [pc, #68]	; (8000968 <MX_GPIO_Init+0x118>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_GPIO_Init+0x118>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	f003 0308 	and.w	r3, r3, #8
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2120      	movs	r1, #32
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <MX_GPIO_Init+0x11c>)
 800093e:	f004 f871 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000942:	2320      	movs	r3, #32
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094a:	2301      	movs	r3, #1
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_GPIO_Init+0x11c>)
 800095a:	f003 febb 	bl	80046d4 <HAL_GPIO_Init>

}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	58024400 	.word	0x58024400
 800096c:	58021800 	.word	0x58021800

08000970 <set_volumes>:
 		-0.00544064948788215
 };



static void set_volumes(struct octave_effects_st* self){
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	// reset output
	self->output_f32 = 0;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f04f 0200 	mov.w	r2, #0
 800097e:	619a      	str	r2, [r3, #24]

	// calculate the new output defined by the voluem params
	self->output_f32 += self->input_f32 		* self->volumes_st.clean_f32;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	ed93 7a06 	vldr	s14, [r3, #24]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	edd3 6a05 	vldr	s13, [r3, #20]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	edc3 7a06 	vstr	s15, [r3, #24]
	self->output_f32 += self->octave_up_1_f32 	* self->volumes_st.up_1_f32;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	ed93 7a06 	vldr	s14, [r3, #24]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	edd3 6a07 	vldr	s13, [r3, #28]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80009b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	edc3 7a06 	vstr	s15, [r3, #24]
	self->output_f32 += self->octave_down_1_f32 * self->volumes_st.sub_1_f32;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	ed93 7a06 	vldr	s14, [r3, #24]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80009d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <subbandfilter_calculation>:


// SUBBAND FILTER FUNCTION - DIRECT FORM 2 - normalfunction exectime: ~6us
static void subbandfilter_calculation(struct octave_effects_st* self){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  float32_t input_f32=self->input_f32;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	60fb      	str	r3, [r7, #12]
  // set d[n], d[n-1], d[n-2]
  for(int i=0;i<numberofsubbands;i++){
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	e024      	b.n	8000a4a <subbandfilter_calculation+0x5e>
//			  subbandfilter_input[i]	= input_f32;
	  self->subbandfilter_dn2[i]		= self->subbandfilter_dn1[i];
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	33b6      	adds	r3, #182	; 0xb6
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	33ec      	adds	r3, #236	; 0xec
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	440b      	add	r3, r1
 8000a16:	3304      	adds	r3, #4
 8000a18:	601a      	str	r2, [r3, #0]
	  self->subbandfilter_dn1[i]		= self->subbandfilter_dn[i];
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	337e      	adds	r3, #126	; 0x7e
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	4413      	add	r3, r2
 8000a24:	3304      	adds	r3, #4
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	6879      	ldr	r1, [r7, #4]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	33b6      	adds	r3, #182	; 0xb6
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	440b      	add	r3, r1
 8000a32:	601a      	str	r2, [r3, #0]
	  self->subbandfilter_dn[i]		= input_f32;
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	337e      	adds	r3, #126	; 0x7e
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	3304      	adds	r3, #4
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	601a      	str	r2, [r3, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	3301      	adds	r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	2b36      	cmp	r3, #54	; 0x36
 8000a4e:	ddd7      	ble.n	8000a00 <subbandfilter_calculation+0x14>

  }
  // A1 = a1*y[n-1]
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_yn1, self->subbandfilter_A1, numberofsubbands);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f503 6192 	add.w	r1, r3, #1168	; 0x490
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f603 2294 	addw	r2, r3, #2708	; 0xa94
 8000a5c:	2337      	movs	r3, #55	; 0x37
 8000a5e:	4842      	ldr	r0, [pc, #264]	; (8000b68 <subbandfilter_calculation+0x17c>)
 8000a60:	f00f fd52 	bl	8010508 <arm_mult_f32>
  // A2 = a2*y[n-2]
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_yn2, self->subbandfilter_A2, numberofsubbands);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f203 516c 	addw	r1, r3, #1388	; 0x56c
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f503 6237 	add.w	r2, r3, #2928	; 0xb70
 8000a70:	2337      	movs	r3, #55	; 0x37
 8000a72:	483e      	ldr	r0, [pc, #248]	; (8000b6c <subbandfilter_calculation+0x180>)
 8000a74:	f00f fd48 	bl	8010508 <arm_mult_f32>

  // A = A1+A2
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f603 2094 	addw	r0, r3, #2708	; 0xa94
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f503 6137 	add.w	r1, r3, #2928	; 0xb70
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f603 424c 	addw	r2, r3, #3148	; 0xc4c
 8000a8a:	2337      	movs	r3, #55	; 0x37
 8000a8c:	f00f fdf2 	bl	8010674 <arm_add_f32>

  // y_n=b0*d[n]+b1*d[n-1]+b2*d[n-2]

  // B1 = b1*x[n-1]
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_dn1, self->subbandfilter_B1, numberofsubbands);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f503 7136 	add.w	r1, r3, #728	; 0x2d8
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f603 6204 	addw	r2, r3, #3588	; 0xe04
 8000a9c:	2337      	movs	r3, #55	; 0x37
 8000a9e:	4834      	ldr	r0, [pc, #208]	; (8000b70 <subbandfilter_calculation+0x184>)
 8000aa0:	f00f fd32 	bl	8010508 <arm_mult_f32>
  // B2 = b2*x[n-2]
  arm_mult_f32(subbandfilter_b2, self->subbandfilter_dn2, self->subbandfilter_B2, numberofsubbands);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f503 716d 	add.w	r1, r3, #948	; 0x3b4
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f503 626e 	add.w	r2, r3, #3808	; 0xee0
 8000ab0:	2337      	movs	r3, #55	; 0x37
 8000ab2:	4830      	ldr	r0, [pc, #192]	; (8000b74 <subbandfilter_calculation+0x188>)
 8000ab4:	f00f fd28 	bl	8010508 <arm_mult_f32>
  // B1+B2
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f603 6004 	addw	r0, r3, #3588	; 0xe04
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f503 616e 	add.w	r1, r3, #3808	; 0xee0
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f603 72bc 	addw	r2, r3, #4028	; 0xfbc
 8000aca:	2337      	movs	r3, #55	; 0x37
 8000acc:	f00f fdd2 	bl	8010674 <arm_add_f32>

  // B0 = b0*x[n]
  arm_mult_f32(subbandfilter_b0, self->subbandfilter_dn, self->subbandfilter_B0, numberofsubbands);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f603 5228 	addw	r2, r3, #3368	; 0xd28
 8000adc:	2337      	movs	r3, #55	; 0x37
 8000ade:	4826      	ldr	r0, [pc, #152]	; (8000b78 <subbandfilter_calculation+0x18c>)
 8000ae0:	f00f fd12 	bl	8010508 <arm_mult_f32>

  // y=B0+B1+B2
  arm_add_f32(self->subbandfilter_B, self->subbandfilter_B0, self->subbandfilter_B, numberofsubbands);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f603 70bc 	addw	r0, r3, #4028	; 0xfbc
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f603 5128 	addw	r1, r3, #3368	; 0xd28
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f603 72bc 	addw	r2, r3, #4028	; 0xfbc
 8000af6:	2337      	movs	r3, #55	; 0x37
 8000af8:	f00f fdbc 	bl	8010674 <arm_add_f32>

  // y[n]= B - A
  arm_sub_f32(self->subbandfilter_B,self->subbandfilter_A, self->subbandfilter_output, numberofsubbands);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f603 70bc 	addw	r0, r3, #4028	; 0xfbc
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f603 414c 	addw	r1, r3, #3148	; 0xc4c
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8000b0e:	2337      	movs	r3, #55	; 0x37
 8000b10:	f00f fca0 	bl	8010454 <arm_sub_f32>
  for(int i=0;i<numberofsubbands;i++){
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	e01e      	b.n	8000b58 <subbandfilter_calculation+0x16c>
	  self->subbandfilter_yn2[i]		= self->subbandfilter_yn1[i];
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4413      	add	r3, r2
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	440b      	add	r3, r1
 8000b34:	3304      	adds	r3, #4
 8000b36:	601a      	str	r2, [r3, #0]
	  self->subbandfilter_yn1[i]		= self->subbandfilter_output[i];
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	3348      	adds	r3, #72	; 0x48
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	440b      	add	r3, r1
 8000b50:	601a      	str	r2, [r3, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	3301      	adds	r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	2b36      	cmp	r3, #54	; 0x36
 8000b5c:	dddd      	ble.n	8000b1a <subbandfilter_calculation+0x12e>
   }
}
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	24000000 	.word	0x24000000
 8000b6c:	240000dc 	.word	0x240000dc
 8000b70:	24000524 	.word	0x24000524
 8000b74:	24000294 	.word	0x24000294
 8000b78:	240001b8 	.word	0x240001b8

08000b7c <subbandfilter_octave2_calculation>:


void subbandfilter_octave2_calculation(struct octave_effects_st* self){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  float32_t input_f32=self->input_f32;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	60fb      	str	r3, [r7, #12]
  // set d[n], d[n-1], d[n-2]
  for(int i=0;i<numberofsubbands;i++){
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e028      	b.n	8000be2 <subbandfilter_octave2_calculation+0x66>
	  self->subbandfilter_octave2_dn2[i]=self->subbandfilter_octave2_dn1[i];
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	440b      	add	r3, r1
 8000bac:	601a      	str	r2, [r3, #0]
	  self->subbandfilter_octave2_dn1[i]=self->subbandfilter_octave2_dn[i];
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	4413      	add	r3, r2
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	3304      	adds	r3, #4
 8000bca:	601a      	str	r2, [r3, #0]
	  self->subbandfilter_octave2_dn[i] = input_f32;
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	601a      	str	r2, [r3, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2b36      	cmp	r3, #54	; 0x36
 8000be6:	ddd3      	ble.n	8000b90 <subbandfilter_octave2_calculation+0x14>
  }
  // A1 = a1*y[n-1]
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_octave2_yn1, self->subbandfilter_A1, numberofsubbands);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f603 01dc 	addw	r1, r3, #2268	; 0x8dc
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f603 2294 	addw	r2, r3, #2708	; 0xa94
 8000bf4:	2337      	movs	r3, #55	; 0x37
 8000bf6:	4843      	ldr	r0, [pc, #268]	; (8000d04 <subbandfilter_octave2_calculation+0x188>)
 8000bf8:	f00f fc86 	bl	8010508 <arm_mult_f32>
  // A2 = a2*y[n-2]
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_octave2_yn2, self->subbandfilter_A2, numberofsubbands);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f603 11b8 	addw	r1, r3, #2488	; 0x9b8
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f503 6237 	add.w	r2, r3, #2928	; 0xb70
 8000c08:	2337      	movs	r3, #55	; 0x37
 8000c0a:	483f      	ldr	r0, [pc, #252]	; (8000d08 <subbandfilter_octave2_calculation+0x18c>)
 8000c0c:	f00f fc7c 	bl	8010508 <arm_mult_f32>

  // A = A1+A2
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f603 2094 	addw	r0, r3, #2708	; 0xa94
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f503 6137 	add.w	r1, r3, #2928	; 0xb70
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f603 424c 	addw	r2, r3, #3148	; 0xc4c
 8000c22:	2337      	movs	r3, #55	; 0x37
 8000c24:	f00f fd26 	bl	8010674 <arm_add_f32>

  // y_n=b0*d[n]+b1*d[n-1]+b2*d[n-2]

  // B1 = b1*x[n-1]
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_octave2_dn1, self->subbandfilter_B1, numberofsubbands);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f203 7124 	addw	r1, r3, #1828	; 0x724
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f603 6204 	addw	r2, r3, #3588	; 0xe04
 8000c34:	2337      	movs	r3, #55	; 0x37
 8000c36:	4835      	ldr	r0, [pc, #212]	; (8000d0c <subbandfilter_octave2_calculation+0x190>)
 8000c38:	f00f fc66 	bl	8010508 <arm_mult_f32>
  // B2 = b2*x[n-2]
  arm_mult_f32(subbandfilter_b2, self->subbandfilter_octave2_dn2, self->subbandfilter_B2, numberofsubbands);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f503 626e 	add.w	r2, r3, #3808	; 0xee0
 8000c48:	2337      	movs	r3, #55	; 0x37
 8000c4a:	4831      	ldr	r0, [pc, #196]	; (8000d10 <subbandfilter_octave2_calculation+0x194>)
 8000c4c:	f00f fc5c 	bl	8010508 <arm_mult_f32>
  // B1+B2
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f603 6004 	addw	r0, r3, #3588	; 0xe04
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f503 616e 	add.w	r1, r3, #3808	; 0xee0
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f603 72bc 	addw	r2, r3, #4028	; 0xfbc
 8000c62:	2337      	movs	r3, #55	; 0x37
 8000c64:	f00f fd06 	bl	8010674 <arm_add_f32>

  // B0 = b0*x[n]
  arm_mult_f32(subbandfilter_b0, self->subbandfilter_octave2_dn, self->subbandfilter_B0, numberofsubbands);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f503 61c9 	add.w	r1, r3, #1608	; 0x648
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f603 5228 	addw	r2, r3, #3368	; 0xd28
 8000c74:	2337      	movs	r3, #55	; 0x37
 8000c76:	4827      	ldr	r0, [pc, #156]	; (8000d14 <subbandfilter_octave2_calculation+0x198>)
 8000c78:	f00f fc46 	bl	8010508 <arm_mult_f32>

  // y=B0+B1+B2
  arm_add_f32(self->subbandfilter_B, self->subbandfilter_B0, self->subbandfilter_B, numberofsubbands);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f603 70bc 	addw	r0, r3, #4028	; 0xfbc
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f603 5128 	addw	r1, r3, #3368	; 0xd28
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f603 72bc 	addw	r2, r3, #4028	; 0xfbc
 8000c8e:	2337      	movs	r3, #55	; 0x37
 8000c90:	f00f fcf0 	bl	8010674 <arm_add_f32>

  // y[n]= B - A
  arm_sub_f32(self->subbandfilter_B,self->subbandfilter_A, self->subbandfilter_output, numberofsubbands);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f603 70bc 	addw	r0, r3, #4028	; 0xfbc
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f603 414c 	addw	r1, r3, #3148	; 0xc4c
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8000ca6:	2337      	movs	r3, #55	; 0x37
 8000ca8:	f00f fbd4 	bl	8010454 <arm_sub_f32>
  for(int i=0;i<numberofsubbands;i++){
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	e01f      	b.n	8000cf2 <subbandfilter_octave2_calculation+0x176>
	  self->subbandfilter_octave2_yn2[i] 	= self->subbandfilter_octave2_yn1[i];
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	f203 2336 	addw	r3, r3, #566	; 0x236
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	f203 236e 	addw	r3, r3, #622	; 0x26e
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	440b      	add	r3, r1
 8000cce:	601a      	str	r2, [r3, #0]
	  self->subbandfilter_octave2_yn1[i]  = self->subbandfilter_output[i];
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	3348      	adds	r3, #72	; 0x48
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	f203 2336 	addw	r3, r3, #566	; 0x236
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3304      	adds	r3, #4
 8000cea:	601a      	str	r2, [r3, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	2b36      	cmp	r3, #54	; 0x36
 8000cf6:	dddc      	ble.n	8000cb2 <subbandfilter_octave2_calculation+0x136>
   }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	24000000 	.word	0x24000000
 8000d08:	240000dc 	.word	0x240000dc
 8000d0c:	24000524 	.word	0x24000524
 8000d10:	24000294 	.word	0x24000294
 8000d14:	240001b8 	.word	0x240001b8

08000d18 <algorithm_octave_1_up>:

// Calculate the octave 1 HIGHER
static void algorithm_octave_1_up(struct octave_effects_st* self){
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	// TODO
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <algorithm_octave_1_down>:

// Calculate the octave 1 LOWER
static void algorithm_octave_1_down(struct octave_effects_st* self){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	// TODO
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <octave1up>:
static arm_biquad_cascade_df2T_instance_f32 highpass_iir_50hz_octave2;
static volatile float32_t highpass_coeff[5]={0.99538200, -1.99076399, 0.99538200, 1.99074267, -0.99078531};
static volatile float32_t highpass_state[10];


static void octave1up(struct octave_effects_st* self){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	// get absolute values of subbands
	arm_abs_f32(self->subbandfilter_output, subband_absolute_value, numberofsubbands);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000d4e:	2237      	movs	r2, #55	; 0x37
 8000d50:	4909      	ldr	r1, [pc, #36]	; (8000d78 <octave1up+0x38>)
 8000d52:	4618      	mov	r0, r3
 8000d54:	f00f fce8 	bl	8010728 <arm_abs_f32>


	// add the octave subbands together
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up_1);
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <octave1up+0x3c>)
 8000d5a:	2237      	movs	r2, #55	; 0x37
 8000d5c:	4908      	ldr	r1, [pc, #32]	; (8000d80 <octave1up+0x40>)
 8000d5e:	4806      	ldr	r0, [pc, #24]	; (8000d78 <octave1up+0x38>)
 8000d60:	f00f fc2c 	bl	80105bc <arm_dot_prod_f32>

	// filter the DC component out
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz, &octave1_up_1, &octave1_up_filtered, 1);
 8000d64:	2301      	movs	r3, #1
 8000d66:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <octave1up+0x44>)
 8000d68:	4904      	ldr	r1, [pc, #16]	; (8000d7c <octave1up+0x3c>)
 8000d6a:	4807      	ldr	r0, [pc, #28]	; (8000d88 <octave1up+0x48>)
 8000d6c:	f00f f9aa 	bl	80100c4 <arm_biquad_cascade_df2T_f32>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	240006dc 	.word	0x240006dc
 8000d7c:	240007b8 	.word	0x240007b8
 8000d80:	24000600 	.word	0x24000600
 8000d84:	240007bc 	.word	0x240007bc
 8000d88:	240007c0 	.word	0x240007c0

08000d8c <octave2up>:

static void octave2up(struct octave_effects_st* self){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	// get absolute values of subbands
	arm_abs_f32(self->subbandfilter_output, subband_absolute_value, numberofsubbands);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000d9a:	2237      	movs	r2, #55	; 0x37
 8000d9c:	4909      	ldr	r1, [pc, #36]	; (8000dc4 <octave2up+0x38>)
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f00f fcc2 	bl	8010728 <arm_abs_f32>


	// add the octave subbands together
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up_1);
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <octave2up+0x3c>)
 8000da6:	2237      	movs	r2, #55	; 0x37
 8000da8:	4908      	ldr	r1, [pc, #32]	; (8000dcc <octave2up+0x40>)
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <octave2up+0x38>)
 8000dac:	f00f fc06 	bl	80105bc <arm_dot_prod_f32>

	// filter the DC component out
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz_octave2, &octave1_up_1, &octave1_up_filtered, 1);
 8000db0:	2301      	movs	r3, #1
 8000db2:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <octave2up+0x44>)
 8000db4:	4904      	ldr	r1, [pc, #16]	; (8000dc8 <octave2up+0x3c>)
 8000db6:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <octave2up+0x48>)
 8000db8:	f00f f984 	bl	80100c4 <arm_biquad_cascade_df2T_f32>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	240006dc 	.word	0x240006dc
 8000dc8:	240007b8 	.word	0x240007b8
 8000dcc:	24000600 	.word	0x24000600
 8000dd0:	240007bc 	.word	0x240007bc
 8000dd4:	240007cc 	.word	0x240007cc

08000dd8 <callback_octave_effect>:
static int32_t callback_octave_effect(struct octave_effects_st* self,int32_t input_i32){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]

	// 3. return value


	// LEGACY CODE
	self->input_f32 = (float32_t)input_i32;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	ee07 3a90 	vmov	s15, r3
 8000de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	edc3 7a05 	vstr	s15, [r3, #20]
	// +1 octave
	subbandfilter_calculation(self);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff fdfa 	bl	80009ec <subbandfilter_calculation>
	octave1up(self);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ffa1 	bl	8000d40 <octave1up>
	// save result
	self->octave_up_1_f32 = octave1_up_filtered;
 8000dfe:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <callback_octave_effect+0xb0>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	61da      	str	r2, [r3, #28]
//
	// +2 octave
	subbandfilter_octave2_calculation(self);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff feb8 	bl	8000b7c <subbandfilter_octave2_calculation>
	octave2up(self);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ffbd 	bl	8000d8c <octave2up>
	//		 save result
	self->octave_up_2_f32 = octave1_up_filtered;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <callback_octave_effect+0xb0>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	621a      	str	r2, [r3, #32]

	// Write to DAC
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	edd3 7a07 	vldr	s15, [r3, #28]
 8000e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
						(int32_t)self->octave_up_2_f32*self->volumes_st.up_2_f32 +
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	edd3 7a08 	vldr	s15, [r3, #32]
 8000e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8000e4a:	ee37 7a27 	vadd.f32	s14, s14, s15
						(int32_t)(self->input_f32*self->volumes_st.clean_f32);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	edd3 6a05 	vldr	s13, [r3, #20]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
						(int32_t)self->octave_up_2_f32*self->volumes_st.up_2_f32 +
 8000e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e66:	ee77 7a27 	vadd.f32	s15, s14, s15
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	edc3 7a06 	vstr	s15, [r3, #24]

	return self->output_f32;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e7a:	ee17 3a90 	vmov	r3, s15
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	240007bc 	.word	0x240007bc

08000e8c <init_guitar_effect_octave>:


void init_guitar_effect_octave(octave_effects_tst* self){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

	  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000e94:	4b52      	ldr	r3, [pc, #328]	; (8000fe0 <init_guitar_effect_octave+0x154>)
 8000e96:	4a53      	ldr	r2, [pc, #332]	; (8000fe4 <init_guitar_effect_octave+0x158>)
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4853      	ldr	r0, [pc, #332]	; (8000fe8 <init_guitar_effect_octave+0x15c>)
 8000e9c:	f00f face 	bl	801043c <arm_biquad_cascade_df2T_init_f32>
	  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz_octave2, 1, &highpass_coeff, &highpass_state);
 8000ea0:	4b4f      	ldr	r3, [pc, #316]	; (8000fe0 <init_guitar_effect_octave+0x154>)
 8000ea2:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <init_guitar_effect_octave+0x158>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4851      	ldr	r0, [pc, #324]	; (8000fec <init_guitar_effect_octave+0x160>)
 8000ea8:	f00f fac8 	bl	801043c <arm_biquad_cascade_df2T_init_f32>
	// assign function pointers
	self->set_volumes			= set_volumes;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b4e      	ldr	r3, [pc, #312]	; (8000ff0 <init_guitar_effect_octave+0x164>)
 8000eb6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	self->calc_octave_1_up 		= algorithm_octave_1_down;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b4c      	ldr	r3, [pc, #304]	; (8000ff4 <init_guitar_effect_octave+0x168>)
 8000ec4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	self->calc_octave_1_down 	= algorithm_octave_1_up;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b49      	ldr	r3, [pc, #292]	; (8000ff8 <init_guitar_effect_octave+0x16c>)
 8000ed2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	self->callback 				= callback_octave_effect;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b47      	ldr	r3, [pc, #284]	; (8000ffc <init_guitar_effect_octave+0x170>)
 8000ee0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

	self->volumes_st.up_1_f32 = 1;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000eea:	60da      	str	r2, [r3, #12]
	self->volumes_st.up_2_f32 = 1;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ef2:	611a      	str	r2, [r3, #16]
	self->volumes_st.clean_f32      = 1;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000efa:	609a      	str	r2, [r3, #8]
	for(int i=0; i<numberofsubbands;i++){
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	e065      	b.n	8000fce <init_guitar_effect_octave+0x142>
		subband_ones[i] = 1;
 8000f02:	4a3f      	ldr	r2, [pc, #252]	; (8001000 <init_guitar_effect_octave+0x174>)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f0e:	601a      	str	r2, [r3, #0]
		self->subbandfilter_dn2[i]		=	0;
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	33ec      	adds	r3, #236	; 0xec
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
		self->subbandfilter_dn1[i]		=	0;
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	33b6      	adds	r3, #182	; 0xb6
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
		self->subbandfilter_dn[i]		=	0;
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	337e      	adds	r3, #126	; 0x7e
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
		self->subbandfilter_yn1[i] 		= 	0;
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
		self->subbandfilter_yn2[i] 		= 	0;
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	3304      	adds	r3, #4
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]

		self->subbandfilter_octave2_dn[i]		=	0;
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
		self->subbandfilter_octave2_dn1[i]		=	0;
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	3304      	adds	r3, #4
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
		self->subbandfilter_octave2_dn2[i]		=	0;
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
		self->subbandfilter_octave2_yn1[i] 		= 	0;
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f203 2336 	addw	r3, r3, #566	; 0x236
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	3304      	adds	r3, #4
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
		self->subbandfilter_octave2_yn2[i] 		= 	0;
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f203 236e 	addw	r3, r3, #622	; 0x26e
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	for(int i=0; i<numberofsubbands;i++){
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b36      	cmp	r3, #54	; 0x36
 8000fd2:	dd96      	ble.n	8000f02 <init_guitar_effect_octave+0x76>
	}

	// zero out the IIR filter states


}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	240007d8 	.word	0x240007d8
 8000fe4:	24000370 	.word	0x24000370
 8000fe8:	240007c0 	.word	0x240007c0
 8000fec:	240007cc 	.word	0x240007cc
 8000ff0:	08000971 	.word	0x08000971
 8000ff4:	08000d2d 	.word	0x08000d2d
 8000ff8:	08000d19 	.word	0x08000d19
 8000ffc:	08000dd9 	.word	0x08000dd9
 8001000:	24000600 	.word	0x24000600

08001004 <IS42S16800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S16800J_ERROR;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S16800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f832 	bl	8001084 <IS42S16800J_ClockEnable>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d128      	bne.n	8001078 <IS42S16800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S16800J_Delay(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f000 f8e2 	bl	80011f0 <IS42S16800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S16800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f84a 	bl	80010cc <IS42S16800J_Precharge>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d11c      	bne.n	8001078 <IS42S16800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S16800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S16800J_OK)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	6819      	ldr	r1, [r3, #0]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	461a      	mov	r2, r3
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f897 	bl	800117c <IS42S16800J_RefreshMode>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d111      	bne.n	8001078 <IS42S16800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S16800J_ModeRegConfig(Ctx, pRegMode) == IS42S16800J_OK)
 8001054:	6839      	ldr	r1, [r7, #0]
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f85c 	bl	8001114 <IS42S16800J_ModeRegConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10a      	bne.n	8001078 <IS42S16800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S16800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S16800J_OK)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	4619      	mov	r1, r3
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 f8ad 	bl	80011c8 <IS42S16800J_RefreshRate>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <IS42S16800J_Init+0x74>
          {
            ret = IS42S16800J_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8001078:	68fb      	ldr	r3, [r7, #12]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <IS42S16800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_CLK_ENABLE_CMD;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <IS42S16800J_ClockEnable+0x44>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <IS42S16800J_ClockEnable+0x44>)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <IS42S16800J_ClockEnable+0x44>)
 800109c:	2201      	movs	r2, #1
 800109e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <IS42S16800J_ClockEnable+0x44>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 80010a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010aa:	4907      	ldr	r1, [pc, #28]	; (80010c8 <IS42S16800J_ClockEnable+0x44>)
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f009 ff9f 	bl	800aff0 <HAL_SDRAM_SendCommand>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <IS42S16800J_ClockEnable+0x3a>
  {
    return IS42S16800J_ERROR;
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	e000      	b.n	80010c0 <IS42S16800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 80010be:	2300      	movs	r3, #0
  }
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	24000800 	.word	0x24000800

080010cc <IS42S16800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_PALL_CMD;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <IS42S16800J_Precharge+0x44>)
 80010d8:	2202      	movs	r2, #2
 80010da:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <IS42S16800J_Precharge+0x44>)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <IS42S16800J_Precharge+0x44>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <IS42S16800J_Precharge+0x44>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 80010ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f2:	4907      	ldr	r1, [pc, #28]	; (8001110 <IS42S16800J_Precharge+0x44>)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f009 ff7b 	bl	800aff0 <HAL_SDRAM_SendCommand>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <IS42S16800J_Precharge+0x3a>
  {
    return IS42S16800J_ERROR;
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	e000      	b.n	8001108 <IS42S16800J_Precharge+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 8001106:	2300      	movs	r3, #0
  }
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	24000800 	.word	0x24000800

08001114 <IS42S16800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001126:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800112c:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8001132:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001138:	4313      	orrs	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S16800J_LOAD_MODE_CMD;
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <IS42S16800J_ModeRegConfig+0x64>)
 800113e:	2204      	movs	r2, #4
 8001140:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <IS42S16800J_ModeRegConfig+0x64>)
 8001148:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <IS42S16800J_ModeRegConfig+0x64>)
 800114c:	2201      	movs	r2, #1
 800114e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001150:	4a09      	ldr	r2, [pc, #36]	; (8001178 <IS42S16800J_ModeRegConfig+0x64>)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8001156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115a:	4907      	ldr	r1, [pc, #28]	; (8001178 <IS42S16800J_ModeRegConfig+0x64>)
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f009 ff47 	bl	800aff0 <HAL_SDRAM_SendCommand>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <IS42S16800J_ModeRegConfig+0x5a>
  {
    return IS42S16800J_ERROR;
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	e000      	b.n	8001170 <IS42S16800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S16800J_OK;
 800116e:	2300      	movs	r3, #0
  }
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	24000800 	.word	0x24000800

0800117c <IS42S16800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S16800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S16800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S16800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8001188:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <IS42S16800J_RefreshMode+0x48>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800118e:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <IS42S16800J_RefreshMode+0x48>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <IS42S16800J_RefreshMode+0x48>)
 8001196:	2208      	movs	r2, #8
 8001198:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <IS42S16800J_RefreshMode+0x48>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 80011a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a4:	4907      	ldr	r1, [pc, #28]	; (80011c4 <IS42S16800J_RefreshMode+0x48>)
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f009 ff22 	bl	800aff0 <HAL_SDRAM_SendCommand>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <IS42S16800J_RefreshMode+0x3c>
  {
    return IS42S16800J_ERROR;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e000      	b.n	80011ba <IS42S16800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S16800J_OK;
 80011b8:	2300      	movs	r3, #0
  }
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	24000800 	.word	0x24000800

080011c8 <IS42S16800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S16800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80011d2:	6839      	ldr	r1, [r7, #0]
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f009 ff40 	bl	800b05a <HAL_SDRAM_ProgramRefreshRate>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <IS42S16800J_RefreshRate+0x1e>
  {
    return IS42S16800J_ERROR;
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	e000      	b.n	80011e8 <IS42S16800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S16800J_OK;
 80011e6:	2300      	movs	r3, #0
  }
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <IS42S16800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval IS42S16800J_OK
  */
static int32_t IS42S16800J_Delay(uint32_t Delay)
{  
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80011f8:	f001 f84c 	bl	8002294 <HAL_GetTick>
 80011fc:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80011fe:	bf00      	nop
 8001200:	f001 f848 	bl	8002294 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <IS42S16800J_Delay+0x10>
  {
  }
  return IS42S16800J_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_SAI_TxCpltCallback>:
	int32_t out2_i32;
	int32_t out3_i32;
	int32_t out4_i32;
}effects_io_port;

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 0;
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <HAL_SAI_TxCpltCallback+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
//	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
//	SCB_InvalidateDCache_by_Addr(&output_i2s_buffer_au32[8], sizeof(output_i2s_buffer_au32)/2);

	output_i2s_buffer_au32[8+OUT1_DAC_NUM] = effects_io_port.out1_i32>>8;
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <HAL_SAI_TxCpltCallback+0x9c>)
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	121b      	asrs	r3, r3, #8
 8001230:	461a      	mov	r2, r3
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_SAI_TxCpltCallback+0xa0>)
 8001234:	63da      	str	r2, [r3, #60]	; 0x3c
	output_i2s_buffer_au32[8+OUT2_DAC_NUM] = effects_io_port.out2_i32>>8;
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_SAI_TxCpltCallback+0x9c>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	121b      	asrs	r3, r3, #8
 800123c:	461a      	mov	r2, r3
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <HAL_SAI_TxCpltCallback+0xa0>)
 8001240:	639a      	str	r2, [r3, #56]	; 0x38
	output_i2s_buffer_au32[8+OUT3_DAC_NUM] = effects_io_port.out3_i32>>8;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_SAI_TxCpltCallback+0x9c>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	121b      	asrs	r3, r3, #8
 8001248:	461a      	mov	r2, r3
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_SAI_TxCpltCallback+0xa0>)
 800124c:	631a      	str	r2, [r3, #48]	; 0x30
	output_i2s_buffer_au32[8+OUT4_DAC_NUM] = effects_io_port.out4_i32>>8;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_SAI_TxCpltCallback+0x9c>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	461a      	mov	r2, r3
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_SAI_TxCpltCallback+0xa0>)
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_SAI_TxCpltCallback+0xa4>)
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	2320      	movs	r3, #32
 8001260:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	2b00      	cmp	r3, #0
 8001266:	dd1d      	ble.n	80012a4 <HAL_SAI_TxCpltCallback+0x88>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f003 021f 	and.w	r2, r3, #31
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4413      	add	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001278:	f3bf 8f4f 	dsb	sy
}
 800127c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800127e:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <HAL_SAI_TxCpltCallback+0xa8>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	3320      	adds	r3, #32
 800128a:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3b20      	subs	r3, #32
 8001290:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	dcf2      	bgt.n	800127e <HAL_SAI_TxCpltCallback+0x62>
  __ASM volatile ("dsb 0xF":::"memory");
 8001298:	f3bf 8f4f 	dsb	sy
}
 800129c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800129e:	f3bf 8f6f 	isb	sy
}
 80012a2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80012a4:	bf00      	nop
	SCB_CleanDCache_by_Addr(&output_i2s_buffer_au32[8], sizeof(output_i2s_buffer_au32)/2);
}
 80012a6:	bf00      	nop
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	24000811 	.word	0x24000811
 80012b8:	24000894 	.word	0x24000894
 80012bc:	24000854 	.word	0x24000854
 80012c0:	24000874 	.word	0x24000874
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <HAL_SAI_TxHalfCpltCallback>:
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 1;
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <HAL_SAI_TxHalfCpltCallback+0x98>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
//	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
//	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32)/2);

	output_i2s_buffer_au32[OUT1_DAC_NUM] = effects_io_port.out1_i32>>8;
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HAL_SAI_TxHalfCpltCallback+0x9c>)
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	121b      	asrs	r3, r3, #8
 80012dc:	461a      	mov	r2, r3
 80012de:	4b22      	ldr	r3, [pc, #136]	; (8001368 <HAL_SAI_TxHalfCpltCallback+0xa0>)
 80012e0:	61da      	str	r2, [r3, #28]
	output_i2s_buffer_au32[OUT2_DAC_NUM] = effects_io_port.out2_i32>>8;
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_SAI_TxHalfCpltCallback+0x9c>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	121b      	asrs	r3, r3, #8
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <HAL_SAI_TxHalfCpltCallback+0xa0>)
 80012ec:	619a      	str	r2, [r3, #24]
	output_i2s_buffer_au32[OUT3_DAC_NUM] = effects_io_port.out3_i32>>8;
 80012ee:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <HAL_SAI_TxHalfCpltCallback+0x9c>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	121b      	asrs	r3, r3, #8
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_SAI_TxHalfCpltCallback+0xa0>)
 80012f8:	611a      	str	r2, [r3, #16]
	output_i2s_buffer_au32[OUT4_DAC_NUM] = effects_io_port.out4_i32>>8;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_SAI_TxHalfCpltCallback+0x9c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	121b      	asrs	r3, r3, #8
 8001300:	461a      	mov	r2, r3
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_SAI_TxHalfCpltCallback+0xa0>)
 8001304:	615a      	str	r2, [r3, #20]
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_SAI_TxHalfCpltCallback+0xa0>)
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	2320      	movs	r3, #32
 800130c:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	2b00      	cmp	r3, #0
 8001312:	dd1d      	ble.n	8001350 <HAL_SAI_TxHalfCpltCallback+0x88>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f003 021f 	and.w	r2, r3, #31
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001324:	f3bf 8f4f 	dsb	sy
}
 8001328:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800132a:	4a10      	ldr	r2, [pc, #64]	; (800136c <HAL_SAI_TxHalfCpltCallback+0xa4>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	3320      	adds	r3, #32
 8001336:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3b20      	subs	r3, #32
 800133c:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	dcf2      	bgt.n	800132a <HAL_SAI_TxHalfCpltCallback+0x62>
  __ASM volatile ("dsb 0xF":::"memory");
 8001344:	f3bf 8f4f 	dsb	sy
}
 8001348:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800134a:	f3bf 8f6f 	isb	sy
}
 800134e:	bf00      	nop
}
 8001350:	bf00      	nop
	SCB_CleanDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32)/2);
}
 8001352:	bf00      	nop
 8001354:	371c      	adds	r7, #28
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	24000811 	.word	0x24000811
 8001364:	24000894 	.word	0x24000894
 8001368:	24000854 	.word	0x24000854
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <HAL_SAI_RxCpltCallback>:

volatile uint8_t 			ADC_READY_FLAG = 0;

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 0;
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_SAI_RxCpltCallback+0x9c>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
	ADC_READY_FLAG = 1;
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_SAI_RxCpltCallback+0xa0>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_SAI_RxCpltCallback+0xa4>)
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	2320      	movs	r3, #32
 800138a:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	2b00      	cmp	r3, #0
 8001390:	dd1d      	ble.n	80013ce <HAL_SAI_RxCpltCallback+0x5e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80013a2:	f3bf 8f4f 	dsb	sy
}
 80013a6:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80013a8:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_SAI_RxCpltCallback+0xa8>)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3320      	adds	r3, #32
 80013b4:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3b20      	subs	r3, #32
 80013ba:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dcf2      	bgt.n	80013a8 <HAL_SAI_RxCpltCallback+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 80013c2:	f3bf 8f4f 	dsb	sy
}
 80013c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c8:	f3bf 8f6f 	isb	sy
}
 80013cc:	bf00      	nop
}
 80013ce:	bf00      	nop
//	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
//	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));

	SCB_InvalidateDCache_by_Addr(&input_i2s_buffer_au32[8], sizeof(input_i2s_buffer_au32)/2);
	effects_io_port.in1_i32 = input_i2s_buffer_au32[8+IN1_ADC_NUM]<<8;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_SAI_RxCpltCallback+0xac>)
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_SAI_RxCpltCallback+0xb0>)
 80013da:	601a      	str	r2, [r3, #0]
	effects_io_port.in2_i32 = input_i2s_buffer_au32[8+IN2_ADC_NUM]<<8;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_SAI_RxCpltCallback+0xac>)
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_SAI_RxCpltCallback+0xb0>)
 80013e6:	605a      	str	r2, [r3, #4]
	effects_io_port.in3_i32 = input_i2s_buffer_au32[8+IN3_ADC_NUM]<<8;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_SAI_RxCpltCallback+0xac>)
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_SAI_RxCpltCallback+0xb0>)
 80013f2:	609a      	str	r2, [r3, #8]
	effects_io_port.in4_i32 = input_i2s_buffer_au32[8+IN4_ADC_NUM]<<8;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_SAI_RxCpltCallback+0xac>)
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_SAI_RxCpltCallback+0xb0>)
 80013fe:	60da      	str	r2, [r3, #12]

//	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
//	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	24000810 	.word	0x24000810
 8001410:	240008b4 	.word	0x240008b4
 8001414:	24000834 	.word	0x24000834
 8001418:	e000ed00 	.word	0xe000ed00
 800141c:	24000814 	.word	0x24000814
 8001420:	24000894 	.word	0x24000894

08001424 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 1;
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <HAL_SAI_RxHalfCpltCallback+0x9c>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
	ADC_READY_FLAG = 1;
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_SAI_RxHalfCpltCallback+0xa0>)
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <HAL_SAI_RxHalfCpltCallback+0xa4>)
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	2320      	movs	r3, #32
 800143e:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	dd1d      	ble.n	8001482 <HAL_SAI_RxHalfCpltCallback+0x5e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f003 021f 	and.w	r2, r3, #31
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001456:	f3bf 8f4f 	dsb	sy
}
 800145a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800145c:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <HAL_SAI_RxHalfCpltCallback+0xa8>)
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	3320      	adds	r3, #32
 8001468:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3b20      	subs	r3, #32
 800146e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	dcf2      	bgt.n	800145c <HAL_SAI_RxHalfCpltCallback+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8001476:	f3bf 8f4f 	dsb	sy
}
 800147a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800147c:	f3bf 8f6f 	isb	sy
}
 8001480:	bf00      	nop
}
 8001482:	bf00      	nop
//	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
//	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32)/2);
	effects_io_port.in1_i32 = input_i2s_buffer_au32[IN1_ADC_NUM]<<8;
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_SAI_RxHalfCpltCallback+0xa4>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	461a      	mov	r2, r3
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_SAI_RxHalfCpltCallback+0xac>)
 800148e:	601a      	str	r2, [r3, #0]
	effects_io_port.in2_i32 = input_i2s_buffer_au32[IN2_ADC_NUM]<<8;
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_SAI_RxHalfCpltCallback+0xa4>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	461a      	mov	r2, r3
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_SAI_RxHalfCpltCallback+0xac>)
 800149a:	605a      	str	r2, [r3, #4]
	effects_io_port.in3_i32 = input_i2s_buffer_au32[IN3_ADC_NUM]<<8;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_SAI_RxHalfCpltCallback+0xa4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_SAI_RxHalfCpltCallback+0xac>)
 80014a6:	609a      	str	r2, [r3, #8]
	effects_io_port.in4_i32 = input_i2s_buffer_au32[IN4_ADC_NUM]<<8;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_SAI_RxHalfCpltCallback+0xa4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <HAL_SAI_RxHalfCpltCallback+0xac>)
 80014b2:	60da      	str	r2, [r3, #12]

//	SCB_CleanDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));

}
 80014b4:	bf00      	nop
 80014b6:	371c      	adds	r7, #28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	24000810 	.word	0x24000810
 80014c4:	240008b4 	.word	0x240008b4
 80014c8:	24000814 	.word	0x24000814
 80014cc:	e000ed00 	.word	0xe000ed00
 80014d0:	24000894 	.word	0x24000894

080014d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014da:	4b50      	ldr	r3, [pc, #320]	; (800161c <main+0x148>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d11b      	bne.n	800151e <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80014e6:	f3bf 8f4f 	dsb	sy
}
 80014ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ec:	f3bf 8f6f 	isb	sy
}
 80014f0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014f2:	4b4a      	ldr	r3, [pc, #296]	; (800161c <main+0x148>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014fa:	f3bf 8f4f 	dsb	sy
}
 80014fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001500:	f3bf 8f6f 	isb	sy
}
 8001504:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001506:	4b45      	ldr	r3, [pc, #276]	; (800161c <main+0x148>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	4a44      	ldr	r2, [pc, #272]	; (800161c <main+0x148>)
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001512:	f3bf 8f4f 	dsb	sy
}
 8001516:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001518:	f3bf 8f6f 	isb	sy
}
 800151c:	e000      	b.n	8001520 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800151e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001520:	4b3e      	ldr	r3, [pc, #248]	; (800161c <main+0x148>)
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d138      	bne.n	800159e <main+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800152c:	4b3b      	ldr	r3, [pc, #236]	; (800161c <main+0x148>)
 800152e:	2200      	movs	r2, #0
 8001530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001534:	f3bf 8f4f 	dsb	sy
}
 8001538:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800153a:	4b38      	ldr	r3, [pc, #224]	; (800161c <main+0x148>)
 800153c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001540:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	0b5b      	lsrs	r3, r3, #13
 8001546:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800154a:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	08db      	lsrs	r3, r3, #3
 8001550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001554:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	015a      	lsls	r2, r3, #5
 800155a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800155e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001564:	492d      	ldr	r1, [pc, #180]	; (800161c <main+0x148>)
 8001566:	4313      	orrs	r3, r2
 8001568:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	1e5a      	subs	r2, r3, #1
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ef      	bne.n	8001556 <main+0x82>
    } while(sets-- != 0U);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	60ba      	str	r2, [r7, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e5      	bne.n	800154c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001580:	f3bf 8f4f 	dsb	sy
}
 8001584:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <main+0x148>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	4a24      	ldr	r2, [pc, #144]	; (800161c <main+0x148>)
 800158c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001590:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001592:	f3bf 8f4f 	dsb	sy
}
 8001596:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001598:	f3bf 8f6f 	isb	sy
}
 800159c:	e000      	b.n	80015a0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800159e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a0:	f000 fdf2 	bl	8002188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a4:	f000 f84c 	bl	8001640 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015a8:	f000 f8ba 	bl	8001720 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ac:	f7ff f950 	bl	8000850 <MX_GPIO_Init>
  MX_DMA_Init();
 80015b0:	f7fe ffd0 	bl	8000554 <MX_DMA_Init>
  MX_SAI1_Init();
 80015b4:	f000 fa16 	bl	80019e4 <MX_SAI1_Init>
  MX_SPI1_Init();
 80015b8:	f000 fb5a 	bl	8001c70 <MX_SPI1_Init>
  MX_FMC_Init();
 80015bc:	f7ff f802 	bl	80005c4 <MX_FMC_Init>
  MX_OCTOSPI1_Init();
 80015c0:	f000 f8e6 	bl	8001790 <MX_OCTOSPI1_Init>
  MX_USB_DEVICE_Init();
 80015c4:	f00e f900 	bl	800f7c8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // init SAI interface
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, output_i2s_buffer_au32, 	16);
 80015c8:	2210      	movs	r2, #16
 80015ca:	4915      	ldr	r1, [pc, #84]	; (8001620 <main+0x14c>)
 80015cc:	4815      	ldr	r0, [pc, #84]	; (8001624 <main+0x150>)
 80015ce:	f009 f92d 	bl	800a82c <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, input_i2s_buffer_au32, 	16);
 80015d2:	2210      	movs	r2, #16
 80015d4:	4914      	ldr	r1, [pc, #80]	; (8001628 <main+0x154>)
 80015d6:	4815      	ldr	r0, [pc, #84]	; (800162c <main+0x158>)
 80015d8:	f009 f9de 	bl	800a998 <HAL_SAI_Receive_DMA>

  // init CODEC
	ad1939_init(&hspi1);
 80015dc:	4814      	ldr	r0, [pc, #80]	; (8001630 <main+0x15c>)
 80015de:	f7fe ff37 	bl	8000450 <ad1939_init>

//	init_guitar_effect_delay(&delay_effect);

	init_guitar_effect_octave(&octave_effects_st);
 80015e2:	4814      	ldr	r0, [pc, #80]	; (8001634 <main+0x160>)
 80015e4:	f7ff fc52 	bl	8000e8c <init_guitar_effect_octave>
//	AUDIO_Init();
//	JumpToBootloader();
		// FLASH TESTING END
  while (1)
  {
	  if(ADC_READY_FLAG){
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <main+0x164>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0fa      	beq.n	80015e8 <main+0x114>
		  ADC_READY_FLAG = 0;
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <main+0x164>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
	  //	  effects_io_port.out2_i32 = effects_io_port.in2_i32;
	  //	  effects_io_port.out3_i32 = effects_io_port.in3_i32;
	  //	  effects_io_port.out4_i32 = effects_io_port.in4_i32;

	  // LOOP1
	  effects_io_port.out1_i32 = octave_effects_st.callback(&octave_effects_st,effects_io_port.in1_i32/2);
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <main+0x160>)
 80015fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fe:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <main+0x168>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	da00      	bge.n	800160c <main+0x138>
 800160a:	3301      	adds	r3, #1
 800160c:	105b      	asrs	r3, r3, #1
 800160e:	4619      	mov	r1, r3
 8001610:	4808      	ldr	r0, [pc, #32]	; (8001634 <main+0x160>)
 8001612:	4790      	blx	r2
 8001614:	4603      	mov	r3, r0
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <main+0x168>)
 8001618:	6113      	str	r3, [r2, #16]
	  if(ADC_READY_FLAG){
 800161a:	e7e5      	b.n	80015e8 <main+0x114>
 800161c:	e000ed00 	.word	0xe000ed00
 8001620:	24000854 	.word	0x24000854
 8001624:	240019c0 	.word	0x240019c0
 8001628:	24000814 	.word	0x24000814
 800162c:	24001a58 	.word	0x24001a58
 8001630:	24001be4 	.word	0x24001be4
 8001634:	240008b8 	.word	0x240008b8
 8001638:	240008b4 	.word	0x240008b4
 800163c:	24000894 	.word	0x24000894

08001640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b09c      	sub	sp, #112	; 0x70
 8001644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	224c      	movs	r2, #76	; 0x4c
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f00f f9cd 	bl	80109ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2220      	movs	r2, #32
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f00f f9c7 	bl	80109ee <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001660:	2002      	movs	r0, #2
 8001662:	f005 fb17 	bl	8006c94 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <SystemClock_Config+0xdc>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	4a2b      	ldr	r2, [pc, #172]	; (800171c <SystemClock_Config+0xdc>)
 8001670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001674:	6193      	str	r3, [r2, #24]
 8001676:	4b29      	ldr	r3, [pc, #164]	; (800171c <SystemClock_Config+0xdc>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001682:	bf00      	nop
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <SystemClock_Config+0xdc>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800168c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001690:	d1f8      	bne.n	8001684 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001692:	2321      	movs	r3, #33	; 0x21
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800169c:	2301      	movs	r3, #1
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a0:	2302      	movs	r3, #2
 80016a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a4:	2302      	movs	r3, #2
 80016a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80016a8:	2302      	movs	r3, #2
 80016aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80016ac:	232c      	movs	r3, #44	; 0x2c
 80016ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80016bc:	230c      	movs	r3, #12
 80016be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4618      	mov	r0, r3
 80016ce:	f005 fb2b 	bl	8006d28 <HAL_RCC_OscConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016d8:	f000 f855 	bl	8001786 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	233f      	movs	r3, #63	; 0x3f
 80016de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e0:	2303      	movs	r3, #3
 80016e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016e8:	2308      	movs	r3, #8
 80016ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016ec:	2340      	movs	r3, #64	; 0x40
 80016ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016f0:	2340      	movs	r3, #64	; 0x40
 80016f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016fa:	2340      	movs	r3, #64	; 0x40
 80016fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2103      	movs	r1, #3
 8001702:	4618      	mov	r0, r3
 8001704:	f005 feea 	bl	80074dc <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800170e:	f000 f83a 	bl	8001786 <Error_Handler>
  }
}
 8001712:	bf00      	nop
 8001714:	3770      	adds	r7, #112	; 0x70
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	58024800 	.word	0x58024800

08001720 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0ae      	sub	sp, #184	; 0xb8
 8001724:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001726:	463b      	mov	r3, r7
 8001728:	22b8      	movs	r2, #184	; 0xb8
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f00f f95e 	bl	80109ee <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 8001732:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 800173e:	2302      	movs	r3, #2
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 8001742:	230f      	movs	r3, #15
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001746:	2302      	movs	r3, #2
 8001748:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800174a:	2302      	movs	r3, #2
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800174e:	2302      	movs	r3, #2
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001752:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001756:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001758:	2300      	movs	r3, #0
 800175a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 800175c:	f640 3386 	movw	r3, #2950	; 0xb86
 8001760:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8001762:	2302      	movs	r3, #2
 8001764:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176c:	463b      	mov	r3, r7
 800176e:	4618      	mov	r0, r3
 8001770:	f006 fa2a 	bl	8007bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 800177a:	f000 f804 	bl	8001786 <Error_Handler>
  }
}
 800177e:	bf00      	nop
 8001780:	37b8      	adds	r7, #184	; 0xb8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800178a:	b672      	cpsid	i
}
 800178c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178e:	e7fe      	b.n	800178e <Error_Handler+0x8>

08001790 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001796:	463b      	mov	r3, r7
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80017a6:	4b28      	ldr	r3, [pc, #160]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017a8:	4a28      	ldr	r2, [pc, #160]	; (800184c <MX_OCTOSPI1_Init+0xbc>)
 80017aa:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 80017ac:	4b26      	ldr	r3, [pc, #152]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017ae:	2204      	movs	r2, #4
 80017b0:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80017b2:	4b25      	ldr	r3, [pc, #148]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017c0:	2218      	movs	r2, #24
 80017c2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80017d6:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 4;
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017de:	2204      	movs	r2, #4
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017f8:	2208      	movs	r2, #8
 80017fa:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 8001804:	2200      	movs	r2, #0
 8001806:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001808:	480f      	ldr	r0, [pc, #60]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 800180a:	f003 f925 	bl	8004a58 <HAL_OSPI_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8001814:	f7ff ffb7 	bl	8001786 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001818:	2301      	movs	r3, #1
 800181a:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 800181c:	2301      	movs	r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001820:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001824:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001826:	463b      	mov	r3, r7
 8001828:	f241 3288 	movw	r2, #5000	; 0x1388
 800182c:	4619      	mov	r1, r3
 800182e:	4806      	ldr	r0, [pc, #24]	; (8001848 <MX_OCTOSPI1_Init+0xb8>)
 8001830:	f003 f9de 	bl	8004bf0 <HAL_OSPIM_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 800183a:	f7ff ffa4 	bl	8001786 <Error_Handler>
//	sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
//
//	HAL_OSPI_Command(&hospi1, &sCommand, 1000);
  /* USER CODE END OCTOSPI1_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	24001964 	.word	0x24001964
 800184c:	52005000 	.word	0x52005000

08001850 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0ba      	sub	sp, #232	; 0xe8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001868:	f107 0318 	add.w	r3, r7, #24
 800186c:	22b8      	movs	r2, #184	; 0xb8
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f00f f8bc 	bl	80109ee <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a56      	ldr	r2, [pc, #344]	; (80019d4 <HAL_OSPI_MspInit+0x184>)
 800187c:	4293      	cmp	r3, r2
 800187e:	f040 80a5 	bne.w	80019cc <HAL_OSPI_MspInit+0x17c>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001882:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 800188e:	2300      	movs	r3, #0
 8001890:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001892:	f107 0318 	add.w	r3, r7, #24
 8001896:	4618      	mov	r0, r3
 8001898:	f006 f996 	bl	8007bc8 <HAL_RCCEx_PeriphCLKConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 80018a2:	f7ff ff70 	bl	8001786 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80018a6:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <HAL_OSPI_MspInit+0x188>)
 80018a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018ac:	4a4a      	ldr	r2, [pc, #296]	; (80019d8 <HAL_OSPI_MspInit+0x188>)
 80018ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018b6:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <HAL_OSPI_MspInit+0x188>)
 80018b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80018c4:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <HAL_OSPI_MspInit+0x188>)
 80018c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018ca:	4a43      	ldr	r2, [pc, #268]	; (80019d8 <HAL_OSPI_MspInit+0x188>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018d4:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <HAL_OSPI_MspInit+0x188>)
 80018d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_OSPI_MspInit+0x188>)
 80018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e8:	4a3b      	ldr	r2, [pc, #236]	; (80019d8 <HAL_OSPI_MspInit+0x188>)
 80018ea:	f043 0310 	orr.w	r3, r3, #16
 80018ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_OSPI_MspInit+0x188>)
 80018f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001900:	4b35      	ldr	r3, [pc, #212]	; (80019d8 <HAL_OSPI_MspInit+0x188>)
 8001902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001906:	4a34      	ldr	r2, [pc, #208]	; (80019d8 <HAL_OSPI_MspInit+0x188>)
 8001908:	f043 0320 	orr.w	r3, r3, #32
 800190c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001910:	4b31      	ldr	r3, [pc, #196]	; (80019d8 <HAL_OSPI_MspInit+0x188>)
 8001912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001916:	f003 0320 	and.w	r3, r3, #32
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> OCTOSPIM_P1_IO0
    PF9     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800191e:	2304      	movs	r3, #4
 8001920:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001936:	2309      	movs	r3, #9
 8001938:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001940:	4619      	mov	r1, r3
 8001942:	4826      	ldr	r0, [pc, #152]	; (80019dc <HAL_OSPI_MspInit+0x18c>)
 8001944:	f002 fec6 	bl	80046d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001948:	f44f 7350 	mov.w	r3, #832	; 0x340
 800194c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001962:	230a      	movs	r3, #10
 8001964:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001968:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800196c:	4619      	mov	r1, r3
 800196e:	481c      	ldr	r0, [pc, #112]	; (80019e0 <HAL_OSPI_MspInit+0x190>)
 8001970:	f002 feb0 	bl	80046d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001978:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800198e:	2309      	movs	r3, #9
 8001990:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001994:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001998:	4619      	mov	r1, r3
 800199a:	4811      	ldr	r0, [pc, #68]	; (80019e0 <HAL_OSPI_MspInit+0x190>)
 800199c:	f002 fe9a 	bl	80046d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 80019ba:	230b      	movs	r3, #11
 80019bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_OSPI_MspInit+0x18c>)
 80019c8:	f002 fe84 	bl	80046d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 80019cc:	bf00      	nop
 80019ce:	37e8      	adds	r7, #232	; 0xe8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	52005000 	.word	0x52005000
 80019d8:	58024400 	.word	0x58024400
 80019dc:	58021000 	.word	0x58021000
 80019e0:	58021400 	.word	0x58021400

080019e4 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <MX_SAI1_Init+0xb0>)
 80019ea:	4a2b      	ldr	r2, [pc, #172]	; (8001a98 <MX_SAI1_Init+0xb4>)
 80019ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80019ee:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <MX_SAI1_Init+0xb0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <MX_SAI1_Init+0xb0>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <MX_SAI1_Init+0xb0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <MX_SAI1_Init+0xb0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <MX_SAI1_Init+0xb0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <MX_SAI1_Init+0xb0>)
 8001a0e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001a12:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <MX_SAI1_Init+0xb0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <MX_SAI1_Init+0xb0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <MX_SAI1_Init+0xb0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <MX_SAI1_Init+0xb0>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	2202      	movs	r2, #2
 8001a30:	2100      	movs	r1, #0
 8001a32:	4818      	ldr	r0, [pc, #96]	; (8001a94 <MX_SAI1_Init+0xb0>)
 8001a34:	f008 fcae 	bl	800a394 <HAL_SAI_InitProtocol>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8001a3e:	f7ff fea2 	bl	8001786 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_SAI1_Init+0xb8>)
 8001a44:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <MX_SAI1_Init+0xbc>)
 8001a46:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <MX_SAI1_Init+0xb8>)
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <MX_SAI1_Init+0xb8>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_SAI1_Init+0xb8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <MX_SAI1_Init+0xb8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_SAI1_Init+0xb8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <MX_SAI1_Init+0xb8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_SAI1_Init+0xb8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <MX_SAI1_Init+0xb8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001a78:	2308      	movs	r3, #8
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4807      	ldr	r0, [pc, #28]	; (8001a9c <MX_SAI1_Init+0xb8>)
 8001a80:	f008 fc88 	bl	800a394 <HAL_SAI_InitProtocol>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8001a8a:	f7ff fe7c 	bl	8001786 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	240019c0 	.word	0x240019c0
 8001a98:	40015804 	.word	0x40015804
 8001a9c:	24001a58 	.word	0x24001a58
 8001aa0:	40015824 	.word	0x40015824

08001aa4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a66      	ldr	r2, [pc, #408]	; (8001c4c <HAL_SAI_MspInit+0x1a8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d160      	bne.n	8001b78 <HAL_SAI_MspInit+0xd4>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001ab6:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_SAI_MspInit+0x1ac>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10e      	bne.n	8001adc <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001abe:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <HAL_SAI_MspInit+0x1b0>)
 8001ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ac4:	4a63      	ldr	r2, [pc, #396]	; (8001c54 <HAL_SAI_MspInit+0x1b0>)
 8001ac6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ace:	4b61      	ldr	r3, [pc, #388]	; (8001c54 <HAL_SAI_MspInit+0x1b0>)
 8001ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001adc:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_SAI_MspInit+0x1ac>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	4a5b      	ldr	r2, [pc, #364]	; (8001c50 <HAL_SAI_MspInit+0x1ac>)
 8001ae4:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001ae6:	2370      	movs	r3, #112	; 0x70
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001af6:	2306      	movs	r3, #6
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4855      	ldr	r0, [pc, #340]	; (8001c58 <HAL_SAI_MspInit+0x1b4>)
 8001b02:	f002 fde7 	bl	80046d4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8001b06:	4b55      	ldr	r3, [pc, #340]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b08:	4a55      	ldr	r2, [pc, #340]	; (8001c60 <HAL_SAI_MspInit+0x1bc>)
 8001b0a:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b0e:	2257      	movs	r2, #87	; 0x57
 8001b10:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b12:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b14:	2240      	movs	r2, #64	; 0x40
 8001b16:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b24:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b26:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b2c:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b2e:	4b4b      	ldr	r3, [pc, #300]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b34:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001b36:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b3c:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b44:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b46:	4b45      	ldr	r3, [pc, #276]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001b4c:	4843      	ldr	r0, [pc, #268]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b4e:	f000 fce1 	bl	8002514 <HAL_DMA_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8001b58:	f7ff fe15 	bl	8001786 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a3f      	ldr	r2, [pc, #252]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001b64:	4a3d      	ldr	r2, [pc, #244]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a3b      	ldr	r2, [pc, #236]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001b72:	4a3a      	ldr	r2, [pc, #232]	; (8001c5c <HAL_SAI_MspInit+0x1b8>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a39      	ldr	r2, [pc, #228]	; (8001c64 <HAL_SAI_MspInit+0x1c0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d160      	bne.n	8001c44 <HAL_SAI_MspInit+0x1a0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <HAL_SAI_MspInit+0x1ac>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10e      	bne.n	8001ba8 <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_SAI_MspInit+0x1b0>)
 8001b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b90:	4a30      	ldr	r2, [pc, #192]	; (8001c54 <HAL_SAI_MspInit+0x1b0>)
 8001b92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b9a:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <HAL_SAI_MspInit+0x1b0>)
 8001b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001ba8:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <HAL_SAI_MspInit+0x1ac>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	4a28      	ldr	r2, [pc, #160]	; (8001c50 <HAL_SAI_MspInit+0x1ac>)
 8001bb0:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4822      	ldr	r0, [pc, #136]	; (8001c58 <HAL_SAI_MspInit+0x1b4>)
 8001bce:	f002 fd81 	bl	80046d4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 8001bd2:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001bd4:	4a25      	ldr	r2, [pc, #148]	; (8001c6c <HAL_SAI_MspInit+0x1c8>)
 8001bd6:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001bda:	2258      	movs	r2, #88	; 0x58
 8001bdc:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be4:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bf0:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001bf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf8:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001bfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c00:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c08:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001c0c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c10:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001c18:	4813      	ldr	r0, [pc, #76]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001c1a:	f000 fc7b 	bl	8002514 <HAL_DMA_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 8001c24:	f7ff fdaf 	bl	8001786 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_SAI_MspInit+0x1c4>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	; 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40015804 	.word	0x40015804
 8001c50:	24001be0 	.word	0x24001be0
 8001c54:	58024400 	.word	0x58024400
 8001c58:	58021000 	.word	0x58021000
 8001c5c:	24001af0 	.word	0x24001af0
 8001c60:	40020010 	.word	0x40020010
 8001c64:	40015824 	.word	0x40015824
 8001c68:	24001b68 	.word	0x24001b68
 8001c6c:	40020410 	.word	0x40020410

08001c70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001c76:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <MX_SPI1_Init+0xa8>)
 8001c78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001c7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c82:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001c9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ca0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001ca4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001ca8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <MX_SPI1_Init+0xa4>)
 8001d02:	f009 f9d3 	bl	800b0ac <HAL_SPI_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d0c:	f7ff fd3b 	bl	8001786 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	24001be4 	.word	0x24001be4
 8001d18:	40013000 	.word	0x40013000

08001d1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	; 0x30
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a3a      	ldr	r2, [pc, #232]	; (8001e24 <HAL_SPI_MspInit+0x108>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d16d      	bne.n	8001e1a <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d44:	4a38      	ldr	r2, [pc, #224]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001d46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d4e:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5c:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d62:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d80:	4a29      	ldr	r2, [pc, #164]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001d82:	f043 0308 	orr.w	r3, r3, #8
 8001d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d8a:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d98:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9e:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <HAL_SPI_MspInit+0x10c>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 8001db6:	f248 0340 	movw	r3, #32832	; 0x8040
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dc8:	2305      	movs	r3, #5
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4816      	ldr	r0, [pc, #88]	; (8001e2c <HAL_SPI_MspInit+0x110>)
 8001dd4:	f002 fc7e 	bl	80046d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001de8:	2305      	movs	r3, #5
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	480f      	ldr	r0, [pc, #60]	; (8001e30 <HAL_SPI_MspInit+0x114>)
 8001df4:	f002 fc6e 	bl	80046d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001df8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	4619      	mov	r1, r3
 8001e14:	4807      	ldr	r0, [pc, #28]	; (8001e34 <HAL_SPI_MspInit+0x118>)
 8001e16:	f002 fc5d 	bl	80046d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	3730      	adds	r7, #48	; 0x30
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40013000 	.word	0x40013000
 8001e28:	58024400 	.word	0x58024400
 8001e2c:	58020000 	.word	0x58020000
 8001e30:	58020c00 	.word	0x58020c00
 8001e34:	58021800 	.word	0x58021800

08001e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_MspInit+0x30>)
 8001e40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e44:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <HAL_MspInit+0x30>)
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_MspInit+0x30>)
 8001e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	58024400 	.word	0x58024400

08001e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e70:	e7fe      	b.n	8001e70 <NMI_Handler+0x4>

08001e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <HardFault_Handler+0x4>

08001e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <MemManage_Handler+0x4>

08001e7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <BusFault_Handler+0x4>

08001e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <UsageFault_Handler+0x4>

08001e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb8:	f000 f9d8 	bl	800226c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <DMA1_Stream0_IRQHandler+0x10>)
 8001ec6:	f001 f8e7 	bl	8003098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	24001af0 	.word	0x24001af0

08001ed4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <DMA2_Stream0_IRQHandler+0x10>)
 8001eda:	f001 f8dd 	bl	8003098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	24001b68 	.word	0x24001b68

08001ee8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <OTG_HS_IRQHandler+0x10>)
 8001eee:	f003 fdd5 	bl	8005a9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	24002250 	.word	0x24002250

08001efc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e00a      	b.n	8001f24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f0e:	f3af 8000 	nop.w
 8001f12:	4601      	mov	r1, r0
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	60ba      	str	r2, [r7, #8]
 8001f1a:	b2ca      	uxtb	r2, r1
 8001f1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf0      	blt.n	8001f0e <_read+0x12>
  }

  return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e009      	b.n	8001f5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	60ba      	str	r2, [r7, #8]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbf1      	blt.n	8001f48 <_write+0x12>
  }
  return len;
 8001f64:	687b      	ldr	r3, [r7, #4]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_close>:

int _close(int file)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f96:	605a      	str	r2, [r3, #4]
  return 0;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <_isatty>:

int _isatty(int file)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <_sbrk+0x5c>)
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <_sbrk+0x60>)
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <_sbrk+0x64>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	; (8002040 <_sbrk+0x68>)
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <_sbrk+0x64>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	429a      	cmp	r2, r3
 8002006:	d207      	bcs.n	8002018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002008:	f00e fd40 	bl	8010a8c <__errno>
 800200c:	4603      	mov	r3, r0
 800200e:	220c      	movs	r2, #12
 8002010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e009      	b.n	800202c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	4a05      	ldr	r2, [pc, #20]	; (800203c <_sbrk+0x64>)
 8002028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	24050000 	.word	0x24050000
 8002038:	00004000 	.word	0x00004000
 800203c:	24001c6c 	.word	0x24001c6c
 8002040:	24002ca8 	.word	0x24002ca8

08002044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002048:	4b32      	ldr	r3, [pc, #200]	; (8002114 <SystemInit+0xd0>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	4a31      	ldr	r2, [pc, #196]	; (8002114 <SystemInit+0xd0>)
 8002050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <SystemInit+0xd4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	2b06      	cmp	r3, #6
 8002062:	d807      	bhi.n	8002074 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <SystemInit+0xd4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f023 030f 	bic.w	r3, r3, #15
 800206c:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <SystemInit+0xd4>)
 800206e:	f043 0307 	orr.w	r3, r3, #7
 8002072:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002074:	4b29      	ldr	r3, [pc, #164]	; (800211c <SystemInit+0xd8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a28      	ldr	r2, [pc, #160]	; (800211c <SystemInit+0xd8>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002080:	4b26      	ldr	r3, [pc, #152]	; (800211c <SystemInit+0xd8>)
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <SystemInit+0xd8>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4924      	ldr	r1, [pc, #144]	; (800211c <SystemInit+0xd8>)
 800208c:	4b24      	ldr	r3, [pc, #144]	; (8002120 <SystemInit+0xdc>)
 800208e:	4013      	ands	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002092:	4b21      	ldr	r3, [pc, #132]	; (8002118 <SystemInit+0xd4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <SystemInit+0xd4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 030f 	bic.w	r3, r3, #15
 80020a6:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <SystemInit+0xd4>)
 80020a8:	f043 0307 	orr.w	r3, r3, #7
 80020ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <SystemInit+0xd8>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <SystemInit+0xd8>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <SystemInit+0xd8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80020c0:	4b16      	ldr	r3, [pc, #88]	; (800211c <SystemInit+0xd8>)
 80020c2:	4a18      	ldr	r2, [pc, #96]	; (8002124 <SystemInit+0xe0>)
 80020c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <SystemInit+0xd8>)
 80020c8:	4a17      	ldr	r2, [pc, #92]	; (8002128 <SystemInit+0xe4>)
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <SystemInit+0xd8>)
 80020ce:	4a17      	ldr	r2, [pc, #92]	; (800212c <SystemInit+0xe8>)
 80020d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <SystemInit+0xd8>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <SystemInit+0xd8>)
 80020da:	4a14      	ldr	r2, [pc, #80]	; (800212c <SystemInit+0xe8>)
 80020dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <SystemInit+0xd8>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <SystemInit+0xd8>)
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <SystemInit+0xe8>)
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <SystemInit+0xd8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <SystemInit+0xd8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a09      	ldr	r2, [pc, #36]	; (800211c <SystemInit+0xd8>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <SystemInit+0xd8>)
 80020fe:	2200      	movs	r2, #0
 8002100:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <SystemInit+0xec>)
 8002104:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002108:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00
 8002118:	52002000 	.word	0x52002000
 800211c:	58024400 	.word	0x58024400
 8002120:	eaf6ed7f 	.word	0xeaf6ed7f
 8002124:	02020200 	.word	0x02020200
 8002128:	01ff0000 	.word	0x01ff0000
 800212c:	01010280 	.word	0x01010280
 8002130:	52004000 	.word	0x52004000

08002134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800216c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002138:	f7ff ff84 	bl	8002044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800213c:	480c      	ldr	r0, [pc, #48]	; (8002170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800213e:	490d      	ldr	r1, [pc, #52]	; (8002174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002144:	e002      	b.n	800214c <LoopCopyDataInit>

08002146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214a:	3304      	adds	r3, #4

0800214c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800214c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002150:	d3f9      	bcc.n	8002146 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002154:	4c0a      	ldr	r4, [pc, #40]	; (8002180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002158:	e001      	b.n	800215e <LoopFillZerobss>

0800215a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800215c:	3204      	adds	r2, #4

0800215e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002160:	d3fb      	bcc.n	800215a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002162:	f00e fc99 	bl	8010a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002166:	f7ff f9b5 	bl	80014d4 <main>
  bx  lr
 800216a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800216c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002170:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002174:	240004c4 	.word	0x240004c4
  ldr r2, =_sidata
 8002178:	080117ec 	.word	0x080117ec
  ldr r2, =_sbss
 800217c:	240004c4 	.word	0x240004c4
  ldr r4, =_ebss
 8002180:	24002ca4 	.word	0x24002ca4

08002184 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <ADC3_IRQHandler>
	...

08002188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800218e:	2003      	movs	r0, #3
 8002190:	f000 f980 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002194:	f005 fb58 	bl	8007848 <HAL_RCC_GetSysClockFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_Init+0x68>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	4913      	ldr	r1, [pc, #76]	; (80021f4 <HAL_Init+0x6c>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
 80021b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_Init+0x68>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <HAL_Init+0x6c>)
 80021bc:	5cd3      	ldrb	r3, [r2, r3]
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <HAL_Init+0x70>)
 80021ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021cc:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <HAL_Init+0x74>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021d2:	200f      	movs	r0, #15
 80021d4:	f000 f814 	bl	8002200 <HAL_InitTick>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e002      	b.n	80021e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021e2:	f7ff fe29 	bl	8001e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	58024400 	.word	0x58024400
 80021f4:	08011798 	.word	0x08011798
 80021f8:	24000388 	.word	0x24000388
 80021fc:	24000384 	.word	0x24000384

08002200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_InitTick+0x60>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e021      	b.n	8002258 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <HAL_InitTick+0x64>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_InitTick+0x60>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002222:	fbb3 f3f1 	udiv	r3, r3, r1
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f965 	bl	80024fa <HAL_SYSTICK_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e00e      	b.n	8002258 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b0f      	cmp	r3, #15
 800223e:	d80a      	bhi.n	8002256 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002240:	2200      	movs	r2, #0
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f000 f92f 	bl	80024aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800224c:	4a06      	ldr	r2, [pc, #24]	; (8002268 <HAL_InitTick+0x68>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	24000390 	.word	0x24000390
 8002264:	24000384 	.word	0x24000384
 8002268:	2400038c 	.word	0x2400038c

0800226c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_IncTick+0x20>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_IncTick+0x24>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4413      	add	r3, r2
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_IncTick+0x24>)
 800227e:	6013      	str	r3, [r2, #0]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	24000390 	.word	0x24000390
 8002290:	24001c70 	.word	0x24001c70

08002294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_GetTick+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	24001c70 	.word	0x24001c70

080022ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff ffee 	bl	8002294 <HAL_GetTick>
 80022b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d005      	beq.n	80022d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_Delay+0x44>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022d2:	bf00      	nop
 80022d4:	f7ff ffde 	bl	8002294 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d8f7      	bhi.n	80022d4 <HAL_Delay+0x28>
  {
  }
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	24000390 	.word	0x24000390

080022f4 <__NVIC_SetPriorityGrouping>:
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <__NVIC_SetPriorityGrouping+0x40>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 800231e:	4313      	orrs	r3, r2
 8002320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002322:	4a04      	ldr	r2, [pc, #16]	; (8002334 <__NVIC_SetPriorityGrouping+0x40>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60d3      	str	r3, [r2, #12]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00
 8002338:	05fa0000 	.word	0x05fa0000

0800233c <__NVIC_GetPriorityGrouping>:
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	; (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f7ff ff8e 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff29 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024b8:	f7ff ff40 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	6978      	ldr	r0, [r7, #20]
 80024c4:	f7ff ff90 	bl	80023e8 <NVIC_EncodePriority>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff5f 	bl	8002394 <__NVIC_SetPriority>
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff33 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ffa4 	bl	8002450 <SysTick_Config>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff feba 	bl	8002294 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e312      	b.n	8002b52 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a66      	ldr	r2, [pc, #408]	; (80026cc <HAL_DMA_Init+0x1b8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d04a      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a65      	ldr	r2, [pc, #404]	; (80026d0 <HAL_DMA_Init+0x1bc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d045      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a63      	ldr	r2, [pc, #396]	; (80026d4 <HAL_DMA_Init+0x1c0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d040      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a62      	ldr	r2, [pc, #392]	; (80026d8 <HAL_DMA_Init+0x1c4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d03b      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a60      	ldr	r2, [pc, #384]	; (80026dc <HAL_DMA_Init+0x1c8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d036      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a5f      	ldr	r2, [pc, #380]	; (80026e0 <HAL_DMA_Init+0x1cc>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d031      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a5d      	ldr	r2, [pc, #372]	; (80026e4 <HAL_DMA_Init+0x1d0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02c      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a5c      	ldr	r2, [pc, #368]	; (80026e8 <HAL_DMA_Init+0x1d4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d027      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a5a      	ldr	r2, [pc, #360]	; (80026ec <HAL_DMA_Init+0x1d8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d022      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a59      	ldr	r2, [pc, #356]	; (80026f0 <HAL_DMA_Init+0x1dc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d01d      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a57      	ldr	r2, [pc, #348]	; (80026f4 <HAL_DMA_Init+0x1e0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d018      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a56      	ldr	r2, [pc, #344]	; (80026f8 <HAL_DMA_Init+0x1e4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d013      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a54      	ldr	r2, [pc, #336]	; (80026fc <HAL_DMA_Init+0x1e8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00e      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a53      	ldr	r2, [pc, #332]	; (8002700 <HAL_DMA_Init+0x1ec>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d009      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a51      	ldr	r2, [pc, #324]	; (8002704 <HAL_DMA_Init+0x1f0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d004      	beq.n	80025cc <HAL_DMA_Init+0xb8>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a50      	ldr	r2, [pc, #320]	; (8002708 <HAL_DMA_Init+0x1f4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d101      	bne.n	80025d0 <HAL_DMA_Init+0xbc>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <HAL_DMA_Init+0xbe>
 80025d0:	2300      	movs	r3, #0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 813c 	beq.w	8002850 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a37      	ldr	r2, [pc, #220]	; (80026cc <HAL_DMA_Init+0x1b8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d04a      	beq.n	8002688 <HAL_DMA_Init+0x174>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a36      	ldr	r2, [pc, #216]	; (80026d0 <HAL_DMA_Init+0x1bc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d045      	beq.n	8002688 <HAL_DMA_Init+0x174>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a34      	ldr	r2, [pc, #208]	; (80026d4 <HAL_DMA_Init+0x1c0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d040      	beq.n	8002688 <HAL_DMA_Init+0x174>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a33      	ldr	r2, [pc, #204]	; (80026d8 <HAL_DMA_Init+0x1c4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d03b      	beq.n	8002688 <HAL_DMA_Init+0x174>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a31      	ldr	r2, [pc, #196]	; (80026dc <HAL_DMA_Init+0x1c8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d036      	beq.n	8002688 <HAL_DMA_Init+0x174>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a30      	ldr	r2, [pc, #192]	; (80026e0 <HAL_DMA_Init+0x1cc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d031      	beq.n	8002688 <HAL_DMA_Init+0x174>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a2e      	ldr	r2, [pc, #184]	; (80026e4 <HAL_DMA_Init+0x1d0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02c      	beq.n	8002688 <HAL_DMA_Init+0x174>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a2d      	ldr	r2, [pc, #180]	; (80026e8 <HAL_DMA_Init+0x1d4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d027      	beq.n	8002688 <HAL_DMA_Init+0x174>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <HAL_DMA_Init+0x1d8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d022      	beq.n	8002688 <HAL_DMA_Init+0x174>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2a      	ldr	r2, [pc, #168]	; (80026f0 <HAL_DMA_Init+0x1dc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d01d      	beq.n	8002688 <HAL_DMA_Init+0x174>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a28      	ldr	r2, [pc, #160]	; (80026f4 <HAL_DMA_Init+0x1e0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d018      	beq.n	8002688 <HAL_DMA_Init+0x174>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <HAL_DMA_Init+0x1e4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <HAL_DMA_Init+0x174>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a25      	ldr	r2, [pc, #148]	; (80026fc <HAL_DMA_Init+0x1e8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00e      	beq.n	8002688 <HAL_DMA_Init+0x174>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a24      	ldr	r2, [pc, #144]	; (8002700 <HAL_DMA_Init+0x1ec>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_DMA_Init+0x174>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a22      	ldr	r2, [pc, #136]	; (8002704 <HAL_DMA_Init+0x1f0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_DMA_Init+0x174>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a21      	ldr	r2, [pc, #132]	; (8002708 <HAL_DMA_Init+0x1f4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d108      	bne.n	800269a <HAL_DMA_Init+0x186>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e007      	b.n	80026aa <HAL_DMA_Init+0x196>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0201 	bic.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026aa:	e02f      	b.n	800270c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ac:	f7ff fdf2 	bl	8002294 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d928      	bls.n	800270c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2203      	movs	r2, #3
 80026c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e242      	b.n	8002b52 <HAL_DMA_Init+0x63e>
 80026cc:	40020010 	.word	0x40020010
 80026d0:	40020028 	.word	0x40020028
 80026d4:	40020040 	.word	0x40020040
 80026d8:	40020058 	.word	0x40020058
 80026dc:	40020070 	.word	0x40020070
 80026e0:	40020088 	.word	0x40020088
 80026e4:	400200a0 	.word	0x400200a0
 80026e8:	400200b8 	.word	0x400200b8
 80026ec:	40020410 	.word	0x40020410
 80026f0:	40020428 	.word	0x40020428
 80026f4:	40020440 	.word	0x40020440
 80026f8:	40020458 	.word	0x40020458
 80026fc:	40020470 	.word	0x40020470
 8002700:	40020488 	.word	0x40020488
 8002704:	400204a0 	.word	0x400204a0
 8002708:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1c8      	bne.n	80026ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4b83      	ldr	r3, [pc, #524]	; (8002934 <HAL_DMA_Init+0x420>)
 8002726:	4013      	ands	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002732:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	2b04      	cmp	r3, #4
 800275e:	d107      	bne.n	8002770 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	4313      	orrs	r3, r2
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b28      	cmp	r3, #40	; 0x28
 8002776:	d903      	bls.n	8002780 <HAL_DMA_Init+0x26c>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b2e      	cmp	r3, #46	; 0x2e
 800277e:	d91f      	bls.n	80027c0 <HAL_DMA_Init+0x2ac>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b3e      	cmp	r3, #62	; 0x3e
 8002786:	d903      	bls.n	8002790 <HAL_DMA_Init+0x27c>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b42      	cmp	r3, #66	; 0x42
 800278e:	d917      	bls.n	80027c0 <HAL_DMA_Init+0x2ac>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b46      	cmp	r3, #70	; 0x46
 8002796:	d903      	bls.n	80027a0 <HAL_DMA_Init+0x28c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b48      	cmp	r3, #72	; 0x48
 800279e:	d90f      	bls.n	80027c0 <HAL_DMA_Init+0x2ac>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b4e      	cmp	r3, #78	; 0x4e
 80027a6:	d903      	bls.n	80027b0 <HAL_DMA_Init+0x29c>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b52      	cmp	r3, #82	; 0x52
 80027ae:	d907      	bls.n	80027c0 <HAL_DMA_Init+0x2ac>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b73      	cmp	r3, #115	; 0x73
 80027b6:	d905      	bls.n	80027c4 <HAL_DMA_Init+0x2b0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b77      	cmp	r3, #119	; 0x77
 80027be:	d801      	bhi.n	80027c4 <HAL_DMA_Init+0x2b0>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_DMA_Init+0x2b2>
 80027c4:	2300      	movs	r3, #0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f023 0307 	bic.w	r3, r3, #7
 80027e8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d117      	bne.n	800282c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00e      	beq.n	800282c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f001 fdd6 	bl	80043c0 <DMA_CheckFifoParam>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2240      	movs	r2, #64	; 0x40
 800281e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e192      	b.n	8002b52 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f001 fd11 	bl	800425c <DMA_CalcBaseAndBitshift>
 800283a:	4603      	mov	r3, r0
 800283c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	223f      	movs	r2, #63	; 0x3f
 8002848:	409a      	lsls	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	e0c8      	b.n	80029e2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a38      	ldr	r2, [pc, #224]	; (8002938 <HAL_DMA_Init+0x424>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d022      	beq.n	80028a0 <HAL_DMA_Init+0x38c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a37      	ldr	r2, [pc, #220]	; (800293c <HAL_DMA_Init+0x428>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d01d      	beq.n	80028a0 <HAL_DMA_Init+0x38c>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a35      	ldr	r2, [pc, #212]	; (8002940 <HAL_DMA_Init+0x42c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d018      	beq.n	80028a0 <HAL_DMA_Init+0x38c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a34      	ldr	r2, [pc, #208]	; (8002944 <HAL_DMA_Init+0x430>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d013      	beq.n	80028a0 <HAL_DMA_Init+0x38c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a32      	ldr	r2, [pc, #200]	; (8002948 <HAL_DMA_Init+0x434>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00e      	beq.n	80028a0 <HAL_DMA_Init+0x38c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a31      	ldr	r2, [pc, #196]	; (800294c <HAL_DMA_Init+0x438>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d009      	beq.n	80028a0 <HAL_DMA_Init+0x38c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a2f      	ldr	r2, [pc, #188]	; (8002950 <HAL_DMA_Init+0x43c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_DMA_Init+0x38c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2e      	ldr	r2, [pc, #184]	; (8002954 <HAL_DMA_Init+0x440>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_DMA_Init+0x390>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_DMA_Init+0x392>
 80028a4:	2300      	movs	r3, #0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8092 	beq.w	80029d0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a21      	ldr	r2, [pc, #132]	; (8002938 <HAL_DMA_Init+0x424>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d021      	beq.n	80028fa <HAL_DMA_Init+0x3e6>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a20      	ldr	r2, [pc, #128]	; (800293c <HAL_DMA_Init+0x428>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d01c      	beq.n	80028fa <HAL_DMA_Init+0x3e6>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <HAL_DMA_Init+0x42c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d017      	beq.n	80028fa <HAL_DMA_Init+0x3e6>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <HAL_DMA_Init+0x430>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d012      	beq.n	80028fa <HAL_DMA_Init+0x3e6>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <HAL_DMA_Init+0x434>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00d      	beq.n	80028fa <HAL_DMA_Init+0x3e6>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1a      	ldr	r2, [pc, #104]	; (800294c <HAL_DMA_Init+0x438>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d008      	beq.n	80028fa <HAL_DMA_Init+0x3e6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a18      	ldr	r2, [pc, #96]	; (8002950 <HAL_DMA_Init+0x43c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d003      	beq.n	80028fa <HAL_DMA_Init+0x3e6>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a17      	ldr	r2, [pc, #92]	; (8002954 <HAL_DMA_Init+0x440>)
 80028f8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2202      	movs	r2, #2
 80028fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_DMA_Init+0x444>)
 8002916:	4013      	ands	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d01c      	beq.n	800295c <HAL_DMA_Init+0x448>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b80      	cmp	r3, #128	; 0x80
 8002928:	d102      	bne.n	8002930 <HAL_DMA_Init+0x41c>
 800292a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800292e:	e016      	b.n	800295e <HAL_DMA_Init+0x44a>
 8002930:	2300      	movs	r3, #0
 8002932:	e014      	b.n	800295e <HAL_DMA_Init+0x44a>
 8002934:	fe10803f 	.word	0xfe10803f
 8002938:	58025408 	.word	0x58025408
 800293c:	5802541c 	.word	0x5802541c
 8002940:	58025430 	.word	0x58025430
 8002944:	58025444 	.word	0x58025444
 8002948:	58025458 	.word	0x58025458
 800294c:	5802546c 	.word	0x5802546c
 8002950:	58025480 	.word	0x58025480
 8002954:	58025494 	.word	0x58025494
 8002958:	fffe000f 	.word	0xfffe000f
 800295c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68d2      	ldr	r2, [r2, #12]
 8002962:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002964:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800296c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002974:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800297c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002984:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800298c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b6e      	ldr	r3, [pc, #440]	; (8002b5c <HAL_DMA_Init+0x648>)
 80029a4:	4413      	add	r3, r2
 80029a6:	4a6e      	ldr	r2, [pc, #440]	; (8002b60 <HAL_DMA_Init+0x64c>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	009a      	lsls	r2, r3, #2
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f001 fc51 	bl	800425c <DMA_CalcBaseAndBitshift>
 80029ba:	4603      	mov	r3, r0
 80029bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	2201      	movs	r2, #1
 80029c8:	409a      	lsls	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	e008      	b.n	80029e2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2203      	movs	r2, #3
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0b7      	b.n	8002b52 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a5f      	ldr	r2, [pc, #380]	; (8002b64 <HAL_DMA_Init+0x650>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d072      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a5d      	ldr	r2, [pc, #372]	; (8002b68 <HAL_DMA_Init+0x654>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d06d      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a5c      	ldr	r2, [pc, #368]	; (8002b6c <HAL_DMA_Init+0x658>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d068      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a5a      	ldr	r2, [pc, #360]	; (8002b70 <HAL_DMA_Init+0x65c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d063      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a59      	ldr	r2, [pc, #356]	; (8002b74 <HAL_DMA_Init+0x660>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d05e      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a57      	ldr	r2, [pc, #348]	; (8002b78 <HAL_DMA_Init+0x664>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d059      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a56      	ldr	r2, [pc, #344]	; (8002b7c <HAL_DMA_Init+0x668>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d054      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a54      	ldr	r2, [pc, #336]	; (8002b80 <HAL_DMA_Init+0x66c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d04f      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a53      	ldr	r2, [pc, #332]	; (8002b84 <HAL_DMA_Init+0x670>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d04a      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a51      	ldr	r2, [pc, #324]	; (8002b88 <HAL_DMA_Init+0x674>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d045      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a50      	ldr	r2, [pc, #320]	; (8002b8c <HAL_DMA_Init+0x678>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d040      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a4e      	ldr	r2, [pc, #312]	; (8002b90 <HAL_DMA_Init+0x67c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d03b      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a4d      	ldr	r2, [pc, #308]	; (8002b94 <HAL_DMA_Init+0x680>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d036      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a4b      	ldr	r2, [pc, #300]	; (8002b98 <HAL_DMA_Init+0x684>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d031      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a4a      	ldr	r2, [pc, #296]	; (8002b9c <HAL_DMA_Init+0x688>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d02c      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a48      	ldr	r2, [pc, #288]	; (8002ba0 <HAL_DMA_Init+0x68c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d027      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a47      	ldr	r2, [pc, #284]	; (8002ba4 <HAL_DMA_Init+0x690>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d022      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a45      	ldr	r2, [pc, #276]	; (8002ba8 <HAL_DMA_Init+0x694>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d01d      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a44      	ldr	r2, [pc, #272]	; (8002bac <HAL_DMA_Init+0x698>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d018      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a42      	ldr	r2, [pc, #264]	; (8002bb0 <HAL_DMA_Init+0x69c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d013      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a41      	ldr	r2, [pc, #260]	; (8002bb4 <HAL_DMA_Init+0x6a0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00e      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a3f      	ldr	r2, [pc, #252]	; (8002bb8 <HAL_DMA_Init+0x6a4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d009      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a3e      	ldr	r2, [pc, #248]	; (8002bbc <HAL_DMA_Init+0x6a8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d004      	beq.n	8002ad2 <HAL_DMA_Init+0x5be>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a3c      	ldr	r2, [pc, #240]	; (8002bc0 <HAL_DMA_Init+0x6ac>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d101      	bne.n	8002ad6 <HAL_DMA_Init+0x5c2>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_DMA_Init+0x5c4>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d032      	beq.n	8002b42 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f001 fceb 	bl	80044b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b80      	cmp	r3, #128	; 0x80
 8002ae8:	d102      	bne.n	8002af0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b04:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d010      	beq.n	8002b30 <HAL_DMA_Init+0x61c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d80c      	bhi.n	8002b30 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f001 fd68 	bl	80045ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	e008      	b.n	8002b42 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	a7fdabf8 	.word	0xa7fdabf8
 8002b60:	cccccccd 	.word	0xcccccccd
 8002b64:	40020010 	.word	0x40020010
 8002b68:	40020028 	.word	0x40020028
 8002b6c:	40020040 	.word	0x40020040
 8002b70:	40020058 	.word	0x40020058
 8002b74:	40020070 	.word	0x40020070
 8002b78:	40020088 	.word	0x40020088
 8002b7c:	400200a0 	.word	0x400200a0
 8002b80:	400200b8 	.word	0x400200b8
 8002b84:	40020410 	.word	0x40020410
 8002b88:	40020428 	.word	0x40020428
 8002b8c:	40020440 	.word	0x40020440
 8002b90:	40020458 	.word	0x40020458
 8002b94:	40020470 	.word	0x40020470
 8002b98:	40020488 	.word	0x40020488
 8002b9c:	400204a0 	.word	0x400204a0
 8002ba0:	400204b8 	.word	0x400204b8
 8002ba4:	58025408 	.word	0x58025408
 8002ba8:	5802541c 	.word	0x5802541c
 8002bac:	58025430 	.word	0x58025430
 8002bb0:	58025444 	.word	0x58025444
 8002bb4:	58025458 	.word	0x58025458
 8002bb8:	5802546c 	.word	0x5802546c
 8002bbc:	58025480 	.word	0x58025480
 8002bc0:	58025494 	.word	0x58025494

08002bc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e226      	b.n	800302e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_DMA_Start_IT+0x2a>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e21f      	b.n	800302e <HAL_DMA_Start_IT+0x46a>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	f040 820a 	bne.w	8003018 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a68      	ldr	r2, [pc, #416]	; (8002db8 <HAL_DMA_Start_IT+0x1f4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d04a      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a66      	ldr	r2, [pc, #408]	; (8002dbc <HAL_DMA_Start_IT+0x1f8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d045      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a65      	ldr	r2, [pc, #404]	; (8002dc0 <HAL_DMA_Start_IT+0x1fc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d040      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a63      	ldr	r2, [pc, #396]	; (8002dc4 <HAL_DMA_Start_IT+0x200>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d03b      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a62      	ldr	r2, [pc, #392]	; (8002dc8 <HAL_DMA_Start_IT+0x204>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d036      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a60      	ldr	r2, [pc, #384]	; (8002dcc <HAL_DMA_Start_IT+0x208>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d031      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a5f      	ldr	r2, [pc, #380]	; (8002dd0 <HAL_DMA_Start_IT+0x20c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d02c      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a5d      	ldr	r2, [pc, #372]	; (8002dd4 <HAL_DMA_Start_IT+0x210>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d027      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a5c      	ldr	r2, [pc, #368]	; (8002dd8 <HAL_DMA_Start_IT+0x214>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a5a      	ldr	r2, [pc, #360]	; (8002ddc <HAL_DMA_Start_IT+0x218>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01d      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a59      	ldr	r2, [pc, #356]	; (8002de0 <HAL_DMA_Start_IT+0x21c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d018      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a57      	ldr	r2, [pc, #348]	; (8002de4 <HAL_DMA_Start_IT+0x220>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a56      	ldr	r2, [pc, #344]	; (8002de8 <HAL_DMA_Start_IT+0x224>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a54      	ldr	r2, [pc, #336]	; (8002dec <HAL_DMA_Start_IT+0x228>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a53      	ldr	r2, [pc, #332]	; (8002df0 <HAL_DMA_Start_IT+0x22c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_DMA_Start_IT+0xee>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a51      	ldr	r2, [pc, #324]	; (8002df4 <HAL_DMA_Start_IT+0x230>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d108      	bne.n	8002cc4 <HAL_DMA_Start_IT+0x100>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e007      	b.n	8002cd4 <HAL_DMA_Start_IT+0x110>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f001 f912 	bl	8003f04 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a34      	ldr	r2, [pc, #208]	; (8002db8 <HAL_DMA_Start_IT+0x1f4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d04a      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a33      	ldr	r2, [pc, #204]	; (8002dbc <HAL_DMA_Start_IT+0x1f8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d045      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <HAL_DMA_Start_IT+0x1fc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d040      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <HAL_DMA_Start_IT+0x200>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d03b      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2e      	ldr	r2, [pc, #184]	; (8002dc8 <HAL_DMA_Start_IT+0x204>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d036      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a2d      	ldr	r2, [pc, #180]	; (8002dcc <HAL_DMA_Start_IT+0x208>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d031      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <HAL_DMA_Start_IT+0x20c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02c      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2a      	ldr	r2, [pc, #168]	; (8002dd4 <HAL_DMA_Start_IT+0x210>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d027      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <HAL_DMA_Start_IT+0x214>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d022      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a27      	ldr	r2, [pc, #156]	; (8002ddc <HAL_DMA_Start_IT+0x218>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d01d      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <HAL_DMA_Start_IT+0x21c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d018      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a24      	ldr	r2, [pc, #144]	; (8002de4 <HAL_DMA_Start_IT+0x220>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <HAL_DMA_Start_IT+0x224>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a21      	ldr	r2, [pc, #132]	; (8002dec <HAL_DMA_Start_IT+0x228>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <HAL_DMA_Start_IT+0x22c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_DMA_Start_IT+0x1bc>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <HAL_DMA_Start_IT+0x230>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_DMA_Start_IT+0x1c0>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_DMA_Start_IT+0x1c2>
 8002d84:	2300      	movs	r3, #0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d036      	beq.n	8002df8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f023 021e 	bic.w	r2, r3, #30
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0216 	orr.w	r2, r2, #22
 8002d9c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d03e      	beq.n	8002e24 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0208 	orr.w	r2, r2, #8
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e035      	b.n	8002e24 <HAL_DMA_Start_IT+0x260>
 8002db8:	40020010 	.word	0x40020010
 8002dbc:	40020028 	.word	0x40020028
 8002dc0:	40020040 	.word	0x40020040
 8002dc4:	40020058 	.word	0x40020058
 8002dc8:	40020070 	.word	0x40020070
 8002dcc:	40020088 	.word	0x40020088
 8002dd0:	400200a0 	.word	0x400200a0
 8002dd4:	400200b8 	.word	0x400200b8
 8002dd8:	40020410 	.word	0x40020410
 8002ddc:	40020428 	.word	0x40020428
 8002de0:	40020440 	.word	0x40020440
 8002de4:	40020458 	.word	0x40020458
 8002de8:	40020470 	.word	0x40020470
 8002dec:	40020488 	.word	0x40020488
 8002df0:	400204a0 	.word	0x400204a0
 8002df4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 020e 	bic.w	r2, r3, #14
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 020a 	orr.w	r2, r2, #10
 8002e0a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0204 	orr.w	r2, r2, #4
 8002e22:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a83      	ldr	r2, [pc, #524]	; (8003038 <HAL_DMA_Start_IT+0x474>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d072      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a82      	ldr	r2, [pc, #520]	; (800303c <HAL_DMA_Start_IT+0x478>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d06d      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a80      	ldr	r2, [pc, #512]	; (8003040 <HAL_DMA_Start_IT+0x47c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d068      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7f      	ldr	r2, [pc, #508]	; (8003044 <HAL_DMA_Start_IT+0x480>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d063      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a7d      	ldr	r2, [pc, #500]	; (8003048 <HAL_DMA_Start_IT+0x484>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d05e      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a7c      	ldr	r2, [pc, #496]	; (800304c <HAL_DMA_Start_IT+0x488>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d059      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a7a      	ldr	r2, [pc, #488]	; (8003050 <HAL_DMA_Start_IT+0x48c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d054      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a79      	ldr	r2, [pc, #484]	; (8003054 <HAL_DMA_Start_IT+0x490>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d04f      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a77      	ldr	r2, [pc, #476]	; (8003058 <HAL_DMA_Start_IT+0x494>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d04a      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a76      	ldr	r2, [pc, #472]	; (800305c <HAL_DMA_Start_IT+0x498>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d045      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a74      	ldr	r2, [pc, #464]	; (8003060 <HAL_DMA_Start_IT+0x49c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d040      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a73      	ldr	r2, [pc, #460]	; (8003064 <HAL_DMA_Start_IT+0x4a0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d03b      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a71      	ldr	r2, [pc, #452]	; (8003068 <HAL_DMA_Start_IT+0x4a4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d036      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a70      	ldr	r2, [pc, #448]	; (800306c <HAL_DMA_Start_IT+0x4a8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d031      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a6e      	ldr	r2, [pc, #440]	; (8003070 <HAL_DMA_Start_IT+0x4ac>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d02c      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6d      	ldr	r2, [pc, #436]	; (8003074 <HAL_DMA_Start_IT+0x4b0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d027      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a6b      	ldr	r2, [pc, #428]	; (8003078 <HAL_DMA_Start_IT+0x4b4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d022      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a6a      	ldr	r2, [pc, #424]	; (800307c <HAL_DMA_Start_IT+0x4b8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d01d      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a68      	ldr	r2, [pc, #416]	; (8003080 <HAL_DMA_Start_IT+0x4bc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d018      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a67      	ldr	r2, [pc, #412]	; (8003084 <HAL_DMA_Start_IT+0x4c0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d013      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a65      	ldr	r2, [pc, #404]	; (8003088 <HAL_DMA_Start_IT+0x4c4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00e      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a64      	ldr	r2, [pc, #400]	; (800308c <HAL_DMA_Start_IT+0x4c8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d009      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a62      	ldr	r2, [pc, #392]	; (8003090 <HAL_DMA_Start_IT+0x4cc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_DMA_Start_IT+0x350>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a61      	ldr	r2, [pc, #388]	; (8003094 <HAL_DMA_Start_IT+0x4d0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_DMA_Start_IT+0x354>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <HAL_DMA_Start_IT+0x356>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01a      	beq.n	8002f54 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f52:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a37      	ldr	r2, [pc, #220]	; (8003038 <HAL_DMA_Start_IT+0x474>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d04a      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a36      	ldr	r2, [pc, #216]	; (800303c <HAL_DMA_Start_IT+0x478>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d045      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a34      	ldr	r2, [pc, #208]	; (8003040 <HAL_DMA_Start_IT+0x47c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d040      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a33      	ldr	r2, [pc, #204]	; (8003044 <HAL_DMA_Start_IT+0x480>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d03b      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a31      	ldr	r2, [pc, #196]	; (8003048 <HAL_DMA_Start_IT+0x484>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d036      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a30      	ldr	r2, [pc, #192]	; (800304c <HAL_DMA_Start_IT+0x488>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d031      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a2e      	ldr	r2, [pc, #184]	; (8003050 <HAL_DMA_Start_IT+0x48c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d02c      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a2d      	ldr	r2, [pc, #180]	; (8003054 <HAL_DMA_Start_IT+0x490>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d027      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a2b      	ldr	r2, [pc, #172]	; (8003058 <HAL_DMA_Start_IT+0x494>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d022      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2a      	ldr	r2, [pc, #168]	; (800305c <HAL_DMA_Start_IT+0x498>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d01d      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a28      	ldr	r2, [pc, #160]	; (8003060 <HAL_DMA_Start_IT+0x49c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d018      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a27      	ldr	r2, [pc, #156]	; (8003064 <HAL_DMA_Start_IT+0x4a0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d013      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a25      	ldr	r2, [pc, #148]	; (8003068 <HAL_DMA_Start_IT+0x4a4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00e      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a24      	ldr	r2, [pc, #144]	; (800306c <HAL_DMA_Start_IT+0x4a8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d009      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a22      	ldr	r2, [pc, #136]	; (8003070 <HAL_DMA_Start_IT+0x4ac>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x430>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a21      	ldr	r2, [pc, #132]	; (8003074 <HAL_DMA_Start_IT+0x4b0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d108      	bne.n	8003006 <HAL_DMA_Start_IT+0x442>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e012      	b.n	800302c <HAL_DMA_Start_IT+0x468>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e009      	b.n	800302c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800301e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800302c:	7dfb      	ldrb	r3, [r7, #23]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40020010 	.word	0x40020010
 800303c:	40020028 	.word	0x40020028
 8003040:	40020040 	.word	0x40020040
 8003044:	40020058 	.word	0x40020058
 8003048:	40020070 	.word	0x40020070
 800304c:	40020088 	.word	0x40020088
 8003050:	400200a0 	.word	0x400200a0
 8003054:	400200b8 	.word	0x400200b8
 8003058:	40020410 	.word	0x40020410
 800305c:	40020428 	.word	0x40020428
 8003060:	40020440 	.word	0x40020440
 8003064:	40020458 	.word	0x40020458
 8003068:	40020470 	.word	0x40020470
 800306c:	40020488 	.word	0x40020488
 8003070:	400204a0 	.word	0x400204a0
 8003074:	400204b8 	.word	0x400204b8
 8003078:	58025408 	.word	0x58025408
 800307c:	5802541c 	.word	0x5802541c
 8003080:	58025430 	.word	0x58025430
 8003084:	58025444 	.word	0x58025444
 8003088:	58025458 	.word	0x58025458
 800308c:	5802546c 	.word	0x5802546c
 8003090:	58025480 	.word	0x58025480
 8003094:	58025494 	.word	0x58025494

08003098 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030a4:	4b67      	ldr	r3, [pc, #412]	; (8003244 <HAL_DMA_IRQHandler+0x1ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a67      	ldr	r2, [pc, #412]	; (8003248 <HAL_DMA_IRQHandler+0x1b0>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	0a9b      	lsrs	r3, r3, #10
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a5f      	ldr	r2, [pc, #380]	; (800324c <HAL_DMA_IRQHandler+0x1b4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d04a      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a5d      	ldr	r2, [pc, #372]	; (8003250 <HAL_DMA_IRQHandler+0x1b8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d045      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a5c      	ldr	r2, [pc, #368]	; (8003254 <HAL_DMA_IRQHandler+0x1bc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d040      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a5a      	ldr	r2, [pc, #360]	; (8003258 <HAL_DMA_IRQHandler+0x1c0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d03b      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a59      	ldr	r2, [pc, #356]	; (800325c <HAL_DMA_IRQHandler+0x1c4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d036      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a57      	ldr	r2, [pc, #348]	; (8003260 <HAL_DMA_IRQHandler+0x1c8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d031      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a56      	ldr	r2, [pc, #344]	; (8003264 <HAL_DMA_IRQHandler+0x1cc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d02c      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a54      	ldr	r2, [pc, #336]	; (8003268 <HAL_DMA_IRQHandler+0x1d0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d027      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a53      	ldr	r2, [pc, #332]	; (800326c <HAL_DMA_IRQHandler+0x1d4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d022      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a51      	ldr	r2, [pc, #324]	; (8003270 <HAL_DMA_IRQHandler+0x1d8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01d      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a50      	ldr	r2, [pc, #320]	; (8003274 <HAL_DMA_IRQHandler+0x1dc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d018      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a4e      	ldr	r2, [pc, #312]	; (8003278 <HAL_DMA_IRQHandler+0x1e0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a4d      	ldr	r2, [pc, #308]	; (800327c <HAL_DMA_IRQHandler+0x1e4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00e      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a4b      	ldr	r2, [pc, #300]	; (8003280 <HAL_DMA_IRQHandler+0x1e8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a4a      	ldr	r2, [pc, #296]	; (8003284 <HAL_DMA_IRQHandler+0x1ec>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_DMA_IRQHandler+0xd2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a48      	ldr	r2, [pc, #288]	; (8003288 <HAL_DMA_IRQHandler+0x1f0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_DMA_IRQHandler+0xd6>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_DMA_IRQHandler+0xd8>
 800316e:	2300      	movs	r3, #0
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 842b 	beq.w	80039cc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	2208      	movs	r2, #8
 8003180:	409a      	lsls	r2, r3
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80a2 	beq.w	80032d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2e      	ldr	r2, [pc, #184]	; (800324c <HAL_DMA_IRQHandler+0x1b4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d04a      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2d      	ldr	r2, [pc, #180]	; (8003250 <HAL_DMA_IRQHandler+0x1b8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d045      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a2b      	ldr	r2, [pc, #172]	; (8003254 <HAL_DMA_IRQHandler+0x1bc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d040      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <HAL_DMA_IRQHandler+0x1c0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d03b      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a28      	ldr	r2, [pc, #160]	; (800325c <HAL_DMA_IRQHandler+0x1c4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d036      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a27      	ldr	r2, [pc, #156]	; (8003260 <HAL_DMA_IRQHandler+0x1c8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d031      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a25      	ldr	r2, [pc, #148]	; (8003264 <HAL_DMA_IRQHandler+0x1cc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02c      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a24      	ldr	r2, [pc, #144]	; (8003268 <HAL_DMA_IRQHandler+0x1d0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d027      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a22      	ldr	r2, [pc, #136]	; (800326c <HAL_DMA_IRQHandler+0x1d4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d022      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a21      	ldr	r2, [pc, #132]	; (8003270 <HAL_DMA_IRQHandler+0x1d8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d01d      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1f      	ldr	r2, [pc, #124]	; (8003274 <HAL_DMA_IRQHandler+0x1dc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d018      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1e      	ldr	r2, [pc, #120]	; (8003278 <HAL_DMA_IRQHandler+0x1e0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_DMA_IRQHandler+0x1e4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00e      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <HAL_DMA_IRQHandler+0x1e8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a19      	ldr	r2, [pc, #100]	; (8003284 <HAL_DMA_IRQHandler+0x1ec>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_DMA_IRQHandler+0x194>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a18      	ldr	r2, [pc, #96]	; (8003288 <HAL_DMA_IRQHandler+0x1f0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d12f      	bne.n	800328c <HAL_DMA_IRQHandler+0x1f4>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e02e      	b.n	80032a0 <HAL_DMA_IRQHandler+0x208>
 8003242:	bf00      	nop
 8003244:	24000384 	.word	0x24000384
 8003248:	1b4e81b5 	.word	0x1b4e81b5
 800324c:	40020010 	.word	0x40020010
 8003250:	40020028 	.word	0x40020028
 8003254:	40020040 	.word	0x40020040
 8003258:	40020058 	.word	0x40020058
 800325c:	40020070 	.word	0x40020070
 8003260:	40020088 	.word	0x40020088
 8003264:	400200a0 	.word	0x400200a0
 8003268:	400200b8 	.word	0x400200b8
 800326c:	40020410 	.word	0x40020410
 8003270:	40020428 	.word	0x40020428
 8003274:	40020440 	.word	0x40020440
 8003278:	40020458 	.word	0x40020458
 800327c:	40020470 	.word	0x40020470
 8003280:	40020488 	.word	0x40020488
 8003284:	400204a0 	.word	0x400204a0
 8003288:	400204b8 	.word	0x400204b8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d015      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0204 	bic.w	r2, r2, #4
 80032b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2208      	movs	r2, #8
 80032be:	409a      	lsls	r2, r3
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	fa22 f303 	lsr.w	r3, r2, r3
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d06e      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a69      	ldr	r2, [pc, #420]	; (8003490 <HAL_DMA_IRQHandler+0x3f8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d04a      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a67      	ldr	r2, [pc, #412]	; (8003494 <HAL_DMA_IRQHandler+0x3fc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d045      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a66      	ldr	r2, [pc, #408]	; (8003498 <HAL_DMA_IRQHandler+0x400>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d040      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a64      	ldr	r2, [pc, #400]	; (800349c <HAL_DMA_IRQHandler+0x404>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d03b      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a63      	ldr	r2, [pc, #396]	; (80034a0 <HAL_DMA_IRQHandler+0x408>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d036      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a61      	ldr	r2, [pc, #388]	; (80034a4 <HAL_DMA_IRQHandler+0x40c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d031      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a60      	ldr	r2, [pc, #384]	; (80034a8 <HAL_DMA_IRQHandler+0x410>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d02c      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a5e      	ldr	r2, [pc, #376]	; (80034ac <HAL_DMA_IRQHandler+0x414>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d027      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a5d      	ldr	r2, [pc, #372]	; (80034b0 <HAL_DMA_IRQHandler+0x418>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d022      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a5b      	ldr	r2, [pc, #364]	; (80034b4 <HAL_DMA_IRQHandler+0x41c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01d      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a5a      	ldr	r2, [pc, #360]	; (80034b8 <HAL_DMA_IRQHandler+0x420>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d018      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a58      	ldr	r2, [pc, #352]	; (80034bc <HAL_DMA_IRQHandler+0x424>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a57      	ldr	r2, [pc, #348]	; (80034c0 <HAL_DMA_IRQHandler+0x428>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00e      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a55      	ldr	r2, [pc, #340]	; (80034c4 <HAL_DMA_IRQHandler+0x42c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a54      	ldr	r2, [pc, #336]	; (80034c8 <HAL_DMA_IRQHandler+0x430>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2ee>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a52      	ldr	r2, [pc, #328]	; (80034cc <HAL_DMA_IRQHandler+0x434>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10a      	bne.n	800339c <HAL_DMA_IRQHandler+0x304>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	e003      	b.n	80033a4 <HAL_DMA_IRQHandler+0x30c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00d      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2201      	movs	r2, #1
 80033b2:	409a      	lsls	r2, r3
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0202 	orr.w	r2, r3, #2
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2204      	movs	r2, #4
 80033ce:	409a      	lsls	r2, r3
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 808f 	beq.w	80034f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a2c      	ldr	r2, [pc, #176]	; (8003490 <HAL_DMA_IRQHandler+0x3f8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d04a      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <HAL_DMA_IRQHandler+0x3fc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d045      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a29      	ldr	r2, [pc, #164]	; (8003498 <HAL_DMA_IRQHandler+0x400>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d040      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a27      	ldr	r2, [pc, #156]	; (800349c <HAL_DMA_IRQHandler+0x404>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d03b      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a26      	ldr	r2, [pc, #152]	; (80034a0 <HAL_DMA_IRQHandler+0x408>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d036      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a24      	ldr	r2, [pc, #144]	; (80034a4 <HAL_DMA_IRQHandler+0x40c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d031      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a23      	ldr	r2, [pc, #140]	; (80034a8 <HAL_DMA_IRQHandler+0x410>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d02c      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a21      	ldr	r2, [pc, #132]	; (80034ac <HAL_DMA_IRQHandler+0x414>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d027      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <HAL_DMA_IRQHandler+0x418>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1e      	ldr	r2, [pc, #120]	; (80034b4 <HAL_DMA_IRQHandler+0x41c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01d      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1d      	ldr	r2, [pc, #116]	; (80034b8 <HAL_DMA_IRQHandler+0x420>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d018      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <HAL_DMA_IRQHandler+0x424>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <HAL_DMA_IRQHandler+0x428>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00e      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <HAL_DMA_IRQHandler+0x42c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d009      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a17      	ldr	r2, [pc, #92]	; (80034c8 <HAL_DMA_IRQHandler+0x430>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d004      	beq.n	800347a <HAL_DMA_IRQHandler+0x3e2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a15      	ldr	r2, [pc, #84]	; (80034cc <HAL_DMA_IRQHandler+0x434>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d12a      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x438>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e023      	b.n	80034d8 <HAL_DMA_IRQHandler+0x440>
 8003490:	40020010 	.word	0x40020010
 8003494:	40020028 	.word	0x40020028
 8003498:	40020040 	.word	0x40020040
 800349c:	40020058 	.word	0x40020058
 80034a0:	40020070 	.word	0x40020070
 80034a4:	40020088 	.word	0x40020088
 80034a8:	400200a0 	.word	0x400200a0
 80034ac:	400200b8 	.word	0x400200b8
 80034b0:	40020410 	.word	0x40020410
 80034b4:	40020428 	.word	0x40020428
 80034b8:	40020440 	.word	0x40020440
 80034bc:	40020458 	.word	0x40020458
 80034c0:	40020470 	.word	0x40020470
 80034c4:	40020488 	.word	0x40020488
 80034c8:	400204a0 	.word	0x400204a0
 80034cc:	400204b8 	.word	0x400204b8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	2204      	movs	r2, #4
 80034e6:	409a      	lsls	r2, r3
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f043 0204 	orr.w	r2, r3, #4
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2210      	movs	r2, #16
 8003502:	409a      	lsls	r2, r3
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80a6 	beq.w	800365a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a85      	ldr	r2, [pc, #532]	; (8003728 <HAL_DMA_IRQHandler+0x690>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d04a      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a83      	ldr	r2, [pc, #524]	; (800372c <HAL_DMA_IRQHandler+0x694>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d045      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a82      	ldr	r2, [pc, #520]	; (8003730 <HAL_DMA_IRQHandler+0x698>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d040      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a80      	ldr	r2, [pc, #512]	; (8003734 <HAL_DMA_IRQHandler+0x69c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d03b      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a7f      	ldr	r2, [pc, #508]	; (8003738 <HAL_DMA_IRQHandler+0x6a0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d036      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a7d      	ldr	r2, [pc, #500]	; (800373c <HAL_DMA_IRQHandler+0x6a4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d031      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a7c      	ldr	r2, [pc, #496]	; (8003740 <HAL_DMA_IRQHandler+0x6a8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d02c      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a7a      	ldr	r2, [pc, #488]	; (8003744 <HAL_DMA_IRQHandler+0x6ac>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d027      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a79      	ldr	r2, [pc, #484]	; (8003748 <HAL_DMA_IRQHandler+0x6b0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d022      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a77      	ldr	r2, [pc, #476]	; (800374c <HAL_DMA_IRQHandler+0x6b4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01d      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a76      	ldr	r2, [pc, #472]	; (8003750 <HAL_DMA_IRQHandler+0x6b8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d018      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a74      	ldr	r2, [pc, #464]	; (8003754 <HAL_DMA_IRQHandler+0x6bc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a73      	ldr	r2, [pc, #460]	; (8003758 <HAL_DMA_IRQHandler+0x6c0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00e      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a71      	ldr	r2, [pc, #452]	; (800375c <HAL_DMA_IRQHandler+0x6c4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a70      	ldr	r2, [pc, #448]	; (8003760 <HAL_DMA_IRQHandler+0x6c8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_DMA_IRQHandler+0x516>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a6e      	ldr	r2, [pc, #440]	; (8003764 <HAL_DMA_IRQHandler+0x6cc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d10a      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x52c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e009      	b.n	80035d8 <HAL_DMA_IRQHandler+0x540>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	bf14      	ite	ne
 80035d2:	2301      	movne	r3, #1
 80035d4:	2300      	moveq	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d03e      	beq.n	800365a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2210      	movs	r2, #16
 80035e6:	409a      	lsls	r2, r3
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d018      	beq.n	800362c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d108      	bne.n	800361a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d024      	beq.n	800365a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
 8003618:	e01f      	b.n	800365a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01b      	beq.n	800365a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
 800362a:	e016      	b.n	800365a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d107      	bne.n	800364a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0208 	bic.w	r2, r2, #8
 8003648:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	2220      	movs	r2, #32
 8003664:	409a      	lsls	r2, r3
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 8110 	beq.w	8003890 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a2c      	ldr	r2, [pc, #176]	; (8003728 <HAL_DMA_IRQHandler+0x690>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d04a      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2b      	ldr	r2, [pc, #172]	; (800372c <HAL_DMA_IRQHandler+0x694>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d045      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a29      	ldr	r2, [pc, #164]	; (8003730 <HAL_DMA_IRQHandler+0x698>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d040      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a28      	ldr	r2, [pc, #160]	; (8003734 <HAL_DMA_IRQHandler+0x69c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d03b      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a26      	ldr	r2, [pc, #152]	; (8003738 <HAL_DMA_IRQHandler+0x6a0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d036      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a25      	ldr	r2, [pc, #148]	; (800373c <HAL_DMA_IRQHandler+0x6a4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d031      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a23      	ldr	r2, [pc, #140]	; (8003740 <HAL_DMA_IRQHandler+0x6a8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d02c      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_DMA_IRQHandler+0x6ac>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d027      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a20      	ldr	r2, [pc, #128]	; (8003748 <HAL_DMA_IRQHandler+0x6b0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d022      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_DMA_IRQHandler+0x6b4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d01d      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <HAL_DMA_IRQHandler+0x6b8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d018      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_DMA_IRQHandler+0x6bc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d013      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1a      	ldr	r2, [pc, #104]	; (8003758 <HAL_DMA_IRQHandler+0x6c0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00e      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a19      	ldr	r2, [pc, #100]	; (800375c <HAL_DMA_IRQHandler+0x6c4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d009      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a17      	ldr	r2, [pc, #92]	; (8003760 <HAL_DMA_IRQHandler+0x6c8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d004      	beq.n	8003710 <HAL_DMA_IRQHandler+0x678>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a16      	ldr	r2, [pc, #88]	; (8003764 <HAL_DMA_IRQHandler+0x6cc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d12b      	bne.n	8003768 <HAL_DMA_IRQHandler+0x6d0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	e02a      	b.n	800377c <HAL_DMA_IRQHandler+0x6e4>
 8003726:	bf00      	nop
 8003728:	40020010 	.word	0x40020010
 800372c:	40020028 	.word	0x40020028
 8003730:	40020040 	.word	0x40020040
 8003734:	40020058 	.word	0x40020058
 8003738:	40020070 	.word	0x40020070
 800373c:	40020088 	.word	0x40020088
 8003740:	400200a0 	.word	0x400200a0
 8003744:	400200b8 	.word	0x400200b8
 8003748:	40020410 	.word	0x40020410
 800374c:	40020428 	.word	0x40020428
 8003750:	40020440 	.word	0x40020440
 8003754:	40020458 	.word	0x40020458
 8003758:	40020470 	.word	0x40020470
 800375c:	40020488 	.word	0x40020488
 8003760:	400204a0 	.word	0x400204a0
 8003764:	400204b8 	.word	0x400204b8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	bf14      	ite	ne
 8003776:	2301      	movne	r3, #1
 8003778:	2300      	moveq	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8087 	beq.w	8003890 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	2220      	movs	r2, #32
 800378c:	409a      	lsls	r2, r3
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b04      	cmp	r3, #4
 800379c:	d139      	bne.n	8003812 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0216 	bic.w	r2, r2, #22
 80037ac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037bc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_DMA_IRQHandler+0x736>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0208 	bic.w	r2, r2, #8
 80037dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	223f      	movs	r2, #63	; 0x3f
 80037e8:	409a      	lsls	r2, r3
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 834a 	beq.w	8003e9c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4798      	blx	r3
          }
          return;
 8003810:	e344      	b.n	8003e9c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d018      	beq.n	8003852 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d108      	bne.n	8003840 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	2b00      	cmp	r3, #0
 8003834:	d02c      	beq.n	8003890 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
 800383e:	e027      	b.n	8003890 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d023      	beq.n	8003890 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
 8003850:	e01e      	b.n	8003890 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10f      	bne.n	8003880 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0210 	bic.w	r2, r2, #16
 800386e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8306 	beq.w	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8088 	beq.w	80039b8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2204      	movs	r2, #4
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a7a      	ldr	r2, [pc, #488]	; (8003aa0 <HAL_DMA_IRQHandler+0xa08>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d04a      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a79      	ldr	r2, [pc, #484]	; (8003aa4 <HAL_DMA_IRQHandler+0xa0c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d045      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a77      	ldr	r2, [pc, #476]	; (8003aa8 <HAL_DMA_IRQHandler+0xa10>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d040      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a76      	ldr	r2, [pc, #472]	; (8003aac <HAL_DMA_IRQHandler+0xa14>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d03b      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a74      	ldr	r2, [pc, #464]	; (8003ab0 <HAL_DMA_IRQHandler+0xa18>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d036      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a73      	ldr	r2, [pc, #460]	; (8003ab4 <HAL_DMA_IRQHandler+0xa1c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d031      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a71      	ldr	r2, [pc, #452]	; (8003ab8 <HAL_DMA_IRQHandler+0xa20>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02c      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a70      	ldr	r2, [pc, #448]	; (8003abc <HAL_DMA_IRQHandler+0xa24>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d027      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a6e      	ldr	r2, [pc, #440]	; (8003ac0 <HAL_DMA_IRQHandler+0xa28>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d022      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a6d      	ldr	r2, [pc, #436]	; (8003ac4 <HAL_DMA_IRQHandler+0xa2c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d01d      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a6b      	ldr	r2, [pc, #428]	; (8003ac8 <HAL_DMA_IRQHandler+0xa30>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d018      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a6a      	ldr	r2, [pc, #424]	; (8003acc <HAL_DMA_IRQHandler+0xa34>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a68      	ldr	r2, [pc, #416]	; (8003ad0 <HAL_DMA_IRQHandler+0xa38>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a67      	ldr	r2, [pc, #412]	; (8003ad4 <HAL_DMA_IRQHandler+0xa3c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d009      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a65      	ldr	r2, [pc, #404]	; (8003ad8 <HAL_DMA_IRQHandler+0xa40>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_DMA_IRQHandler+0x8b8>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a64      	ldr	r2, [pc, #400]	; (8003adc <HAL_DMA_IRQHandler+0xa44>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <HAL_DMA_IRQHandler+0x8ca>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e007      	b.n	8003972 <HAL_DMA_IRQHandler+0x8da>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3301      	adds	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397a:	429a      	cmp	r2, r3
 800397c:	d307      	bcc.n	800398e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f2      	bne.n	8003972 <HAL_DMA_IRQHandler+0x8da>
 800398c:	e000      	b.n	8003990 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800398e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d004      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2203      	movs	r2, #3
 80039a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80039a6:	e003      	b.n	80039b0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8272 	beq.w	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
 80039ca:	e26c      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a43      	ldr	r2, [pc, #268]	; (8003ae0 <HAL_DMA_IRQHandler+0xa48>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a42      	ldr	r2, [pc, #264]	; (8003ae4 <HAL_DMA_IRQHandler+0xa4c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d01d      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a40      	ldr	r2, [pc, #256]	; (8003ae8 <HAL_DMA_IRQHandler+0xa50>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a3f      	ldr	r2, [pc, #252]	; (8003aec <HAL_DMA_IRQHandler+0xa54>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a3d      	ldr	r2, [pc, #244]	; (8003af0 <HAL_DMA_IRQHandler+0xa58>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a3c      	ldr	r2, [pc, #240]	; (8003af4 <HAL_DMA_IRQHandler+0xa5c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a3a      	ldr	r2, [pc, #232]	; (8003af8 <HAL_DMA_IRQHandler+0xa60>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x984>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a39      	ldr	r2, [pc, #228]	; (8003afc <HAL_DMA_IRQHandler+0xa64>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <HAL_DMA_IRQHandler+0x988>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <HAL_DMA_IRQHandler+0x98a>
 8003a20:	2300      	movs	r3, #0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 823f 	beq.w	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	2204      	movs	r2, #4
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80cd 	beq.w	8003be0 <HAL_DMA_IRQHandler+0xb48>
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80c7 	beq.w	8003be0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d049      	beq.n	8003b00 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8210 	beq.w	8003ea0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a88:	e20a      	b.n	8003ea0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8206 	beq.w	8003ea0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a9c:	e200      	b.n	8003ea0 <HAL_DMA_IRQHandler+0xe08>
 8003a9e:	bf00      	nop
 8003aa0:	40020010 	.word	0x40020010
 8003aa4:	40020028 	.word	0x40020028
 8003aa8:	40020040 	.word	0x40020040
 8003aac:	40020058 	.word	0x40020058
 8003ab0:	40020070 	.word	0x40020070
 8003ab4:	40020088 	.word	0x40020088
 8003ab8:	400200a0 	.word	0x400200a0
 8003abc:	400200b8 	.word	0x400200b8
 8003ac0:	40020410 	.word	0x40020410
 8003ac4:	40020428 	.word	0x40020428
 8003ac8:	40020440 	.word	0x40020440
 8003acc:	40020458 	.word	0x40020458
 8003ad0:	40020470 	.word	0x40020470
 8003ad4:	40020488 	.word	0x40020488
 8003ad8:	400204a0 	.word	0x400204a0
 8003adc:	400204b8 	.word	0x400204b8
 8003ae0:	58025408 	.word	0x58025408
 8003ae4:	5802541c 	.word	0x5802541c
 8003ae8:	58025430 	.word	0x58025430
 8003aec:	58025444 	.word	0x58025444
 8003af0:	58025458 	.word	0x58025458
 8003af4:	5802546c 	.word	0x5802546c
 8003af8:	58025480 	.word	0x58025480
 8003afc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d160      	bne.n	8003bcc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7f      	ldr	r2, [pc, #508]	; (8003d0c <HAL_DMA_IRQHandler+0xc74>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d04a      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a7d      	ldr	r2, [pc, #500]	; (8003d10 <HAL_DMA_IRQHandler+0xc78>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d045      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a7c      	ldr	r2, [pc, #496]	; (8003d14 <HAL_DMA_IRQHandler+0xc7c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d040      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a7a      	ldr	r2, [pc, #488]	; (8003d18 <HAL_DMA_IRQHandler+0xc80>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d03b      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a79      	ldr	r2, [pc, #484]	; (8003d1c <HAL_DMA_IRQHandler+0xc84>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d036      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a77      	ldr	r2, [pc, #476]	; (8003d20 <HAL_DMA_IRQHandler+0xc88>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d031      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a76      	ldr	r2, [pc, #472]	; (8003d24 <HAL_DMA_IRQHandler+0xc8c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d02c      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a74      	ldr	r2, [pc, #464]	; (8003d28 <HAL_DMA_IRQHandler+0xc90>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d027      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a73      	ldr	r2, [pc, #460]	; (8003d2c <HAL_DMA_IRQHandler+0xc94>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d022      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a71      	ldr	r2, [pc, #452]	; (8003d30 <HAL_DMA_IRQHandler+0xc98>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01d      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a70      	ldr	r2, [pc, #448]	; (8003d34 <HAL_DMA_IRQHandler+0xc9c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d018      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a6e      	ldr	r2, [pc, #440]	; (8003d38 <HAL_DMA_IRQHandler+0xca0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a6d      	ldr	r2, [pc, #436]	; (8003d3c <HAL_DMA_IRQHandler+0xca4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6b      	ldr	r2, [pc, #428]	; (8003d40 <HAL_DMA_IRQHandler+0xca8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d009      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a6a      	ldr	r2, [pc, #424]	; (8003d44 <HAL_DMA_IRQHandler+0xcac>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_DMA_IRQHandler+0xb12>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a68      	ldr	r2, [pc, #416]	; (8003d48 <HAL_DMA_IRQHandler+0xcb0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d108      	bne.n	8003bbc <HAL_DMA_IRQHandler+0xb24>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0208 	bic.w	r2, r2, #8
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e007      	b.n	8003bcc <HAL_DMA_IRQHandler+0xb34>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0204 	bic.w	r2, r2, #4
 8003bca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8165 	beq.w	8003ea0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bde:	e15f      	b.n	8003ea0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2202      	movs	r2, #2
 8003bea:	409a      	lsls	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80c5 	beq.w	8003d80 <HAL_DMA_IRQHandler+0xce8>
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80bf 	beq.w	8003d80 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d018      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 813a 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c38:	e134      	b.n	8003ea4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8130 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c4c:	e12a      	b.n	8003ea4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 8089 	bne.w	8003d6c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2b      	ldr	r2, [pc, #172]	; (8003d0c <HAL_DMA_IRQHandler+0xc74>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d04a      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a29      	ldr	r2, [pc, #164]	; (8003d10 <HAL_DMA_IRQHandler+0xc78>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d045      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a28      	ldr	r2, [pc, #160]	; (8003d14 <HAL_DMA_IRQHandler+0xc7c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d040      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a26      	ldr	r2, [pc, #152]	; (8003d18 <HAL_DMA_IRQHandler+0xc80>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d03b      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a25      	ldr	r2, [pc, #148]	; (8003d1c <HAL_DMA_IRQHandler+0xc84>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d036      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a23      	ldr	r2, [pc, #140]	; (8003d20 <HAL_DMA_IRQHandler+0xc88>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d031      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <HAL_DMA_IRQHandler+0xc8c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d02c      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a20      	ldr	r2, [pc, #128]	; (8003d28 <HAL_DMA_IRQHandler+0xc90>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d027      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <HAL_DMA_IRQHandler+0xc94>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d022      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_DMA_IRQHandler+0xc98>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01d      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <HAL_DMA_IRQHandler+0xc9c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d018      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1a      	ldr	r2, [pc, #104]	; (8003d38 <HAL_DMA_IRQHandler+0xca0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a19      	ldr	r2, [pc, #100]	; (8003d3c <HAL_DMA_IRQHandler+0xca4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a17      	ldr	r2, [pc, #92]	; (8003d40 <HAL_DMA_IRQHandler+0xca8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a16      	ldr	r2, [pc, #88]	; (8003d44 <HAL_DMA_IRQHandler+0xcac>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xc62>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <HAL_DMA_IRQHandler+0xcb0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d128      	bne.n	8003d4c <HAL_DMA_IRQHandler+0xcb4>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0214 	bic.w	r2, r2, #20
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e027      	b.n	8003d5c <HAL_DMA_IRQHandler+0xcc4>
 8003d0c:	40020010 	.word	0x40020010
 8003d10:	40020028 	.word	0x40020028
 8003d14:	40020040 	.word	0x40020040
 8003d18:	40020058 	.word	0x40020058
 8003d1c:	40020070 	.word	0x40020070
 8003d20:	40020088 	.word	0x40020088
 8003d24:	400200a0 	.word	0x400200a0
 8003d28:	400200b8 	.word	0x400200b8
 8003d2c:	40020410 	.word	0x40020410
 8003d30:	40020428 	.word	0x40020428
 8003d34:	40020440 	.word	0x40020440
 8003d38:	40020458 	.word	0x40020458
 8003d3c:	40020470 	.word	0x40020470
 8003d40:	40020488 	.word	0x40020488
 8003d44:	400204a0 	.word	0x400204a0
 8003d48:	400204b8 	.word	0x400204b8
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 020a 	bic.w	r2, r2, #10
 8003d5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8097 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d7e:	e091      	b.n	8003ea4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	2208      	movs	r2, #8
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8088 	beq.w	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8082 	beq.w	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a41      	ldr	r2, [pc, #260]	; (8003eac <HAL_DMA_IRQHandler+0xe14>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d04a      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a3f      	ldr	r2, [pc, #252]	; (8003eb0 <HAL_DMA_IRQHandler+0xe18>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d045      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a3e      	ldr	r2, [pc, #248]	; (8003eb4 <HAL_DMA_IRQHandler+0xe1c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d040      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a3c      	ldr	r2, [pc, #240]	; (8003eb8 <HAL_DMA_IRQHandler+0xe20>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d03b      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a3b      	ldr	r2, [pc, #236]	; (8003ebc <HAL_DMA_IRQHandler+0xe24>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d036      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a39      	ldr	r2, [pc, #228]	; (8003ec0 <HAL_DMA_IRQHandler+0xe28>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d031      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a38      	ldr	r2, [pc, #224]	; (8003ec4 <HAL_DMA_IRQHandler+0xe2c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d02c      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a36      	ldr	r2, [pc, #216]	; (8003ec8 <HAL_DMA_IRQHandler+0xe30>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d027      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a35      	ldr	r2, [pc, #212]	; (8003ecc <HAL_DMA_IRQHandler+0xe34>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d022      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a33      	ldr	r2, [pc, #204]	; (8003ed0 <HAL_DMA_IRQHandler+0xe38>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01d      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a32      	ldr	r2, [pc, #200]	; (8003ed4 <HAL_DMA_IRQHandler+0xe3c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d018      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a30      	ldr	r2, [pc, #192]	; (8003ed8 <HAL_DMA_IRQHandler+0xe40>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <HAL_DMA_IRQHandler+0xe44>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00e      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a2d      	ldr	r2, [pc, #180]	; (8003ee0 <HAL_DMA_IRQHandler+0xe48>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2c      	ldr	r2, [pc, #176]	; (8003ee4 <HAL_DMA_IRQHandler+0xe4c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xdaa>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <HAL_DMA_IRQHandler+0xe50>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d108      	bne.n	8003e54 <HAL_DMA_IRQHandler+0xdbc>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 021c 	bic.w	r2, r2, #28
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e007      	b.n	8003e64 <HAL_DMA_IRQHandler+0xdcc>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 020e 	bic.w	r2, r2, #14
 8003e62:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
 8003e9a:	e004      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e9c:	bf00      	nop
 8003e9e:	e002      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ea0:	bf00      	nop
 8003ea2:	e000      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ea4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40020010 	.word	0x40020010
 8003eb0:	40020028 	.word	0x40020028
 8003eb4:	40020040 	.word	0x40020040
 8003eb8:	40020058 	.word	0x40020058
 8003ebc:	40020070 	.word	0x40020070
 8003ec0:	40020088 	.word	0x40020088
 8003ec4:	400200a0 	.word	0x400200a0
 8003ec8:	400200b8 	.word	0x400200b8
 8003ecc:	40020410 	.word	0x40020410
 8003ed0:	40020428 	.word	0x40020428
 8003ed4:	40020440 	.word	0x40020440
 8003ed8:	40020458 	.word	0x40020458
 8003edc:	40020470 	.word	0x40020470
 8003ee0:	40020488 	.word	0x40020488
 8003ee4:	400204a0 	.word	0x400204a0
 8003ee8:	400204b8 	.word	0x400204b8

08003eec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f16:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a7f      	ldr	r2, [pc, #508]	; (8004120 <DMA_SetConfig+0x21c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d072      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a7d      	ldr	r2, [pc, #500]	; (8004124 <DMA_SetConfig+0x220>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d06d      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a7c      	ldr	r2, [pc, #496]	; (8004128 <DMA_SetConfig+0x224>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d068      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a7a      	ldr	r2, [pc, #488]	; (800412c <DMA_SetConfig+0x228>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d063      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a79      	ldr	r2, [pc, #484]	; (8004130 <DMA_SetConfig+0x22c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d05e      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a77      	ldr	r2, [pc, #476]	; (8004134 <DMA_SetConfig+0x230>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d059      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a76      	ldr	r2, [pc, #472]	; (8004138 <DMA_SetConfig+0x234>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d054      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a74      	ldr	r2, [pc, #464]	; (800413c <DMA_SetConfig+0x238>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d04f      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a73      	ldr	r2, [pc, #460]	; (8004140 <DMA_SetConfig+0x23c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d04a      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a71      	ldr	r2, [pc, #452]	; (8004144 <DMA_SetConfig+0x240>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d045      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a70      	ldr	r2, [pc, #448]	; (8004148 <DMA_SetConfig+0x244>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d040      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a6e      	ldr	r2, [pc, #440]	; (800414c <DMA_SetConfig+0x248>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d03b      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a6d      	ldr	r2, [pc, #436]	; (8004150 <DMA_SetConfig+0x24c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d036      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a6b      	ldr	r2, [pc, #428]	; (8004154 <DMA_SetConfig+0x250>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d031      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a6a      	ldr	r2, [pc, #424]	; (8004158 <DMA_SetConfig+0x254>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d02c      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a68      	ldr	r2, [pc, #416]	; (800415c <DMA_SetConfig+0x258>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d027      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a67      	ldr	r2, [pc, #412]	; (8004160 <DMA_SetConfig+0x25c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a65      	ldr	r2, [pc, #404]	; (8004164 <DMA_SetConfig+0x260>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01d      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a64      	ldr	r2, [pc, #400]	; (8004168 <DMA_SetConfig+0x264>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d018      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a62      	ldr	r2, [pc, #392]	; (800416c <DMA_SetConfig+0x268>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a61      	ldr	r2, [pc, #388]	; (8004170 <DMA_SetConfig+0x26c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a5f      	ldr	r2, [pc, #380]	; (8004174 <DMA_SetConfig+0x270>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d009      	beq.n	800400e <DMA_SetConfig+0x10a>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a5e      	ldr	r2, [pc, #376]	; (8004178 <DMA_SetConfig+0x274>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <DMA_SetConfig+0x10a>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a5c      	ldr	r2, [pc, #368]	; (800417c <DMA_SetConfig+0x278>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <DMA_SetConfig+0x10e>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <DMA_SetConfig+0x110>
 8004012:	2300      	movs	r3, #0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004020:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d004      	beq.n	8004034 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004032:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a39      	ldr	r2, [pc, #228]	; (8004120 <DMA_SetConfig+0x21c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d04a      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a38      	ldr	r2, [pc, #224]	; (8004124 <DMA_SetConfig+0x220>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d045      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a36      	ldr	r2, [pc, #216]	; (8004128 <DMA_SetConfig+0x224>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d040      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a35      	ldr	r2, [pc, #212]	; (800412c <DMA_SetConfig+0x228>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d03b      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a33      	ldr	r2, [pc, #204]	; (8004130 <DMA_SetConfig+0x22c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d036      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a32      	ldr	r2, [pc, #200]	; (8004134 <DMA_SetConfig+0x230>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d031      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a30      	ldr	r2, [pc, #192]	; (8004138 <DMA_SetConfig+0x234>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d02c      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2f      	ldr	r2, [pc, #188]	; (800413c <DMA_SetConfig+0x238>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d027      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a2d      	ldr	r2, [pc, #180]	; (8004140 <DMA_SetConfig+0x23c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d022      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a2c      	ldr	r2, [pc, #176]	; (8004144 <DMA_SetConfig+0x240>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d01d      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a2a      	ldr	r2, [pc, #168]	; (8004148 <DMA_SetConfig+0x244>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d018      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a29      	ldr	r2, [pc, #164]	; (800414c <DMA_SetConfig+0x248>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d013      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a27      	ldr	r2, [pc, #156]	; (8004150 <DMA_SetConfig+0x24c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00e      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a26      	ldr	r2, [pc, #152]	; (8004154 <DMA_SetConfig+0x250>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d009      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a24      	ldr	r2, [pc, #144]	; (8004158 <DMA_SetConfig+0x254>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <DMA_SetConfig+0x1d0>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a23      	ldr	r2, [pc, #140]	; (800415c <DMA_SetConfig+0x258>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d101      	bne.n	80040d8 <DMA_SetConfig+0x1d4>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <DMA_SetConfig+0x1d6>
 80040d8:	2300      	movs	r3, #0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d059      	beq.n	8004192 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	223f      	movs	r2, #63	; 0x3f
 80040e8:	409a      	lsls	r2, r3
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	d138      	bne.n	8004180 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800411e:	e086      	b.n	800422e <DMA_SetConfig+0x32a>
 8004120:	40020010 	.word	0x40020010
 8004124:	40020028 	.word	0x40020028
 8004128:	40020040 	.word	0x40020040
 800412c:	40020058 	.word	0x40020058
 8004130:	40020070 	.word	0x40020070
 8004134:	40020088 	.word	0x40020088
 8004138:	400200a0 	.word	0x400200a0
 800413c:	400200b8 	.word	0x400200b8
 8004140:	40020410 	.word	0x40020410
 8004144:	40020428 	.word	0x40020428
 8004148:	40020440 	.word	0x40020440
 800414c:	40020458 	.word	0x40020458
 8004150:	40020470 	.word	0x40020470
 8004154:	40020488 	.word	0x40020488
 8004158:	400204a0 	.word	0x400204a0
 800415c:	400204b8 	.word	0x400204b8
 8004160:	58025408 	.word	0x58025408
 8004164:	5802541c 	.word	0x5802541c
 8004168:	58025430 	.word	0x58025430
 800416c:	58025444 	.word	0x58025444
 8004170:	58025458 	.word	0x58025458
 8004174:	5802546c 	.word	0x5802546c
 8004178:	58025480 	.word	0x58025480
 800417c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	60da      	str	r2, [r3, #12]
}
 8004190:	e04d      	b.n	800422e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a29      	ldr	r2, [pc, #164]	; (800423c <DMA_SetConfig+0x338>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d022      	beq.n	80041e2 <DMA_SetConfig+0x2de>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a27      	ldr	r2, [pc, #156]	; (8004240 <DMA_SetConfig+0x33c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01d      	beq.n	80041e2 <DMA_SetConfig+0x2de>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a26      	ldr	r2, [pc, #152]	; (8004244 <DMA_SetConfig+0x340>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d018      	beq.n	80041e2 <DMA_SetConfig+0x2de>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a24      	ldr	r2, [pc, #144]	; (8004248 <DMA_SetConfig+0x344>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <DMA_SetConfig+0x2de>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a23      	ldr	r2, [pc, #140]	; (800424c <DMA_SetConfig+0x348>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00e      	beq.n	80041e2 <DMA_SetConfig+0x2de>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a21      	ldr	r2, [pc, #132]	; (8004250 <DMA_SetConfig+0x34c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d009      	beq.n	80041e2 <DMA_SetConfig+0x2de>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a20      	ldr	r2, [pc, #128]	; (8004254 <DMA_SetConfig+0x350>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d004      	beq.n	80041e2 <DMA_SetConfig+0x2de>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <DMA_SetConfig+0x354>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d101      	bne.n	80041e6 <DMA_SetConfig+0x2e2>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <DMA_SetConfig+0x2e4>
 80041e6:	2300      	movs	r3, #0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	2201      	movs	r2, #1
 80041f6:	409a      	lsls	r2, r3
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d108      	bne.n	800421e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	60da      	str	r2, [r3, #12]
}
 800421c:	e007      	b.n	800422e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	60da      	str	r2, [r3, #12]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	58025408 	.word	0x58025408
 8004240:	5802541c 	.word	0x5802541c
 8004244:	58025430 	.word	0x58025430
 8004248:	58025444 	.word	0x58025444
 800424c:	58025458 	.word	0x58025458
 8004250:	5802546c 	.word	0x5802546c
 8004254:	58025480 	.word	0x58025480
 8004258:	58025494 	.word	0x58025494

0800425c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a42      	ldr	r2, [pc, #264]	; (8004374 <DMA_CalcBaseAndBitshift+0x118>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d04a      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a41      	ldr	r2, [pc, #260]	; (8004378 <DMA_CalcBaseAndBitshift+0x11c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d045      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a3f      	ldr	r2, [pc, #252]	; (800437c <DMA_CalcBaseAndBitshift+0x120>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d040      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a3e      	ldr	r2, [pc, #248]	; (8004380 <DMA_CalcBaseAndBitshift+0x124>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d03b      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a3c      	ldr	r2, [pc, #240]	; (8004384 <DMA_CalcBaseAndBitshift+0x128>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d036      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a3b      	ldr	r2, [pc, #236]	; (8004388 <DMA_CalcBaseAndBitshift+0x12c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d031      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a39      	ldr	r2, [pc, #228]	; (800438c <DMA_CalcBaseAndBitshift+0x130>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d02c      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a38      	ldr	r2, [pc, #224]	; (8004390 <DMA_CalcBaseAndBitshift+0x134>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d027      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a36      	ldr	r2, [pc, #216]	; (8004394 <DMA_CalcBaseAndBitshift+0x138>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d022      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a35      	ldr	r2, [pc, #212]	; (8004398 <DMA_CalcBaseAndBitshift+0x13c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d01d      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a33      	ldr	r2, [pc, #204]	; (800439c <DMA_CalcBaseAndBitshift+0x140>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d018      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a32      	ldr	r2, [pc, #200]	; (80043a0 <DMA_CalcBaseAndBitshift+0x144>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d013      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a30      	ldr	r2, [pc, #192]	; (80043a4 <DMA_CalcBaseAndBitshift+0x148>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00e      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a2f      	ldr	r2, [pc, #188]	; (80043a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d009      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a2d      	ldr	r2, [pc, #180]	; (80043ac <DMA_CalcBaseAndBitshift+0x150>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <DMA_CalcBaseAndBitshift+0xa8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a2c      	ldr	r2, [pc, #176]	; (80043b0 <DMA_CalcBaseAndBitshift+0x154>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <DMA_CalcBaseAndBitshift+0xac>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <DMA_CalcBaseAndBitshift+0xae>
 8004308:	2300      	movs	r3, #0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d024      	beq.n	8004358 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	3b10      	subs	r3, #16
 8004316:	4a27      	ldr	r2, [pc, #156]	; (80043b4 <DMA_CalcBaseAndBitshift+0x158>)
 8004318:	fba2 2303 	umull	r2, r3, r2, r3
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	4a24      	ldr	r2, [pc, #144]	; (80043b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004328:	5cd3      	ldrb	r3, [r2, r3]
 800432a:	461a      	mov	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b03      	cmp	r3, #3
 8004334:	d908      	bls.n	8004348 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	4b1f      	ldr	r3, [pc, #124]	; (80043bc <DMA_CalcBaseAndBitshift+0x160>)
 800433e:	4013      	ands	r3, r2
 8004340:	1d1a      	adds	r2, r3, #4
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	659a      	str	r2, [r3, #88]	; 0x58
 8004346:	e00d      	b.n	8004364 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <DMA_CalcBaseAndBitshift+0x160>)
 8004350:	4013      	ands	r3, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6593      	str	r3, [r2, #88]	; 0x58
 8004356:	e005      	b.n	8004364 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40020010 	.word	0x40020010
 8004378:	40020028 	.word	0x40020028
 800437c:	40020040 	.word	0x40020040
 8004380:	40020058 	.word	0x40020058
 8004384:	40020070 	.word	0x40020070
 8004388:	40020088 	.word	0x40020088
 800438c:	400200a0 	.word	0x400200a0
 8004390:	400200b8 	.word	0x400200b8
 8004394:	40020410 	.word	0x40020410
 8004398:	40020428 	.word	0x40020428
 800439c:	40020440 	.word	0x40020440
 80043a0:	40020458 	.word	0x40020458
 80043a4:	40020470 	.word	0x40020470
 80043a8:	40020488 	.word	0x40020488
 80043ac:	400204a0 	.word	0x400204a0
 80043b0:	400204b8 	.word	0x400204b8
 80043b4:	aaaaaaab 	.word	0xaaaaaaab
 80043b8:	080117a8 	.word	0x080117a8
 80043bc:	fffffc00 	.word	0xfffffc00

080043c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d120      	bne.n	8004416 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d858      	bhi.n	800448e <DMA_CheckFifoParam+0xce>
 80043dc:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <DMA_CheckFifoParam+0x24>)
 80043de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e2:	bf00      	nop
 80043e4:	080043f5 	.word	0x080043f5
 80043e8:	08004407 	.word	0x08004407
 80043ec:	080043f5 	.word	0x080043f5
 80043f0:	0800448f 	.word	0x0800448f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d048      	beq.n	8004492 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004404:	e045      	b.n	8004492 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800440e:	d142      	bne.n	8004496 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004414:	e03f      	b.n	8004496 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800441e:	d123      	bne.n	8004468 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	2b03      	cmp	r3, #3
 8004426:	d838      	bhi.n	800449a <DMA_CheckFifoParam+0xda>
 8004428:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <DMA_CheckFifoParam+0x70>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	08004441 	.word	0x08004441
 8004434:	08004447 	.word	0x08004447
 8004438:	08004441 	.word	0x08004441
 800443c:	08004459 	.word	0x08004459
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
        break;
 8004444:	e030      	b.n	80044a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d025      	beq.n	800449e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004456:	e022      	b.n	800449e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004460:	d11f      	bne.n	80044a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004466:	e01c      	b.n	80044a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	2b02      	cmp	r3, #2
 800446e:	d902      	bls.n	8004476 <DMA_CheckFifoParam+0xb6>
 8004470:	2b03      	cmp	r3, #3
 8004472:	d003      	beq.n	800447c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004474:	e018      	b.n	80044a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
        break;
 800447a:	e015      	b.n	80044a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00e      	beq.n	80044a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
    break;
 800448c:	e00b      	b.n	80044a6 <DMA_CheckFifoParam+0xe6>
        break;
 800448e:	bf00      	nop
 8004490:	e00a      	b.n	80044a8 <DMA_CheckFifoParam+0xe8>
        break;
 8004492:	bf00      	nop
 8004494:	e008      	b.n	80044a8 <DMA_CheckFifoParam+0xe8>
        break;
 8004496:	bf00      	nop
 8004498:	e006      	b.n	80044a8 <DMA_CheckFifoParam+0xe8>
        break;
 800449a:	bf00      	nop
 800449c:	e004      	b.n	80044a8 <DMA_CheckFifoParam+0xe8>
        break;
 800449e:	bf00      	nop
 80044a0:	e002      	b.n	80044a8 <DMA_CheckFifoParam+0xe8>
        break;
 80044a2:	bf00      	nop
 80044a4:	e000      	b.n	80044a8 <DMA_CheckFifoParam+0xe8>
    break;
 80044a6:	bf00      	nop
    }
  }

  return status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop

080044b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a38      	ldr	r2, [pc, #224]	; (80045ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d022      	beq.n	8004516 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a36      	ldr	r2, [pc, #216]	; (80045b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01d      	beq.n	8004516 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a35      	ldr	r2, [pc, #212]	; (80045b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d018      	beq.n	8004516 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a33      	ldr	r2, [pc, #204]	; (80045b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a32      	ldr	r2, [pc, #200]	; (80045bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00e      	beq.n	8004516 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a30      	ldr	r2, [pc, #192]	; (80045c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d009      	beq.n	8004516 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2f      	ldr	r2, [pc, #188]	; (80045c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d004      	beq.n	8004516 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a2d      	ldr	r2, [pc, #180]	; (80045c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d101      	bne.n	800451a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800451a:	2300      	movs	r3, #0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01a      	beq.n	8004556 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	3b08      	subs	r3, #8
 8004528:	4a28      	ldr	r2, [pc, #160]	; (80045cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	461a      	mov	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a24      	ldr	r2, [pc, #144]	; (80045d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004544:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f003 031f 	and.w	r3, r3, #31
 800454c:	2201      	movs	r2, #1
 800454e:	409a      	lsls	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004554:	e024      	b.n	80045a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	3b10      	subs	r3, #16
 800455e:	4a1e      	ldr	r2, [pc, #120]	; (80045d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004560:	fba2 2303 	umull	r2, r3, r2, r3
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d806      	bhi.n	800457e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4a1b      	ldr	r2, [pc, #108]	; (80045e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d902      	bls.n	800457e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3308      	adds	r3, #8
 800457c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	461a      	mov	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a16      	ldr	r2, [pc, #88]	; (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004590:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	2201      	movs	r2, #1
 800459a:	409a      	lsls	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	58025408 	.word	0x58025408
 80045b0:	5802541c 	.word	0x5802541c
 80045b4:	58025430 	.word	0x58025430
 80045b8:	58025444 	.word	0x58025444
 80045bc:	58025458 	.word	0x58025458
 80045c0:	5802546c 	.word	0x5802546c
 80045c4:	58025480 	.word	0x58025480
 80045c8:	58025494 	.word	0x58025494
 80045cc:	cccccccd 	.word	0xcccccccd
 80045d0:	16009600 	.word	0x16009600
 80045d4:	58025880 	.word	0x58025880
 80045d8:	aaaaaaab 	.word	0xaaaaaaab
 80045dc:	400204b8 	.word	0x400204b8
 80045e0:	4002040f 	.word	0x4002040f
 80045e4:	10008200 	.word	0x10008200
 80045e8:	40020880 	.word	0x40020880

080045ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d04a      	beq.n	8004698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d847      	bhi.n	8004698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a25      	ldr	r2, [pc, #148]	; (80046a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d022      	beq.n	8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a24      	ldr	r2, [pc, #144]	; (80046a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d01d      	beq.n	8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a22      	ldr	r2, [pc, #136]	; (80046ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d018      	beq.n	8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a21      	ldr	r2, [pc, #132]	; (80046b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1f      	ldr	r2, [pc, #124]	; (80046b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00e      	beq.n	8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1e      	ldr	r2, [pc, #120]	; (80046b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d009      	beq.n	8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1b      	ldr	r2, [pc, #108]	; (80046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d101      	bne.n	800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800465c:	2300      	movs	r3, #0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4b17      	ldr	r3, [pc, #92]	; (80046c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	461a      	mov	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004674:	671a      	str	r2, [r3, #112]	; 0x70
 8004676:	e009      	b.n	800468c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4b14      	ldr	r3, [pc, #80]	; (80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	461a      	mov	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a11      	ldr	r2, [pc, #68]	; (80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800468a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3b01      	subs	r3, #1
 8004690:	2201      	movs	r2, #1
 8004692:	409a      	lsls	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	58025408 	.word	0x58025408
 80046a8:	5802541c 	.word	0x5802541c
 80046ac:	58025430 	.word	0x58025430
 80046b0:	58025444 	.word	0x58025444
 80046b4:	58025458 	.word	0x58025458
 80046b8:	5802546c 	.word	0x5802546c
 80046bc:	58025480 	.word	0x58025480
 80046c0:	58025494 	.word	0x58025494
 80046c4:	1600963f 	.word	0x1600963f
 80046c8:	58025940 	.word	0x58025940
 80046cc:	1000823f 	.word	0x1000823f
 80046d0:	40020940 	.word	0x40020940

080046d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b089      	sub	sp, #36	; 0x24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80046e2:	4b86      	ldr	r3, [pc, #536]	; (80048fc <HAL_GPIO_Init+0x228>)
 80046e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046e6:	e18c      	b.n	8004a02 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	2101      	movs	r1, #1
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	fa01 f303 	lsl.w	r3, r1, r3
 80046f4:	4013      	ands	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 817e 	beq.w	80049fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	2b01      	cmp	r3, #1
 800470a:	d005      	beq.n	8004718 <HAL_GPIO_Init+0x44>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d130      	bne.n	800477a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	2203      	movs	r2, #3
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800474e:	2201      	movs	r2, #1
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4013      	ands	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	091b      	lsrs	r3, r3, #4
 8004764:	f003 0201 	and.w	r2, r3, #1
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b03      	cmp	r3, #3
 8004784:	d017      	beq.n	80047b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	2203      	movs	r2, #3
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4013      	ands	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d123      	bne.n	800480a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	08da      	lsrs	r2, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3208      	adds	r2, #8
 80047ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	220f      	movs	r2, #15
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43db      	mvns	r3, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	08da      	lsrs	r2, r3, #3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3208      	adds	r2, #8
 8004804:	69b9      	ldr	r1, [r7, #24]
 8004806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	2203      	movs	r2, #3
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43db      	mvns	r3, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4013      	ands	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f003 0203 	and.w	r2, r3, #3
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4313      	orrs	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80d8 	beq.w	80049fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800484c:	4b2c      	ldr	r3, [pc, #176]	; (8004900 <HAL_GPIO_Init+0x22c>)
 800484e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004852:	4a2b      	ldr	r2, [pc, #172]	; (8004900 <HAL_GPIO_Init+0x22c>)
 8004854:	f043 0302 	orr.w	r3, r3, #2
 8004858:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800485c:	4b28      	ldr	r3, [pc, #160]	; (8004900 <HAL_GPIO_Init+0x22c>)
 800485e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800486a:	4a26      	ldr	r2, [pc, #152]	; (8004904 <HAL_GPIO_Init+0x230>)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	089b      	lsrs	r3, r3, #2
 8004870:	3302      	adds	r3, #2
 8004872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	220f      	movs	r2, #15
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a1d      	ldr	r2, [pc, #116]	; (8004908 <HAL_GPIO_Init+0x234>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d04a      	beq.n	800492c <HAL_GPIO_Init+0x258>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a1c      	ldr	r2, [pc, #112]	; (800490c <HAL_GPIO_Init+0x238>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d02b      	beq.n	80048f6 <HAL_GPIO_Init+0x222>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <HAL_GPIO_Init+0x23c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d025      	beq.n	80048f2 <HAL_GPIO_Init+0x21e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <HAL_GPIO_Init+0x240>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01f      	beq.n	80048ee <HAL_GPIO_Init+0x21a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a19      	ldr	r2, [pc, #100]	; (8004918 <HAL_GPIO_Init+0x244>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d019      	beq.n	80048ea <HAL_GPIO_Init+0x216>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a18      	ldr	r2, [pc, #96]	; (800491c <HAL_GPIO_Init+0x248>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_GPIO_Init+0x212>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a17      	ldr	r2, [pc, #92]	; (8004920 <HAL_GPIO_Init+0x24c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00d      	beq.n	80048e2 <HAL_GPIO_Init+0x20e>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a16      	ldr	r2, [pc, #88]	; (8004924 <HAL_GPIO_Init+0x250>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <HAL_GPIO_Init+0x20a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a15      	ldr	r2, [pc, #84]	; (8004928 <HAL_GPIO_Init+0x254>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <HAL_GPIO_Init+0x206>
 80048d6:	2309      	movs	r3, #9
 80048d8:	e029      	b.n	800492e <HAL_GPIO_Init+0x25a>
 80048da:	230a      	movs	r3, #10
 80048dc:	e027      	b.n	800492e <HAL_GPIO_Init+0x25a>
 80048de:	2307      	movs	r3, #7
 80048e0:	e025      	b.n	800492e <HAL_GPIO_Init+0x25a>
 80048e2:	2306      	movs	r3, #6
 80048e4:	e023      	b.n	800492e <HAL_GPIO_Init+0x25a>
 80048e6:	2305      	movs	r3, #5
 80048e8:	e021      	b.n	800492e <HAL_GPIO_Init+0x25a>
 80048ea:	2304      	movs	r3, #4
 80048ec:	e01f      	b.n	800492e <HAL_GPIO_Init+0x25a>
 80048ee:	2303      	movs	r3, #3
 80048f0:	e01d      	b.n	800492e <HAL_GPIO_Init+0x25a>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e01b      	b.n	800492e <HAL_GPIO_Init+0x25a>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e019      	b.n	800492e <HAL_GPIO_Init+0x25a>
 80048fa:	bf00      	nop
 80048fc:	58000080 	.word	0x58000080
 8004900:	58024400 	.word	0x58024400
 8004904:	58000400 	.word	0x58000400
 8004908:	58020000 	.word	0x58020000
 800490c:	58020400 	.word	0x58020400
 8004910:	58020800 	.word	0x58020800
 8004914:	58020c00 	.word	0x58020c00
 8004918:	58021000 	.word	0x58021000
 800491c:	58021400 	.word	0x58021400
 8004920:	58021800 	.word	0x58021800
 8004924:	58021c00 	.word	0x58021c00
 8004928:	58022400 	.word	0x58022400
 800492c:	2300      	movs	r3, #0
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	f002 0203 	and.w	r2, r2, #3
 8004934:	0092      	lsls	r2, r2, #2
 8004936:	4093      	lsls	r3, r2
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800493e:	4938      	ldr	r1, [pc, #224]	; (8004a20 <HAL_GPIO_Init+0x34c>)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	089b      	lsrs	r3, r3, #2
 8004944:	3302      	adds	r3, #2
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800494c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	43db      	mvns	r3, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4013      	ands	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	43db      	mvns	r3, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	43db      	mvns	r3, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4013      	ands	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	3301      	adds	r3, #1
 8004a00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f47f ae6b 	bne.w	80046e8 <HAL_GPIO_Init+0x14>
  }
}
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	3724      	adds	r7, #36	; 0x24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	58000400 	.word	0x58000400

08004a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]
 8004a30:	4613      	mov	r3, r2
 8004a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a34:	787b      	ldrb	r3, [r7, #1]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a3a:	887a      	ldrh	r2, [r7, #2]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a40:	e003      	b.n	8004a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a42:	887b      	ldrh	r3, [r7, #2]
 8004a44:	041a      	lsls	r2, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	619a      	str	r2, [r3, #24]
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
	...

08004a58 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004a64:	f7fd fc16 	bl	8002294 <HAL_GetTick>
 8004a68:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
 8004a74:	e0a5      	b.n	8004bc2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f040 809e 	bne.w	8004bc2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fc fee2 	bl	8001850 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004a8c:	f241 3188 	movw	r1, #5000	; 0x1388
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f89d 	bl	8004bd0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	4b4b      	ldr	r3, [pc, #300]	; (8004bcc <HAL_OSPI_Init+0x174>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	68d1      	ldr	r1, [r2, #12]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6912      	ldr	r2, [r2, #16]
 8004aa8:	3a01      	subs	r2, #1
 8004aaa:	0412      	lsls	r2, r2, #16
 8004aac:	4311      	orrs	r1, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6952      	ldr	r2, [r2, #20]
 8004ab2:	3a01      	subs	r2, #1
 8004ab4:	0212      	lsls	r2, r2, #8
 8004ab6:	4311      	orrs	r1, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004abc:	4311      	orrs	r1, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	69d2      	ldr	r2, [r2, #28]
 8004ac2:	4311      	orrs	r1, r2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1a      	ldr	r2, [r3, #32]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004afc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	021a      	lsls	r2, r3, #8
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2200      	movs	r2, #0
 8004b22:	2120      	movs	r1, #32
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fd4b 	bl	80055c0 <OSPI_WaitFlagStateUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d146      	bne.n	8004bc2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	1e5a      	subs	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b6a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d107      	bne.n	8004baa <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0202 	orr.w	r2, r2, #2
 8004ba8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bb2:	d103      	bne.n	8004bbc <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	651a      	str	r2, [r3, #80]	; 0x50
 8004bba:	e002      	b.n	8004bc2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	f8e0f8f4 	.word	0xf8e0f8f4

08004bd0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b094      	sub	sp, #80	; 0x50
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a9d      	ldr	r2, [pc, #628]	; (8004e84 <HAL_OSPIM_Config+0x294>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d105      	bne.n	8004c1e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8004c1c:	e004      	b.n	8004c28 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004c2e:	e01d      	b.n	8004c6c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004c30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c34:	3301      	adds	r3, #1
 8004c36:	b2d8      	uxtb	r0, r3
 8004c38:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004c3c:	f107 0114 	add.w	r1, r7, #20
 8004c40:	4613      	mov	r3, r2
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	4413      	add	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	440b      	add	r3, r1
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	f000 fcf0 	bl	8005630 <OSPIM_GetConfig>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2208      	movs	r2, #8
 8004c60:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004c62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c66:	3301      	adds	r3, #1
 8004c68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004c6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d9dd      	bls.n	8004c30 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8004c74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f040 8495 	bne.w	80055a8 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004c7e:	4b81      	ldr	r3, [pc, #516]	; (8004e84 <HAL_OSPIM_Config+0x294>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004c8a:	4b7e      	ldr	r3, [pc, #504]	; (8004e84 <HAL_OSPIM_Config+0x294>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a7d      	ldr	r2, [pc, #500]	; (8004e84 <HAL_OSPIM_Config+0x294>)
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004c96:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004ca2:	4b79      	ldr	r3, [pc, #484]	; (8004e88 <HAL_OSPIM_Config+0x298>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004cae:	4b76      	ldr	r3, [pc, #472]	; (8004e88 <HAL_OSPIM_Config+0x298>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a75      	ldr	r2, [pc, #468]	; (8004e88 <HAL_OSPIM_Config+0x298>)
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004cba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004cbe:	f043 0302 	orr.w	r3, r3, #2
 8004cc2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004cc6:	4971      	ldr	r1, [pc, #452]	; (8004e8c <HAL_OSPIM_Config+0x29c>)
 8004cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cca:	4613      	mov	r3, r2
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	4413      	add	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	3350      	adds	r3, #80	; 0x50
 8004cd4:	443b      	add	r3, r7
 8004cd6:	3b34      	subs	r3, #52	; 0x34
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	6859      	ldr	r1, [r3, #4]
 8004ce2:	486a      	ldr	r0, [pc, #424]	; (8004e8c <HAL_OSPIM_Config+0x29c>)
 8004ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4413      	add	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	3350      	adds	r3, #80	; 0x50
 8004cf0:	443b      	add	r3, r7
 8004cf2:	3b34      	subs	r3, #52	; 0x34
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4403      	add	r3, r0
 8004d00:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004d02:	4b62      	ldr	r3, [pc, #392]	; (8004e8c <HAL_OSPIM_Config+0x29c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 80c0 	beq.w	8004e90 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004d10:	4b5e      	ldr	r3, [pc, #376]	; (8004e8c <HAL_OSPIM_Config+0x29c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a5d      	ldr	r2, [pc, #372]	; (8004e8c <HAL_OSPIM_Config+0x29c>)
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8004d1c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	f040 8162 	bne.w	8004fea <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8004d26:	4959      	ldr	r1, [pc, #356]	; (8004e8c <HAL_OSPIM_Config+0x29c>)
 8004d28:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	3350      	adds	r3, #80	; 0x50
 8004d36:	443b      	add	r3, r7
 8004d38:	3b3c      	subs	r3, #60	; 0x3c
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	4851      	ldr	r0, [pc, #324]	; (8004e8c <HAL_OSPIM_Config+0x29c>)
 8004d46:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	4413      	add	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	3350      	adds	r3, #80	; 0x50
 8004d54:	443b      	add	r3, r7
 8004d56:	3b3c      	subs	r3, #60	; 0x3c
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	f041 0202 	orr.w	r2, r1, #2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4403      	add	r3, r0
 8004d64:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004d66:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4413      	add	r3, r2
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	3350      	adds	r3, #80	; 0x50
 8004d74:	443b      	add	r3, r7
 8004d76:	3b38      	subs	r3, #56	; 0x38
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01f      	beq.n	8004dbe <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8004d7e:	4943      	ldr	r1, [pc, #268]	; (8004e8c <HAL_OSPIM_Config+0x29c>)
 8004d80:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004d84:	4613      	mov	r3, r2
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	4413      	add	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	3350      	adds	r3, #80	; 0x50
 8004d8e:	443b      	add	r3, r7
 8004d90:	3b38      	subs	r3, #56	; 0x38
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	483b      	ldr	r0, [pc, #236]	; (8004e8c <HAL_OSPIM_Config+0x29c>)
 8004d9e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004da2:	4613      	mov	r3, r2
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	4413      	add	r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	3350      	adds	r3, #80	; 0x50
 8004dac:	443b      	add	r3, r7
 8004dae:	3b38      	subs	r3, #56	; 0x38
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	f041 0220 	orr.w	r2, r1, #32
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4403      	add	r3, r0
 8004dbc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004dbe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	4413      	add	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	3350      	adds	r3, #80	; 0x50
 8004dcc:	443b      	add	r3, r7
 8004dce:	3b30      	subs	r3, #48	; 0x30
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d023      	beq.n	8004e1e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8004dd6:	492d      	ldr	r1, [pc, #180]	; (8004e8c <HAL_OSPIM_Config+0x29c>)
 8004dd8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004ddc:	4613      	mov	r3, r2
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	4413      	add	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	3350      	adds	r3, #80	; 0x50
 8004de6:	443b      	add	r3, r7
 8004de8:	3b30      	subs	r3, #48	; 0x30
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	6859      	ldr	r1, [r3, #4]
 8004df8:	4824      	ldr	r0, [pc, #144]	; (8004e8c <HAL_OSPIM_Config+0x29c>)
 8004dfa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004dfe:	4613      	mov	r3, r2
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	4413      	add	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	3350      	adds	r3, #80	; 0x50
 8004e08:	443b      	add	r3, r7
 8004e0a:	3b30      	subs	r3, #48	; 0x30
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4403      	add	r3, r0
 8004e1c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004e1e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004e22:	4613      	mov	r3, r2
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	4413      	add	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	3350      	adds	r3, #80	; 0x50
 8004e2c:	443b      	add	r3, r7
 8004e2e:	3b2c      	subs	r3, #44	; 0x2c
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 80d9 	beq.w	8004fea <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8004e38:	4914      	ldr	r1, [pc, #80]	; (8004e8c <HAL_OSPIM_Config+0x29c>)
 8004e3a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004e3e:	4613      	mov	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	3350      	adds	r3, #80	; 0x50
 8004e48:	443b      	add	r3, r7
 8004e4a:	3b2c      	subs	r3, #44	; 0x2c
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	6859      	ldr	r1, [r3, #4]
 8004e5a:	480c      	ldr	r0, [pc, #48]	; (8004e8c <HAL_OSPIM_Config+0x29c>)
 8004e5c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004e60:	4613      	mov	r3, r2
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	4413      	add	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	3350      	adds	r3, #80	; 0x50
 8004e6a:	443b      	add	r3, r7
 8004e6c:	3b2c      	subs	r3, #44	; 0x2c
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4403      	add	r3, r0
 8004e7e:	605a      	str	r2, [r3, #4]
 8004e80:	e0b3      	b.n	8004fea <HAL_OSPIM_Config+0x3fa>
 8004e82:	bf00      	nop
 8004e84:	52005000 	.word	0x52005000
 8004e88:	5200a000 	.word	0x5200a000
 8004e8c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8004e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e92:	4613      	mov	r3, r2
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	3350      	adds	r3, #80	; 0x50
 8004e9c:	443b      	add	r3, r7
 8004e9e:	3b3c      	subs	r3, #60	; 0x3c
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 80a1 	beq.w	8004fea <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004ea8:	4993      	ldr	r1, [pc, #588]	; (80050f8 <HAL_OSPIM_Config+0x508>)
 8004eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eac:	4613      	mov	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4413      	add	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	3350      	adds	r3, #80	; 0x50
 8004eb6:	443b      	add	r3, r7
 8004eb8:	3b3c      	subs	r3, #60	; 0x3c
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	6859      	ldr	r1, [r3, #4]
 8004ec4:	488c      	ldr	r0, [pc, #560]	; (80050f8 <HAL_OSPIM_Config+0x508>)
 8004ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ec8:	4613      	mov	r3, r2
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	4413      	add	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	3350      	adds	r3, #80	; 0x50
 8004ed2:	443b      	add	r3, r7
 8004ed4:	3b3c      	subs	r3, #60	; 0x3c
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	f021 0201 	bic.w	r2, r1, #1
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4403      	add	r3, r0
 8004ee2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	4413      	add	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	3350      	adds	r3, #80	; 0x50
 8004ef0:	443b      	add	r3, r7
 8004ef2:	3b38      	subs	r3, #56	; 0x38
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01d      	beq.n	8004f36 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004efa:	497f      	ldr	r1, [pc, #508]	; (80050f8 <HAL_OSPIM_Config+0x508>)
 8004efc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004efe:	4613      	mov	r3, r2
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	4413      	add	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	3350      	adds	r3, #80	; 0x50
 8004f08:	443b      	add	r3, r7
 8004f0a:	3b38      	subs	r3, #56	; 0x38
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	6859      	ldr	r1, [r3, #4]
 8004f16:	4878      	ldr	r0, [pc, #480]	; (80050f8 <HAL_OSPIM_Config+0x508>)
 8004f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	4413      	add	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	3350      	adds	r3, #80	; 0x50
 8004f24:	443b      	add	r3, r7
 8004f26:	3b38      	subs	r3, #56	; 0x38
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	f021 0210 	bic.w	r2, r1, #16
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4403      	add	r3, r0
 8004f34:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f38:	4613      	mov	r3, r2
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	4413      	add	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	3350      	adds	r3, #80	; 0x50
 8004f42:	443b      	add	r3, r7
 8004f44:	3b30      	subs	r3, #48	; 0x30
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d021      	beq.n	8004f90 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004f4c:	496a      	ldr	r1, [pc, #424]	; (80050f8 <HAL_OSPIM_Config+0x508>)
 8004f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f50:	4613      	mov	r3, r2
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4413      	add	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	3350      	adds	r3, #80	; 0x50
 8004f5a:	443b      	add	r3, r7
 8004f5c:	3b30      	subs	r3, #48	; 0x30
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	6859      	ldr	r1, [r3, #4]
 8004f6c:	4862      	ldr	r0, [pc, #392]	; (80050f8 <HAL_OSPIM_Config+0x508>)
 8004f6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f70:	4613      	mov	r3, r2
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	4413      	add	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	3350      	adds	r3, #80	; 0x50
 8004f7a:	443b      	add	r3, r7
 8004f7c:	3b30      	subs	r3, #48	; 0x30
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4403      	add	r3, r0
 8004f8e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f92:	4613      	mov	r3, r2
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	4413      	add	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	3350      	adds	r3, #80	; 0x50
 8004f9c:	443b      	add	r3, r7
 8004f9e:	3b2c      	subs	r3, #44	; 0x2c
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d021      	beq.n	8004fea <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004fa6:	4954      	ldr	r1, [pc, #336]	; (80050f8 <HAL_OSPIM_Config+0x508>)
 8004fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004faa:	4613      	mov	r3, r2
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4413      	add	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	3350      	adds	r3, #80	; 0x50
 8004fb4:	443b      	add	r3, r7
 8004fb6:	3b2c      	subs	r3, #44	; 0x2c
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	6859      	ldr	r1, [r3, #4]
 8004fc6:	484c      	ldr	r0, [pc, #304]	; (80050f8 <HAL_OSPIM_Config+0x508>)
 8004fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fca:	4613      	mov	r3, r2
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	4413      	add	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	3350      	adds	r3, #80	; 0x50
 8004fd4:	443b      	add	r3, r7
 8004fd6:	3b2c      	subs	r3, #44	; 0x2c
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4403      	add	r3, r0
 8004fe8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6819      	ldr	r1, [r3, #0]
 8004fee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	4413      	add	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	3350      	adds	r3, #80	; 0x50
 8004ffc:	443b      	add	r3, r7
 8004ffe:	3b3c      	subs	r3, #60	; 0x3c
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4299      	cmp	r1, r3
 8005004:	d038      	beq.n	8005078 <HAL_OSPIM_Config+0x488>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	6859      	ldr	r1, [r3, #4]
 800500a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800500e:	4613      	mov	r3, r2
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	4413      	add	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	3350      	adds	r3, #80	; 0x50
 8005018:	443b      	add	r3, r7
 800501a:	3b38      	subs	r3, #56	; 0x38
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4299      	cmp	r1, r3
 8005020:	d02a      	beq.n	8005078 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	6899      	ldr	r1, [r3, #8]
 8005026:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800502a:	4613      	mov	r3, r2
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4413      	add	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	3350      	adds	r3, #80	; 0x50
 8005034:	443b      	add	r3, r7
 8005036:	3b34      	subs	r3, #52	; 0x34
 8005038:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800503a:	4299      	cmp	r1, r3
 800503c:	d01c      	beq.n	8005078 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	68d9      	ldr	r1, [r3, #12]
 8005042:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005046:	4613      	mov	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	3350      	adds	r3, #80	; 0x50
 8005050:	443b      	add	r3, r7
 8005052:	3b30      	subs	r3, #48	; 0x30
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4299      	cmp	r1, r3
 8005058:	d00e      	beq.n	8005078 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	6919      	ldr	r1, [r3, #16]
 800505e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005062:	4613      	mov	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4413      	add	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	3350      	adds	r3, #80	; 0x50
 800506c:	443b      	add	r3, r7
 800506e:	3b2c      	subs	r3, #44	; 0x2c
 8005070:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005072:	4299      	cmp	r1, r3
 8005074:	f040 810e 	bne.w	8005294 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	6819      	ldr	r1, [r3, #0]
 800507c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005080:	4613      	mov	r3, r2
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	4413      	add	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	3350      	adds	r3, #80	; 0x50
 800508a:	443b      	add	r3, r7
 800508c:	3b3c      	subs	r3, #60	; 0x3c
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4299      	cmp	r1, r3
 8005092:	d133      	bne.n	80050fc <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	6859      	ldr	r1, [r3, #4]
 8005098:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	3350      	adds	r3, #80	; 0x50
 80050a6:	443b      	add	r3, r7
 80050a8:	3b38      	subs	r3, #56	; 0x38
 80050aa:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80050ac:	4299      	cmp	r1, r3
 80050ae:	d125      	bne.n	80050fc <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	68d9      	ldr	r1, [r3, #12]
 80050b4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80050b8:	4613      	mov	r3, r2
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	4413      	add	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	3350      	adds	r3, #80	; 0x50
 80050c2:	443b      	add	r3, r7
 80050c4:	3b30      	subs	r3, #48	; 0x30
 80050c6:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80050c8:	4299      	cmp	r1, r3
 80050ca:	d117      	bne.n	80050fc <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6919      	ldr	r1, [r3, #16]
 80050d0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80050d4:	4613      	mov	r3, r2
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	4413      	add	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	3350      	adds	r3, #80	; 0x50
 80050de:	443b      	add	r3, r7
 80050e0:	3b2c      	subs	r3, #44	; 0x2c
 80050e2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80050e4:	4299      	cmp	r1, r3
 80050e6:	d109      	bne.n	80050fc <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80050e8:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <HAL_OSPIM_Config+0x508>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a02      	ldr	r2, [pc, #8]	; (80050f8 <HAL_OSPIM_Config+0x508>)
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	e0ce      	b.n	8005294 <HAL_OSPIM_Config+0x6a4>
 80050f6:	bf00      	nop
 80050f8:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80050fc:	49bb      	ldr	r1, [pc, #748]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 80050fe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005102:	4613      	mov	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	3350      	adds	r3, #80	; 0x50
 800510c:	443b      	add	r3, r7
 800510e:	3b3c      	subs	r3, #60	; 0x3c
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3b01      	subs	r3, #1
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	6859      	ldr	r1, [r3, #4]
 800511a:	48b4      	ldr	r0, [pc, #720]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 800511c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005120:	4613      	mov	r3, r2
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	4413      	add	r3, r2
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	3350      	adds	r3, #80	; 0x50
 800512a:	443b      	add	r3, r7
 800512c:	3b3c      	subs	r3, #60	; 0x3c
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3b01      	subs	r3, #1
 8005132:	f021 0201 	bic.w	r2, r1, #1
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4403      	add	r3, r0
 800513a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800513c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005140:	4613      	mov	r3, r2
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	4413      	add	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	3350      	adds	r3, #80	; 0x50
 800514a:	443b      	add	r3, r7
 800514c:	3b38      	subs	r3, #56	; 0x38
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01f      	beq.n	8005194 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005154:	49a5      	ldr	r1, [pc, #660]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 8005156:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800515a:	4613      	mov	r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4413      	add	r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	3350      	adds	r3, #80	; 0x50
 8005164:	443b      	add	r3, r7
 8005166:	3b38      	subs	r3, #56	; 0x38
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3b01      	subs	r3, #1
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	440b      	add	r3, r1
 8005170:	6859      	ldr	r1, [r3, #4]
 8005172:	489e      	ldr	r0, [pc, #632]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 8005174:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005178:	4613      	mov	r3, r2
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	4413      	add	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	3350      	adds	r3, #80	; 0x50
 8005182:	443b      	add	r3, r7
 8005184:	3b38      	subs	r3, #56	; 0x38
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3b01      	subs	r3, #1
 800518a:	f021 0210 	bic.w	r2, r1, #16
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4403      	add	r3, r0
 8005192:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005194:	4995      	ldr	r1, [pc, #596]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 8005196:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800519a:	4613      	mov	r3, r2
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	4413      	add	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	3350      	adds	r3, #80	; 0x50
 80051a4:	443b      	add	r3, r7
 80051a6:	3b34      	subs	r3, #52	; 0x34
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	6859      	ldr	r1, [r3, #4]
 80051b2:	488e      	ldr	r0, [pc, #568]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 80051b4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80051b8:	4613      	mov	r3, r2
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	4413      	add	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	3350      	adds	r3, #80	; 0x50
 80051c2:	443b      	add	r3, r7
 80051c4:	3b34      	subs	r3, #52	; 0x34
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4403      	add	r3, r0
 80051d2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80051d4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80051d8:	4613      	mov	r3, r2
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	4413      	add	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	3350      	adds	r3, #80	; 0x50
 80051e2:	443b      	add	r3, r7
 80051e4:	3b30      	subs	r3, #48	; 0x30
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d023      	beq.n	8005234 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80051ec:	497f      	ldr	r1, [pc, #508]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 80051ee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80051f2:	4613      	mov	r3, r2
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	4413      	add	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	3350      	adds	r3, #80	; 0x50
 80051fc:	443b      	add	r3, r7
 80051fe:	3b30      	subs	r3, #48	; 0x30
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3b01      	subs	r3, #1
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	6859      	ldr	r1, [r3, #4]
 800520e:	4877      	ldr	r0, [pc, #476]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 8005210:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005214:	4613      	mov	r3, r2
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	4413      	add	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	3350      	adds	r3, #80	; 0x50
 800521e:	443b      	add	r3, r7
 8005220:	3b30      	subs	r3, #48	; 0x30
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3b01      	subs	r3, #1
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4403      	add	r3, r0
 8005232:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005234:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005238:	4613      	mov	r3, r2
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	4413      	add	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	3350      	adds	r3, #80	; 0x50
 8005242:	443b      	add	r3, r7
 8005244:	3b2c      	subs	r3, #44	; 0x2c
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d023      	beq.n	8005294 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800524c:	4967      	ldr	r1, [pc, #412]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 800524e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005252:	4613      	mov	r3, r2
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	4413      	add	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	3350      	adds	r3, #80	; 0x50
 800525c:	443b      	add	r3, r7
 800525e:	3b2c      	subs	r3, #44	; 0x2c
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3b01      	subs	r3, #1
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	6859      	ldr	r1, [r3, #4]
 800526e:	485f      	ldr	r0, [pc, #380]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 8005270:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005274:	4613      	mov	r3, r2
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4413      	add	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	3350      	adds	r3, #80	; 0x50
 800527e:	443b      	add	r3, r7
 8005280:	3b2c      	subs	r3, #44	; 0x2c
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3b01      	subs	r3, #1
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4403      	add	r3, r0
 8005292:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005294:	4a55      	ldr	r2, [pc, #340]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	3b01      	subs	r3, #1
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a8:	025b      	lsls	r3, r3, #9
 80052aa:	431a      	orrs	r2, r3
 80052ac:	494f      	ldr	r1, [pc, #316]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	1e5a      	subs	r2, r3, #1
 80052c4:	4b49      	ldr	r3, [pc, #292]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	0c1b      	lsrs	r3, r3, #16
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d90a      	bls.n	80052e6 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80052d0:	4b46      	ldr	r3, [pc, #280]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	3b01      	subs	r3, #1
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	4942      	ldr	r1, [pc, #264]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80052e6:	4b41      	ldr	r3, [pc, #260]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 809a 	beq.w	8005428 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80052f4:	4a3d      	ldr	r2, [pc, #244]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f023 0203 	bic.w	r2, r3, #3
 8005306:	4939      	ldr	r1, [pc, #228]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3b01      	subs	r3, #1
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d011      	beq.n	8005344 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8005320:	4a32      	ldr	r2, [pc, #200]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	3b01      	subs	r3, #1
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005332:	492e      	ldr	r1, [pc, #184]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	3b01      	subs	r3, #1
 800533a:	f042 0210 	orr.w	r2, r2, #16
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d016      	beq.n	800537e <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005350:	4a26      	ldr	r2, [pc, #152]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	3b01      	subs	r3, #1
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005366:	4921      	ldr	r1, [pc, #132]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	3b01      	subs	r3, #1
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	605a      	str	r2, [r3, #4]
 800537c:	e019      	b.n	80053b2 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d015      	beq.n	80053b2 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005386:	4a19      	ldr	r2, [pc, #100]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	3b01      	subs	r3, #1
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800539c:	4913      	ldr	r1, [pc, #76]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d018      	beq.n	80053f0 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80053be:	4a0b      	ldr	r2, [pc, #44]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80053d4:	4905      	ldr	r1, [pc, #20]	; (80053ec <HAL_OSPIM_Config+0x7fc>)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	3b01      	subs	r3, #1
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	e0c5      	b.n	8005578 <HAL_OSPIM_Config+0x988>
 80053ec:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80bf 	beq.w	8005578 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80053fa:	4a6e      	ldr	r2, [pc, #440]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	3b01      	subs	r3, #1
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005410:	4968      	ldr	r1, [pc, #416]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	3b01      	subs	r3, #1
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	e0a7      	b.n	8005578 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005428:	4a62      	ldr	r2, [pc, #392]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3b01      	subs	r3, #1
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f023 0203 	bic.w	r2, r3, #3
 800543a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	431a      	orrs	r2, r3
 8005440:	495c      	ldr	r1, [pc, #368]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3b01      	subs	r3, #1
 8005448:	f042 0201 	orr.w	r2, r2, #1
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d014      	beq.n	8005484 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800545a:	4a56      	ldr	r2, [pc, #344]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	3b01      	subs	r3, #1
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800546c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800546e:	015b      	lsls	r3, r3, #5
 8005470:	431a      	orrs	r2, r3
 8005472:	4950      	ldr	r1, [pc, #320]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	3b01      	subs	r3, #1
 800547a:	f042 0210 	orr.w	r2, r2, #16
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d019      	beq.n	80054c4 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005490:	4a48      	ldr	r2, [pc, #288]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	3b01      	subs	r3, #1
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80054a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a8:	049b      	lsls	r3, r3, #18
 80054aa:	431a      	orrs	r2, r3
 80054ac:	4941      	ldr	r1, [pc, #260]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	605a      	str	r2, [r3, #4]
 80054c2:	e01c      	b.n	80054fe <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d018      	beq.n	80054fe <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80054cc:	4a39      	ldr	r2, [pc, #228]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80054e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e4:	069b      	lsls	r3, r3, #26
 80054e6:	431a      	orrs	r2, r3
 80054e8:	4932      	ldr	r1, [pc, #200]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d019      	beq.n	800553e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800550a:	4a2a      	ldr	r2, [pc, #168]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	3b01      	subs	r3, #1
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005522:	049b      	lsls	r3, r3, #18
 8005524:	431a      	orrs	r2, r3
 8005526:	4923      	ldr	r1, [pc, #140]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	3b01      	subs	r3, #1
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	605a      	str	r2, [r3, #4]
 800553c:	e01c      	b.n	8005578 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d018      	beq.n	8005578 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005546:	4a1b      	ldr	r2, [pc, #108]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	3b01      	subs	r3, #1
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800555c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555e:	069b      	lsls	r3, r3, #26
 8005560:	431a      	orrs	r2, r3
 8005562:	4914      	ldr	r1, [pc, #80]	; (80055b4 <HAL_OSPIM_Config+0x9c4>)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	3b01      	subs	r3, #1
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005578:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <HAL_OSPIM_Config+0x9c8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a0b      	ldr	r2, [pc, #44]	; (80055b8 <HAL_OSPIM_Config+0x9c8>)
 800558a:	f043 0301 	orr.w	r3, r3, #1
 800558e:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005590:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800559c:	4b07      	ldr	r3, [pc, #28]	; (80055bc <HAL_OSPIM_Config+0x9cc>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a06      	ldr	r2, [pc, #24]	; (80055bc <HAL_OSPIM_Config+0x9cc>)
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80055a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3750      	adds	r7, #80	; 0x50
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	5200b400 	.word	0x5200b400
 80055b8:	52005000 	.word	0x52005000
 80055bc:	5200a000 	.word	0x5200a000

080055c0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	603b      	str	r3, [r7, #0]
 80055cc:	4613      	mov	r3, r2
 80055ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80055d0:	e01a      	b.n	8005608 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d016      	beq.n	8005608 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055da:	f7fc fe5b 	bl	8002294 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d302      	bcc.n	80055f0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10b      	bne.n	8005608 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f6:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fc:	f043 0201 	orr.w	r2, r3, #1
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e00e      	b.n	8005626 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6a1a      	ldr	r2, [r3, #32]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4013      	ands	r3, r2
 8005612:	2b00      	cmp	r3, #0
 8005614:	bf14      	ite	ne
 8005616:	2301      	movne	r3, #1
 8005618:	2300      	moveq	r3, #0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	461a      	mov	r2, r3
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	429a      	cmp	r2, r3
 8005622:	d1d6      	bne.n	80055d2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	4603      	mov	r3, r0
 8005638:	6039      	str	r1, [r7, #0]
 800563a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <OSPIM_GetConfig+0x26>
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d802      	bhi.n	8005656 <OSPIM_GetConfig+0x26>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d102      	bne.n	800565c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	75fb      	strb	r3, [r7, #23]
 800565a:	e098      	b.n	800578e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2200      	movs	r2, #0
 8005666:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2200      	movs	r2, #0
 8005672:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2200      	movs	r2, #0
 8005678:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d10b      	bne.n	8005698 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8005680:	4b46      	ldr	r3, [pc, #280]	; (800579c <OSPIM_GetConfig+0x16c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800568c:	4b44      	ldr	r3, [pc, #272]	; (80057a0 <OSPIM_GetConfig+0x170>)
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	e002      	b.n	8005698 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8005692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005696:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e074      	b.n	8005788 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800569e:	4a3f      	ldr	r2, [pc, #252]	; (800579c <OSPIM_GetConfig+0x16c>)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4053      	eors	r3, r2
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d103      	bne.n	80056ca <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4053      	eors	r3, r2
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d103      	bne.n	80056ea <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4053      	eors	r3, r2
 80056fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d018      	beq.n	8005746 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4053      	eors	r3, r2
 800571a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d111      	bne.n	8005746 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3301      	adds	r3, #1
 8005730:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	60da      	str	r2, [r3, #12]
 8005738:	e005      	b.n	8005746 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3301      	adds	r3, #1
 800573e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d018      	beq.n	8005782 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4053      	eors	r3, r2
 8005756:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d111      	bne.n	8005782 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d106      	bne.n	8005776 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3301      	adds	r3, #1
 800576c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	611a      	str	r2, [r3, #16]
 8005774:	e005      	b.n	8005782 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3301      	adds	r3, #1
 800577a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3301      	adds	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d987      	bls.n	800569e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800578e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005790:	4618      	mov	r0, r3
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	5200b400 	.word	0x5200b400
 80057a0:	04040222 	.word	0x04040222

080057a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e0fe      	b.n	80059b4 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f00a f984 	bl	800fad8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2203      	movs	r2, #3
 80057d4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f006 fbd4 	bl	800bf8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	7c1a      	ldrb	r2, [r3, #16]
 80057ea:	f88d 2000 	strb.w	r2, [sp]
 80057ee:	3304      	adds	r3, #4
 80057f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057f2:	f006 faa5 	bl	800bd40 <USB_CoreInit>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e0d5      	b.n	80059b4 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f006 fbcc 	bl	800bfac <USB_SetCurrentMode>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2202      	movs	r2, #2
 800581e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e0c6      	b.n	80059b4 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
 800582a:	e04a      	b.n	80058c2 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800582c:	7bfa      	ldrb	r2, [r7, #15]
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	3315      	adds	r3, #21
 800583c:	2201      	movs	r2, #1
 800583e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005840:	7bfa      	ldrb	r2, [r7, #15]
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	3314      	adds	r3, #20
 8005850:	7bfa      	ldrb	r2, [r7, #15]
 8005852:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005854:	7bfa      	ldrb	r2, [r7, #15]
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	b298      	uxth	r0, r3
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	332e      	adds	r3, #46	; 0x2e
 8005868:	4602      	mov	r2, r0
 800586a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800586c:	7bfa      	ldrb	r2, [r7, #15]
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	3318      	adds	r3, #24
 800587c:	2200      	movs	r2, #0
 800587e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005880:	7bfa      	ldrb	r2, [r7, #15]
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	331c      	adds	r3, #28
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005894:	7bfa      	ldrb	r2, [r7, #15]
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	4613      	mov	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	3320      	adds	r3, #32
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058a8:	7bfa      	ldrb	r2, [r7, #15]
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	3324      	adds	r3, #36	; 0x24
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	3301      	adds	r3, #1
 80058c0:	73fb      	strb	r3, [r7, #15]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	791b      	ldrb	r3, [r3, #4]
 80058c6:	7bfa      	ldrb	r2, [r7, #15]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d3af      	bcc.n	800582c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058cc:	2300      	movs	r3, #0
 80058ce:	73fb      	strb	r3, [r7, #15]
 80058d0:	e044      	b.n	800595c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058d2:	7bfa      	ldrb	r2, [r7, #15]
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	440b      	add	r3, r1
 80058e0:	f203 2355 	addw	r3, r3, #597	; 0x255
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058e8:	7bfa      	ldrb	r2, [r7, #15]
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80058fa:	7bfa      	ldrb	r2, [r7, #15]
 80058fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058fe:	7bfa      	ldrb	r2, [r7, #15]
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005914:	7bfa      	ldrb	r2, [r7, #15]
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	4613      	mov	r3, r2
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	4413      	add	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800592a:	7bfa      	ldrb	r2, [r7, #15]
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005940:	7bfa      	ldrb	r2, [r7, #15]
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	4613      	mov	r3, r2
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	3301      	adds	r3, #1
 800595a:	73fb      	strb	r3, [r7, #15]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	791b      	ldrb	r3, [r3, #4]
 8005960:	7bfa      	ldrb	r2, [r7, #15]
 8005962:	429a      	cmp	r2, r3
 8005964:	d3b5      	bcc.n	80058d2 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	7c1a      	ldrb	r2, [r3, #16]
 800596e:	f88d 2000 	strb.w	r2, [sp]
 8005972:	3304      	adds	r3, #4
 8005974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005976:	f006 fb65 	bl	800c044 <USB_DevInit>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e013      	b.n	80059b4 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	7b1b      	ldrb	r3, [r3, #12]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d102      	bne.n	80059a8 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 f946 	bl	8006c34 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f007 fac8 	bl	800cf42 <USB_DevDisconnect>

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_PCD_Start+0x1c>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e022      	b.n	8005a1e <HAL_PCD_Start+0x62>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d009      	beq.n	8005a00 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d105      	bne.n	8005a00 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f006 faaf 	bl	800bf68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f007 fa76 	bl	800cf00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_PCD_Stop+0x1c>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e028      	b.n	8005a94 <HAL_PCD_Stop+0x6e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  __HAL_PCD_DISABLE(hpcd);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f006 fa9b 	bl	800bf8a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f007 fa72 	bl	800cf42 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2110      	movs	r1, #16
 8005a64:	4618      	mov	r0, r3
 8005a66:	f006 fc4b 	bl	800c300 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d105      	bne.n	8005a8a <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a9c:	b590      	push	{r4, r7, lr}
 8005a9e:	b08d      	sub	sp, #52	; 0x34
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f007 faf9 	bl	800d0aa <USB_GetMode>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f040 84b9 	bne.w	8006432 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f007 fa5d 	bl	800cf84 <USB_ReadInterrupts>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 84af 	beq.w	8006430 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	0a1b      	lsrs	r3, r3, #8
 8005adc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f007 fa4a 	bl	800cf84 <USB_ReadInterrupts>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d107      	bne.n	8005b0a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695a      	ldr	r2, [r3, #20]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f002 0202 	and.w	r2, r2, #2
 8005b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f007 fa38 	bl	800cf84 <USB_ReadInterrupts>
 8005b14:	4603      	mov	r3, r0
 8005b16:	f003 0310 	and.w	r3, r3, #16
 8005b1a:	2b10      	cmp	r3, #16
 8005b1c:	d161      	bne.n	8005be2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699a      	ldr	r2, [r3, #24]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0210 	bic.w	r2, r2, #16
 8005b2c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f003 020f 	and.w	r2, r3, #15
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	4413      	add	r3, r2
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	0c5b      	lsrs	r3, r3, #17
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d124      	bne.n	8005ba4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d035      	beq.n	8005bd2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	6a38      	ldr	r0, [r7, #32]
 8005b7a:	f007 f86f 	bl	800cc5c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	091b      	lsrs	r3, r3, #4
 8005b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b8a:	441a      	add	r2, r3
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	695a      	ldr	r2, [r3, #20]
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	091b      	lsrs	r3, r3, #4
 8005b98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b9c:	441a      	add	r2, r3
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	615a      	str	r2, [r3, #20]
 8005ba2:	e016      	b.n	8005bd2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	0c5b      	lsrs	r3, r3, #17
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	2b06      	cmp	r3, #6
 8005bae:	d110      	bne.n	8005bd2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005bb6:	2208      	movs	r2, #8
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6a38      	ldr	r0, [r7, #32]
 8005bbc:	f007 f84e 	bl	800cc5c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	695a      	ldr	r2, [r3, #20]
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	091b      	lsrs	r3, r3, #4
 8005bc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bcc:	441a      	add	r2, r3
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0210 	orr.w	r2, r2, #16
 8005be0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f007 f9cc 	bl	800cf84 <USB_ReadInterrupts>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bf2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005bf6:	f040 80a7 	bne.w	8005d48 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f007 f9d1 	bl	800cfaa <USB_ReadDevAllOutEpInterrupt>
 8005c08:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005c0a:	e099      	b.n	8005d40 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 808e 	beq.w	8005d34 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	4611      	mov	r1, r2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f007 f9f5 	bl	800d012 <USB_ReadDevOutEPInterrupt>
 8005c28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00c      	beq.n	8005c4e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	461a      	mov	r2, r3
 8005c42:	2301      	movs	r3, #1
 8005c44:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fe6d 	bl	8006928 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00c      	beq.n	8005c72 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	461a      	mov	r2, r3
 8005c66:	2308      	movs	r3, #8
 8005c68:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 ff43 	bl	8006af8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2310      	movs	r3, #16
 8005c8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d030      	beq.n	8005cfa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca0:	2b80      	cmp	r3, #128	; 0x80
 8005ca2:	d109      	bne.n	8005cb8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cb6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cba:	4613      	mov	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4413      	add	r3, r2
 8005cca:	3304      	adds	r3, #4
 8005ccc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	78db      	ldrb	r3, [r3, #3]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d108      	bne.n	8005ce8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f009 fff0 	bl	800fcc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d10:	461a      	mov	r2, r3
 8005d12:	2320      	movs	r3, #32
 8005d14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d009      	beq.n	8005d34 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d32:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	3301      	adds	r3, #1
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	085b      	lsrs	r3, r3, #1
 8005d3e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f47f af62 	bne.w	8005c0c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f007 f919 	bl	800cf84 <USB_ReadInterrupts>
 8005d52:	4603      	mov	r3, r0
 8005d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d5c:	f040 80db 	bne.w	8005f16 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f007 f93a 	bl	800cfde <USB_ReadDevAllInEpInterrupt>
 8005d6a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005d70:	e0cd      	b.n	8005f0e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 80c2 	beq.w	8005f02 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	4611      	mov	r1, r2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f007 f960 	bl	800d04e <USB_ReadDevInEPInterrupt>
 8005d8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d057      	beq.n	8005e4a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	2201      	movs	r2, #1
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	43db      	mvns	r3, r3
 8005db4:	69f9      	ldr	r1, [r7, #28]
 8005db6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dba:	4013      	ands	r3, r2
 8005dbc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dca:	461a      	mov	r2, r3
 8005dcc:	2301      	movs	r3, #1
 8005dce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	799b      	ldrb	r3, [r3, #6]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d132      	bne.n	8005e3e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	3320      	adds	r3, #32
 8005de8:	6819      	ldr	r1, [r3, #0]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dee:	4613      	mov	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4403      	add	r3, r0
 8005df8:	331c      	adds	r3, #28
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4419      	add	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e02:	4613      	mov	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4403      	add	r3, r0
 8005e0c:	3320      	adds	r3, #32
 8005e0e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d113      	bne.n	8005e3e <HAL_PCD_IRQHandler+0x3a2>
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	3324      	adds	r3, #36	; 0x24
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d108      	bne.n	8005e3e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005e36:	461a      	mov	r2, r3
 8005e38:	2101      	movs	r1, #1
 8005e3a:	f007 f969 	bl	800d110 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	4619      	mov	r1, r3
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f009 feba 	bl	800fbbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	461a      	mov	r2, r3
 8005e62:	2308      	movs	r3, #8
 8005e64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d008      	beq.n	8005e82 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	2310      	movs	r3, #16
 8005e80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	461a      	mov	r2, r3
 8005e9a:	2340      	movs	r3, #64	; 0x40
 8005e9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d023      	beq.n	8005ef0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eaa:	6a38      	ldr	r0, [r7, #32]
 8005eac:	f006 fa28 	bl	800c300 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	3310      	adds	r3, #16
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	78db      	ldrb	r3, [r3, #3]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d108      	bne.n	8005ede <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f009 ff07 	bl	800fcec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eea:	461a      	mov	r2, r3
 8005eec:	2302      	movs	r3, #2
 8005eee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fc86 	bl	800680e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	3301      	adds	r3, #1
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f47f af2e 	bne.w	8005d72 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f007 f832 	bl	800cf84 <USB_ReadInterrupts>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f2a:	d122      	bne.n	8005f72 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f3a:	f023 0301 	bic.w	r3, r3, #1
 8005f3e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d108      	bne.n	8005f5c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005f52:	2100      	movs	r1, #0
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fe91 	bl	8006c7c <HAL_PCDEx_LPM_Callback>
 8005f5a:	e002      	b.n	8005f62 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f009 fea5 	bl	800fcac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695a      	ldr	r2, [r3, #20]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f007 f804 	bl	800cf84 <USB_ReadInterrupts>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f86:	d112      	bne.n	8005fae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d102      	bne.n	8005f9e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f009 fe61 	bl	800fc60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f006 ffe6 	bl	800cf84 <USB_ReadInterrupts>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fc2:	d121      	bne.n	8006008 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695a      	ldr	r2, [r3, #20]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005fd2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d111      	bne.n	8006002 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fec:	089b      	lsrs	r3, r3, #2
 8005fee:	f003 020f 	and.w	r2, r3, #15
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fe3e 	bl	8006c7c <HAL_PCDEx_LPM_Callback>
 8006000:	e002      	b.n	8006008 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f009 fe2c 	bl	800fc60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4618      	mov	r0, r3
 800600e:	f006 ffb9 	bl	800cf84 <USB_ReadInterrupts>
 8006012:	4603      	mov	r3, r0
 8006014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601c:	f040 80b7 	bne.w	800618e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2110      	movs	r1, #16
 800603a:	4618      	mov	r0, r3
 800603c:	f006 f960 	bl	800c300 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006040:	2300      	movs	r3, #0
 8006042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006044:	e046      	b.n	80060d4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006052:	461a      	mov	r2, r3
 8006054:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006058:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006074:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006078:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	461a      	mov	r2, r3
 8006088:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800608c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d0:	3301      	adds	r3, #1
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	791b      	ldrb	r3, [r3, #4]
 80060d8:	461a      	mov	r2, r3
 80060da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060dc:	4293      	cmp	r3, r2
 80060de:	d3b2      	bcc.n	8006046 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80060f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	7bdb      	ldrb	r3, [r3, #15]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d016      	beq.n	800612a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800610c:	f043 030b 	orr.w	r3, r3, #11
 8006110:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006122:	f043 030b 	orr.w	r3, r3, #11
 8006126:	6453      	str	r3, [r2, #68]	; 0x44
 8006128:	e015      	b.n	8006156 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006138:	4619      	mov	r1, r3
 800613a:	f242 032b 	movw	r3, #8235	; 0x202b
 800613e:	4313      	orrs	r3, r2
 8006140:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006150:	f043 030b 	orr.w	r3, r3, #11
 8006154:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006164:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006168:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006178:	461a      	mov	r2, r3
 800617a:	f006 ffc9 	bl	800d110 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800618c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4618      	mov	r0, r3
 8006194:	f006 fef6 	bl	800cf84 <USB_ReadInterrupts>
 8006198:	4603      	mov	r3, r0
 800619a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800619e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a2:	d123      	bne.n	80061ec <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f006 ff8d 	bl	800d0c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f006 f91d 	bl	800c3f2 <USB_GetDevSpeed>
 80061b8:	4603      	mov	r3, r0
 80061ba:	461a      	mov	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681c      	ldr	r4, [r3, #0]
 80061c4:	f001 fcba 	bl	8007b3c <HAL_RCC_GetHCLKFreq>
 80061c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80061ce:	461a      	mov	r2, r3
 80061d0:	4620      	mov	r0, r4
 80061d2:	f005 fe27 	bl	800be24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f009 fd19 	bl	800fc0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695a      	ldr	r2, [r3, #20]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80061ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f006 fec7 	bl	800cf84 <USB_ReadInterrupts>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d10a      	bne.n	8006216 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f009 fcf6 	bl	800fbf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695a      	ldr	r2, [r3, #20]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f002 0208 	and.w	r2, r2, #8
 8006214:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f006 feb2 	bl	800cf84 <USB_ReadInterrupts>
 8006220:	4603      	mov	r3, r0
 8006222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006226:	2b80      	cmp	r3, #128	; 0x80
 8006228:	d123      	bne.n	8006272 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006236:	2301      	movs	r3, #1
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
 800623a:	e014      	b.n	8006266 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006240:	4613      	mov	r3, r2
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d105      	bne.n	8006260 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	b2db      	uxtb	r3, r3
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 faa6 	bl	80067ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	3301      	adds	r3, #1
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	791b      	ldrb	r3, [r3, #4]
 800626a:	461a      	mov	r2, r3
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	4293      	cmp	r3, r2
 8006270:	d3e4      	bcc.n	800623c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f006 fe84 	bl	800cf84 <USB_ReadInterrupts>
 800627c:	4603      	mov	r3, r0
 800627e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006286:	d13c      	bne.n	8006302 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006288:	2301      	movs	r3, #1
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
 800628c:	e02b      	b.n	80062e6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a2:	4613      	mov	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	3318      	adds	r3, #24
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d115      	bne.n	80062e0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80062b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	da12      	bge.n	80062e0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062be:	4613      	mov	r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	3317      	adds	r3, #23
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa66 	bl	80067ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	3301      	adds	r3, #1
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	791b      	ldrb	r3, [r3, #4]
 80062ea:	461a      	mov	r2, r3
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d3cd      	bcc.n	800628e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006300:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f006 fe3c 	bl	800cf84 <USB_ReadInterrupts>
 800630c:	4603      	mov	r3, r0
 800630e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006316:	d156      	bne.n	80063c6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006318:	2301      	movs	r3, #1
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
 800631c:	e045      	b.n	80063aa <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006332:	4613      	mov	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	440b      	add	r3, r1
 800633c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d12e      	bne.n	80063a4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006346:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006348:	2b00      	cmp	r3, #0
 800634a:	da2b      	bge.n	80063a4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8006358:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800635c:	429a      	cmp	r2, r3
 800635e:	d121      	bne.n	80063a4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006364:	4613      	mov	r3, r2
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	440b      	add	r3, r1
 800636e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10a      	bne.n	80063a4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800639c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063a0:	6053      	str	r3, [r2, #4]
            break;
 80063a2:	e008      	b.n	80063b6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	3301      	adds	r3, #1
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	791b      	ldrb	r3, [r3, #4]
 80063ae:	461a      	mov	r2, r3
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d3b3      	bcc.n	800631e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80063c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f006 fdda 	bl	800cf84 <USB_ReadInterrupts>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063da:	d10a      	bne.n	80063f2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f009 fc97 	bl	800fd10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	695a      	ldr	r2, [r3, #20]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80063f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f006 fdc4 	bl	800cf84 <USB_ReadInterrupts>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b04      	cmp	r3, #4
 8006404:	d115      	bne.n	8006432 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f009 fc87 	bl	800fd2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6859      	ldr	r1, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
 800642e:	e000      	b.n	8006432 <HAL_PCD_IRQHandler+0x996>
      return;
 8006430:	bf00      	nop
    }
  }
}
 8006432:	3734      	adds	r7, #52	; 0x34
 8006434:	46bd      	mov	sp, r7
 8006436:	bd90      	pop	{r4, r7, pc}

08006438 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_PCD_SetAddress+0x1a>
 800644e:	2302      	movs	r3, #2
 8006450:	e012      	b.n	8006478 <HAL_PCD_SetAddress+0x40>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	78fa      	ldrb	r2, [r7, #3]
 800645e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	78fa      	ldrb	r2, [r7, #3]
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f006 fd23 	bl	800ceb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	4608      	mov	r0, r1
 800648a:	4611      	mov	r1, r2
 800648c:	461a      	mov	r2, r3
 800648e:	4603      	mov	r3, r0
 8006490:	70fb      	strb	r3, [r7, #3]
 8006492:	460b      	mov	r3, r1
 8006494:	803b      	strh	r3, [r7, #0]
 8006496:	4613      	mov	r3, r2
 8006498:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800649e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	da0f      	bge.n	80064c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064a6:	78fb      	ldrb	r3, [r7, #3]
 80064a8:	f003 020f 	and.w	r2, r3, #15
 80064ac:	4613      	mov	r3, r2
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	3310      	adds	r3, #16
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4413      	add	r3, r2
 80064ba:	3304      	adds	r3, #4
 80064bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	705a      	strb	r2, [r3, #1]
 80064c4:	e00f      	b.n	80064e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	f003 020f 	and.w	r2, r3, #15
 80064cc:	4613      	mov	r3, r2
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	4413      	add	r3, r2
 80064dc:	3304      	adds	r3, #4
 80064de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80064f2:	883a      	ldrh	r2, [r7, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	78ba      	ldrb	r2, [r7, #2]
 80064fc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	785b      	ldrb	r3, [r3, #1]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d004      	beq.n	8006510 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006510:	78bb      	ldrb	r3, [r7, #2]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d102      	bne.n	800651c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006522:	2b01      	cmp	r3, #1
 8006524:	d101      	bne.n	800652a <HAL_PCD_EP_Open+0xaa>
 8006526:	2302      	movs	r3, #2
 8006528:	e00e      	b.n	8006548 <HAL_PCD_EP_Open+0xc8>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	4618      	mov	r0, r3
 800653a:	f005 ff7f 	bl	800c43c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8006546:	7afb      	ldrb	r3, [r7, #11]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	460b      	mov	r3, r1
 800655e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006560:	7afb      	ldrb	r3, [r7, #11]
 8006562:	f003 020f 	and.w	r2, r3, #15
 8006566:	4613      	mov	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	4413      	add	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	3304      	adds	r3, #4
 8006578:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2200      	movs	r2, #0
 800658a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2200      	movs	r2, #0
 8006590:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	b2da      	uxtb	r2, r3
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	799b      	ldrb	r3, [r3, #6]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d102      	bne.n	80065ac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	799b      	ldrb	r3, [r3, #6]
 80065b4:	461a      	mov	r2, r3
 80065b6:	6979      	ldr	r1, [r7, #20]
 80065b8:	f005 ffc8 	bl	800c54c <USB_EPStartXfer>

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b086      	sub	sp, #24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	460b      	mov	r3, r1
 80065d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065d6:	7afb      	ldrb	r3, [r7, #11]
 80065d8:	f003 020f 	and.w	r2, r3, #15
 80065dc:	4613      	mov	r3, r2
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	3310      	adds	r3, #16
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	3304      	adds	r3, #4
 80065ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2200      	movs	r2, #0
 80065fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2201      	movs	r2, #1
 8006604:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	b2da      	uxtb	r2, r3
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	799b      	ldrb	r3, [r3, #6]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d102      	bne.n	8006620 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	799b      	ldrb	r3, [r3, #6]
 8006628:	461a      	mov	r2, r3
 800662a:	6979      	ldr	r1, [r7, #20]
 800662c:	f005 ff8e 	bl	800c54c <USB_EPStartXfer>

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	460b      	mov	r3, r1
 8006644:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	7912      	ldrb	r2, [r2, #4]
 8006650:	4293      	cmp	r3, r2
 8006652:	d901      	bls.n	8006658 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e04f      	b.n	80066f8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800665c:	2b00      	cmp	r3, #0
 800665e:	da0f      	bge.n	8006680 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	f003 020f 	and.w	r2, r3, #15
 8006666:	4613      	mov	r3, r2
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	3310      	adds	r3, #16
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	4413      	add	r3, r2
 8006674:	3304      	adds	r3, #4
 8006676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2201      	movs	r2, #1
 800667c:	705a      	strb	r2, [r3, #1]
 800667e:	e00d      	b.n	800669c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006680:	78fa      	ldrb	r2, [r7, #3]
 8006682:	4613      	mov	r3, r2
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	4413      	add	r3, r2
 8006692:	3304      	adds	r3, #4
 8006694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2201      	movs	r2, #1
 80066a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_PCD_EP_SetStall+0x82>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e01d      	b.n	80066f8 <HAL_PCD_EP_SetStall+0xbe>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68f9      	ldr	r1, [r7, #12]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f006 fb1e 	bl	800cd0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7999      	ldrb	r1, [r3, #6]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80066e8:	461a      	mov	r2, r3
 80066ea:	f006 fd11 	bl	800d110 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	7912      	ldrb	r2, [r2, #4]
 8006716:	4293      	cmp	r3, r2
 8006718:	d901      	bls.n	800671e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e042      	b.n	80067a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800671e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006722:	2b00      	cmp	r3, #0
 8006724:	da0f      	bge.n	8006746 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006726:	78fb      	ldrb	r3, [r7, #3]
 8006728:	f003 020f 	and.w	r2, r3, #15
 800672c:	4613      	mov	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	3310      	adds	r3, #16
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	4413      	add	r3, r2
 800673a:	3304      	adds	r3, #4
 800673c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2201      	movs	r2, #1
 8006742:	705a      	strb	r2, [r3, #1]
 8006744:	e00f      	b.n	8006766 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006746:	78fb      	ldrb	r3, [r7, #3]
 8006748:	f003 020f 	and.w	r2, r3, #15
 800674c:	4613      	mov	r3, r2
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	3304      	adds	r3, #4
 800675e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	b2da      	uxtb	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_PCD_EP_ClrStall+0x86>
 8006782:	2302      	movs	r3, #2
 8006784:	e00e      	b.n	80067a4 <HAL_PCD_EP_ClrStall+0xa4>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68f9      	ldr	r1, [r7, #12]
 8006794:	4618      	mov	r0, r3
 8006796:	f006 fb27 	bl	800cde8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80067b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	da0c      	bge.n	80067da <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	f003 020f 	and.w	r2, r3, #15
 80067c6:	4613      	mov	r3, r2
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	3310      	adds	r3, #16
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	4413      	add	r3, r2
 80067d4:	3304      	adds	r3, #4
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	e00c      	b.n	80067f4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	f003 020f 	and.w	r2, r3, #15
 80067e0:	4613      	mov	r3, r2
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	4413      	add	r3, r2
 80067f0:	3304      	adds	r3, #4
 80067f2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f006 f946 	bl	800ca8c <USB_EPStopXfer>
 8006800:	4603      	mov	r3, r0
 8006802:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006804:	7afb      	ldrb	r3, [r7, #11]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b08a      	sub	sp, #40	; 0x28
 8006812:	af02      	add	r7, sp, #8
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	4613      	mov	r3, r2
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	3310      	adds	r3, #16
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	4413      	add	r3, r2
 8006832:	3304      	adds	r3, #4
 8006834:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	429a      	cmp	r2, r3
 8006840:	d901      	bls.n	8006846 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e06b      	b.n	800691e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	429a      	cmp	r2, r3
 800685a:	d902      	bls.n	8006862 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	3303      	adds	r3, #3
 8006866:	089b      	lsrs	r3, r3, #2
 8006868:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800686a:	e02a      	b.n	80068c2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	429a      	cmp	r2, r3
 8006880:	d902      	bls.n	8006888 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	3303      	adds	r3, #3
 800688c:	089b      	lsrs	r3, r3, #2
 800688e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68d9      	ldr	r1, [r3, #12]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	4603      	mov	r3, r0
 80068a4:	6978      	ldr	r0, [r7, #20]
 80068a6:	f006 f99b 	bl	800cbe0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	441a      	add	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	441a      	add	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d809      	bhi.n	80068ec <PCD_WriteEmptyTxFifo+0xde>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	695a      	ldr	r2, [r3, #20]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d203      	bcs.n	80068ec <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1bf      	bne.n	800686c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	691a      	ldr	r2, [r3, #16]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d811      	bhi.n	800691c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	2201      	movs	r2, #1
 8006900:	fa02 f303 	lsl.w	r3, r2, r3
 8006904:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	43db      	mvns	r3, r3
 8006912:	6939      	ldr	r1, [r7, #16]
 8006914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006918:	4013      	ands	r3, r2
 800691a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3720      	adds	r7, #32
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	333c      	adds	r3, #60	; 0x3c
 8006940:	3304      	adds	r3, #4
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	799b      	ldrb	r3, [r3, #6]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d17b      	bne.n	8006a56 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b00      	cmp	r3, #0
 8006966:	d015      	beq.n	8006994 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	4a61      	ldr	r2, [pc, #388]	; (8006af0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	f240 80b9 	bls.w	8006ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 80b3 	beq.w	8006ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698a:	461a      	mov	r2, r3
 800698c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006990:	6093      	str	r3, [r2, #8]
 8006992:	e0a7      	b.n	8006ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d009      	beq.n	80069b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069aa:	461a      	mov	r2, r3
 80069ac:	2320      	movs	r3, #32
 80069ae:	6093      	str	r3, [r2, #8]
 80069b0:	e098      	b.n	8006ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f040 8093 	bne.w	8006ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	4a4b      	ldr	r2, [pc, #300]	; (8006af0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d90f      	bls.n	80069e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069dc:	461a      	mov	r2, r3
 80069de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069e2:	6093      	str	r3, [r2, #8]
 80069e4:	e07e      	b.n	8006ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	4413      	add	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	4413      	add	r3, r2
 80069f8:	3304      	adds	r3, #4
 80069fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a1a      	ldr	r2, [r3, #32]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	0159      	lsls	r1, r3, #5
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	440b      	add	r3, r1
 8006a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a12:	1ad2      	subs	r2, r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d114      	bne.n	8006a48 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006a30:	461a      	mov	r2, r3
 8006a32:	2101      	movs	r1, #1
 8006a34:	f006 fb6c 	bl	800d110 <USB_EP0_OutStart>
 8006a38:	e006      	b.n	8006a48 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	441a      	add	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f009 f89a 	bl	800fb88 <HAL_PCD_DataOutStageCallback>
 8006a54:	e046      	b.n	8006ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	4a26      	ldr	r2, [pc, #152]	; (8006af4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d124      	bne.n	8006aa8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00a      	beq.n	8006a7e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	461a      	mov	r2, r3
 8006a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a7a:	6093      	str	r3, [r2, #8]
 8006a7c:	e032      	b.n	8006ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a94:	461a      	mov	r2, r3
 8006a96:	2320      	movs	r3, #32
 8006a98:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f009 f871 	bl	800fb88 <HAL_PCD_DataOutStageCallback>
 8006aa6:	e01d      	b.n	8006ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d114      	bne.n	8006ad8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	440b      	add	r3, r1
 8006abc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d108      	bne.n	8006ad8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	f006 fb1c 	bl	800d110 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f009 f852 	bl	800fb88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3720      	adds	r7, #32
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	4f54300a 	.word	0x4f54300a
 8006af4:	4f54310a 	.word	0x4f54310a

08006af8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	333c      	adds	r3, #60	; 0x3c
 8006b10:	3304      	adds	r3, #4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4a15      	ldr	r2, [pc, #84]	; (8006b80 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d90e      	bls.n	8006b4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d009      	beq.n	8006b4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b44:	461a      	mov	r2, r3
 8006b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f009 f809 	bl	800fb64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4a0a      	ldr	r2, [pc, #40]	; (8006b80 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d90c      	bls.n	8006b74 <PCD_EP_OutSetupPacket_int+0x7c>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	799b      	ldrb	r3, [r3, #6]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d108      	bne.n	8006b74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6818      	ldr	r0, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	2101      	movs	r1, #1
 8006b70:	f006 face 	bl	800d110 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	4f54300a 	.word	0x4f54300a

08006b84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
 8006b90:	4613      	mov	r3, r2
 8006b92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d107      	bne.n	8006bb2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006ba2:	883b      	ldrh	r3, [r7, #0]
 8006ba4:	0419      	lsls	r1, r3, #16
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	629a      	str	r2, [r3, #40]	; 0x28
 8006bb0:	e028      	b.n	8006c04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	0c1b      	lsrs	r3, r3, #16
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]
 8006bc4:	e00d      	b.n	8006be2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
 8006bcc:	3340      	adds	r3, #64	; 0x40
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	0c1b      	lsrs	r3, r3, #16
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	4413      	add	r3, r2
 8006bda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	3301      	adds	r3, #1
 8006be0:	73fb      	strb	r3, [r7, #15]
 8006be2:	7bfa      	ldrb	r2, [r7, #15]
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d3ec      	bcc.n	8006bc6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006bec:	883b      	ldrh	r3, [r7, #0]
 8006bee:	0418      	lsls	r0, r3, #16
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6819      	ldr	r1, [r3, #0]
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	4302      	orrs	r2, r0
 8006bfc:	3340      	adds	r3, #64	; 0x40
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	440b      	add	r3, r1
 8006c02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	887a      	ldrh	r2, [r7, #2]
 8006c24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c62:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <HAL_PCDEx_ActivateLPM+0x44>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	10000003 	.word	0x10000003

08006c7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006c9c:	4b19      	ldr	r3, [pc, #100]	; (8006d04 <HAL_PWREx_ConfigSupply+0x70>)
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	d00a      	beq.n	8006cbe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006ca8:	4b16      	ldr	r3, [pc, #88]	; (8006d04 <HAL_PWREx_ConfigSupply+0x70>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0307 	and.w	r3, r3, #7
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d001      	beq.n	8006cba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e01f      	b.n	8006cfa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	e01d      	b.n	8006cfa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006cbe:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <HAL_PWREx_ConfigSupply+0x70>)
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f023 0207 	bic.w	r2, r3, #7
 8006cc6:	490f      	ldr	r1, [pc, #60]	; (8006d04 <HAL_PWREx_ConfigSupply+0x70>)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006cce:	f7fb fae1 	bl	8002294 <HAL_GetTick>
 8006cd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cd4:	e009      	b.n	8006cea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006cd6:	f7fb fadd 	bl	8002294 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ce4:	d901      	bls.n	8006cea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e007      	b.n	8006cfa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cea:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <HAL_PWREx_ConfigSupply+0x70>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf6:	d1ee      	bne.n	8006cd6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	58024800 	.word	0x58024800

08006d08 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	4a04      	ldr	r2, [pc, #16]	; (8006d24 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d16:	60d3      	str	r3, [r2, #12]
}
 8006d18:	bf00      	nop
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	58024800 	.word	0x58024800

08006d28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08c      	sub	sp, #48	; 0x30
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e3c8      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 8087 	beq.w	8006e56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d48:	4b88      	ldr	r3, [pc, #544]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d52:	4b86      	ldr	r3, [pc, #536]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5a:	2b10      	cmp	r3, #16
 8006d5c:	d007      	beq.n	8006d6e <HAL_RCC_OscConfig+0x46>
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	2b18      	cmp	r3, #24
 8006d62:	d110      	bne.n	8006d86 <HAL_RCC_OscConfig+0x5e>
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d10b      	bne.n	8006d86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d6e:	4b7f      	ldr	r3, [pc, #508]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d06c      	beq.n	8006e54 <HAL_RCC_OscConfig+0x12c>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d168      	bne.n	8006e54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e3a2      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d8e:	d106      	bne.n	8006d9e <HAL_RCC_OscConfig+0x76>
 8006d90:	4b76      	ldr	r3, [pc, #472]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a75      	ldr	r2, [pc, #468]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	e02e      	b.n	8006dfc <HAL_RCC_OscConfig+0xd4>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10c      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x98>
 8006da6:	4b71      	ldr	r3, [pc, #452]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a70      	ldr	r2, [pc, #448]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	4b6e      	ldr	r3, [pc, #440]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a6d      	ldr	r2, [pc, #436]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	e01d      	b.n	8006dfc <HAL_RCC_OscConfig+0xd4>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dc8:	d10c      	bne.n	8006de4 <HAL_RCC_OscConfig+0xbc>
 8006dca:	4b68      	ldr	r3, [pc, #416]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a67      	ldr	r2, [pc, #412]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dd4:	6013      	str	r3, [r2, #0]
 8006dd6:	4b65      	ldr	r3, [pc, #404]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a64      	ldr	r2, [pc, #400]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	e00b      	b.n	8006dfc <HAL_RCC_OscConfig+0xd4>
 8006de4:	4b61      	ldr	r3, [pc, #388]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a60      	ldr	r2, [pc, #384]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	4b5e      	ldr	r3, [pc, #376]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a5d      	ldr	r2, [pc, #372]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d013      	beq.n	8006e2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e04:	f7fb fa46 	bl	8002294 <HAL_GetTick>
 8006e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e0a:	e008      	b.n	8006e1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e0c:	f7fb fa42 	bl	8002294 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b64      	cmp	r3, #100	; 0x64
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e356      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e1e:	4b53      	ldr	r3, [pc, #332]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0f0      	beq.n	8006e0c <HAL_RCC_OscConfig+0xe4>
 8006e2a:	e014      	b.n	8006e56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2c:	f7fb fa32 	bl	8002294 <HAL_GetTick>
 8006e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e34:	f7fb fa2e 	bl	8002294 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b64      	cmp	r3, #100	; 0x64
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e342      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e46:	4b49      	ldr	r3, [pc, #292]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1f0      	bne.n	8006e34 <HAL_RCC_OscConfig+0x10c>
 8006e52:	e000      	b.n	8006e56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 808c 	beq.w	8006f7c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e64:	4b41      	ldr	r3, [pc, #260]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e6e:	4b3f      	ldr	r3, [pc, #252]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d007      	beq.n	8006e8a <HAL_RCC_OscConfig+0x162>
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	2b18      	cmp	r3, #24
 8006e7e:	d137      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x1c8>
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f003 0303 	and.w	r3, r3, #3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d132      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e8a:	4b38      	ldr	r3, [pc, #224]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d005      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x17a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e314      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ea2:	4b32      	ldr	r3, [pc, #200]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f023 0219 	bic.w	r2, r3, #25
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	492f      	ldr	r1, [pc, #188]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb4:	f7fb f9ee 	bl	8002294 <HAL_GetTick>
 8006eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eba:	e008      	b.n	8006ece <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ebc:	f7fb f9ea 	bl	8002294 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e2fe      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ece:	4b27      	ldr	r3, [pc, #156]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0304 	and.w	r3, r3, #4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0f0      	beq.n	8006ebc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eda:	4b24      	ldr	r3, [pc, #144]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	061b      	lsls	r3, r3, #24
 8006ee8:	4920      	ldr	r1, [pc, #128]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eee:	e045      	b.n	8006f7c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d026      	beq.n	8006f46 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ef8:	4b1c      	ldr	r3, [pc, #112]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f023 0219 	bic.w	r2, r3, #25
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	4919      	ldr	r1, [pc, #100]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0a:	f7fb f9c3 	bl	8002294 <HAL_GetTick>
 8006f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f10:	e008      	b.n	8006f24 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f12:	f7fb f9bf 	bl	8002294 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d901      	bls.n	8006f24 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e2d3      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f24:	4b11      	ldr	r3, [pc, #68]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d0f0      	beq.n	8006f12 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f30:	4b0e      	ldr	r3, [pc, #56]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	061b      	lsls	r3, r3, #24
 8006f3e:	490b      	ldr	r1, [pc, #44]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	604b      	str	r3, [r1, #4]
 8006f44:	e01a      	b.n	8006f7c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f46:	4b09      	ldr	r3, [pc, #36]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a08      	ldr	r2, [pc, #32]	; (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006f4c:	f023 0301 	bic.w	r3, r3, #1
 8006f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f52:	f7fb f99f 	bl	8002294 <HAL_GetTick>
 8006f56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f58:	e00a      	b.n	8006f70 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f5a:	f7fb f99b 	bl	8002294 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d903      	bls.n	8006f70 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e2af      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
 8006f6c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f70:	4b96      	ldr	r3, [pc, #600]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1ee      	bne.n	8006f5a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0310 	and.w	r3, r3, #16
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d06a      	beq.n	800705e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f88:	4b90      	ldr	r3, [pc, #576]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f90:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f92:	4b8e      	ldr	r3, [pc, #568]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2b08      	cmp	r3, #8
 8006f9c:	d007      	beq.n	8006fae <HAL_RCC_OscConfig+0x286>
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b18      	cmp	r3, #24
 8006fa2:	d11b      	bne.n	8006fdc <HAL_RCC_OscConfig+0x2b4>
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d116      	bne.n	8006fdc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fae:	4b87      	ldr	r3, [pc, #540]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x29e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	2b80      	cmp	r3, #128	; 0x80
 8006fc0:	d001      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e282      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fc6:	4b81      	ldr	r3, [pc, #516]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	061b      	lsls	r3, r3, #24
 8006fd4:	497d      	ldr	r1, [pc, #500]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fda:	e040      	b.n	800705e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d023      	beq.n	800702c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006fe4:	4b79      	ldr	r3, [pc, #484]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a78      	ldr	r2, [pc, #480]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8006fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff0:	f7fb f950 	bl	8002294 <HAL_GetTick>
 8006ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ff6:	e008      	b.n	800700a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ff8:	f7fb f94c 	bl	8002294 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e260      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800700a:	4b70      	ldr	r3, [pc, #448]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0f0      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007016:	4b6d      	ldr	r3, [pc, #436]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	061b      	lsls	r3, r3, #24
 8007024:	4969      	ldr	r1, [pc, #420]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8007026:	4313      	orrs	r3, r2
 8007028:	60cb      	str	r3, [r1, #12]
 800702a:	e018      	b.n	800705e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800702c:	4b67      	ldr	r3, [pc, #412]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a66      	ldr	r2, [pc, #408]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8007032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007038:	f7fb f92c 	bl	8002294 <HAL_GetTick>
 800703c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007040:	f7fb f928 	bl	8002294 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e23c      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007052:	4b5e      	ldr	r3, [pc, #376]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1f0      	bne.n	8007040 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b00      	cmp	r3, #0
 8007068:	d036      	beq.n	80070d8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d019      	beq.n	80070a6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007072:	4b56      	ldr	r3, [pc, #344]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8007074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007076:	4a55      	ldr	r2, [pc, #340]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8007078:	f043 0301 	orr.w	r3, r3, #1
 800707c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800707e:	f7fb f909 	bl	8002294 <HAL_GetTick>
 8007082:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007084:	e008      	b.n	8007098 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007086:	f7fb f905 	bl	8002294 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d901      	bls.n	8007098 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e219      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007098:	4b4c      	ldr	r3, [pc, #304]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 800709a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0f0      	beq.n	8007086 <HAL_RCC_OscConfig+0x35e>
 80070a4:	e018      	b.n	80070d8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070a6:	4b49      	ldr	r3, [pc, #292]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 80070a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070aa:	4a48      	ldr	r2, [pc, #288]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 80070ac:	f023 0301 	bic.w	r3, r3, #1
 80070b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b2:	f7fb f8ef 	bl	8002294 <HAL_GetTick>
 80070b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070b8:	e008      	b.n	80070cc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070ba:	f7fb f8eb 	bl	8002294 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e1ff      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070cc:	4b3f      	ldr	r3, [pc, #252]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 80070ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1f0      	bne.n	80070ba <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d036      	beq.n	8007152 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d019      	beq.n	8007120 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070ec:	4b37      	ldr	r3, [pc, #220]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a36      	ldr	r2, [pc, #216]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 80070f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070f8:	f7fb f8cc 	bl	8002294 <HAL_GetTick>
 80070fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070fe:	e008      	b.n	8007112 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007100:	f7fb f8c8 	bl	8002294 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d901      	bls.n	8007112 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e1dc      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007112:	4b2e      	ldr	r3, [pc, #184]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0f0      	beq.n	8007100 <HAL_RCC_OscConfig+0x3d8>
 800711e:	e018      	b.n	8007152 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007120:	4b2a      	ldr	r3, [pc, #168]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a29      	ldr	r2, [pc, #164]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8007126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800712a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800712c:	f7fb f8b2 	bl	8002294 <HAL_GetTick>
 8007130:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007134:	f7fb f8ae 	bl	8002294 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b02      	cmp	r3, #2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e1c2      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007146:	4b21      	ldr	r3, [pc, #132]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1f0      	bne.n	8007134 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 8086 	beq.w	800726c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007160:	4b1b      	ldr	r3, [pc, #108]	; (80071d0 <HAL_RCC_OscConfig+0x4a8>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a1a      	ldr	r2, [pc, #104]	; (80071d0 <HAL_RCC_OscConfig+0x4a8>)
 8007166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800716a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800716c:	f7fb f892 	bl	8002294 <HAL_GetTick>
 8007170:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007172:	e008      	b.n	8007186 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007174:	f7fb f88e 	bl	8002294 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	2b64      	cmp	r3, #100	; 0x64
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e1a2      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007186:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <HAL_RCC_OscConfig+0x4a8>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0f0      	beq.n	8007174 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d106      	bne.n	80071a8 <HAL_RCC_OscConfig+0x480>
 800719a:	4b0c      	ldr	r3, [pc, #48]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 800719c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719e:	4a0b      	ldr	r2, [pc, #44]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	6713      	str	r3, [r2, #112]	; 0x70
 80071a6:	e032      	b.n	800720e <HAL_RCC_OscConfig+0x4e6>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d111      	bne.n	80071d4 <HAL_RCC_OscConfig+0x4ac>
 80071b0:	4b06      	ldr	r3, [pc, #24]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 80071b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b4:	4a05      	ldr	r2, [pc, #20]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 80071b6:	f023 0301 	bic.w	r3, r3, #1
 80071ba:	6713      	str	r3, [r2, #112]	; 0x70
 80071bc:	4b03      	ldr	r3, [pc, #12]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 80071be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c0:	4a02      	ldr	r2, [pc, #8]	; (80071cc <HAL_RCC_OscConfig+0x4a4>)
 80071c2:	f023 0304 	bic.w	r3, r3, #4
 80071c6:	6713      	str	r3, [r2, #112]	; 0x70
 80071c8:	e021      	b.n	800720e <HAL_RCC_OscConfig+0x4e6>
 80071ca:	bf00      	nop
 80071cc:	58024400 	.word	0x58024400
 80071d0:	58024800 	.word	0x58024800
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b05      	cmp	r3, #5
 80071da:	d10c      	bne.n	80071f6 <HAL_RCC_OscConfig+0x4ce>
 80071dc:	4b83      	ldr	r3, [pc, #524]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	4a82      	ldr	r2, [pc, #520]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 80071e2:	f043 0304 	orr.w	r3, r3, #4
 80071e6:	6713      	str	r3, [r2, #112]	; 0x70
 80071e8:	4b80      	ldr	r3, [pc, #512]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 80071ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ec:	4a7f      	ldr	r2, [pc, #508]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 80071ee:	f043 0301 	orr.w	r3, r3, #1
 80071f2:	6713      	str	r3, [r2, #112]	; 0x70
 80071f4:	e00b      	b.n	800720e <HAL_RCC_OscConfig+0x4e6>
 80071f6:	4b7d      	ldr	r3, [pc, #500]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 80071f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fa:	4a7c      	ldr	r2, [pc, #496]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	6713      	str	r3, [r2, #112]	; 0x70
 8007202:	4b7a      	ldr	r3, [pc, #488]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007206:	4a79      	ldr	r2, [pc, #484]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007208:	f023 0304 	bic.w	r3, r3, #4
 800720c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d015      	beq.n	8007242 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007216:	f7fb f83d 	bl	8002294 <HAL_GetTick>
 800721a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800721c:	e00a      	b.n	8007234 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800721e:	f7fb f839 	bl	8002294 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	f241 3288 	movw	r2, #5000	; 0x1388
 800722c:	4293      	cmp	r3, r2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e14b      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007234:	4b6d      	ldr	r3, [pc, #436]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0ee      	beq.n	800721e <HAL_RCC_OscConfig+0x4f6>
 8007240:	e014      	b.n	800726c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007242:	f7fb f827 	bl	8002294 <HAL_GetTick>
 8007246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007248:	e00a      	b.n	8007260 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800724a:	f7fb f823 	bl	8002294 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	f241 3288 	movw	r2, #5000	; 0x1388
 8007258:	4293      	cmp	r3, r2
 800725a:	d901      	bls.n	8007260 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e135      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007260:	4b62      	ldr	r3, [pc, #392]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1ee      	bne.n	800724a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 812a 	beq.w	80074ca <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007276:	4b5d      	ldr	r3, [pc, #372]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800727e:	2b18      	cmp	r3, #24
 8007280:	f000 80ba 	beq.w	80073f8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	2b02      	cmp	r3, #2
 800728a:	f040 8095 	bne.w	80073b8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800728e:	4b57      	ldr	r3, [pc, #348]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a56      	ldr	r2, [pc, #344]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729a:	f7fa fffb 	bl	8002294 <HAL_GetTick>
 800729e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072a0:	e008      	b.n	80072b4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072a2:	f7fa fff7 	bl	8002294 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e10b      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072b4:	4b4d      	ldr	r3, [pc, #308]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1f0      	bne.n	80072a2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072c0:	4b4a      	ldr	r3, [pc, #296]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 80072c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072c4:	4b4a      	ldr	r3, [pc, #296]	; (80073f0 <HAL_RCC_OscConfig+0x6c8>)
 80072c6:	4013      	ands	r3, r2
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80072d0:	0112      	lsls	r2, r2, #4
 80072d2:	430a      	orrs	r2, r1
 80072d4:	4945      	ldr	r1, [pc, #276]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	628b      	str	r3, [r1, #40]	; 0x28
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072de:	3b01      	subs	r3, #1
 80072e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e8:	3b01      	subs	r3, #1
 80072ea:	025b      	lsls	r3, r3, #9
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	3b01      	subs	r3, #1
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80072fc:	431a      	orrs	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007302:	3b01      	subs	r3, #1
 8007304:	061b      	lsls	r3, r3, #24
 8007306:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800730a:	4938      	ldr	r1, [pc, #224]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 800730c:	4313      	orrs	r3, r2
 800730e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007310:	4b36      	ldr	r3, [pc, #216]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	4a35      	ldr	r2, [pc, #212]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007316:	f023 0301 	bic.w	r3, r3, #1
 800731a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800731c:	4b33      	ldr	r3, [pc, #204]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 800731e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007320:	4b34      	ldr	r3, [pc, #208]	; (80073f4 <HAL_RCC_OscConfig+0x6cc>)
 8007322:	4013      	ands	r3, r2
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007328:	00d2      	lsls	r2, r2, #3
 800732a:	4930      	ldr	r1, [pc, #192]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 800732c:	4313      	orrs	r3, r2
 800732e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007330:	4b2e      	ldr	r3, [pc, #184]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	f023 020c 	bic.w	r2, r3, #12
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733c:	492b      	ldr	r1, [pc, #172]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 800733e:	4313      	orrs	r3, r2
 8007340:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007342:	4b2a      	ldr	r3, [pc, #168]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007346:	f023 0202 	bic.w	r2, r3, #2
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734e:	4927      	ldr	r1, [pc, #156]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007350:	4313      	orrs	r3, r2
 8007352:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007354:	4b25      	ldr	r3, [pc, #148]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	4a24      	ldr	r2, [pc, #144]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 800735a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800735e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007360:	4b22      	ldr	r3, [pc, #136]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	4a21      	ldr	r2, [pc, #132]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800736a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800736c:	4b1f      	ldr	r3, [pc, #124]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	4a1e      	ldr	r2, [pc, #120]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007376:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007378:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	4a1b      	ldr	r2, [pc, #108]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 800737e:	f043 0301 	orr.w	r3, r3, #1
 8007382:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007384:	4b19      	ldr	r3, [pc, #100]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a18      	ldr	r2, [pc, #96]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 800738a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800738e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007390:	f7fa ff80 	bl	8002294 <HAL_GetTick>
 8007394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007396:	e008      	b.n	80073aa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007398:	f7fa ff7c 	bl	8002294 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e090      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073aa:	4b10      	ldr	r3, [pc, #64]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0f0      	beq.n	8007398 <HAL_RCC_OscConfig+0x670>
 80073b6:	e088      	b.n	80074ca <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a0b      	ldr	r2, [pc, #44]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 80073be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c4:	f7fa ff66 	bl	8002294 <HAL_GetTick>
 80073c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073cc:	f7fa ff62 	bl	8002294 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e076      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073de:	4b03      	ldr	r3, [pc, #12]	; (80073ec <HAL_RCC_OscConfig+0x6c4>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f0      	bne.n	80073cc <HAL_RCC_OscConfig+0x6a4>
 80073ea:	e06e      	b.n	80074ca <HAL_RCC_OscConfig+0x7a2>
 80073ec:	58024400 	.word	0x58024400
 80073f0:	fffffc0c 	.word	0xfffffc0c
 80073f4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80073f8:	4b36      	ldr	r3, [pc, #216]	; (80074d4 <HAL_RCC_OscConfig+0x7ac>)
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80073fe:	4b35      	ldr	r3, [pc, #212]	; (80074d4 <HAL_RCC_OscConfig+0x7ac>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	2b01      	cmp	r3, #1
 800740a:	d031      	beq.n	8007470 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f003 0203 	and.w	r2, r3, #3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007416:	429a      	cmp	r2, r3
 8007418:	d12a      	bne.n	8007470 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	091b      	lsrs	r3, r3, #4
 800741e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007426:	429a      	cmp	r2, r3
 8007428:	d122      	bne.n	8007470 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007434:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007436:	429a      	cmp	r2, r3
 8007438:	d11a      	bne.n	8007470 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	0a5b      	lsrs	r3, r3, #9
 800743e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007446:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007448:	429a      	cmp	r2, r3
 800744a:	d111      	bne.n	8007470 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	0c1b      	lsrs	r3, r3, #16
 8007450:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800745a:	429a      	cmp	r2, r3
 800745c:	d108      	bne.n	8007470 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	0e1b      	lsrs	r3, r3, #24
 8007462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800746c:	429a      	cmp	r2, r3
 800746e:	d001      	beq.n	8007474 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e02b      	b.n	80074cc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007474:	4b17      	ldr	r3, [pc, #92]	; (80074d4 <HAL_RCC_OscConfig+0x7ac>)
 8007476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007478:	08db      	lsrs	r3, r3, #3
 800747a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800747e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	429a      	cmp	r2, r3
 8007488:	d01f      	beq.n	80074ca <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800748a:	4b12      	ldr	r3, [pc, #72]	; (80074d4 <HAL_RCC_OscConfig+0x7ac>)
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	4a11      	ldr	r2, [pc, #68]	; (80074d4 <HAL_RCC_OscConfig+0x7ac>)
 8007490:	f023 0301 	bic.w	r3, r3, #1
 8007494:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007496:	f7fa fefd 	bl	8002294 <HAL_GetTick>
 800749a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800749c:	bf00      	nop
 800749e:	f7fa fef9 	bl	8002294 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d0f9      	beq.n	800749e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80074aa:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <HAL_RCC_OscConfig+0x7ac>)
 80074ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ae:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <HAL_RCC_OscConfig+0x7b0>)
 80074b0:	4013      	ands	r3, r2
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80074b6:	00d2      	lsls	r2, r2, #3
 80074b8:	4906      	ldr	r1, [pc, #24]	; (80074d4 <HAL_RCC_OscConfig+0x7ac>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80074be:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <HAL_RCC_OscConfig+0x7ac>)
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	4a04      	ldr	r2, [pc, #16]	; (80074d4 <HAL_RCC_OscConfig+0x7ac>)
 80074c4:	f043 0301 	orr.w	r3, r3, #1
 80074c8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3730      	adds	r7, #48	; 0x30
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	58024400 	.word	0x58024400
 80074d8:	ffff0007 	.word	0xffff0007

080074dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e19c      	b.n	800782a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074f0:	4b8a      	ldr	r3, [pc, #552]	; (800771c <HAL_RCC_ClockConfig+0x240>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 030f 	and.w	r3, r3, #15
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d910      	bls.n	8007520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074fe:	4b87      	ldr	r3, [pc, #540]	; (800771c <HAL_RCC_ClockConfig+0x240>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f023 020f 	bic.w	r2, r3, #15
 8007506:	4985      	ldr	r1, [pc, #532]	; (800771c <HAL_RCC_ClockConfig+0x240>)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	4313      	orrs	r3, r2
 800750c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800750e:	4b83      	ldr	r3, [pc, #524]	; (800771c <HAL_RCC_ClockConfig+0x240>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	429a      	cmp	r2, r3
 800751a:	d001      	beq.n	8007520 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e184      	b.n	800782a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d010      	beq.n	800754e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	4b7b      	ldr	r3, [pc, #492]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007538:	429a      	cmp	r2, r3
 800753a:	d908      	bls.n	800754e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800753c:	4b78      	ldr	r3, [pc, #480]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	4975      	ldr	r1, [pc, #468]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 800754a:	4313      	orrs	r3, r2
 800754c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0308 	and.w	r3, r3, #8
 8007556:	2b00      	cmp	r3, #0
 8007558:	d010      	beq.n	800757c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	695a      	ldr	r2, [r3, #20]
 800755e:	4b70      	ldr	r3, [pc, #448]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007566:	429a      	cmp	r2, r3
 8007568:	d908      	bls.n	800757c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800756a:	4b6d      	ldr	r3, [pc, #436]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	496a      	ldr	r1, [pc, #424]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 8007578:	4313      	orrs	r3, r2
 800757a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0310 	and.w	r3, r3, #16
 8007584:	2b00      	cmp	r3, #0
 8007586:	d010      	beq.n	80075aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	699a      	ldr	r2, [r3, #24]
 800758c:	4b64      	ldr	r3, [pc, #400]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007594:	429a      	cmp	r2, r3
 8007596:	d908      	bls.n	80075aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007598:	4b61      	ldr	r3, [pc, #388]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	495e      	ldr	r1, [pc, #376]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d010      	beq.n	80075d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69da      	ldr	r2, [r3, #28]
 80075ba:	4b59      	ldr	r3, [pc, #356]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d908      	bls.n	80075d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80075c6:	4b56      	ldr	r3, [pc, #344]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	4953      	ldr	r1, [pc, #332]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d010      	beq.n	8007606 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68da      	ldr	r2, [r3, #12]
 80075e8:	4b4d      	ldr	r3, [pc, #308]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	f003 030f 	and.w	r3, r3, #15
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d908      	bls.n	8007606 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075f4:	4b4a      	ldr	r3, [pc, #296]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	f023 020f 	bic.w	r2, r3, #15
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	4947      	ldr	r1, [pc, #284]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 8007602:	4313      	orrs	r3, r2
 8007604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d055      	beq.n	80076be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007612:	4b43      	ldr	r3, [pc, #268]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	4940      	ldr	r1, [pc, #256]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 8007620:	4313      	orrs	r3, r2
 8007622:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2b02      	cmp	r3, #2
 800762a:	d107      	bne.n	800763c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800762c:	4b3c      	ldr	r3, [pc, #240]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d121      	bne.n	800767c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e0f6      	b.n	800782a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b03      	cmp	r3, #3
 8007642:	d107      	bne.n	8007654 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007644:	4b36      	ldr	r3, [pc, #216]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d115      	bne.n	800767c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e0ea      	b.n	800782a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d107      	bne.n	800766c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800765c:	4b30      	ldr	r3, [pc, #192]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007664:	2b00      	cmp	r3, #0
 8007666:	d109      	bne.n	800767c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e0de      	b.n	800782a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800766c:	4b2c      	ldr	r3, [pc, #176]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0304 	and.w	r3, r3, #4
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e0d6      	b.n	800782a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800767c:	4b28      	ldr	r3, [pc, #160]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	f023 0207 	bic.w	r2, r3, #7
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	4925      	ldr	r1, [pc, #148]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 800768a:	4313      	orrs	r3, r2
 800768c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800768e:	f7fa fe01 	bl	8002294 <HAL_GetTick>
 8007692:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007694:	e00a      	b.n	80076ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007696:	f7fa fdfd 	bl	8002294 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e0be      	b.n	800782a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ac:	4b1c      	ldr	r3, [pc, #112]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d1eb      	bne.n	8007696 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d010      	beq.n	80076ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	4b14      	ldr	r3, [pc, #80]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	f003 030f 	and.w	r3, r3, #15
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d208      	bcs.n	80076ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076da:	4b11      	ldr	r3, [pc, #68]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	f023 020f 	bic.w	r2, r3, #15
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	490e      	ldr	r1, [pc, #56]	; (8007720 <HAL_RCC_ClockConfig+0x244>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076ec:	4b0b      	ldr	r3, [pc, #44]	; (800771c <HAL_RCC_ClockConfig+0x240>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 030f 	and.w	r3, r3, #15
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d214      	bcs.n	8007724 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076fa:	4b08      	ldr	r3, [pc, #32]	; (800771c <HAL_RCC_ClockConfig+0x240>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f023 020f 	bic.w	r2, r3, #15
 8007702:	4906      	ldr	r1, [pc, #24]	; (800771c <HAL_RCC_ClockConfig+0x240>)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	4313      	orrs	r3, r2
 8007708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800770a:	4b04      	ldr	r3, [pc, #16]	; (800771c <HAL_RCC_ClockConfig+0x240>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 030f 	and.w	r3, r3, #15
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d005      	beq.n	8007724 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e086      	b.n	800782a <HAL_RCC_ClockConfig+0x34e>
 800771c:	52002000 	.word	0x52002000
 8007720:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d010      	beq.n	8007752 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	4b3f      	ldr	r3, [pc, #252]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800773c:	429a      	cmp	r2, r3
 800773e:	d208      	bcs.n	8007752 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007740:	4b3c      	ldr	r3, [pc, #240]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	4939      	ldr	r1, [pc, #228]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 800774e:	4313      	orrs	r3, r2
 8007750:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0308 	and.w	r3, r3, #8
 800775a:	2b00      	cmp	r3, #0
 800775c:	d010      	beq.n	8007780 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	695a      	ldr	r2, [r3, #20]
 8007762:	4b34      	ldr	r3, [pc, #208]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800776a:	429a      	cmp	r2, r3
 800776c:	d208      	bcs.n	8007780 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800776e:	4b31      	ldr	r3, [pc, #196]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	492e      	ldr	r1, [pc, #184]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 800777c:	4313      	orrs	r3, r2
 800777e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0310 	and.w	r3, r3, #16
 8007788:	2b00      	cmp	r3, #0
 800778a:	d010      	beq.n	80077ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	699a      	ldr	r2, [r3, #24]
 8007790:	4b28      	ldr	r3, [pc, #160]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007798:	429a      	cmp	r2, r3
 800779a:	d208      	bcs.n	80077ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800779c:	4b25      	ldr	r3, [pc, #148]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	4922      	ldr	r1, [pc, #136]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0320 	and.w	r3, r3, #32
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d010      	beq.n	80077dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	69da      	ldr	r2, [r3, #28]
 80077be:	4b1d      	ldr	r3, [pc, #116]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d208      	bcs.n	80077dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80077ca:	4b1a      	ldr	r3, [pc, #104]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	4917      	ldr	r1, [pc, #92]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80077dc:	f000 f834 	bl	8007848 <HAL_RCC_GetSysClockFreq>
 80077e0:	4602      	mov	r2, r0
 80077e2:	4b14      	ldr	r3, [pc, #80]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	0a1b      	lsrs	r3, r3, #8
 80077e8:	f003 030f 	and.w	r3, r3, #15
 80077ec:	4912      	ldr	r1, [pc, #72]	; (8007838 <HAL_RCC_ClockConfig+0x35c>)
 80077ee:	5ccb      	ldrb	r3, [r1, r3]
 80077f0:	f003 031f 	and.w	r3, r3, #31
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
 80077f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077fa:	4b0e      	ldr	r3, [pc, #56]	; (8007834 <HAL_RCC_ClockConfig+0x358>)
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	4a0d      	ldr	r2, [pc, #52]	; (8007838 <HAL_RCC_ClockConfig+0x35c>)
 8007804:	5cd3      	ldrb	r3, [r2, r3]
 8007806:	f003 031f 	and.w	r3, r3, #31
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	fa22 f303 	lsr.w	r3, r2, r3
 8007810:	4a0a      	ldr	r2, [pc, #40]	; (800783c <HAL_RCC_ClockConfig+0x360>)
 8007812:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007814:	4a0a      	ldr	r2, [pc, #40]	; (8007840 <HAL_RCC_ClockConfig+0x364>)
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800781a:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <HAL_RCC_ClockConfig+0x368>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4618      	mov	r0, r3
 8007820:	f7fa fcee 	bl	8002200 <HAL_InitTick>
 8007824:	4603      	mov	r3, r0
 8007826:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	58024400 	.word	0x58024400
 8007838:	08011798 	.word	0x08011798
 800783c:	24000388 	.word	0x24000388
 8007840:	24000384 	.word	0x24000384
 8007844:	2400038c 	.word	0x2400038c

08007848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007848:	b480      	push	{r7}
 800784a:	b089      	sub	sp, #36	; 0x24
 800784c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800784e:	4bb3      	ldr	r3, [pc, #716]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007856:	2b18      	cmp	r3, #24
 8007858:	f200 8155 	bhi.w	8007b06 <HAL_RCC_GetSysClockFreq+0x2be>
 800785c:	a201      	add	r2, pc, #4	; (adr r2, 8007864 <HAL_RCC_GetSysClockFreq+0x1c>)
 800785e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007862:	bf00      	nop
 8007864:	080078c9 	.word	0x080078c9
 8007868:	08007b07 	.word	0x08007b07
 800786c:	08007b07 	.word	0x08007b07
 8007870:	08007b07 	.word	0x08007b07
 8007874:	08007b07 	.word	0x08007b07
 8007878:	08007b07 	.word	0x08007b07
 800787c:	08007b07 	.word	0x08007b07
 8007880:	08007b07 	.word	0x08007b07
 8007884:	080078ef 	.word	0x080078ef
 8007888:	08007b07 	.word	0x08007b07
 800788c:	08007b07 	.word	0x08007b07
 8007890:	08007b07 	.word	0x08007b07
 8007894:	08007b07 	.word	0x08007b07
 8007898:	08007b07 	.word	0x08007b07
 800789c:	08007b07 	.word	0x08007b07
 80078a0:	08007b07 	.word	0x08007b07
 80078a4:	080078f5 	.word	0x080078f5
 80078a8:	08007b07 	.word	0x08007b07
 80078ac:	08007b07 	.word	0x08007b07
 80078b0:	08007b07 	.word	0x08007b07
 80078b4:	08007b07 	.word	0x08007b07
 80078b8:	08007b07 	.word	0x08007b07
 80078bc:	08007b07 	.word	0x08007b07
 80078c0:	08007b07 	.word	0x08007b07
 80078c4:	080078fb 	.word	0x080078fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078c8:	4b94      	ldr	r3, [pc, #592]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d009      	beq.n	80078e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078d4:	4b91      	ldr	r3, [pc, #580]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	08db      	lsrs	r3, r3, #3
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	4a90      	ldr	r2, [pc, #576]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078e0:	fa22 f303 	lsr.w	r3, r2, r3
 80078e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80078e6:	e111      	b.n	8007b0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80078e8:	4b8d      	ldr	r3, [pc, #564]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078ea:	61bb      	str	r3, [r7, #24]
      break;
 80078ec:	e10e      	b.n	8007b0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80078ee:	4b8d      	ldr	r3, [pc, #564]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078f0:	61bb      	str	r3, [r7, #24]
      break;
 80078f2:	e10b      	b.n	8007b0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80078f4:	4b8c      	ldr	r3, [pc, #560]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80078f6:	61bb      	str	r3, [r7, #24]
      break;
 80078f8:	e108      	b.n	8007b0c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078fa:	4b88      	ldr	r3, [pc, #544]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007904:	4b85      	ldr	r3, [pc, #532]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007908:	091b      	lsrs	r3, r3, #4
 800790a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800790e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007910:	4b82      	ldr	r3, [pc, #520]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800791a:	4b80      	ldr	r3, [pc, #512]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800791c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791e:	08db      	lsrs	r3, r3, #3
 8007920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	fb02 f303 	mul.w	r3, r2, r3
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007932:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80e1 	beq.w	8007b00 <HAL_RCC_GetSysClockFreq+0x2b8>
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b02      	cmp	r3, #2
 8007942:	f000 8083 	beq.w	8007a4c <HAL_RCC_GetSysClockFreq+0x204>
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b02      	cmp	r3, #2
 800794a:	f200 80a1 	bhi.w	8007a90 <HAL_RCC_GetSysClockFreq+0x248>
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d003      	beq.n	800795c <HAL_RCC_GetSysClockFreq+0x114>
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d056      	beq.n	8007a08 <HAL_RCC_GetSysClockFreq+0x1c0>
 800795a:	e099      	b.n	8007a90 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800795c:	4b6f      	ldr	r3, [pc, #444]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b00      	cmp	r3, #0
 8007966:	d02d      	beq.n	80079c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007968:	4b6c      	ldr	r3, [pc, #432]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	08db      	lsrs	r3, r3, #3
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	4a6b      	ldr	r2, [pc, #428]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007974:	fa22 f303 	lsr.w	r3, r2, r3
 8007978:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	ee07 3a90 	vmov	s15, r3
 8007980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	ee07 3a90 	vmov	s15, r3
 800798a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007992:	4b62      	ldr	r3, [pc, #392]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80079a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80079aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80079c2:	e087      	b.n	8007ad4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007b30 <HAL_RCC_GetSysClockFreq+0x2e8>
 80079d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d6:	4b51      	ldr	r3, [pc, #324]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80079ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80079ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a06:	e065      	b.n	8007ad4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007b34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1a:	4b40      	ldr	r3, [pc, #256]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a4a:	e043      	b.n	8007ad4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	ee07 3a90 	vmov	s15, r3
 8007a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a56:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007b38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a5e:	4b2f      	ldr	r3, [pc, #188]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a8e:	e021      	b.n	8007ad4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007b34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa2:	4b1e      	ldr	r3, [pc, #120]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aaa:	ee07 3a90 	vmov	s15, r3
 8007aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ab6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ace:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ad2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007ad4:	4b11      	ldr	r3, [pc, #68]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad8:	0a5b      	lsrs	r3, r3, #9
 8007ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ade:	3301      	adds	r3, #1
 8007ae0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	ee07 3a90 	vmov	s15, r3
 8007ae8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af8:	ee17 3a90 	vmov	r3, s15
 8007afc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007afe:	e005      	b.n	8007b0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	61bb      	str	r3, [r7, #24]
      break;
 8007b04:	e002      	b.n	8007b0c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007b06:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b08:	61bb      	str	r3, [r7, #24]
      break;
 8007b0a:	bf00      	nop
  }

  return sysclockfreq;
 8007b0c:	69bb      	ldr	r3, [r7, #24]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3724      	adds	r7, #36	; 0x24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	58024400 	.word	0x58024400
 8007b20:	03d09000 	.word	0x03d09000
 8007b24:	003d0900 	.word	0x003d0900
 8007b28:	017d7840 	.word	0x017d7840
 8007b2c:	46000000 	.word	0x46000000
 8007b30:	4c742400 	.word	0x4c742400
 8007b34:	4a742400 	.word	0x4a742400
 8007b38:	4bbebc20 	.word	0x4bbebc20

08007b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b42:	f7ff fe81 	bl	8007848 <HAL_RCC_GetSysClockFreq>
 8007b46:	4602      	mov	r2, r0
 8007b48:	4b10      	ldr	r3, [pc, #64]	; (8007b8c <HAL_RCC_GetHCLKFreq+0x50>)
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	0a1b      	lsrs	r3, r3, #8
 8007b4e:	f003 030f 	and.w	r3, r3, #15
 8007b52:	490f      	ldr	r1, [pc, #60]	; (8007b90 <HAL_RCC_GetHCLKFreq+0x54>)
 8007b54:	5ccb      	ldrb	r3, [r1, r3]
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b60:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <HAL_RCC_GetHCLKFreq+0x50>)
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	4a09      	ldr	r2, [pc, #36]	; (8007b90 <HAL_RCC_GetHCLKFreq+0x54>)
 8007b6a:	5cd3      	ldrb	r3, [r2, r3]
 8007b6c:	f003 031f 	and.w	r3, r3, #31
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	fa22 f303 	lsr.w	r3, r2, r3
 8007b76:	4a07      	ldr	r2, [pc, #28]	; (8007b94 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b7a:	4a07      	ldr	r2, [pc, #28]	; (8007b98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007b80:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b82:	681b      	ldr	r3, [r3, #0]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	58024400 	.word	0x58024400
 8007b90:	08011798 	.word	0x08011798
 8007b94:	24000388 	.word	0x24000388
 8007b98:	24000384 	.word	0x24000384

08007b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007ba0:	f7ff ffcc 	bl	8007b3c <HAL_RCC_GetHCLKFreq>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	091b      	lsrs	r3, r3, #4
 8007bac:	f003 0307 	and.w	r3, r3, #7
 8007bb0:	4904      	ldr	r1, [pc, #16]	; (8007bc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007bb2:	5ccb      	ldrb	r3, [r1, r3]
 8007bb4:	f003 031f 	and.w	r3, r3, #31
 8007bb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	08011798 	.word	0x08011798

08007bc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bcc:	b0c6      	sub	sp, #280	; 0x118
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007bec:	2500      	movs	r5, #0
 8007bee:	ea54 0305 	orrs.w	r3, r4, r5
 8007bf2:	d049      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bfe:	d02f      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007c00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c04:	d828      	bhi.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c0a:	d01a      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007c0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c10:	d822      	bhi.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c1a:	d007      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007c1c:	e01c      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c1e:	4bab      	ldr	r3, [pc, #684]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	4aaa      	ldr	r2, [pc, #680]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007c2a:	e01a      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c30:	3308      	adds	r3, #8
 8007c32:	2102      	movs	r1, #2
 8007c34:	4618      	mov	r0, r3
 8007c36:	f002 fa49 	bl	800a0cc <RCCEx_PLL2_Config>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007c40:	e00f      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c46:	3328      	adds	r3, #40	; 0x28
 8007c48:	2102      	movs	r1, #2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f002 faf0 	bl	800a230 <RCCEx_PLL3_Config>
 8007c50:	4603      	mov	r3, r0
 8007c52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007c56:	e004      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007c5e:	e000      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10a      	bne.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007c6a:	4b98      	ldr	r3, [pc, #608]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c78:	4a94      	ldr	r2, [pc, #592]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	6513      	str	r3, [r2, #80]	; 0x50
 8007c7e:	e003      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007c94:	f04f 0900 	mov.w	r9, #0
 8007c98:	ea58 0309 	orrs.w	r3, r8, r9
 8007c9c:	d047      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca4:	2b04      	cmp	r3, #4
 8007ca6:	d82a      	bhi.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007ca8:	a201      	add	r2, pc, #4	; (adr r2, 8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cae:	bf00      	nop
 8007cb0:	08007cc5 	.word	0x08007cc5
 8007cb4:	08007cd3 	.word	0x08007cd3
 8007cb8:	08007ce9 	.word	0x08007ce9
 8007cbc:	08007d07 	.word	0x08007d07
 8007cc0:	08007d07 	.word	0x08007d07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc4:	4b81      	ldr	r3, [pc, #516]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc8:	4a80      	ldr	r2, [pc, #512]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cd0:	e01a      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f002 f9f6 	bl	800a0cc <RCCEx_PLL2_Config>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ce6:	e00f      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cec:	3328      	adds	r3, #40	; 0x28
 8007cee:	2100      	movs	r1, #0
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f002 fa9d 	bl	800a230 <RCCEx_PLL3_Config>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cfc:	e004      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007d04:	e000      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d10:	4b6e      	ldr	r3, [pc, #440]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d14:	f023 0107 	bic.w	r1, r3, #7
 8007d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1e:	4a6b      	ldr	r2, [pc, #428]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d20:	430b      	orrs	r3, r1
 8007d22:	6513      	str	r3, [r2, #80]	; 0x50
 8007d24:	e003      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8007d3a:	f04f 0b00 	mov.w	fp, #0
 8007d3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007d42:	d05b      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d4c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007d50:	d03b      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007d52:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007d56:	d834      	bhi.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007d58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d5c:	d037      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007d5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d62:	d82e      	bhi.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007d64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d68:	d033      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007d6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d6e:	d828      	bhi.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d74:	d01a      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d7a:	d822      	bhi.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007d80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d84:	d007      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007d86:	e01c      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d88:	4b50      	ldr	r3, [pc, #320]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	4a4f      	ldr	r2, [pc, #316]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d94:	e01e      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f002 f994 	bl	800a0cc <RCCEx_PLL2_Config>
 8007da4:	4603      	mov	r3, r0
 8007da6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007daa:	e013      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db0:	3328      	adds	r3, #40	; 0x28
 8007db2:	2100      	movs	r1, #0
 8007db4:	4618      	mov	r0, r3
 8007db6:	f002 fa3b 	bl	800a230 <RCCEx_PLL3_Config>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dc0:	e008      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007dc8:	e004      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007dca:	bf00      	nop
 8007dcc:	e002      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007dce:	bf00      	nop
 8007dd0:	e000      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10b      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ddc:	4b3b      	ldr	r3, [pc, #236]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007de8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007dec:	4a37      	ldr	r2, [pc, #220]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007dee:	430b      	orrs	r3, r1
 8007df0:	6593      	str	r3, [r2, #88]	; 0x58
 8007df2:	e003      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007df8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e04:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007e16:	460b      	mov	r3, r1
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	d05d      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e24:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007e28:	d03b      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007e2a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007e2e:	d834      	bhi.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007e30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e34:	d037      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007e36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e3a:	d82e      	bhi.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007e3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e40:	d033      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007e42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e46:	d828      	bhi.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007e48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e4c:	d01a      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e52:	d822      	bhi.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d003      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e5c:	d007      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007e5e:	e01c      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e60:	4b1a      	ldr	r3, [pc, #104]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	4a19      	ldr	r2, [pc, #100]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e6c:	e01e      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e72:	3308      	adds	r3, #8
 8007e74:	2100      	movs	r1, #0
 8007e76:	4618      	mov	r0, r3
 8007e78:	f002 f928 	bl	800a0cc <RCCEx_PLL2_Config>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007e82:	e013      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e88:	3328      	adds	r3, #40	; 0x28
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f002 f9cf 	bl	800a230 <RCCEx_PLL3_Config>
 8007e92:	4603      	mov	r3, r0
 8007e94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e98:	e008      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007ea0:	e004      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007ea2:	bf00      	nop
 8007ea4:	e002      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007ea6:	bf00      	nop
 8007ea8:	e000      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10d      	bne.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007eb4:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ec4:	4a01      	ldr	r2, [pc, #4]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ec6:	430b      	orrs	r3, r1
 8007ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8007eca:	e005      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007ecc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ed4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007ee4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007eee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	d03a      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007efe:	2b30      	cmp	r3, #48	; 0x30
 8007f00:	d01f      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007f02:	2b30      	cmp	r3, #48	; 0x30
 8007f04:	d819      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	d00c      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d815      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d019      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007f12:	2b10      	cmp	r3, #16
 8007f14:	d111      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f16:	4baa      	ldr	r3, [pc, #680]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1a:	4aa9      	ldr	r2, [pc, #676]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007f22:	e011      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f28:	3308      	adds	r3, #8
 8007f2a:	2102      	movs	r1, #2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f002 f8cd 	bl	800a0cc <RCCEx_PLL2_Config>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007f38:	e006      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007f40:	e002      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007f42:	bf00      	nop
 8007f44:	e000      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10a      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007f50:	4b9b      	ldr	r3, [pc, #620]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f54:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f5e:	4a98      	ldr	r2, [pc, #608]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f60:	430b      	orrs	r3, r1
 8007f62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f64:	e003      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	d051      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f98:	d035      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f9e:	d82e      	bhi.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007fa0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fa4:	d031      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007fa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007faa:	d828      	bhi.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fb0:	d01a      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fb6:	d822      	bhi.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fc0:	d007      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007fc2:	e01c      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc4:	4b7e      	ldr	r3, [pc, #504]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	4a7d      	ldr	r2, [pc, #500]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007fd0:	e01c      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f002 f876 	bl	800a0cc <RCCEx_PLL2_Config>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007fe6:	e011      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fec:	3328      	adds	r3, #40	; 0x28
 8007fee:	2100      	movs	r1, #0
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f002 f91d 	bl	800a230 <RCCEx_PLL3_Config>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ffc:	e006      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008004:	e002      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008006:	bf00      	nop
 8008008:	e000      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800800a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800800c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008014:	4b6a      	ldr	r3, [pc, #424]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008018:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800801c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008022:	4a67      	ldr	r2, [pc, #412]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008024:	430b      	orrs	r3, r1
 8008026:	6513      	str	r3, [r2, #80]	; 0x50
 8008028:	e003      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800802e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800803e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008042:	2300      	movs	r3, #0
 8008044:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008048:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800804c:	460b      	mov	r3, r1
 800804e:	4313      	orrs	r3, r2
 8008050:	d053      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800805c:	d033      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800805e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008062:	d82c      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008064:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008068:	d02f      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x502>
 800806a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800806e:	d826      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008070:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008074:	d02b      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008076:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800807a:	d820      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800807c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008080:	d012      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008082:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008086:	d81a      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d022      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800808c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008090:	d115      	bne.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008096:	3308      	adds	r3, #8
 8008098:	2101      	movs	r1, #1
 800809a:	4618      	mov	r0, r3
 800809c:	f002 f816 	bl	800a0cc <RCCEx_PLL2_Config>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80080a6:	e015      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ac:	3328      	adds	r3, #40	; 0x28
 80080ae:	2101      	movs	r1, #1
 80080b0:	4618      	mov	r0, r3
 80080b2:	f002 f8bd 	bl	800a230 <RCCEx_PLL3_Config>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80080bc:	e00a      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80080c4:	e006      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80080c6:	bf00      	nop
 80080c8:	e004      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80080ca:	bf00      	nop
 80080cc:	e002      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80080ce:	bf00      	nop
 80080d0:	e000      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80080d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10a      	bne.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80080dc:	4b38      	ldr	r3, [pc, #224]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80080e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ea:	4a35      	ldr	r2, [pc, #212]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080ec:	430b      	orrs	r3, r1
 80080ee:	6513      	str	r3, [r2, #80]	; 0x50
 80080f0:	e003      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80080f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80080fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800810a:	2300      	movs	r3, #0
 800810c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008110:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008114:	460b      	mov	r3, r1
 8008116:	4313      	orrs	r3, r2
 8008118:	d058      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800811a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800811e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008126:	d033      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800812c:	d82c      	bhi.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800812e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008132:	d02f      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008138:	d826      	bhi.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800813a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800813e:	d02b      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008140:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008144:	d820      	bhi.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800814a:	d012      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800814c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008150:	d81a      	bhi.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d022      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800815a:	d115      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800815c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008160:	3308      	adds	r3, #8
 8008162:	2101      	movs	r1, #1
 8008164:	4618      	mov	r0, r3
 8008166:	f001 ffb1 	bl	800a0cc <RCCEx_PLL2_Config>
 800816a:	4603      	mov	r3, r0
 800816c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008170:	e015      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008176:	3328      	adds	r3, #40	; 0x28
 8008178:	2101      	movs	r1, #1
 800817a:	4618      	mov	r0, r3
 800817c:	f002 f858 	bl	800a230 <RCCEx_PLL3_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008186:	e00a      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800818e:	e006      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008190:	bf00      	nop
 8008192:	e004      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008194:	bf00      	nop
 8008196:	e002      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008198:	bf00      	nop
 800819a:	e000      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800819c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800819e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10e      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081a6:	4b06      	ldr	r3, [pc, #24]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081aa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80081ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081b6:	4a02      	ldr	r2, [pc, #8]	; (80081c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081b8:	430b      	orrs	r3, r1
 80081ba:	6593      	str	r3, [r2, #88]	; 0x58
 80081bc:	e006      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80081be:	bf00      	nop
 80081c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80081c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80081d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081dc:	2300      	movs	r3, #0
 80081de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80081e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4313      	orrs	r3, r2
 80081ea:	d037      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80081ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f6:	d00e      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80081f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081fc:	d816      	bhi.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d018      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008206:	d111      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008208:	4bc4      	ldr	r3, [pc, #784]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	4ac3      	ldr	r2, [pc, #780]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800820e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008212:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008214:	e00f      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821a:	3308      	adds	r3, #8
 800821c:	2101      	movs	r1, #1
 800821e:	4618      	mov	r0, r3
 8008220:	f001 ff54 	bl	800a0cc <RCCEx_PLL2_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800822a:	e004      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008232:	e000      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008236:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10a      	bne.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800823e:	4bb7      	ldr	r3, [pc, #732]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008242:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800824c:	4ab3      	ldr	r2, [pc, #716]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800824e:	430b      	orrs	r3, r1
 8008250:	6513      	str	r3, [r2, #80]	; 0x50
 8008252:	e003      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008254:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008258:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800825c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008268:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800826c:	2300      	movs	r3, #0
 800826e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008272:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008276:	460b      	mov	r3, r1
 8008278:	4313      	orrs	r3, r2
 800827a:	d039      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800827c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008282:	2b03      	cmp	r3, #3
 8008284:	d81c      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008286:	a201      	add	r2, pc, #4	; (adr r2, 800828c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828c:	080082c9 	.word	0x080082c9
 8008290:	0800829d 	.word	0x0800829d
 8008294:	080082ab 	.word	0x080082ab
 8008298:	080082c9 	.word	0x080082c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800829c:	4b9f      	ldr	r3, [pc, #636]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	4a9e      	ldr	r2, [pc, #632]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80082a8:	e00f      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ae:	3308      	adds	r3, #8
 80082b0:	2102      	movs	r1, #2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f001 ff0a 	bl	800a0cc <RCCEx_PLL2_Config>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80082be:	e004      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80082c6:	e000      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80082c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10a      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80082d2:	4b92      	ldr	r3, [pc, #584]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d6:	f023 0103 	bic.w	r1, r3, #3
 80082da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082e0:	4a8e      	ldr	r2, [pc, #568]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082e2:	430b      	orrs	r3, r1
 80082e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082e6:	e003      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80082ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80082fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008300:	2300      	movs	r3, #0
 8008302:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008306:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800830a:	460b      	mov	r3, r1
 800830c:	4313      	orrs	r3, r2
 800830e:	f000 8099 	beq.w	8008444 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008312:	4b83      	ldr	r3, [pc, #524]	; (8008520 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a82      	ldr	r2, [pc, #520]	; (8008520 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800831c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800831e:	f7f9 ffb9 	bl	8002294 <HAL_GetTick>
 8008322:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008326:	e00b      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008328:	f7f9 ffb4 	bl	8002294 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	2b64      	cmp	r3, #100	; 0x64
 8008336:	d903      	bls.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800833e:	e005      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008340:	4b77      	ldr	r3, [pc, #476]	; (8008520 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008348:	2b00      	cmp	r3, #0
 800834a:	d0ed      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800834c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008350:	2b00      	cmp	r3, #0
 8008352:	d173      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008354:	4b71      	ldr	r3, [pc, #452]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008356:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800835c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008360:	4053      	eors	r3, r2
 8008362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008366:	2b00      	cmp	r3, #0
 8008368:	d015      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800836a:	4b6c      	ldr	r3, [pc, #432]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800836c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008372:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008376:	4b69      	ldr	r3, [pc, #420]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837a:	4a68      	ldr	r2, [pc, #416]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800837c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008380:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008382:	4b66      	ldr	r3, [pc, #408]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008386:	4a65      	ldr	r2, [pc, #404]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800838c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800838e:	4a63      	ldr	r2, [pc, #396]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008394:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800839a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800839e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a2:	d118      	bne.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a4:	f7f9 ff76 	bl	8002294 <HAL_GetTick>
 80083a8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ac:	e00d      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083ae:	f7f9 ff71 	bl	8002294 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80083b8:	1ad2      	subs	r2, r2, r3
 80083ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80083be:	429a      	cmp	r2, r3
 80083c0:	d903      	bls.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80083c8:	e005      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ca:	4b54      	ldr	r3, [pc, #336]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d0eb      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80083d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d129      	bne.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083ee:	d10e      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x846>
 80083f0:	4b4a      	ldr	r3, [pc, #296]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80083f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008400:	091a      	lsrs	r2, r3, #4
 8008402:	4b48      	ldr	r3, [pc, #288]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008404:	4013      	ands	r3, r2
 8008406:	4a45      	ldr	r2, [pc, #276]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008408:	430b      	orrs	r3, r1
 800840a:	6113      	str	r3, [r2, #16]
 800840c:	e005      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800840e:	4b43      	ldr	r3, [pc, #268]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	4a42      	ldr	r2, [pc, #264]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008414:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008418:	6113      	str	r3, [r2, #16]
 800841a:	4b40      	ldr	r3, [pc, #256]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800841c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800841e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008422:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800842a:	4a3c      	ldr	r2, [pc, #240]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800842c:	430b      	orrs	r3, r1
 800842e:	6713      	str	r3, [r2, #112]	; 0x70
 8008430:	e008      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008432:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008436:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800843a:	e003      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008440:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	f002 0301 	and.w	r3, r2, #1
 8008450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008454:	2300      	movs	r3, #0
 8008456:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800845a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800845e:	460b      	mov	r3, r1
 8008460:	4313      	orrs	r3, r2
 8008462:	f000 808f 	beq.w	8008584 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800846a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800846c:	2b28      	cmp	r3, #40	; 0x28
 800846e:	d871      	bhi.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008470:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008476:	bf00      	nop
 8008478:	0800855d 	.word	0x0800855d
 800847c:	08008555 	.word	0x08008555
 8008480:	08008555 	.word	0x08008555
 8008484:	08008555 	.word	0x08008555
 8008488:	08008555 	.word	0x08008555
 800848c:	08008555 	.word	0x08008555
 8008490:	08008555 	.word	0x08008555
 8008494:	08008555 	.word	0x08008555
 8008498:	08008529 	.word	0x08008529
 800849c:	08008555 	.word	0x08008555
 80084a0:	08008555 	.word	0x08008555
 80084a4:	08008555 	.word	0x08008555
 80084a8:	08008555 	.word	0x08008555
 80084ac:	08008555 	.word	0x08008555
 80084b0:	08008555 	.word	0x08008555
 80084b4:	08008555 	.word	0x08008555
 80084b8:	0800853f 	.word	0x0800853f
 80084bc:	08008555 	.word	0x08008555
 80084c0:	08008555 	.word	0x08008555
 80084c4:	08008555 	.word	0x08008555
 80084c8:	08008555 	.word	0x08008555
 80084cc:	08008555 	.word	0x08008555
 80084d0:	08008555 	.word	0x08008555
 80084d4:	08008555 	.word	0x08008555
 80084d8:	0800855d 	.word	0x0800855d
 80084dc:	08008555 	.word	0x08008555
 80084e0:	08008555 	.word	0x08008555
 80084e4:	08008555 	.word	0x08008555
 80084e8:	08008555 	.word	0x08008555
 80084ec:	08008555 	.word	0x08008555
 80084f0:	08008555 	.word	0x08008555
 80084f4:	08008555 	.word	0x08008555
 80084f8:	0800855d 	.word	0x0800855d
 80084fc:	08008555 	.word	0x08008555
 8008500:	08008555 	.word	0x08008555
 8008504:	08008555 	.word	0x08008555
 8008508:	08008555 	.word	0x08008555
 800850c:	08008555 	.word	0x08008555
 8008510:	08008555 	.word	0x08008555
 8008514:	08008555 	.word	0x08008555
 8008518:	0800855d 	.word	0x0800855d
 800851c:	58024400 	.word	0x58024400
 8008520:	58024800 	.word	0x58024800
 8008524:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800852c:	3308      	adds	r3, #8
 800852e:	2101      	movs	r1, #1
 8008530:	4618      	mov	r0, r3
 8008532:	f001 fdcb 	bl	800a0cc <RCCEx_PLL2_Config>
 8008536:	4603      	mov	r3, r0
 8008538:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800853c:	e00f      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800853e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008542:	3328      	adds	r3, #40	; 0x28
 8008544:	2101      	movs	r1, #1
 8008546:	4618      	mov	r0, r3
 8008548:	f001 fe72 	bl	800a230 <RCCEx_PLL3_Config>
 800854c:	4603      	mov	r3, r0
 800854e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008552:	e004      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800855a:	e000      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800855c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800855e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10a      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008566:	4bbf      	ldr	r3, [pc, #764]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800856a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800856e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008574:	4abb      	ldr	r2, [pc, #748]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008576:	430b      	orrs	r3, r1
 8008578:	6553      	str	r3, [r2, #84]	; 0x54
 800857a:	e003      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008580:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f002 0302 	and.w	r3, r2, #2
 8008590:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008594:	2300      	movs	r3, #0
 8008596:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800859a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800859e:	460b      	mov	r3, r1
 80085a0:	4313      	orrs	r3, r2
 80085a2:	d041      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80085a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085aa:	2b05      	cmp	r3, #5
 80085ac:	d824      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80085ae:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	08008601 	.word	0x08008601
 80085b8:	080085cd 	.word	0x080085cd
 80085bc:	080085e3 	.word	0x080085e3
 80085c0:	08008601 	.word	0x08008601
 80085c4:	08008601 	.word	0x08008601
 80085c8:	08008601 	.word	0x08008601
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d0:	3308      	adds	r3, #8
 80085d2:	2101      	movs	r1, #1
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 fd79 	bl	800a0cc <RCCEx_PLL2_Config>
 80085da:	4603      	mov	r3, r0
 80085dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80085e0:	e00f      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e6:	3328      	adds	r3, #40	; 0x28
 80085e8:	2101      	movs	r1, #1
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 fe20 	bl	800a230 <RCCEx_PLL3_Config>
 80085f0:	4603      	mov	r3, r0
 80085f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80085f6:	e004      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80085fe:	e000      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008602:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10a      	bne.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800860a:	4b96      	ldr	r3, [pc, #600]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800860c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860e:	f023 0107 	bic.w	r1, r3, #7
 8008612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008618:	4a92      	ldr	r2, [pc, #584]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800861a:	430b      	orrs	r3, r1
 800861c:	6553      	str	r3, [r2, #84]	; 0x54
 800861e:	e003      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008620:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008624:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f002 0304 	and.w	r3, r2, #4
 8008634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008638:	2300      	movs	r3, #0
 800863a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800863e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008642:	460b      	mov	r3, r1
 8008644:	4313      	orrs	r3, r2
 8008646:	d044      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008650:	2b05      	cmp	r3, #5
 8008652:	d825      	bhi.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008654:	a201      	add	r2, pc, #4	; (adr r2, 800865c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	080086a9 	.word	0x080086a9
 8008660:	08008675 	.word	0x08008675
 8008664:	0800868b 	.word	0x0800868b
 8008668:	080086a9 	.word	0x080086a9
 800866c:	080086a9 	.word	0x080086a9
 8008670:	080086a9 	.word	0x080086a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008678:	3308      	adds	r3, #8
 800867a:	2101      	movs	r1, #1
 800867c:	4618      	mov	r0, r3
 800867e:	f001 fd25 	bl	800a0cc <RCCEx_PLL2_Config>
 8008682:	4603      	mov	r3, r0
 8008684:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008688:	e00f      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800868a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800868e:	3328      	adds	r3, #40	; 0x28
 8008690:	2101      	movs	r1, #1
 8008692:	4618      	mov	r0, r3
 8008694:	f001 fdcc 	bl	800a230 <RCCEx_PLL3_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800869e:	e004      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80086a6:	e000      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80086a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10b      	bne.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086b2:	4b6c      	ldr	r3, [pc, #432]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80086b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b6:	f023 0107 	bic.w	r1, r3, #7
 80086ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c2:	4a68      	ldr	r2, [pc, #416]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80086c4:	430b      	orrs	r3, r1
 80086c6:	6593      	str	r3, [r2, #88]	; 0x58
 80086c8:	e003      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80086ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	f002 0320 	and.w	r3, r2, #32
 80086de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086e2:	2300      	movs	r3, #0
 80086e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80086e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80086ec:	460b      	mov	r3, r1
 80086ee:	4313      	orrs	r3, r2
 80086f0:	d055      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80086f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086fe:	d033      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008704:	d82c      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800870a:	d02f      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800870c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008710:	d826      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008712:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008716:	d02b      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008718:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800871c:	d820      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800871e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008722:	d012      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008728:	d81a      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d022      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800872e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008732:	d115      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008738:	3308      	adds	r3, #8
 800873a:	2100      	movs	r1, #0
 800873c:	4618      	mov	r0, r3
 800873e:	f001 fcc5 	bl	800a0cc <RCCEx_PLL2_Config>
 8008742:	4603      	mov	r3, r0
 8008744:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008748:	e015      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800874a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800874e:	3328      	adds	r3, #40	; 0x28
 8008750:	2102      	movs	r1, #2
 8008752:	4618      	mov	r0, r3
 8008754:	f001 fd6c 	bl	800a230 <RCCEx_PLL3_Config>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800875e:	e00a      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008766:	e006      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008768:	bf00      	nop
 800876a:	e004      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800876c:	bf00      	nop
 800876e:	e002      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008770:	bf00      	nop
 8008772:	e000      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008776:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10b      	bne.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800877e:	4b39      	ldr	r3, [pc, #228]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008782:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800878a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800878e:	4a35      	ldr	r2, [pc, #212]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008790:	430b      	orrs	r3, r1
 8008792:	6553      	str	r3, [r2, #84]	; 0x54
 8008794:	e003      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008796:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800879a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800879e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80087aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087ae:	2300      	movs	r3, #0
 80087b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80087b8:	460b      	mov	r3, r1
 80087ba:	4313      	orrs	r3, r2
 80087bc:	d058      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80087be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80087ca:	d033      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80087cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80087d0:	d82c      	bhi.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80087d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d6:	d02f      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80087d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087dc:	d826      	bhi.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80087de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087e2:	d02b      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80087e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087e8:	d820      	bhi.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80087ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ee:	d012      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80087f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087f4:	d81a      	bhi.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d022      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80087fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087fe:	d115      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008804:	3308      	adds	r3, #8
 8008806:	2100      	movs	r1, #0
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fc5f 	bl	800a0cc <RCCEx_PLL2_Config>
 800880e:	4603      	mov	r3, r0
 8008810:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008814:	e015      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800881a:	3328      	adds	r3, #40	; 0x28
 800881c:	2102      	movs	r1, #2
 800881e:	4618      	mov	r0, r3
 8008820:	f001 fd06 	bl	800a230 <RCCEx_PLL3_Config>
 8008824:	4603      	mov	r3, r0
 8008826:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800882a:	e00a      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008832:	e006      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008834:	bf00      	nop
 8008836:	e004      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008838:	bf00      	nop
 800883a:	e002      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800883c:	bf00      	nop
 800883e:	e000      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008842:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10e      	bne.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800884a:	4b06      	ldr	r3, [pc, #24]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800884c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800884e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008856:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800885a:	4a02      	ldr	r2, [pc, #8]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800885c:	430b      	orrs	r3, r1
 800885e:	6593      	str	r3, [r2, #88]	; 0x58
 8008860:	e006      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008862:	bf00      	nop
 8008864:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008868:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800886c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800887c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008880:	2300      	movs	r3, #0
 8008882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008886:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800888a:	460b      	mov	r3, r1
 800888c:	4313      	orrs	r3, r2
 800888e:	d055      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008894:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008898:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800889c:	d033      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800889e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80088a2:	d82c      	bhi.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80088a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088a8:	d02f      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80088aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ae:	d826      	bhi.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80088b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80088b4:	d02b      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80088b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80088ba:	d820      	bhi.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80088bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088c0:	d012      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80088c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088c6:	d81a      	bhi.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d022      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80088cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088d0:	d115      	bne.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088d6:	3308      	adds	r3, #8
 80088d8:	2100      	movs	r1, #0
 80088da:	4618      	mov	r0, r3
 80088dc:	f001 fbf6 	bl	800a0cc <RCCEx_PLL2_Config>
 80088e0:	4603      	mov	r3, r0
 80088e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80088e6:	e015      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ec:	3328      	adds	r3, #40	; 0x28
 80088ee:	2102      	movs	r1, #2
 80088f0:	4618      	mov	r0, r3
 80088f2:	f001 fc9d 	bl	800a230 <RCCEx_PLL3_Config>
 80088f6:	4603      	mov	r3, r0
 80088f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80088fc:	e00a      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008904:	e006      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008906:	bf00      	nop
 8008908:	e004      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800890a:	bf00      	nop
 800890c:	e002      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800890e:	bf00      	nop
 8008910:	e000      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008914:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10b      	bne.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800891c:	4ba0      	ldr	r3, [pc, #640]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800891e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008920:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008928:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800892c:	4a9c      	ldr	r2, [pc, #624]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800892e:	430b      	orrs	r3, r1
 8008930:	6593      	str	r3, [r2, #88]	; 0x58
 8008932:	e003      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008934:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008938:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800893c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008944:	f002 0308 	and.w	r3, r2, #8
 8008948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800894c:	2300      	movs	r3, #0
 800894e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008952:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008956:	460b      	mov	r3, r1
 8008958:	4313      	orrs	r3, r2
 800895a:	d01e      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800895c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008968:	d10c      	bne.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800896a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800896e:	3328      	adds	r3, #40	; 0x28
 8008970:	2102      	movs	r1, #2
 8008972:	4618      	mov	r0, r3
 8008974:	f001 fc5c 	bl	800a230 <RCCEx_PLL3_Config>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008984:	4b86      	ldr	r3, [pc, #536]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008988:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800898c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008994:	4a82      	ldr	r2, [pc, #520]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008996:	430b      	orrs	r3, r1
 8008998:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800899a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	f002 0310 	and.w	r3, r2, #16
 80089a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089aa:	2300      	movs	r3, #0
 80089ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80089b4:	460b      	mov	r3, r1
 80089b6:	4313      	orrs	r3, r2
 80089b8:	d01e      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80089ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089c6:	d10c      	bne.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089cc:	3328      	adds	r3, #40	; 0x28
 80089ce:	2102      	movs	r1, #2
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 fc2d 	bl	800a230 <RCCEx_PLL3_Config>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80089e2:	4b6f      	ldr	r3, [pc, #444]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80089e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80089ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089f2:	4a6b      	ldr	r2, [pc, #428]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80089f4:	430b      	orrs	r3, r1
 80089f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008a04:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a06:	2300      	movs	r3, #0
 8008a08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a0a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4313      	orrs	r3, r2
 8008a12:	d03e      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a20:	d022      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a26:	d81b      	bhi.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a30:	d00b      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008a32:	e015      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a38:	3308      	adds	r3, #8
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f001 fb45 	bl	800a0cc <RCCEx_PLL2_Config>
 8008a42:	4603      	mov	r3, r0
 8008a44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a48:	e00f      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a4e:	3328      	adds	r3, #40	; 0x28
 8008a50:	2102      	movs	r1, #2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f001 fbec 	bl	800a230 <RCCEx_PLL3_Config>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a5e:	e004      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008a66:	e000      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10b      	bne.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a72:	4b4b      	ldr	r3, [pc, #300]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a76:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a82:	4a47      	ldr	r2, [pc, #284]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a84:	430b      	orrs	r3, r1
 8008a86:	6593      	str	r3, [r2, #88]	; 0x58
 8008a88:	e003      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008a9e:	673b      	str	r3, [r7, #112]	; 0x70
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	677b      	str	r3, [r7, #116]	; 0x74
 8008aa4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	d03b      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ab6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aba:	d01f      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008abc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ac0:	d818      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ac6:	d003      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008acc:	d007      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008ace:	e011      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ad0:	4b33      	ldr	r3, [pc, #204]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	4a32      	ldr	r2, [pc, #200]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008adc:	e00f      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ae2:	3328      	adds	r3, #40	; 0x28
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f001 fba2 	bl	800a230 <RCCEx_PLL3_Config>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008af2:	e004      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008afa:	e000      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008afe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10b      	bne.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b06:	4b26      	ldr	r3, [pc, #152]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b16:	4a22      	ldr	r2, [pc, #136]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	6553      	str	r3, [r2, #84]	; 0x54
 8008b1c:	e003      	b.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b22:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008b32:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b34:	2300      	movs	r3, #0
 8008b36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b38:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	d034      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d003      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b50:	d007      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008b52:	e011      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b54:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	4a11      	ldr	r2, [pc, #68]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008b60:	e00e      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b66:	3308      	adds	r3, #8
 8008b68:	2102      	movs	r1, #2
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f001 faae 	bl	800a0cc <RCCEx_PLL2_Config>
 8008b70:	4603      	mov	r3, r0
 8008b72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008b76:	e003      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10d      	bne.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008b88:	4b05      	ldr	r3, [pc, #20]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b96:	4a02      	ldr	r2, [pc, #8]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b98:	430b      	orrs	r3, r1
 8008b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b9c:	e006      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008b9e:	bf00      	nop
 8008ba0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ba8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8008bba:	2300      	movs	r3, #0
 8008bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8008bbe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	d00c      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bcc:	3328      	adds	r3, #40	; 0x28
 8008bce:	2102      	movs	r1, #2
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f001 fb2d 	bl	800a230 <RCCEx_PLL3_Config>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008bee:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bf4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	d036      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c08:	d018      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c0e:	d811      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c14:	d014      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c1a:	d80b      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d011      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c24:	d106      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c26:	4bb7      	ldr	r3, [pc, #732]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2a:	4ab6      	ldr	r2, [pc, #728]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008c32:	e008      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008c3a:	e004      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008c3c:	bf00      	nop
 8008c3e:	e002      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008c40:	bf00      	nop
 8008c42:	e000      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c4e:	4bad      	ldr	r3, [pc, #692]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c5c:	4aa9      	ldr	r2, [pc, #676]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008c5e:	430b      	orrs	r3, r1
 8008c60:	6553      	str	r3, [r2, #84]	; 0x54
 8008c62:	e003      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008c78:	653b      	str	r3, [r7, #80]	; 0x50
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	657b      	str	r3, [r7, #84]	; 0x54
 8008c7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008c82:	460b      	mov	r3, r1
 8008c84:	4313      	orrs	r3, r2
 8008c86:	d009      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c88:	4b9e      	ldr	r3, [pc, #632]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c96:	4a9b      	ldr	r2, [pc, #620]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008caa:	2300      	movs	r3, #0
 8008cac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	d009      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008cb8:	4b92      	ldr	r3, [pc, #584]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cbc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cc6:	4a8f      	ldr	r2, [pc, #572]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008cc8:	430b      	orrs	r3, r1
 8008cca:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008cd8:	643b      	str	r3, [r7, #64]	; 0x40
 8008cda:	2300      	movs	r3, #0
 8008cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8008cde:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	d00e      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008ce8:	4b86      	ldr	r3, [pc, #536]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	4a85      	ldr	r2, [pc, #532]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008cee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008cf2:	6113      	str	r3, [r2, #16]
 8008cf4:	4b83      	ldr	r3, [pc, #524]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008cf6:	6919      	ldr	r1, [r3, #16]
 8008cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d00:	4a80      	ldr	r2, [pc, #512]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008d02:	430b      	orrs	r3, r1
 8008d04:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d14:	2300      	movs	r3, #0
 8008d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d18:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	d009      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d22:	4b78      	ldr	r3, [pc, #480]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d26:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d30:	4a74      	ldr	r2, [pc, #464]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008d32:	430b      	orrs	r3, r1
 8008d34:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008d42:	633b      	str	r3, [r7, #48]	; 0x30
 8008d44:	2300      	movs	r3, #0
 8008d46:	637b      	str	r3, [r7, #52]	; 0x34
 8008d48:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	d00a      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d52:	4b6c      	ldr	r3, [pc, #432]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d56:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d62:	4a68      	ldr	r2, [pc, #416]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008d64:	430b      	orrs	r3, r1
 8008d66:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	2100      	movs	r1, #0
 8008d72:	62b9      	str	r1, [r7, #40]	; 0x28
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d7a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4313      	orrs	r3, r2
 8008d82:	d011      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d88:	3308      	adds	r3, #8
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f001 f99d 	bl	800a0cc <RCCEx_PLL2_Config>
 8008d92:	4603      	mov	r3, r0
 8008d94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008d98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008da4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	2100      	movs	r1, #0
 8008db2:	6239      	str	r1, [r7, #32]
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	627b      	str	r3, [r7, #36]	; 0x24
 8008dba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	d011      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dc8:	3308      	adds	r3, #8
 8008dca:	2101      	movs	r1, #1
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f001 f97d 	bl	800a0cc <RCCEx_PLL2_Config>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008dd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d003      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008de4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df0:	2100      	movs	r1, #0
 8008df2:	61b9      	str	r1, [r7, #24]
 8008df4:	f003 0304 	and.w	r3, r3, #4
 8008df8:	61fb      	str	r3, [r7, #28]
 8008dfa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4313      	orrs	r3, r2
 8008e02:	d011      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e08:	3308      	adds	r3, #8
 8008e0a:	2102      	movs	r1, #2
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f001 f95d 	bl	800a0cc <RCCEx_PLL2_Config>
 8008e12:	4603      	mov	r3, r0
 8008e14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008e18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e30:	2100      	movs	r1, #0
 8008e32:	6139      	str	r1, [r7, #16]
 8008e34:	f003 0308 	and.w	r3, r3, #8
 8008e38:	617b      	str	r3, [r7, #20]
 8008e3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4313      	orrs	r3, r2
 8008e42:	d011      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e48:	3328      	adds	r3, #40	; 0x28
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f001 f9ef 	bl	800a230 <RCCEx_PLL3_Config>
 8008e52:	4603      	mov	r3, r0
 8008e54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8008e58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e70:	2100      	movs	r1, #0
 8008e72:	60b9      	str	r1, [r7, #8]
 8008e74:	f003 0310 	and.w	r3, r3, #16
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4313      	orrs	r3, r2
 8008e82:	d011      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e88:	3328      	adds	r3, #40	; 0x28
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f001 f9cf 	bl	800a230 <RCCEx_PLL3_Config>
 8008e92:	4603      	mov	r3, r0
 8008e94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008e98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d003      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ea4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	6039      	str	r1, [r7, #0]
 8008eb4:	f003 0320 	and.w	r3, r3, #32
 8008eb8:	607b      	str	r3, [r7, #4]
 8008eba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	d011      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec8:	3328      	adds	r3, #40	; 0x28
 8008eca:	2102      	movs	r1, #2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f001 f9af 	bl	800a230 <RCCEx_PLL3_Config>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ee4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8008ee8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e000      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8008efc:	46bd      	mov	sp, r7
 8008efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f02:	bf00      	nop
 8008f04:	58024400 	.word	0x58024400

08008f08 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b090      	sub	sp, #64	; 0x40
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f16:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008f1a:	430b      	orrs	r3, r1
 8008f1c:	f040 8094 	bne.w	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008f20:	4b9b      	ldr	r3, [pc, #620]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f24:	f003 0307 	and.w	r3, r3, #7
 8008f28:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	2b04      	cmp	r3, #4
 8008f2e:	f200 8087 	bhi.w	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008f32:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f4d 	.word	0x08008f4d
 8008f3c:	08008f75 	.word	0x08008f75
 8008f40:	08008f9d 	.word	0x08008f9d
 8008f44:	08009039 	.word	0x08009039
 8008f48:	08008fc5 	.word	0x08008fc5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f4c:	4b90      	ldr	r3, [pc, #576]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f58:	d108      	bne.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 ff62 	bl	8009e28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f68:	f000 bc93 	b.w	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f70:	f000 bc8f 	b.w	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f74:	4b86      	ldr	r3, [pc, #536]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f80:	d108      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f82:	f107 0318 	add.w	r3, r7, #24
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fca6 	bl	80098d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f90:	f000 bc7f 	b.w	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f98:	f000 bc7b 	b.w	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f9c:	4b7c      	ldr	r3, [pc, #496]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa8:	d108      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008faa:	f107 030c 	add.w	r3, r7, #12
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 fde6 	bl	8009b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fb8:	f000 bc6b 	b.w	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fc0:	f000 bc67 	b.w	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fc4:	4b72      	ldr	r3, [pc, #456]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fcc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fce:	4b70      	ldr	r3, [pc, #448]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d10c      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d109      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fe0:	4b6b      	ldr	r3, [pc, #428]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	08db      	lsrs	r3, r3, #3
 8008fe6:	f003 0303 	and.w	r3, r3, #3
 8008fea:	4a6a      	ldr	r2, [pc, #424]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008fec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ff2:	e01f      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ff4:	4b66      	ldr	r3, [pc, #408]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009000:	d106      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009008:	d102      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800900a:	4b63      	ldr	r3, [pc, #396]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800900e:	e011      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009010:	4b5f      	ldr	r3, [pc, #380]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800901c:	d106      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800901e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009024:	d102      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009026:	4b5d      	ldr	r3, [pc, #372]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800902a:	e003      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009030:	f000 bc2f 	b.w	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009034:	f000 bc2d 	b.w	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009038:	4b59      	ldr	r3, [pc, #356]	; (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800903a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800903c:	f000 bc29 	b.w	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009044:	f000 bc25 	b.w	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800904c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009050:	430b      	orrs	r3, r1
 8009052:	f040 80a7 	bne.w	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009056:	4b4e      	ldr	r3, [pc, #312]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800905a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800905e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009066:	d054      	beq.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800906e:	f200 808b 	bhi.w	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009078:	f000 8083 	beq.w	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800907c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009082:	f200 8081 	bhi.w	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800908c:	d02f      	beq.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009094:	d878      	bhi.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	2b00      	cmp	r3, #0
 800909a:	d004      	beq.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090a2:	d012      	beq.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80090a4:	e070      	b.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090a6:	4b3a      	ldr	r3, [pc, #232]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090b2:	d107      	bne.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 feb5 	bl	8009e28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090c2:	e3e6      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090c4:	2300      	movs	r3, #0
 80090c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090c8:	e3e3      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090ca:	4b31      	ldr	r3, [pc, #196]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090d6:	d107      	bne.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090d8:	f107 0318 	add.w	r3, r7, #24
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 fbfb 	bl	80098d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090e6:	e3d4      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090e8:	2300      	movs	r3, #0
 80090ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ec:	e3d1      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090ee:	4b28      	ldr	r3, [pc, #160]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090fa:	d107      	bne.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090fc:	f107 030c 	add.w	r3, r7, #12
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fd3d 	bl	8009b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800910a:	e3c2      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009110:	e3bf      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009112:	4b1f      	ldr	r3, [pc, #124]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009116:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800911a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800911c:	4b1c      	ldr	r3, [pc, #112]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0304 	and.w	r3, r3, #4
 8009124:	2b04      	cmp	r3, #4
 8009126:	d10c      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8009128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912a:	2b00      	cmp	r3, #0
 800912c:	d109      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800912e:	4b18      	ldr	r3, [pc, #96]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	08db      	lsrs	r3, r3, #3
 8009134:	f003 0303 	and.w	r3, r3, #3
 8009138:	4a16      	ldr	r2, [pc, #88]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800913a:	fa22 f303 	lsr.w	r3, r2, r3
 800913e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009140:	e01e      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009142:	4b13      	ldr	r3, [pc, #76]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800914a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800914e:	d106      	bne.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009156:	d102      	bne.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009158:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800915c:	e010      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800915e:	4b0c      	ldr	r3, [pc, #48]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800916a:	d106      	bne.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800916c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009172:	d102      	bne.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009174:	4b09      	ldr	r3, [pc, #36]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009178:	e002      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800917e:	e388      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009180:	e387      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009182:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009186:	e384      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800918c:	e381      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800918e:	bf00      	nop
 8009190:	58024400 	.word	0x58024400
 8009194:	03d09000 	.word	0x03d09000
 8009198:	003d0900 	.word	0x003d0900
 800919c:	017d7840 	.word	0x017d7840
 80091a0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80091a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80091ac:	430b      	orrs	r3, r1
 80091ae:	f040 809c 	bne.w	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80091b2:	4b9e      	ldr	r3, [pc, #632]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80091b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80091ba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80091bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091c2:	d054      	beq.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80091c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091ca:	f200 808b 	bhi.w	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80091d4:	f000 8083 	beq.w	80092de <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80091d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80091de:	f200 8081 	bhi.w	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091e8:	d02f      	beq.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091f0:	d878      	bhi.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d004      	beq.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091fe:	d012      	beq.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009200:	e070      	b.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009202:	4b8a      	ldr	r3, [pc, #552]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800920a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800920e:	d107      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009214:	4618      	mov	r0, r3
 8009216:	f000 fe07 	bl	8009e28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800921e:	e338      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009224:	e335      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009226:	4b81      	ldr	r3, [pc, #516]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800922e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009232:	d107      	bne.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009234:	f107 0318 	add.w	r3, r7, #24
 8009238:	4618      	mov	r0, r3
 800923a:	f000 fb4d 	bl	80098d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009242:	e326      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009248:	e323      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800924a:	4b78      	ldr	r3, [pc, #480]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009256:	d107      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009258:	f107 030c 	add.w	r3, r7, #12
 800925c:	4618      	mov	r0, r3
 800925e:	f000 fc8f 	bl	8009b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009266:	e314      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009268:	2300      	movs	r3, #0
 800926a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800926c:	e311      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800926e:	4b6f      	ldr	r3, [pc, #444]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009272:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009276:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009278:	4b6c      	ldr	r3, [pc, #432]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0304 	and.w	r3, r3, #4
 8009280:	2b04      	cmp	r3, #4
 8009282:	d10c      	bne.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009286:	2b00      	cmp	r3, #0
 8009288:	d109      	bne.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800928a:	4b68      	ldr	r3, [pc, #416]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	08db      	lsrs	r3, r3, #3
 8009290:	f003 0303 	and.w	r3, r3, #3
 8009294:	4a66      	ldr	r2, [pc, #408]	; (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009296:	fa22 f303 	lsr.w	r3, r2, r3
 800929a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800929c:	e01e      	b.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800929e:	4b63      	ldr	r3, [pc, #396]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092aa:	d106      	bne.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80092ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092b2:	d102      	bne.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092b4:	4b5f      	ldr	r3, [pc, #380]	; (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092b8:	e010      	b.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092ba:	4b5c      	ldr	r3, [pc, #368]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092c6:	d106      	bne.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80092c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092ce:	d102      	bne.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092d0:	4b59      	ldr	r3, [pc, #356]	; (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092d4:	e002      	b.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80092da:	e2da      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092dc:	e2d9      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092de:	4b57      	ldr	r3, [pc, #348]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80092e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092e2:	e2d6      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092e8:	e2d3      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80092ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ee:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80092f2:	430b      	orrs	r3, r1
 80092f4:	f040 80a7 	bne.w	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80092f8:	4b4c      	ldr	r3, [pc, #304]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80092fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092fc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009300:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009308:	d055      	beq.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009310:	f200 8096 	bhi.w	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800931a:	f000 8084 	beq.w	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800931e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009320:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009324:	f200 808c 	bhi.w	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800932e:	d030      	beq.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009336:	f200 8083 	bhi.w	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	2b00      	cmp	r3, #0
 800933e:	d004      	beq.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009346:	d012      	beq.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009348:	e07a      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800934a:	4b38      	ldr	r3, [pc, #224]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009356:	d107      	bne.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800935c:	4618      	mov	r0, r3
 800935e:	f000 fd63 	bl	8009e28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009364:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009366:	e294      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009368:	2300      	movs	r3, #0
 800936a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800936c:	e291      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800936e:	4b2f      	ldr	r3, [pc, #188]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800937a:	d107      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800937c:	f107 0318 	add.w	r3, r7, #24
 8009380:	4618      	mov	r0, r3
 8009382:	f000 faa9 	bl	80098d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800938a:	e282      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009390:	e27f      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009392:	4b26      	ldr	r3, [pc, #152]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800939a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800939e:	d107      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093a0:	f107 030c 	add.w	r3, r7, #12
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 fbeb 	bl	8009b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093ae:	e270      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093b4:	e26d      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093b6:	4b1d      	ldr	r3, [pc, #116]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80093b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093c0:	4b1a      	ldr	r3, [pc, #104]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d10c      	bne.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80093cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d109      	bne.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093d2:	4b16      	ldr	r3, [pc, #88]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	08db      	lsrs	r3, r3, #3
 80093d8:	f003 0303 	and.w	r3, r3, #3
 80093dc:	4a14      	ldr	r2, [pc, #80]	; (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80093de:	fa22 f303 	lsr.w	r3, r2, r3
 80093e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093e4:	e01e      	b.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093e6:	4b11      	ldr	r3, [pc, #68]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093f2:	d106      	bne.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80093f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093fa:	d102      	bne.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093fc:	4b0d      	ldr	r3, [pc, #52]	; (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80093fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009400:	e010      	b.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009402:	4b0a      	ldr	r3, [pc, #40]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800940a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800940e:	d106      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009416:	d102      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009418:	4b07      	ldr	r3, [pc, #28]	; (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800941c:	e002      	b.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009422:	e236      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009424:	e235      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009426:	4b05      	ldr	r3, [pc, #20]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800942a:	e232      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800942c:	58024400 	.word	0x58024400
 8009430:	03d09000 	.word	0x03d09000
 8009434:	003d0900 	.word	0x003d0900
 8009438:	017d7840 	.word	0x017d7840
 800943c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009444:	e225      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800944a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800944e:	430b      	orrs	r3, r1
 8009450:	f040 8085 	bne.w	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009454:	4b9c      	ldr	r3, [pc, #624]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009458:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800945c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800945e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009464:	d06b      	beq.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800946c:	d874      	bhi.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009470:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009474:	d056      	beq.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800947c:	d86c      	bhi.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800947e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009480:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009484:	d03b      	beq.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800948c:	d864      	bhi.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800948e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009494:	d021      	beq.n	80094da <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800949c:	d85c      	bhi.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800949e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d004      	beq.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80094a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094aa:	d004      	beq.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80094ac:	e054      	b.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80094ae:	f7fe fb75 	bl	8007b9c <HAL_RCC_GetPCLK1Freq>
 80094b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80094b4:	e1ed      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094b6:	4b84      	ldr	r3, [pc, #528]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094c2:	d107      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094c4:	f107 0318 	add.w	r3, r7, #24
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 fa05 	bl	80098d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094d2:	e1de      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094d8:	e1db      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094da:	4b7b      	ldr	r3, [pc, #492]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094e6:	d107      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094e8:	f107 030c 	add.w	r3, r7, #12
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 fb47 	bl	8009b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094f6:	e1cc      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094fc:	e1c9      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80094fe:	4b72      	ldr	r3, [pc, #456]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 0304 	and.w	r3, r3, #4
 8009506:	2b04      	cmp	r3, #4
 8009508:	d109      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800950a:	4b6f      	ldr	r3, [pc, #444]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	08db      	lsrs	r3, r3, #3
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	4a6d      	ldr	r2, [pc, #436]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009516:	fa22 f303 	lsr.w	r3, r2, r3
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800951c:	e1b9      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009522:	e1b6      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009524:	4b68      	ldr	r3, [pc, #416]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009530:	d102      	bne.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8009532:	4b67      	ldr	r3, [pc, #412]	; (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009534:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009536:	e1ac      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800953c:	e1a9      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800953e:	4b62      	ldr	r3, [pc, #392]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800954a:	d102      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800954c:	4b61      	ldr	r3, [pc, #388]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800954e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009550:	e19f      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009556:	e19c      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800955c:	e199      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800955e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009562:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009566:	430b      	orrs	r3, r1
 8009568:	d173      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800956a:	4b57      	ldr	r3, [pc, #348]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800956c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800956e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009572:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800957a:	d02f      	beq.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800957c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009582:	d863      	bhi.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	2b00      	cmp	r3, #0
 8009588:	d004      	beq.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800958a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009590:	d012      	beq.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8009592:	e05b      	b.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009594:	4b4c      	ldr	r3, [pc, #304]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800959c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095a0:	d107      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095a2:	f107 0318 	add.w	r3, r7, #24
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 f996 	bl	80098d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095b0:	e16f      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095b6:	e16c      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095b8:	4b43      	ldr	r3, [pc, #268]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095c4:	d107      	bne.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095c6:	f107 030c 	add.w	r3, r7, #12
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 fad8 	bl	8009b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095d4:	e15d      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095da:	e15a      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095dc:	4b3a      	ldr	r3, [pc, #232]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80095de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095e4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095e6:	4b38      	ldr	r3, [pc, #224]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0304 	and.w	r3, r3, #4
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d10c      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80095f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d109      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095f8:	4b33      	ldr	r3, [pc, #204]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	08db      	lsrs	r3, r3, #3
 80095fe:	f003 0303 	and.w	r3, r3, #3
 8009602:	4a32      	ldr	r2, [pc, #200]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009604:	fa22 f303 	lsr.w	r3, r2, r3
 8009608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800960a:	e01e      	b.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800960c:	4b2e      	ldr	r3, [pc, #184]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009618:	d106      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800961a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009620:	d102      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009622:	4b2b      	ldr	r3, [pc, #172]	; (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009626:	e010      	b.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009628:	4b27      	ldr	r3, [pc, #156]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009634:	d106      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8009636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800963c:	d102      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800963e:	4b25      	ldr	r3, [pc, #148]	; (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009642:	e002      	b.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009648:	e123      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800964a:	e122      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009650:	e11f      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009656:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800965a:	430b      	orrs	r3, r1
 800965c:	d13c      	bne.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800965e:	4b1a      	ldr	r3, [pc, #104]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009666:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	2b00      	cmp	r3, #0
 800966c:	d004      	beq.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009674:	d012      	beq.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8009676:	e023      	b.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009678:	4b13      	ldr	r3, [pc, #76]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009680:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009684:	d107      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800968a:	4618      	mov	r0, r3
 800968c:	f000 fbcc 	bl	8009e28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009694:	e0fd      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800969a:	e0fa      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800969c:	4b0a      	ldr	r3, [pc, #40]	; (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096a8:	d107      	bne.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096aa:	f107 0318 	add.w	r3, r7, #24
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 f912 	bl	80098d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096b8:	e0eb      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096be:	e0e8      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096c4:	e0e5      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80096c6:	bf00      	nop
 80096c8:	58024400 	.word	0x58024400
 80096cc:	03d09000 	.word	0x03d09000
 80096d0:	003d0900 	.word	0x003d0900
 80096d4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80096d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096dc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80096e0:	430b      	orrs	r3, r1
 80096e2:	f040 8085 	bne.w	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80096e6:	4b6d      	ldr	r3, [pc, #436]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ea:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80096ee:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80096f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096f6:	d06b      	beq.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096fe:	d874      	bhi.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009706:	d056      	beq.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800970e:	d86c      	bhi.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009712:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009716:	d03b      	beq.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800971e:	d864      	bhi.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009726:	d021      	beq.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800972e:	d85c      	bhi.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	2b00      	cmp	r3, #0
 8009734:	d004      	beq.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8009736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800973c:	d004      	beq.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800973e:	e054      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009740:	f000 f8b4 	bl	80098ac <HAL_RCCEx_GetD3PCLK1Freq>
 8009744:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009746:	e0a4      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009748:	4b54      	ldr	r3, [pc, #336]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009754:	d107      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009756:	f107 0318 	add.w	r3, r7, #24
 800975a:	4618      	mov	r0, r3
 800975c:	f000 f8bc 	bl	80098d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009764:	e095      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800976a:	e092      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800976c:	4b4b      	ldr	r3, [pc, #300]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009778:	d107      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800977a:	f107 030c 	add.w	r3, r7, #12
 800977e:	4618      	mov	r0, r3
 8009780:	f000 f9fe 	bl	8009b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009788:	e083      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800978a:	2300      	movs	r3, #0
 800978c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800978e:	e080      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009790:	4b42      	ldr	r3, [pc, #264]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 0304 	and.w	r3, r3, #4
 8009798:	2b04      	cmp	r3, #4
 800979a:	d109      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800979c:	4b3f      	ldr	r3, [pc, #252]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	08db      	lsrs	r3, r3, #3
 80097a2:	f003 0303 	and.w	r3, r3, #3
 80097a6:	4a3e      	ldr	r2, [pc, #248]	; (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80097a8:	fa22 f303 	lsr.w	r3, r2, r3
 80097ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097ae:	e070      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097b4:	e06d      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80097b6:	4b39      	ldr	r3, [pc, #228]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097c2:	d102      	bne.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80097c4:	4b37      	ldr	r3, [pc, #220]	; (80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80097c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097c8:	e063      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097ce:	e060      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097d0:	4b32      	ldr	r3, [pc, #200]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097dc:	d102      	bne.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80097de:	4b32      	ldr	r3, [pc, #200]	; (80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80097e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097e2:	e056      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097e8:	e053      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097ee:	e050      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80097f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097f4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80097f8:	430b      	orrs	r3, r1
 80097fa:	d148      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80097fc:	4b27      	ldr	r3, [pc, #156]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80097fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009800:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009804:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800980c:	d02a      	beq.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009814:	d838      	bhi.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	2b00      	cmp	r3, #0
 800981a:	d004      	beq.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800981c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009822:	d00d      	beq.n	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009824:	e030      	b.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009826:	4b1d      	ldr	r3, [pc, #116]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800982e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009832:	d102      	bne.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8009834:	4b1c      	ldr	r3, [pc, #112]	; (80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009838:	e02b      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800983a:	2300      	movs	r3, #0
 800983c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800983e:	e028      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009840:	4b16      	ldr	r3, [pc, #88]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009848:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800984c:	d107      	bne.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800984e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009852:	4618      	mov	r0, r3
 8009854:	f000 fae8 	bl	8009e28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800985c:	e019      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800985e:	2300      	movs	r3, #0
 8009860:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009862:	e016      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009864:	4b0d      	ldr	r3, [pc, #52]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800986c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009870:	d107      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009872:	f107 0318 	add.w	r3, r7, #24
 8009876:	4618      	mov	r0, r3
 8009878:	f000 f82e 	bl	80098d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009880:	e007      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009886:	e004      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009888:	2300      	movs	r3, #0
 800988a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800988c:	e001      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800988e:	2300      	movs	r3, #0
 8009890:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009894:	4618      	mov	r0, r3
 8009896:	3740      	adds	r7, #64	; 0x40
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	58024400 	.word	0x58024400
 80098a0:	03d09000 	.word	0x03d09000
 80098a4:	003d0900 	.word	0x003d0900
 80098a8:	017d7840 	.word	0x017d7840

080098ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80098b0:	f7fe f944 	bl	8007b3c <HAL_RCC_GetHCLKFreq>
 80098b4:	4602      	mov	r2, r0
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	091b      	lsrs	r3, r3, #4
 80098bc:	f003 0307 	and.w	r3, r3, #7
 80098c0:	4904      	ldr	r1, [pc, #16]	; (80098d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80098c2:	5ccb      	ldrb	r3, [r1, r3]
 80098c4:	f003 031f 	and.w	r3, r3, #31
 80098c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	58024400 	.word	0x58024400
 80098d4:	08011798 	.word	0x08011798

080098d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80098d8:	b480      	push	{r7}
 80098da:	b089      	sub	sp, #36	; 0x24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098e0:	4ba1      	ldr	r3, [pc, #644]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e4:	f003 0303 	and.w	r3, r3, #3
 80098e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80098ea:	4b9f      	ldr	r3, [pc, #636]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ee:	0b1b      	lsrs	r3, r3, #12
 80098f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80098f6:	4b9c      	ldr	r3, [pc, #624]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fa:	091b      	lsrs	r3, r3, #4
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009902:	4b99      	ldr	r3, [pc, #612]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009906:	08db      	lsrs	r3, r3, #3
 8009908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	fb02 f303 	mul.w	r3, r2, r3
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 8111 	beq.w	8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	2b02      	cmp	r3, #2
 800992a:	f000 8083 	beq.w	8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	2b02      	cmp	r3, #2
 8009932:	f200 80a1 	bhi.w	8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d003      	beq.n	8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d056      	beq.n	80099f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009942:	e099      	b.n	8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009944:	4b88      	ldr	r3, [pc, #544]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 0320 	and.w	r3, r3, #32
 800994c:	2b00      	cmp	r3, #0
 800994e:	d02d      	beq.n	80099ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009950:	4b85      	ldr	r3, [pc, #532]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	08db      	lsrs	r3, r3, #3
 8009956:	f003 0303 	and.w	r3, r3, #3
 800995a:	4a84      	ldr	r2, [pc, #528]	; (8009b6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800995c:	fa22 f303 	lsr.w	r3, r2, r3
 8009960:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	ee07 3a90 	vmov	s15, r3
 8009968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800997a:	4b7b      	ldr	r3, [pc, #492]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800997c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800998a:	ed97 6a03 	vldr	s12, [r7, #12]
 800998e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800999a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800999e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80099aa:	e087      	b.n	8009abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80099ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099be:	4b6a      	ldr	r3, [pc, #424]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80099d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099ee:	e065      	b.n	8009abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a02:	4b59      	ldr	r3, [pc, #356]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a32:	e043      	b.n	8009abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a46:	4b48      	ldr	r3, [pc, #288]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4e:	ee07 3a90 	vmov	s15, r3
 8009a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a76:	e021      	b.n	8009abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	ee07 3a90 	vmov	s15, r3
 8009a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a8a:	4b37      	ldr	r3, [pc, #220]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a92:	ee07 3a90 	vmov	s15, r3
 8009a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009abc:	4b2a      	ldr	r3, [pc, #168]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac0:	0a5b      	lsrs	r3, r3, #9
 8009ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ae2:	ee17 2a90 	vmov	r2, s15
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009aea:	4b1f      	ldr	r3, [pc, #124]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aee:	0c1b      	lsrs	r3, r3, #16
 8009af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af4:	ee07 3a90 	vmov	s15, r3
 8009af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b04:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b10:	ee17 2a90 	vmov	r2, s15
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009b18:	4b13      	ldr	r3, [pc, #76]	; (8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1c:	0e1b      	lsrs	r3, r3, #24
 8009b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b3e:	ee17 2a90 	vmov	r2, s15
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009b46:	e008      	b.n	8009b5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	609a      	str	r2, [r3, #8]
}
 8009b5a:	bf00      	nop
 8009b5c:	3724      	adds	r7, #36	; 0x24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	58024400 	.word	0x58024400
 8009b6c:	03d09000 	.word	0x03d09000
 8009b70:	46000000 	.word	0x46000000
 8009b74:	4c742400 	.word	0x4c742400
 8009b78:	4a742400 	.word	0x4a742400
 8009b7c:	4bbebc20 	.word	0x4bbebc20

08009b80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b089      	sub	sp, #36	; 0x24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b88:	4ba1      	ldr	r3, [pc, #644]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8c:	f003 0303 	and.w	r3, r3, #3
 8009b90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009b92:	4b9f      	ldr	r3, [pc, #636]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b96:	0d1b      	lsrs	r3, r3, #20
 8009b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b9e:	4b9c      	ldr	r3, [pc, #624]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	0a1b      	lsrs	r3, r3, #8
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009baa:	4b99      	ldr	r3, [pc, #612]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bae:	08db      	lsrs	r3, r3, #3
 8009bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	fb02 f303 	mul.w	r3, r2, r3
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 8111 	beq.w	8009df0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	f000 8083 	beq.w	8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	f200 80a1 	bhi.w	8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d056      	beq.n	8009c98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009bea:	e099      	b.n	8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bec:	4b88      	ldr	r3, [pc, #544]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0320 	and.w	r3, r3, #32
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d02d      	beq.n	8009c54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bf8:	4b85      	ldr	r3, [pc, #532]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	08db      	lsrs	r3, r3, #3
 8009bfe:	f003 0303 	and.w	r3, r3, #3
 8009c02:	4a84      	ldr	r2, [pc, #528]	; (8009e14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009c04:	fa22 f303 	lsr.w	r3, r2, r3
 8009c08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	ee07 3a90 	vmov	s15, r3
 8009c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c22:	4b7b      	ldr	r3, [pc, #492]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2a:	ee07 3a90 	vmov	s15, r3
 8009c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c36:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c52:	e087      	b.n	8009d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	ee07 3a90 	vmov	s15, r3
 8009c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009e1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c66:	4b6a      	ldr	r3, [pc, #424]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c6e:	ee07 3a90 	vmov	s15, r3
 8009c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c96:	e065      	b.n	8009d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	ee07 3a90 	vmov	s15, r3
 8009c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009caa:	4b59      	ldr	r3, [pc, #356]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cbe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cda:	e043      	b.n	8009d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cee:	4b48      	ldr	r3, [pc, #288]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cf6:	ee07 3a90 	vmov	s15, r3
 8009cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d02:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d1e:	e021      	b.n	8009d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d32:	4b37      	ldr	r3, [pc, #220]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d3a:	ee07 3a90 	vmov	s15, r3
 8009d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d46:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009d64:	4b2a      	ldr	r3, [pc, #168]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d68:	0a5b      	lsrs	r3, r3, #9
 8009d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d6e:	ee07 3a90 	vmov	s15, r3
 8009d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d8a:	ee17 2a90 	vmov	r2, s15
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009d92:	4b1f      	ldr	r3, [pc, #124]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d96:	0c1b      	lsrs	r3, r3, #16
 8009d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d9c:	ee07 3a90 	vmov	s15, r3
 8009da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009da8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dac:	edd7 6a07 	vldr	s13, [r7, #28]
 8009db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009db8:	ee17 2a90 	vmov	r2, s15
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009dc0:	4b13      	ldr	r3, [pc, #76]	; (8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc4:	0e1b      	lsrs	r3, r3, #24
 8009dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009de6:	ee17 2a90 	vmov	r2, s15
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009dee:	e008      	b.n	8009e02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	609a      	str	r2, [r3, #8]
}
 8009e02:	bf00      	nop
 8009e04:	3724      	adds	r7, #36	; 0x24
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	58024400 	.word	0x58024400
 8009e14:	03d09000 	.word	0x03d09000
 8009e18:	46000000 	.word	0x46000000
 8009e1c:	4c742400 	.word	0x4c742400
 8009e20:	4a742400 	.word	0x4a742400
 8009e24:	4bbebc20 	.word	0x4bbebc20

08009e28 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b089      	sub	sp, #36	; 0x24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e30:	4ba0      	ldr	r3, [pc, #640]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e34:	f003 0303 	and.w	r3, r3, #3
 8009e38:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009e3a:	4b9e      	ldr	r3, [pc, #632]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3e:	091b      	lsrs	r3, r3, #4
 8009e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e44:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009e46:	4b9b      	ldr	r3, [pc, #620]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009e50:	4b98      	ldr	r3, [pc, #608]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e54:	08db      	lsrs	r3, r3, #3
 8009e56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	fb02 f303 	mul.w	r3, r2, r3
 8009e60:	ee07 3a90 	vmov	s15, r3
 8009e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e68:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f000 8111 	beq.w	800a096 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	f000 8083 	beq.w	8009f82 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	f200 80a1 	bhi.w	8009fc6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d056      	beq.n	8009f3e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009e90:	e099      	b.n	8009fc6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e92:	4b88      	ldr	r3, [pc, #544]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 0320 	and.w	r3, r3, #32
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d02d      	beq.n	8009efa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e9e:	4b85      	ldr	r3, [pc, #532]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	08db      	lsrs	r3, r3, #3
 8009ea4:	f003 0303 	and.w	r3, r3, #3
 8009ea8:	4a83      	ldr	r2, [pc, #524]	; (800a0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8009eae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	ee07 3a90 	vmov	s15, r3
 8009ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ec8:	4b7a      	ldr	r3, [pc, #488]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed0:	ee07 3a90 	vmov	s15, r3
 8009ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ed8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009edc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a0bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ef8:	e087      	b.n	800a00a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	ee07 3a90 	vmov	s15, r3
 8009f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f04:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f0c:	4b69      	ldr	r3, [pc, #420]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f14:	ee07 3a90 	vmov	s15, r3
 8009f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f20:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a0bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f3c:	e065      	b.n	800a00a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	ee07 3a90 	vmov	s15, r3
 8009f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f48:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f50:	4b58      	ldr	r3, [pc, #352]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f58:	ee07 3a90 	vmov	s15, r3
 8009f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f60:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f64:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a0bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f80:	e043      	b.n	800a00a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	ee07 3a90 	vmov	s15, r3
 8009f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009f90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f94:	4b47      	ldr	r3, [pc, #284]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f9c:	ee07 3a90 	vmov	s15, r3
 8009fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fa8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a0bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fc4:	e021      	b.n	800a00a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	ee07 3a90 	vmov	s15, r3
 8009fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009fd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fd8:	4b36      	ldr	r3, [pc, #216]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe0:	ee07 3a90 	vmov	s15, r3
 8009fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fec:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a0bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a000:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a004:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a008:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a00a:	4b2a      	ldr	r3, [pc, #168]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00e:	0a5b      	lsrs	r3, r3, #9
 800a010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a014:	ee07 3a90 	vmov	s15, r3
 800a018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a01c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a020:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a024:	edd7 6a07 	vldr	s13, [r7, #28]
 800a028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a02c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a030:	ee17 2a90 	vmov	r2, s15
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a038:	4b1e      	ldr	r3, [pc, #120]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a03c:	0c1b      	lsrs	r3, r3, #16
 800a03e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a042:	ee07 3a90 	vmov	s15, r3
 800a046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a04a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a04e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a052:	edd7 6a07 	vldr	s13, [r7, #28]
 800a056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a05a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a05e:	ee17 2a90 	vmov	r2, s15
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a066:	4b13      	ldr	r3, [pc, #76]	; (800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06a:	0e1b      	lsrs	r3, r3, #24
 800a06c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a070:	ee07 3a90 	vmov	s15, r3
 800a074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a07c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a080:	edd7 6a07 	vldr	s13, [r7, #28]
 800a084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a08c:	ee17 2a90 	vmov	r2, s15
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a094:	e008      	b.n	800a0a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	609a      	str	r2, [r3, #8]
}
 800a0a8:	bf00      	nop
 800a0aa:	3724      	adds	r7, #36	; 0x24
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	58024400 	.word	0x58024400
 800a0b8:	03d09000 	.word	0x03d09000
 800a0bc:	46000000 	.word	0x46000000
 800a0c0:	4c742400 	.word	0x4c742400
 800a0c4:	4a742400 	.word	0x4a742400
 800a0c8:	4bbebc20 	.word	0x4bbebc20

0800a0cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0da:	4b53      	ldr	r3, [pc, #332]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0de:	f003 0303 	and.w	r3, r3, #3
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	d101      	bne.n	800a0ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e099      	b.n	800a21e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a0ea:	4b4f      	ldr	r3, [pc, #316]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a4e      	ldr	r2, [pc, #312]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a0f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0f6:	f7f8 f8cd 	bl	8002294 <HAL_GetTick>
 800a0fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0fc:	e008      	b.n	800a110 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0fe:	f7f8 f8c9 	bl	8002294 <HAL_GetTick>
 800a102:	4602      	mov	r2, r0
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d901      	bls.n	800a110 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e086      	b.n	800a21e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a110:	4b45      	ldr	r3, [pc, #276]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1f0      	bne.n	800a0fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a11c:	4b42      	ldr	r3, [pc, #264]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a120:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	031b      	lsls	r3, r3, #12
 800a12a:	493f      	ldr	r1, [pc, #252]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a12c:	4313      	orrs	r3, r2
 800a12e:	628b      	str	r3, [r1, #40]	; 0x28
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	3b01      	subs	r3, #1
 800a136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	3b01      	subs	r3, #1
 800a140:	025b      	lsls	r3, r3, #9
 800a142:	b29b      	uxth	r3, r3
 800a144:	431a      	orrs	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	3b01      	subs	r3, #1
 800a14c:	041b      	lsls	r3, r3, #16
 800a14e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a152:	431a      	orrs	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	3b01      	subs	r3, #1
 800a15a:	061b      	lsls	r3, r3, #24
 800a15c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a160:	4931      	ldr	r1, [pc, #196]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a162:	4313      	orrs	r3, r2
 800a164:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a166:	4b30      	ldr	r3, [pc, #192]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	492d      	ldr	r1, [pc, #180]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a174:	4313      	orrs	r3, r2
 800a176:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a178:	4b2b      	ldr	r3, [pc, #172]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	f023 0220 	bic.w	r2, r3, #32
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	4928      	ldr	r1, [pc, #160]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a186:	4313      	orrs	r3, r2
 800a188:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a18a:	4b27      	ldr	r3, [pc, #156]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18e:	4a26      	ldr	r2, [pc, #152]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a190:	f023 0310 	bic.w	r3, r3, #16
 800a194:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a196:	4b24      	ldr	r3, [pc, #144]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a19a:	4b24      	ldr	r3, [pc, #144]	; (800a22c <RCCEx_PLL2_Config+0x160>)
 800a19c:	4013      	ands	r3, r2
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	69d2      	ldr	r2, [r2, #28]
 800a1a2:	00d2      	lsls	r2, r2, #3
 800a1a4:	4920      	ldr	r1, [pc, #128]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a1aa:	4b1f      	ldr	r3, [pc, #124]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ae:	4a1e      	ldr	r2, [pc, #120]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a1b0:	f043 0310 	orr.w	r3, r3, #16
 800a1b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d106      	bne.n	800a1ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a1bc:	4b1a      	ldr	r3, [pc, #104]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c0:	4a19      	ldr	r2, [pc, #100]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a1c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1c8:	e00f      	b.n	800a1ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d106      	bne.n	800a1de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a1d0:	4b15      	ldr	r3, [pc, #84]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d4:	4a14      	ldr	r2, [pc, #80]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a1d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1dc:	e005      	b.n	800a1ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a1de:	4b12      	ldr	r3, [pc, #72]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e2:	4a11      	ldr	r2, [pc, #68]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a1e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a1ea:	4b0f      	ldr	r3, [pc, #60]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a0e      	ldr	r2, [pc, #56]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a1f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1f6:	f7f8 f84d 	bl	8002294 <HAL_GetTick>
 800a1fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1fc:	e008      	b.n	800a210 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1fe:	f7f8 f849 	bl	8002294 <HAL_GetTick>
 800a202:	4602      	mov	r2, r0
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d901      	bls.n	800a210 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e006      	b.n	800a21e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a210:	4b05      	ldr	r3, [pc, #20]	; (800a228 <RCCEx_PLL2_Config+0x15c>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d0f0      	beq.n	800a1fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	58024400 	.word	0x58024400
 800a22c:	ffff0007 	.word	0xffff0007

0800a230 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a23e:	4b53      	ldr	r3, [pc, #332]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a242:	f003 0303 	and.w	r3, r3, #3
 800a246:	2b03      	cmp	r3, #3
 800a248:	d101      	bne.n	800a24e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e099      	b.n	800a382 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a24e:	4b4f      	ldr	r3, [pc, #316]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a4e      	ldr	r2, [pc, #312]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a25a:	f7f8 f81b 	bl	8002294 <HAL_GetTick>
 800a25e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a260:	e008      	b.n	800a274 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a262:	f7f8 f817 	bl	8002294 <HAL_GetTick>
 800a266:	4602      	mov	r2, r0
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d901      	bls.n	800a274 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a270:	2303      	movs	r3, #3
 800a272:	e086      	b.n	800a382 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a274:	4b45      	ldr	r3, [pc, #276]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1f0      	bne.n	800a262 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a280:	4b42      	ldr	r3, [pc, #264]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a284:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	051b      	lsls	r3, r3, #20
 800a28e:	493f      	ldr	r1, [pc, #252]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a290:	4313      	orrs	r3, r2
 800a292:	628b      	str	r3, [r1, #40]	; 0x28
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	3b01      	subs	r3, #1
 800a29a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	025b      	lsls	r3, r3, #9
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	431a      	orrs	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	041b      	lsls	r3, r3, #16
 800a2b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2b6:	431a      	orrs	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	061b      	lsls	r3, r3, #24
 800a2c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2c4:	4931      	ldr	r1, [pc, #196]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a2ca:	4b30      	ldr	r3, [pc, #192]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	492d      	ldr	r1, [pc, #180]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a2dc:	4b2b      	ldr	r3, [pc, #172]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	4928      	ldr	r1, [pc, #160]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a2ee:	4b27      	ldr	r3, [pc, #156]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f2:	4a26      	ldr	r2, [pc, #152]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a2f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a2fa:	4b24      	ldr	r3, [pc, #144]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a2fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2fe:	4b24      	ldr	r3, [pc, #144]	; (800a390 <RCCEx_PLL3_Config+0x160>)
 800a300:	4013      	ands	r3, r2
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	69d2      	ldr	r2, [r2, #28]
 800a306:	00d2      	lsls	r2, r2, #3
 800a308:	4920      	ldr	r1, [pc, #128]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a30a:	4313      	orrs	r3, r2
 800a30c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a30e:	4b1f      	ldr	r3, [pc, #124]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a312:	4a1e      	ldr	r2, [pc, #120]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a318:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d106      	bne.n	800a32e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a320:	4b1a      	ldr	r3, [pc, #104]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a324:	4a19      	ldr	r2, [pc, #100]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a326:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a32a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a32c:	e00f      	b.n	800a34e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d106      	bne.n	800a342 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a334:	4b15      	ldr	r3, [pc, #84]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a338:	4a14      	ldr	r2, [pc, #80]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a33a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a33e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a340:	e005      	b.n	800a34e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a342:	4b12      	ldr	r3, [pc, #72]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a346:	4a11      	ldr	r2, [pc, #68]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a34c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a34e:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a0e      	ldr	r2, [pc, #56]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a35a:	f7f7 ff9b 	bl	8002294 <HAL_GetTick>
 800a35e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a360:	e008      	b.n	800a374 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a362:	f7f7 ff97 	bl	8002294 <HAL_GetTick>
 800a366:	4602      	mov	r2, r0
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d901      	bls.n	800a374 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a370:	2303      	movs	r3, #3
 800a372:	e006      	b.n	800a382 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a374:	4b05      	ldr	r3, [pc, #20]	; (800a38c <RCCEx_PLL3_Config+0x15c>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d0f0      	beq.n	800a362 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a380:	7bfb      	ldrb	r3, [r7, #15]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	58024400 	.word	0x58024400
 800a390:	ffff0007 	.word	0xffff0007

0800a394 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d904      	bls.n	800a3b2 <HAL_SAI_InitProtocol+0x1e>
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	3b03      	subs	r3, #3
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d812      	bhi.n	800a3d6 <HAL_SAI_InitProtocol+0x42>
 800a3b0:	e008      	b.n	800a3c4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	68b9      	ldr	r1, [r7, #8]
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 fb8b 	bl	800aad4 <SAI_InitI2S>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a3c2:	e00b      	b.n	800a3dc <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	68b9      	ldr	r1, [r7, #8]
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f000 fc34 	bl	800ac38 <SAI_InitPCM>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a3d4:	e002      	b.n	800a3dc <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	75fb      	strb	r3, [r7, #23]
      break;
 800a3da:	bf00      	nop
  }

  if (status == HAL_OK)
 800a3dc:	7dfb      	ldrb	r3, [r7, #23]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d104      	bne.n	800a3ec <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 f808 	bl	800a3f8 <HAL_SAI_Init>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3718      	adds	r7, #24
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
	...

0800a3f8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08a      	sub	sp, #40	; 0x28
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e201      	b.n	800a80e <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a410:	2b01      	cmp	r3, #1
 800a412:	d113      	bne.n	800a43c <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a99      	ldr	r2, [pc, #612]	; (800a680 <HAL_SAI_Init+0x288>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d004      	beq.n	800a428 <HAL_SAI_Init+0x30>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a98      	ldr	r2, [pc, #608]	; (800a684 <HAL_SAI_Init+0x28c>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d107      	bne.n	800a438 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d103      	bne.n	800a438 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	e1e8      	b.n	800a80e <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a8f      	ldr	r2, [pc, #572]	; (800a680 <HAL_SAI_Init+0x288>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d004      	beq.n	800a450 <HAL_SAI_Init+0x58>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a8f      	ldr	r2, [pc, #572]	; (800a688 <HAL_SAI_Init+0x290>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d102      	bne.n	800a456 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 800a450:	4b8e      	ldr	r3, [pc, #568]	; (800a68c <HAL_SAI_Init+0x294>)
 800a452:	61bb      	str	r3, [r7, #24]
 800a454:	e00e      	b.n	800a474 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a8a      	ldr	r2, [pc, #552]	; (800a684 <HAL_SAI_Init+0x28c>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d004      	beq.n	800a46a <HAL_SAI_Init+0x72>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a8a      	ldr	r2, [pc, #552]	; (800a690 <HAL_SAI_Init+0x298>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d102      	bne.n	800a470 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800a46a:	4b8a      	ldr	r3, [pc, #552]	; (800a694 <HAL_SAI_Init+0x29c>)
 800a46c:	61bb      	str	r3, [r7, #24]
 800a46e:	e001      	b.n	800a474 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e1cc      	b.n	800a80e <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d106      	bne.n	800a48e <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7f7 fb0b 	bl	8001aa4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fc8c 	bl	800adac <SAI_Disable>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e1b7      	b.n	800a80e <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d00c      	beq.n	800a4c8 <HAL_SAI_Init+0xd0>
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d80d      	bhi.n	800a4ce <HAL_SAI_Init+0xd6>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d002      	beq.n	800a4bc <HAL_SAI_Init+0xc4>
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d003      	beq.n	800a4c2 <HAL_SAI_Init+0xca>
 800a4ba:	e008      	b.n	800a4ce <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a4c0:	e008      	b.n	800a4d4 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a4c2:	2310      	movs	r3, #16
 800a4c4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a4c6:	e005      	b.n	800a4d4 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a4c8:	2320      	movs	r3, #32
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a4cc:	e002      	b.n	800a4d4 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a4d2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	2b05      	cmp	r3, #5
 800a4da:	d822      	bhi.n	800a522 <HAL_SAI_Init+0x12a>
 800a4dc:	a201      	add	r2, pc, #4	; (adr r2, 800a4e4 <HAL_SAI_Init+0xec>)
 800a4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e2:	bf00      	nop
 800a4e4:	0800a4fd 	.word	0x0800a4fd
 800a4e8:	0800a503 	.word	0x0800a503
 800a4ec:	0800a50b 	.word	0x0800a50b
 800a4f0:	0800a523 	.word	0x0800a523
 800a4f4:	0800a523 	.word	0x0800a523
 800a4f8:	0800a513 	.word	0x0800a513
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	61fb      	str	r3, [r7, #28]
      break;
 800a500:	e012      	b.n	800a528 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a506:	61fb      	str	r3, [r7, #28]
      break;
 800a508:	e00e      	b.n	800a528 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a50a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a50e:	61fb      	str	r3, [r7, #28]
      break;
 800a510:	e00a      	b.n	800a528 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a512:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a516:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51a:	f043 0303 	orr.w	r3, r3, #3
 800a51e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a520:	e002      	b.n	800a528 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a522:	2300      	movs	r3, #0
 800a524:	61fb      	str	r3, [r7, #28]
      break;
 800a526:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	2b00      	cmp	r3, #0
 800a534:	f000 808a 	beq.w	800a64c <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a4f      	ldr	r2, [pc, #316]	; (800a680 <HAL_SAI_Init+0x288>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d004      	beq.n	800a550 <HAL_SAI_Init+0x158>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a4f      	ldr	r2, [pc, #316]	; (800a688 <HAL_SAI_Init+0x290>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d106      	bne.n	800a55e <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a550:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a554:	f04f 0100 	mov.w	r1, #0
 800a558:	f7fe fcd6 	bl	8008f08 <HAL_RCCEx_GetPeriphCLKFreq>
 800a55c:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a48      	ldr	r2, [pc, #288]	; (800a684 <HAL_SAI_Init+0x28c>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d106      	bne.n	800a576 <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a568:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a56c:	f04f 0100 	mov.w	r1, #0
 800a570:	f7fe fcca 	bl	8008f08 <HAL_RCCEx_GetPeriphCLKFreq>
 800a574:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a45      	ldr	r2, [pc, #276]	; (800a690 <HAL_SAI_Init+0x298>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d106      	bne.n	800a58e <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a580:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a584:	f04f 0100 	mov.w	r1, #0
 800a588:	f7fe fcbe 	bl	8008f08 <HAL_RCCEx_GetPeriphCLKFreq>
 800a58c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a596:	d120      	bne.n	800a5da <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a59c:	2b04      	cmp	r3, #4
 800a59e:	d102      	bne.n	800a5a6 <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a5a0:	2340      	movs	r3, #64	; 0x40
 800a5a2:	60fb      	str	r3, [r7, #12]
 800a5a4:	e00a      	b.n	800a5bc <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5aa:	2b08      	cmp	r3, #8
 800a5ac:	d103      	bne.n	800a5b6 <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a5ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	e002      	b.n	800a5bc <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ba:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a1b      	ldr	r3, [r3, #32]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	fb02 f303 	mul.w	r3, r2, r3
 800a5d2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a5d6:	613b      	str	r3, [r7, #16]
 800a5d8:	e017      	b.n	800a60a <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5e2:	d101      	bne.n	800a5e8 <HAL_SAI_Init+0x1f0>
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	e000      	b.n	800a5ea <HAL_SAI_Init+0x1f2>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4413      	add	r3, r2
 800a5f4:	005b      	lsls	r3, r3, #1
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a1b      	ldr	r3, [r3, #32]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	fb02 f303 	mul.w	r3, r2, r3
 800a602:	021b      	lsls	r3, r3, #8
 800a604:	fbb1 f3f3 	udiv	r3, r1, r3
 800a608:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	4a22      	ldr	r2, [pc, #136]	; (800a698 <HAL_SAI_Init+0x2a0>)
 800a60e:	fba2 2303 	umull	r2, r3, r2, r3
 800a612:	08da      	lsrs	r2, r3, #3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a618:	6939      	ldr	r1, [r7, #16]
 800a61a:	4b1f      	ldr	r3, [pc, #124]	; (800a698 <HAL_SAI_Init+0x2a0>)
 800a61c:	fba3 2301 	umull	r2, r3, r3, r1
 800a620:	08da      	lsrs	r2, r3, #3
 800a622:	4613      	mov	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	1aca      	subs	r2, r1, r3
 800a62c:	2a08      	cmp	r2, #8
 800a62e:	d904      	bls.n	800a63a <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a634:	1c5a      	adds	r2, r3, #1
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a63e:	2b04      	cmp	r3, #4
 800a640:	d104      	bne.n	800a64c <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	085a      	lsrs	r2, r3, #1
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d003      	beq.n	800a65c <HAL_SAI_Init+0x264>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d109      	bne.n	800a670 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a660:	2b01      	cmp	r3, #1
 800a662:	d101      	bne.n	800a668 <HAL_SAI_Init+0x270>
 800a664:	2300      	movs	r3, #0
 800a666:	e001      	b.n	800a66c <HAL_SAI_Init+0x274>
 800a668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a66c:	623b      	str	r3, [r7, #32]
 800a66e:	e017      	b.n	800a6a0 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a674:	2b01      	cmp	r3, #1
 800a676:	d111      	bne.n	800a69c <HAL_SAI_Init+0x2a4>
 800a678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a67c:	e00f      	b.n	800a69e <HAL_SAI_Init+0x2a6>
 800a67e:	bf00      	nop
 800a680:	40015804 	.word	0x40015804
 800a684:	58005404 	.word	0x58005404
 800a688:	40015824 	.word	0x40015824
 800a68c:	40015800 	.word	0x40015800
 800a690:	58005424 	.word	0x58005424
 800a694:	58005400 	.word	0x58005400
 800a698:	cccccccd 	.word	0xcccccccd
 800a69c:	2300      	movs	r3, #0
 800a69e:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6819      	ldr	r1, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	4b5b      	ldr	r3, [pc, #364]	; (800a818 <HAL_SAI_Init+0x420>)
 800a6ac:	400b      	ands	r3, r1
 800a6ae:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6819      	ldr	r1, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6be:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6c4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800a6d8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6e4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	051b      	lsls	r3, r3, #20
 800a6ec:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a6f2:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	430a      	orrs	r2, r1
 800a700:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	6859      	ldr	r1, [r3, #4]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	4b43      	ldr	r3, [pc, #268]	; (800a81c <HAL_SAI_Init+0x424>)
 800a70e:	400b      	ands	r3, r1
 800a710:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	6859      	ldr	r1, [r3, #4]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	69da      	ldr	r2, [r3, #28]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a720:	431a      	orrs	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a726:	431a      	orrs	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	430a      	orrs	r2, r1
 800a72e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6899      	ldr	r1, [r3, #8]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	4b39      	ldr	r3, [pc, #228]	; (800a820 <HAL_SAI_Init+0x428>)
 800a73c:	400b      	ands	r3, r1
 800a73e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6899      	ldr	r1, [r3, #8]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a750:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a756:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a75c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a762:	3b01      	subs	r3, #1
 800a764:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a766:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	430a      	orrs	r2, r1
 800a76e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68d9      	ldr	r1, [r3, #12]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a77e:	400b      	ands	r3, r1
 800a780:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68d9      	ldr	r1, [r3, #12]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a790:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a796:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a798:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	021b      	lsls	r3, r3, #8
 800a7a2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	430a      	orrs	r2, r1
 800a7aa:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a1c      	ldr	r2, [pc, #112]	; (800a824 <HAL_SAI_Init+0x42c>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d004      	beq.n	800a7c0 <HAL_SAI_Init+0x3c8>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a1b      	ldr	r2, [pc, #108]	; (800a828 <HAL_SAI_Init+0x430>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d119      	bne.n	800a7f4 <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c4:	f023 0201 	bic.w	r2, r3, #1
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d10e      	bne.n	800a7f4 <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a7e2:	431a      	orrs	r2, r3
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ec:	f043 0201 	orr.w	r2, r3, #1
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3728      	adds	r7, #40	; 0x28
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	f005c010 	.word	0xf005c010
 800a81c:	ffff1ff0 	.word	0xffff1ff0
 800a820:	fff88000 	.word	0xfff88000
 800a824:	40015804 	.word	0x40015804
 800a828:	58005404 	.word	0x58005404

0800a82c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	4613      	mov	r3, r2
 800a838:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800a83a:	f7f7 fd2b 	bl	8002294 <HAL_GetTick>
 800a83e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d002      	beq.n	800a84c <HAL_SAI_Transmit_DMA+0x20>
 800a846:	88fb      	ldrh	r3, [r7, #6]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e098      	b.n	800a982 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b01      	cmp	r3, #1
 800a85a:	f040 8091 	bne.w	800a980 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a864:	2b01      	cmp	r3, #1
 800a866:	d101      	bne.n	800a86c <HAL_SAI_Transmit_DMA+0x40>
 800a868:	2302      	movs	r3, #2
 800a86a:	e08a      	b.n	800a982 <HAL_SAI_Transmit_DMA+0x156>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	88fa      	ldrh	r2, [r7, #6]
 800a87e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	88fa      	ldrh	r2, [r7, #6]
 800a886:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2212      	movs	r2, #18
 800a896:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8a0:	4a3a      	ldr	r2, [pc, #232]	; (800a98c <HAL_SAI_Transmit_DMA+0x160>)
 800a8a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8aa:	4a39      	ldr	r2, [pc, #228]	; (800a990 <HAL_SAI_Transmit_DMA+0x164>)
 800a8ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8b4:	4a37      	ldr	r2, [pc, #220]	; (800a994 <HAL_SAI_Transmit_DMA+0x168>)
 800a8b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8be:	2200      	movs	r2, #0
 800a8c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	331c      	adds	r3, #28
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800a8dc:	f7f8 f972 	bl	8002bc4 <HAL_DMA_Start_IT>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d005      	beq.n	800a8f2 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e047      	b.n	800a982 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f000 fa21 	bl	800ad3c <SAI_InterruptFlag>
 800a8fa:	4601      	mov	r1, r0
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	691a      	ldr	r2, [r3, #16]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	430a      	orrs	r2, r1
 800a908:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a918:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a91a:	e015      	b.n	800a948 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800a91c:	f7f7 fcba 	bl	8002294 <HAL_GetTick>
 800a920:	4602      	mov	r2, r0
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a92a:	d90d      	bls.n	800a948 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a932:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2200      	movs	r2, #0
 800a940:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e01c      	b.n	800a982 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0e2      	beq.n	800a91c <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a960:	2b00      	cmp	r3, #0
 800a962:	d107      	bne.n	800a974 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a972:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	e000      	b.n	800a982 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800a980:	2302      	movs	r3, #2
  }
}
 800a982:	4618      	mov	r0, r3
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	0800ae81 	.word	0x0800ae81
 800a990:	0800ae21 	.word	0x0800ae21
 800a994:	0800af19 	.word	0x0800af19

0800a998 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <HAL_SAI_Receive_DMA+0x1a>
 800a9ac:	88fb      	ldrh	r3, [r7, #6]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e079      	b.n	800aaaa <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d172      	bne.n	800aaa8 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d101      	bne.n	800a9d0 <HAL_SAI_Receive_DMA+0x38>
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	e06c      	b.n	800aaaa <HAL_SAI_Receive_DMA+0x112>
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	88fa      	ldrh	r2, [r7, #6]
 800a9e2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	88fa      	ldrh	r2, [r7, #6]
 800a9ea:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2222      	movs	r2, #34	; 0x22
 800a9fa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa04:	4a2b      	ldr	r2, [pc, #172]	; (800aab4 <HAL_SAI_Receive_DMA+0x11c>)
 800aa06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa0e:	4a2a      	ldr	r2, [pc, #168]	; (800aab8 <HAL_SAI_Receive_DMA+0x120>)
 800aa10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa18:	4a28      	ldr	r2, [pc, #160]	; (800aabc <HAL_SAI_Receive_DMA+0x124>)
 800aa1a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa22:	2200      	movs	r2, #0
 800aa24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	331c      	adds	r3, #28
 800aa32:	4619      	mov	r1, r3
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa38:	461a      	mov	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800aa40:	f7f8 f8c0 	bl	8002bc4 <HAL_DMA_Start_IT>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d005      	beq.n	800aa56 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	e029      	b.n	800aaaa <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800aa56:	2100      	movs	r1, #0
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f000 f96f 	bl	800ad3c <SAI_InterruptFlag>
 800aa5e:	4601      	mov	r1, r0
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	691a      	ldr	r2, [r3, #16]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	430a      	orrs	r2, r1
 800aa6c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800aa7c:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d107      	bne.n	800aa9c <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800aa9a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e000      	b.n	800aaaa <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800aaa8:	2302      	movs	r3, #2
  }
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	0800aefd 	.word	0x0800aefd
 800aab8:	0800ae9d 	.word	0x0800ae9d
 800aabc:	0800af19 	.word	0x0800af19

0800aac0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <SAI_InitI2S+0x2e>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d103      	bne.n	800ab0a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2200      	movs	r2, #0
 800ab06:	651a      	str	r2, [r3, #80]	; 0x50
 800ab08:	e002      	b.n	800ab10 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ab16:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab1e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	f003 0301 	and.w	r3, r3, #1
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d001      	beq.n	800ab3a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e077      	b.n	800ac2a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d107      	bne.n	800ab50 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ab4c:	665a      	str	r2, [r3, #100]	; 0x64
 800ab4e:	e006      	b.n	800ab5e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ab56:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2b03      	cmp	r3, #3
 800ab62:	d84f      	bhi.n	800ac04 <SAI_InitI2S+0x130>
 800ab64:	a201      	add	r2, pc, #4	; (adr r2, 800ab6c <SAI_InitI2S+0x98>)
 800ab66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6a:	bf00      	nop
 800ab6c:	0800ab7d 	.word	0x0800ab7d
 800ab70:	0800ab9f 	.word	0x0800ab9f
 800ab74:	0800abc1 	.word	0x0800abc1
 800ab78:	0800abe3 	.word	0x0800abe3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2280      	movs	r2, #128	; 0x80
 800ab80:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	085b      	lsrs	r3, r3, #1
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	085b      	lsrs	r3, r3, #1
 800ab90:	011a      	lsls	r2, r3, #4
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2240      	movs	r2, #64	; 0x40
 800ab9a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ab9c:	e035      	b.n	800ac0a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2280      	movs	r2, #128	; 0x80
 800aba2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	085b      	lsrs	r3, r3, #1
 800aba8:	019a      	lsls	r2, r3, #6
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	085b      	lsrs	r3, r3, #1
 800abb2:	015a      	lsls	r2, r3, #5
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2280      	movs	r2, #128	; 0x80
 800abbc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800abbe:	e024      	b.n	800ac0a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	22c0      	movs	r2, #192	; 0xc0
 800abc4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	085b      	lsrs	r3, r3, #1
 800abca:	019a      	lsls	r2, r3, #6
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	085b      	lsrs	r3, r3, #1
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2280      	movs	r2, #128	; 0x80
 800abde:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800abe0:	e013      	b.n	800ac0a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	22e0      	movs	r2, #224	; 0xe0
 800abe6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	085b      	lsrs	r3, r3, #1
 800abec:	019a      	lsls	r2, r3, #6
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	085b      	lsrs	r3, r3, #1
 800abf6:	015a      	lsls	r2, r3, #5
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2280      	movs	r2, #128	; 0x80
 800ac00:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ac02:	e002      	b.n	800ac0a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	75fb      	strb	r3, [r7, #23]
      break;
 800ac08:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d10b      	bne.n	800ac28 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d102      	bne.n	800ac1c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2210      	movs	r2, #16
 800ac1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d102      	bne.n	800ac28 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2208      	movs	r2, #8
 800ac26:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800ac28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	371c      	adds	r7, #28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop

0800ac38 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
 800ac44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <SAI_InitPCM+0x2e>
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d103      	bne.n	800ac6e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	651a      	str	r2, [r3, #80]	; 0x50
 800ac6c:	e002      	b.n	800ac74 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2200      	movs	r2, #0
 800ac78:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ac80:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ac88:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac9c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2b04      	cmp	r3, #4
 800aca2:	d103      	bne.n	800acac <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2201      	movs	r2, #1
 800aca8:	659a      	str	r2, [r3, #88]	; 0x58
 800acaa:	e002      	b.n	800acb2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	220d      	movs	r2, #13
 800acb0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b03      	cmp	r3, #3
 800acb6:	d837      	bhi.n	800ad28 <SAI_InitPCM+0xf0>
 800acb8:	a201      	add	r2, pc, #4	; (adr r2, 800acc0 <SAI_InitPCM+0x88>)
 800acba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbe:	bf00      	nop
 800acc0:	0800acd1 	.word	0x0800acd1
 800acc4:	0800ace7 	.word	0x0800ace7
 800acc8:	0800acfd 	.word	0x0800acfd
 800accc:	0800ad13 	.word	0x0800ad13
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2280      	movs	r2, #128	; 0x80
 800acd4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	011a      	lsls	r2, r3, #4
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2240      	movs	r2, #64	; 0x40
 800ace2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ace4:	e023      	b.n	800ad2e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2280      	movs	r2, #128	; 0x80
 800acea:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	015a      	lsls	r2, r3, #5
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2280      	movs	r2, #128	; 0x80
 800acf8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800acfa:	e018      	b.n	800ad2e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	22c0      	movs	r2, #192	; 0xc0
 800ad00:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	015a      	lsls	r2, r3, #5
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2280      	movs	r2, #128	; 0x80
 800ad0e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ad10:	e00d      	b.n	800ad2e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	22e0      	movs	r2, #224	; 0xe0
 800ad16:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	015a      	lsls	r2, r3, #5
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2280      	movs	r2, #128	; 0x80
 800ad24:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ad26:	e002      	b.n	800ad2e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad2c:	bf00      	nop
  }

  return status;
 800ad2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	371c      	adds	r7, #28
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	460b      	mov	r3, r1
 800ad46:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ad4c:	78fb      	ldrb	r3, [r7, #3]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d103      	bne.n	800ad5a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f043 0308 	orr.w	r3, r3, #8
 800ad58:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad5e:	2b08      	cmp	r3, #8
 800ad60:	d10b      	bne.n	800ad7a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d003      	beq.n	800ad72 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d103      	bne.n	800ad7a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f043 0310 	orr.w	r3, r3, #16
 800ad78:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d003      	beq.n	800ad8a <SAI_InterruptFlag+0x4e>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d104      	bne.n	800ad94 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	e003      	b.n	800ad9c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f043 0304 	orr.w	r3, r3, #4
 800ad9a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
	...

0800adac <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800adb4:	4b18      	ldr	r3, [pc, #96]	; (800ae18 <SAI_Disable+0x6c>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a18      	ldr	r2, [pc, #96]	; (800ae1c <SAI_Disable+0x70>)
 800adba:	fba2 2303 	umull	r2, r3, r2, r3
 800adbe:	0b1b      	lsrs	r3, r3, #12
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800add6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10a      	bne.n	800adf4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ade4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800adee:	2303      	movs	r3, #3
 800adf0:	72fb      	strb	r3, [r7, #11]
      break;
 800adf2:	e009      	b.n	800ae08 <SAI_Disable+0x5c>
    }
    count--;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3b01      	subs	r3, #1
 800adf8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1e7      	bne.n	800add8 <SAI_Disable+0x2c>

  return status;
 800ae08:	7afb      	ldrb	r3, [r7, #11]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	24000384 	.word	0x24000384
 800ae1c:	95cbec1b 	.word	0x95cbec1b

0800ae20 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae36:	d01c      	beq.n	800ae72 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ae4e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ae50:	2100      	movs	r1, #0
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f7ff ff72 	bl	800ad3c <SAI_InterruptFlag>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	43d9      	mvns	r1, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	691a      	ldr	r2, [r3, #16]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	400a      	ands	r2, r1
 800ae68:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f7f6 f9d2 	bl	800121c <HAL_SAI_TxCpltCallback>
#endif
}
 800ae78:	bf00      	nop
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f7f6 fa1a 	bl	80012c8 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800ae94:	bf00      	nop
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	69db      	ldr	r3, [r3, #28]
 800aeae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeb2:	d01c      	beq.n	800aeee <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800aec2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800aecc:	2100      	movs	r1, #0
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f7ff ff34 	bl	800ad3c <SAI_InterruptFlag>
 800aed4:	4603      	mov	r3, r0
 800aed6:	43d9      	mvns	r1, r3
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	691a      	ldr	r2, [r3, #16]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	400a      	ands	r2, r1
 800aee4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f7f6 fa3e 	bl	8001370 <HAL_SAI_RxCpltCallback>
#endif
}
 800aef4:	bf00      	nop
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af08:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f7f6 fa8a 	bl	8001424 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800af10:	bf00      	nop
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af24:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7f8 ffe0 	bl	8003eec <HAL_DMA_GetError>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d01d      	beq.n	800af6e <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800af50:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f7ff ff2a 	bl	800adac <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f7ff fda9 	bl	800aac0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800af6e:	bf00      	nop
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d101      	bne.n	800af8c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	e02b      	b.n	800afe4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af92:	b2db      	uxtb	r3, r3
 800af94:	2b00      	cmp	r3, #0
 800af96:	d106      	bne.n	800afa6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7f5 fc4b 	bl	800083c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2202      	movs	r2, #2
 800afaa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3304      	adds	r3, #4
 800afb6:	4619      	mov	r1, r3
 800afb8:	4610      	mov	r0, r2
 800afba:	f000 fdbf 	bl	800bb3c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6818      	ldr	r0, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	461a      	mov	r2, r3
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	f000 fe13 	bl	800bbf4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800afce:	4b07      	ldr	r3, [pc, #28]	; (800afec <HAL_SDRAM_Init+0x74>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a06      	ldr	r2, [pc, #24]	; (800afec <HAL_SDRAM_Init+0x74>)
 800afd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800afd8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	52004000 	.word	0x52004000

0800aff0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b002:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b004:	7dfb      	ldrb	r3, [r7, #23]
 800b006:	2b02      	cmp	r3, #2
 800b008:	d101      	bne.n	800b00e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b00a:	2302      	movs	r3, #2
 800b00c:	e021      	b.n	800b052 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d002      	beq.n	800b01a <HAL_SDRAM_SendCommand+0x2a>
 800b014:	7dfb      	ldrb	r3, [r7, #23]
 800b016:	2b05      	cmp	r3, #5
 800b018:	d118      	bne.n	800b04c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2202      	movs	r2, #2
 800b01e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 fe4c 	bl	800bcc8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b02      	cmp	r3, #2
 800b036:	d104      	bne.n	800b042 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2205      	movs	r2, #5
 800b03c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b040:	e006      	b.n	800b050 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b04a:	e001      	b.n	800b050 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	e000      	b.n	800b052 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3718      	adds	r7, #24
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b082      	sub	sp, #8
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d101      	bne.n	800b074 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b070:	2302      	movs	r3, #2
 800b072:	e016      	b.n	800b0a2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d10f      	bne.n	800b0a0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2202      	movs	r2, #2
 800b084:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	6839      	ldr	r1, [r7, #0]
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 fe3e 	bl	800bd10 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	e000      	b.n	800b0a2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b0a0:	2301      	movs	r3, #1
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
	...

0800b0ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e10f      	b.n	800b2de <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a87      	ldr	r2, [pc, #540]	; (800b2e8 <HAL_SPI_Init+0x23c>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d00f      	beq.n	800b0ee <HAL_SPI_Init+0x42>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a86      	ldr	r2, [pc, #536]	; (800b2ec <HAL_SPI_Init+0x240>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d00a      	beq.n	800b0ee <HAL_SPI_Init+0x42>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a84      	ldr	r2, [pc, #528]	; (800b2f0 <HAL_SPI_Init+0x244>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d005      	beq.n	800b0ee <HAL_SPI_Init+0x42>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	2b0f      	cmp	r3, #15
 800b0e8:	d901      	bls.n	800b0ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e0f7      	b.n	800b2de <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fd08 	bl	800bb04 <SPI_GetPacketSize>
 800b0f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a7b      	ldr	r2, [pc, #492]	; (800b2e8 <HAL_SPI_Init+0x23c>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d00c      	beq.n	800b11a <HAL_SPI_Init+0x6e>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a79      	ldr	r2, [pc, #484]	; (800b2ec <HAL_SPI_Init+0x240>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d007      	beq.n	800b11a <HAL_SPI_Init+0x6e>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a78      	ldr	r2, [pc, #480]	; (800b2f0 <HAL_SPI_Init+0x244>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d002      	beq.n	800b11a <HAL_SPI_Init+0x6e>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b08      	cmp	r3, #8
 800b118:	d811      	bhi.n	800b13e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b11e:	4a72      	ldr	r2, [pc, #456]	; (800b2e8 <HAL_SPI_Init+0x23c>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d009      	beq.n	800b138 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a70      	ldr	r2, [pc, #448]	; (800b2ec <HAL_SPI_Init+0x240>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d004      	beq.n	800b138 <HAL_SPI_Init+0x8c>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a6f      	ldr	r2, [pc, #444]	; (800b2f0 <HAL_SPI_Init+0x244>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d104      	bne.n	800b142 <HAL_SPI_Init+0x96>
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2b10      	cmp	r3, #16
 800b13c:	d901      	bls.n	800b142 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e0cd      	b.n	800b2de <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d106      	bne.n	800b15c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7f6 fde0 	bl	8001d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f022 0201 	bic.w	r2, r2, #1
 800b172:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b17e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	699b      	ldr	r3, [r3, #24]
 800b184:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b188:	d119      	bne.n	800b1be <HAL_SPI_Init+0x112>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b192:	d103      	bne.n	800b19c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d008      	beq.n	800b1ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10c      	bne.n	800b1be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b1a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1ac:	d107      	bne.n	800b1be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b1bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00f      	beq.n	800b1ea <HAL_SPI_Init+0x13e>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	2b06      	cmp	r3, #6
 800b1d0:	d90b      	bls.n	800b1ea <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	430a      	orrs	r2, r1
 800b1e6:	601a      	str	r2, [r3, #0]
 800b1e8:	e007      	b.n	800b1fa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b1f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	69da      	ldr	r2, [r3, #28]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b202:	431a      	orrs	r2, r3
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	431a      	orrs	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b20c:	ea42 0103 	orr.w	r1, r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	68da      	ldr	r2, [r3, #12]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	430a      	orrs	r2, r1
 800b21a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b224:	431a      	orrs	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22a:	431a      	orrs	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	431a      	orrs	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	431a      	orrs	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	431a      	orrs	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a1b      	ldr	r3, [r3, #32]
 800b242:	431a      	orrs	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	431a      	orrs	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b24e:	431a      	orrs	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	431a      	orrs	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b25a:	ea42 0103 	orr.w	r1, r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	430a      	orrs	r2, r1
 800b268:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d113      	bne.n	800b29a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b284:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b298:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f022 0201 	bic.w	r2, r2, #1
 800b2a8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00a      	beq.n	800b2cc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	430a      	orrs	r2, r1
 800b2ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	40013000 	.word	0x40013000
 800b2ec:	40003800 	.word	0x40003800
 800b2f0:	40003c00 	.word	0x40003c00

0800b2f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b08e      	sub	sp, #56	; 0x38
 800b2f8:	af02      	add	r7, sp, #8
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
 800b300:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3320      	adds	r3, #32
 800b308:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	3330      	adds	r3, #48	; 0x30
 800b310:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b316:	095b      	lsrs	r3, r3, #5
 800b318:	b29b      	uxth	r3, r3
 800b31a:	3301      	adds	r3, #1
 800b31c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b31e:	f7f6 ffb9 	bl	8002294 <HAL_GetTick>
 800b322:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800b324:	887b      	ldrh	r3, [r7, #2]
 800b326:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800b328:	887b      	ldrh	r3, [r7, #2]
 800b32a:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b01      	cmp	r3, #1
 800b336:	d001      	beq.n	800b33c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800b338:	2302      	movs	r3, #2
 800b33a:	e310      	b.n	800b95e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d005      	beq.n	800b34e <HAL_SPI_TransmitReceive+0x5a>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <HAL_SPI_TransmitReceive+0x5a>
 800b348:	887b      	ldrh	r3, [r7, #2]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d101      	bne.n	800b352 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	e305      	b.n	800b95e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d101      	bne.n	800b360 <HAL_SPI_TransmitReceive+0x6c>
 800b35c:	2302      	movs	r3, #2
 800b35e:	e2fe      	b.n	800b95e <HAL_SPI_TransmitReceive+0x66a>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2205      	movs	r2, #5
 800b36c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	887a      	ldrh	r2, [r7, #2]
 800b382:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	887a      	ldrh	r2, [r7, #2]
 800b38a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	887a      	ldrh	r2, [r7, #2]
 800b398:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	887a      	ldrh	r2, [r7, #2]
 800b3a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68da      	ldr	r2, [r3, #12]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800b3be:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a70      	ldr	r2, [pc, #448]	; (800b588 <HAL_SPI_TransmitReceive+0x294>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d009      	beq.n	800b3de <HAL_SPI_TransmitReceive+0xea>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a6f      	ldr	r2, [pc, #444]	; (800b58c <HAL_SPI_TransmitReceive+0x298>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d004      	beq.n	800b3de <HAL_SPI_TransmitReceive+0xea>
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a6d      	ldr	r2, [pc, #436]	; (800b590 <HAL_SPI_TransmitReceive+0x29c>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d102      	bne.n	800b3e4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800b3de:	2310      	movs	r3, #16
 800b3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3e2:	e001      	b.n	800b3e8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800b3e4:	2308      	movs	r3, #8
 800b3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	4b69      	ldr	r3, [pc, #420]	; (800b594 <HAL_SPI_TransmitReceive+0x2a0>)
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	8879      	ldrh	r1, [r7, #2]
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	6812      	ldr	r2, [r2, #0]
 800b3f8:	430b      	orrs	r3, r1
 800b3fa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f042 0201 	orr.w	r2, r2, #1
 800b40a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b414:	d107      	bne.n	800b426 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b424:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	2b0f      	cmp	r3, #15
 800b42c:	f240 80a2 	bls.w	800b574 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800b430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b432:	089b      	lsrs	r3, r3, #2
 800b434:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b436:	e094      	b.n	800b562 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	f003 0302 	and.w	r3, r3, #2
 800b442:	2b02      	cmp	r3, #2
 800b444:	d120      	bne.n	800b488 <HAL_SPI_TransmitReceive+0x194>
 800b446:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d01d      	beq.n	800b488 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b44c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b44e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800b450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b452:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b454:	429a      	cmp	r2, r3
 800b456:	d217      	bcs.n	800b488 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6812      	ldr	r2, [r2, #0]
 800b462:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b468:	1d1a      	adds	r2, r3, #4
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b474:	b29b      	uxth	r3, r3
 800b476:	3b01      	subs	r3, #1
 800b478:	b29a      	uxth	r2, r3
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b486:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b490:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b492:	2b00      	cmp	r3, #0
 800b494:	d065      	beq.n	800b562 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	695b      	ldr	r3, [r3, #20]
 800b49c:	f003 0301 	and.w	r3, r3, #1
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d118      	bne.n	800b4d6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b4ae:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4b4:	1d1a      	adds	r2, r3, #4
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4d2:	853b      	strh	r3, [r7, #40]	; 0x28
 800b4d4:	e045      	b.n	800b562 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b4d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b4d8:	8bfb      	ldrh	r3, [r7, #30]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d21d      	bcs.n	800b51a <HAL_SPI_TransmitReceive+0x226>
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d018      	beq.n	800b51a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b4f2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4f8:	1d1a      	adds	r2, r3, #4
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b504:	b29b      	uxth	r3, r3
 800b506:	3b01      	subs	r3, #1
 800b508:	b29a      	uxth	r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b516:	853b      	strh	r3, [r7, #40]	; 0x28
 800b518:	e023      	b.n	800b562 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b51a:	f7f6 febb 	bl	8002294 <HAL_GetTick>
 800b51e:	4602      	mov	r2, r0
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	1ad3      	subs	r3, r2, r3
 800b524:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b526:	429a      	cmp	r2, r3
 800b528:	d803      	bhi.n	800b532 <HAL_SPI_TransmitReceive+0x23e>
 800b52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b530:	d102      	bne.n	800b538 <HAL_SPI_TransmitReceive+0x244>
 800b532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b534:	2b00      	cmp	r3, #0
 800b536:	d114      	bne.n	800b562 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f000 fa15 	bl	800b968 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b544:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800b55e:	2303      	movs	r3, #3
 800b560:	e1fd      	b.n	800b95e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b562:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b564:	2b00      	cmp	r3, #0
 800b566:	f47f af67 	bne.w	800b438 <HAL_SPI_TransmitReceive+0x144>
 800b56a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f47f af63 	bne.w	800b438 <HAL_SPI_TransmitReceive+0x144>
 800b572:	e1ce      	b.n	800b912 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	2b07      	cmp	r3, #7
 800b57a:	f240 81c2 	bls.w	800b902 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800b57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b580:	085b      	lsrs	r3, r3, #1
 800b582:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b584:	e0c9      	b.n	800b71a <HAL_SPI_TransmitReceive+0x426>
 800b586:	bf00      	nop
 800b588:	40013000 	.word	0x40013000
 800b58c:	40003800 	.word	0x40003800
 800b590:	40003c00 	.word	0x40003c00
 800b594:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	695b      	ldr	r3, [r3, #20]
 800b59e:	f003 0302 	and.w	r3, r3, #2
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d11f      	bne.n	800b5e6 <HAL_SPI_TransmitReceive+0x2f2>
 800b5a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d01c      	beq.n	800b5e6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b5ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b5ae:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d216      	bcs.n	800b5e6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5bc:	881a      	ldrh	r2, [r3, #0]
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5c6:	1c9a      	adds	r2, r3, #2
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	b29a      	uxth	r2, r3
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b5e4:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b5ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f000 8092 	beq.w	800b71a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	695b      	ldr	r3, [r3, #20]
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	2b01      	cmp	r3, #1
 800b602:	d118      	bne.n	800b636 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b608:	6a3a      	ldr	r2, [r7, #32]
 800b60a:	8812      	ldrh	r2, [r2, #0]
 800b60c:	b292      	uxth	r2, r2
 800b60e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b614:	1c9a      	adds	r2, r3, #2
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b620:	b29b      	uxth	r3, r3
 800b622:	3b01      	subs	r3, #1
 800b624:	b29a      	uxth	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b632:	853b      	strh	r3, [r7, #40]	; 0x28
 800b634:	e071      	b.n	800b71a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b636:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b638:	8bfb      	ldrh	r3, [r7, #30]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d228      	bcs.n	800b690 <HAL_SPI_TransmitReceive+0x39c>
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d023      	beq.n	800b690 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b64c:	6a3a      	ldr	r2, [r7, #32]
 800b64e:	8812      	ldrh	r2, [r2, #0]
 800b650:	b292      	uxth	r2, r2
 800b652:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b658:	1c9a      	adds	r2, r3, #2
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b662:	6a3a      	ldr	r2, [r7, #32]
 800b664:	8812      	ldrh	r2, [r2, #0]
 800b666:	b292      	uxth	r2, r2
 800b668:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b66e:	1c9a      	adds	r2, r3, #2
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	3b02      	subs	r3, #2
 800b67e:	b29a      	uxth	r2, r3
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b68c:	853b      	strh	r3, [r7, #40]	; 0x28
 800b68e:	e044      	b.n	800b71a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b690:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b692:	2b01      	cmp	r3, #1
 800b694:	d11d      	bne.n	800b6d2 <HAL_SPI_TransmitReceive+0x3de>
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d018      	beq.n	800b6d2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6a4:	6a3a      	ldr	r2, [r7, #32]
 800b6a6:	8812      	ldrh	r2, [r2, #0]
 800b6a8:	b292      	uxth	r2, r2
 800b6aa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6b0:	1c9a      	adds	r2, r3, #2
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6ce:	853b      	strh	r3, [r7, #40]	; 0x28
 800b6d0:	e023      	b.n	800b71a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6d2:	f7f6 fddf 	bl	8002294 <HAL_GetTick>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d803      	bhi.n	800b6ea <HAL_SPI_TransmitReceive+0x3f6>
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e8:	d102      	bne.n	800b6f0 <HAL_SPI_TransmitReceive+0x3fc>
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d114      	bne.n	800b71a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f000 f939 	bl	800b968 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800b716:	2303      	movs	r3, #3
 800b718:	e121      	b.n	800b95e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b71a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f47f af3b 	bne.w	800b598 <HAL_SPI_TransmitReceive+0x2a4>
 800b722:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b724:	2b00      	cmp	r3, #0
 800b726:	f47f af37 	bne.w	800b598 <HAL_SPI_TransmitReceive+0x2a4>
 800b72a:	e0f2      	b.n	800b912 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	695b      	ldr	r3, [r3, #20]
 800b732:	f003 0302 	and.w	r3, r3, #2
 800b736:	2b02      	cmp	r3, #2
 800b738:	d121      	bne.n	800b77e <HAL_SPI_TransmitReceive+0x48a>
 800b73a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d01e      	beq.n	800b77e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b740:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b742:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800b744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b746:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b748:	429a      	cmp	r2, r3
 800b74a:	d218      	bcs.n	800b77e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3320      	adds	r3, #32
 800b756:	7812      	ldrb	r2, [r2, #0]
 800b758:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	3b01      	subs	r3, #1
 800b76e:	b29a      	uxth	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b77c:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	695b      	ldr	r3, [r3, #20]
 800b784:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b786:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 80ba 	beq.w	800b902 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	f003 0301 	and.w	r3, r3, #1
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d11b      	bne.n	800b7d4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7a8:	7812      	ldrb	r2, [r2, #0]
 800b7aa:	b2d2      	uxtb	r2, r2
 800b7ac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7b2:	1c5a      	adds	r2, r3, #1
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b7d0:	853b      	strh	r3, [r7, #40]	; 0x28
 800b7d2:	e096      	b.n	800b902 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b7d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b7d6:	8bfb      	ldrh	r3, [r7, #30]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d24a      	bcs.n	800b872 <HAL_SPI_TransmitReceive+0x57e>
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d045      	beq.n	800b872 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7f2:	7812      	ldrb	r2, [r2, #0]
 800b7f4:	b2d2      	uxtb	r2, r2
 800b7f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7fc:	1c5a      	adds	r2, r3, #1
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b80e:	7812      	ldrb	r2, [r2, #0]
 800b810:	b2d2      	uxtb	r2, r2
 800b812:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b818:	1c5a      	adds	r2, r3, #1
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b82a:	7812      	ldrb	r2, [r2, #0]
 800b82c:	b2d2      	uxtb	r2, r2
 800b82e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b834:	1c5a      	adds	r2, r3, #1
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b846:	7812      	ldrb	r2, [r2, #0]
 800b848:	b2d2      	uxtb	r2, r2
 800b84a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	3b04      	subs	r3, #4
 800b860:	b29a      	uxth	r2, r3
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b86e:	853b      	strh	r3, [r7, #40]	; 0x28
 800b870:	e047      	b.n	800b902 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b872:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b874:	2b03      	cmp	r3, #3
 800b876:	d820      	bhi.n	800b8ba <HAL_SPI_TransmitReceive+0x5c6>
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d01b      	beq.n	800b8ba <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b88e:	7812      	ldrb	r2, [r2, #0]
 800b890:	b2d2      	uxtb	r2, r2
 800b892:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b898:	1c5a      	adds	r2, r3, #1
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b8b6:	853b      	strh	r3, [r7, #40]	; 0x28
 800b8b8:	e023      	b.n	800b902 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8ba:	f7f6 fceb 	bl	8002294 <HAL_GetTick>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d803      	bhi.n	800b8d2 <HAL_SPI_TransmitReceive+0x5de>
 800b8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d0:	d102      	bne.n	800b8d8 <HAL_SPI_TransmitReceive+0x5e4>
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d114      	bne.n	800b902 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 f845 	bl	800b968 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e02d      	b.n	800b95e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b902:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b904:	2b00      	cmp	r3, #0
 800b906:	f47f af11 	bne.w	800b72c <HAL_SPI_TransmitReceive+0x438>
 800b90a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f47f af0d 	bne.w	800b72c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b918:	2200      	movs	r2, #0
 800b91a:	2108      	movs	r1, #8
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f000 f8c3 	bl	800baa8 <SPI_WaitOnFlagUntilTimeout>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d007      	beq.n	800b938 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b92e:	f043 0220 	orr.w	r2, r3, #32
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f000 f815 	bl	800b968 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2201      	movs	r2, #1
 800b942:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b954:	2b00      	cmp	r3, #0
 800b956:	d001      	beq.n	800b95c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800b958:	2301      	movs	r3, #1
 800b95a:	e000      	b.n	800b95e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800b95c:	2300      	movs	r3, #0
  }
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3730      	adds	r7, #48	; 0x30
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop

0800b968 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	699a      	ldr	r2, [r3, #24]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f042 0208 	orr.w	r2, r2, #8
 800b986:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	699a      	ldr	r2, [r3, #24]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f042 0210 	orr.w	r2, r2, #16
 800b996:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f022 0201 	bic.w	r2, r2, #1
 800b9a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6919      	ldr	r1, [r3, #16]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	4b3c      	ldr	r3, [pc, #240]	; (800baa4 <SPI_CloseTransfer+0x13c>)
 800b9b4:	400b      	ands	r3, r1
 800b9b6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	689a      	ldr	r2, [r3, #8]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b9c6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	2b04      	cmp	r3, #4
 800b9d2:	d014      	beq.n	800b9fe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f003 0320 	and.w	r3, r3, #32
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00f      	beq.n	800b9fe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	699a      	ldr	r2, [r3, #24]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f042 0220 	orr.w	r2, r2, #32
 800b9fc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	2b03      	cmp	r3, #3
 800ba08:	d014      	beq.n	800ba34 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00f      	beq.n	800ba34 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba1a:	f043 0204 	orr.w	r2, r3, #4
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	699a      	ldr	r2, [r3, #24]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba32:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00f      	beq.n	800ba5e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba44:	f043 0201 	orr.w	r2, r3, #1
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	699a      	ldr	r2, [r3, #24]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba5c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00f      	beq.n	800ba88 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba6e:	f043 0208 	orr.w	r2, r3, #8
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	699a      	ldr	r2, [r3, #24]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba86:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ba98:	bf00      	nop
 800ba9a:	3714      	adds	r7, #20
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr
 800baa4:	fffffc90 	.word	0xfffffc90

0800baa8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	603b      	str	r3, [r7, #0]
 800bab4:	4613      	mov	r3, r2
 800bab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bab8:	e010      	b.n	800badc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800baba:	f7f6 fbeb 	bl	8002294 <HAL_GetTick>
 800babe:	4602      	mov	r2, r0
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d803      	bhi.n	800bad2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad0:	d102      	bne.n	800bad8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d101      	bne.n	800badc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bad8:	2303      	movs	r3, #3
 800bada:	e00f      	b.n	800bafc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	695a      	ldr	r2, [r3, #20]
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	4013      	ands	r3, r2
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	429a      	cmp	r2, r3
 800baea:	bf0c      	ite	eq
 800baec:	2301      	moveq	r3, #1
 800baee:	2300      	movne	r3, #0
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	461a      	mov	r2, r3
 800baf4:	79fb      	ldrb	r3, [r7, #7]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d0df      	beq.n	800baba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb10:	095b      	lsrs	r3, r3, #5
 800bb12:	3301      	adds	r3, #1
 800bb14:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	3307      	adds	r3, #7
 800bb22:	08db      	lsrs	r3, r3, #3
 800bb24:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	fb02 f303 	mul.w	r3, r2, r3
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
	...

0800bb3c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d121      	bne.n	800bb92 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	4b27      	ldr	r3, [pc, #156]	; (800bbf0 <FMC_SDRAM_Init+0xb4>)
 800bb54:	4013      	ands	r3, r2
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	6851      	ldr	r1, [r2, #4]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	6892      	ldr	r2, [r2, #8]
 800bb5e:	4311      	orrs	r1, r2
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	68d2      	ldr	r2, [r2, #12]
 800bb64:	4311      	orrs	r1, r2
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	6912      	ldr	r2, [r2, #16]
 800bb6a:	4311      	orrs	r1, r2
 800bb6c:	683a      	ldr	r2, [r7, #0]
 800bb6e:	6952      	ldr	r2, [r2, #20]
 800bb70:	4311      	orrs	r1, r2
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	6992      	ldr	r2, [r2, #24]
 800bb76:	4311      	orrs	r1, r2
 800bb78:	683a      	ldr	r2, [r7, #0]
 800bb7a:	69d2      	ldr	r2, [r2, #28]
 800bb7c:	4311      	orrs	r1, r2
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	6a12      	ldr	r2, [r2, #32]
 800bb82:	4311      	orrs	r1, r2
 800bb84:	683a      	ldr	r2, [r7, #0]
 800bb86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bb88:	430a      	orrs	r2, r1
 800bb8a:	431a      	orrs	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	601a      	str	r2, [r3, #0]
 800bb90:	e026      	b.n	800bbe0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	69d9      	ldr	r1, [r3, #28]
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	6a1b      	ldr	r3, [r3, #32]
 800bba2:	4319      	orrs	r1, r3
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba8:	430b      	orrs	r3, r1
 800bbaa:	431a      	orrs	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	4b0e      	ldr	r3, [pc, #56]	; (800bbf0 <FMC_SDRAM_Init+0xb4>)
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	683a      	ldr	r2, [r7, #0]
 800bbba:	6851      	ldr	r1, [r2, #4]
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	6892      	ldr	r2, [r2, #8]
 800bbc0:	4311      	orrs	r1, r2
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	68d2      	ldr	r2, [r2, #12]
 800bbc6:	4311      	orrs	r1, r2
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	6912      	ldr	r2, [r2, #16]
 800bbcc:	4311      	orrs	r1, r2
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	6952      	ldr	r2, [r2, #20]
 800bbd2:	4311      	orrs	r1, r2
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	6992      	ldr	r2, [r2, #24]
 800bbd8:	430a      	orrs	r2, r1
 800bbda:	431a      	orrs	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	370c      	adds	r7, #12
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	ffff8000 	.word	0xffff8000

0800bbf4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d128      	bne.n	800bc58 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	1e59      	subs	r1, r3, #1
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	3b01      	subs	r3, #1
 800bc1a:	011b      	lsls	r3, r3, #4
 800bc1c:	4319      	orrs	r1, r3
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	3b01      	subs	r3, #1
 800bc24:	021b      	lsls	r3, r3, #8
 800bc26:	4319      	orrs	r1, r3
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	031b      	lsls	r3, r3, #12
 800bc30:	4319      	orrs	r1, r3
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	3b01      	subs	r3, #1
 800bc38:	041b      	lsls	r3, r3, #16
 800bc3a:	4319      	orrs	r1, r3
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	3b01      	subs	r3, #1
 800bc42:	051b      	lsls	r3, r3, #20
 800bc44:	4319      	orrs	r1, r3
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	699b      	ldr	r3, [r3, #24]
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	061b      	lsls	r3, r3, #24
 800bc4e:	430b      	orrs	r3, r1
 800bc50:	431a      	orrs	r2, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	609a      	str	r2, [r3, #8]
 800bc56:	e02d      	b.n	800bcb4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	689a      	ldr	r2, [r3, #8]
 800bc5c:	4b19      	ldr	r3, [pc, #100]	; (800bcc4 <FMC_SDRAM_Timing_Init+0xd0>)
 800bc5e:	4013      	ands	r3, r2
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	68d2      	ldr	r2, [r2, #12]
 800bc64:	3a01      	subs	r2, #1
 800bc66:	0311      	lsls	r1, r2, #12
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	6952      	ldr	r2, [r2, #20]
 800bc6c:	3a01      	subs	r2, #1
 800bc6e:	0512      	lsls	r2, r2, #20
 800bc70:	430a      	orrs	r2, r1
 800bc72:	431a      	orrs	r2, r3
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	1e59      	subs	r1, r3, #1
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	011b      	lsls	r3, r3, #4
 800bc8e:	4319      	orrs	r1, r3
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	3b01      	subs	r3, #1
 800bc96:	021b      	lsls	r3, r3, #8
 800bc98:	4319      	orrs	r1, r3
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	041b      	lsls	r3, r3, #16
 800bca2:	4319      	orrs	r1, r3
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	699b      	ldr	r3, [r3, #24]
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	061b      	lsls	r3, r3, #24
 800bcac:	430b      	orrs	r3, r1
 800bcae:	431a      	orrs	r2, r3
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	ff0f0fff 	.word	0xff0f0fff

0800bcc8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	691a      	ldr	r2, [r3, #16]
 800bcd8:	4b0c      	ldr	r3, [pc, #48]	; (800bd0c <FMC_SDRAM_SendCommand+0x44>)
 800bcda:	4013      	ands	r3, r2
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	6811      	ldr	r1, [r2, #0]
 800bce0:	68ba      	ldr	r2, [r7, #8]
 800bce2:	6852      	ldr	r2, [r2, #4]
 800bce4:	4311      	orrs	r1, r2
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	6892      	ldr	r2, [r2, #8]
 800bcea:	3a01      	subs	r2, #1
 800bcec:	0152      	lsls	r2, r2, #5
 800bcee:	4311      	orrs	r1, r2
 800bcf0:	68ba      	ldr	r2, [r7, #8]
 800bcf2:	68d2      	ldr	r2, [r2, #12]
 800bcf4:	0252      	lsls	r2, r2, #9
 800bcf6:	430a      	orrs	r2, r1
 800bcf8:	431a      	orrs	r2, r3
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3714      	adds	r7, #20
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr
 800bd0c:	ffc00000 	.word	0xffc00000

0800bd10 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	695a      	ldr	r2, [r3, #20]
 800bd1e:	4b07      	ldr	r3, [pc, #28]	; (800bd3c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800bd20:	4013      	ands	r3, r2
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	0052      	lsls	r2, r2, #1
 800bd26:	431a      	orrs	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	ffffc001 	.word	0xffffc001

0800bd40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd40:	b084      	sub	sp, #16
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b084      	sub	sp, #16
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	f107 001c 	add.w	r0, r7, #28
 800bd4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d121      	bne.n	800bd9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	68da      	ldr	r2, [r3, #12]
 800bd6a:	4b2c      	ldr	r3, [pc, #176]	; (800be1c <USB_CoreInit+0xdc>)
 800bd6c:	4013      	ands	r3, r2
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bd7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d105      	bne.n	800bd92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f001 fa1a 	bl	800d1cc <USB_CoreReset>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	73fb      	strb	r3, [r7, #15]
 800bd9c:	e01b      	b.n	800bdd6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f001 fa0e 	bl	800d1cc <USB_CoreReset>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bdb4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d106      	bne.n	800bdca <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	639a      	str	r2, [r3, #56]	; 0x38
 800bdc8:	e005      	b.n	800bdd6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bdd6:	7fbb      	ldrb	r3, [r7, #30]
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d116      	bne.n	800be0a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bde0:	b29a      	uxth	r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bdea:	4b0d      	ldr	r3, [pc, #52]	; (800be20 <USB_CoreInit+0xe0>)
 800bdec:	4313      	orrs	r3, r2
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	f043 0206 	orr.w	r2, r3, #6
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	f043 0220 	orr.w	r2, r3, #32
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800be0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be16:	b004      	add	sp, #16
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	ffbdffbf 	.word	0xffbdffbf
 800be20:	03ee0000 	.word	0x03ee0000

0800be24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800be24:	b480      	push	{r7}
 800be26:	b087      	sub	sp, #28
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	4613      	mov	r3, r2
 800be30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800be32:	79fb      	ldrb	r3, [r7, #7]
 800be34:	2b02      	cmp	r3, #2
 800be36:	d165      	bne.n	800bf04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	4a41      	ldr	r2, [pc, #260]	; (800bf40 <USB_SetTurnaroundTime+0x11c>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d906      	bls.n	800be4e <USB_SetTurnaroundTime+0x2a>
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	4a40      	ldr	r2, [pc, #256]	; (800bf44 <USB_SetTurnaroundTime+0x120>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d202      	bcs.n	800be4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800be48:	230f      	movs	r3, #15
 800be4a:	617b      	str	r3, [r7, #20]
 800be4c:	e062      	b.n	800bf14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	4a3c      	ldr	r2, [pc, #240]	; (800bf44 <USB_SetTurnaroundTime+0x120>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d306      	bcc.n	800be64 <USB_SetTurnaroundTime+0x40>
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	4a3b      	ldr	r2, [pc, #236]	; (800bf48 <USB_SetTurnaroundTime+0x124>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d202      	bcs.n	800be64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800be5e:	230e      	movs	r3, #14
 800be60:	617b      	str	r3, [r7, #20]
 800be62:	e057      	b.n	800bf14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	4a38      	ldr	r2, [pc, #224]	; (800bf48 <USB_SetTurnaroundTime+0x124>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d306      	bcc.n	800be7a <USB_SetTurnaroundTime+0x56>
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	4a37      	ldr	r2, [pc, #220]	; (800bf4c <USB_SetTurnaroundTime+0x128>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d202      	bcs.n	800be7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800be74:	230d      	movs	r3, #13
 800be76:	617b      	str	r3, [r7, #20]
 800be78:	e04c      	b.n	800bf14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	4a33      	ldr	r2, [pc, #204]	; (800bf4c <USB_SetTurnaroundTime+0x128>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d306      	bcc.n	800be90 <USB_SetTurnaroundTime+0x6c>
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	4a32      	ldr	r2, [pc, #200]	; (800bf50 <USB_SetTurnaroundTime+0x12c>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d802      	bhi.n	800be90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800be8a:	230c      	movs	r3, #12
 800be8c:	617b      	str	r3, [r7, #20]
 800be8e:	e041      	b.n	800bf14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	4a2f      	ldr	r2, [pc, #188]	; (800bf50 <USB_SetTurnaroundTime+0x12c>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d906      	bls.n	800bea6 <USB_SetTurnaroundTime+0x82>
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	4a2e      	ldr	r2, [pc, #184]	; (800bf54 <USB_SetTurnaroundTime+0x130>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d802      	bhi.n	800bea6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bea0:	230b      	movs	r3, #11
 800bea2:	617b      	str	r3, [r7, #20]
 800bea4:	e036      	b.n	800bf14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	4a2a      	ldr	r2, [pc, #168]	; (800bf54 <USB_SetTurnaroundTime+0x130>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d906      	bls.n	800bebc <USB_SetTurnaroundTime+0x98>
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	4a29      	ldr	r2, [pc, #164]	; (800bf58 <USB_SetTurnaroundTime+0x134>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d802      	bhi.n	800bebc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800beb6:	230a      	movs	r3, #10
 800beb8:	617b      	str	r3, [r7, #20]
 800beba:	e02b      	b.n	800bf14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	4a26      	ldr	r2, [pc, #152]	; (800bf58 <USB_SetTurnaroundTime+0x134>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d906      	bls.n	800bed2 <USB_SetTurnaroundTime+0xae>
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	4a25      	ldr	r2, [pc, #148]	; (800bf5c <USB_SetTurnaroundTime+0x138>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d202      	bcs.n	800bed2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800becc:	2309      	movs	r3, #9
 800bece:	617b      	str	r3, [r7, #20]
 800bed0:	e020      	b.n	800bf14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	4a21      	ldr	r2, [pc, #132]	; (800bf5c <USB_SetTurnaroundTime+0x138>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d306      	bcc.n	800bee8 <USB_SetTurnaroundTime+0xc4>
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	4a20      	ldr	r2, [pc, #128]	; (800bf60 <USB_SetTurnaroundTime+0x13c>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d802      	bhi.n	800bee8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bee2:	2308      	movs	r3, #8
 800bee4:	617b      	str	r3, [r7, #20]
 800bee6:	e015      	b.n	800bf14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	4a1d      	ldr	r2, [pc, #116]	; (800bf60 <USB_SetTurnaroundTime+0x13c>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d906      	bls.n	800befe <USB_SetTurnaroundTime+0xda>
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	4a1c      	ldr	r2, [pc, #112]	; (800bf64 <USB_SetTurnaroundTime+0x140>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d202      	bcs.n	800befe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bef8:	2307      	movs	r3, #7
 800befa:	617b      	str	r3, [r7, #20]
 800befc:	e00a      	b.n	800bf14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800befe:	2306      	movs	r3, #6
 800bf00:	617b      	str	r3, [r7, #20]
 800bf02:	e007      	b.n	800bf14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bf04:	79fb      	ldrb	r3, [r7, #7]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d102      	bne.n	800bf10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bf0a:	2309      	movs	r3, #9
 800bf0c:	617b      	str	r3, [r7, #20]
 800bf0e:	e001      	b.n	800bf14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bf10:	2309      	movs	r3, #9
 800bf12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	68da      	ldr	r2, [r3, #12]
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	029b      	lsls	r3, r3, #10
 800bf28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bf2c:	431a      	orrs	r2, r3
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	371c      	adds	r7, #28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	00d8acbf 	.word	0x00d8acbf
 800bf44:	00e4e1c0 	.word	0x00e4e1c0
 800bf48:	00f42400 	.word	0x00f42400
 800bf4c:	01067380 	.word	0x01067380
 800bf50:	011a499f 	.word	0x011a499f
 800bf54:	01312cff 	.word	0x01312cff
 800bf58:	014ca43f 	.word	0x014ca43f
 800bf5c:	016e3600 	.word	0x016e3600
 800bf60:	01a6ab1f 	.word	0x01a6ab1f
 800bf64:	01e84800 	.word	0x01e84800

0800bf68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	f043 0201 	orr.w	r2, r3, #1
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	370c      	adds	r7, #12
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf8a:	b480      	push	{r7}
 800bf8c:	b083      	sub	sp, #12
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	f023 0201 	bic.w	r2, r3, #1
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bfc8:	78fb      	ldrb	r3, [r7, #3]
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d115      	bne.n	800bffa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bfda:	200a      	movs	r0, #10
 800bfdc:	f7f6 f966 	bl	80022ac <HAL_Delay>
      ms += 10U;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	330a      	adds	r3, #10
 800bfe4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f001 f85f 	bl	800d0aa <USB_GetMode>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d01e      	beq.n	800c030 <USB_SetCurrentMode+0x84>
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2bc7      	cmp	r3, #199	; 0xc7
 800bff6:	d9f0      	bls.n	800bfda <USB_SetCurrentMode+0x2e>
 800bff8:	e01a      	b.n	800c030 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bffa:	78fb      	ldrb	r3, [r7, #3]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d115      	bne.n	800c02c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c00c:	200a      	movs	r0, #10
 800c00e:	f7f6 f94d 	bl	80022ac <HAL_Delay>
      ms += 10U;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	330a      	adds	r3, #10
 800c016:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f001 f846 	bl	800d0aa <USB_GetMode>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d005      	beq.n	800c030 <USB_SetCurrentMode+0x84>
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2bc7      	cmp	r3, #199	; 0xc7
 800c028:	d9f0      	bls.n	800c00c <USB_SetCurrentMode+0x60>
 800c02a:	e001      	b.n	800c030 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c02c:	2301      	movs	r3, #1
 800c02e:	e005      	b.n	800c03c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2bc8      	cmp	r3, #200	; 0xc8
 800c034:	d101      	bne.n	800c03a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c036:	2301      	movs	r3, #1
 800c038:	e000      	b.n	800c03c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c044:	b084      	sub	sp, #16
 800c046:	b580      	push	{r7, lr}
 800c048:	b086      	sub	sp, #24
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c056:	2300      	movs	r3, #0
 800c058:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c05e:	2300      	movs	r3, #0
 800c060:	613b      	str	r3, [r7, #16]
 800c062:	e009      	b.n	800c078 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	3340      	adds	r3, #64	; 0x40
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	4413      	add	r3, r2
 800c06e:	2200      	movs	r2, #0
 800c070:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	3301      	adds	r3, #1
 800c076:	613b      	str	r3, [r7, #16]
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	2b0e      	cmp	r3, #14
 800c07c:	d9f2      	bls.n	800c064 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c07e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c082:	2b00      	cmp	r3, #0
 800c084:	d11c      	bne.n	800c0c0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c094:	f043 0302 	orr.w	r3, r3, #2
 800c098:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c09e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	601a      	str	r2, [r3, #0]
 800c0be:	e005      	b.n	800c0cc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c0d8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d10d      	bne.n	800c0fc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d104      	bne.n	800c0f2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f968 	bl	800c3c0 <USB_SetDevSpeed>
 800c0f0:	e008      	b.n	800c104 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c0f2:	2101      	movs	r1, #1
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f963 	bl	800c3c0 <USB_SetDevSpeed>
 800c0fa:	e003      	b.n	800c104 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c0fc:	2103      	movs	r1, #3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f95e 	bl	800c3c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c104:	2110      	movs	r1, #16
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f8fa 	bl	800c300 <USB_FlushTxFifo>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d001      	beq.n	800c116 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 f924 	bl	800c364 <USB_FlushRxFifo>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d001      	beq.n	800c126 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c122:	2301      	movs	r3, #1
 800c124:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c12c:	461a      	mov	r2, r3
 800c12e:	2300      	movs	r3, #0
 800c130:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c138:	461a      	mov	r2, r3
 800c13a:	2300      	movs	r3, #0
 800c13c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c144:	461a      	mov	r2, r3
 800c146:	2300      	movs	r3, #0
 800c148:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c14a:	2300      	movs	r3, #0
 800c14c:	613b      	str	r3, [r7, #16]
 800c14e:	e043      	b.n	800c1d8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	015a      	lsls	r2, r3, #5
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	4413      	add	r3, r2
 800c158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c166:	d118      	bne.n	800c19a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d10a      	bne.n	800c184 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	015a      	lsls	r2, r3, #5
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	4413      	add	r3, r2
 800c176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c17a:	461a      	mov	r2, r3
 800c17c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c180:	6013      	str	r3, [r2, #0]
 800c182:	e013      	b.n	800c1ac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	015a      	lsls	r2, r3, #5
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	4413      	add	r3, r2
 800c18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c190:	461a      	mov	r2, r3
 800c192:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c196:	6013      	str	r3, [r2, #0]
 800c198:	e008      	b.n	800c1ac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	015a      	lsls	r2, r3, #5
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	015a      	lsls	r2, r3, #5
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	015a      	lsls	r2, r3, #5
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c1d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	613b      	str	r3, [r7, #16]
 800c1d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1dc:	461a      	mov	r2, r3
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d3b5      	bcc.n	800c150 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	613b      	str	r3, [r7, #16]
 800c1e8:	e043      	b.n	800c272 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	015a      	lsls	r2, r3, #5
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c200:	d118      	bne.n	800c234 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10a      	bne.n	800c21e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	015a      	lsls	r2, r3, #5
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	4413      	add	r3, r2
 800c210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c214:	461a      	mov	r2, r3
 800c216:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c21a:	6013      	str	r3, [r2, #0]
 800c21c:	e013      	b.n	800c246 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	015a      	lsls	r2, r3, #5
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	4413      	add	r3, r2
 800c226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c22a:	461a      	mov	r2, r3
 800c22c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c230:	6013      	str	r3, [r2, #0]
 800c232:	e008      	b.n	800c246 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	015a      	lsls	r2, r3, #5
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	4413      	add	r3, r2
 800c23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c240:	461a      	mov	r2, r3
 800c242:	2300      	movs	r3, #0
 800c244:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	015a      	lsls	r2, r3, #5
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	4413      	add	r3, r2
 800c24e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c252:	461a      	mov	r2, r3
 800c254:	2300      	movs	r3, #0
 800c256:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	015a      	lsls	r2, r3, #5
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	4413      	add	r3, r2
 800c260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c264:	461a      	mov	r2, r3
 800c266:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c26a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	3301      	adds	r3, #1
 800c270:	613b      	str	r3, [r7, #16]
 800c272:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c276:	461a      	mov	r2, r3
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d3b5      	bcc.n	800c1ea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c284:	691b      	ldr	r3, [r3, #16]
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c28c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c290:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c29e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c2a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d105      	bne.n	800c2b4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	699b      	ldr	r3, [r3, #24]
 800c2ac:	f043 0210 	orr.w	r2, r3, #16
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	699a      	ldr	r2, [r3, #24]
 800c2b8:	4b0f      	ldr	r3, [pc, #60]	; (800c2f8 <USB_DevInit+0x2b4>)
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c2c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d005      	beq.n	800c2d4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	699b      	ldr	r3, [r3, #24]
 800c2cc:	f043 0208 	orr.w	r2, r3, #8
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c2d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d105      	bne.n	800c2e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	699a      	ldr	r2, [r3, #24]
 800c2e0:	4b06      	ldr	r3, [pc, #24]	; (800c2fc <USB_DevInit+0x2b8>)
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3718      	adds	r7, #24
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2f4:	b004      	add	sp, #16
 800c2f6:	4770      	bx	lr
 800c2f8:	803c3800 	.word	0x803c3800
 800c2fc:	40000004 	.word	0x40000004

0800c300 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c30a:	2300      	movs	r3, #0
 800c30c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3301      	adds	r3, #1
 800c312:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c31a:	d901      	bls.n	800c320 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c31c:	2303      	movs	r3, #3
 800c31e:	e01b      	b.n	800c358 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	691b      	ldr	r3, [r3, #16]
 800c324:	2b00      	cmp	r3, #0
 800c326:	daf2      	bge.n	800c30e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c328:	2300      	movs	r3, #0
 800c32a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	019b      	lsls	r3, r3, #6
 800c330:	f043 0220 	orr.w	r2, r3, #32
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	3301      	adds	r3, #1
 800c33c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c344:	d901      	bls.n	800c34a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c346:	2303      	movs	r3, #3
 800c348:	e006      	b.n	800c358 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	f003 0320 	and.w	r3, r3, #32
 800c352:	2b20      	cmp	r3, #32
 800c354:	d0f0      	beq.n	800c338 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3714      	adds	r7, #20
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c36c:	2300      	movs	r3, #0
 800c36e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	3301      	adds	r3, #1
 800c374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c37c:	d901      	bls.n	800c382 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c37e:	2303      	movs	r3, #3
 800c380:	e018      	b.n	800c3b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	2b00      	cmp	r3, #0
 800c388:	daf2      	bge.n	800c370 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c38a:	2300      	movs	r3, #0
 800c38c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2210      	movs	r2, #16
 800c392:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	3301      	adds	r3, #1
 800c398:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c3a0:	d901      	bls.n	800c3a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c3a2:	2303      	movs	r3, #3
 800c3a4:	e006      	b.n	800c3b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	691b      	ldr	r3, [r3, #16]
 800c3aa:	f003 0310 	and.w	r3, r3, #16
 800c3ae:	2b10      	cmp	r3, #16
 800c3b0:	d0f0      	beq.n	800c394 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c3b2:	2300      	movs	r3, #0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3714      	adds	r7, #20
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	78fb      	ldrb	r3, [r7, #3]
 800c3da:	68f9      	ldr	r1, [r7, #12]
 800c3dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c3f2:	b480      	push	{r7}
 800c3f4:	b087      	sub	sp, #28
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	f003 0306 	and.w	r3, r3, #6
 800c40a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d102      	bne.n	800c418 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c412:	2300      	movs	r3, #0
 800c414:	75fb      	strb	r3, [r7, #23]
 800c416:	e00a      	b.n	800c42e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d002      	beq.n	800c424 <USB_GetDevSpeed+0x32>
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2b06      	cmp	r3, #6
 800c422:	d102      	bne.n	800c42a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c424:	2302      	movs	r3, #2
 800c426:	75fb      	strb	r3, [r7, #23]
 800c428:	e001      	b.n	800c42e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c42a:	230f      	movs	r3, #15
 800c42c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c42e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c430:	4618      	mov	r0, r3
 800c432:	371c      	adds	r7, #28
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	785b      	ldrb	r3, [r3, #1]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d139      	bne.n	800c4cc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c45e:	69da      	ldr	r2, [r3, #28]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	f003 030f 	and.w	r3, r3, #15
 800c468:	2101      	movs	r1, #1
 800c46a:	fa01 f303 	lsl.w	r3, r1, r3
 800c46e:	b29b      	uxth	r3, r3
 800c470:	68f9      	ldr	r1, [r7, #12]
 800c472:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c476:	4313      	orrs	r3, r2
 800c478:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	015a      	lsls	r2, r3, #5
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	4413      	add	r3, r2
 800c482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d153      	bne.n	800c538 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	015a      	lsls	r2, r3, #5
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	4413      	add	r3, r2
 800c498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	791b      	ldrb	r3, [r3, #4]
 800c4aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	059b      	lsls	r3, r3, #22
 800c4b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4b4:	431a      	orrs	r2, r3
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	0159      	lsls	r1, r3, #5
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	440b      	add	r3, r1
 800c4be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	4b20      	ldr	r3, [pc, #128]	; (800c548 <USB_ActivateEndpoint+0x10c>)
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	600b      	str	r3, [r1, #0]
 800c4ca:	e035      	b.n	800c538 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4d2:	69da      	ldr	r2, [r3, #28]
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	f003 030f 	and.w	r3, r3, #15
 800c4dc:	2101      	movs	r1, #1
 800c4de:	fa01 f303 	lsl.w	r3, r1, r3
 800c4e2:	041b      	lsls	r3, r3, #16
 800c4e4:	68f9      	ldr	r1, [r7, #12]
 800c4e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	015a      	lsls	r2, r3, #5
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c500:	2b00      	cmp	r3, #0
 800c502:	d119      	bne.n	800c538 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	015a      	lsls	r2, r3, #5
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	4413      	add	r3, r2
 800c50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	791b      	ldrb	r3, [r3, #4]
 800c51e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c520:	430b      	orrs	r3, r1
 800c522:	431a      	orrs	r2, r3
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	0159      	lsls	r1, r3, #5
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	440b      	add	r3, r1
 800c52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c530:	4619      	mov	r1, r3
 800c532:	4b05      	ldr	r3, [pc, #20]	; (800c548 <USB_ActivateEndpoint+0x10c>)
 800c534:	4313      	orrs	r3, r2
 800c536:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3714      	adds	r7, #20
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	10008000 	.word	0x10008000

0800c54c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08a      	sub	sp, #40	; 0x28
 800c550:	af02      	add	r7, sp, #8
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	4613      	mov	r3, r2
 800c558:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	785b      	ldrb	r3, [r3, #1]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	f040 8181 	bne.w	800c870 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d132      	bne.n	800c5dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	015a      	lsls	r2, r3, #5
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	4413      	add	r3, r2
 800c57e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c582:	691a      	ldr	r2, [r3, #16]
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	0159      	lsls	r1, r3, #5
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	440b      	add	r3, r1
 800c58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c590:	4619      	mov	r1, r3
 800c592:	4ba5      	ldr	r3, [pc, #660]	; (800c828 <USB_EPStartXfer+0x2dc>)
 800c594:	4013      	ands	r3, r2
 800c596:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	015a      	lsls	r2, r3, #5
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	69ba      	ldr	r2, [r7, #24]
 800c5a8:	0151      	lsls	r1, r2, #5
 800c5aa:	69fa      	ldr	r2, [r7, #28]
 800c5ac:	440a      	add	r2, r1
 800c5ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c5b8:	69bb      	ldr	r3, [r7, #24]
 800c5ba:	015a      	lsls	r2, r3, #5
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	4413      	add	r3, r2
 800c5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c4:	691a      	ldr	r2, [r3, #16]
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	0159      	lsls	r1, r3, #5
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	440b      	add	r3, r1
 800c5ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4b95      	ldr	r3, [pc, #596]	; (800c82c <USB_EPStartXfer+0x2e0>)
 800c5d6:	4013      	ands	r3, r2
 800c5d8:	610b      	str	r3, [r1, #16]
 800c5da:	e092      	b.n	800c702 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	015a      	lsls	r2, r3, #5
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e8:	691a      	ldr	r2, [r3, #16]
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	0159      	lsls	r1, r3, #5
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	440b      	add	r3, r1
 800c5f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	4b8c      	ldr	r3, [pc, #560]	; (800c82c <USB_EPStartXfer+0x2e0>)
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	015a      	lsls	r2, r3, #5
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	4413      	add	r3, r2
 800c606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c60a:	691a      	ldr	r2, [r3, #16]
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	0159      	lsls	r1, r3, #5
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	440b      	add	r3, r1
 800c614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c618:	4619      	mov	r1, r3
 800c61a:	4b83      	ldr	r3, [pc, #524]	; (800c828 <USB_EPStartXfer+0x2dc>)
 800c61c:	4013      	ands	r3, r2
 800c61e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d11a      	bne.n	800c65c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	691a      	ldr	r2, [r3, #16]
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d903      	bls.n	800c63a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	689a      	ldr	r2, [r3, #8]
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	015a      	lsls	r2, r3, #5
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	4413      	add	r3, r2
 800c642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	69ba      	ldr	r2, [r7, #24]
 800c64a:	0151      	lsls	r1, r2, #5
 800c64c:	69fa      	ldr	r2, [r7, #28]
 800c64e:	440a      	add	r2, r1
 800c650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c658:	6113      	str	r3, [r2, #16]
 800c65a:	e01b      	b.n	800c694 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	015a      	lsls	r2, r3, #5
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	4413      	add	r3, r2
 800c664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c668:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	6919      	ldr	r1, [r3, #16]
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	689b      	ldr	r3, [r3, #8]
 800c672:	440b      	add	r3, r1
 800c674:	1e59      	subs	r1, r3, #1
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	689b      	ldr	r3, [r3, #8]
 800c67a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c67e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c680:	4b6b      	ldr	r3, [pc, #428]	; (800c830 <USB_EPStartXfer+0x2e4>)
 800c682:	400b      	ands	r3, r1
 800c684:	69b9      	ldr	r1, [r7, #24]
 800c686:	0148      	lsls	r0, r1, #5
 800c688:	69f9      	ldr	r1, [r7, #28]
 800c68a:	4401      	add	r1, r0
 800c68c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c690:	4313      	orrs	r3, r2
 800c692:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	015a      	lsls	r2, r3, #5
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	4413      	add	r3, r2
 800c69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6a0:	691a      	ldr	r2, [r3, #16]
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6aa:	69b9      	ldr	r1, [r7, #24]
 800c6ac:	0148      	lsls	r0, r1, #5
 800c6ae:	69f9      	ldr	r1, [r7, #28]
 800c6b0:	4401      	add	r1, r0
 800c6b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	791b      	ldrb	r3, [r3, #4]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d11f      	bne.n	800c702 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	015a      	lsls	r2, r3, #5
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	69ba      	ldr	r2, [r7, #24]
 800c6d2:	0151      	lsls	r1, r2, #5
 800c6d4:	69fa      	ldr	r2, [r7, #28]
 800c6d6:	440a      	add	r2, r1
 800c6d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c6e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	015a      	lsls	r2, r3, #5
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	69ba      	ldr	r2, [r7, #24]
 800c6f2:	0151      	lsls	r1, r2, #5
 800c6f4:	69fa      	ldr	r2, [r7, #28]
 800c6f6:	440a      	add	r2, r1
 800c6f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c700:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c702:	79fb      	ldrb	r3, [r7, #7]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d14b      	bne.n	800c7a0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	69db      	ldr	r3, [r3, #28]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d009      	beq.n	800c724 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	015a      	lsls	r2, r3, #5
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	4413      	add	r3, r2
 800c718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c71c:	461a      	mov	r2, r3
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	69db      	ldr	r3, [r3, #28]
 800c722:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	791b      	ldrb	r3, [r3, #4]
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d128      	bne.n	800c77e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d110      	bne.n	800c75e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	015a      	lsls	r2, r3, #5
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	4413      	add	r3, r2
 800c744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	69ba      	ldr	r2, [r7, #24]
 800c74c:	0151      	lsls	r1, r2, #5
 800c74e:	69fa      	ldr	r2, [r7, #28]
 800c750:	440a      	add	r2, r1
 800c752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c756:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c75a:	6013      	str	r3, [r2, #0]
 800c75c:	e00f      	b.n	800c77e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	015a      	lsls	r2, r3, #5
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	4413      	add	r3, r2
 800c766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	69ba      	ldr	r2, [r7, #24]
 800c76e:	0151      	lsls	r1, r2, #5
 800c770:	69fa      	ldr	r2, [r7, #28]
 800c772:	440a      	add	r2, r1
 800c774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c77c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	015a      	lsls	r2, r3, #5
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	4413      	add	r3, r2
 800c786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	69ba      	ldr	r2, [r7, #24]
 800c78e:	0151      	lsls	r1, r2, #5
 800c790:	69fa      	ldr	r2, [r7, #28]
 800c792:	440a      	add	r2, r1
 800c794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c798:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c79c:	6013      	str	r3, [r2, #0]
 800c79e:	e16a      	b.n	800ca76 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	015a      	lsls	r2, r3, #5
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	69ba      	ldr	r2, [r7, #24]
 800c7b0:	0151      	lsls	r1, r2, #5
 800c7b2:	69fa      	ldr	r2, [r7, #28]
 800c7b4:	440a      	add	r2, r1
 800c7b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c7be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	791b      	ldrb	r3, [r3, #4]
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d015      	beq.n	800c7f4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	691b      	ldr	r3, [r3, #16]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f000 8152 	beq.w	800ca76 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	f003 030f 	and.w	r3, r3, #15
 800c7e2:	2101      	movs	r1, #1
 800c7e4:	fa01 f303 	lsl.w	r3, r1, r3
 800c7e8:	69f9      	ldr	r1, [r7, #28]
 800c7ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	634b      	str	r3, [r1, #52]	; 0x34
 800c7f2:	e140      	b.n	800ca76 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c800:	2b00      	cmp	r3, #0
 800c802:	d117      	bne.n	800c834 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	015a      	lsls	r2, r3, #5
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	4413      	add	r3, r2
 800c80c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	69ba      	ldr	r2, [r7, #24]
 800c814:	0151      	lsls	r1, r2, #5
 800c816:	69fa      	ldr	r2, [r7, #28]
 800c818:	440a      	add	r2, r1
 800c81a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c81e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c822:	6013      	str	r3, [r2, #0]
 800c824:	e016      	b.n	800c854 <USB_EPStartXfer+0x308>
 800c826:	bf00      	nop
 800c828:	e007ffff 	.word	0xe007ffff
 800c82c:	fff80000 	.word	0xfff80000
 800c830:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	015a      	lsls	r2, r3, #5
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	4413      	add	r3, r2
 800c83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	69ba      	ldr	r2, [r7, #24]
 800c844:	0151      	lsls	r1, r2, #5
 800c846:	69fa      	ldr	r2, [r7, #28]
 800c848:	440a      	add	r2, r1
 800c84a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c84e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c852:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	68d9      	ldr	r1, [r3, #12]
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	781a      	ldrb	r2, [r3, #0]
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	b298      	uxth	r0, r3
 800c862:	79fb      	ldrb	r3, [r7, #7]
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	4603      	mov	r3, r0
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f000 f9b9 	bl	800cbe0 <USB_WritePacket>
 800c86e:	e102      	b.n	800ca76 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	015a      	lsls	r2, r3, #5
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	4413      	add	r3, r2
 800c878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c87c:	691a      	ldr	r2, [r3, #16]
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	0159      	lsls	r1, r3, #5
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	440b      	add	r3, r1
 800c886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c88a:	4619      	mov	r1, r3
 800c88c:	4b7c      	ldr	r3, [pc, #496]	; (800ca80 <USB_EPStartXfer+0x534>)
 800c88e:	4013      	ands	r3, r2
 800c890:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	015a      	lsls	r2, r3, #5
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	4413      	add	r3, r2
 800c89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c89e:	691a      	ldr	r2, [r3, #16]
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	0159      	lsls	r1, r3, #5
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	440b      	add	r3, r1
 800c8a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4b75      	ldr	r3, [pc, #468]	; (800ca84 <USB_EPStartXfer+0x538>)
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d12f      	bne.n	800c91a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d003      	beq.n	800c8ca <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	689a      	ldr	r2, [r3, #8]
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	689a      	ldr	r2, [r3, #8]
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	015a      	lsls	r2, r3, #5
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	4413      	add	r3, r2
 800c8da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8de:	691a      	ldr	r2, [r3, #16]
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	6a1b      	ldr	r3, [r3, #32]
 800c8e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8e8:	69b9      	ldr	r1, [r7, #24]
 800c8ea:	0148      	lsls	r0, r1, #5
 800c8ec:	69f9      	ldr	r1, [r7, #28]
 800c8ee:	4401      	add	r1, r0
 800c8f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	015a      	lsls	r2, r3, #5
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	4413      	add	r3, r2
 800c900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c904:	691b      	ldr	r3, [r3, #16]
 800c906:	69ba      	ldr	r2, [r7, #24]
 800c908:	0151      	lsls	r1, r2, #5
 800c90a:	69fa      	ldr	r2, [r7, #28]
 800c90c:	440a      	add	r2, r1
 800c90e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c912:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c916:	6113      	str	r3, [r2, #16]
 800c918:	e05f      	b.n	800c9da <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d123      	bne.n	800c96a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	015a      	lsls	r2, r3, #5
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	4413      	add	r3, r2
 800c92a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c92e:	691a      	ldr	r2, [r3, #16]
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c938:	69b9      	ldr	r1, [r7, #24]
 800c93a:	0148      	lsls	r0, r1, #5
 800c93c:	69f9      	ldr	r1, [r7, #28]
 800c93e:	4401      	add	r1, r0
 800c940:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c944:	4313      	orrs	r3, r2
 800c946:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	015a      	lsls	r2, r3, #5
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	4413      	add	r3, r2
 800c950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	69ba      	ldr	r2, [r7, #24]
 800c958:	0151      	lsls	r1, r2, #5
 800c95a:	69fa      	ldr	r2, [r7, #28]
 800c95c:	440a      	add	r2, r1
 800c95e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c962:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c966:	6113      	str	r3, [r2, #16]
 800c968:	e037      	b.n	800c9da <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	691a      	ldr	r2, [r3, #16]
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	4413      	add	r3, r2
 800c974:	1e5a      	subs	r2, r3, #1
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c97e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	8afa      	ldrh	r2, [r7, #22]
 800c986:	fb03 f202 	mul.w	r2, r3, r2
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	015a      	lsls	r2, r3, #5
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	4413      	add	r3, r2
 800c996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c99a:	691a      	ldr	r2, [r3, #16]
 800c99c:	8afb      	ldrh	r3, [r7, #22]
 800c99e:	04d9      	lsls	r1, r3, #19
 800c9a0:	4b39      	ldr	r3, [pc, #228]	; (800ca88 <USB_EPStartXfer+0x53c>)
 800c9a2:	400b      	ands	r3, r1
 800c9a4:	69b9      	ldr	r1, [r7, #24]
 800c9a6:	0148      	lsls	r0, r1, #5
 800c9a8:	69f9      	ldr	r1, [r7, #28]
 800c9aa:	4401      	add	r1, r0
 800c9ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	015a      	lsls	r2, r3, #5
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9c0:	691a      	ldr	r2, [r3, #16]
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9ca:	69b9      	ldr	r1, [r7, #24]
 800c9cc:	0148      	lsls	r0, r1, #5
 800c9ce:	69f9      	ldr	r1, [r7, #28]
 800c9d0:	4401      	add	r1, r0
 800c9d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c9da:	79fb      	ldrb	r3, [r7, #7]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d10d      	bne.n	800c9fc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d009      	beq.n	800c9fc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	68d9      	ldr	r1, [r3, #12]
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	015a      	lsls	r2, r3, #5
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9f8:	460a      	mov	r2, r1
 800c9fa:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	791b      	ldrb	r3, [r3, #4]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d128      	bne.n	800ca56 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d110      	bne.n	800ca36 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	015a      	lsls	r2, r3, #5
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	69ba      	ldr	r2, [r7, #24]
 800ca24:	0151      	lsls	r1, r2, #5
 800ca26:	69fa      	ldr	r2, [r7, #28]
 800ca28:	440a      	add	r2, r1
 800ca2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca32:	6013      	str	r3, [r2, #0]
 800ca34:	e00f      	b.n	800ca56 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	015a      	lsls	r2, r3, #5
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	69ba      	ldr	r2, [r7, #24]
 800ca46:	0151      	lsls	r1, r2, #5
 800ca48:	69fa      	ldr	r2, [r7, #28]
 800ca4a:	440a      	add	r2, r1
 800ca4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca54:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	015a      	lsls	r2, r3, #5
 800ca5a:	69fb      	ldr	r3, [r7, #28]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	69ba      	ldr	r2, [r7, #24]
 800ca66:	0151      	lsls	r1, r2, #5
 800ca68:	69fa      	ldr	r2, [r7, #28]
 800ca6a:	440a      	add	r2, r1
 800ca6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3720      	adds	r7, #32
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	fff80000 	.word	0xfff80000
 800ca84:	e007ffff 	.word	0xe007ffff
 800ca88:	1ff80000 	.word	0x1ff80000

0800ca8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b087      	sub	sp, #28
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ca96:	2300      	movs	r3, #0
 800ca98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	785b      	ldrb	r3, [r3, #1]
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d14a      	bne.n	800cb40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	015a      	lsls	r2, r3, #5
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	4413      	add	r3, r2
 800cab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cabe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cac2:	f040 8086 	bne.w	800cbd2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	015a      	lsls	r2, r3, #5
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	4413      	add	r3, r2
 800cad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	7812      	ldrb	r2, [r2, #0]
 800cada:	0151      	lsls	r1, r2, #5
 800cadc:	693a      	ldr	r2, [r7, #16]
 800cade:	440a      	add	r2, r1
 800cae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cae4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cae8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	015a      	lsls	r2, r3, #5
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	4413      	add	r3, r2
 800caf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	683a      	ldr	r2, [r7, #0]
 800cafc:	7812      	ldrb	r2, [r2, #0]
 800cafe:	0151      	lsls	r1, r2, #5
 800cb00:	693a      	ldr	r2, [r7, #16]
 800cb02:	440a      	add	r2, r1
 800cb04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3301      	adds	r3, #1
 800cb12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d902      	bls.n	800cb24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	75fb      	strb	r3, [r7, #23]
          break;
 800cb22:	e056      	b.n	800cbd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	015a      	lsls	r2, r3, #5
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb3c:	d0e7      	beq.n	800cb0e <USB_EPStopXfer+0x82>
 800cb3e:	e048      	b.n	800cbd2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	015a      	lsls	r2, r3, #5
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	4413      	add	r3, r2
 800cb4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb58:	d13b      	bne.n	800cbd2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	015a      	lsls	r2, r3, #5
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	4413      	add	r3, r2
 800cb64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	7812      	ldrb	r2, [r2, #0]
 800cb6e:	0151      	lsls	r1, r2, #5
 800cb70:	693a      	ldr	r2, [r7, #16]
 800cb72:	440a      	add	r2, r1
 800cb74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	7812      	ldrb	r2, [r2, #0]
 800cb92:	0151      	lsls	r1, r2, #5
 800cb94:	693a      	ldr	r2, [r7, #16]
 800cb96:	440a      	add	r2, r1
 800cb98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cba0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	3301      	adds	r3, #1
 800cba6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f242 7210 	movw	r2, #10000	; 0x2710
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d902      	bls.n	800cbb8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	75fb      	strb	r3, [r7, #23]
          break;
 800cbb6:	e00c      	b.n	800cbd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	015a      	lsls	r2, r3, #5
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbd0:	d0e7      	beq.n	800cba2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cbd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	371c      	adds	r7, #28
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b089      	sub	sp, #36	; 0x24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	4611      	mov	r1, r2
 800cbec:	461a      	mov	r2, r3
 800cbee:	460b      	mov	r3, r1
 800cbf0:	71fb      	strb	r3, [r7, #7]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cbfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d123      	bne.n	800cc4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cc06:	88bb      	ldrh	r3, [r7, #4]
 800cc08:	3303      	adds	r3, #3
 800cc0a:	089b      	lsrs	r3, r3, #2
 800cc0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cc0e:	2300      	movs	r3, #0
 800cc10:	61bb      	str	r3, [r7, #24]
 800cc12:	e018      	b.n	800cc46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cc14:	79fb      	ldrb	r3, [r7, #7]
 800cc16:	031a      	lsls	r2, r3, #12
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc20:	461a      	mov	r2, r3
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	3301      	adds	r3, #1
 800cc32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	3301      	adds	r3, #1
 800cc38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	3301      	adds	r3, #1
 800cc44:	61bb      	str	r3, [r7, #24]
 800cc46:	69ba      	ldr	r2, [r7, #24]
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d3e2      	bcc.n	800cc14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3724      	adds	r7, #36	; 0x24
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b08b      	sub	sp, #44	; 0x2c
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	4613      	mov	r3, r2
 800cc68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cc72:	88fb      	ldrh	r3, [r7, #6]
 800cc74:	089b      	lsrs	r3, r3, #2
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cc7a:	88fb      	ldrh	r3, [r7, #6]
 800cc7c:	f003 0303 	and.w	r3, r3, #3
 800cc80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cc82:	2300      	movs	r3, #0
 800cc84:	623b      	str	r3, [r7, #32]
 800cc86:	e014      	b.n	800ccb2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	601a      	str	r2, [r3, #0]
    pDest++;
 800cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc96:	3301      	adds	r3, #1
 800cc98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	3301      	adds	r3, #1
 800cca4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca8:	3301      	adds	r3, #1
 800ccaa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ccac:	6a3b      	ldr	r3, [r7, #32]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	623b      	str	r3, [r7, #32]
 800ccb2:	6a3a      	ldr	r2, [r7, #32]
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d3e6      	bcc.n	800cc88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ccba:	8bfb      	ldrh	r3, [r7, #30]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d01e      	beq.n	800ccfe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccca:	461a      	mov	r2, r3
 800cccc:	f107 0310 	add.w	r3, r7, #16
 800ccd0:	6812      	ldr	r2, [r2, #0]
 800ccd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ccd4:	693a      	ldr	r2, [r7, #16]
 800ccd6:	6a3b      	ldr	r3, [r7, #32]
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	00db      	lsls	r3, r3, #3
 800ccdc:	fa22 f303 	lsr.w	r3, r2, r3
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce4:	701a      	strb	r2, [r3, #0]
      i++;
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	3301      	adds	r3, #1
 800ccea:	623b      	str	r3, [r7, #32]
      pDest++;
 800ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccee:	3301      	adds	r3, #1
 800ccf0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ccf2:	8bfb      	ldrh	r3, [r7, #30]
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ccf8:	8bfb      	ldrh	r3, [r7, #30]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1ea      	bne.n	800ccd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	372c      	adds	r7, #44	; 0x2c
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	785b      	ldrb	r3, [r3, #1]
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d12c      	bne.n	800cd82 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	015a      	lsls	r2, r3, #5
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	4413      	add	r3, r2
 800cd30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	db12      	blt.n	800cd60 <USB_EPSetStall+0x54>
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d00f      	beq.n	800cd60 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	015a      	lsls	r2, r3, #5
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	4413      	add	r3, r2
 800cd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	68ba      	ldr	r2, [r7, #8]
 800cd50:	0151      	lsls	r1, r2, #5
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	440a      	add	r2, r1
 800cd56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cd5e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	015a      	lsls	r2, r3, #5
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	4413      	add	r3, r2
 800cd68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	68ba      	ldr	r2, [r7, #8]
 800cd70:	0151      	lsls	r1, r2, #5
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	440a      	add	r2, r1
 800cd76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd7e:	6013      	str	r3, [r2, #0]
 800cd80:	e02b      	b.n	800cdda <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	015a      	lsls	r2, r3, #5
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	4413      	add	r3, r2
 800cd8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	db12      	blt.n	800cdba <USB_EPSetStall+0xae>
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00f      	beq.n	800cdba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	015a      	lsls	r2, r3, #5
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	4413      	add	r3, r2
 800cda2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	0151      	lsls	r1, r2, #5
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	440a      	add	r2, r1
 800cdb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cdb8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	015a      	lsls	r2, r3, #5
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	0151      	lsls	r1, r2, #5
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	440a      	add	r2, r1
 800cdd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cdd8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	785b      	ldrb	r3, [r3, #1]
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d128      	bne.n	800ce56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	015a      	lsls	r2, r3, #5
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	0151      	lsls	r1, r2, #5
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	440a      	add	r2, r1
 800ce1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	791b      	ldrb	r3, [r3, #4]
 800ce28:	2b03      	cmp	r3, #3
 800ce2a:	d003      	beq.n	800ce34 <USB_EPClearStall+0x4c>
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	791b      	ldrb	r3, [r3, #4]
 800ce30:	2b02      	cmp	r3, #2
 800ce32:	d138      	bne.n	800cea6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	015a      	lsls	r2, r3, #5
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68ba      	ldr	r2, [r7, #8]
 800ce44:	0151      	lsls	r1, r2, #5
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	440a      	add	r2, r1
 800ce4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce52:	6013      	str	r3, [r2, #0]
 800ce54:	e027      	b.n	800cea6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	015a      	lsls	r2, r3, #5
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	68ba      	ldr	r2, [r7, #8]
 800ce66:	0151      	lsls	r1, r2, #5
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	440a      	add	r2, r1
 800ce6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	791b      	ldrb	r3, [r3, #4]
 800ce7a:	2b03      	cmp	r3, #3
 800ce7c:	d003      	beq.n	800ce86 <USB_EPClearStall+0x9e>
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	791b      	ldrb	r3, [r3, #4]
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d10f      	bne.n	800cea6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	015a      	lsls	r2, r3, #5
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	0151      	lsls	r1, r2, #5
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	440a      	add	r2, r1
 800ce9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cea4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cea6:	2300      	movs	r3, #0
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3714      	adds	r7, #20
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	460b      	mov	r3, r1
 800cebe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ced2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ced6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	78fb      	ldrb	r3, [r7, #3]
 800cee2:	011b      	lsls	r3, r3, #4
 800cee4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cee8:	68f9      	ldr	r1, [r7, #12]
 800ceea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ceee:	4313      	orrs	r3, r2
 800cef0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3714      	adds	r7, #20
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf1a:	f023 0303 	bic.w	r3, r3, #3
 800cf1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf2e:	f023 0302 	bic.w	r3, r3, #2
 800cf32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3714      	adds	r7, #20
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr

0800cf42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cf42:	b480      	push	{r7}
 800cf44:	b085      	sub	sp, #20
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	68fa      	ldr	r2, [r7, #12]
 800cf58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf5c:	f023 0303 	bic.w	r3, r3, #3
 800cf60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf70:	f043 0302 	orr.w	r3, r3, #2
 800cf74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3714      	adds	r7, #20
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b085      	sub	sp, #20
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	695b      	ldr	r3, [r3, #20]
 800cf90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	699b      	ldr	r3, [r3, #24]
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	4013      	ands	r3, r2
 800cf9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3714      	adds	r7, #20
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cfaa:	b480      	push	{r7}
 800cfac:	b085      	sub	sp, #20
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfbc:	699b      	ldr	r3, [r3, #24]
 800cfbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfc6:	69db      	ldr	r3, [r3, #28]
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	4013      	ands	r3, r2
 800cfcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	0c1b      	lsrs	r3, r3, #16
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3714      	adds	r7, #20
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr

0800cfde <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cfde:	b480      	push	{r7}
 800cfe0:	b085      	sub	sp, #20
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cff0:	699b      	ldr	r3, [r3, #24]
 800cff2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cffa:	69db      	ldr	r3, [r3, #28]
 800cffc:	68ba      	ldr	r2, [r7, #8]
 800cffe:	4013      	ands	r3, r2
 800d000:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	b29b      	uxth	r3, r3
}
 800d006:	4618      	mov	r0, r3
 800d008:	3714      	adds	r7, #20
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d012:	b480      	push	{r7}
 800d014:	b085      	sub	sp, #20
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
 800d01a:	460b      	mov	r3, r1
 800d01c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d022:	78fb      	ldrb	r3, [r7, #3]
 800d024:	015a      	lsls	r2, r3, #5
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	4413      	add	r3, r2
 800d02a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d02e:	689b      	ldr	r3, [r3, #8]
 800d030:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d038:	695b      	ldr	r3, [r3, #20]
 800d03a:	68ba      	ldr	r2, [r7, #8]
 800d03c:	4013      	ands	r3, r2
 800d03e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d040:	68bb      	ldr	r3, [r7, #8]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3714      	adds	r7, #20
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d04e:	b480      	push	{r7}
 800d050:	b087      	sub	sp, #28
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
 800d056:	460b      	mov	r3, r1
 800d058:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d070:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d072:	78fb      	ldrb	r3, [r7, #3]
 800d074:	f003 030f 	and.w	r3, r3, #15
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	fa22 f303 	lsr.w	r3, r2, r3
 800d07e:	01db      	lsls	r3, r3, #7
 800d080:	b2db      	uxtb	r3, r3
 800d082:	693a      	ldr	r2, [r7, #16]
 800d084:	4313      	orrs	r3, r2
 800d086:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d088:	78fb      	ldrb	r3, [r7, #3]
 800d08a:	015a      	lsls	r2, r3, #5
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	4413      	add	r3, r2
 800d090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d094:	689b      	ldr	r3, [r3, #8]
 800d096:	693a      	ldr	r2, [r7, #16]
 800d098:	4013      	ands	r3, r2
 800d09a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d09c:	68bb      	ldr	r3, [r7, #8]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	371c      	adds	r7, #28
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr

0800d0aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	b083      	sub	sp, #12
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	695b      	ldr	r3, [r3, #20]
 800d0b6:	f003 0301 	and.w	r3, r3, #1
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	370c      	adds	r7, #12
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
	...

0800d0c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b085      	sub	sp, #20
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	4b09      	ldr	r3, [pc, #36]	; (800d10c <USB_ActivateSetup+0x44>)
 800d0e6:	4013      	ands	r3, r2
 800d0e8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3714      	adds	r7, #20
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr
 800d10c:	fffff800 	.word	0xfffff800

0800d110 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d110:	b480      	push	{r7}
 800d112:	b087      	sub	sp, #28
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	460b      	mov	r3, r1
 800d11a:	607a      	str	r2, [r7, #4]
 800d11c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	333c      	adds	r3, #60	; 0x3c
 800d126:	3304      	adds	r3, #4
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	4a26      	ldr	r2, [pc, #152]	; (800d1c8 <USB_EP0_OutStart+0xb8>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d90a      	bls.n	800d14a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d144:	d101      	bne.n	800d14a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d146:	2300      	movs	r3, #0
 800d148:	e037      	b.n	800d1ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d150:	461a      	mov	r2, r3
 800d152:	2300      	movs	r3, #0
 800d154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	697a      	ldr	r2, [r7, #20]
 800d160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	697a      	ldr	r2, [r7, #20]
 800d174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d178:	f043 0318 	orr.w	r3, r3, #24
 800d17c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	697a      	ldr	r2, [r7, #20]
 800d188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d18c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d190:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d192:	7afb      	ldrb	r3, [r7, #11]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d10f      	bne.n	800d1b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d19e:	461a      	mov	r2, r3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	697a      	ldr	r2, [r7, #20]
 800d1ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d1b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	371c      	adds	r7, #28
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	4f54300a 	.word	0x4f54300a

0800d1cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800d1e4:	d901      	bls.n	800d1ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d1e6:	2303      	movs	r3, #3
 800d1e8:	e01b      	b.n	800d222 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	691b      	ldr	r3, [r3, #16]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	daf2      	bge.n	800d1d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	691b      	ldr	r3, [r3, #16]
 800d1fa:	f043 0201 	orr.w	r2, r3, #1
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	3301      	adds	r3, #1
 800d206:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800d20e:	d901      	bls.n	800d214 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d210:	2303      	movs	r3, #3
 800d212:	e006      	b.n	800d222 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	691b      	ldr	r3, [r3, #16]
 800d218:	f003 0301 	and.w	r3, r3, #1
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d0f0      	beq.n	800d202 <USB_CoreReset+0x36>

  return HAL_OK;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3714      	adds	r7, #20
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr
	...

0800d230 <__NVIC_SystemReset>:
{
 800d230:	b480      	push	{r7}
 800d232:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d234:	f3bf 8f4f 	dsb	sy
}
 800d238:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d23a:	4b06      	ldr	r3, [pc, #24]	; (800d254 <__NVIC_SystemReset+0x24>)
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d242:	4904      	ldr	r1, [pc, #16]	; (800d254 <__NVIC_SystemReset+0x24>)
 800d244:	4b04      	ldr	r3, [pc, #16]	; (800d258 <__NVIC_SystemReset+0x28>)
 800d246:	4313      	orrs	r3, r2
 800d248:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d24a:	f3bf 8f4f 	dsb	sy
}
 800d24e:	bf00      	nop
    __NOP();
 800d250:	bf00      	nop
 800d252:	e7fd      	b.n	800d250 <__NVIC_SystemReset+0x20>
 800d254:	e000ed00 	.word	0xe000ed00
 800d258:	05fa0004 	.word	0x05fa0004

0800d25c <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	460b      	mov	r3, r1
 800d266:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800d268:	f44f 6084 	mov.w	r0, #1056	; 0x420
 800d26c:	f002 fee6 	bl	801003c <USBD_static_malloc>
 800d270:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d109      	bne.n	800d28c <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	32b0      	adds	r2, #176	; 0xb0
 800d282:	2100      	movs	r1, #0
 800d284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d288:	2302      	movs	r3, #2
 800d28a:	e052      	b.n	800d332 <USBD_DFU_Init+0xd6>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	32b0      	adds	r2, #176	; 0xb0
 800d296:	68f9      	ldr	r1, [r7, #12]
 800d298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	32b0      	adds	r2, #176	; 0xb0
 800d2a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d2be:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2202      	movs	r2, #2
 800d2de:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[1] = 0U;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
  hdfu->dev_status[2] = 0U;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
  hdfu->dev_status[3] = 0U;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2202      	movs	r2, #2
 800d306:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[5] = 0U;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	33b0      	adds	r3, #176	; 0xb0
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	4413      	add	r3, r2
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	4798      	blx	r3
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d001      	beq.n	800d330 <USBD_DFU_Init+0xd4>
  {
    return (uint8_t)USBD_FAIL;
 800d32c:	2303      	movs	r3, #3
 800d32e:	e000      	b.n	800d332 <USBD_DFU_Init+0xd6>
  }

  return (uint8_t)USBD_OK;
 800d330:	2300      	movs	r3, #0
}
 800d332:	4618      	mov	r0, r3
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b084      	sub	sp, #16
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
 800d342:	460b      	mov	r3, r1
 800d344:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	32b0      	adds	r2, #176	; 0xb0
 800d350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d101      	bne.n	800d35c <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 800d358:	2302      	movs	r3, #2
 800d35a:	e03c      	b.n	800d3d6 <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	32b0      	adds	r2, #176	; 0xb0
 800d366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d36a:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2200      	movs	r2, #0
 800d370:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2202      	movs	r2, #2
 800d380:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2200      	movs	r2, #0
 800d388:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2202      	movs	r2, #2
 800d390:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	33b0      	adds	r3, #176	; 0xb0
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	4413      	add	r3, r2
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	689b      	ldr	r3, [r3, #8]
 800d3a6:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	32b0      	adds	r2, #176	; 0xb0
 800d3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f002 fe4e 	bl	8010058 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	32b0      	adds	r2, #176	; 0xb0
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
	...

0800d3e0 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	32b0      	adds	r2, #176	; 0xb0
 800d3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 800d3fe:	2300      	movs	r3, #0
 800d400:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d101      	bne.n	800d40c <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800d408:	2303      	movs	r3, #3
 800d40a:	e0e8      	b.n	800d5de <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d414:	2b00      	cmp	r3, #0
 800d416:	d03e      	beq.n	800d496 <USBD_DFU_Setup+0xb6>
 800d418:	2b20      	cmp	r3, #32
 800d41a:	f040 80d8 	bne.w	800d5ce <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	785b      	ldrb	r3, [r3, #1]
 800d422:	2b06      	cmp	r3, #6
 800d424:	d82f      	bhi.n	800d486 <USBD_DFU_Setup+0xa6>
 800d426:	a201      	add	r2, pc, #4	; (adr r2, 800d42c <USBD_DFU_Setup+0x4c>)
 800d428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d42c:	0800d47d 	.word	0x0800d47d
 800d430:	0800d449 	.word	0x0800d449
 800d434:	0800d453 	.word	0x0800d453
 800d438:	0800d45d 	.word	0x0800d45d
 800d43c:	0800d465 	.word	0x0800d465
 800d440:	0800d46d 	.word	0x0800d46d
 800d444:	0800d475 	.word	0x0800d475
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800d448:	6839      	ldr	r1, [r7, #0]
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 fac2 	bl	800d9d4 <DFU_Download>
          break;
 800d450:	e020      	b.n	800d494 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800d452:	6839      	ldr	r1, [r7, #0]
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 fb33 	bl	800dac0 <DFU_Upload>
          break;
 800d45a:	e01b      	b.n	800d494 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 fc37 	bl	800dcd0 <DFU_GetStatus>
          break;
 800d462:	e017      	b.n	800d494 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 fcff 	bl	800de68 <DFU_ClearStatus>
          break;
 800d46a:	e013      	b.n	800d494 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 fd53 	bl	800df18 <DFU_GetState>
          break;
 800d472:	e00f      	b.n	800d494 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 fd6b 	bl	800df50 <DFU_Abort>
          break;
 800d47a:	e00b      	b.n	800d494 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800d47c:	6839      	ldr	r1, [r7, #0]
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 fa38 	bl	800d8f4 <DFU_Detach>
          break;
 800d484:	e006      	b.n	800d494 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f002 f8a0 	bl	800f5ce <USBD_CtlError>
          ret = USBD_FAIL;
 800d48e:	2303      	movs	r3, #3
 800d490:	75fb      	strb	r3, [r7, #23]
          break;
 800d492:	bf00      	nop
      }
      break;
 800d494:	e0a2      	b.n	800d5dc <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	785b      	ldrb	r3, [r3, #1]
 800d49a:	2b0b      	cmp	r3, #11
 800d49c:	f200 808c 	bhi.w	800d5b8 <USBD_DFU_Setup+0x1d8>
 800d4a0:	a201      	add	r2, pc, #4	; (adr r2, 800d4a8 <USBD_DFU_Setup+0xc8>)
 800d4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a6:	bf00      	nop
 800d4a8:	0800d4d9 	.word	0x0800d4d9
 800d4ac:	0800d5c7 	.word	0x0800d5c7
 800d4b0:	0800d5b9 	.word	0x0800d5b9
 800d4b4:	0800d5b9 	.word	0x0800d5b9
 800d4b8:	0800d5b9 	.word	0x0800d5b9
 800d4bc:	0800d5b9 	.word	0x0800d5b9
 800d4c0:	0800d503 	.word	0x0800d503
 800d4c4:	0800d5b9 	.word	0x0800d5b9
 800d4c8:	0800d5b9 	.word	0x0800d5b9
 800d4cc:	0800d5b9 	.word	0x0800d5b9
 800d4d0:	0800d54b 	.word	0x0800d54b
 800d4d4:	0800d577 	.word	0x0800d577
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	2b03      	cmp	r3, #3
 800d4e2:	d107      	bne.n	800d4f4 <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d4e4:	f107 0308 	add.w	r3, r7, #8
 800d4e8:	2202      	movs	r2, #2
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f002 f8eb 	bl	800f6c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d4f2:	e06b      	b.n	800d5cc <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800d4f4:	6839      	ldr	r1, [r7, #0]
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f002 f869 	bl	800f5ce <USBD_CtlError>
            ret = USBD_FAIL;
 800d4fc:	2303      	movs	r3, #3
 800d4fe:	75fb      	strb	r3, [r7, #23]
          break;
 800d500:	e064      	b.n	800d5cc <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	885b      	ldrh	r3, [r3, #2]
 800d506:	0a1b      	lsrs	r3, r3, #8
 800d508:	b29b      	uxth	r3, r3
 800d50a:	2b21      	cmp	r3, #33	; 0x21
 800d50c:	d15d      	bne.n	800d5ca <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800d514:	4618      	mov	r0, r3
 800d516:	f000 fdd5 	bl	800e0c4 <USBD_DFU_GetDfuFuncDesc>
 800d51a:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00c      	beq.n	800d53c <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	88db      	ldrh	r3, [r3, #6]
 800d526:	2b09      	cmp	r3, #9
 800d528:	bf28      	it	cs
 800d52a:	2309      	movcs	r3, #9
 800d52c:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800d52e:	897b      	ldrh	r3, [r7, #10]
 800d530:	461a      	mov	r2, r3
 800d532:	68f9      	ldr	r1, [r7, #12]
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f002 f8c7 	bl	800f6c8 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800d53a:	e046      	b.n	800d5ca <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 800d53c:	6839      	ldr	r1, [r7, #0]
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f002 f845 	bl	800f5ce <USBD_CtlError>
              ret = USBD_FAIL;
 800d544:	2303      	movs	r3, #3
 800d546:	75fb      	strb	r3, [r7, #23]
          break;
 800d548:	e03f      	b.n	800d5ca <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b03      	cmp	r3, #3
 800d554:	d108      	bne.n	800d568 <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800d55c:	2201      	movs	r2, #1
 800d55e:	4619      	mov	r1, r3
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f002 f8b1 	bl	800f6c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d566:	e031      	b.n	800d5cc <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800d568:	6839      	ldr	r1, [r7, #0]
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f002 f82f 	bl	800f5ce <USBD_CtlError>
            ret = USBD_FAIL;
 800d570:	2303      	movs	r3, #3
 800d572:	75fb      	strb	r3, [r7, #23]
          break;
 800d574:	e02a      	b.n	800d5cc <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	885b      	ldrh	r3, [r3, #2]
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d114      	bne.n	800d5aa <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d586:	b2db      	uxtb	r3, r3
 800d588:	2b03      	cmp	r3, #3
 800d58a:	d107      	bne.n	800d59c <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	885b      	ldrh	r3, [r3, #2]
 800d590:	b2db      	uxtb	r3, r3
 800d592:	461a      	mov	r2, r3
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d59a:	e017      	b.n	800d5cc <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 800d59c:	6839      	ldr	r1, [r7, #0]
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f002 f815 	bl	800f5ce <USBD_CtlError>
              ret = USBD_FAIL;
 800d5a4:	2303      	movs	r3, #3
 800d5a6:	75fb      	strb	r3, [r7, #23]
          break;
 800d5a8:	e010      	b.n	800d5cc <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800d5aa:	6839      	ldr	r1, [r7, #0]
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f002 f80e 	bl	800f5ce <USBD_CtlError>
            ret = USBD_FAIL;
 800d5b2:	2303      	movs	r3, #3
 800d5b4:	75fb      	strb	r3, [r7, #23]
          break;
 800d5b6:	e009      	b.n	800d5cc <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d5b8:	6839      	ldr	r1, [r7, #0]
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f002 f807 	bl	800f5ce <USBD_CtlError>
          ret = USBD_FAIL;
 800d5c0:	2303      	movs	r3, #3
 800d5c2:	75fb      	strb	r3, [r7, #23]
          break;
 800d5c4:	e002      	b.n	800d5cc <USBD_DFU_Setup+0x1ec>
          break;
 800d5c6:	bf00      	nop
 800d5c8:	e008      	b.n	800d5dc <USBD_DFU_Setup+0x1fc>
          break;
 800d5ca:	bf00      	nop
      }
      break;
 800d5cc:	e006      	b.n	800d5dc <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800d5ce:	6839      	ldr	r1, [r7, #0]
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f001 fffc 	bl	800f5ce <USBD_CtlError>
      ret = USBD_FAIL;
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	75fb      	strb	r3, [r7, #23]
      break;
 800d5da:	bf00      	nop
  }

  return (uint8_t)ret;
 800d5dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3718      	adds	r7, #24
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop

0800d5e8 <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	221b      	movs	r2, #27
 800d5f4:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800d5f6:	4b03      	ldr	r3, [pc, #12]	; (800d604 <USBD_DFU_GetCfgDesc+0x1c>)
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr
 800d604:	240003d0 	.word	0x240003d0

0800d608 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	370c      	adds	r7, #12
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr

0800d61e <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800d61e:	b580      	push	{r7, lr}
 800d620:	b088      	sub	sp, #32
 800d622:	af00      	add	r7, sp, #0
 800d624:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t app_addr_ptr;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	32b0      	adds	r2, #176	; 0xb0
 800d630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d634:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	33b0      	adds	r3, #176	; 0xb0
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	4413      	add	r3, r2
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	61bb      	str	r3, [r7, #24]
#if (USBD_DFU_VENDOR_CMD_ENABLED == 1U) || (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d101      	bne.n	800d652 <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800d64e:	2303      	movs	r3, #3
 800d650:	e0f1      	b.n	800d836 <USBD_DFU_EP0_TxReady+0x218>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d658:	2b04      	cmp	r3, #4
 800d65a:	f040 80e0 	bne.w	800d81e <USBD_DFU_EP0_TxReady+0x200>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d664:	2b00      	cmp	r3, #0
 800d666:	f040 8085 	bne.w	800d774 <USBD_DFU_EP0_TxReady+0x156>
    {
      if (hdfu->wlength == 1U)
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d670:	2b01      	cmp	r3, #1
 800d672:	f000 80b5 	beq.w	800d7e0 <USBD_DFU_EP0_TxReady+0x1c2>
            return (uint8_t)USBD_FAIL;
          }
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
      }
      else if (hdfu->wlength == 5U)
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d67c:	2b05      	cmp	r3, #5
 800d67e:	d166      	bne.n	800d74e <USBD_DFU_EP0_TxReady+0x130>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	2b21      	cmp	r3, #33	; 0x21
 800d686:	d124      	bne.n	800d6d2 <USBD_DFU_EP0_TxReady+0xb4>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          hdfu->data_ptr = hdfu->buffer.d8[1];
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	785b      	ldrb	r3, [r3, #1]
 800d68c:	461a      	mov	r2, r3
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800d694:	69fb      	ldr	r3, [r7, #28]
 800d696:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	789b      	ldrb	r3, [r3, #2]
 800d69e:	021b      	lsls	r3, r3, #8
 800d6a0:	441a      	add	r2, r3
 800d6a2:	69fb      	ldr	r3, [r7, #28]
 800d6a4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	78db      	ldrb	r3, [r3, #3]
 800d6b2:	041b      	lsls	r3, r3, #16
 800d6b4:	441a      	add	r2, r3
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	791b      	ldrb	r3, [r3, #4]
 800d6c6:	061b      	lsls	r3, r3, #24
 800d6c8:	441a      	add	r2, r3
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800d6d0:	e086      	b.n	800d7e0 <USBD_DFU_EP0_TxReady+0x1c2>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	2b41      	cmp	r3, #65	; 0x41
 800d6d8:	d137      	bne.n	800d74a <USBD_DFU_EP0_TxReady+0x12c>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          app_addr_ptr = hdfu->buffer.d8[1];
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	785b      	ldrb	r3, [r3, #1]
 800d6de:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	789b      	ldrb	r3, [r3, #2]
 800d6e4:	021b      	lsls	r3, r3, #8
 800d6e6:	693a      	ldr	r2, [r7, #16]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	78db      	ldrb	r3, [r3, #3]
 800d6f0:	041b      	lsls	r3, r3, #16
 800d6f2:	693a      	ldr	r2, [r7, #16]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	791b      	ldrb	r3, [r3, #4]
 800d6fc:	061b      	lsls	r3, r3, #24
 800d6fe:	693a      	ldr	r2, [r7, #16]
 800d700:	4413      	add	r3, r2
 800d702:	613b      	str	r3, [r7, #16]

          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	6938      	ldr	r0, [r7, #16]
 800d70a:	4798      	blx	r3
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d066      	beq.n	800d7e0 <USBD_DFU_EP0_TxReady+0x1c2>
          {
            /* Update the state machine */
            hdfu->dev_state = DFU_STATE_ERROR;
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	220a      	movs	r2, #10
 800d716:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	220b      	movs	r2, #11
 800d71e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            hdfu->dev_status[1] = 0U;
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
            hdfu->dev_status[2] = 0U;
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	2200      	movs	r2, #0
 800d72e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
            hdfu->dev_status[3] = 0U;
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            return (uint8_t)USBD_FAIL;
 800d746:	2303      	movs	r3, #3
 800d748:	e075      	b.n	800d836 <USBD_DFU_EP0_TxReady+0x218>
          }
        }
#else
        else
        {
          return (uint8_t)USBD_FAIL;
 800d74a:	2303      	movs	r3, #3
 800d74c:	e073      	b.n	800d836 <USBD_DFU_EP0_TxReady+0x218>
          req.wLength = 1U;
          USBD_CtlError(pdev, &req);
        }
#else
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	2200      	movs	r2, #0
 800d752:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	2200      	movs	r2, #0
 800d75a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800d75e:	2300      	movs	r3, #0
 800d760:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 800d762:	2301      	movs	r3, #1
 800d764:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 800d766:	f107 0308 	add.w	r3, r7, #8
 800d76a:	4619      	mov	r1, r3
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f001 ff2e 	bl	800f5ce <USBD_CtlError>
 800d772:	e035      	b.n	800d7e0 <USBD_DFU_EP0_TxReady+0x1c2>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d930      	bls.n	800d7e0 <USBD_DFU_EP0_TxReady+0x1c2>
          return (uint8_t)USBD_FAIL;
        }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d784:	3b02      	subs	r3, #2
 800d786:	029a      	lsls	r2, r3, #10
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800d78e:	4413      	add	r3, r2
 800d790:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	69f8      	ldr	r0, [r7, #28]
 800d798:	6979      	ldr	r1, [r7, #20]
 800d79a:	69fa      	ldr	r2, [r7, #28]
 800d79c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800d7a0:	4798      	blx	r3
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d01b      	beq.n	800d7e0 <USBD_DFU_EP0_TxReady+0x1c2>
        {
          /* Update the state machine */
          hdfu->dev_state = DFU_STATE_ERROR;
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	220a      	movs	r2, #10
 800d7ac:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 800d7b0:	69fb      	ldr	r3, [r7, #28]
 800d7b2:	220b      	movs	r2, #11
 800d7b4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
          hdfu->dev_status[1] = 0U;
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
          hdfu->dev_status[2] = 0U;
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
          hdfu->dev_status[3] = 0U;
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          return (uint8_t)USBD_FAIL;
 800d7dc:	2303      	movs	r3, #3
 800d7de:	e02a      	b.n	800d836 <USBD_DFU_EP0_TxReady+0x218>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	2203      	movs	r2, #3
 800d7f4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	2200      	movs	r2, #0
 800d804:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800d81c:	e00a      	b.n	800d834 <USBD_DFU_EP0_TxReady+0x216>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d824:	2b07      	cmp	r3, #7
 800d826:	d103      	bne.n	800d830 <USBD_DFU_EP0_TxReady+0x212>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 fbe6 	bl	800dffa <DFU_Leave>
 800d82e:	e001      	b.n	800d834 <USBD_DFU_EP0_TxReady+0x216>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800d830:	2303      	movs	r3, #3
 800d832:	e000      	b.n	800d836 <USBD_DFU_EP0_TxReady+0x218>
  }

  return (uint8_t)USBD_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3720      	adds	r7, #32
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800d83e:	b480      	push	{r7}
 800d840:	b083      	sub	sp, #12
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	370c      	adds	r7, #12
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	220a      	movs	r2, #10
 800d860:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800d862:	4b03      	ldr	r3, [pc, #12]	; (800d870 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800d864:	4618      	mov	r0, r3
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr
 800d870:	240003ec 	.word	0x240003ec

0800d874 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b086      	sub	sp, #24
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	460b      	mov	r3, r1
 800d87e:	607a      	str	r2, [r7, #4]
 800d880:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	33b0      	adds	r3, #176	; 0xb0
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	4413      	add	r3, r2
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800d894:	7afb      	ldrb	r3, [r7, #11]
 800d896:	2b06      	cmp	r3, #6
 800d898:	d808      	bhi.n	800d8ac <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	4906      	ldr	r1, [pc, #24]	; (800d8bc <USBD_DFU_GetUsrStringDesc+0x48>)
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f001 fea4 	bl	800f5f0 <USBD_GetString>
    return USBD_StrDesc;
 800d8a8:	4b04      	ldr	r3, [pc, #16]	; (800d8bc <USBD_DFU_GetUsrStringDesc+0x48>)
 800d8aa:	e003      	b.n	800d8b4 <USBD_DFU_GetUsrStringDesc+0x40>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    *length = 0U;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	801a      	strh	r2, [r3, #0]
    return NULL;
 800d8b2:	2300      	movs	r3, #0
  }
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3718      	adds	r7, #24
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	24001c74 	.word	0x24001c74

0800d8c0 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d101      	bne.n	800d8d4 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d8d0:	2303      	movs	r3, #3
 800d8d2:	e009      	b.n	800d8e8 <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	33b0      	adds	r3, #176	; 0xb0
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	4413      	add	r3, r2
 800d8e2:	683a      	ldr	r2, [r7, #0]
 800d8e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d8e6:	2300      	movs	r3, #0
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	370c      	adds	r7, #12
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	32b0      	adds	r2, #176	; 0xb0
 800d908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d90c:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800d914:	4618      	mov	r0, r3
 800d916:	f000 fbd5 	bl	800e0c4 <USBD_DFU_GetDfuFuncDesc>
 800d91a:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d054      	beq.n	800d9cc <DFU_Detach+0xd8>
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d051      	beq.n	800d9cc <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d92e:	2b02      	cmp	r3, #2
 800d930:	d013      	beq.n	800d95a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800d938:	2b03      	cmp	r3, #3
 800d93a:	d00e      	beq.n	800d95a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800d942:	2b05      	cmp	r3, #5
 800d944:	d009      	beq.n	800d95a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800d94c:	2b06      	cmp	r3, #6
 800d94e:	d004      	beq.n	800d95a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800d956:	2b09      	cmp	r3, #9
 800d958:	d125      	bne.n	800d9a6 <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2202      	movs	r2, #2
 800d95e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2200      	movs	r2, #0
 800d966:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2200      	movs	r2, #0
 800d96e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2200      	movs	r2, #0
 800d976:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2200      	movs	r2, #0
 800d97e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2200      	movs	r2, #0
 800d992:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->wblock_num = 0U;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2200      	movs	r2, #0
 800d99a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	789b      	ldrb	r3, [r3, #2]
 800d9aa:	f003 0308 	and.w	r3, r3, #8
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d006      	beq.n	800d9c0 <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 fc44 	bl	800e240 <USBD_Stop>
    (void)USBD_Start(pdev);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 fc35 	bl	800e228 <USBD_Start>
 800d9be:	e006      	b.n	800d9ce <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	885b      	ldrh	r3, [r3, #2]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7f4 fc71 	bl	80022ac <HAL_Delay>
 800d9ca:	e000      	b.n	800d9ce <DFU_Detach+0xda>
    return;
 800d9cc:	bf00      	nop
  }
}
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	32b0      	adds	r2, #176	; 0xb0
 800d9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ec:	60fb      	str	r3, [r7, #12]
#if (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

  if (hdfu == NULL)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d061      	beq.n	800dab8 <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	88db      	ldrh	r3, [r3, #6]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d033      	beq.n	800da64 <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800da02:	2b02      	cmp	r3, #2
 800da04:	d004      	beq.n	800da10 <DFU_Download+0x3c>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800da0c:	2b05      	cmp	r3, #5
 800da0e:	d124      	bne.n	800da5a <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	885b      	ldrh	r3, [r3, #2]
 800da14:	461a      	mov	r2, r3
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	88db      	ldrh	r3, [r3, #6]
 800da20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da24:	bf28      	it	cs
 800da26:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	461a      	mov	r2, r3
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2203      	movs	r2, #3
 800da38:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800da48:	68f9      	ldr	r1, [r7, #12]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800da50:	461a      	mov	r2, r3
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f001 fe64 	bl	800f720 <USBD_CtlPrepareRx>
 800da58:	e02f      	b.n	800daba <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800da5a:	6839      	ldr	r1, [r7, #0]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f001 fdb6 	bl	800f5ce <USBD_CtlError>
 800da62:	e02a      	b.n	800daba <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation */
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800da6a:	2b05      	cmp	r3, #5
 800da6c:	d004      	beq.n	800da78 <DFU_Download+0xa4>
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800da74:	2b02      	cmp	r3, #2
 800da76:	d11a      	bne.n	800daae <DFU_Download+0xda>
        hdfu->dev_status[4] = hdfu->dev_state;
      }
      else
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */
      {
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2201      	movs	r2, #1
 800da7c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2206      	movs	r2, #6
 800da84:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2200      	movs	r2, #0
 800da8c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2200      	movs	r2, #0
 800da94:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2200      	movs	r2, #0
 800da9c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800daac:	e005      	b.n	800daba <DFU_Download+0xe6>
      }
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800daae:	6839      	ldr	r1, [r7, #0]
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f001 fd8c 	bl	800f5ce <USBD_CtlError>
 800dab6:	e000      	b.n	800daba <DFU_Download+0xe6>
    return;
 800dab8:	bf00      	nop
    }
  }
}
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b088      	sub	sp, #32
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	32b0      	adds	r2, #176	; 0xb0
 800dad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dad8:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	33b0      	adds	r3, #176	; 0xb0
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	4413      	add	r3, r2
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	61bb      	str	r3, [r7, #24]
  uint8_t VendorCmdLength = 0U;
  uint8_t VendorCmdBuffer[DFU_VENDOR_CMD_MAX];
  uint8_t idx;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f000 80ea 	beq.w	800dcc8 <DFU_Upload+0x208>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	88db      	ldrh	r3, [r3, #6]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f000 80ce 	beq.w	800dc9a <DFU_Upload+0x1da>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800db04:	2b02      	cmp	r3, #2
 800db06:	d005      	beq.n	800db14 <DFU_Upload+0x54>
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800db0e:	2b09      	cmp	r3, #9
 800db10:	f040 80b6 	bne.w	800dc80 <DFU_Upload+0x1c0>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	885b      	ldrh	r3, [r3, #2]
 800db18:	461a      	mov	r2, r3
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	88db      	ldrh	r3, [r3, #6]
 800db24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db28:	bf28      	it	cs
 800db2a:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800db2e:	b29b      	uxth	r3, r3
 800db30:	461a      	mov	r2, r3
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d12e      	bne.n	800dba0 <DFU_Upload+0xe0>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db48:	2b03      	cmp	r3, #3
 800db4a:	d901      	bls.n	800db50 <DFU_Upload+0x90>
 800db4c:	2202      	movs	r2, #2
 800db4e:	e000      	b.n	800db52 <DFU_Upload+0x92>
 800db50:	2209      	movs	r2, #9
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        hdfu->dev_status[1] = 0U;
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	2200      	movs	r2, #0
 800db5c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	2200      	movs	r2, #0
 800db64:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	2200      	movs	r2, #0
 800db80:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	2221      	movs	r2, #33	; 0x21
 800db86:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	2241      	movs	r2, #65	; 0x41
 800db8c:	709a      	strb	r2, [r3, #2]

        CmdLength = 3U;
 800db8e:	2303      	movs	r3, #3
 800db90:	60fb      	str	r3, [r7, #12]
          CmdLength += MIN(VendorCmdLength, DFU_VENDOR_CMD_MAX);
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	4619      	mov	r1, r3
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f001 fd95 	bl	800f6c8 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800db9e:	e094      	b.n	800dcca <DFU_Upload+0x20a>
      }
      else if (hdfu->wblock_num > 1U)
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d94f      	bls.n	800dc4a <DFU_Upload+0x18a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	2209      	movs	r2, #9
 800dbae:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        hdfu->dev_status[1] = 0U;
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800dbc2:	69fb      	ldr	r3, [r7, #28]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        }

        if (VendorStatus == IS_DFU_PHY_ADDRESS)
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
        {
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800dbdc:	3b02      	subs	r3, #2
 800dbde:	029a      	lsls	r2, r3, #10
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800dbe6:	4413      	add	r3, r2
 800dbe8:	617b      	str	r3, [r7, #20]

          /* Return the physical address where data are stored */
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	695b      	ldr	r3, [r3, #20]
 800dbee:	6978      	ldr	r0, [r7, #20]
 800dbf0:	69f9      	ldr	r1, [r7, #28]
 800dbf2:	69fa      	ldr	r2, [r7, #28]
 800dbf4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800dbf8:	4798      	blx	r3
 800dbfa:	6138      	str	r0, [r7, #16]

          if (phaddr == NULL)
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d11a      	bne.n	800dc38 <DFU_Upload+0x178>
          {
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	220f      	movs	r2, #15
 800dc06:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

            hdfu->dev_status[1] = 0U;
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
            hdfu->dev_status[2] = 0U;
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	2200      	movs	r2, #0
 800dc16:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
            hdfu->dev_status[3] = 0U;
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

            /* Call the error management function (command will be NAKed) */
            USBD_CtlError(pdev, req);
 800dc2e:	6839      	ldr	r1, [r7, #0]
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f001 fccc 	bl	800f5ce <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800dc36:	e048      	b.n	800dcca <DFU_Upload+0x20a>
          }
          else
          {
            /* Send the status data over EP0 */
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dc3e:	461a      	mov	r2, r3
 800dc40:	6939      	ldr	r1, [r7, #16]
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f001 fd40 	bl	800f6c8 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800dc48:	e03f      	b.n	800dcca <DFU_Upload+0x20a>
          }
        }
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800dc4a:	69fb      	ldr	r3, [r7, #28]
 800dc4c:	220f      	movs	r2, #15
 800dc4e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        hdfu->dev_status[1] = 0U;
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	2200      	movs	r2, #0
 800dc66:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        /* Call the error management function (command will be NAKed) */
        USBD_CtlError(pdev, req);
 800dc76:	6839      	ldr	r1, [r7, #0]
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f001 fca8 	bl	800f5ce <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800dc7e:	e024      	b.n	800dcca <DFU_Upload+0x20a>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	2200      	movs	r2, #0
 800dc84:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed) */
      USBD_CtlError(pdev, req);
 800dc90:	6839      	ldr	r1, [r7, #0]
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f001 fc9b 	bl	800f5ce <USBD_CtlError>
 800dc98:	e017      	b.n	800dcca <DFU_Upload+0x20a>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	2202      	movs	r2, #2
 800dc9e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	2200      	movs	r2, #0
 800dca6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	2200      	movs	r2, #0
 800dcae:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800dcc6:	e000      	b.n	800dcca <DFU_Upload+0x20a>
    return;
 800dcc8:	bf00      	nop
  }
}
 800dcca:	3720      	adds	r7, #32
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b086      	sub	sp, #24
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	32b0      	adds	r2, #176	; 0xb0
 800dce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce6:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	33b0      	adds	r3, #176	; 0xb0
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	4413      	add	r3, r2
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800dd00:	4618      	mov	r0, r3
 800dd02:	f000 f9df 	bl	800e0c4 <USBD_DFU_GetDfuFuncDesc>
 800dd06:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	f000 80a8 	beq.w	800de60 <DFU_GetStatus+0x190>
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	f000 80a4 	beq.w	800de60 <DFU_GetStatus+0x190>
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	f000 80a0 	beq.w	800de60 <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800dd26:	2b03      	cmp	r3, #3
 800dd28:	d002      	beq.n	800dd30 <DFU_GetStatus+0x60>
 800dd2a:	2b06      	cmp	r3, #6
 800dd2c:	d051      	beq.n	800ddd2 <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 800dd2e:	e08e      	b.n	800de4e <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d034      	beq.n	800dda4 <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	2204      	movs	r2, #4
 800dd3e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	2200      	movs	r2, #0
 800dd56:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d10e      	bne.n	800dd8e <DFU_GetStatus+0xbe>
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	2b41      	cmp	r3, #65	; 0x41
 800dd76:	d10a      	bne.n	800dd8e <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	699b      	ldr	r3, [r3, #24]
 800dd7c:	697a      	ldr	r2, [r7, #20]
 800dd7e:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800dd82:	697a      	ldr	r2, [r7, #20]
 800dd84:	f202 4214 	addw	r2, r2, #1044	; 0x414
 800dd88:	2100      	movs	r1, #0
 800dd8a:	4798      	blx	r3
      break;
 800dd8c:	e05f      	b.n	800de4e <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	699b      	ldr	r3, [r3, #24]
 800dd92:	697a      	ldr	r2, [r7, #20]
 800dd94:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800dd98:	697a      	ldr	r2, [r7, #20]
 800dd9a:	f202 4214 	addw	r2, r2, #1044	; 0x414
 800dd9e:	2101      	movs	r1, #1
 800dda0:	4798      	blx	r3
      break;
 800dda2:	e054      	b.n	800de4e <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	2205      	movs	r2, #5
 800dda8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      break;
 800ddd0:	e03d      	b.n	800de4e <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d116      	bne.n	800de0a <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	2207      	movs	r2, #7
 800dde0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	2201      	movs	r2, #1
 800dde8:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      break;
 800de08:	e020      	b.n	800de4c <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800de10:	2b00      	cmp	r3, #0
 800de12:	d11b      	bne.n	800de4c <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	789b      	ldrb	r3, [r3, #2]
 800de18:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d015      	beq.n	800de4c <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	2202      	movs	r2, #2
 800de24:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
          hdfu->dev_status[1] = 0U;
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	2200      	movs	r2, #0
 800de2c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
          hdfu->dev_status[2] = 0U;
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	2200      	movs	r2, #0
 800de34:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
          hdfu->dev_status[3] = 0U;
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	2200      	movs	r2, #0
 800de3c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      break;
 800de4c:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800de54:	2206      	movs	r2, #6
 800de56:	4619      	mov	r1, r3
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f001 fc35 	bl	800f6c8 <USBD_CtlSendData>
 800de5e:	e000      	b.n	800de62 <DFU_GetStatus+0x192>
    return;
 800de60:	bf00      	nop
}
 800de62:	3718      	adds	r7, #24
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	32b0      	adds	r2, #176	; 0xb0
 800de7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de7e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d042      	beq.n	800df0c <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800de8c:	2b0a      	cmp	r3, #10
 800de8e:	d11e      	bne.n	800dece <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2202      	movs	r2, #2
 800de94:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2200      	movs	r2, #0
 800dea4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2200      	movs	r2, #0
 800deac:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2200      	movs	r2, #0
 800dec8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800decc:	e01f      	b.n	800df0e <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	220a      	movs	r2, #10
 800ded2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	220e      	movs	r2, #14
 800deda:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2200      	movs	r2, #0
 800deea:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2200      	movs	r2, #0
 800def2:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2200      	movs	r2, #0
 800df06:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800df0a:	e000      	b.n	800df0e <DFU_ClearStatus+0xa6>
    return;
 800df0c:	bf00      	nop
  }
}
 800df0e:	3714      	adds	r7, #20
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	32b0      	adds	r2, #176	; 0xb0
 800df2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df2e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d008      	beq.n	800df48 <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800df3c:	2201      	movs	r2, #1
 800df3e:	4619      	mov	r1, r3
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f001 fbc1 	bl	800f6c8 <USBD_CtlSendData>
 800df46:	e000      	b.n	800df4a <DFU_GetState+0x32>
    return;
 800df48:	bf00      	nop
}
 800df4a:	3710      	adds	r7, #16
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	32b0      	adds	r2, #176	; 0xb0
 800df62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df66:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d03f      	beq.n	800dfee <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800df74:	2b02      	cmp	r3, #2
 800df76:	d013      	beq.n	800dfa0 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800df7e:	2b03      	cmp	r3, #3
 800df80:	d00e      	beq.n	800dfa0 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800df88:	2b05      	cmp	r3, #5
 800df8a:	d009      	beq.n	800dfa0 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800df92:	2b06      	cmp	r3, #6
 800df94:	d004      	beq.n	800dfa0 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800df9c:	2b09      	cmp	r3, #9
 800df9e:	d127      	bne.n	800dff0 <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2202      	movs	r2, #2
 800dfa4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->wblock_num = 0U;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800dfec:	e000      	b.n	800dff0 <DFU_Abort+0xa0>
    return;
 800dfee:	bf00      	nop
  }
}
 800dff0:	3714      	adds	r7, #20
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr

0800dffa <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800dffa:	b580      	push	{r7, lr}
 800dffc:	b086      	sub	sp, #24
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	32b0      	adds	r2, #176	; 0xb0
 800e00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e010:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	33b0      	adds	r3, #176	; 0xb0
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	4413      	add	r3, r2
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800e02a:	4618      	mov	r0, r3
 800e02c:	f000 f84a 	bl	800e0c4 <USBD_DFU_GetDfuFuncDesc>
 800e030:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d041      	beq.n	800e0bc <DFU_Leave+0xc2>
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d03e      	beq.n	800e0bc <DFU_Leave+0xc2>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d03b      	beq.n	800e0bc <DFU_Leave+0xc2>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	2200      	movs	r2, #0
 800e048:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	789b      	ldrb	r3, [r3, #2]
 800e050:	f003 0304 	and.w	r3, r3, #4
 800e054:	2b00      	cmp	r3, #0
 800e056:	d016      	beq.n	800e086 <DFU_Leave+0x8c>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	2206      	movs	r2, #6
 800e05c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	2200      	movs	r2, #0
 800e064:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	2200      	movs	r2, #0
 800e06c:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	2200      	movs	r2, #0
 800e074:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    return;
 800e084:	e01b      	b.n	800e0be <DFU_Leave+0xc4>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	2208      	movs	r2, #8
 800e08a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	2200      	movs	r2, #0
 800e092:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	2200      	movs	r2, #0
 800e09a:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 f8c4 	bl	800e240 <USBD_Stop>
#if (USBD_DFU_VENDOR_EXIT_ENABLED == 1U)
    /* Jump should be ensured by user application */
    DfuInterface->LeaveDFU(hdfu->data_ptr);
#else
    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800e0b8:	f7ff f8ba 	bl	800d230 <__NVIC_SystemReset>
    return;
 800e0bc:	bf00      	nop
#endif /* USBD_DFU_VENDOR_EXIT_ENABLED */

    /* The next instructions will not be reached (system reset) */
  }
}
 800e0be:	3718      	adds	r7, #24
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b086      	sub	sp, #24
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	885b      	ldrh	r3, [r3, #2]
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d918      	bls.n	800e11a <USBD_DFU_GetDfuFuncDesc+0x56>
  {
    ptr = desc->bLength;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e0f0:	e00d      	b.n	800e10e <USBD_DFU_GetDfuFuncDesc+0x4a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e0f2:	f107 030a 	add.w	r3, r7, #10
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	6978      	ldr	r0, [r7, #20]
 800e0fa:	f000 fc19 	bl	800e930 <USBD_GetNextDesc>
 800e0fe:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	785b      	ldrb	r3, [r3, #1]
 800e104:	2b21      	cmp	r3, #33	; 0x21
 800e106:	d102      	bne.n	800e10e <USBD_DFU_GetDfuFuncDesc+0x4a>
      {
        pDfuDesc = (uint8_t *)pdesc;
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	613b      	str	r3, [r7, #16]
        break;
 800e10c:	e005      	b.n	800e11a <USBD_DFU_GetDfuFuncDesc+0x56>
    while (ptr < desc->wTotalLength)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	885b      	ldrh	r3, [r3, #2]
 800e112:	b29a      	uxth	r2, r3
 800e114:	897b      	ldrh	r3, [r7, #10]
 800e116:	429a      	cmp	r2, r3
 800e118:	d8eb      	bhi.n	800e0f2 <USBD_DFU_GetDfuFuncDesc+0x2e>
      }
    }
  }
  return pDfuDesc;
 800e11a:	693b      	ldr	r3, [r7, #16]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3718      	adds	r7, #24
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b086      	sub	sp, #24
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	4613      	mov	r3, r2
 800e130:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10a      	bne.n	800e14e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800e138:	4817      	ldr	r0, [pc, #92]	; (800e198 <USBD_Init+0x74>)
 800e13a:	f002 fbfb 	bl	8010934 <iprintf>
 800e13e:	4817      	ldr	r0, [pc, #92]	; (800e19c <USBD_Init+0x78>)
 800e140:	f002 fbf8 	bl	8010934 <iprintf>
 800e144:	200a      	movs	r0, #10
 800e146:	f002 fc07 	bl	8010958 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e14a:	2303      	movs	r3, #3
 800e14c:	e01f      	b.n	800e18e <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2200      	movs	r2, #0
 800e152:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2200      	movs	r2, #0
 800e15a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2200      	movs	r2, #0
 800e162:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d003      	beq.n	800e174 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	79fa      	ldrb	r2, [r7, #7]
 800e180:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f001 fde0 	bl	800fd48 <USBD_LL_Init>
 800e188:	4603      	mov	r3, r0
 800e18a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e18c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3718      	adds	r7, #24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	080116b0 	.word	0x080116b0
 800e19c:	080116b8 	.word	0x080116b8

0800e1a0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d10a      	bne.n	800e1ca <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800e1b4:	481a      	ldr	r0, [pc, #104]	; (800e220 <USBD_RegisterClass+0x80>)
 800e1b6:	f002 fbbd 	bl	8010934 <iprintf>
 800e1ba:	481a      	ldr	r0, [pc, #104]	; (800e224 <USBD_RegisterClass+0x84>)
 800e1bc:	f002 fbba 	bl	8010934 <iprintf>
 800e1c0:	200a      	movs	r0, #10
 800e1c2:	f002 fbc9 	bl	8010958 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e1c6:	2303      	movs	r3, #3
 800e1c8:	e025      	b.n	800e216 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	683a      	ldr	r2, [r7, #0]
 800e1ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	32ae      	adds	r2, #174	; 0xae
 800e1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00f      	beq.n	800e206 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	32ae      	adds	r2, #174	; 0xae
 800e1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f6:	f107 020e 	add.w	r2, r7, #14
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	4798      	blx	r3
 800e1fe:	4602      	mov	r2, r0
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e20c:	1c5a      	adds	r2, r3, #1
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e214:	2300      	movs	r3, #0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	080116b0 	.word	0x080116b0
 800e224:	080116d0 	.word	0x080116d0

0800e228 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f001 fddb 	bl	800fdec <USBD_LL_Start>
 800e236:	4603      	mov	r3, r0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f001 fdea 	bl	800fe22 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e254:	2b00      	cmp	r3, #0
 800e256:	d009      	beq.n	800e26c <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	6852      	ldr	r2, [r2, #4]
 800e264:	b2d2      	uxtb	r2, r2
 800e266:	4611      	mov	r1, r2
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e276:	b480      	push	{r7}
 800e278:	b083      	sub	sp, #12
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e27e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e280:	4618      	mov	r0, r3
 800e282:	370c      	adds	r7, #12
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr

0800e28c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	460b      	mov	r3, r1
 800e296:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e298:	2300      	movs	r3, #0
 800e29a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d009      	beq.n	800e2ba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	78fa      	ldrb	r2, [r7, #3]
 800e2b0:	4611      	mov	r1, r2
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	4798      	blx	r3
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e2ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3710      	adds	r7, #16
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	78fa      	ldrb	r2, [r7, #3]
 800e2de:	4611      	mov	r1, r2
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	4798      	blx	r3
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d001      	beq.n	800e2ee <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e2ea:	2303      	movs	r3, #3
 800e2ec:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e308:	6839      	ldr	r1, [r7, #0]
 800e30a:	4618      	mov	r0, r3
 800e30c:	f001 f925 	bl	800f55a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e31e:	461a      	mov	r2, r3
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e32c:	f003 031f 	and.w	r3, r3, #31
 800e330:	2b02      	cmp	r3, #2
 800e332:	d01a      	beq.n	800e36a <USBD_LL_SetupStage+0x72>
 800e334:	2b02      	cmp	r3, #2
 800e336:	d822      	bhi.n	800e37e <USBD_LL_SetupStage+0x86>
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d002      	beq.n	800e342 <USBD_LL_SetupStage+0x4a>
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d00a      	beq.n	800e356 <USBD_LL_SetupStage+0x5e>
 800e340:	e01d      	b.n	800e37e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e348:	4619      	mov	r1, r3
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fb2c 	bl	800e9a8 <USBD_StdDevReq>
 800e350:	4603      	mov	r3, r0
 800e352:	73fb      	strb	r3, [r7, #15]
      break;
 800e354:	e020      	b.n	800e398 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e35c:	4619      	mov	r1, r3
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 fb94 	bl	800ea8c <USBD_StdItfReq>
 800e364:	4603      	mov	r3, r0
 800e366:	73fb      	strb	r3, [r7, #15]
      break;
 800e368:	e016      	b.n	800e398 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e370:	4619      	mov	r1, r3
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 fbf6 	bl	800eb64 <USBD_StdEPReq>
 800e378:	4603      	mov	r3, r0
 800e37a:	73fb      	strb	r3, [r7, #15]
      break;
 800e37c:	e00c      	b.n	800e398 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e384:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	4619      	mov	r1, r3
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f001 fd89 	bl	800fea4 <USBD_LL_StallEP>
 800e392:	4603      	mov	r3, r0
 800e394:	73fb      	strb	r3, [r7, #15]
      break;
 800e396:	bf00      	nop
  }

  return ret;
 800e398:	7bfb      	ldrb	r3, [r7, #15]
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b086      	sub	sp, #24
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	60f8      	str	r0, [r7, #12]
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	607a      	str	r2, [r7, #4]
 800e3ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e3b4:	7afb      	ldrb	r3, [r7, #11]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d16e      	bne.n	800e498 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e3c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e3c8:	2b03      	cmp	r3, #3
 800e3ca:	f040 8098 	bne.w	800e4fe <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	689a      	ldr	r2, [r3, #8]
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d913      	bls.n	800e402 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	689a      	ldr	r2, [r3, #8]
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	1ad2      	subs	r2, r2, r3
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	68da      	ldr	r2, [r3, #12]
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	689b      	ldr	r3, [r3, #8]
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	bf28      	it	cs
 800e3f4:	4613      	movcs	r3, r2
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	6879      	ldr	r1, [r7, #4]
 800e3fa:	68f8      	ldr	r0, [r7, #12]
 800e3fc:	f001 f9ad 	bl	800f75a <USBD_CtlContinueRx>
 800e400:	e07d      	b.n	800e4fe <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e408:	f003 031f 	and.w	r3, r3, #31
 800e40c:	2b02      	cmp	r3, #2
 800e40e:	d014      	beq.n	800e43a <USBD_LL_DataOutStage+0x98>
 800e410:	2b02      	cmp	r3, #2
 800e412:	d81d      	bhi.n	800e450 <USBD_LL_DataOutStage+0xae>
 800e414:	2b00      	cmp	r3, #0
 800e416:	d002      	beq.n	800e41e <USBD_LL_DataOutStage+0x7c>
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d003      	beq.n	800e424 <USBD_LL_DataOutStage+0x82>
 800e41c:	e018      	b.n	800e450 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e41e:	2300      	movs	r3, #0
 800e420:	75bb      	strb	r3, [r7, #22]
            break;
 800e422:	e018      	b.n	800e456 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	4619      	mov	r1, r3
 800e42e:	68f8      	ldr	r0, [r7, #12]
 800e430:	f000 fa64 	bl	800e8fc <USBD_CoreFindIF>
 800e434:	4603      	mov	r3, r0
 800e436:	75bb      	strb	r3, [r7, #22]
            break;
 800e438:	e00d      	b.n	800e456 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e440:	b2db      	uxtb	r3, r3
 800e442:	4619      	mov	r1, r3
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f000 fa66 	bl	800e916 <USBD_CoreFindEP>
 800e44a:	4603      	mov	r3, r0
 800e44c:	75bb      	strb	r3, [r7, #22]
            break;
 800e44e:	e002      	b.n	800e456 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e450:	2300      	movs	r3, #0
 800e452:	75bb      	strb	r3, [r7, #22]
            break;
 800e454:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e456:	7dbb      	ldrb	r3, [r7, #22]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d119      	bne.n	800e490 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e462:	b2db      	uxtb	r3, r3
 800e464:	2b03      	cmp	r3, #3
 800e466:	d113      	bne.n	800e490 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e468:	7dba      	ldrb	r2, [r7, #22]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	32ae      	adds	r2, #174	; 0xae
 800e46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e472:	691b      	ldr	r3, [r3, #16]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d00b      	beq.n	800e490 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e478:	7dba      	ldrb	r2, [r7, #22]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e480:	7dba      	ldrb	r2, [r7, #22]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	32ae      	adds	r2, #174	; 0xae
 800e486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e48a:	691b      	ldr	r3, [r3, #16]
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e490:	68f8      	ldr	r0, [r7, #12]
 800e492:	f001 f973 	bl	800f77c <USBD_CtlSendStatus>
 800e496:	e032      	b.n	800e4fe <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e498:	7afb      	ldrb	r3, [r7, #11]
 800e49a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f000 fa37 	bl	800e916 <USBD_CoreFindEP>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e4ac:	7dbb      	ldrb	r3, [r7, #22]
 800e4ae:	2bff      	cmp	r3, #255	; 0xff
 800e4b0:	d025      	beq.n	800e4fe <USBD_LL_DataOutStage+0x15c>
 800e4b2:	7dbb      	ldrb	r3, [r7, #22]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d122      	bne.n	800e4fe <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	2b03      	cmp	r3, #3
 800e4c2:	d117      	bne.n	800e4f4 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e4c4:	7dba      	ldrb	r2, [r7, #22]
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	32ae      	adds	r2, #174	; 0xae
 800e4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ce:	699b      	ldr	r3, [r3, #24]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d00f      	beq.n	800e4f4 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e4d4:	7dba      	ldrb	r2, [r7, #22]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e4dc:	7dba      	ldrb	r2, [r7, #22]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	32ae      	adds	r2, #174	; 0xae
 800e4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4e6:	699b      	ldr	r3, [r3, #24]
 800e4e8:	7afa      	ldrb	r2, [r7, #11]
 800e4ea:	4611      	mov	r1, r2
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	4798      	blx	r3
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e4f4:	7dfb      	ldrb	r3, [r7, #23]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d001      	beq.n	800e4fe <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e4fa:	7dfb      	ldrb	r3, [r7, #23]
 800e4fc:	e000      	b.n	800e500 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e4fe:	2300      	movs	r3, #0
}
 800e500:	4618      	mov	r0, r3
 800e502:	3718      	adds	r7, #24
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b086      	sub	sp, #24
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	460b      	mov	r3, r1
 800e512:	607a      	str	r2, [r7, #4]
 800e514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e516:	7afb      	ldrb	r3, [r7, #11]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d16f      	bne.n	800e5fc <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	3314      	adds	r3, #20
 800e520:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e528:	2b02      	cmp	r3, #2
 800e52a:	d15a      	bne.n	800e5e2 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	689a      	ldr	r2, [r3, #8]
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	429a      	cmp	r2, r3
 800e536:	d914      	bls.n	800e562 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	689a      	ldr	r2, [r3, #8]
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	1ad2      	subs	r2, r2, r3
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	461a      	mov	r2, r3
 800e54c:	6879      	ldr	r1, [r7, #4]
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f001 f8d5 	bl	800f6fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e554:	2300      	movs	r3, #0
 800e556:	2200      	movs	r2, #0
 800e558:	2100      	movs	r1, #0
 800e55a:	68f8      	ldr	r0, [r7, #12]
 800e55c:	f001 fd4c 	bl	800fff8 <USBD_LL_PrepareReceive>
 800e560:	e03f      	b.n	800e5e2 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	68da      	ldr	r2, [r3, #12]
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	689b      	ldr	r3, [r3, #8]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d11c      	bne.n	800e5a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	685a      	ldr	r2, [r3, #4]
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e576:	429a      	cmp	r2, r3
 800e578:	d316      	bcc.n	800e5a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	685a      	ldr	r2, [r3, #4]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e584:	429a      	cmp	r2, r3
 800e586:	d20f      	bcs.n	800e5a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e588:	2200      	movs	r2, #0
 800e58a:	2100      	movs	r1, #0
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f001 f8b6 	bl	800f6fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2200      	movs	r2, #0
 800e596:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e59a:	2300      	movs	r3, #0
 800e59c:	2200      	movs	r2, #0
 800e59e:	2100      	movs	r1, #0
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	f001 fd29 	bl	800fff8 <USBD_LL_PrepareReceive>
 800e5a6:	e01c      	b.n	800e5e2 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b03      	cmp	r3, #3
 800e5b2:	d10f      	bne.n	800e5d4 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d009      	beq.n	800e5d4 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	68f8      	ldr	r0, [r7, #12]
 800e5d2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5d4:	2180      	movs	r1, #128	; 0x80
 800e5d6:	68f8      	ldr	r0, [r7, #12]
 800e5d8:	f001 fc64 	bl	800fea4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f001 f8e0 	bl	800f7a2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d03a      	beq.n	800e662 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e5ec:	68f8      	ldr	r0, [r7, #12]
 800e5ee:	f7ff fe42 	bl	800e276 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e5fa:	e032      	b.n	800e662 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e5fc:	7afb      	ldrb	r3, [r7, #11]
 800e5fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e602:	b2db      	uxtb	r3, r3
 800e604:	4619      	mov	r1, r3
 800e606:	68f8      	ldr	r0, [r7, #12]
 800e608:	f000 f985 	bl	800e916 <USBD_CoreFindEP>
 800e60c:	4603      	mov	r3, r0
 800e60e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e610:	7dfb      	ldrb	r3, [r7, #23]
 800e612:	2bff      	cmp	r3, #255	; 0xff
 800e614:	d025      	beq.n	800e662 <USBD_LL_DataInStage+0x15a>
 800e616:	7dfb      	ldrb	r3, [r7, #23]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d122      	bne.n	800e662 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e622:	b2db      	uxtb	r3, r3
 800e624:	2b03      	cmp	r3, #3
 800e626:	d11c      	bne.n	800e662 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e628:	7dfa      	ldrb	r2, [r7, #23]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	32ae      	adds	r2, #174	; 0xae
 800e62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e632:	695b      	ldr	r3, [r3, #20]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d014      	beq.n	800e662 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e638:	7dfa      	ldrb	r2, [r7, #23]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e640:	7dfa      	ldrb	r2, [r7, #23]
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	32ae      	adds	r2, #174	; 0xae
 800e646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e64a:	695b      	ldr	r3, [r3, #20]
 800e64c:	7afa      	ldrb	r2, [r7, #11]
 800e64e:	4611      	mov	r1, r2
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	4798      	blx	r3
 800e654:	4603      	mov	r3, r0
 800e656:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e658:	7dbb      	ldrb	r3, [r7, #22]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d001      	beq.n	800e662 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e65e:	7dbb      	ldrb	r3, [r7, #22]
 800e660:	e000      	b.n	800e664 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e662:	2300      	movs	r3, #0
}
 800e664:	4618      	mov	r0, r3
 800e666:	3718      	adds	r7, #24
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}

0800e66c <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e674:	2300      	movs	r3, #0
 800e676:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2201      	movs	r2, #1
 800e67c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2200      	movs	r2, #0
 800e684:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2200      	movs	r2, #0
 800e692:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2200      	movs	r2, #0
 800e69a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d014      	beq.n	800e6d2 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d00e      	beq.n	800e6d2 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	6852      	ldr	r2, [r2, #4]
 800e6c0:	b2d2      	uxtb	r2, r2
 800e6c2:	4611      	mov	r1, r2
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	4798      	blx	r3
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d001      	beq.n	800e6d2 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e6ce:	2303      	movs	r3, #3
 800e6d0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e6d2:	2340      	movs	r3, #64	; 0x40
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f001 fbbd 	bl	800fe58 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2240      	movs	r2, #64	; 0x40
 800e6ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e6ee:	2340      	movs	r3, #64	; 0x40
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	2180      	movs	r1, #128	; 0x80
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f001 fbaf 	bl	800fe58 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2240      	movs	r2, #64	; 0x40
 800e704:	621a      	str	r2, [r3, #32]

  return ret;
 800e706:	7bfb      	ldrb	r3, [r7, #15]
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3710      	adds	r7, #16
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e710:	b480      	push	{r7}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	460b      	mov	r3, r1
 800e71a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	78fa      	ldrb	r2, [r7, #3]
 800e720:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e722:	2300      	movs	r3, #0
}
 800e724:	4618      	mov	r0, r3
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	2b04      	cmp	r3, #4
 800e742:	d006      	beq.n	800e752 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e74a:	b2da      	uxtb	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2204      	movs	r2, #4
 800e756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e75a:	2300      	movs	r3, #0
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	370c      	adds	r7, #12
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e776:	b2db      	uxtb	r3, r3
 800e778:	2b04      	cmp	r3, #4
 800e77a:	d106      	bne.n	800e78a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e782:	b2da      	uxtb	r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	2b03      	cmp	r3, #3
 800e7aa:	d110      	bne.n	800e7ce <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d00b      	beq.n	800e7ce <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7bc:	69db      	ldr	r3, [r3, #28]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d005      	beq.n	800e7ce <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7c8:	69db      	ldr	r3, [r3, #28]
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e7ce:	2300      	movs	r3, #0
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	32ae      	adds	r2, #174	; 0xae
 800e7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d101      	bne.n	800e7fa <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e7f6:	2303      	movs	r3, #3
 800e7f8:	e01c      	b.n	800e834 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e800:	b2db      	uxtb	r3, r3
 800e802:	2b03      	cmp	r3, #3
 800e804:	d115      	bne.n	800e832 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	32ae      	adds	r2, #174	; 0xae
 800e810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e814:	6a1b      	ldr	r3, [r3, #32]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d00b      	beq.n	800e832 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	32ae      	adds	r2, #174	; 0xae
 800e824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e828:	6a1b      	ldr	r3, [r3, #32]
 800e82a:	78fa      	ldrb	r2, [r7, #3]
 800e82c:	4611      	mov	r1, r2
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	3708      	adds	r7, #8
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	460b      	mov	r3, r1
 800e846:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	32ae      	adds	r2, #174	; 0xae
 800e852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d101      	bne.n	800e85e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e85a:	2303      	movs	r3, #3
 800e85c:	e01c      	b.n	800e898 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e864:	b2db      	uxtb	r3, r3
 800e866:	2b03      	cmp	r3, #3
 800e868:	d115      	bne.n	800e896 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	32ae      	adds	r2, #174	; 0xae
 800e874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d00b      	beq.n	800e896 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	32ae      	adds	r2, #174	; 0xae
 800e888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e88e:	78fa      	ldrb	r2, [r7, #3]
 800e890:	4611      	mov	r1, r2
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3708      	adds	r7, #8
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	370c      	adds	r7, #12
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr

0800e8b6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b084      	sub	sp, #16
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00e      	beq.n	800e8f2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	687a      	ldr	r2, [r7, #4]
 800e8de:	6852      	ldr	r2, [r2, #4]
 800e8e0:	b2d2      	uxtb	r2, r2
 800e8e2:	4611      	mov	r1, r2
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	4798      	blx	r3
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d001      	beq.n	800e8f2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	460b      	mov	r3, r1
 800e906:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e908:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	370c      	adds	r7, #12
 800e90e:	46bd      	mov	sp, r7
 800e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e914:	4770      	bx	lr

0800e916 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e916:	b480      	push	{r7}
 800e918:	b083      	sub	sp, #12
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
 800e91e:	460b      	mov	r3, r1
 800e920:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e922:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e924:	4618      	mov	r0, r3
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e930:	b480      	push	{r7}
 800e932:	b085      	sub	sp, #20
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	881a      	ldrh	r2, [r3, #0]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	b29b      	uxth	r3, r3
 800e948:	4413      	add	r3, r2
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	461a      	mov	r2, r3
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4413      	add	r3, r2
 800e95a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e95c:	68fb      	ldr	r3, [r7, #12]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3714      	adds	r7, #20
 800e962:	46bd      	mov	sp, r7
 800e964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e968:	4770      	bx	lr

0800e96a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e96a:	b480      	push	{r7}
 800e96c:	b087      	sub	sp, #28
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	3301      	adds	r3, #1
 800e980:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e988:	8a3b      	ldrh	r3, [r7, #16]
 800e98a:	021b      	lsls	r3, r3, #8
 800e98c:	b21a      	sxth	r2, r3
 800e98e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e992:	4313      	orrs	r3, r2
 800e994:	b21b      	sxth	r3, r3
 800e996:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e998:	89fb      	ldrh	r3, [r7, #14]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	371c      	adds	r7, #28
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr
	...

0800e9a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9be:	2b40      	cmp	r3, #64	; 0x40
 800e9c0:	d005      	beq.n	800e9ce <USBD_StdDevReq+0x26>
 800e9c2:	2b40      	cmp	r3, #64	; 0x40
 800e9c4:	d857      	bhi.n	800ea76 <USBD_StdDevReq+0xce>
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00f      	beq.n	800e9ea <USBD_StdDevReq+0x42>
 800e9ca:	2b20      	cmp	r3, #32
 800e9cc:	d153      	bne.n	800ea76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	32ae      	adds	r2, #174	; 0xae
 800e9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9dc:	689b      	ldr	r3, [r3, #8]
 800e9de:	6839      	ldr	r1, [r7, #0]
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	4798      	blx	r3
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	73fb      	strb	r3, [r7, #15]
      break;
 800e9e8:	e04a      	b.n	800ea80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	785b      	ldrb	r3, [r3, #1]
 800e9ee:	2b09      	cmp	r3, #9
 800e9f0:	d83b      	bhi.n	800ea6a <USBD_StdDevReq+0xc2>
 800e9f2:	a201      	add	r2, pc, #4	; (adr r2, 800e9f8 <USBD_StdDevReq+0x50>)
 800e9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f8:	0800ea4d 	.word	0x0800ea4d
 800e9fc:	0800ea61 	.word	0x0800ea61
 800ea00:	0800ea6b 	.word	0x0800ea6b
 800ea04:	0800ea57 	.word	0x0800ea57
 800ea08:	0800ea6b 	.word	0x0800ea6b
 800ea0c:	0800ea2b 	.word	0x0800ea2b
 800ea10:	0800ea21 	.word	0x0800ea21
 800ea14:	0800ea6b 	.word	0x0800ea6b
 800ea18:	0800ea43 	.word	0x0800ea43
 800ea1c:	0800ea35 	.word	0x0800ea35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ea20:	6839      	ldr	r1, [r7, #0]
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 fa3c 	bl	800eea0 <USBD_GetDescriptor>
          break;
 800ea28:	e024      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ea2a:	6839      	ldr	r1, [r7, #0]
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 fbf1 	bl	800f214 <USBD_SetAddress>
          break;
 800ea32:	e01f      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ea34:	6839      	ldr	r1, [r7, #0]
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f000 fc30 	bl	800f29c <USBD_SetConfig>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	73fb      	strb	r3, [r7, #15]
          break;
 800ea40:	e018      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ea42:	6839      	ldr	r1, [r7, #0]
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 fcd3 	bl	800f3f0 <USBD_GetConfig>
          break;
 800ea4a:	e013      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ea4c:	6839      	ldr	r1, [r7, #0]
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 fd04 	bl	800f45c <USBD_GetStatus>
          break;
 800ea54:	e00e      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ea56:	6839      	ldr	r1, [r7, #0]
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 fd33 	bl	800f4c4 <USBD_SetFeature>
          break;
 800ea5e:	e009      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ea60:	6839      	ldr	r1, [r7, #0]
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 fd57 	bl	800f516 <USBD_ClrFeature>
          break;
 800ea68:	e004      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ea6a:	6839      	ldr	r1, [r7, #0]
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f000 fdae 	bl	800f5ce <USBD_CtlError>
          break;
 800ea72:	bf00      	nop
      }
      break;
 800ea74:	e004      	b.n	800ea80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ea76:	6839      	ldr	r1, [r7, #0]
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f000 fda8 	bl	800f5ce <USBD_CtlError>
      break;
 800ea7e:	bf00      	nop
  }

  return ret;
 800ea80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop

0800ea8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea96:	2300      	movs	r3, #0
 800ea98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eaa2:	2b40      	cmp	r3, #64	; 0x40
 800eaa4:	d005      	beq.n	800eab2 <USBD_StdItfReq+0x26>
 800eaa6:	2b40      	cmp	r3, #64	; 0x40
 800eaa8:	d852      	bhi.n	800eb50 <USBD_StdItfReq+0xc4>
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d001      	beq.n	800eab2 <USBD_StdItfReq+0x26>
 800eaae:	2b20      	cmp	r3, #32
 800eab0:	d14e      	bne.n	800eb50 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	3b01      	subs	r3, #1
 800eabc:	2b02      	cmp	r3, #2
 800eabe:	d840      	bhi.n	800eb42 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	889b      	ldrh	r3, [r3, #4]
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d836      	bhi.n	800eb38 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	889b      	ldrh	r3, [r3, #4]
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	4619      	mov	r1, r3
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f7ff ff12 	bl	800e8fc <USBD_CoreFindIF>
 800ead8:	4603      	mov	r3, r0
 800eada:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eadc:	7bbb      	ldrb	r3, [r7, #14]
 800eade:	2bff      	cmp	r3, #255	; 0xff
 800eae0:	d01d      	beq.n	800eb1e <USBD_StdItfReq+0x92>
 800eae2:	7bbb      	ldrb	r3, [r7, #14]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d11a      	bne.n	800eb1e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800eae8:	7bba      	ldrb	r2, [r7, #14]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	32ae      	adds	r2, #174	; 0xae
 800eaee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaf2:	689b      	ldr	r3, [r3, #8]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d00f      	beq.n	800eb18 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800eaf8:	7bba      	ldrb	r2, [r7, #14]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800eb00:	7bba      	ldrb	r2, [r7, #14]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	32ae      	adds	r2, #174	; 0xae
 800eb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	6839      	ldr	r1, [r7, #0]
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	4798      	blx	r3
 800eb12:	4603      	mov	r3, r0
 800eb14:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800eb16:	e004      	b.n	800eb22 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800eb18:	2303      	movs	r3, #3
 800eb1a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800eb1c:	e001      	b.n	800eb22 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800eb1e:	2303      	movs	r3, #3
 800eb20:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	88db      	ldrh	r3, [r3, #6]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d110      	bne.n	800eb4c <USBD_StdItfReq+0xc0>
 800eb2a:	7bfb      	ldrb	r3, [r7, #15]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d10d      	bne.n	800eb4c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 fe23 	bl	800f77c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800eb36:	e009      	b.n	800eb4c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800eb38:	6839      	ldr	r1, [r7, #0]
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 fd47 	bl	800f5ce <USBD_CtlError>
          break;
 800eb40:	e004      	b.n	800eb4c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800eb42:	6839      	ldr	r1, [r7, #0]
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 fd42 	bl	800f5ce <USBD_CtlError>
          break;
 800eb4a:	e000      	b.n	800eb4e <USBD_StdItfReq+0xc2>
          break;
 800eb4c:	bf00      	nop
      }
      break;
 800eb4e:	e004      	b.n	800eb5a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800eb50:	6839      	ldr	r1, [r7, #0]
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fd3b 	bl	800f5ce <USBD_CtlError>
      break;
 800eb58:	bf00      	nop
  }

  return ret;
 800eb5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3710      	adds	r7, #16
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	889b      	ldrh	r3, [r3, #4]
 800eb76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb80:	2b40      	cmp	r3, #64	; 0x40
 800eb82:	d007      	beq.n	800eb94 <USBD_StdEPReq+0x30>
 800eb84:	2b40      	cmp	r3, #64	; 0x40
 800eb86:	f200 817f 	bhi.w	800ee88 <USBD_StdEPReq+0x324>
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d02a      	beq.n	800ebe4 <USBD_StdEPReq+0x80>
 800eb8e:	2b20      	cmp	r3, #32
 800eb90:	f040 817a 	bne.w	800ee88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800eb94:	7bbb      	ldrb	r3, [r7, #14]
 800eb96:	4619      	mov	r1, r3
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f7ff febc 	bl	800e916 <USBD_CoreFindEP>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eba2:	7b7b      	ldrb	r3, [r7, #13]
 800eba4:	2bff      	cmp	r3, #255	; 0xff
 800eba6:	f000 8174 	beq.w	800ee92 <USBD_StdEPReq+0x32e>
 800ebaa:	7b7b      	ldrb	r3, [r7, #13]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	f040 8170 	bne.w	800ee92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ebb2:	7b7a      	ldrb	r2, [r7, #13]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ebba:	7b7a      	ldrb	r2, [r7, #13]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	32ae      	adds	r2, #174	; 0xae
 800ebc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebc4:	689b      	ldr	r3, [r3, #8]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	f000 8163 	beq.w	800ee92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ebcc:	7b7a      	ldrb	r2, [r7, #13]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	32ae      	adds	r2, #174	; 0xae
 800ebd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	6839      	ldr	r1, [r7, #0]
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	4798      	blx	r3
 800ebde:	4603      	mov	r3, r0
 800ebe0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ebe2:	e156      	b.n	800ee92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	785b      	ldrb	r3, [r3, #1]
 800ebe8:	2b03      	cmp	r3, #3
 800ebea:	d008      	beq.n	800ebfe <USBD_StdEPReq+0x9a>
 800ebec:	2b03      	cmp	r3, #3
 800ebee:	f300 8145 	bgt.w	800ee7c <USBD_StdEPReq+0x318>
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f000 809b 	beq.w	800ed2e <USBD_StdEPReq+0x1ca>
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d03c      	beq.n	800ec76 <USBD_StdEPReq+0x112>
 800ebfc:	e13e      	b.n	800ee7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	2b02      	cmp	r3, #2
 800ec08:	d002      	beq.n	800ec10 <USBD_StdEPReq+0xac>
 800ec0a:	2b03      	cmp	r3, #3
 800ec0c:	d016      	beq.n	800ec3c <USBD_StdEPReq+0xd8>
 800ec0e:	e02c      	b.n	800ec6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec10:	7bbb      	ldrb	r3, [r7, #14]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d00d      	beq.n	800ec32 <USBD_StdEPReq+0xce>
 800ec16:	7bbb      	ldrb	r3, [r7, #14]
 800ec18:	2b80      	cmp	r3, #128	; 0x80
 800ec1a:	d00a      	beq.n	800ec32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec1c:	7bbb      	ldrb	r3, [r7, #14]
 800ec1e:	4619      	mov	r1, r3
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f001 f93f 	bl	800fea4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec26:	2180      	movs	r1, #128	; 0x80
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f001 f93b 	bl	800fea4 <USBD_LL_StallEP>
 800ec2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ec30:	e020      	b.n	800ec74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ec32:	6839      	ldr	r1, [r7, #0]
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 fcca 	bl	800f5ce <USBD_CtlError>
              break;
 800ec3a:	e01b      	b.n	800ec74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	885b      	ldrh	r3, [r3, #2]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d10e      	bne.n	800ec62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ec44:	7bbb      	ldrb	r3, [r7, #14]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d00b      	beq.n	800ec62 <USBD_StdEPReq+0xfe>
 800ec4a:	7bbb      	ldrb	r3, [r7, #14]
 800ec4c:	2b80      	cmp	r3, #128	; 0x80
 800ec4e:	d008      	beq.n	800ec62 <USBD_StdEPReq+0xfe>
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	88db      	ldrh	r3, [r3, #6]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d104      	bne.n	800ec62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec58:	7bbb      	ldrb	r3, [r7, #14]
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f001 f921 	bl	800fea4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 fd8a 	bl	800f77c <USBD_CtlSendStatus>

              break;
 800ec68:	e004      	b.n	800ec74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ec6a:	6839      	ldr	r1, [r7, #0]
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 fcae 	bl	800f5ce <USBD_CtlError>
              break;
 800ec72:	bf00      	nop
          }
          break;
 800ec74:	e107      	b.n	800ee86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec7c:	b2db      	uxtb	r3, r3
 800ec7e:	2b02      	cmp	r3, #2
 800ec80:	d002      	beq.n	800ec88 <USBD_StdEPReq+0x124>
 800ec82:	2b03      	cmp	r3, #3
 800ec84:	d016      	beq.n	800ecb4 <USBD_StdEPReq+0x150>
 800ec86:	e04b      	b.n	800ed20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec88:	7bbb      	ldrb	r3, [r7, #14]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d00d      	beq.n	800ecaa <USBD_StdEPReq+0x146>
 800ec8e:	7bbb      	ldrb	r3, [r7, #14]
 800ec90:	2b80      	cmp	r3, #128	; 0x80
 800ec92:	d00a      	beq.n	800ecaa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec94:	7bbb      	ldrb	r3, [r7, #14]
 800ec96:	4619      	mov	r1, r3
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f001 f903 	bl	800fea4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec9e:	2180      	movs	r1, #128	; 0x80
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f001 f8ff 	bl	800fea4 <USBD_LL_StallEP>
 800eca6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eca8:	e040      	b.n	800ed2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ecaa:	6839      	ldr	r1, [r7, #0]
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f000 fc8e 	bl	800f5ce <USBD_CtlError>
              break;
 800ecb2:	e03b      	b.n	800ed2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	885b      	ldrh	r3, [r3, #2]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d136      	bne.n	800ed2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ecbc:	7bbb      	ldrb	r3, [r7, #14]
 800ecbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d004      	beq.n	800ecd0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ecc6:	7bbb      	ldrb	r3, [r7, #14]
 800ecc8:	4619      	mov	r1, r3
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f001 f909 	bl	800fee2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f000 fd53 	bl	800f77c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ecd6:	7bbb      	ldrb	r3, [r7, #14]
 800ecd8:	4619      	mov	r1, r3
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7ff fe1b 	bl	800e916 <USBD_CoreFindEP>
 800ece0:	4603      	mov	r3, r0
 800ece2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ece4:	7b7b      	ldrb	r3, [r7, #13]
 800ece6:	2bff      	cmp	r3, #255	; 0xff
 800ece8:	d01f      	beq.n	800ed2a <USBD_StdEPReq+0x1c6>
 800ecea:	7b7b      	ldrb	r3, [r7, #13]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d11c      	bne.n	800ed2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ecf0:	7b7a      	ldrb	r2, [r7, #13]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ecf8:	7b7a      	ldrb	r2, [r7, #13]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	32ae      	adds	r2, #174	; 0xae
 800ecfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d010      	beq.n	800ed2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ed08:	7b7a      	ldrb	r2, [r7, #13]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	32ae      	adds	r2, #174	; 0xae
 800ed0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed12:	689b      	ldr	r3, [r3, #8]
 800ed14:	6839      	ldr	r1, [r7, #0]
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	4798      	blx	r3
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ed1e:	e004      	b.n	800ed2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ed20:	6839      	ldr	r1, [r7, #0]
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 fc53 	bl	800f5ce <USBD_CtlError>
              break;
 800ed28:	e000      	b.n	800ed2c <USBD_StdEPReq+0x1c8>
              break;
 800ed2a:	bf00      	nop
          }
          break;
 800ed2c:	e0ab      	b.n	800ee86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	2b02      	cmp	r3, #2
 800ed38:	d002      	beq.n	800ed40 <USBD_StdEPReq+0x1dc>
 800ed3a:	2b03      	cmp	r3, #3
 800ed3c:	d032      	beq.n	800eda4 <USBD_StdEPReq+0x240>
 800ed3e:	e097      	b.n	800ee70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed40:	7bbb      	ldrb	r3, [r7, #14]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d007      	beq.n	800ed56 <USBD_StdEPReq+0x1f2>
 800ed46:	7bbb      	ldrb	r3, [r7, #14]
 800ed48:	2b80      	cmp	r3, #128	; 0x80
 800ed4a:	d004      	beq.n	800ed56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ed4c:	6839      	ldr	r1, [r7, #0]
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 fc3d 	bl	800f5ce <USBD_CtlError>
                break;
 800ed54:	e091      	b.n	800ee7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	da0b      	bge.n	800ed76 <USBD_StdEPReq+0x212>
 800ed5e:	7bbb      	ldrb	r3, [r7, #14]
 800ed60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed64:	4613      	mov	r3, r2
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	4413      	add	r3, r2
 800ed6a:	009b      	lsls	r3, r3, #2
 800ed6c:	3310      	adds	r3, #16
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	4413      	add	r3, r2
 800ed72:	3304      	adds	r3, #4
 800ed74:	e00b      	b.n	800ed8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ed76:	7bbb      	ldrb	r3, [r7, #14]
 800ed78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	4413      	add	r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	3304      	adds	r3, #4
 800ed8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	2200      	movs	r2, #0
 800ed94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	2202      	movs	r2, #2
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 fc93 	bl	800f6c8 <USBD_CtlSendData>
              break;
 800eda2:	e06a      	b.n	800ee7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800eda4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	da11      	bge.n	800edd0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800edac:	7bbb      	ldrb	r3, [r7, #14]
 800edae:	f003 020f 	and.w	r2, r3, #15
 800edb2:	6879      	ldr	r1, [r7, #4]
 800edb4:	4613      	mov	r3, r2
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	4413      	add	r3, r2
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	440b      	add	r3, r1
 800edbe:	3324      	adds	r3, #36	; 0x24
 800edc0:	881b      	ldrh	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d117      	bne.n	800edf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800edc6:	6839      	ldr	r1, [r7, #0]
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 fc00 	bl	800f5ce <USBD_CtlError>
                  break;
 800edce:	e054      	b.n	800ee7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800edd0:	7bbb      	ldrb	r3, [r7, #14]
 800edd2:	f003 020f 	and.w	r2, r3, #15
 800edd6:	6879      	ldr	r1, [r7, #4]
 800edd8:	4613      	mov	r3, r2
 800edda:	009b      	lsls	r3, r3, #2
 800eddc:	4413      	add	r3, r2
 800edde:	009b      	lsls	r3, r3, #2
 800ede0:	440b      	add	r3, r1
 800ede2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ede6:	881b      	ldrh	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d104      	bne.n	800edf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800edec:	6839      	ldr	r1, [r7, #0]
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f000 fbed 	bl	800f5ce <USBD_CtlError>
                  break;
 800edf4:	e041      	b.n	800ee7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800edf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	da0b      	bge.n	800ee16 <USBD_StdEPReq+0x2b2>
 800edfe:	7bbb      	ldrb	r3, [r7, #14]
 800ee00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ee04:	4613      	mov	r3, r2
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	4413      	add	r3, r2
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	3310      	adds	r3, #16
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	4413      	add	r3, r2
 800ee12:	3304      	adds	r3, #4
 800ee14:	e00b      	b.n	800ee2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ee16:	7bbb      	ldrb	r3, [r7, #14]
 800ee18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	4413      	add	r3, r2
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	4413      	add	r3, r2
 800ee2c:	3304      	adds	r3, #4
 800ee2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ee30:	7bbb      	ldrb	r3, [r7, #14]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d002      	beq.n	800ee3c <USBD_StdEPReq+0x2d8>
 800ee36:	7bbb      	ldrb	r3, [r7, #14]
 800ee38:	2b80      	cmp	r3, #128	; 0x80
 800ee3a:	d103      	bne.n	800ee44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	601a      	str	r2, [r3, #0]
 800ee42:	e00e      	b.n	800ee62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ee44:	7bbb      	ldrb	r3, [r7, #14]
 800ee46:	4619      	mov	r1, r3
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f001 f869 	bl	800ff20 <USBD_LL_IsStallEP>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d003      	beq.n	800ee5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	2201      	movs	r2, #1
 800ee58:	601a      	str	r2, [r3, #0]
 800ee5a:	e002      	b.n	800ee62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	2202      	movs	r2, #2
 800ee66:	4619      	mov	r1, r3
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 fc2d 	bl	800f6c8 <USBD_CtlSendData>
              break;
 800ee6e:	e004      	b.n	800ee7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ee70:	6839      	ldr	r1, [r7, #0]
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 fbab 	bl	800f5ce <USBD_CtlError>
              break;
 800ee78:	bf00      	nop
          }
          break;
 800ee7a:	e004      	b.n	800ee86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ee7c:	6839      	ldr	r1, [r7, #0]
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 fba5 	bl	800f5ce <USBD_CtlError>
          break;
 800ee84:	bf00      	nop
      }
      break;
 800ee86:	e005      	b.n	800ee94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ee88:	6839      	ldr	r1, [r7, #0]
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 fb9f 	bl	800f5ce <USBD_CtlError>
      break;
 800ee90:	e000      	b.n	800ee94 <USBD_StdEPReq+0x330>
      break;
 800ee92:	bf00      	nop
  }

  return ret;
 800ee94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
	...

0800eea0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b086      	sub	sp, #24
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	885b      	ldrh	r3, [r3, #2]
 800eeba:	0a1b      	lsrs	r3, r3, #8
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	3b01      	subs	r3, #1
 800eec0:	2b0e      	cmp	r3, #14
 800eec2:	f200 8179 	bhi.w	800f1b8 <USBD_GetDescriptor+0x318>
 800eec6:	a201      	add	r2, pc, #4	; (adr r2, 800eecc <USBD_GetDescriptor+0x2c>)
 800eec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eecc:	0800ef3d 	.word	0x0800ef3d
 800eed0:	0800ef55 	.word	0x0800ef55
 800eed4:	0800ef95 	.word	0x0800ef95
 800eed8:	0800f1b9 	.word	0x0800f1b9
 800eedc:	0800f1b9 	.word	0x0800f1b9
 800eee0:	0800f159 	.word	0x0800f159
 800eee4:	0800f185 	.word	0x0800f185
 800eee8:	0800f1b9 	.word	0x0800f1b9
 800eeec:	0800f1b9 	.word	0x0800f1b9
 800eef0:	0800f1b9 	.word	0x0800f1b9
 800eef4:	0800f1b9 	.word	0x0800f1b9
 800eef8:	0800f1b9 	.word	0x0800f1b9
 800eefc:	0800f1b9 	.word	0x0800f1b9
 800ef00:	0800f1b9 	.word	0x0800f1b9
 800ef04:	0800ef09 	.word	0x0800ef09
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef0e:	69db      	ldr	r3, [r3, #28]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d00b      	beq.n	800ef2c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef1a:	69db      	ldr	r3, [r3, #28]
 800ef1c:	687a      	ldr	r2, [r7, #4]
 800ef1e:	7c12      	ldrb	r2, [r2, #16]
 800ef20:	f107 010a 	add.w	r1, r7, #10
 800ef24:	4610      	mov	r0, r2
 800ef26:	4798      	blx	r3
 800ef28:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef2a:	e14d      	b.n	800f1c8 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 800ef2c:	6839      	ldr	r1, [r7, #0]
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f000 fb4d 	bl	800f5ce <USBD_CtlError>
        err++;
 800ef34:	7cfb      	ldrb	r3, [r7, #19]
 800ef36:	3301      	adds	r3, #1
 800ef38:	74fb      	strb	r3, [r7, #19]
      break;
 800ef3a:	e145      	b.n	800f1c8 <USBD_GetDescriptor+0x328>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	7c12      	ldrb	r2, [r2, #16]
 800ef48:	f107 010a 	add.w	r1, r7, #10
 800ef4c:	4610      	mov	r0, r2
 800ef4e:	4798      	blx	r3
 800ef50:	6178      	str	r0, [r7, #20]
      break;
 800ef52:	e139      	b.n	800f1c8 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	7c1b      	ldrb	r3, [r3, #16]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10d      	bne.n	800ef78 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef64:	f107 020a 	add.w	r2, r7, #10
 800ef68:	4610      	mov	r0, r2
 800ef6a:	4798      	blx	r3
 800ef6c:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	3301      	adds	r3, #1
 800ef72:	2202      	movs	r2, #2
 800ef74:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ef76:	e127      	b.n	800f1c8 <USBD_GetDescriptor+0x328>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef80:	f107 020a 	add.w	r2, r7, #10
 800ef84:	4610      	mov	r0, r2
 800ef86:	4798      	blx	r3
 800ef88:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	2202      	movs	r2, #2
 800ef90:	701a      	strb	r2, [r3, #0]
      break;
 800ef92:	e119      	b.n	800f1c8 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	885b      	ldrh	r3, [r3, #2]
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	2b05      	cmp	r3, #5
 800ef9c:	f200 80ac 	bhi.w	800f0f8 <USBD_GetDescriptor+0x258>
 800efa0:	a201      	add	r2, pc, #4	; (adr r2, 800efa8 <USBD_GetDescriptor+0x108>)
 800efa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa6:	bf00      	nop
 800efa8:	0800efc1 	.word	0x0800efc1
 800efac:	0800eff5 	.word	0x0800eff5
 800efb0:	0800f029 	.word	0x0800f029
 800efb4:	0800f05d 	.word	0x0800f05d
 800efb8:	0800f091 	.word	0x0800f091
 800efbc:	0800f0c5 	.word	0x0800f0c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00b      	beq.n	800efe4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	7c12      	ldrb	r2, [r2, #16]
 800efd8:	f107 010a 	add.w	r1, r7, #10
 800efdc:	4610      	mov	r0, r2
 800efde:	4798      	blx	r3
 800efe0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efe2:	e0b8      	b.n	800f156 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 faf1 	bl	800f5ce <USBD_CtlError>
            err++;
 800efec:	7cfb      	ldrb	r3, [r7, #19]
 800efee:	3301      	adds	r3, #1
 800eff0:	74fb      	strb	r3, [r7, #19]
          break;
 800eff2:	e0b0      	b.n	800f156 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800effa:	689b      	ldr	r3, [r3, #8]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00b      	beq.n	800f018 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	7c12      	ldrb	r2, [r2, #16]
 800f00c:	f107 010a 	add.w	r1, r7, #10
 800f010:	4610      	mov	r0, r2
 800f012:	4798      	blx	r3
 800f014:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f016:	e09e      	b.n	800f156 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800f018:	6839      	ldr	r1, [r7, #0]
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 fad7 	bl	800f5ce <USBD_CtlError>
            err++;
 800f020:	7cfb      	ldrb	r3, [r7, #19]
 800f022:	3301      	adds	r3, #1
 800f024:	74fb      	strb	r3, [r7, #19]
          break;
 800f026:	e096      	b.n	800f156 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d00b      	beq.n	800f04c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	7c12      	ldrb	r2, [r2, #16]
 800f040:	f107 010a 	add.w	r1, r7, #10
 800f044:	4610      	mov	r0, r2
 800f046:	4798      	blx	r3
 800f048:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f04a:	e084      	b.n	800f156 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800f04c:	6839      	ldr	r1, [r7, #0]
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 fabd 	bl	800f5ce <USBD_CtlError>
            err++;
 800f054:	7cfb      	ldrb	r3, [r7, #19]
 800f056:	3301      	adds	r3, #1
 800f058:	74fb      	strb	r3, [r7, #19]
          break;
 800f05a:	e07c      	b.n	800f156 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f062:	691b      	ldr	r3, [r3, #16]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00b      	beq.n	800f080 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f06e:	691b      	ldr	r3, [r3, #16]
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	7c12      	ldrb	r2, [r2, #16]
 800f074:	f107 010a 	add.w	r1, r7, #10
 800f078:	4610      	mov	r0, r2
 800f07a:	4798      	blx	r3
 800f07c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f07e:	e06a      	b.n	800f156 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800f080:	6839      	ldr	r1, [r7, #0]
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 faa3 	bl	800f5ce <USBD_CtlError>
            err++;
 800f088:	7cfb      	ldrb	r3, [r7, #19]
 800f08a:	3301      	adds	r3, #1
 800f08c:	74fb      	strb	r3, [r7, #19]
          break;
 800f08e:	e062      	b.n	800f156 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f096:	695b      	ldr	r3, [r3, #20]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d00b      	beq.n	800f0b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0a2:	695b      	ldr	r3, [r3, #20]
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	7c12      	ldrb	r2, [r2, #16]
 800f0a8:	f107 010a 	add.w	r1, r7, #10
 800f0ac:	4610      	mov	r0, r2
 800f0ae:	4798      	blx	r3
 800f0b0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0b2:	e050      	b.n	800f156 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800f0b4:	6839      	ldr	r1, [r7, #0]
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 fa89 	bl	800f5ce <USBD_CtlError>
            err++;
 800f0bc:	7cfb      	ldrb	r3, [r7, #19]
 800f0be:	3301      	adds	r3, #1
 800f0c0:	74fb      	strb	r3, [r7, #19]
          break;
 800f0c2:	e048      	b.n	800f156 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0ca:	699b      	ldr	r3, [r3, #24]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d00b      	beq.n	800f0e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0d6:	699b      	ldr	r3, [r3, #24]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	7c12      	ldrb	r2, [r2, #16]
 800f0dc:	f107 010a 	add.w	r1, r7, #10
 800f0e0:	4610      	mov	r0, r2
 800f0e2:	4798      	blx	r3
 800f0e4:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0e6:	e036      	b.n	800f156 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800f0e8:	6839      	ldr	r1, [r7, #0]
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 fa6f 	bl	800f5ce <USBD_CtlError>
            err++;
 800f0f0:	7cfb      	ldrb	r3, [r7, #19]
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	74fb      	strb	r3, [r7, #19]
          break;
 800f0f6:	e02e      	b.n	800f156 <USBD_GetDescriptor+0x2b6>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	617b      	str	r3, [r7, #20]

          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	60fb      	str	r3, [r7, #12]
 800f100:	e020      	b.n	800f144 <USBD_GetDescriptor+0x2a4>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	68fa      	ldr	r2, [r7, #12]
 800f106:	32ae      	adds	r2, #174	; 0xae
 800f108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d015      	beq.n	800f13e <USBD_GetDescriptor+0x29e>
            {
              pdev->classId = idx;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	68fa      	ldr	r2, [r7, #12]
 800f116:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	32ae      	adds	r2, #174	; 0xae
 800f120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f126:	683a      	ldr	r2, [r7, #0]
 800f128:	8852      	ldrh	r2, [r2, #2]
 800f12a:	b2d1      	uxtb	r1, r2
 800f12c:	f107 020a 	add.w	r2, r7, #10
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	4798      	blx	r3
 800f134:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d10a      	bne.n	800f152 <USBD_GetDescriptor+0x2b2>
              {
                continue;
 800f13c:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	3301      	adds	r3, #1
 800f142:	60fb      	str	r3, [r7, #12]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d3d8      	bcc.n	800f102 <USBD_GetDescriptor+0x262>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f150:	e000      	b.n	800f154 <USBD_GetDescriptor+0x2b4>
                break;
 800f152:	bf00      	nop
          break;
 800f154:	bf00      	nop
      }
      break;
 800f156:	e037      	b.n	800f1c8 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	7c1b      	ldrb	r3, [r3, #16]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d109      	bne.n	800f174 <USBD_GetDescriptor+0x2d4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f168:	f107 020a 	add.w	r2, r7, #10
 800f16c:	4610      	mov	r0, r2
 800f16e:	4798      	blx	r3
 800f170:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f172:	e029      	b.n	800f1c8 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 800f174:	6839      	ldr	r1, [r7, #0]
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 fa29 	bl	800f5ce <USBD_CtlError>
        err++;
 800f17c:	7cfb      	ldrb	r3, [r7, #19]
 800f17e:	3301      	adds	r3, #1
 800f180:	74fb      	strb	r3, [r7, #19]
      break;
 800f182:	e021      	b.n	800f1c8 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	7c1b      	ldrb	r3, [r3, #16]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d10d      	bne.n	800f1a8 <USBD_GetDescriptor+0x308>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f194:	f107 020a 	add.w	r2, r7, #10
 800f198:	4610      	mov	r0, r2
 800f19a:	4798      	blx	r3
 800f19c:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	2207      	movs	r2, #7
 800f1a4:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1a6:	e00f      	b.n	800f1c8 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 800f1a8:	6839      	ldr	r1, [r7, #0]
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 fa0f 	bl	800f5ce <USBD_CtlError>
        err++;
 800f1b0:	7cfb      	ldrb	r3, [r7, #19]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	74fb      	strb	r3, [r7, #19]
      break;
 800f1b6:	e007      	b.n	800f1c8 <USBD_GetDescriptor+0x328>

    default:
      USBD_CtlError(pdev, req);
 800f1b8:	6839      	ldr	r1, [r7, #0]
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f000 fa07 	bl	800f5ce <USBD_CtlError>
      err++;
 800f1c0:	7cfb      	ldrb	r3, [r7, #19]
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	74fb      	strb	r3, [r7, #19]
      break;
 800f1c6:	bf00      	nop
  }

  if (err != 0U)
 800f1c8:	7cfb      	ldrb	r3, [r7, #19]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d11e      	bne.n	800f20c <USBD_GetDescriptor+0x36c>
  {
    return;
  }

  if (req->wLength != 0U)
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	88db      	ldrh	r3, [r3, #6]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d016      	beq.n	800f204 <USBD_GetDescriptor+0x364>
  {
    if (len != 0U)
 800f1d6:	897b      	ldrh	r3, [r7, #10]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d00e      	beq.n	800f1fa <USBD_GetDescriptor+0x35a>
    {
      len = MIN(len, req->wLength);
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	88da      	ldrh	r2, [r3, #6]
 800f1e0:	897b      	ldrh	r3, [r7, #10]
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	bf28      	it	cs
 800f1e6:	4613      	movcs	r3, r2
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f1ec:	897b      	ldrh	r3, [r7, #10]
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	6979      	ldr	r1, [r7, #20]
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 fa68 	bl	800f6c8 <USBD_CtlSendData>
 800f1f8:	e009      	b.n	800f20e <USBD_GetDescriptor+0x36e>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f1fa:	6839      	ldr	r1, [r7, #0]
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 f9e6 	bl	800f5ce <USBD_CtlError>
 800f202:	e004      	b.n	800f20e <USBD_GetDescriptor+0x36e>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f000 fab9 	bl	800f77c <USBD_CtlSendStatus>
 800f20a:	e000      	b.n	800f20e <USBD_GetDescriptor+0x36e>
    return;
 800f20c:	bf00      	nop
  }
}
 800f20e:	3718      	adds	r7, #24
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	889b      	ldrh	r3, [r3, #4]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d131      	bne.n	800f28a <USBD_SetAddress+0x76>
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	88db      	ldrh	r3, [r3, #6]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d12d      	bne.n	800f28a <USBD_SetAddress+0x76>
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	885b      	ldrh	r3, [r3, #2]
 800f232:	2b7f      	cmp	r3, #127	; 0x7f
 800f234:	d829      	bhi.n	800f28a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	885b      	ldrh	r3, [r3, #2]
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f240:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	2b03      	cmp	r3, #3
 800f24c:	d104      	bne.n	800f258 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f24e:	6839      	ldr	r1, [r7, #0]
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 f9bc 	bl	800f5ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f256:	e01d      	b.n	800f294 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	7bfa      	ldrb	r2, [r7, #15]
 800f25c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f260:	7bfb      	ldrb	r3, [r7, #15]
 800f262:	4619      	mov	r1, r3
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 fe87 	bl	800ff78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f000 fa86 	bl	800f77c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f270:	7bfb      	ldrb	r3, [r7, #15]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d004      	beq.n	800f280 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2202      	movs	r2, #2
 800f27a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f27e:	e009      	b.n	800f294 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2201      	movs	r2, #1
 800f284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f288:	e004      	b.n	800f294 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f28a:	6839      	ldr	r1, [r7, #0]
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 f99e 	bl	800f5ce <USBD_CtlError>
  }
}
 800f292:	bf00      	nop
 800f294:	bf00      	nop
 800f296:	3710      	adds	r7, #16
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}

0800f29c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	885b      	ldrh	r3, [r3, #2]
 800f2ae:	b2da      	uxtb	r2, r3
 800f2b0:	4b4e      	ldr	r3, [pc, #312]	; (800f3ec <USBD_SetConfig+0x150>)
 800f2b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f2b4:	4b4d      	ldr	r3, [pc, #308]	; (800f3ec <USBD_SetConfig+0x150>)
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	2b01      	cmp	r3, #1
 800f2ba:	d905      	bls.n	800f2c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f2bc:	6839      	ldr	r1, [r7, #0]
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f000 f985 	bl	800f5ce <USBD_CtlError>
    return USBD_FAIL;
 800f2c4:	2303      	movs	r3, #3
 800f2c6:	e08c      	b.n	800f3e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	2b02      	cmp	r3, #2
 800f2d2:	d002      	beq.n	800f2da <USBD_SetConfig+0x3e>
 800f2d4:	2b03      	cmp	r3, #3
 800f2d6:	d029      	beq.n	800f32c <USBD_SetConfig+0x90>
 800f2d8:	e075      	b.n	800f3c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f2da:	4b44      	ldr	r3, [pc, #272]	; (800f3ec <USBD_SetConfig+0x150>)
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d020      	beq.n	800f324 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f2e2:	4b42      	ldr	r3, [pc, #264]	; (800f3ec <USBD_SetConfig+0x150>)
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f2ec:	4b3f      	ldr	r3, [pc, #252]	; (800f3ec <USBD_SetConfig+0x150>)
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f7fe ffca 	bl	800e28c <USBD_SetClassConfig>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f2fc:	7bfb      	ldrb	r3, [r7, #15]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d008      	beq.n	800f314 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f302:	6839      	ldr	r1, [r7, #0]
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f000 f962 	bl	800f5ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2202      	movs	r2, #2
 800f30e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f312:	e065      	b.n	800f3e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 fa31 	bl	800f77c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2203      	movs	r2, #3
 800f31e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f322:	e05d      	b.n	800f3e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f000 fa29 	bl	800f77c <USBD_CtlSendStatus>
      break;
 800f32a:	e059      	b.n	800f3e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f32c:	4b2f      	ldr	r3, [pc, #188]	; (800f3ec <USBD_SetConfig+0x150>)
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d112      	bne.n	800f35a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2202      	movs	r2, #2
 800f338:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f33c:	4b2b      	ldr	r3, [pc, #172]	; (800f3ec <USBD_SetConfig+0x150>)
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	461a      	mov	r2, r3
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f346:	4b29      	ldr	r3, [pc, #164]	; (800f3ec <USBD_SetConfig+0x150>)
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	4619      	mov	r1, r3
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f7fe ffb9 	bl	800e2c4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 fa12 	bl	800f77c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f358:	e042      	b.n	800f3e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f35a:	4b24      	ldr	r3, [pc, #144]	; (800f3ec <USBD_SetConfig+0x150>)
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	461a      	mov	r2, r3
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	429a      	cmp	r2, r3
 800f366:	d02a      	beq.n	800f3be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	4619      	mov	r1, r3
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f7fe ffa7 	bl	800e2c4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f376:	4b1d      	ldr	r3, [pc, #116]	; (800f3ec <USBD_SetConfig+0x150>)
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	461a      	mov	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f380:	4b1a      	ldr	r3, [pc, #104]	; (800f3ec <USBD_SetConfig+0x150>)
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	4619      	mov	r1, r3
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f7fe ff80 	bl	800e28c <USBD_SetClassConfig>
 800f38c:	4603      	mov	r3, r0
 800f38e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f390:	7bfb      	ldrb	r3, [r7, #15]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d00f      	beq.n	800f3b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f396:	6839      	ldr	r1, [r7, #0]
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 f918 	bl	800f5ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f7fe ff8c 	bl	800e2c4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2202      	movs	r2, #2
 800f3b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f3b4:	e014      	b.n	800f3e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f000 f9e0 	bl	800f77c <USBD_CtlSendStatus>
      break;
 800f3bc:	e010      	b.n	800f3e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f000 f9dc 	bl	800f77c <USBD_CtlSendStatus>
      break;
 800f3c4:	e00c      	b.n	800f3e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f3c6:	6839      	ldr	r1, [r7, #0]
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f000 f900 	bl	800f5ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f3ce:	4b07      	ldr	r3, [pc, #28]	; (800f3ec <USBD_SetConfig+0x150>)
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7fe ff75 	bl	800e2c4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f3da:	2303      	movs	r3, #3
 800f3dc:	73fb      	strb	r3, [r7, #15]
      break;
 800f3de:	bf00      	nop
  }

  return ret;
 800f3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3710      	adds	r7, #16
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	24001d73 	.word	0x24001d73

0800f3f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	88db      	ldrh	r3, [r3, #6]
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d004      	beq.n	800f40c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f402:	6839      	ldr	r1, [r7, #0]
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 f8e2 	bl	800f5ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f40a:	e023      	b.n	800f454 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f412:	b2db      	uxtb	r3, r3
 800f414:	2b02      	cmp	r3, #2
 800f416:	dc02      	bgt.n	800f41e <USBD_GetConfig+0x2e>
 800f418:	2b00      	cmp	r3, #0
 800f41a:	dc03      	bgt.n	800f424 <USBD_GetConfig+0x34>
 800f41c:	e015      	b.n	800f44a <USBD_GetConfig+0x5a>
 800f41e:	2b03      	cmp	r3, #3
 800f420:	d00b      	beq.n	800f43a <USBD_GetConfig+0x4a>
 800f422:	e012      	b.n	800f44a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2200      	movs	r2, #0
 800f428:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	3308      	adds	r3, #8
 800f42e:	2201      	movs	r2, #1
 800f430:	4619      	mov	r1, r3
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f000 f948 	bl	800f6c8 <USBD_CtlSendData>
        break;
 800f438:	e00c      	b.n	800f454 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	3304      	adds	r3, #4
 800f43e:	2201      	movs	r2, #1
 800f440:	4619      	mov	r1, r3
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f000 f940 	bl	800f6c8 <USBD_CtlSendData>
        break;
 800f448:	e004      	b.n	800f454 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f44a:	6839      	ldr	r1, [r7, #0]
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f000 f8be 	bl	800f5ce <USBD_CtlError>
        break;
 800f452:	bf00      	nop
}
 800f454:	bf00      	nop
 800f456:	3708      	adds	r7, #8
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b082      	sub	sp, #8
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	3b01      	subs	r3, #1
 800f470:	2b02      	cmp	r3, #2
 800f472:	d81e      	bhi.n	800f4b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	88db      	ldrh	r3, [r3, #6]
 800f478:	2b02      	cmp	r3, #2
 800f47a:	d004      	beq.n	800f486 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f47c:	6839      	ldr	r1, [r7, #0]
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f000 f8a5 	bl	800f5ce <USBD_CtlError>
        break;
 800f484:	e01a      	b.n	800f4bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2201      	movs	r2, #1
 800f48a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f492:	2b00      	cmp	r3, #0
 800f494:	d005      	beq.n	800f4a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	68db      	ldr	r3, [r3, #12]
 800f49a:	f043 0202 	orr.w	r2, r3, #2
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	330c      	adds	r3, #12
 800f4a6:	2202      	movs	r2, #2
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 f90c 	bl	800f6c8 <USBD_CtlSendData>
      break;
 800f4b0:	e004      	b.n	800f4bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f4b2:	6839      	ldr	r1, [r7, #0]
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f000 f88a 	bl	800f5ce <USBD_CtlError>
      break;
 800f4ba:	bf00      	nop
  }
}
 800f4bc:	bf00      	nop
 800f4be:	3708      	adds	r7, #8
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	885b      	ldrh	r3, [r3, #2]
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	d107      	bne.n	800f4e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2201      	movs	r2, #1
 800f4da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 f94c 	bl	800f77c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f4e4:	e013      	b.n	800f50e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	885b      	ldrh	r3, [r3, #2]
 800f4ea:	2b02      	cmp	r3, #2
 800f4ec:	d10b      	bne.n	800f506 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	889b      	ldrh	r3, [r3, #4]
 800f4f2:	0a1b      	lsrs	r3, r3, #8
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	b2da      	uxtb	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 f93c 	bl	800f77c <USBD_CtlSendStatus>
}
 800f504:	e003      	b.n	800f50e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f506:	6839      	ldr	r1, [r7, #0]
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f000 f860 	bl	800f5ce <USBD_CtlError>
}
 800f50e:	bf00      	nop
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b082      	sub	sp, #8
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f526:	b2db      	uxtb	r3, r3
 800f528:	3b01      	subs	r3, #1
 800f52a:	2b02      	cmp	r3, #2
 800f52c:	d80b      	bhi.n	800f546 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	885b      	ldrh	r3, [r3, #2]
 800f532:	2b01      	cmp	r3, #1
 800f534:	d10c      	bne.n	800f550 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2200      	movs	r2, #0
 800f53a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f000 f91c 	bl	800f77c <USBD_CtlSendStatus>
      }
      break;
 800f544:	e004      	b.n	800f550 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f546:	6839      	ldr	r1, [r7, #0]
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f000 f840 	bl	800f5ce <USBD_CtlError>
      break;
 800f54e:	e000      	b.n	800f552 <USBD_ClrFeature+0x3c>
      break;
 800f550:	bf00      	nop
  }
}
 800f552:	bf00      	nop
 800f554:	3708      	adds	r7, #8
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}

0800f55a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b084      	sub	sp, #16
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
 800f562:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	781a      	ldrb	r2, [r3, #0]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	3301      	adds	r3, #1
 800f574:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	781a      	ldrb	r2, [r3, #0]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	3301      	adds	r3, #1
 800f582:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f7ff f9f0 	bl	800e96a <SWAPBYTE>
 800f58a:	4603      	mov	r3, r0
 800f58c:	461a      	mov	r2, r3
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	3301      	adds	r3, #1
 800f596:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	3301      	adds	r3, #1
 800f59c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f59e:	68f8      	ldr	r0, [r7, #12]
 800f5a0:	f7ff f9e3 	bl	800e96a <SWAPBYTE>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f5b8:	68f8      	ldr	r0, [r7, #12]
 800f5ba:	f7ff f9d6 	bl	800e96a <SWAPBYTE>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	80da      	strh	r2, [r3, #6]
}
 800f5c6:	bf00      	nop
 800f5c8:	3710      	adds	r7, #16
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}

0800f5ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5ce:	b580      	push	{r7, lr}
 800f5d0:	b082      	sub	sp, #8
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
 800f5d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5d8:	2180      	movs	r1, #128	; 0x80
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 fc62 	bl	800fea4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f5e0:	2100      	movs	r1, #0
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f000 fc5e 	bl	800fea4 <USBD_LL_StallEP>
}
 800f5e8:	bf00      	nop
 800f5ea:	3708      	adds	r7, #8
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b086      	sub	sp, #24
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d042      	beq.n	800f68c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f60a:	6938      	ldr	r0, [r7, #16]
 800f60c:	f000 f842 	bl	800f694 <USBD_GetLen>
 800f610:	4603      	mov	r3, r0
 800f612:	3301      	adds	r3, #1
 800f614:	005b      	lsls	r3, r3, #1
 800f616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f61a:	d808      	bhi.n	800f62e <USBD_GetString+0x3e>
 800f61c:	6938      	ldr	r0, [r7, #16]
 800f61e:	f000 f839 	bl	800f694 <USBD_GetLen>
 800f622:	4603      	mov	r3, r0
 800f624:	3301      	adds	r3, #1
 800f626:	b29b      	uxth	r3, r3
 800f628:	005b      	lsls	r3, r3, #1
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	e001      	b.n	800f632 <USBD_GetString+0x42>
 800f62e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f636:	7dfb      	ldrb	r3, [r7, #23]
 800f638:	68ba      	ldr	r2, [r7, #8]
 800f63a:	4413      	add	r3, r2
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	7812      	ldrb	r2, [r2, #0]
 800f640:	701a      	strb	r2, [r3, #0]
  idx++;
 800f642:	7dfb      	ldrb	r3, [r7, #23]
 800f644:	3301      	adds	r3, #1
 800f646:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f648:	7dfb      	ldrb	r3, [r7, #23]
 800f64a:	68ba      	ldr	r2, [r7, #8]
 800f64c:	4413      	add	r3, r2
 800f64e:	2203      	movs	r2, #3
 800f650:	701a      	strb	r2, [r3, #0]
  idx++;
 800f652:	7dfb      	ldrb	r3, [r7, #23]
 800f654:	3301      	adds	r3, #1
 800f656:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f658:	e013      	b.n	800f682 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f65a:	7dfb      	ldrb	r3, [r7, #23]
 800f65c:	68ba      	ldr	r2, [r7, #8]
 800f65e:	4413      	add	r3, r2
 800f660:	693a      	ldr	r2, [r7, #16]
 800f662:	7812      	ldrb	r2, [r2, #0]
 800f664:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	3301      	adds	r3, #1
 800f66a:	613b      	str	r3, [r7, #16]
    idx++;
 800f66c:	7dfb      	ldrb	r3, [r7, #23]
 800f66e:	3301      	adds	r3, #1
 800f670:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f672:	7dfb      	ldrb	r3, [r7, #23]
 800f674:	68ba      	ldr	r2, [r7, #8]
 800f676:	4413      	add	r3, r2
 800f678:	2200      	movs	r2, #0
 800f67a:	701a      	strb	r2, [r3, #0]
    idx++;
 800f67c:	7dfb      	ldrb	r3, [r7, #23]
 800f67e:	3301      	adds	r3, #1
 800f680:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d1e7      	bne.n	800f65a <USBD_GetString+0x6a>
 800f68a:	e000      	b.n	800f68e <USBD_GetString+0x9e>
    return;
 800f68c:	bf00      	nop
  }
}
 800f68e:	3718      	adds	r7, #24
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f694:	b480      	push	{r7}
 800f696:	b085      	sub	sp, #20
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f69c:	2300      	movs	r3, #0
 800f69e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f6a4:	e005      	b.n	800f6b2 <USBD_GetLen+0x1e>
  {
    len++;
 800f6a6:	7bfb      	ldrb	r3, [r7, #15]
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d1f5      	bne.n	800f6a6 <USBD_GetLen+0x12>
  }

  return len;
 800f6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b084      	sub	sp, #16
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	60b9      	str	r1, [r7, #8]
 800f6d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	2202      	movs	r2, #2
 800f6d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	687a      	ldr	r2, [r7, #4]
 800f6e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	687a      	ldr	r2, [r7, #4]
 800f6e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	68ba      	ldr	r2, [r7, #8]
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	68f8      	ldr	r0, [r7, #12]
 800f6f0:	f000 fc61 	bl	800ffb6 <USBD_LL_Transmit>

  return USBD_OK;
 800f6f4:	2300      	movs	r3, #0
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3710      	adds	r7, #16
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b084      	sub	sp, #16
 800f702:	af00      	add	r7, sp, #0
 800f704:	60f8      	str	r0, [r7, #12]
 800f706:	60b9      	str	r1, [r7, #8]
 800f708:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	68ba      	ldr	r2, [r7, #8]
 800f70e:	2100      	movs	r1, #0
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	f000 fc50 	bl	800ffb6 <USBD_LL_Transmit>

  return USBD_OK;
 800f716:	2300      	movs	r3, #0
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3710      	adds	r7, #16
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2203      	movs	r2, #3
 800f730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	68ba      	ldr	r2, [r7, #8]
 800f748:	2100      	movs	r1, #0
 800f74a:	68f8      	ldr	r0, [r7, #12]
 800f74c:	f000 fc54 	bl	800fff8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3710      	adds	r7, #16
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b084      	sub	sp, #16
 800f75e:	af00      	add	r7, sp, #0
 800f760:	60f8      	str	r0, [r7, #12]
 800f762:	60b9      	str	r1, [r7, #8]
 800f764:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	68ba      	ldr	r2, [r7, #8]
 800f76a:	2100      	movs	r1, #0
 800f76c:	68f8      	ldr	r0, [r7, #12]
 800f76e:	f000 fc43 	bl	800fff8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f772:	2300      	movs	r3, #0
}
 800f774:	4618      	mov	r0, r3
 800f776:	3710      	adds	r7, #16
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b082      	sub	sp, #8
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2204      	movs	r2, #4
 800f788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f78c:	2300      	movs	r3, #0
 800f78e:	2200      	movs	r2, #0
 800f790:	2100      	movs	r1, #0
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f000 fc0f 	bl	800ffb6 <USBD_LL_Transmit>

  return USBD_OK;
 800f798:	2300      	movs	r3, #0
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3708      	adds	r7, #8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b082      	sub	sp, #8
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2205      	movs	r2, #5
 800f7ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	2100      	movs	r1, #0
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 fc1d 	bl	800fff8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7be:	2300      	movs	r3, #0
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3708      	adds	r7, #8
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	4913      	ldr	r1, [pc, #76]	; (800f81c <MX_USB_DEVICE_Init+0x54>)
 800f7d0:	4813      	ldr	r0, [pc, #76]	; (800f820 <MX_USB_DEVICE_Init+0x58>)
 800f7d2:	f7fe fca7 	bl	800e124 <USBD_Init>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d001      	beq.n	800f7e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f7dc:	f7f1 ffd3 	bl	8001786 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_DFU) != USBD_OK)
 800f7e0:	4910      	ldr	r1, [pc, #64]	; (800f824 <MX_USB_DEVICE_Init+0x5c>)
 800f7e2:	480f      	ldr	r0, [pc, #60]	; (800f820 <MX_USB_DEVICE_Init+0x58>)
 800f7e4:	f7fe fcdc 	bl	800e1a0 <USBD_RegisterClass>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d001      	beq.n	800f7f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f7ee:	f7f1 ffca 	bl	8001786 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceHS, &USBD_DFU_fops_HS) != USBD_OK)
 800f7f2:	490d      	ldr	r1, [pc, #52]	; (800f828 <MX_USB_DEVICE_Init+0x60>)
 800f7f4:	480a      	ldr	r0, [pc, #40]	; (800f820 <MX_USB_DEVICE_Init+0x58>)
 800f7f6:	f7fe f863 	bl	800d8c0 <USBD_DFU_RegisterMedia>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d001      	beq.n	800f804 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f800:	f7f1 ffc1 	bl	8001786 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800f804:	4806      	ldr	r0, [pc, #24]	; (800f820 <MX_USB_DEVICE_Init+0x58>)
 800f806:	f7fe fd0f 	bl	800e228 <USBD_Start>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d001      	beq.n	800f814 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f810:	f7f1 ffb9 	bl	8001786 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f814:	f7f7 fa78 	bl	8006d08 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f818:	bf00      	nop
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	240003f8 	.word	0x240003f8
 800f820:	24001d74 	.word	0x24001d74
 800f824:	24000394 	.word	0x24000394
 800f828:	2400044c 	.word	0x2400044c

0800f82c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b083      	sub	sp, #12
 800f830:	af00      	add	r7, sp, #0
 800f832:	4603      	mov	r3, r0
 800f834:	6039      	str	r1, [r7, #0]
 800f836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	2212      	movs	r2, #18
 800f83c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800f83e:	4b03      	ldr	r3, [pc, #12]	; (800f84c <USBD_HS_DeviceDescriptor+0x20>)
}
 800f840:	4618      	mov	r0, r3
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr
 800f84c:	24000418 	.word	0x24000418

0800f850 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f850:	b480      	push	{r7}
 800f852:	b083      	sub	sp, #12
 800f854:	af00      	add	r7, sp, #0
 800f856:	4603      	mov	r3, r0
 800f858:	6039      	str	r1, [r7, #0]
 800f85a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	2204      	movs	r2, #4
 800f860:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f862:	4b03      	ldr	r3, [pc, #12]	; (800f870 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800f864:	4618      	mov	r0, r3
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr
 800f870:	2400042c 	.word	0x2400042c

0800f874 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	4603      	mov	r3, r0
 800f87c:	6039      	str	r1, [r7, #0]
 800f87e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f880:	79fb      	ldrb	r3, [r7, #7]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d105      	bne.n	800f892 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f886:	683a      	ldr	r2, [r7, #0]
 800f888:	4907      	ldr	r1, [pc, #28]	; (800f8a8 <USBD_HS_ProductStrDescriptor+0x34>)
 800f88a:	4808      	ldr	r0, [pc, #32]	; (800f8ac <USBD_HS_ProductStrDescriptor+0x38>)
 800f88c:	f7ff feb0 	bl	800f5f0 <USBD_GetString>
 800f890:	e004      	b.n	800f89c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f892:	683a      	ldr	r2, [r7, #0]
 800f894:	4904      	ldr	r1, [pc, #16]	; (800f8a8 <USBD_HS_ProductStrDescriptor+0x34>)
 800f896:	4805      	ldr	r0, [pc, #20]	; (800f8ac <USBD_HS_ProductStrDescriptor+0x38>)
 800f898:	f7ff feaa 	bl	800f5f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f89c:	4b02      	ldr	r3, [pc, #8]	; (800f8a8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3708      	adds	r7, #8
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
 800f8a6:	bf00      	nop
 800f8a8:	24002050 	.word	0x24002050
 800f8ac:	080116e8 	.word	0x080116e8

0800f8b0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b082      	sub	sp, #8
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	6039      	str	r1, [r7, #0]
 800f8ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f8bc:	683a      	ldr	r2, [r7, #0]
 800f8be:	4904      	ldr	r1, [pc, #16]	; (800f8d0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800f8c0:	4804      	ldr	r0, [pc, #16]	; (800f8d4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800f8c2:	f7ff fe95 	bl	800f5f0 <USBD_GetString>
  return USBD_StrDesc;
 800f8c6:	4b02      	ldr	r3, [pc, #8]	; (800f8d0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	24002050 	.word	0x24002050
 800f8d4:	08011708 	.word	0x08011708

0800f8d8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	4603      	mov	r3, r0
 800f8e0:	6039      	str	r1, [r7, #0]
 800f8e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	221a      	movs	r2, #26
 800f8e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f8ea:	f000 f843 	bl	800f974 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f8ee:	4b02      	ldr	r3, [pc, #8]	; (800f8f8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	24000430 	.word	0x24000430

0800f8fc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	4603      	mov	r3, r0
 800f904:	6039      	str	r1, [r7, #0]
 800f906:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f908:	79fb      	ldrb	r3, [r7, #7]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d105      	bne.n	800f91a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f90e:	683a      	ldr	r2, [r7, #0]
 800f910:	4907      	ldr	r1, [pc, #28]	; (800f930 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f912:	4808      	ldr	r0, [pc, #32]	; (800f934 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f914:	f7ff fe6c 	bl	800f5f0 <USBD_GetString>
 800f918:	e004      	b.n	800f924 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f91a:	683a      	ldr	r2, [r7, #0]
 800f91c:	4904      	ldr	r1, [pc, #16]	; (800f930 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f91e:	4805      	ldr	r0, [pc, #20]	; (800f934 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f920:	f7ff fe66 	bl	800f5f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f924:	4b02      	ldr	r3, [pc, #8]	; (800f930 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800f926:	4618      	mov	r0, r3
 800f928:	3708      	adds	r7, #8
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	24002050 	.word	0x24002050
 800f934:	0801171c 	.word	0x0801171c

0800f938 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	4603      	mov	r3, r0
 800f940:	6039      	str	r1, [r7, #0]
 800f942:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f944:	79fb      	ldrb	r3, [r7, #7]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d105      	bne.n	800f956 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f94a:	683a      	ldr	r2, [r7, #0]
 800f94c:	4907      	ldr	r1, [pc, #28]	; (800f96c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f94e:	4808      	ldr	r0, [pc, #32]	; (800f970 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f950:	f7ff fe4e 	bl	800f5f0 <USBD_GetString>
 800f954:	e004      	b.n	800f960 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f956:	683a      	ldr	r2, [r7, #0]
 800f958:	4904      	ldr	r1, [pc, #16]	; (800f96c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f95a:	4805      	ldr	r0, [pc, #20]	; (800f970 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f95c:	f7ff fe48 	bl	800f5f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f960:	4b02      	ldr	r3, [pc, #8]	; (800f96c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800f962:	4618      	mov	r0, r3
 800f964:	3708      	adds	r7, #8
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	24002050 	.word	0x24002050
 800f970:	08011728 	.word	0x08011728

0800f974 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f97a:	4b0f      	ldr	r3, [pc, #60]	; (800f9b8 <Get_SerialNum+0x44>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f980:	4b0e      	ldr	r3, [pc, #56]	; (800f9bc <Get_SerialNum+0x48>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f986:	4b0e      	ldr	r3, [pc, #56]	; (800f9c0 <Get_SerialNum+0x4c>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4413      	add	r3, r2
 800f992:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d009      	beq.n	800f9ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f99a:	2208      	movs	r2, #8
 800f99c:	4909      	ldr	r1, [pc, #36]	; (800f9c4 <Get_SerialNum+0x50>)
 800f99e:	68f8      	ldr	r0, [r7, #12]
 800f9a0:	f000 f814 	bl	800f9cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f9a4:	2204      	movs	r2, #4
 800f9a6:	4908      	ldr	r1, [pc, #32]	; (800f9c8 <Get_SerialNum+0x54>)
 800f9a8:	68b8      	ldr	r0, [r7, #8]
 800f9aa:	f000 f80f 	bl	800f9cc <IntToUnicode>
  }
}
 800f9ae:	bf00      	nop
 800f9b0:	3710      	adds	r7, #16
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	1ff1e800 	.word	0x1ff1e800
 800f9bc:	1ff1e804 	.word	0x1ff1e804
 800f9c0:	1ff1e808 	.word	0x1ff1e808
 800f9c4:	24000432 	.word	0x24000432
 800f9c8:	24000442 	.word	0x24000442

0800f9cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b087      	sub	sp, #28
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	4613      	mov	r3, r2
 800f9d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f9de:	2300      	movs	r3, #0
 800f9e0:	75fb      	strb	r3, [r7, #23]
 800f9e2:	e027      	b.n	800fa34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	0f1b      	lsrs	r3, r3, #28
 800f9e8:	2b09      	cmp	r3, #9
 800f9ea:	d80b      	bhi.n	800fa04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	0f1b      	lsrs	r3, r3, #28
 800f9f0:	b2da      	uxtb	r2, r3
 800f9f2:	7dfb      	ldrb	r3, [r7, #23]
 800f9f4:	005b      	lsls	r3, r3, #1
 800f9f6:	4619      	mov	r1, r3
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	440b      	add	r3, r1
 800f9fc:	3230      	adds	r2, #48	; 0x30
 800f9fe:	b2d2      	uxtb	r2, r2
 800fa00:	701a      	strb	r2, [r3, #0]
 800fa02:	e00a      	b.n	800fa1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	0f1b      	lsrs	r3, r3, #28
 800fa08:	b2da      	uxtb	r2, r3
 800fa0a:	7dfb      	ldrb	r3, [r7, #23]
 800fa0c:	005b      	lsls	r3, r3, #1
 800fa0e:	4619      	mov	r1, r3
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	440b      	add	r3, r1
 800fa14:	3237      	adds	r2, #55	; 0x37
 800fa16:	b2d2      	uxtb	r2, r2
 800fa18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	011b      	lsls	r3, r3, #4
 800fa1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fa20:	7dfb      	ldrb	r3, [r7, #23]
 800fa22:	005b      	lsls	r3, r3, #1
 800fa24:	3301      	adds	r3, #1
 800fa26:	68ba      	ldr	r2, [r7, #8]
 800fa28:	4413      	add	r3, r2
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fa2e:	7dfb      	ldrb	r3, [r7, #23]
 800fa30:	3301      	adds	r3, #1
 800fa32:	75fb      	strb	r3, [r7, #23]
 800fa34:	7dfa      	ldrb	r2, [r7, #23]
 800fa36:	79fb      	ldrb	r3, [r7, #7]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d3d3      	bcc.n	800f9e4 <IntToUnicode+0x18>
  }
}
 800fa3c:	bf00      	nop
 800fa3e:	bf00      	nop
 800fa40:	371c      	adds	r7, #28
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr

0800fa4a <MEM_If_Init_HS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_HS(void)
{
 800fa4a:	b480      	push	{r7}
 800fa4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800fa4e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr

0800fa5a <MEM_If_DeInit_HS>:
/**
  * @brief  De-Initializes Memory.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_DeInit_HS(void)
{
 800fa5a:	b480      	push	{r7}
 800fa5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800fa5e:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr

0800fa6a <MEM_If_Erase_HS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_HS(uint32_t Add)
{
 800fa6a:	b480      	push	{r7}
 800fa6c:	b083      	sub	sp, #12
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 8 */
  UNUSED(Add);

  return (USBD_OK);
 800fa72:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <MEM_If_Write_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	60f8      	str	r0, [r7, #12]
 800fa88:	60b9      	str	r1, [r7, #8]
 800fa8a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (USBD_OK);
 800fa8c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3714      	adds	r7, #20
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr

0800fa9a <MEM_If_Read_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800fa9a:	b480      	push	{r7}
 800fa9c:	b085      	sub	sp, #20
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	60f8      	str	r0, [r7, #12]
 800faa2:	60b9      	str	r1, [r7, #8]
 800faa4:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 10 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (uint8_t*)(USBD_OK);
 800faa6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3714      	adds	r7, #20
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr

0800fab4 <MEM_If_GetStatus_HS>:
  * @param  Cmd: Number of data to be read (in bytes).
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval 0 if operation is successful
  */
uint16_t MEM_If_GetStatus_HS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b085      	sub	sp, #20
 800fab8:	af00      	add	r7, sp, #0
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	460b      	mov	r3, r1
 800fabe:	607a      	str	r2, [r7, #4]
 800fac0:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 11 */
  UNUSED(Add);
  UNUSED(buffer);

  switch(Cmd)
 800fac2:	7afb      	ldrb	r3, [r7, #11]
 800fac4:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800fac6:	bf00      	nop
  }
  return  (USBD_OK);
 800fac8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800faca:	4618      	mov	r0, r3
 800facc:	3714      	adds	r7, #20
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr
	...

0800fad8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b0b2      	sub	sp, #200	; 0xc8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fae0:	f107 0310 	add.w	r3, r7, #16
 800fae4:	22b8      	movs	r2, #184	; 0xb8
 800fae6:	2100      	movs	r1, #0
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 ff80 	bl	80109ee <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	4a1a      	ldr	r2, [pc, #104]	; (800fb5c <HAL_PCD_MspInit+0x84>)
 800faf4:	4293      	cmp	r3, r2
 800faf6:	d12c      	bne.n	800fb52 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800faf8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800fafc:	f04f 0300 	mov.w	r3, #0
 800fb00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800fb04:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800fb08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fb0c:	f107 0310 	add.w	r3, r7, #16
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7f8 f859 	bl	8007bc8 <HAL_RCCEx_PeriphCLKConfig>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d001      	beq.n	800fb20 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 800fb1c:	f7f1 fe33 	bl	8001786 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800fb20:	f7f7 f8f2 	bl	8006d08 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800fb24:	4b0e      	ldr	r3, [pc, #56]	; (800fb60 <HAL_PCD_MspInit+0x88>)
 800fb26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fb2a:	4a0d      	ldr	r2, [pc, #52]	; (800fb60 <HAL_PCD_MspInit+0x88>)
 800fb2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fb30:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fb34:	4b0a      	ldr	r3, [pc, #40]	; (800fb60 <HAL_PCD_MspInit+0x88>)
 800fb36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fb3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb3e:	60fb      	str	r3, [r7, #12]
 800fb40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800fb42:	2200      	movs	r2, #0
 800fb44:	2100      	movs	r1, #0
 800fb46:	204d      	movs	r0, #77	; 0x4d
 800fb48:	f7f2 fcaf 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800fb4c:	204d      	movs	r0, #77	; 0x4d
 800fb4e:	f7f2 fcc6 	bl	80024de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800fb52:	bf00      	nop
 800fb54:	37c8      	adds	r7, #200	; 0xc8
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	40040000 	.word	0x40040000
 800fb60:	58024400 	.word	0x58024400

0800fb64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800fb78:	4619      	mov	r1, r3
 800fb7a:	4610      	mov	r0, r2
 800fb7c:	f7fe fbbc 	bl	800e2f8 <USBD_LL_SetupStage>
}
 800fb80:	bf00      	nop
 800fb82:	3708      	adds	r7, #8
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	460b      	mov	r3, r1
 800fb92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800fb9a:	78fa      	ldrb	r2, [r7, #3]
 800fb9c:	6879      	ldr	r1, [r7, #4]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	00db      	lsls	r3, r3, #3
 800fba2:	4413      	add	r3, r2
 800fba4:	009b      	lsls	r3, r3, #2
 800fba6:	440b      	add	r3, r1
 800fba8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	78fb      	ldrb	r3, [r7, #3]
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	f7fe fbf6 	bl	800e3a2 <USBD_LL_DataOutStage>
}
 800fbb6:	bf00      	nop
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbbe:	b580      	push	{r7, lr}
 800fbc0:	b082      	sub	sp, #8
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	6078      	str	r0, [r7, #4]
 800fbc6:	460b      	mov	r3, r1
 800fbc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800fbd0:	78fa      	ldrb	r2, [r7, #3]
 800fbd2:	6879      	ldr	r1, [r7, #4]
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	00db      	lsls	r3, r3, #3
 800fbd8:	4413      	add	r3, r2
 800fbda:	009b      	lsls	r3, r3, #2
 800fbdc:	440b      	add	r3, r1
 800fbde:	3320      	adds	r3, #32
 800fbe0:	681a      	ldr	r2, [r3, #0]
 800fbe2:	78fb      	ldrb	r3, [r7, #3]
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	f7fe fc8f 	bl	800e508 <USBD_LL_DataInStage>
}
 800fbea:	bf00      	nop
 800fbec:	3708      	adds	r7, #8
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}

0800fbf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbf2:	b580      	push	{r7, lr}
 800fbf4:	b082      	sub	sp, #8
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7fe fdc9 	bl	800e798 <USBD_LL_SOF>
}
 800fc06:	bf00      	nop
 800fc08:	3708      	adds	r7, #8
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}

0800fc0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc0e:	b580      	push	{r7, lr}
 800fc10:	b084      	sub	sp, #16
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fc16:	2301      	movs	r3, #1
 800fc18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	79db      	ldrb	r3, [r3, #7]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d102      	bne.n	800fc28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fc22:	2300      	movs	r3, #0
 800fc24:	73fb      	strb	r3, [r7, #15]
 800fc26:	e008      	b.n	800fc3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	79db      	ldrb	r3, [r3, #7]
 800fc2c:	2b02      	cmp	r3, #2
 800fc2e:	d102      	bne.n	800fc36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fc30:	2301      	movs	r3, #1
 800fc32:	73fb      	strb	r3, [r7, #15]
 800fc34:	e001      	b.n	800fc3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fc36:	f7f1 fda6 	bl	8001786 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fc40:	7bfa      	ldrb	r2, [r7, #15]
 800fc42:	4611      	mov	r1, r2
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7fe fd63 	bl	800e710 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fc50:	4618      	mov	r0, r3
 800fc52:	f7fe fd0b 	bl	800e66c <USBD_LL_Reset>
}
 800fc56:	bf00      	nop
 800fc58:	3710      	adds	r7, #16
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
	...

0800fc60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fe fd5e 	bl	800e730 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	6812      	ldr	r2, [r2, #0]
 800fc82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fc86:	f043 0301 	orr.w	r3, r3, #1
 800fc8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	7adb      	ldrb	r3, [r3, #11]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d005      	beq.n	800fca0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fc94:	4b04      	ldr	r3, [pc, #16]	; (800fca8 <HAL_PCD_SuspendCallback+0x48>)
 800fc96:	691b      	ldr	r3, [r3, #16]
 800fc98:	4a03      	ldr	r2, [pc, #12]	; (800fca8 <HAL_PCD_SuspendCallback+0x48>)
 800fc9a:	f043 0306 	orr.w	r3, r3, #6
 800fc9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fca0:	bf00      	nop
 800fca2:	3708      	adds	r7, #8
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	e000ed00 	.word	0xe000ed00

0800fcac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7fe fd54 	bl	800e768 <USBD_LL_Resume>
}
 800fcc0:	bf00      	nop
 800fcc2:	3708      	adds	r7, #8
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	460b      	mov	r3, r1
 800fcd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fcda:	78fa      	ldrb	r2, [r7, #3]
 800fcdc:	4611      	mov	r1, r2
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fe fdac 	bl	800e83c <USBD_LL_IsoOUTIncomplete>
}
 800fce4:	bf00      	nop
 800fce6:	3708      	adds	r7, #8
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fcfe:	78fa      	ldrb	r2, [r7, #3]
 800fd00:	4611      	mov	r1, r2
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fe fd68 	bl	800e7d8 <USBD_LL_IsoINIncomplete>
}
 800fd08:	bf00      	nop
 800fd0a:	3708      	adds	r7, #8
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7fe fdbe 	bl	800e8a0 <USBD_LL_DevConnected>
}
 800fd24:	bf00      	nop
 800fd26:	3708      	adds	r7, #8
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fe fdbb 	bl	800e8b6 <USBD_LL_DevDisconnected>
}
 800fd40:	bf00      	nop
 800fd42:	3708      	adds	r7, #8
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d140      	bne.n	800fdda <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800fd58:	4a22      	ldr	r2, [pc, #136]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4a20      	ldr	r2, [pc, #128]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fd64:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800fd68:	4b1e      	ldr	r3, [pc, #120]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fd6a:	4a1f      	ldr	r2, [pc, #124]	; (800fde8 <USBD_LL_Init+0xa0>)
 800fd6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800fd6e:	4b1d      	ldr	r3, [pc, #116]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fd70:	2209      	movs	r2, #9
 800fd72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800fd74:	4b1b      	ldr	r3, [pc, #108]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fd76:	2202      	movs	r2, #2
 800fd78:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800fd7a:	4b1a      	ldr	r3, [pc, #104]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800fd80:	4b18      	ldr	r3, [pc, #96]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fd82:	2202      	movs	r2, #2
 800fd84:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800fd86:	4b17      	ldr	r3, [pc, #92]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fd88:	2200      	movs	r2, #0
 800fd8a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800fd8c:	4b15      	ldr	r3, [pc, #84]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fd8e:	2200      	movs	r2, #0
 800fd90:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800fd92:	4b14      	ldr	r3, [pc, #80]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fd94:	2200      	movs	r2, #0
 800fd96:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800fd98:	4b12      	ldr	r3, [pc, #72]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800fd9e:	4b11      	ldr	r3, [pc, #68]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fda0:	2200      	movs	r2, #0
 800fda2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800fda4:	4b0f      	ldr	r3, [pc, #60]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fda6:	2200      	movs	r2, #0
 800fda8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800fdaa:	480e      	ldr	r0, [pc, #56]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fdac:	f7f5 fcfa 	bl	80057a4 <HAL_PCD_Init>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d001      	beq.n	800fdba <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fdb6:	f7f1 fce6 	bl	8001786 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800fdba:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fdbe:	4809      	ldr	r0, [pc, #36]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fdc0:	f7f6 ff27 	bl	8006c12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800fdc4:	2280      	movs	r2, #128	; 0x80
 800fdc6:	2100      	movs	r1, #0
 800fdc8:	4806      	ldr	r0, [pc, #24]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fdca:	f7f6 fedb 	bl	8006b84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800fdce:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800fdd2:	2101      	movs	r1, #1
 800fdd4:	4803      	ldr	r0, [pc, #12]	; (800fde4 <USBD_LL_Init+0x9c>)
 800fdd6:	f7f6 fed5 	bl	8006b84 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800fdda:	2300      	movs	r3, #0
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3708      	adds	r7, #8
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	24002250 	.word	0x24002250
 800fde8:	40040000 	.word	0x40040000

0800fdec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b084      	sub	sp, #16
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7f5 fdda 	bl	80059bc <HAL_PCD_Start>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe0c:	7bfb      	ldrb	r3, [r7, #15]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f000 f92c 	bl	801006c <USBD_Get_USB_Status>
 800fe14:	4603      	mov	r3, r0
 800fe16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe18:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3710      	adds	r7, #16
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}

0800fe22 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800fe22:	b580      	push	{r7, lr}
 800fe24:	b084      	sub	sp, #16
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7f5 fdf4 	bl	8005a26 <HAL_PCD_Stop>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe42:	7bfb      	ldrb	r3, [r7, #15]
 800fe44:	4618      	mov	r0, r3
 800fe46:	f000 f911 	bl	801006c <USBD_Get_USB_Status>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3710      	adds	r7, #16
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	4608      	mov	r0, r1
 800fe62:	4611      	mov	r1, r2
 800fe64:	461a      	mov	r2, r3
 800fe66:	4603      	mov	r3, r0
 800fe68:	70fb      	strb	r3, [r7, #3]
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	70bb      	strb	r3, [r7, #2]
 800fe6e:	4613      	mov	r3, r2
 800fe70:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe76:	2300      	movs	r3, #0
 800fe78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fe80:	78bb      	ldrb	r3, [r7, #2]
 800fe82:	883a      	ldrh	r2, [r7, #0]
 800fe84:	78f9      	ldrb	r1, [r7, #3]
 800fe86:	f7f6 fafb 	bl	8006480 <HAL_PCD_EP_Open>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe8e:	7bfb      	ldrb	r3, [r7, #15]
 800fe90:	4618      	mov	r0, r3
 800fe92:	f000 f8eb 	bl	801006c <USBD_Get_USB_Status>
 800fe96:	4603      	mov	r3, r0
 800fe98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3710      	adds	r7, #16
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b084      	sub	sp, #16
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	460b      	mov	r3, r1
 800feae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800feb0:	2300      	movs	r3, #0
 800feb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800feb4:	2300      	movs	r3, #0
 800feb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800febe:	78fa      	ldrb	r2, [r7, #3]
 800fec0:	4611      	mov	r1, r2
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7f6 fbb9 	bl	800663a <HAL_PCD_EP_SetStall>
 800fec8:	4603      	mov	r3, r0
 800feca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fecc:	7bfb      	ldrb	r3, [r7, #15]
 800fece:	4618      	mov	r0, r3
 800fed0:	f000 f8cc 	bl	801006c <USBD_Get_USB_Status>
 800fed4:	4603      	mov	r3, r0
 800fed6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fed8:	7bbb      	ldrb	r3, [r7, #14]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3710      	adds	r7, #16
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fee2:	b580      	push	{r7, lr}
 800fee4:	b084      	sub	sp, #16
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
 800feea:	460b      	mov	r3, r1
 800feec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800feee:	2300      	movs	r3, #0
 800fef0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fef2:	2300      	movs	r3, #0
 800fef4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fefc:	78fa      	ldrb	r2, [r7, #3]
 800fefe:	4611      	mov	r1, r2
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7f6 fbfd 	bl	8006700 <HAL_PCD_EP_ClrStall>
 800ff06:	4603      	mov	r3, r0
 800ff08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff0a:	7bfb      	ldrb	r3, [r7, #15]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f000 f8ad 	bl	801006c <USBD_Get_USB_Status>
 800ff12:	4603      	mov	r3, r0
 800ff14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3710      	adds	r7, #16
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}

0800ff20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b085      	sub	sp, #20
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	460b      	mov	r3, r1
 800ff2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ff34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	da0b      	bge.n	800ff54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ff3c:	78fb      	ldrb	r3, [r7, #3]
 800ff3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff42:	68f9      	ldr	r1, [r7, #12]
 800ff44:	4613      	mov	r3, r2
 800ff46:	00db      	lsls	r3, r3, #3
 800ff48:	4413      	add	r3, r2
 800ff4a:	009b      	lsls	r3, r3, #2
 800ff4c:	440b      	add	r3, r1
 800ff4e:	3316      	adds	r3, #22
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	e00b      	b.n	800ff6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ff54:	78fb      	ldrb	r3, [r7, #3]
 800ff56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff5a:	68f9      	ldr	r1, [r7, #12]
 800ff5c:	4613      	mov	r3, r2
 800ff5e:	00db      	lsls	r3, r3, #3
 800ff60:	4413      	add	r3, r2
 800ff62:	009b      	lsls	r3, r3, #2
 800ff64:	440b      	add	r3, r1
 800ff66:	f203 2356 	addw	r3, r3, #598	; 0x256
 800ff6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3714      	adds	r7, #20
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr

0800ff78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	460b      	mov	r3, r1
 800ff82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff84:	2300      	movs	r3, #0
 800ff86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff92:	78fa      	ldrb	r2, [r7, #3]
 800ff94:	4611      	mov	r1, r2
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7f6 fa4e 	bl	8006438 <HAL_PCD_SetAddress>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffa0:	7bfb      	ldrb	r3, [r7, #15]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f000 f862 	bl	801006c <USBD_Get_USB_Status>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffac:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3710      	adds	r7, #16
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}

0800ffb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ffb6:	b580      	push	{r7, lr}
 800ffb8:	b086      	sub	sp, #24
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	60f8      	str	r0, [r7, #12]
 800ffbe:	607a      	str	r2, [r7, #4]
 800ffc0:	603b      	str	r3, [r7, #0]
 800ffc2:	460b      	mov	r3, r1
 800ffc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ffd4:	7af9      	ldrb	r1, [r7, #11]
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	f7f6 faf4 	bl	80065c6 <HAL_PCD_EP_Transmit>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffe2:	7dfb      	ldrb	r3, [r7, #23]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f000 f841 	bl	801006c <USBD_Get_USB_Status>
 800ffea:	4603      	mov	r3, r0
 800ffec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ffee:	7dbb      	ldrb	r3, [r7, #22]
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3718      	adds	r7, #24
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b086      	sub	sp, #24
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	60f8      	str	r0, [r7, #12]
 8010000:	607a      	str	r2, [r7, #4]
 8010002:	603b      	str	r3, [r7, #0]
 8010004:	460b      	mov	r3, r1
 8010006:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010008:	2300      	movs	r3, #0
 801000a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801000c:	2300      	movs	r3, #0
 801000e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010016:	7af9      	ldrb	r1, [r7, #11]
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	687a      	ldr	r2, [r7, #4]
 801001c:	f7f6 fa98 	bl	8006550 <HAL_PCD_EP_Receive>
 8010020:	4603      	mov	r3, r0
 8010022:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010024:	7dfb      	ldrb	r3, [r7, #23]
 8010026:	4618      	mov	r0, r3
 8010028:	f000 f820 	bl	801006c <USBD_Get_USB_Status>
 801002c:	4603      	mov	r3, r0
 801002e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010030:	7dbb      	ldrb	r3, [r7, #22]
}
 8010032:	4618      	mov	r0, r3
 8010034:	3718      	adds	r7, #24
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
	...

0801003c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801003c:	b480      	push	{r7}
 801003e:	b083      	sub	sp, #12
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010044:	4b03      	ldr	r3, [pc, #12]	; (8010054 <USBD_static_malloc+0x18>)
}
 8010046:	4618      	mov	r0, r3
 8010048:	370c      	adds	r7, #12
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr
 8010052:	bf00      	nop
 8010054:	24002734 	.word	0x24002734

08010058 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010058:	b480      	push	{r7}
 801005a:	b083      	sub	sp, #12
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010060:	bf00      	nop
 8010062:	370c      	adds	r7, #12
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801006c:	b480      	push	{r7}
 801006e:	b085      	sub	sp, #20
 8010070:	af00      	add	r7, sp, #0
 8010072:	4603      	mov	r3, r0
 8010074:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010076:	2300      	movs	r3, #0
 8010078:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801007a:	79fb      	ldrb	r3, [r7, #7]
 801007c:	2b03      	cmp	r3, #3
 801007e:	d817      	bhi.n	80100b0 <USBD_Get_USB_Status+0x44>
 8010080:	a201      	add	r2, pc, #4	; (adr r2, 8010088 <USBD_Get_USB_Status+0x1c>)
 8010082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010086:	bf00      	nop
 8010088:	08010099 	.word	0x08010099
 801008c:	0801009f 	.word	0x0801009f
 8010090:	080100a5 	.word	0x080100a5
 8010094:	080100ab 	.word	0x080100ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010098:	2300      	movs	r3, #0
 801009a:	73fb      	strb	r3, [r7, #15]
    break;
 801009c:	e00b      	b.n	80100b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801009e:	2303      	movs	r3, #3
 80100a0:	73fb      	strb	r3, [r7, #15]
    break;
 80100a2:	e008      	b.n	80100b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80100a4:	2301      	movs	r3, #1
 80100a6:	73fb      	strb	r3, [r7, #15]
    break;
 80100a8:	e005      	b.n	80100b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80100aa:	2303      	movs	r3, #3
 80100ac:	73fb      	strb	r3, [r7, #15]
    break;
 80100ae:	e002      	b.n	80100b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80100b0:	2303      	movs	r3, #3
 80100b2:	73fb      	strb	r3, [r7, #15]
    break;
 80100b4:	bf00      	nop
  }
  return usb_status;
 80100b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3714      	adds	r7, #20
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr

080100c4 <arm_biquad_cascade_df2T_f32>:
 80100c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c8:	7807      	ldrb	r7, [r0, #0]
 80100ca:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 80100ce:	6885      	ldr	r5, [r0, #8]
 80100d0:	3514      	adds	r5, #20
 80100d2:	6846      	ldr	r6, [r0, #4]
 80100d4:	3608      	adds	r6, #8
 80100d6:	ea4f 198e 	mov.w	r9, lr, lsl #6
 80100da:	eb02 0b09 	add.w	fp, r2, r9
 80100de:	f003 080f 	and.w	r8, r3, #15
 80100e2:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80100e6:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 80100ea:	ed15 7a04 	vldr	s14, [r5, #-16]
 80100ee:	ed55 6a03 	vldr	s13, [r5, #-12]
 80100f2:	ed15 6a02 	vldr	s12, [r5, #-8]
 80100f6:	ed55 5a01 	vldr	s11, [r5, #-4]
 80100fa:	46b4      	mov	ip, r6
 80100fc:	ed56 3a02 	vldr	s7, [r6, #-8]
 8010100:	ed16 4a01 	vldr	s8, [r6, #-4]
 8010104:	f1be 0f00 	cmp.w	lr, #0
 8010108:	f000 8195 	beq.w	8010436 <arm_biquad_cascade_df2T_f32+0x372>
 801010c:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8010110:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8010114:	4674      	mov	r4, lr
 8010116:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 801011a:	ee27 5a83 	vmul.f32	s10, s15, s6
 801011e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010122:	ee67 4a03 	vmul.f32	s9, s14, s6
 8010126:	ee34 4a84 	vadd.f32	s8, s9, s8
 801012a:	ee66 4a05 	vmul.f32	s9, s12, s10
 801012e:	ee34 4a84 	vadd.f32	s8, s9, s8
 8010132:	ee26 3a83 	vmul.f32	s6, s13, s6
 8010136:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 801013a:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 801013e:	ee67 4aa3 	vmul.f32	s9, s15, s7
 8010142:	ee74 4a84 	vadd.f32	s9, s9, s8
 8010146:	ee25 5a85 	vmul.f32	s10, s11, s10
 801014a:	ee35 5a03 	vadd.f32	s10, s10, s6
 801014e:	ee27 4a23 	vmul.f32	s8, s14, s7
 8010152:	ee35 5a04 	vadd.f32	s10, s10, s8
 8010156:	ee26 3a24 	vmul.f32	s6, s12, s9
 801015a:	ee33 3a05 	vadd.f32	s6, s6, s10
 801015e:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8010162:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 8010166:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 801016a:	ee27 5a84 	vmul.f32	s10, s15, s8
 801016e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8010172:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8010176:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801017a:	ee67 3a04 	vmul.f32	s7, s14, s8
 801017e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010182:	ee26 3a05 	vmul.f32	s6, s12, s10
 8010186:	ee33 3a24 	vadd.f32	s6, s6, s9
 801018a:	ee66 3a84 	vmul.f32	s7, s13, s8
 801018e:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8010192:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8010196:	ee67 4a84 	vmul.f32	s9, s15, s8
 801019a:	ee74 4a83 	vadd.f32	s9, s9, s6
 801019e:	ee25 5a85 	vmul.f32	s10, s11, s10
 80101a2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80101a6:	ee67 3a04 	vmul.f32	s7, s14, s8
 80101aa:	ee35 5a23 	vadd.f32	s10, s10, s7
 80101ae:	ee26 3a24 	vmul.f32	s6, s12, s9
 80101b2:	ee33 3a05 	vadd.f32	s6, s6, s10
 80101b6:	ee66 3a84 	vmul.f32	s7, s13, s8
 80101ba:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 80101be:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 80101c2:	ee27 5a84 	vmul.f32	s10, s15, s8
 80101c6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80101ca:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80101ce:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80101d2:	ee67 3a04 	vmul.f32	s7, s14, s8
 80101d6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80101da:	ee26 3a05 	vmul.f32	s6, s12, s10
 80101de:	ee33 3a24 	vadd.f32	s6, s6, s9
 80101e2:	ee66 3a84 	vmul.f32	s7, s13, s8
 80101e6:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 80101ea:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 80101ee:	ee67 4a84 	vmul.f32	s9, s15, s8
 80101f2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80101f6:	ee25 5a85 	vmul.f32	s10, s11, s10
 80101fa:	ee35 5a23 	vadd.f32	s10, s10, s7
 80101fe:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010202:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010206:	ee26 3a24 	vmul.f32	s6, s12, s9
 801020a:	ee33 3a05 	vadd.f32	s6, s6, s10
 801020e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010212:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 8010216:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 801021a:	ee27 5a84 	vmul.f32	s10, s15, s8
 801021e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8010222:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8010226:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801022a:	ee67 3a04 	vmul.f32	s7, s14, s8
 801022e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010232:	ee26 3a05 	vmul.f32	s6, s12, s10
 8010236:	ee33 3a24 	vadd.f32	s6, s6, s9
 801023a:	ee66 3a84 	vmul.f32	s7, s13, s8
 801023e:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 8010242:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8010246:	ee67 4a84 	vmul.f32	s9, s15, s8
 801024a:	ee74 4a83 	vadd.f32	s9, s9, s6
 801024e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8010252:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010256:	ee67 3a04 	vmul.f32	s7, s14, s8
 801025a:	ee35 5a23 	vadd.f32	s10, s10, s7
 801025e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8010262:	ee33 3a05 	vadd.f32	s6, s6, s10
 8010266:	ee66 3a84 	vmul.f32	s7, s13, s8
 801026a:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 801026e:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 8010272:	ee27 5a84 	vmul.f32	s10, s15, s8
 8010276:	ee35 5a03 	vadd.f32	s10, s10, s6
 801027a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 801027e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010282:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010286:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801028a:	ee26 3a05 	vmul.f32	s6, s12, s10
 801028e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8010292:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010296:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 801029a:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 801029e:	ee67 4a84 	vmul.f32	s9, s15, s8
 80102a2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80102a6:	ee25 5a85 	vmul.f32	s10, s11, s10
 80102aa:	ee35 5a23 	vadd.f32	s10, s10, s7
 80102ae:	ee67 3a04 	vmul.f32	s7, s14, s8
 80102b2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80102b6:	ee26 3a24 	vmul.f32	s6, s12, s9
 80102ba:	ee33 3a05 	vadd.f32	s6, s6, s10
 80102be:	ee66 3a84 	vmul.f32	s7, s13, s8
 80102c2:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 80102c6:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80102ca:	ee27 5a84 	vmul.f32	s10, s15, s8
 80102ce:	ee35 5a03 	vadd.f32	s10, s10, s6
 80102d2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80102d6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80102da:	ee67 3a04 	vmul.f32	s7, s14, s8
 80102de:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80102e2:	ee26 3a05 	vmul.f32	s6, s12, s10
 80102e6:	ee33 3a24 	vadd.f32	s6, s6, s9
 80102ea:	ee66 3a84 	vmul.f32	s7, s13, s8
 80102ee:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 80102f2:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 80102f6:	ee67 4a84 	vmul.f32	s9, s15, s8
 80102fa:	ee74 4a83 	vadd.f32	s9, s9, s6
 80102fe:	ee25 5a85 	vmul.f32	s10, s11, s10
 8010302:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010306:	ee67 3a04 	vmul.f32	s7, s14, s8
 801030a:	ee35 5a23 	vadd.f32	s10, s10, s7
 801030e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8010312:	ee33 3a05 	vadd.f32	s6, s6, s10
 8010316:	ee66 3a84 	vmul.f32	s7, s13, s8
 801031a:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 801031e:	ed10 4a04 	vldr	s8, [r0, #-16]
 8010322:	ee27 5a84 	vmul.f32	s10, s15, s8
 8010326:	ee35 5a03 	vadd.f32	s10, s10, s6
 801032a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 801032e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010332:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010336:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801033a:	ee26 3a05 	vmul.f32	s6, s12, s10
 801033e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8010342:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010346:	ed03 5a04 	vstr	s10, [r3, #-16]
 801034a:	ed10 4a03 	vldr	s8, [r0, #-12]
 801034e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8010352:	ee74 4a83 	vadd.f32	s9, s9, s6
 8010356:	ee25 5a85 	vmul.f32	s10, s11, s10
 801035a:	ee35 5a23 	vadd.f32	s10, s10, s7
 801035e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010362:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010366:	ee26 3a24 	vmul.f32	s6, s12, s9
 801036a:	ee33 3a05 	vadd.f32	s6, s6, s10
 801036e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010372:	ed43 4a03 	vstr	s9, [r3, #-12]
 8010376:	ed10 4a02 	vldr	s8, [r0, #-8]
 801037a:	ee27 5a84 	vmul.f32	s10, s15, s8
 801037e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8010382:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8010386:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801038a:	ee67 3a04 	vmul.f32	s7, s14, s8
 801038e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010392:	ee26 3a05 	vmul.f32	s6, s12, s10
 8010396:	ee33 3a24 	vadd.f32	s6, s6, s9
 801039a:	ee66 3a84 	vmul.f32	s7, s13, s8
 801039e:	ed03 5a02 	vstr	s10, [r3, #-8]
 80103a2:	ed10 4a01 	vldr	s8, [r0, #-4]
 80103a6:	ee67 4a84 	vmul.f32	s9, s15, s8
 80103aa:	ee74 4a83 	vadd.f32	s9, s9, s6
 80103ae:	ee25 5a85 	vmul.f32	s10, s11, s10
 80103b2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80103b6:	ee67 3a04 	vmul.f32	s7, s14, s8
 80103ba:	ee35 5a23 	vadd.f32	s10, s10, s7
 80103be:	ee66 3a24 	vmul.f32	s7, s12, s9
 80103c2:	ee73 3a85 	vadd.f32	s7, s7, s10
 80103c6:	ee26 5a84 	vmul.f32	s10, s13, s8
 80103ca:	ee25 4aa4 	vmul.f32	s8, s11, s9
 80103ce:	ee34 4a05 	vadd.f32	s8, s8, s10
 80103d2:	ed43 4a01 	vstr	s9, [r3, #-4]
 80103d6:	3040      	adds	r0, #64	; 0x40
 80103d8:	3340      	adds	r3, #64	; 0x40
 80103da:	3c01      	subs	r4, #1
 80103dc:	f47f ae9b 	bne.w	8010116 <arm_biquad_cascade_df2T_f32+0x52>
 80103e0:	4449      	add	r1, r9
 80103e2:	465b      	mov	r3, fp
 80103e4:	f1b8 0f00 	cmp.w	r8, #0
 80103e8:	d019      	beq.n	801041e <arm_biquad_cascade_df2T_f32+0x35a>
 80103ea:	eb01 000a 	add.w	r0, r1, sl
 80103ee:	ecf1 2a01 	vldmia	r1!, {s5}
 80103f2:	ee27 3aa2 	vmul.f32	s6, s15, s5
 80103f6:	ee33 3a23 	vadd.f32	s6, s6, s7
 80103fa:	ee67 3a22 	vmul.f32	s7, s14, s5
 80103fe:	ee33 4a84 	vadd.f32	s8, s7, s8
 8010402:	ee26 5a03 	vmul.f32	s10, s12, s6
 8010406:	ee75 3a04 	vadd.f32	s7, s10, s8
 801040a:	ee66 2aa2 	vmul.f32	s5, s13, s5
 801040e:	ee25 4a83 	vmul.f32	s8, s11, s6
 8010412:	ee34 4a22 	vadd.f32	s8, s8, s5
 8010416:	eca3 3a01 	vstmia	r3!, {s6}
 801041a:	4281      	cmp	r1, r0
 801041c:	d1e7      	bne.n	80103ee <arm_biquad_cascade_df2T_f32+0x32a>
 801041e:	ed4c 3a02 	vstr	s7, [ip, #-8]
 8010422:	ed0c 4a01 	vstr	s8, [ip, #-4]
 8010426:	3514      	adds	r5, #20
 8010428:	3608      	adds	r6, #8
 801042a:	4611      	mov	r1, r2
 801042c:	3f01      	subs	r7, #1
 801042e:	f47f ae5a 	bne.w	80100e6 <arm_biquad_cascade_df2T_f32+0x22>
 8010432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010436:	4613      	mov	r3, r2
 8010438:	e7d4      	b.n	80103e4 <arm_biquad_cascade_df2T_f32+0x320>
	...

0801043c <arm_biquad_cascade_df2T_init_f32>:
 801043c:	b510      	push	{r4, lr}
 801043e:	4604      	mov	r4, r0
 8010440:	4608      	mov	r0, r1
 8010442:	2100      	movs	r1, #0
 8010444:	60a2      	str	r2, [r4, #8]
 8010446:	00c2      	lsls	r2, r0, #3
 8010448:	7020      	strb	r0, [r4, #0]
 801044a:	4618      	mov	r0, r3
 801044c:	f000 facf 	bl	80109ee <memset>
 8010450:	6060      	str	r0, [r4, #4]
 8010452:	bd10      	pop	{r4, pc}

08010454 <arm_sub_f32>:
 8010454:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8010458:	b4f0      	push	{r4, r5, r6, r7}
 801045a:	d033      	beq.n	80104c4 <arm_sub_f32+0x70>
 801045c:	f100 0610 	add.w	r6, r0, #16
 8010460:	f101 0510 	add.w	r5, r1, #16
 8010464:	f102 0410 	add.w	r4, r2, #16
 8010468:	4667      	mov	r7, ip
 801046a:	ed15 7a04 	vldr	s14, [r5, #-16]
 801046e:	3f01      	subs	r7, #1
 8010470:	ed56 7a04 	vldr	s15, [r6, #-16]
 8010474:	f105 0510 	add.w	r5, r5, #16
 8010478:	f106 0610 	add.w	r6, r6, #16
 801047c:	f104 0410 	add.w	r4, r4, #16
 8010480:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010484:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8010488:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 801048c:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8010490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010494:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8010498:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 801049c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80104a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80104a4:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 80104a8:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80104ac:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80104b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80104b4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80104b8:	d1d7      	bne.n	801046a <arm_sub_f32+0x16>
 80104ba:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80104be:	4420      	add	r0, r4
 80104c0:	4421      	add	r1, r4
 80104c2:	4422      	add	r2, r4
 80104c4:	f013 0303 	ands.w	r3, r3, #3
 80104c8:	d01b      	beq.n	8010502 <arm_sub_f32+0xae>
 80104ca:	edd0 7a00 	vldr	s15, [r0]
 80104ce:	3b01      	subs	r3, #1
 80104d0:	ed91 7a00 	vldr	s14, [r1]
 80104d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80104d8:	edc2 7a00 	vstr	s15, [r2]
 80104dc:	d011      	beq.n	8010502 <arm_sub_f32+0xae>
 80104de:	edd0 7a01 	vldr	s15, [r0, #4]
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	ed91 7a01 	vldr	s14, [r1, #4]
 80104e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80104ec:	edc2 7a01 	vstr	s15, [r2, #4]
 80104f0:	d007      	beq.n	8010502 <arm_sub_f32+0xae>
 80104f2:	edd0 7a02 	vldr	s15, [r0, #8]
 80104f6:	ed91 7a02 	vldr	s14, [r1, #8]
 80104fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80104fe:	edc2 7a02 	vstr	s15, [r2, #8]
 8010502:	bcf0      	pop	{r4, r5, r6, r7}
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop

08010508 <arm_mult_f32>:
 8010508:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801050c:	b4f0      	push	{r4, r5, r6, r7}
 801050e:	d033      	beq.n	8010578 <arm_mult_f32+0x70>
 8010510:	f100 0610 	add.w	r6, r0, #16
 8010514:	f101 0510 	add.w	r5, r1, #16
 8010518:	f102 0410 	add.w	r4, r2, #16
 801051c:	4667      	mov	r7, ip
 801051e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8010522:	3f01      	subs	r7, #1
 8010524:	ed56 7a04 	vldr	s15, [r6, #-16]
 8010528:	f105 0510 	add.w	r5, r5, #16
 801052c:	f106 0610 	add.w	r6, r6, #16
 8010530:	f104 0410 	add.w	r4, r4, #16
 8010534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010538:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 801053c:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8010540:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8010544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010548:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 801054c:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8010550:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8010554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010558:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 801055c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8010560:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8010564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010568:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 801056c:	d1d7      	bne.n	801051e <arm_mult_f32+0x16>
 801056e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8010572:	4420      	add	r0, r4
 8010574:	4421      	add	r1, r4
 8010576:	4422      	add	r2, r4
 8010578:	f013 0303 	ands.w	r3, r3, #3
 801057c:	d01b      	beq.n	80105b6 <arm_mult_f32+0xae>
 801057e:	edd1 7a00 	vldr	s15, [r1]
 8010582:	3b01      	subs	r3, #1
 8010584:	ed90 7a00 	vldr	s14, [r0]
 8010588:	ee67 7a87 	vmul.f32	s15, s15, s14
 801058c:	edc2 7a00 	vstr	s15, [r2]
 8010590:	d011      	beq.n	80105b6 <arm_mult_f32+0xae>
 8010592:	edd0 7a01 	vldr	s15, [r0, #4]
 8010596:	2b01      	cmp	r3, #1
 8010598:	ed91 7a01 	vldr	s14, [r1, #4]
 801059c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105a0:	edc2 7a01 	vstr	s15, [r2, #4]
 80105a4:	d007      	beq.n	80105b6 <arm_mult_f32+0xae>
 80105a6:	edd0 7a02 	vldr	s15, [r0, #8]
 80105aa:	ed91 7a02 	vldr	s14, [r1, #8]
 80105ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105b2:	edc2 7a02 	vstr	s15, [r2, #8]
 80105b6:	bcf0      	pop	{r4, r5, r6, r7}
 80105b8:	4770      	bx	lr
 80105ba:	bf00      	nop

080105bc <arm_dot_prod_f32>:
 80105bc:	b4f0      	push	{r4, r5, r6, r7}
 80105be:	0897      	lsrs	r7, r2, #2
 80105c0:	d052      	beq.n	8010668 <arm_dot_prod_f32+0xac>
 80105c2:	f100 0510 	add.w	r5, r0, #16
 80105c6:	f101 0410 	add.w	r4, r1, #16
 80105ca:	463e      	mov	r6, r7
 80105cc:	eddf 7a28 	vldr	s15, [pc, #160]	; 8010670 <arm_dot_prod_f32+0xb4>
 80105d0:	ed14 7a04 	vldr	s14, [r4, #-16]
 80105d4:	3e01      	subs	r6, #1
 80105d6:	ed15 6a04 	vldr	s12, [r5, #-16]
 80105da:	f104 0410 	add.w	r4, r4, #16
 80105de:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
 80105e2:	f105 0510 	add.w	r5, r5, #16
 80105e6:	ee26 6a07 	vmul.f32	s12, s12, s14
 80105ea:	ed55 6a07 	vldr	s13, [r5, #-28]	; 0xffffffe4
 80105ee:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 80105f2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80105f6:	ed54 5a06 	vldr	s11, [r4, #-24]	; 0xffffffe8
 80105fa:	ee36 6a27 	vadd.f32	s12, s12, s15
 80105fe:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8010602:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010606:	ed54 5a05 	vldr	s11, [r4, #-20]	; 0xffffffec
 801060a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801060e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010612:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010616:	ee77 7a87 	vadd.f32	s15, s15, s14
 801061a:	d1d9      	bne.n	80105d0 <arm_dot_prod_f32+0x14>
 801061c:	013f      	lsls	r7, r7, #4
 801061e:	4438      	add	r0, r7
 8010620:	4439      	add	r1, r7
 8010622:	f012 0203 	ands.w	r2, r2, #3
 8010626:	d01b      	beq.n	8010660 <arm_dot_prod_f32+0xa4>
 8010628:	ed91 7a00 	vldr	s14, [r1]
 801062c:	3a01      	subs	r2, #1
 801062e:	edd0 6a00 	vldr	s13, [r0]
 8010632:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010636:	ee77 7a87 	vadd.f32	s15, s15, s14
 801063a:	d011      	beq.n	8010660 <arm_dot_prod_f32+0xa4>
 801063c:	ed91 7a01 	vldr	s14, [r1, #4]
 8010640:	2a01      	cmp	r2, #1
 8010642:	edd0 6a01 	vldr	s13, [r0, #4]
 8010646:	ee27 7a26 	vmul.f32	s14, s14, s13
 801064a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801064e:	d007      	beq.n	8010660 <arm_dot_prod_f32+0xa4>
 8010650:	ed90 7a02 	vldr	s14, [r0, #8]
 8010654:	edd1 6a02 	vldr	s13, [r1, #8]
 8010658:	ee27 7a26 	vmul.f32	s14, s14, s13
 801065c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010660:	edc3 7a00 	vstr	s15, [r3]
 8010664:	bcf0      	pop	{r4, r5, r6, r7}
 8010666:	4770      	bx	lr
 8010668:	eddf 7a01 	vldr	s15, [pc, #4]	; 8010670 <arm_dot_prod_f32+0xb4>
 801066c:	e7d9      	b.n	8010622 <arm_dot_prod_f32+0x66>
 801066e:	bf00      	nop
 8010670:	00000000 	.word	0x00000000

08010674 <arm_add_f32>:
 8010674:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8010678:	b4f0      	push	{r4, r5, r6, r7}
 801067a:	d033      	beq.n	80106e4 <arm_add_f32+0x70>
 801067c:	f100 0610 	add.w	r6, r0, #16
 8010680:	f101 0510 	add.w	r5, r1, #16
 8010684:	f102 0410 	add.w	r4, r2, #16
 8010688:	4667      	mov	r7, ip
 801068a:	ed15 7a04 	vldr	s14, [r5, #-16]
 801068e:	3f01      	subs	r7, #1
 8010690:	ed56 7a04 	vldr	s15, [r6, #-16]
 8010694:	f105 0510 	add.w	r5, r5, #16
 8010698:	f106 0610 	add.w	r6, r6, #16
 801069c:	f104 0410 	add.w	r4, r4, #16
 80106a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106a4:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 80106a8:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 80106ac:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 80106b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106b4:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 80106b8:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 80106bc:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80106c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106c4:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 80106c8:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80106cc:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80106d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106d4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80106d8:	d1d7      	bne.n	801068a <arm_add_f32+0x16>
 80106da:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80106de:	4420      	add	r0, r4
 80106e0:	4421      	add	r1, r4
 80106e2:	4422      	add	r2, r4
 80106e4:	f013 0303 	ands.w	r3, r3, #3
 80106e8:	d01b      	beq.n	8010722 <arm_add_f32+0xae>
 80106ea:	edd1 7a00 	vldr	s15, [r1]
 80106ee:	3b01      	subs	r3, #1
 80106f0:	ed90 7a00 	vldr	s14, [r0]
 80106f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106f8:	edc2 7a00 	vstr	s15, [r2]
 80106fc:	d011      	beq.n	8010722 <arm_add_f32+0xae>
 80106fe:	edd0 7a01 	vldr	s15, [r0, #4]
 8010702:	2b01      	cmp	r3, #1
 8010704:	ed91 7a01 	vldr	s14, [r1, #4]
 8010708:	ee77 7a87 	vadd.f32	s15, s15, s14
 801070c:	edc2 7a01 	vstr	s15, [r2, #4]
 8010710:	d007      	beq.n	8010722 <arm_add_f32+0xae>
 8010712:	edd0 7a02 	vldr	s15, [r0, #8]
 8010716:	ed91 7a02 	vldr	s14, [r1, #8]
 801071a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801071e:	edc2 7a02 	vstr	s15, [r2, #8]
 8010722:	bcf0      	pop	{r4, r5, r6, r7}
 8010724:	4770      	bx	lr
 8010726:	bf00      	nop

08010728 <arm_abs_f32>:
 8010728:	b470      	push	{r4, r5, r6}
 801072a:	0896      	lsrs	r6, r2, #2
 801072c:	d025      	beq.n	801077a <arm_abs_f32+0x52>
 801072e:	f100 0410 	add.w	r4, r0, #16
 8010732:	f101 0310 	add.w	r3, r1, #16
 8010736:	4635      	mov	r5, r6
 8010738:	ed54 7a04 	vldr	s15, [r4, #-16]
 801073c:	3d01      	subs	r5, #1
 801073e:	f104 0410 	add.w	r4, r4, #16
 8010742:	f103 0310 	add.w	r3, r3, #16
 8010746:	eef0 7ae7 	vabs.f32	s15, s15
 801074a:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 801074e:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8010752:	eef0 7ae7 	vabs.f32	s15, s15
 8010756:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 801075a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 801075e:	eef0 7ae7 	vabs.f32	s15, s15
 8010762:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8010766:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 801076a:	eef0 7ae7 	vabs.f32	s15, s15
 801076e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8010772:	d1e1      	bne.n	8010738 <arm_abs_f32+0x10>
 8010774:	0136      	lsls	r6, r6, #4
 8010776:	4430      	add	r0, r6
 8010778:	4431      	add	r1, r6
 801077a:	f012 0203 	ands.w	r2, r2, #3
 801077e:	d015      	beq.n	80107ac <arm_abs_f32+0x84>
 8010780:	edd0 7a00 	vldr	s15, [r0]
 8010784:	3a01      	subs	r2, #1
 8010786:	eef0 7ae7 	vabs.f32	s15, s15
 801078a:	edc1 7a00 	vstr	s15, [r1]
 801078e:	d00d      	beq.n	80107ac <arm_abs_f32+0x84>
 8010790:	edd0 7a01 	vldr	s15, [r0, #4]
 8010794:	2a01      	cmp	r2, #1
 8010796:	eef0 7ae7 	vabs.f32	s15, s15
 801079a:	edc1 7a01 	vstr	s15, [r1, #4]
 801079e:	d005      	beq.n	80107ac <arm_abs_f32+0x84>
 80107a0:	edd0 7a02 	vldr	s15, [r0, #8]
 80107a4:	eef0 7ae7 	vabs.f32	s15, s15
 80107a8:	edc1 7a02 	vstr	s15, [r1, #8]
 80107ac:	bc70      	pop	{r4, r5, r6}
 80107ae:	4770      	bx	lr

080107b0 <std>:
 80107b0:	2300      	movs	r3, #0
 80107b2:	b510      	push	{r4, lr}
 80107b4:	4604      	mov	r4, r0
 80107b6:	e9c0 3300 	strd	r3, r3, [r0]
 80107ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80107be:	6083      	str	r3, [r0, #8]
 80107c0:	8181      	strh	r1, [r0, #12]
 80107c2:	6643      	str	r3, [r0, #100]	; 0x64
 80107c4:	81c2      	strh	r2, [r0, #14]
 80107c6:	6183      	str	r3, [r0, #24]
 80107c8:	4619      	mov	r1, r3
 80107ca:	2208      	movs	r2, #8
 80107cc:	305c      	adds	r0, #92	; 0x5c
 80107ce:	f000 f90e 	bl	80109ee <memset>
 80107d2:	4b0d      	ldr	r3, [pc, #52]	; (8010808 <std+0x58>)
 80107d4:	6263      	str	r3, [r4, #36]	; 0x24
 80107d6:	4b0d      	ldr	r3, [pc, #52]	; (801080c <std+0x5c>)
 80107d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80107da:	4b0d      	ldr	r3, [pc, #52]	; (8010810 <std+0x60>)
 80107dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80107de:	4b0d      	ldr	r3, [pc, #52]	; (8010814 <std+0x64>)
 80107e0:	6323      	str	r3, [r4, #48]	; 0x30
 80107e2:	4b0d      	ldr	r3, [pc, #52]	; (8010818 <std+0x68>)
 80107e4:	6224      	str	r4, [r4, #32]
 80107e6:	429c      	cmp	r4, r3
 80107e8:	d006      	beq.n	80107f8 <std+0x48>
 80107ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80107ee:	4294      	cmp	r4, r2
 80107f0:	d002      	beq.n	80107f8 <std+0x48>
 80107f2:	33d0      	adds	r3, #208	; 0xd0
 80107f4:	429c      	cmp	r4, r3
 80107f6:	d105      	bne.n	8010804 <std+0x54>
 80107f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80107fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010800:	f000 b96e 	b.w	8010ae0 <__retarget_lock_init_recursive>
 8010804:	bd10      	pop	{r4, pc}
 8010806:	bf00      	nop
 8010808:	08010969 	.word	0x08010969
 801080c:	0801098b 	.word	0x0801098b
 8010810:	080109c3 	.word	0x080109c3
 8010814:	080109e7 	.word	0x080109e7
 8010818:	24002b58 	.word	0x24002b58

0801081c <stdio_exit_handler>:
 801081c:	4a02      	ldr	r2, [pc, #8]	; (8010828 <stdio_exit_handler+0xc>)
 801081e:	4903      	ldr	r1, [pc, #12]	; (801082c <stdio_exit_handler+0x10>)
 8010820:	4803      	ldr	r0, [pc, #12]	; (8010830 <stdio_exit_handler+0x14>)
 8010822:	f000 b869 	b.w	80108f8 <_fwalk_sglue>
 8010826:	bf00      	nop
 8010828:	24000468 	.word	0x24000468
 801082c:	0801138d 	.word	0x0801138d
 8010830:	24000474 	.word	0x24000474

08010834 <cleanup_stdio>:
 8010834:	6841      	ldr	r1, [r0, #4]
 8010836:	4b0c      	ldr	r3, [pc, #48]	; (8010868 <cleanup_stdio+0x34>)
 8010838:	4299      	cmp	r1, r3
 801083a:	b510      	push	{r4, lr}
 801083c:	4604      	mov	r4, r0
 801083e:	d001      	beq.n	8010844 <cleanup_stdio+0x10>
 8010840:	f000 fda4 	bl	801138c <_fflush_r>
 8010844:	68a1      	ldr	r1, [r4, #8]
 8010846:	4b09      	ldr	r3, [pc, #36]	; (801086c <cleanup_stdio+0x38>)
 8010848:	4299      	cmp	r1, r3
 801084a:	d002      	beq.n	8010852 <cleanup_stdio+0x1e>
 801084c:	4620      	mov	r0, r4
 801084e:	f000 fd9d 	bl	801138c <_fflush_r>
 8010852:	68e1      	ldr	r1, [r4, #12]
 8010854:	4b06      	ldr	r3, [pc, #24]	; (8010870 <cleanup_stdio+0x3c>)
 8010856:	4299      	cmp	r1, r3
 8010858:	d004      	beq.n	8010864 <cleanup_stdio+0x30>
 801085a:	4620      	mov	r0, r4
 801085c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010860:	f000 bd94 	b.w	801138c <_fflush_r>
 8010864:	bd10      	pop	{r4, pc}
 8010866:	bf00      	nop
 8010868:	24002b58 	.word	0x24002b58
 801086c:	24002bc0 	.word	0x24002bc0
 8010870:	24002c28 	.word	0x24002c28

08010874 <global_stdio_init.part.0>:
 8010874:	b510      	push	{r4, lr}
 8010876:	4b0b      	ldr	r3, [pc, #44]	; (80108a4 <global_stdio_init.part.0+0x30>)
 8010878:	4c0b      	ldr	r4, [pc, #44]	; (80108a8 <global_stdio_init.part.0+0x34>)
 801087a:	4a0c      	ldr	r2, [pc, #48]	; (80108ac <global_stdio_init.part.0+0x38>)
 801087c:	601a      	str	r2, [r3, #0]
 801087e:	4620      	mov	r0, r4
 8010880:	2200      	movs	r2, #0
 8010882:	2104      	movs	r1, #4
 8010884:	f7ff ff94 	bl	80107b0 <std>
 8010888:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801088c:	2201      	movs	r2, #1
 801088e:	2109      	movs	r1, #9
 8010890:	f7ff ff8e 	bl	80107b0 <std>
 8010894:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010898:	2202      	movs	r2, #2
 801089a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801089e:	2112      	movs	r1, #18
 80108a0:	f7ff bf86 	b.w	80107b0 <std>
 80108a4:	24002c90 	.word	0x24002c90
 80108a8:	24002b58 	.word	0x24002b58
 80108ac:	0801081d 	.word	0x0801081d

080108b0 <__sfp_lock_acquire>:
 80108b0:	4801      	ldr	r0, [pc, #4]	; (80108b8 <__sfp_lock_acquire+0x8>)
 80108b2:	f000 b916 	b.w	8010ae2 <__retarget_lock_acquire_recursive>
 80108b6:	bf00      	nop
 80108b8:	24002c99 	.word	0x24002c99

080108bc <__sfp_lock_release>:
 80108bc:	4801      	ldr	r0, [pc, #4]	; (80108c4 <__sfp_lock_release+0x8>)
 80108be:	f000 b911 	b.w	8010ae4 <__retarget_lock_release_recursive>
 80108c2:	bf00      	nop
 80108c4:	24002c99 	.word	0x24002c99

080108c8 <__sinit>:
 80108c8:	b510      	push	{r4, lr}
 80108ca:	4604      	mov	r4, r0
 80108cc:	f7ff fff0 	bl	80108b0 <__sfp_lock_acquire>
 80108d0:	6a23      	ldr	r3, [r4, #32]
 80108d2:	b11b      	cbz	r3, 80108dc <__sinit+0x14>
 80108d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108d8:	f7ff bff0 	b.w	80108bc <__sfp_lock_release>
 80108dc:	4b04      	ldr	r3, [pc, #16]	; (80108f0 <__sinit+0x28>)
 80108de:	6223      	str	r3, [r4, #32]
 80108e0:	4b04      	ldr	r3, [pc, #16]	; (80108f4 <__sinit+0x2c>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d1f5      	bne.n	80108d4 <__sinit+0xc>
 80108e8:	f7ff ffc4 	bl	8010874 <global_stdio_init.part.0>
 80108ec:	e7f2      	b.n	80108d4 <__sinit+0xc>
 80108ee:	bf00      	nop
 80108f0:	08010835 	.word	0x08010835
 80108f4:	24002c90 	.word	0x24002c90

080108f8 <_fwalk_sglue>:
 80108f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108fc:	4607      	mov	r7, r0
 80108fe:	4688      	mov	r8, r1
 8010900:	4614      	mov	r4, r2
 8010902:	2600      	movs	r6, #0
 8010904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010908:	f1b9 0901 	subs.w	r9, r9, #1
 801090c:	d505      	bpl.n	801091a <_fwalk_sglue+0x22>
 801090e:	6824      	ldr	r4, [r4, #0]
 8010910:	2c00      	cmp	r4, #0
 8010912:	d1f7      	bne.n	8010904 <_fwalk_sglue+0xc>
 8010914:	4630      	mov	r0, r6
 8010916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801091a:	89ab      	ldrh	r3, [r5, #12]
 801091c:	2b01      	cmp	r3, #1
 801091e:	d907      	bls.n	8010930 <_fwalk_sglue+0x38>
 8010920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010924:	3301      	adds	r3, #1
 8010926:	d003      	beq.n	8010930 <_fwalk_sglue+0x38>
 8010928:	4629      	mov	r1, r5
 801092a:	4638      	mov	r0, r7
 801092c:	47c0      	blx	r8
 801092e:	4306      	orrs	r6, r0
 8010930:	3568      	adds	r5, #104	; 0x68
 8010932:	e7e9      	b.n	8010908 <_fwalk_sglue+0x10>

08010934 <iprintf>:
 8010934:	b40f      	push	{r0, r1, r2, r3}
 8010936:	b507      	push	{r0, r1, r2, lr}
 8010938:	4906      	ldr	r1, [pc, #24]	; (8010954 <iprintf+0x20>)
 801093a:	ab04      	add	r3, sp, #16
 801093c:	6808      	ldr	r0, [r1, #0]
 801093e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010942:	6881      	ldr	r1, [r0, #8]
 8010944:	9301      	str	r3, [sp, #4]
 8010946:	f000 f9f1 	bl	8010d2c <_vfiprintf_r>
 801094a:	b003      	add	sp, #12
 801094c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010950:	b004      	add	sp, #16
 8010952:	4770      	bx	lr
 8010954:	240004c0 	.word	0x240004c0

08010958 <putchar>:
 8010958:	4b02      	ldr	r3, [pc, #8]	; (8010964 <putchar+0xc>)
 801095a:	4601      	mov	r1, r0
 801095c:	6818      	ldr	r0, [r3, #0]
 801095e:	6882      	ldr	r2, [r0, #8]
 8010960:	f000 bd3c 	b.w	80113dc <_putc_r>
 8010964:	240004c0 	.word	0x240004c0

08010968 <__sread>:
 8010968:	b510      	push	{r4, lr}
 801096a:	460c      	mov	r4, r1
 801096c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010970:	f000 f868 	bl	8010a44 <_read_r>
 8010974:	2800      	cmp	r0, #0
 8010976:	bfab      	itete	ge
 8010978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801097a:	89a3      	ldrhlt	r3, [r4, #12]
 801097c:	181b      	addge	r3, r3, r0
 801097e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010982:	bfac      	ite	ge
 8010984:	6563      	strge	r3, [r4, #84]	; 0x54
 8010986:	81a3      	strhlt	r3, [r4, #12]
 8010988:	bd10      	pop	{r4, pc}

0801098a <__swrite>:
 801098a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801098e:	461f      	mov	r7, r3
 8010990:	898b      	ldrh	r3, [r1, #12]
 8010992:	05db      	lsls	r3, r3, #23
 8010994:	4605      	mov	r5, r0
 8010996:	460c      	mov	r4, r1
 8010998:	4616      	mov	r6, r2
 801099a:	d505      	bpl.n	80109a8 <__swrite+0x1e>
 801099c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109a0:	2302      	movs	r3, #2
 80109a2:	2200      	movs	r2, #0
 80109a4:	f000 f83c 	bl	8010a20 <_lseek_r>
 80109a8:	89a3      	ldrh	r3, [r4, #12]
 80109aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80109b2:	81a3      	strh	r3, [r4, #12]
 80109b4:	4632      	mov	r2, r6
 80109b6:	463b      	mov	r3, r7
 80109b8:	4628      	mov	r0, r5
 80109ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109be:	f000 b853 	b.w	8010a68 <_write_r>

080109c2 <__sseek>:
 80109c2:	b510      	push	{r4, lr}
 80109c4:	460c      	mov	r4, r1
 80109c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109ca:	f000 f829 	bl	8010a20 <_lseek_r>
 80109ce:	1c43      	adds	r3, r0, #1
 80109d0:	89a3      	ldrh	r3, [r4, #12]
 80109d2:	bf15      	itete	ne
 80109d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80109d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80109da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80109de:	81a3      	strheq	r3, [r4, #12]
 80109e0:	bf18      	it	ne
 80109e2:	81a3      	strhne	r3, [r4, #12]
 80109e4:	bd10      	pop	{r4, pc}

080109e6 <__sclose>:
 80109e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109ea:	f000 b809 	b.w	8010a00 <_close_r>

080109ee <memset>:
 80109ee:	4402      	add	r2, r0
 80109f0:	4603      	mov	r3, r0
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d100      	bne.n	80109f8 <memset+0xa>
 80109f6:	4770      	bx	lr
 80109f8:	f803 1b01 	strb.w	r1, [r3], #1
 80109fc:	e7f9      	b.n	80109f2 <memset+0x4>
	...

08010a00 <_close_r>:
 8010a00:	b538      	push	{r3, r4, r5, lr}
 8010a02:	4d06      	ldr	r5, [pc, #24]	; (8010a1c <_close_r+0x1c>)
 8010a04:	2300      	movs	r3, #0
 8010a06:	4604      	mov	r4, r0
 8010a08:	4608      	mov	r0, r1
 8010a0a:	602b      	str	r3, [r5, #0]
 8010a0c:	f7f1 faaf 	bl	8001f6e <_close>
 8010a10:	1c43      	adds	r3, r0, #1
 8010a12:	d102      	bne.n	8010a1a <_close_r+0x1a>
 8010a14:	682b      	ldr	r3, [r5, #0]
 8010a16:	b103      	cbz	r3, 8010a1a <_close_r+0x1a>
 8010a18:	6023      	str	r3, [r4, #0]
 8010a1a:	bd38      	pop	{r3, r4, r5, pc}
 8010a1c:	24002c94 	.word	0x24002c94

08010a20 <_lseek_r>:
 8010a20:	b538      	push	{r3, r4, r5, lr}
 8010a22:	4d07      	ldr	r5, [pc, #28]	; (8010a40 <_lseek_r+0x20>)
 8010a24:	4604      	mov	r4, r0
 8010a26:	4608      	mov	r0, r1
 8010a28:	4611      	mov	r1, r2
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	602a      	str	r2, [r5, #0]
 8010a2e:	461a      	mov	r2, r3
 8010a30:	f7f1 fac4 	bl	8001fbc <_lseek>
 8010a34:	1c43      	adds	r3, r0, #1
 8010a36:	d102      	bne.n	8010a3e <_lseek_r+0x1e>
 8010a38:	682b      	ldr	r3, [r5, #0]
 8010a3a:	b103      	cbz	r3, 8010a3e <_lseek_r+0x1e>
 8010a3c:	6023      	str	r3, [r4, #0]
 8010a3e:	bd38      	pop	{r3, r4, r5, pc}
 8010a40:	24002c94 	.word	0x24002c94

08010a44 <_read_r>:
 8010a44:	b538      	push	{r3, r4, r5, lr}
 8010a46:	4d07      	ldr	r5, [pc, #28]	; (8010a64 <_read_r+0x20>)
 8010a48:	4604      	mov	r4, r0
 8010a4a:	4608      	mov	r0, r1
 8010a4c:	4611      	mov	r1, r2
 8010a4e:	2200      	movs	r2, #0
 8010a50:	602a      	str	r2, [r5, #0]
 8010a52:	461a      	mov	r2, r3
 8010a54:	f7f1 fa52 	bl	8001efc <_read>
 8010a58:	1c43      	adds	r3, r0, #1
 8010a5a:	d102      	bne.n	8010a62 <_read_r+0x1e>
 8010a5c:	682b      	ldr	r3, [r5, #0]
 8010a5e:	b103      	cbz	r3, 8010a62 <_read_r+0x1e>
 8010a60:	6023      	str	r3, [r4, #0]
 8010a62:	bd38      	pop	{r3, r4, r5, pc}
 8010a64:	24002c94 	.word	0x24002c94

08010a68 <_write_r>:
 8010a68:	b538      	push	{r3, r4, r5, lr}
 8010a6a:	4d07      	ldr	r5, [pc, #28]	; (8010a88 <_write_r+0x20>)
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	4608      	mov	r0, r1
 8010a70:	4611      	mov	r1, r2
 8010a72:	2200      	movs	r2, #0
 8010a74:	602a      	str	r2, [r5, #0]
 8010a76:	461a      	mov	r2, r3
 8010a78:	f7f1 fa5d 	bl	8001f36 <_write>
 8010a7c:	1c43      	adds	r3, r0, #1
 8010a7e:	d102      	bne.n	8010a86 <_write_r+0x1e>
 8010a80:	682b      	ldr	r3, [r5, #0]
 8010a82:	b103      	cbz	r3, 8010a86 <_write_r+0x1e>
 8010a84:	6023      	str	r3, [r4, #0]
 8010a86:	bd38      	pop	{r3, r4, r5, pc}
 8010a88:	24002c94 	.word	0x24002c94

08010a8c <__errno>:
 8010a8c:	4b01      	ldr	r3, [pc, #4]	; (8010a94 <__errno+0x8>)
 8010a8e:	6818      	ldr	r0, [r3, #0]
 8010a90:	4770      	bx	lr
 8010a92:	bf00      	nop
 8010a94:	240004c0 	.word	0x240004c0

08010a98 <__libc_init_array>:
 8010a98:	b570      	push	{r4, r5, r6, lr}
 8010a9a:	4d0d      	ldr	r5, [pc, #52]	; (8010ad0 <__libc_init_array+0x38>)
 8010a9c:	4c0d      	ldr	r4, [pc, #52]	; (8010ad4 <__libc_init_array+0x3c>)
 8010a9e:	1b64      	subs	r4, r4, r5
 8010aa0:	10a4      	asrs	r4, r4, #2
 8010aa2:	2600      	movs	r6, #0
 8010aa4:	42a6      	cmp	r6, r4
 8010aa6:	d109      	bne.n	8010abc <__libc_init_array+0x24>
 8010aa8:	4d0b      	ldr	r5, [pc, #44]	; (8010ad8 <__libc_init_array+0x40>)
 8010aaa:	4c0c      	ldr	r4, [pc, #48]	; (8010adc <__libc_init_array+0x44>)
 8010aac:	f000 fdf4 	bl	8011698 <_init>
 8010ab0:	1b64      	subs	r4, r4, r5
 8010ab2:	10a4      	asrs	r4, r4, #2
 8010ab4:	2600      	movs	r6, #0
 8010ab6:	42a6      	cmp	r6, r4
 8010ab8:	d105      	bne.n	8010ac6 <__libc_init_array+0x2e>
 8010aba:	bd70      	pop	{r4, r5, r6, pc}
 8010abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ac0:	4798      	blx	r3
 8010ac2:	3601      	adds	r6, #1
 8010ac4:	e7ee      	b.n	8010aa4 <__libc_init_array+0xc>
 8010ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010aca:	4798      	blx	r3
 8010acc:	3601      	adds	r6, #1
 8010ace:	e7f2      	b.n	8010ab6 <__libc_init_array+0x1e>
 8010ad0:	080117e4 	.word	0x080117e4
 8010ad4:	080117e4 	.word	0x080117e4
 8010ad8:	080117e4 	.word	0x080117e4
 8010adc:	080117e8 	.word	0x080117e8

08010ae0 <__retarget_lock_init_recursive>:
 8010ae0:	4770      	bx	lr

08010ae2 <__retarget_lock_acquire_recursive>:
 8010ae2:	4770      	bx	lr

08010ae4 <__retarget_lock_release_recursive>:
 8010ae4:	4770      	bx	lr
	...

08010ae8 <_free_r>:
 8010ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010aea:	2900      	cmp	r1, #0
 8010aec:	d044      	beq.n	8010b78 <_free_r+0x90>
 8010aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010af2:	9001      	str	r0, [sp, #4]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	f1a1 0404 	sub.w	r4, r1, #4
 8010afa:	bfb8      	it	lt
 8010afc:	18e4      	addlt	r4, r4, r3
 8010afe:	f000 f8df 	bl	8010cc0 <__malloc_lock>
 8010b02:	4a1e      	ldr	r2, [pc, #120]	; (8010b7c <_free_r+0x94>)
 8010b04:	9801      	ldr	r0, [sp, #4]
 8010b06:	6813      	ldr	r3, [r2, #0]
 8010b08:	b933      	cbnz	r3, 8010b18 <_free_r+0x30>
 8010b0a:	6063      	str	r3, [r4, #4]
 8010b0c:	6014      	str	r4, [r2, #0]
 8010b0e:	b003      	add	sp, #12
 8010b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b14:	f000 b8da 	b.w	8010ccc <__malloc_unlock>
 8010b18:	42a3      	cmp	r3, r4
 8010b1a:	d908      	bls.n	8010b2e <_free_r+0x46>
 8010b1c:	6825      	ldr	r5, [r4, #0]
 8010b1e:	1961      	adds	r1, r4, r5
 8010b20:	428b      	cmp	r3, r1
 8010b22:	bf01      	itttt	eq
 8010b24:	6819      	ldreq	r1, [r3, #0]
 8010b26:	685b      	ldreq	r3, [r3, #4]
 8010b28:	1949      	addeq	r1, r1, r5
 8010b2a:	6021      	streq	r1, [r4, #0]
 8010b2c:	e7ed      	b.n	8010b0a <_free_r+0x22>
 8010b2e:	461a      	mov	r2, r3
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	b10b      	cbz	r3, 8010b38 <_free_r+0x50>
 8010b34:	42a3      	cmp	r3, r4
 8010b36:	d9fa      	bls.n	8010b2e <_free_r+0x46>
 8010b38:	6811      	ldr	r1, [r2, #0]
 8010b3a:	1855      	adds	r5, r2, r1
 8010b3c:	42a5      	cmp	r5, r4
 8010b3e:	d10b      	bne.n	8010b58 <_free_r+0x70>
 8010b40:	6824      	ldr	r4, [r4, #0]
 8010b42:	4421      	add	r1, r4
 8010b44:	1854      	adds	r4, r2, r1
 8010b46:	42a3      	cmp	r3, r4
 8010b48:	6011      	str	r1, [r2, #0]
 8010b4a:	d1e0      	bne.n	8010b0e <_free_r+0x26>
 8010b4c:	681c      	ldr	r4, [r3, #0]
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	6053      	str	r3, [r2, #4]
 8010b52:	440c      	add	r4, r1
 8010b54:	6014      	str	r4, [r2, #0]
 8010b56:	e7da      	b.n	8010b0e <_free_r+0x26>
 8010b58:	d902      	bls.n	8010b60 <_free_r+0x78>
 8010b5a:	230c      	movs	r3, #12
 8010b5c:	6003      	str	r3, [r0, #0]
 8010b5e:	e7d6      	b.n	8010b0e <_free_r+0x26>
 8010b60:	6825      	ldr	r5, [r4, #0]
 8010b62:	1961      	adds	r1, r4, r5
 8010b64:	428b      	cmp	r3, r1
 8010b66:	bf04      	itt	eq
 8010b68:	6819      	ldreq	r1, [r3, #0]
 8010b6a:	685b      	ldreq	r3, [r3, #4]
 8010b6c:	6063      	str	r3, [r4, #4]
 8010b6e:	bf04      	itt	eq
 8010b70:	1949      	addeq	r1, r1, r5
 8010b72:	6021      	streq	r1, [r4, #0]
 8010b74:	6054      	str	r4, [r2, #4]
 8010b76:	e7ca      	b.n	8010b0e <_free_r+0x26>
 8010b78:	b003      	add	sp, #12
 8010b7a:	bd30      	pop	{r4, r5, pc}
 8010b7c:	24002c9c 	.word	0x24002c9c

08010b80 <sbrk_aligned>:
 8010b80:	b570      	push	{r4, r5, r6, lr}
 8010b82:	4e0e      	ldr	r6, [pc, #56]	; (8010bbc <sbrk_aligned+0x3c>)
 8010b84:	460c      	mov	r4, r1
 8010b86:	6831      	ldr	r1, [r6, #0]
 8010b88:	4605      	mov	r5, r0
 8010b8a:	b911      	cbnz	r1, 8010b92 <sbrk_aligned+0x12>
 8010b8c:	f000 fcf0 	bl	8011570 <_sbrk_r>
 8010b90:	6030      	str	r0, [r6, #0]
 8010b92:	4621      	mov	r1, r4
 8010b94:	4628      	mov	r0, r5
 8010b96:	f000 fceb 	bl	8011570 <_sbrk_r>
 8010b9a:	1c43      	adds	r3, r0, #1
 8010b9c:	d00a      	beq.n	8010bb4 <sbrk_aligned+0x34>
 8010b9e:	1cc4      	adds	r4, r0, #3
 8010ba0:	f024 0403 	bic.w	r4, r4, #3
 8010ba4:	42a0      	cmp	r0, r4
 8010ba6:	d007      	beq.n	8010bb8 <sbrk_aligned+0x38>
 8010ba8:	1a21      	subs	r1, r4, r0
 8010baa:	4628      	mov	r0, r5
 8010bac:	f000 fce0 	bl	8011570 <_sbrk_r>
 8010bb0:	3001      	adds	r0, #1
 8010bb2:	d101      	bne.n	8010bb8 <sbrk_aligned+0x38>
 8010bb4:	f04f 34ff 	mov.w	r4, #4294967295
 8010bb8:	4620      	mov	r0, r4
 8010bba:	bd70      	pop	{r4, r5, r6, pc}
 8010bbc:	24002ca0 	.word	0x24002ca0

08010bc0 <_malloc_r>:
 8010bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bc4:	1ccd      	adds	r5, r1, #3
 8010bc6:	f025 0503 	bic.w	r5, r5, #3
 8010bca:	3508      	adds	r5, #8
 8010bcc:	2d0c      	cmp	r5, #12
 8010bce:	bf38      	it	cc
 8010bd0:	250c      	movcc	r5, #12
 8010bd2:	2d00      	cmp	r5, #0
 8010bd4:	4607      	mov	r7, r0
 8010bd6:	db01      	blt.n	8010bdc <_malloc_r+0x1c>
 8010bd8:	42a9      	cmp	r1, r5
 8010bda:	d905      	bls.n	8010be8 <_malloc_r+0x28>
 8010bdc:	230c      	movs	r3, #12
 8010bde:	603b      	str	r3, [r7, #0]
 8010be0:	2600      	movs	r6, #0
 8010be2:	4630      	mov	r0, r6
 8010be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010be8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010cbc <_malloc_r+0xfc>
 8010bec:	f000 f868 	bl	8010cc0 <__malloc_lock>
 8010bf0:	f8d8 3000 	ldr.w	r3, [r8]
 8010bf4:	461c      	mov	r4, r3
 8010bf6:	bb5c      	cbnz	r4, 8010c50 <_malloc_r+0x90>
 8010bf8:	4629      	mov	r1, r5
 8010bfa:	4638      	mov	r0, r7
 8010bfc:	f7ff ffc0 	bl	8010b80 <sbrk_aligned>
 8010c00:	1c43      	adds	r3, r0, #1
 8010c02:	4604      	mov	r4, r0
 8010c04:	d155      	bne.n	8010cb2 <_malloc_r+0xf2>
 8010c06:	f8d8 4000 	ldr.w	r4, [r8]
 8010c0a:	4626      	mov	r6, r4
 8010c0c:	2e00      	cmp	r6, #0
 8010c0e:	d145      	bne.n	8010c9c <_malloc_r+0xdc>
 8010c10:	2c00      	cmp	r4, #0
 8010c12:	d048      	beq.n	8010ca6 <_malloc_r+0xe6>
 8010c14:	6823      	ldr	r3, [r4, #0]
 8010c16:	4631      	mov	r1, r6
 8010c18:	4638      	mov	r0, r7
 8010c1a:	eb04 0903 	add.w	r9, r4, r3
 8010c1e:	f000 fca7 	bl	8011570 <_sbrk_r>
 8010c22:	4581      	cmp	r9, r0
 8010c24:	d13f      	bne.n	8010ca6 <_malloc_r+0xe6>
 8010c26:	6821      	ldr	r1, [r4, #0]
 8010c28:	1a6d      	subs	r5, r5, r1
 8010c2a:	4629      	mov	r1, r5
 8010c2c:	4638      	mov	r0, r7
 8010c2e:	f7ff ffa7 	bl	8010b80 <sbrk_aligned>
 8010c32:	3001      	adds	r0, #1
 8010c34:	d037      	beq.n	8010ca6 <_malloc_r+0xe6>
 8010c36:	6823      	ldr	r3, [r4, #0]
 8010c38:	442b      	add	r3, r5
 8010c3a:	6023      	str	r3, [r4, #0]
 8010c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d038      	beq.n	8010cb6 <_malloc_r+0xf6>
 8010c44:	685a      	ldr	r2, [r3, #4]
 8010c46:	42a2      	cmp	r2, r4
 8010c48:	d12b      	bne.n	8010ca2 <_malloc_r+0xe2>
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	605a      	str	r2, [r3, #4]
 8010c4e:	e00f      	b.n	8010c70 <_malloc_r+0xb0>
 8010c50:	6822      	ldr	r2, [r4, #0]
 8010c52:	1b52      	subs	r2, r2, r5
 8010c54:	d41f      	bmi.n	8010c96 <_malloc_r+0xd6>
 8010c56:	2a0b      	cmp	r2, #11
 8010c58:	d917      	bls.n	8010c8a <_malloc_r+0xca>
 8010c5a:	1961      	adds	r1, r4, r5
 8010c5c:	42a3      	cmp	r3, r4
 8010c5e:	6025      	str	r5, [r4, #0]
 8010c60:	bf18      	it	ne
 8010c62:	6059      	strne	r1, [r3, #4]
 8010c64:	6863      	ldr	r3, [r4, #4]
 8010c66:	bf08      	it	eq
 8010c68:	f8c8 1000 	streq.w	r1, [r8]
 8010c6c:	5162      	str	r2, [r4, r5]
 8010c6e:	604b      	str	r3, [r1, #4]
 8010c70:	4638      	mov	r0, r7
 8010c72:	f104 060b 	add.w	r6, r4, #11
 8010c76:	f000 f829 	bl	8010ccc <__malloc_unlock>
 8010c7a:	f026 0607 	bic.w	r6, r6, #7
 8010c7e:	1d23      	adds	r3, r4, #4
 8010c80:	1af2      	subs	r2, r6, r3
 8010c82:	d0ae      	beq.n	8010be2 <_malloc_r+0x22>
 8010c84:	1b9b      	subs	r3, r3, r6
 8010c86:	50a3      	str	r3, [r4, r2]
 8010c88:	e7ab      	b.n	8010be2 <_malloc_r+0x22>
 8010c8a:	42a3      	cmp	r3, r4
 8010c8c:	6862      	ldr	r2, [r4, #4]
 8010c8e:	d1dd      	bne.n	8010c4c <_malloc_r+0x8c>
 8010c90:	f8c8 2000 	str.w	r2, [r8]
 8010c94:	e7ec      	b.n	8010c70 <_malloc_r+0xb0>
 8010c96:	4623      	mov	r3, r4
 8010c98:	6864      	ldr	r4, [r4, #4]
 8010c9a:	e7ac      	b.n	8010bf6 <_malloc_r+0x36>
 8010c9c:	4634      	mov	r4, r6
 8010c9e:	6876      	ldr	r6, [r6, #4]
 8010ca0:	e7b4      	b.n	8010c0c <_malloc_r+0x4c>
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	e7cc      	b.n	8010c40 <_malloc_r+0x80>
 8010ca6:	230c      	movs	r3, #12
 8010ca8:	603b      	str	r3, [r7, #0]
 8010caa:	4638      	mov	r0, r7
 8010cac:	f000 f80e 	bl	8010ccc <__malloc_unlock>
 8010cb0:	e797      	b.n	8010be2 <_malloc_r+0x22>
 8010cb2:	6025      	str	r5, [r4, #0]
 8010cb4:	e7dc      	b.n	8010c70 <_malloc_r+0xb0>
 8010cb6:	605b      	str	r3, [r3, #4]
 8010cb8:	deff      	udf	#255	; 0xff
 8010cba:	bf00      	nop
 8010cbc:	24002c9c 	.word	0x24002c9c

08010cc0 <__malloc_lock>:
 8010cc0:	4801      	ldr	r0, [pc, #4]	; (8010cc8 <__malloc_lock+0x8>)
 8010cc2:	f7ff bf0e 	b.w	8010ae2 <__retarget_lock_acquire_recursive>
 8010cc6:	bf00      	nop
 8010cc8:	24002c98 	.word	0x24002c98

08010ccc <__malloc_unlock>:
 8010ccc:	4801      	ldr	r0, [pc, #4]	; (8010cd4 <__malloc_unlock+0x8>)
 8010cce:	f7ff bf09 	b.w	8010ae4 <__retarget_lock_release_recursive>
 8010cd2:	bf00      	nop
 8010cd4:	24002c98 	.word	0x24002c98

08010cd8 <__sfputc_r>:
 8010cd8:	6893      	ldr	r3, [r2, #8]
 8010cda:	3b01      	subs	r3, #1
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	b410      	push	{r4}
 8010ce0:	6093      	str	r3, [r2, #8]
 8010ce2:	da08      	bge.n	8010cf6 <__sfputc_r+0x1e>
 8010ce4:	6994      	ldr	r4, [r2, #24]
 8010ce6:	42a3      	cmp	r3, r4
 8010ce8:	db01      	blt.n	8010cee <__sfputc_r+0x16>
 8010cea:	290a      	cmp	r1, #10
 8010cec:	d103      	bne.n	8010cf6 <__sfputc_r+0x1e>
 8010cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cf2:	f000 bba7 	b.w	8011444 <__swbuf_r>
 8010cf6:	6813      	ldr	r3, [r2, #0]
 8010cf8:	1c58      	adds	r0, r3, #1
 8010cfa:	6010      	str	r0, [r2, #0]
 8010cfc:	7019      	strb	r1, [r3, #0]
 8010cfe:	4608      	mov	r0, r1
 8010d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d04:	4770      	bx	lr

08010d06 <__sfputs_r>:
 8010d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d08:	4606      	mov	r6, r0
 8010d0a:	460f      	mov	r7, r1
 8010d0c:	4614      	mov	r4, r2
 8010d0e:	18d5      	adds	r5, r2, r3
 8010d10:	42ac      	cmp	r4, r5
 8010d12:	d101      	bne.n	8010d18 <__sfputs_r+0x12>
 8010d14:	2000      	movs	r0, #0
 8010d16:	e007      	b.n	8010d28 <__sfputs_r+0x22>
 8010d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d1c:	463a      	mov	r2, r7
 8010d1e:	4630      	mov	r0, r6
 8010d20:	f7ff ffda 	bl	8010cd8 <__sfputc_r>
 8010d24:	1c43      	adds	r3, r0, #1
 8010d26:	d1f3      	bne.n	8010d10 <__sfputs_r+0xa>
 8010d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010d2c <_vfiprintf_r>:
 8010d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d30:	460d      	mov	r5, r1
 8010d32:	b09d      	sub	sp, #116	; 0x74
 8010d34:	4614      	mov	r4, r2
 8010d36:	4698      	mov	r8, r3
 8010d38:	4606      	mov	r6, r0
 8010d3a:	b118      	cbz	r0, 8010d44 <_vfiprintf_r+0x18>
 8010d3c:	6a03      	ldr	r3, [r0, #32]
 8010d3e:	b90b      	cbnz	r3, 8010d44 <_vfiprintf_r+0x18>
 8010d40:	f7ff fdc2 	bl	80108c8 <__sinit>
 8010d44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d46:	07d9      	lsls	r1, r3, #31
 8010d48:	d405      	bmi.n	8010d56 <_vfiprintf_r+0x2a>
 8010d4a:	89ab      	ldrh	r3, [r5, #12]
 8010d4c:	059a      	lsls	r2, r3, #22
 8010d4e:	d402      	bmi.n	8010d56 <_vfiprintf_r+0x2a>
 8010d50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d52:	f7ff fec6 	bl	8010ae2 <__retarget_lock_acquire_recursive>
 8010d56:	89ab      	ldrh	r3, [r5, #12]
 8010d58:	071b      	lsls	r3, r3, #28
 8010d5a:	d501      	bpl.n	8010d60 <_vfiprintf_r+0x34>
 8010d5c:	692b      	ldr	r3, [r5, #16]
 8010d5e:	b99b      	cbnz	r3, 8010d88 <_vfiprintf_r+0x5c>
 8010d60:	4629      	mov	r1, r5
 8010d62:	4630      	mov	r0, r6
 8010d64:	f000 fbac 	bl	80114c0 <__swsetup_r>
 8010d68:	b170      	cbz	r0, 8010d88 <_vfiprintf_r+0x5c>
 8010d6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d6c:	07dc      	lsls	r4, r3, #31
 8010d6e:	d504      	bpl.n	8010d7a <_vfiprintf_r+0x4e>
 8010d70:	f04f 30ff 	mov.w	r0, #4294967295
 8010d74:	b01d      	add	sp, #116	; 0x74
 8010d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d7a:	89ab      	ldrh	r3, [r5, #12]
 8010d7c:	0598      	lsls	r0, r3, #22
 8010d7e:	d4f7      	bmi.n	8010d70 <_vfiprintf_r+0x44>
 8010d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d82:	f7ff feaf 	bl	8010ae4 <__retarget_lock_release_recursive>
 8010d86:	e7f3      	b.n	8010d70 <_vfiprintf_r+0x44>
 8010d88:	2300      	movs	r3, #0
 8010d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d8c:	2320      	movs	r3, #32
 8010d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d96:	2330      	movs	r3, #48	; 0x30
 8010d98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010f4c <_vfiprintf_r+0x220>
 8010d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010da0:	f04f 0901 	mov.w	r9, #1
 8010da4:	4623      	mov	r3, r4
 8010da6:	469a      	mov	sl, r3
 8010da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010dac:	b10a      	cbz	r2, 8010db2 <_vfiprintf_r+0x86>
 8010dae:	2a25      	cmp	r2, #37	; 0x25
 8010db0:	d1f9      	bne.n	8010da6 <_vfiprintf_r+0x7a>
 8010db2:	ebba 0b04 	subs.w	fp, sl, r4
 8010db6:	d00b      	beq.n	8010dd0 <_vfiprintf_r+0xa4>
 8010db8:	465b      	mov	r3, fp
 8010dba:	4622      	mov	r2, r4
 8010dbc:	4629      	mov	r1, r5
 8010dbe:	4630      	mov	r0, r6
 8010dc0:	f7ff ffa1 	bl	8010d06 <__sfputs_r>
 8010dc4:	3001      	adds	r0, #1
 8010dc6:	f000 80a9 	beq.w	8010f1c <_vfiprintf_r+0x1f0>
 8010dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dcc:	445a      	add	r2, fp
 8010dce:	9209      	str	r2, [sp, #36]	; 0x24
 8010dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	f000 80a1 	beq.w	8010f1c <_vfiprintf_r+0x1f0>
 8010dda:	2300      	movs	r3, #0
 8010ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8010de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010de4:	f10a 0a01 	add.w	sl, sl, #1
 8010de8:	9304      	str	r3, [sp, #16]
 8010dea:	9307      	str	r3, [sp, #28]
 8010dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010df0:	931a      	str	r3, [sp, #104]	; 0x68
 8010df2:	4654      	mov	r4, sl
 8010df4:	2205      	movs	r2, #5
 8010df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dfa:	4854      	ldr	r0, [pc, #336]	; (8010f4c <_vfiprintf_r+0x220>)
 8010dfc:	f7ef fa88 	bl	8000310 <memchr>
 8010e00:	9a04      	ldr	r2, [sp, #16]
 8010e02:	b9d8      	cbnz	r0, 8010e3c <_vfiprintf_r+0x110>
 8010e04:	06d1      	lsls	r1, r2, #27
 8010e06:	bf44      	itt	mi
 8010e08:	2320      	movmi	r3, #32
 8010e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e0e:	0713      	lsls	r3, r2, #28
 8010e10:	bf44      	itt	mi
 8010e12:	232b      	movmi	r3, #43	; 0x2b
 8010e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e18:	f89a 3000 	ldrb.w	r3, [sl]
 8010e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8010e1e:	d015      	beq.n	8010e4c <_vfiprintf_r+0x120>
 8010e20:	9a07      	ldr	r2, [sp, #28]
 8010e22:	4654      	mov	r4, sl
 8010e24:	2000      	movs	r0, #0
 8010e26:	f04f 0c0a 	mov.w	ip, #10
 8010e2a:	4621      	mov	r1, r4
 8010e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e30:	3b30      	subs	r3, #48	; 0x30
 8010e32:	2b09      	cmp	r3, #9
 8010e34:	d94d      	bls.n	8010ed2 <_vfiprintf_r+0x1a6>
 8010e36:	b1b0      	cbz	r0, 8010e66 <_vfiprintf_r+0x13a>
 8010e38:	9207      	str	r2, [sp, #28]
 8010e3a:	e014      	b.n	8010e66 <_vfiprintf_r+0x13a>
 8010e3c:	eba0 0308 	sub.w	r3, r0, r8
 8010e40:	fa09 f303 	lsl.w	r3, r9, r3
 8010e44:	4313      	orrs	r3, r2
 8010e46:	9304      	str	r3, [sp, #16]
 8010e48:	46a2      	mov	sl, r4
 8010e4a:	e7d2      	b.n	8010df2 <_vfiprintf_r+0xc6>
 8010e4c:	9b03      	ldr	r3, [sp, #12]
 8010e4e:	1d19      	adds	r1, r3, #4
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	9103      	str	r1, [sp, #12]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	bfbb      	ittet	lt
 8010e58:	425b      	neglt	r3, r3
 8010e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8010e5e:	9307      	strge	r3, [sp, #28]
 8010e60:	9307      	strlt	r3, [sp, #28]
 8010e62:	bfb8      	it	lt
 8010e64:	9204      	strlt	r2, [sp, #16]
 8010e66:	7823      	ldrb	r3, [r4, #0]
 8010e68:	2b2e      	cmp	r3, #46	; 0x2e
 8010e6a:	d10c      	bne.n	8010e86 <_vfiprintf_r+0x15a>
 8010e6c:	7863      	ldrb	r3, [r4, #1]
 8010e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8010e70:	d134      	bne.n	8010edc <_vfiprintf_r+0x1b0>
 8010e72:	9b03      	ldr	r3, [sp, #12]
 8010e74:	1d1a      	adds	r2, r3, #4
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	9203      	str	r2, [sp, #12]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	bfb8      	it	lt
 8010e7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e82:	3402      	adds	r4, #2
 8010e84:	9305      	str	r3, [sp, #20]
 8010e86:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010f5c <_vfiprintf_r+0x230>
 8010e8a:	7821      	ldrb	r1, [r4, #0]
 8010e8c:	2203      	movs	r2, #3
 8010e8e:	4650      	mov	r0, sl
 8010e90:	f7ef fa3e 	bl	8000310 <memchr>
 8010e94:	b138      	cbz	r0, 8010ea6 <_vfiprintf_r+0x17a>
 8010e96:	9b04      	ldr	r3, [sp, #16]
 8010e98:	eba0 000a 	sub.w	r0, r0, sl
 8010e9c:	2240      	movs	r2, #64	; 0x40
 8010e9e:	4082      	lsls	r2, r0
 8010ea0:	4313      	orrs	r3, r2
 8010ea2:	3401      	adds	r4, #1
 8010ea4:	9304      	str	r3, [sp, #16]
 8010ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eaa:	4829      	ldr	r0, [pc, #164]	; (8010f50 <_vfiprintf_r+0x224>)
 8010eac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010eb0:	2206      	movs	r2, #6
 8010eb2:	f7ef fa2d 	bl	8000310 <memchr>
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	d03f      	beq.n	8010f3a <_vfiprintf_r+0x20e>
 8010eba:	4b26      	ldr	r3, [pc, #152]	; (8010f54 <_vfiprintf_r+0x228>)
 8010ebc:	bb1b      	cbnz	r3, 8010f06 <_vfiprintf_r+0x1da>
 8010ebe:	9b03      	ldr	r3, [sp, #12]
 8010ec0:	3307      	adds	r3, #7
 8010ec2:	f023 0307 	bic.w	r3, r3, #7
 8010ec6:	3308      	adds	r3, #8
 8010ec8:	9303      	str	r3, [sp, #12]
 8010eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ecc:	443b      	add	r3, r7
 8010ece:	9309      	str	r3, [sp, #36]	; 0x24
 8010ed0:	e768      	b.n	8010da4 <_vfiprintf_r+0x78>
 8010ed2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ed6:	460c      	mov	r4, r1
 8010ed8:	2001      	movs	r0, #1
 8010eda:	e7a6      	b.n	8010e2a <_vfiprintf_r+0xfe>
 8010edc:	2300      	movs	r3, #0
 8010ede:	3401      	adds	r4, #1
 8010ee0:	9305      	str	r3, [sp, #20]
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	f04f 0c0a 	mov.w	ip, #10
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010eee:	3a30      	subs	r2, #48	; 0x30
 8010ef0:	2a09      	cmp	r2, #9
 8010ef2:	d903      	bls.n	8010efc <_vfiprintf_r+0x1d0>
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d0c6      	beq.n	8010e86 <_vfiprintf_r+0x15a>
 8010ef8:	9105      	str	r1, [sp, #20]
 8010efa:	e7c4      	b.n	8010e86 <_vfiprintf_r+0x15a>
 8010efc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f00:	4604      	mov	r4, r0
 8010f02:	2301      	movs	r3, #1
 8010f04:	e7f0      	b.n	8010ee8 <_vfiprintf_r+0x1bc>
 8010f06:	ab03      	add	r3, sp, #12
 8010f08:	9300      	str	r3, [sp, #0]
 8010f0a:	462a      	mov	r2, r5
 8010f0c:	4b12      	ldr	r3, [pc, #72]	; (8010f58 <_vfiprintf_r+0x22c>)
 8010f0e:	a904      	add	r1, sp, #16
 8010f10:	4630      	mov	r0, r6
 8010f12:	f3af 8000 	nop.w
 8010f16:	4607      	mov	r7, r0
 8010f18:	1c78      	adds	r0, r7, #1
 8010f1a:	d1d6      	bne.n	8010eca <_vfiprintf_r+0x19e>
 8010f1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f1e:	07d9      	lsls	r1, r3, #31
 8010f20:	d405      	bmi.n	8010f2e <_vfiprintf_r+0x202>
 8010f22:	89ab      	ldrh	r3, [r5, #12]
 8010f24:	059a      	lsls	r2, r3, #22
 8010f26:	d402      	bmi.n	8010f2e <_vfiprintf_r+0x202>
 8010f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f2a:	f7ff fddb 	bl	8010ae4 <__retarget_lock_release_recursive>
 8010f2e:	89ab      	ldrh	r3, [r5, #12]
 8010f30:	065b      	lsls	r3, r3, #25
 8010f32:	f53f af1d 	bmi.w	8010d70 <_vfiprintf_r+0x44>
 8010f36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f38:	e71c      	b.n	8010d74 <_vfiprintf_r+0x48>
 8010f3a:	ab03      	add	r3, sp, #12
 8010f3c:	9300      	str	r3, [sp, #0]
 8010f3e:	462a      	mov	r2, r5
 8010f40:	4b05      	ldr	r3, [pc, #20]	; (8010f58 <_vfiprintf_r+0x22c>)
 8010f42:	a904      	add	r1, sp, #16
 8010f44:	4630      	mov	r0, r6
 8010f46:	f000 f879 	bl	801103c <_printf_i>
 8010f4a:	e7e4      	b.n	8010f16 <_vfiprintf_r+0x1ea>
 8010f4c:	080117b0 	.word	0x080117b0
 8010f50:	080117ba 	.word	0x080117ba
 8010f54:	00000000 	.word	0x00000000
 8010f58:	08010d07 	.word	0x08010d07
 8010f5c:	080117b6 	.word	0x080117b6

08010f60 <_printf_common>:
 8010f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f64:	4616      	mov	r6, r2
 8010f66:	4699      	mov	r9, r3
 8010f68:	688a      	ldr	r2, [r1, #8]
 8010f6a:	690b      	ldr	r3, [r1, #16]
 8010f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010f70:	4293      	cmp	r3, r2
 8010f72:	bfb8      	it	lt
 8010f74:	4613      	movlt	r3, r2
 8010f76:	6033      	str	r3, [r6, #0]
 8010f78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010f7c:	4607      	mov	r7, r0
 8010f7e:	460c      	mov	r4, r1
 8010f80:	b10a      	cbz	r2, 8010f86 <_printf_common+0x26>
 8010f82:	3301      	adds	r3, #1
 8010f84:	6033      	str	r3, [r6, #0]
 8010f86:	6823      	ldr	r3, [r4, #0]
 8010f88:	0699      	lsls	r1, r3, #26
 8010f8a:	bf42      	ittt	mi
 8010f8c:	6833      	ldrmi	r3, [r6, #0]
 8010f8e:	3302      	addmi	r3, #2
 8010f90:	6033      	strmi	r3, [r6, #0]
 8010f92:	6825      	ldr	r5, [r4, #0]
 8010f94:	f015 0506 	ands.w	r5, r5, #6
 8010f98:	d106      	bne.n	8010fa8 <_printf_common+0x48>
 8010f9a:	f104 0a19 	add.w	sl, r4, #25
 8010f9e:	68e3      	ldr	r3, [r4, #12]
 8010fa0:	6832      	ldr	r2, [r6, #0]
 8010fa2:	1a9b      	subs	r3, r3, r2
 8010fa4:	42ab      	cmp	r3, r5
 8010fa6:	dc26      	bgt.n	8010ff6 <_printf_common+0x96>
 8010fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010fac:	1e13      	subs	r3, r2, #0
 8010fae:	6822      	ldr	r2, [r4, #0]
 8010fb0:	bf18      	it	ne
 8010fb2:	2301      	movne	r3, #1
 8010fb4:	0692      	lsls	r2, r2, #26
 8010fb6:	d42b      	bmi.n	8011010 <_printf_common+0xb0>
 8010fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010fbc:	4649      	mov	r1, r9
 8010fbe:	4638      	mov	r0, r7
 8010fc0:	47c0      	blx	r8
 8010fc2:	3001      	adds	r0, #1
 8010fc4:	d01e      	beq.n	8011004 <_printf_common+0xa4>
 8010fc6:	6823      	ldr	r3, [r4, #0]
 8010fc8:	6922      	ldr	r2, [r4, #16]
 8010fca:	f003 0306 	and.w	r3, r3, #6
 8010fce:	2b04      	cmp	r3, #4
 8010fd0:	bf02      	ittt	eq
 8010fd2:	68e5      	ldreq	r5, [r4, #12]
 8010fd4:	6833      	ldreq	r3, [r6, #0]
 8010fd6:	1aed      	subeq	r5, r5, r3
 8010fd8:	68a3      	ldr	r3, [r4, #8]
 8010fda:	bf0c      	ite	eq
 8010fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010fe0:	2500      	movne	r5, #0
 8010fe2:	4293      	cmp	r3, r2
 8010fe4:	bfc4      	itt	gt
 8010fe6:	1a9b      	subgt	r3, r3, r2
 8010fe8:	18ed      	addgt	r5, r5, r3
 8010fea:	2600      	movs	r6, #0
 8010fec:	341a      	adds	r4, #26
 8010fee:	42b5      	cmp	r5, r6
 8010ff0:	d11a      	bne.n	8011028 <_printf_common+0xc8>
 8010ff2:	2000      	movs	r0, #0
 8010ff4:	e008      	b.n	8011008 <_printf_common+0xa8>
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	4652      	mov	r2, sl
 8010ffa:	4649      	mov	r1, r9
 8010ffc:	4638      	mov	r0, r7
 8010ffe:	47c0      	blx	r8
 8011000:	3001      	adds	r0, #1
 8011002:	d103      	bne.n	801100c <_printf_common+0xac>
 8011004:	f04f 30ff 	mov.w	r0, #4294967295
 8011008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801100c:	3501      	adds	r5, #1
 801100e:	e7c6      	b.n	8010f9e <_printf_common+0x3e>
 8011010:	18e1      	adds	r1, r4, r3
 8011012:	1c5a      	adds	r2, r3, #1
 8011014:	2030      	movs	r0, #48	; 0x30
 8011016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801101a:	4422      	add	r2, r4
 801101c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011024:	3302      	adds	r3, #2
 8011026:	e7c7      	b.n	8010fb8 <_printf_common+0x58>
 8011028:	2301      	movs	r3, #1
 801102a:	4622      	mov	r2, r4
 801102c:	4649      	mov	r1, r9
 801102e:	4638      	mov	r0, r7
 8011030:	47c0      	blx	r8
 8011032:	3001      	adds	r0, #1
 8011034:	d0e6      	beq.n	8011004 <_printf_common+0xa4>
 8011036:	3601      	adds	r6, #1
 8011038:	e7d9      	b.n	8010fee <_printf_common+0x8e>
	...

0801103c <_printf_i>:
 801103c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011040:	7e0f      	ldrb	r7, [r1, #24]
 8011042:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011044:	2f78      	cmp	r7, #120	; 0x78
 8011046:	4691      	mov	r9, r2
 8011048:	4680      	mov	r8, r0
 801104a:	460c      	mov	r4, r1
 801104c:	469a      	mov	sl, r3
 801104e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011052:	d807      	bhi.n	8011064 <_printf_i+0x28>
 8011054:	2f62      	cmp	r7, #98	; 0x62
 8011056:	d80a      	bhi.n	801106e <_printf_i+0x32>
 8011058:	2f00      	cmp	r7, #0
 801105a:	f000 80d4 	beq.w	8011206 <_printf_i+0x1ca>
 801105e:	2f58      	cmp	r7, #88	; 0x58
 8011060:	f000 80c0 	beq.w	80111e4 <_printf_i+0x1a8>
 8011064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801106c:	e03a      	b.n	80110e4 <_printf_i+0xa8>
 801106e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011072:	2b15      	cmp	r3, #21
 8011074:	d8f6      	bhi.n	8011064 <_printf_i+0x28>
 8011076:	a101      	add	r1, pc, #4	; (adr r1, 801107c <_printf_i+0x40>)
 8011078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801107c:	080110d5 	.word	0x080110d5
 8011080:	080110e9 	.word	0x080110e9
 8011084:	08011065 	.word	0x08011065
 8011088:	08011065 	.word	0x08011065
 801108c:	08011065 	.word	0x08011065
 8011090:	08011065 	.word	0x08011065
 8011094:	080110e9 	.word	0x080110e9
 8011098:	08011065 	.word	0x08011065
 801109c:	08011065 	.word	0x08011065
 80110a0:	08011065 	.word	0x08011065
 80110a4:	08011065 	.word	0x08011065
 80110a8:	080111ed 	.word	0x080111ed
 80110ac:	08011115 	.word	0x08011115
 80110b0:	080111a7 	.word	0x080111a7
 80110b4:	08011065 	.word	0x08011065
 80110b8:	08011065 	.word	0x08011065
 80110bc:	0801120f 	.word	0x0801120f
 80110c0:	08011065 	.word	0x08011065
 80110c4:	08011115 	.word	0x08011115
 80110c8:	08011065 	.word	0x08011065
 80110cc:	08011065 	.word	0x08011065
 80110d0:	080111af 	.word	0x080111af
 80110d4:	682b      	ldr	r3, [r5, #0]
 80110d6:	1d1a      	adds	r2, r3, #4
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	602a      	str	r2, [r5, #0]
 80110dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80110e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80110e4:	2301      	movs	r3, #1
 80110e6:	e09f      	b.n	8011228 <_printf_i+0x1ec>
 80110e8:	6820      	ldr	r0, [r4, #0]
 80110ea:	682b      	ldr	r3, [r5, #0]
 80110ec:	0607      	lsls	r7, r0, #24
 80110ee:	f103 0104 	add.w	r1, r3, #4
 80110f2:	6029      	str	r1, [r5, #0]
 80110f4:	d501      	bpl.n	80110fa <_printf_i+0xbe>
 80110f6:	681e      	ldr	r6, [r3, #0]
 80110f8:	e003      	b.n	8011102 <_printf_i+0xc6>
 80110fa:	0646      	lsls	r6, r0, #25
 80110fc:	d5fb      	bpl.n	80110f6 <_printf_i+0xba>
 80110fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011102:	2e00      	cmp	r6, #0
 8011104:	da03      	bge.n	801110e <_printf_i+0xd2>
 8011106:	232d      	movs	r3, #45	; 0x2d
 8011108:	4276      	negs	r6, r6
 801110a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801110e:	485a      	ldr	r0, [pc, #360]	; (8011278 <_printf_i+0x23c>)
 8011110:	230a      	movs	r3, #10
 8011112:	e012      	b.n	801113a <_printf_i+0xfe>
 8011114:	682b      	ldr	r3, [r5, #0]
 8011116:	6820      	ldr	r0, [r4, #0]
 8011118:	1d19      	adds	r1, r3, #4
 801111a:	6029      	str	r1, [r5, #0]
 801111c:	0605      	lsls	r5, r0, #24
 801111e:	d501      	bpl.n	8011124 <_printf_i+0xe8>
 8011120:	681e      	ldr	r6, [r3, #0]
 8011122:	e002      	b.n	801112a <_printf_i+0xee>
 8011124:	0641      	lsls	r1, r0, #25
 8011126:	d5fb      	bpl.n	8011120 <_printf_i+0xe4>
 8011128:	881e      	ldrh	r6, [r3, #0]
 801112a:	4853      	ldr	r0, [pc, #332]	; (8011278 <_printf_i+0x23c>)
 801112c:	2f6f      	cmp	r7, #111	; 0x6f
 801112e:	bf0c      	ite	eq
 8011130:	2308      	moveq	r3, #8
 8011132:	230a      	movne	r3, #10
 8011134:	2100      	movs	r1, #0
 8011136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801113a:	6865      	ldr	r5, [r4, #4]
 801113c:	60a5      	str	r5, [r4, #8]
 801113e:	2d00      	cmp	r5, #0
 8011140:	bfa2      	ittt	ge
 8011142:	6821      	ldrge	r1, [r4, #0]
 8011144:	f021 0104 	bicge.w	r1, r1, #4
 8011148:	6021      	strge	r1, [r4, #0]
 801114a:	b90e      	cbnz	r6, 8011150 <_printf_i+0x114>
 801114c:	2d00      	cmp	r5, #0
 801114e:	d04b      	beq.n	80111e8 <_printf_i+0x1ac>
 8011150:	4615      	mov	r5, r2
 8011152:	fbb6 f1f3 	udiv	r1, r6, r3
 8011156:	fb03 6711 	mls	r7, r3, r1, r6
 801115a:	5dc7      	ldrb	r7, [r0, r7]
 801115c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011160:	4637      	mov	r7, r6
 8011162:	42bb      	cmp	r3, r7
 8011164:	460e      	mov	r6, r1
 8011166:	d9f4      	bls.n	8011152 <_printf_i+0x116>
 8011168:	2b08      	cmp	r3, #8
 801116a:	d10b      	bne.n	8011184 <_printf_i+0x148>
 801116c:	6823      	ldr	r3, [r4, #0]
 801116e:	07de      	lsls	r6, r3, #31
 8011170:	d508      	bpl.n	8011184 <_printf_i+0x148>
 8011172:	6923      	ldr	r3, [r4, #16]
 8011174:	6861      	ldr	r1, [r4, #4]
 8011176:	4299      	cmp	r1, r3
 8011178:	bfde      	ittt	le
 801117a:	2330      	movle	r3, #48	; 0x30
 801117c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011180:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011184:	1b52      	subs	r2, r2, r5
 8011186:	6122      	str	r2, [r4, #16]
 8011188:	f8cd a000 	str.w	sl, [sp]
 801118c:	464b      	mov	r3, r9
 801118e:	aa03      	add	r2, sp, #12
 8011190:	4621      	mov	r1, r4
 8011192:	4640      	mov	r0, r8
 8011194:	f7ff fee4 	bl	8010f60 <_printf_common>
 8011198:	3001      	adds	r0, #1
 801119a:	d14a      	bne.n	8011232 <_printf_i+0x1f6>
 801119c:	f04f 30ff 	mov.w	r0, #4294967295
 80111a0:	b004      	add	sp, #16
 80111a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111a6:	6823      	ldr	r3, [r4, #0]
 80111a8:	f043 0320 	orr.w	r3, r3, #32
 80111ac:	6023      	str	r3, [r4, #0]
 80111ae:	4833      	ldr	r0, [pc, #204]	; (801127c <_printf_i+0x240>)
 80111b0:	2778      	movs	r7, #120	; 0x78
 80111b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80111b6:	6823      	ldr	r3, [r4, #0]
 80111b8:	6829      	ldr	r1, [r5, #0]
 80111ba:	061f      	lsls	r7, r3, #24
 80111bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80111c0:	d402      	bmi.n	80111c8 <_printf_i+0x18c>
 80111c2:	065f      	lsls	r7, r3, #25
 80111c4:	bf48      	it	mi
 80111c6:	b2b6      	uxthmi	r6, r6
 80111c8:	07df      	lsls	r7, r3, #31
 80111ca:	bf48      	it	mi
 80111cc:	f043 0320 	orrmi.w	r3, r3, #32
 80111d0:	6029      	str	r1, [r5, #0]
 80111d2:	bf48      	it	mi
 80111d4:	6023      	strmi	r3, [r4, #0]
 80111d6:	b91e      	cbnz	r6, 80111e0 <_printf_i+0x1a4>
 80111d8:	6823      	ldr	r3, [r4, #0]
 80111da:	f023 0320 	bic.w	r3, r3, #32
 80111de:	6023      	str	r3, [r4, #0]
 80111e0:	2310      	movs	r3, #16
 80111e2:	e7a7      	b.n	8011134 <_printf_i+0xf8>
 80111e4:	4824      	ldr	r0, [pc, #144]	; (8011278 <_printf_i+0x23c>)
 80111e6:	e7e4      	b.n	80111b2 <_printf_i+0x176>
 80111e8:	4615      	mov	r5, r2
 80111ea:	e7bd      	b.n	8011168 <_printf_i+0x12c>
 80111ec:	682b      	ldr	r3, [r5, #0]
 80111ee:	6826      	ldr	r6, [r4, #0]
 80111f0:	6961      	ldr	r1, [r4, #20]
 80111f2:	1d18      	adds	r0, r3, #4
 80111f4:	6028      	str	r0, [r5, #0]
 80111f6:	0635      	lsls	r5, r6, #24
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	d501      	bpl.n	8011200 <_printf_i+0x1c4>
 80111fc:	6019      	str	r1, [r3, #0]
 80111fe:	e002      	b.n	8011206 <_printf_i+0x1ca>
 8011200:	0670      	lsls	r0, r6, #25
 8011202:	d5fb      	bpl.n	80111fc <_printf_i+0x1c0>
 8011204:	8019      	strh	r1, [r3, #0]
 8011206:	2300      	movs	r3, #0
 8011208:	6123      	str	r3, [r4, #16]
 801120a:	4615      	mov	r5, r2
 801120c:	e7bc      	b.n	8011188 <_printf_i+0x14c>
 801120e:	682b      	ldr	r3, [r5, #0]
 8011210:	1d1a      	adds	r2, r3, #4
 8011212:	602a      	str	r2, [r5, #0]
 8011214:	681d      	ldr	r5, [r3, #0]
 8011216:	6862      	ldr	r2, [r4, #4]
 8011218:	2100      	movs	r1, #0
 801121a:	4628      	mov	r0, r5
 801121c:	f7ef f878 	bl	8000310 <memchr>
 8011220:	b108      	cbz	r0, 8011226 <_printf_i+0x1ea>
 8011222:	1b40      	subs	r0, r0, r5
 8011224:	6060      	str	r0, [r4, #4]
 8011226:	6863      	ldr	r3, [r4, #4]
 8011228:	6123      	str	r3, [r4, #16]
 801122a:	2300      	movs	r3, #0
 801122c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011230:	e7aa      	b.n	8011188 <_printf_i+0x14c>
 8011232:	6923      	ldr	r3, [r4, #16]
 8011234:	462a      	mov	r2, r5
 8011236:	4649      	mov	r1, r9
 8011238:	4640      	mov	r0, r8
 801123a:	47d0      	blx	sl
 801123c:	3001      	adds	r0, #1
 801123e:	d0ad      	beq.n	801119c <_printf_i+0x160>
 8011240:	6823      	ldr	r3, [r4, #0]
 8011242:	079b      	lsls	r3, r3, #30
 8011244:	d413      	bmi.n	801126e <_printf_i+0x232>
 8011246:	68e0      	ldr	r0, [r4, #12]
 8011248:	9b03      	ldr	r3, [sp, #12]
 801124a:	4298      	cmp	r0, r3
 801124c:	bfb8      	it	lt
 801124e:	4618      	movlt	r0, r3
 8011250:	e7a6      	b.n	80111a0 <_printf_i+0x164>
 8011252:	2301      	movs	r3, #1
 8011254:	4632      	mov	r2, r6
 8011256:	4649      	mov	r1, r9
 8011258:	4640      	mov	r0, r8
 801125a:	47d0      	blx	sl
 801125c:	3001      	adds	r0, #1
 801125e:	d09d      	beq.n	801119c <_printf_i+0x160>
 8011260:	3501      	adds	r5, #1
 8011262:	68e3      	ldr	r3, [r4, #12]
 8011264:	9903      	ldr	r1, [sp, #12]
 8011266:	1a5b      	subs	r3, r3, r1
 8011268:	42ab      	cmp	r3, r5
 801126a:	dcf2      	bgt.n	8011252 <_printf_i+0x216>
 801126c:	e7eb      	b.n	8011246 <_printf_i+0x20a>
 801126e:	2500      	movs	r5, #0
 8011270:	f104 0619 	add.w	r6, r4, #25
 8011274:	e7f5      	b.n	8011262 <_printf_i+0x226>
 8011276:	bf00      	nop
 8011278:	080117c1 	.word	0x080117c1
 801127c:	080117d2 	.word	0x080117d2

08011280 <__sflush_r>:
 8011280:	898a      	ldrh	r2, [r1, #12]
 8011282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011286:	4605      	mov	r5, r0
 8011288:	0710      	lsls	r0, r2, #28
 801128a:	460c      	mov	r4, r1
 801128c:	d458      	bmi.n	8011340 <__sflush_r+0xc0>
 801128e:	684b      	ldr	r3, [r1, #4]
 8011290:	2b00      	cmp	r3, #0
 8011292:	dc05      	bgt.n	80112a0 <__sflush_r+0x20>
 8011294:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011296:	2b00      	cmp	r3, #0
 8011298:	dc02      	bgt.n	80112a0 <__sflush_r+0x20>
 801129a:	2000      	movs	r0, #0
 801129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112a2:	2e00      	cmp	r6, #0
 80112a4:	d0f9      	beq.n	801129a <__sflush_r+0x1a>
 80112a6:	2300      	movs	r3, #0
 80112a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80112ac:	682f      	ldr	r7, [r5, #0]
 80112ae:	6a21      	ldr	r1, [r4, #32]
 80112b0:	602b      	str	r3, [r5, #0]
 80112b2:	d032      	beq.n	801131a <__sflush_r+0x9a>
 80112b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112b6:	89a3      	ldrh	r3, [r4, #12]
 80112b8:	075a      	lsls	r2, r3, #29
 80112ba:	d505      	bpl.n	80112c8 <__sflush_r+0x48>
 80112bc:	6863      	ldr	r3, [r4, #4]
 80112be:	1ac0      	subs	r0, r0, r3
 80112c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112c2:	b10b      	cbz	r3, 80112c8 <__sflush_r+0x48>
 80112c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112c6:	1ac0      	subs	r0, r0, r3
 80112c8:	2300      	movs	r3, #0
 80112ca:	4602      	mov	r2, r0
 80112cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112ce:	6a21      	ldr	r1, [r4, #32]
 80112d0:	4628      	mov	r0, r5
 80112d2:	47b0      	blx	r6
 80112d4:	1c43      	adds	r3, r0, #1
 80112d6:	89a3      	ldrh	r3, [r4, #12]
 80112d8:	d106      	bne.n	80112e8 <__sflush_r+0x68>
 80112da:	6829      	ldr	r1, [r5, #0]
 80112dc:	291d      	cmp	r1, #29
 80112de:	d82b      	bhi.n	8011338 <__sflush_r+0xb8>
 80112e0:	4a29      	ldr	r2, [pc, #164]	; (8011388 <__sflush_r+0x108>)
 80112e2:	410a      	asrs	r2, r1
 80112e4:	07d6      	lsls	r6, r2, #31
 80112e6:	d427      	bmi.n	8011338 <__sflush_r+0xb8>
 80112e8:	2200      	movs	r2, #0
 80112ea:	6062      	str	r2, [r4, #4]
 80112ec:	04d9      	lsls	r1, r3, #19
 80112ee:	6922      	ldr	r2, [r4, #16]
 80112f0:	6022      	str	r2, [r4, #0]
 80112f2:	d504      	bpl.n	80112fe <__sflush_r+0x7e>
 80112f4:	1c42      	adds	r2, r0, #1
 80112f6:	d101      	bne.n	80112fc <__sflush_r+0x7c>
 80112f8:	682b      	ldr	r3, [r5, #0]
 80112fa:	b903      	cbnz	r3, 80112fe <__sflush_r+0x7e>
 80112fc:	6560      	str	r0, [r4, #84]	; 0x54
 80112fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011300:	602f      	str	r7, [r5, #0]
 8011302:	2900      	cmp	r1, #0
 8011304:	d0c9      	beq.n	801129a <__sflush_r+0x1a>
 8011306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801130a:	4299      	cmp	r1, r3
 801130c:	d002      	beq.n	8011314 <__sflush_r+0x94>
 801130e:	4628      	mov	r0, r5
 8011310:	f7ff fbea 	bl	8010ae8 <_free_r>
 8011314:	2000      	movs	r0, #0
 8011316:	6360      	str	r0, [r4, #52]	; 0x34
 8011318:	e7c0      	b.n	801129c <__sflush_r+0x1c>
 801131a:	2301      	movs	r3, #1
 801131c:	4628      	mov	r0, r5
 801131e:	47b0      	blx	r6
 8011320:	1c41      	adds	r1, r0, #1
 8011322:	d1c8      	bne.n	80112b6 <__sflush_r+0x36>
 8011324:	682b      	ldr	r3, [r5, #0]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d0c5      	beq.n	80112b6 <__sflush_r+0x36>
 801132a:	2b1d      	cmp	r3, #29
 801132c:	d001      	beq.n	8011332 <__sflush_r+0xb2>
 801132e:	2b16      	cmp	r3, #22
 8011330:	d101      	bne.n	8011336 <__sflush_r+0xb6>
 8011332:	602f      	str	r7, [r5, #0]
 8011334:	e7b1      	b.n	801129a <__sflush_r+0x1a>
 8011336:	89a3      	ldrh	r3, [r4, #12]
 8011338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801133c:	81a3      	strh	r3, [r4, #12]
 801133e:	e7ad      	b.n	801129c <__sflush_r+0x1c>
 8011340:	690f      	ldr	r7, [r1, #16]
 8011342:	2f00      	cmp	r7, #0
 8011344:	d0a9      	beq.n	801129a <__sflush_r+0x1a>
 8011346:	0793      	lsls	r3, r2, #30
 8011348:	680e      	ldr	r6, [r1, #0]
 801134a:	bf08      	it	eq
 801134c:	694b      	ldreq	r3, [r1, #20]
 801134e:	600f      	str	r7, [r1, #0]
 8011350:	bf18      	it	ne
 8011352:	2300      	movne	r3, #0
 8011354:	eba6 0807 	sub.w	r8, r6, r7
 8011358:	608b      	str	r3, [r1, #8]
 801135a:	f1b8 0f00 	cmp.w	r8, #0
 801135e:	dd9c      	ble.n	801129a <__sflush_r+0x1a>
 8011360:	6a21      	ldr	r1, [r4, #32]
 8011362:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011364:	4643      	mov	r3, r8
 8011366:	463a      	mov	r2, r7
 8011368:	4628      	mov	r0, r5
 801136a:	47b0      	blx	r6
 801136c:	2800      	cmp	r0, #0
 801136e:	dc06      	bgt.n	801137e <__sflush_r+0xfe>
 8011370:	89a3      	ldrh	r3, [r4, #12]
 8011372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011376:	81a3      	strh	r3, [r4, #12]
 8011378:	f04f 30ff 	mov.w	r0, #4294967295
 801137c:	e78e      	b.n	801129c <__sflush_r+0x1c>
 801137e:	4407      	add	r7, r0
 8011380:	eba8 0800 	sub.w	r8, r8, r0
 8011384:	e7e9      	b.n	801135a <__sflush_r+0xda>
 8011386:	bf00      	nop
 8011388:	dfbffffe 	.word	0xdfbffffe

0801138c <_fflush_r>:
 801138c:	b538      	push	{r3, r4, r5, lr}
 801138e:	690b      	ldr	r3, [r1, #16]
 8011390:	4605      	mov	r5, r0
 8011392:	460c      	mov	r4, r1
 8011394:	b913      	cbnz	r3, 801139c <_fflush_r+0x10>
 8011396:	2500      	movs	r5, #0
 8011398:	4628      	mov	r0, r5
 801139a:	bd38      	pop	{r3, r4, r5, pc}
 801139c:	b118      	cbz	r0, 80113a6 <_fflush_r+0x1a>
 801139e:	6a03      	ldr	r3, [r0, #32]
 80113a0:	b90b      	cbnz	r3, 80113a6 <_fflush_r+0x1a>
 80113a2:	f7ff fa91 	bl	80108c8 <__sinit>
 80113a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d0f3      	beq.n	8011396 <_fflush_r+0xa>
 80113ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80113b0:	07d0      	lsls	r0, r2, #31
 80113b2:	d404      	bmi.n	80113be <_fflush_r+0x32>
 80113b4:	0599      	lsls	r1, r3, #22
 80113b6:	d402      	bmi.n	80113be <_fflush_r+0x32>
 80113b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113ba:	f7ff fb92 	bl	8010ae2 <__retarget_lock_acquire_recursive>
 80113be:	4628      	mov	r0, r5
 80113c0:	4621      	mov	r1, r4
 80113c2:	f7ff ff5d 	bl	8011280 <__sflush_r>
 80113c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113c8:	07da      	lsls	r2, r3, #31
 80113ca:	4605      	mov	r5, r0
 80113cc:	d4e4      	bmi.n	8011398 <_fflush_r+0xc>
 80113ce:	89a3      	ldrh	r3, [r4, #12]
 80113d0:	059b      	lsls	r3, r3, #22
 80113d2:	d4e1      	bmi.n	8011398 <_fflush_r+0xc>
 80113d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113d6:	f7ff fb85 	bl	8010ae4 <__retarget_lock_release_recursive>
 80113da:	e7dd      	b.n	8011398 <_fflush_r+0xc>

080113dc <_putc_r>:
 80113dc:	b570      	push	{r4, r5, r6, lr}
 80113de:	460d      	mov	r5, r1
 80113e0:	4614      	mov	r4, r2
 80113e2:	4606      	mov	r6, r0
 80113e4:	b118      	cbz	r0, 80113ee <_putc_r+0x12>
 80113e6:	6a03      	ldr	r3, [r0, #32]
 80113e8:	b90b      	cbnz	r3, 80113ee <_putc_r+0x12>
 80113ea:	f7ff fa6d 	bl	80108c8 <__sinit>
 80113ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113f0:	07d8      	lsls	r0, r3, #31
 80113f2:	d405      	bmi.n	8011400 <_putc_r+0x24>
 80113f4:	89a3      	ldrh	r3, [r4, #12]
 80113f6:	0599      	lsls	r1, r3, #22
 80113f8:	d402      	bmi.n	8011400 <_putc_r+0x24>
 80113fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113fc:	f7ff fb71 	bl	8010ae2 <__retarget_lock_acquire_recursive>
 8011400:	68a3      	ldr	r3, [r4, #8]
 8011402:	3b01      	subs	r3, #1
 8011404:	2b00      	cmp	r3, #0
 8011406:	60a3      	str	r3, [r4, #8]
 8011408:	da05      	bge.n	8011416 <_putc_r+0x3a>
 801140a:	69a2      	ldr	r2, [r4, #24]
 801140c:	4293      	cmp	r3, r2
 801140e:	db12      	blt.n	8011436 <_putc_r+0x5a>
 8011410:	b2eb      	uxtb	r3, r5
 8011412:	2b0a      	cmp	r3, #10
 8011414:	d00f      	beq.n	8011436 <_putc_r+0x5a>
 8011416:	6823      	ldr	r3, [r4, #0]
 8011418:	1c5a      	adds	r2, r3, #1
 801141a:	6022      	str	r2, [r4, #0]
 801141c:	701d      	strb	r5, [r3, #0]
 801141e:	b2ed      	uxtb	r5, r5
 8011420:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011422:	07da      	lsls	r2, r3, #31
 8011424:	d405      	bmi.n	8011432 <_putc_r+0x56>
 8011426:	89a3      	ldrh	r3, [r4, #12]
 8011428:	059b      	lsls	r3, r3, #22
 801142a:	d402      	bmi.n	8011432 <_putc_r+0x56>
 801142c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801142e:	f7ff fb59 	bl	8010ae4 <__retarget_lock_release_recursive>
 8011432:	4628      	mov	r0, r5
 8011434:	bd70      	pop	{r4, r5, r6, pc}
 8011436:	4629      	mov	r1, r5
 8011438:	4622      	mov	r2, r4
 801143a:	4630      	mov	r0, r6
 801143c:	f000 f802 	bl	8011444 <__swbuf_r>
 8011440:	4605      	mov	r5, r0
 8011442:	e7ed      	b.n	8011420 <_putc_r+0x44>

08011444 <__swbuf_r>:
 8011444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011446:	460e      	mov	r6, r1
 8011448:	4614      	mov	r4, r2
 801144a:	4605      	mov	r5, r0
 801144c:	b118      	cbz	r0, 8011456 <__swbuf_r+0x12>
 801144e:	6a03      	ldr	r3, [r0, #32]
 8011450:	b90b      	cbnz	r3, 8011456 <__swbuf_r+0x12>
 8011452:	f7ff fa39 	bl	80108c8 <__sinit>
 8011456:	69a3      	ldr	r3, [r4, #24]
 8011458:	60a3      	str	r3, [r4, #8]
 801145a:	89a3      	ldrh	r3, [r4, #12]
 801145c:	071a      	lsls	r2, r3, #28
 801145e:	d525      	bpl.n	80114ac <__swbuf_r+0x68>
 8011460:	6923      	ldr	r3, [r4, #16]
 8011462:	b31b      	cbz	r3, 80114ac <__swbuf_r+0x68>
 8011464:	6823      	ldr	r3, [r4, #0]
 8011466:	6922      	ldr	r2, [r4, #16]
 8011468:	1a98      	subs	r0, r3, r2
 801146a:	6963      	ldr	r3, [r4, #20]
 801146c:	b2f6      	uxtb	r6, r6
 801146e:	4283      	cmp	r3, r0
 8011470:	4637      	mov	r7, r6
 8011472:	dc04      	bgt.n	801147e <__swbuf_r+0x3a>
 8011474:	4621      	mov	r1, r4
 8011476:	4628      	mov	r0, r5
 8011478:	f7ff ff88 	bl	801138c <_fflush_r>
 801147c:	b9e0      	cbnz	r0, 80114b8 <__swbuf_r+0x74>
 801147e:	68a3      	ldr	r3, [r4, #8]
 8011480:	3b01      	subs	r3, #1
 8011482:	60a3      	str	r3, [r4, #8]
 8011484:	6823      	ldr	r3, [r4, #0]
 8011486:	1c5a      	adds	r2, r3, #1
 8011488:	6022      	str	r2, [r4, #0]
 801148a:	701e      	strb	r6, [r3, #0]
 801148c:	6962      	ldr	r2, [r4, #20]
 801148e:	1c43      	adds	r3, r0, #1
 8011490:	429a      	cmp	r2, r3
 8011492:	d004      	beq.n	801149e <__swbuf_r+0x5a>
 8011494:	89a3      	ldrh	r3, [r4, #12]
 8011496:	07db      	lsls	r3, r3, #31
 8011498:	d506      	bpl.n	80114a8 <__swbuf_r+0x64>
 801149a:	2e0a      	cmp	r6, #10
 801149c:	d104      	bne.n	80114a8 <__swbuf_r+0x64>
 801149e:	4621      	mov	r1, r4
 80114a0:	4628      	mov	r0, r5
 80114a2:	f7ff ff73 	bl	801138c <_fflush_r>
 80114a6:	b938      	cbnz	r0, 80114b8 <__swbuf_r+0x74>
 80114a8:	4638      	mov	r0, r7
 80114aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114ac:	4621      	mov	r1, r4
 80114ae:	4628      	mov	r0, r5
 80114b0:	f000 f806 	bl	80114c0 <__swsetup_r>
 80114b4:	2800      	cmp	r0, #0
 80114b6:	d0d5      	beq.n	8011464 <__swbuf_r+0x20>
 80114b8:	f04f 37ff 	mov.w	r7, #4294967295
 80114bc:	e7f4      	b.n	80114a8 <__swbuf_r+0x64>
	...

080114c0 <__swsetup_r>:
 80114c0:	b538      	push	{r3, r4, r5, lr}
 80114c2:	4b2a      	ldr	r3, [pc, #168]	; (801156c <__swsetup_r+0xac>)
 80114c4:	4605      	mov	r5, r0
 80114c6:	6818      	ldr	r0, [r3, #0]
 80114c8:	460c      	mov	r4, r1
 80114ca:	b118      	cbz	r0, 80114d4 <__swsetup_r+0x14>
 80114cc:	6a03      	ldr	r3, [r0, #32]
 80114ce:	b90b      	cbnz	r3, 80114d4 <__swsetup_r+0x14>
 80114d0:	f7ff f9fa 	bl	80108c8 <__sinit>
 80114d4:	89a3      	ldrh	r3, [r4, #12]
 80114d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80114da:	0718      	lsls	r0, r3, #28
 80114dc:	d422      	bmi.n	8011524 <__swsetup_r+0x64>
 80114de:	06d9      	lsls	r1, r3, #27
 80114e0:	d407      	bmi.n	80114f2 <__swsetup_r+0x32>
 80114e2:	2309      	movs	r3, #9
 80114e4:	602b      	str	r3, [r5, #0]
 80114e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80114ea:	81a3      	strh	r3, [r4, #12]
 80114ec:	f04f 30ff 	mov.w	r0, #4294967295
 80114f0:	e034      	b.n	801155c <__swsetup_r+0x9c>
 80114f2:	0758      	lsls	r0, r3, #29
 80114f4:	d512      	bpl.n	801151c <__swsetup_r+0x5c>
 80114f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114f8:	b141      	cbz	r1, 801150c <__swsetup_r+0x4c>
 80114fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114fe:	4299      	cmp	r1, r3
 8011500:	d002      	beq.n	8011508 <__swsetup_r+0x48>
 8011502:	4628      	mov	r0, r5
 8011504:	f7ff faf0 	bl	8010ae8 <_free_r>
 8011508:	2300      	movs	r3, #0
 801150a:	6363      	str	r3, [r4, #52]	; 0x34
 801150c:	89a3      	ldrh	r3, [r4, #12]
 801150e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011512:	81a3      	strh	r3, [r4, #12]
 8011514:	2300      	movs	r3, #0
 8011516:	6063      	str	r3, [r4, #4]
 8011518:	6923      	ldr	r3, [r4, #16]
 801151a:	6023      	str	r3, [r4, #0]
 801151c:	89a3      	ldrh	r3, [r4, #12]
 801151e:	f043 0308 	orr.w	r3, r3, #8
 8011522:	81a3      	strh	r3, [r4, #12]
 8011524:	6923      	ldr	r3, [r4, #16]
 8011526:	b94b      	cbnz	r3, 801153c <__swsetup_r+0x7c>
 8011528:	89a3      	ldrh	r3, [r4, #12]
 801152a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801152e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011532:	d003      	beq.n	801153c <__swsetup_r+0x7c>
 8011534:	4621      	mov	r1, r4
 8011536:	4628      	mov	r0, r5
 8011538:	f000 f850 	bl	80115dc <__smakebuf_r>
 801153c:	89a0      	ldrh	r0, [r4, #12]
 801153e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011542:	f010 0301 	ands.w	r3, r0, #1
 8011546:	d00a      	beq.n	801155e <__swsetup_r+0x9e>
 8011548:	2300      	movs	r3, #0
 801154a:	60a3      	str	r3, [r4, #8]
 801154c:	6963      	ldr	r3, [r4, #20]
 801154e:	425b      	negs	r3, r3
 8011550:	61a3      	str	r3, [r4, #24]
 8011552:	6923      	ldr	r3, [r4, #16]
 8011554:	b943      	cbnz	r3, 8011568 <__swsetup_r+0xa8>
 8011556:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801155a:	d1c4      	bne.n	80114e6 <__swsetup_r+0x26>
 801155c:	bd38      	pop	{r3, r4, r5, pc}
 801155e:	0781      	lsls	r1, r0, #30
 8011560:	bf58      	it	pl
 8011562:	6963      	ldrpl	r3, [r4, #20]
 8011564:	60a3      	str	r3, [r4, #8]
 8011566:	e7f4      	b.n	8011552 <__swsetup_r+0x92>
 8011568:	2000      	movs	r0, #0
 801156a:	e7f7      	b.n	801155c <__swsetup_r+0x9c>
 801156c:	240004c0 	.word	0x240004c0

08011570 <_sbrk_r>:
 8011570:	b538      	push	{r3, r4, r5, lr}
 8011572:	4d06      	ldr	r5, [pc, #24]	; (801158c <_sbrk_r+0x1c>)
 8011574:	2300      	movs	r3, #0
 8011576:	4604      	mov	r4, r0
 8011578:	4608      	mov	r0, r1
 801157a:	602b      	str	r3, [r5, #0]
 801157c:	f7f0 fd2c 	bl	8001fd8 <_sbrk>
 8011580:	1c43      	adds	r3, r0, #1
 8011582:	d102      	bne.n	801158a <_sbrk_r+0x1a>
 8011584:	682b      	ldr	r3, [r5, #0]
 8011586:	b103      	cbz	r3, 801158a <_sbrk_r+0x1a>
 8011588:	6023      	str	r3, [r4, #0]
 801158a:	bd38      	pop	{r3, r4, r5, pc}
 801158c:	24002c94 	.word	0x24002c94

08011590 <__swhatbuf_r>:
 8011590:	b570      	push	{r4, r5, r6, lr}
 8011592:	460c      	mov	r4, r1
 8011594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011598:	2900      	cmp	r1, #0
 801159a:	b096      	sub	sp, #88	; 0x58
 801159c:	4615      	mov	r5, r2
 801159e:	461e      	mov	r6, r3
 80115a0:	da0d      	bge.n	80115be <__swhatbuf_r+0x2e>
 80115a2:	89a3      	ldrh	r3, [r4, #12]
 80115a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80115a8:	f04f 0100 	mov.w	r1, #0
 80115ac:	bf0c      	ite	eq
 80115ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80115b2:	2340      	movne	r3, #64	; 0x40
 80115b4:	2000      	movs	r0, #0
 80115b6:	6031      	str	r1, [r6, #0]
 80115b8:	602b      	str	r3, [r5, #0]
 80115ba:	b016      	add	sp, #88	; 0x58
 80115bc:	bd70      	pop	{r4, r5, r6, pc}
 80115be:	466a      	mov	r2, sp
 80115c0:	f000 f848 	bl	8011654 <_fstat_r>
 80115c4:	2800      	cmp	r0, #0
 80115c6:	dbec      	blt.n	80115a2 <__swhatbuf_r+0x12>
 80115c8:	9901      	ldr	r1, [sp, #4]
 80115ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80115ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80115d2:	4259      	negs	r1, r3
 80115d4:	4159      	adcs	r1, r3
 80115d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115da:	e7eb      	b.n	80115b4 <__swhatbuf_r+0x24>

080115dc <__smakebuf_r>:
 80115dc:	898b      	ldrh	r3, [r1, #12]
 80115de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80115e0:	079d      	lsls	r5, r3, #30
 80115e2:	4606      	mov	r6, r0
 80115e4:	460c      	mov	r4, r1
 80115e6:	d507      	bpl.n	80115f8 <__smakebuf_r+0x1c>
 80115e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80115ec:	6023      	str	r3, [r4, #0]
 80115ee:	6123      	str	r3, [r4, #16]
 80115f0:	2301      	movs	r3, #1
 80115f2:	6163      	str	r3, [r4, #20]
 80115f4:	b002      	add	sp, #8
 80115f6:	bd70      	pop	{r4, r5, r6, pc}
 80115f8:	ab01      	add	r3, sp, #4
 80115fa:	466a      	mov	r2, sp
 80115fc:	f7ff ffc8 	bl	8011590 <__swhatbuf_r>
 8011600:	9900      	ldr	r1, [sp, #0]
 8011602:	4605      	mov	r5, r0
 8011604:	4630      	mov	r0, r6
 8011606:	f7ff fadb 	bl	8010bc0 <_malloc_r>
 801160a:	b948      	cbnz	r0, 8011620 <__smakebuf_r+0x44>
 801160c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011610:	059a      	lsls	r2, r3, #22
 8011612:	d4ef      	bmi.n	80115f4 <__smakebuf_r+0x18>
 8011614:	f023 0303 	bic.w	r3, r3, #3
 8011618:	f043 0302 	orr.w	r3, r3, #2
 801161c:	81a3      	strh	r3, [r4, #12]
 801161e:	e7e3      	b.n	80115e8 <__smakebuf_r+0xc>
 8011620:	89a3      	ldrh	r3, [r4, #12]
 8011622:	6020      	str	r0, [r4, #0]
 8011624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011628:	81a3      	strh	r3, [r4, #12]
 801162a:	9b00      	ldr	r3, [sp, #0]
 801162c:	6163      	str	r3, [r4, #20]
 801162e:	9b01      	ldr	r3, [sp, #4]
 8011630:	6120      	str	r0, [r4, #16]
 8011632:	b15b      	cbz	r3, 801164c <__smakebuf_r+0x70>
 8011634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011638:	4630      	mov	r0, r6
 801163a:	f000 f81d 	bl	8011678 <_isatty_r>
 801163e:	b128      	cbz	r0, 801164c <__smakebuf_r+0x70>
 8011640:	89a3      	ldrh	r3, [r4, #12]
 8011642:	f023 0303 	bic.w	r3, r3, #3
 8011646:	f043 0301 	orr.w	r3, r3, #1
 801164a:	81a3      	strh	r3, [r4, #12]
 801164c:	89a3      	ldrh	r3, [r4, #12]
 801164e:	431d      	orrs	r5, r3
 8011650:	81a5      	strh	r5, [r4, #12]
 8011652:	e7cf      	b.n	80115f4 <__smakebuf_r+0x18>

08011654 <_fstat_r>:
 8011654:	b538      	push	{r3, r4, r5, lr}
 8011656:	4d07      	ldr	r5, [pc, #28]	; (8011674 <_fstat_r+0x20>)
 8011658:	2300      	movs	r3, #0
 801165a:	4604      	mov	r4, r0
 801165c:	4608      	mov	r0, r1
 801165e:	4611      	mov	r1, r2
 8011660:	602b      	str	r3, [r5, #0]
 8011662:	f7f0 fc90 	bl	8001f86 <_fstat>
 8011666:	1c43      	adds	r3, r0, #1
 8011668:	d102      	bne.n	8011670 <_fstat_r+0x1c>
 801166a:	682b      	ldr	r3, [r5, #0]
 801166c:	b103      	cbz	r3, 8011670 <_fstat_r+0x1c>
 801166e:	6023      	str	r3, [r4, #0]
 8011670:	bd38      	pop	{r3, r4, r5, pc}
 8011672:	bf00      	nop
 8011674:	24002c94 	.word	0x24002c94

08011678 <_isatty_r>:
 8011678:	b538      	push	{r3, r4, r5, lr}
 801167a:	4d06      	ldr	r5, [pc, #24]	; (8011694 <_isatty_r+0x1c>)
 801167c:	2300      	movs	r3, #0
 801167e:	4604      	mov	r4, r0
 8011680:	4608      	mov	r0, r1
 8011682:	602b      	str	r3, [r5, #0]
 8011684:	f7f0 fc8f 	bl	8001fa6 <_isatty>
 8011688:	1c43      	adds	r3, r0, #1
 801168a:	d102      	bne.n	8011692 <_isatty_r+0x1a>
 801168c:	682b      	ldr	r3, [r5, #0]
 801168e:	b103      	cbz	r3, 8011692 <_isatty_r+0x1a>
 8011690:	6023      	str	r3, [r4, #0]
 8011692:	bd38      	pop	{r3, r4, r5, pc}
 8011694:	24002c94 	.word	0x24002c94

08011698 <_init>:
 8011698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801169a:	bf00      	nop
 801169c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801169e:	bc08      	pop	{r3}
 80116a0:	469e      	mov	lr, r3
 80116a2:	4770      	bx	lr

080116a4 <_fini>:
 80116a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116a6:	bf00      	nop
 80116a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116aa:	bc08      	pop	{r3}
 80116ac:	469e      	mov	lr, r3
 80116ae:	4770      	bx	lr
