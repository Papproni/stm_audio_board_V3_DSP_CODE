
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .sdram_section 00177002  c0000000  c0000000  00030000  2**2
                  ALLOC
  2 .text         0000746c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  08007738  08007738  00017738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007750  08007750  00017750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007754  08007754  00017754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000314  24000010  08007768  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000324  08007768  00020324  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012769  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002d6d  00000000  00000000  000327ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000e10  00000000  00000000  00035558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000a97  00000000  00000000  00036368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00003e66  00000000  00000000  00036dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015a8c  00000000  00000000  0003ac65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001436c5  00000000  00000000  000506f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000385c  00000000  00000000  00193db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000092  00000000  00000000  00197614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08007720 	.word	0x08007720

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08007720 	.word	0x08007720

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <MX_DMA_Init+0x6c>)
 8000314:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000318:	4a17      	ldr	r2, [pc, #92]	; (8000378 <MX_DMA_Init+0x6c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_DMA_Init+0x6c>)
 8000324:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000330:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_DMA_Init+0x6c>)
 8000332:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000336:	4a10      	ldr	r2, [pc, #64]	; (8000378 <MX_DMA_Init+0x6c>)
 8000338:	f043 0302 	orr.w	r3, r3, #2
 800033c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <MX_DMA_Init+0x6c>)
 8000342:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000346:	f003 0302 	and.w	r3, r3, #2
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2100      	movs	r1, #0
 8000352:	200b      	movs	r0, #11
 8000354:	f001 f8fd 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000358:	200b      	movs	r0, #11
 800035a:	f001 f914 	bl	8001586 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	2038      	movs	r0, #56	; 0x38
 8000364:	f001 f8f5 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000368:	2038      	movs	r0, #56	; 0x38
 800036a:	f001 f90c 	bl	8001586 <HAL_NVIC_EnableIRQ>

}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	58024400 	.word	0x58024400

0800037c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b090      	sub	sp, #64	; 0x40
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]
 8000392:	615a      	str	r2, [r3, #20]
 8000394:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000396:	4b2c      	ldr	r3, [pc, #176]	; (8000448 <MX_FMC_Init+0xcc>)
 8000398:	4a2c      	ldr	r2, [pc, #176]	; (800044c <MX_FMC_Init+0xd0>)
 800039a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800039c:	4b2a      	ldr	r3, [pc, #168]	; (8000448 <MX_FMC_Init+0xcc>)
 800039e:	2200      	movs	r2, #0
 80003a0:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80003a2:	4b29      	ldr	r3, [pc, #164]	; (8000448 <MX_FMC_Init+0xcc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80003a8:	4b27      	ldr	r3, [pc, #156]	; (8000448 <MX_FMC_Init+0xcc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80003ae:	4b26      	ldr	r3, [pc, #152]	; (8000448 <MX_FMC_Init+0xcc>)
 80003b0:	2210      	movs	r2, #16
 80003b2:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80003b4:	4b24      	ldr	r3, [pc, #144]	; (8000448 <MX_FMC_Init+0xcc>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80003ba:	4b23      	ldr	r3, [pc, #140]	; (8000448 <MX_FMC_Init+0xcc>)
 80003bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80003c0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80003c2:	4b21      	ldr	r3, [pc, #132]	; (8000448 <MX_FMC_Init+0xcc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80003c8:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <MX_FMC_Init+0xcc>)
 80003ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003ce:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80003d0:	4b1d      	ldr	r3, [pc, #116]	; (8000448 <MX_FMC_Init+0xcc>)
 80003d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003d6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_FMC_Init+0xcc>)
 80003da:	2200      	movs	r2, #0
 80003dc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80003de:	2310      	movs	r3, #16
 80003e0:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 16;
 80003e2:	2310      	movs	r3, #16
 80003e4:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 16;
 80003e6:	2310      	movs	r3, #16
 80003e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 16;
 80003ea:	2310      	movs	r3, #16
 80003ec:	633b      	str	r3, [r7, #48]	; 0x30
  SdramTiming.WriteRecoveryTime = 16;
 80003ee:	2310      	movs	r3, #16
 80003f0:	637b      	str	r3, [r7, #52]	; 0x34
  SdramTiming.RPDelay = 16;
 80003f2:	2310      	movs	r3, #16
 80003f4:	63bb      	str	r3, [r7, #56]	; 0x38
  SdramTiming.RCDDelay = 16;
 80003f6:	2310      	movs	r3, #16
 80003f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80003fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003fe:	4619      	mov	r1, r3
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <MX_FMC_Init+0xcc>)
 8000402:	f006 fe85 	bl	8007110 <HAL_SDRAM_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 800040c:	f000 fbe7 	bl	8000bde <Error_Handler>

//    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2500);


    IS42S16800J_Context_t my_sdram;
    my_sdram.TargetBank  = FMC_SDRAM_CMD_TARGET_BANK1;
 8000410:	2310      	movs	r3, #16
 8000412:	607b      	str	r3, [r7, #4]
    my_sdram.RefreshMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000414:	2303      	movs	r3, #3
 8000416:	60bb      	str	r3, [r7, #8]
    my_sdram.RefreshRate = REFRESH_COUNT;
 8000418:	f240 63d6 	movw	r3, #1750	; 0x6d6
 800041c:	60fb      	str	r3, [r7, #12]
    my_sdram.CASLatency  = IS42S16800J_CAS_LATENCY_3;
 800041e:	2330      	movs	r3, #48	; 0x30
 8000420:	61bb      	str	r3, [r7, #24]
    my_sdram.OperationMode = IS42S16800J_OPERATING_MODE_STANDARD;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
    my_sdram.WriteBurstMode = IS42S16800J_WRITEBURST_MODE_SINGLE;
 8000426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800042a:	623b      	str	r3, [r7, #32]
    my_sdram.BurstType 		= IS42S16800J_BURST_TYPE_SEQUENTIAL;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
    my_sdram.BurstLength 	= IS42S16800J_BURST_LENGTH_1;
 8000430:	2300      	movs	r3, #0
 8000432:	613b      	str	r3, [r7, #16]

    IS42S16800J_Init(&hsdram1, &my_sdram);
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	4803      	ldr	r0, [pc, #12]	; (8000448 <MX_FMC_Init+0xcc>)
 800043a:	f000 f9b5 	bl	80007a8 <IS42S16800J_Init>
  /* USER CODE END FMC_Init 2 */
}
 800043e:	bf00      	nop
 8000440:	3740      	adds	r7, #64	; 0x40
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	2400002c 	.word	0x2400002c
 800044c:	52004140 	.word	0x52004140

08000450 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000450:	b580      	push	{r7, lr}
 8000452:	b0b6      	sub	sp, #216	; 0xd8
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000466:	4b7b      	ldr	r3, [pc, #492]	; (8000654 <HAL_FMC_MspInit+0x204>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 80ee 	bne.w	800064c <HAL_FMC_MspInit+0x1fc>
    return;
  }
  FMC_Initialized = 1;
 8000470:	4b78      	ldr	r3, [pc, #480]	; (8000654 <HAL_FMC_MspInit+0x204>)
 8000472:	2201      	movs	r2, #1
 8000474:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	22b8      	movs	r2, #184	; 0xb8
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f007 f922 	bl	80076c8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000484:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000488:	f04f 0300 	mov.w	r3, #0
 800048c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000490:	2300      	movs	r3, #0
 8000492:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000494:	f107 0308 	add.w	r3, r7, #8
 8000498:	4618      	mov	r0, r3
 800049a:	f003 fe99 	bl	80041d0 <HAL_RCCEx_PeriphCLKConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80004a4:	f000 fb9b 	bl	8000bde <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80004a8:	4b6b      	ldr	r3, [pc, #428]	; (8000658 <HAL_FMC_MspInit+0x208>)
 80004aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80004ae:	4a6a      	ldr	r2, [pc, #424]	; (8000658 <HAL_FMC_MspInit+0x208>)
 80004b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004b4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80004b8:	4b67      	ldr	r3, [pc, #412]	; (8000658 <HAL_FMC_MspInit+0x208>)
 80004ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80004be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004c6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80004ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ce:	2302      	movs	r3, #2
 80004d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004da:	2303      	movs	r3, #3
 80004dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80004e0:	230c      	movs	r3, #12
 80004e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004e6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80004ea:	4619      	mov	r1, r3
 80004ec:	485b      	ldr	r0, [pc, #364]	; (800065c <HAL_FMC_MspInit+0x20c>)
 80004ee:	f002 fd23 	bl	8002f38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80004f2:	230d      	movs	r3, #13
 80004f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f8:	2302      	movs	r3, #2
 80004fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fe:	2301      	movs	r3, #1
 8000500:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000504:	2303      	movs	r3, #3
 8000506:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800050a:	230c      	movs	r3, #12
 800050c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000510:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000514:	4619      	mov	r1, r3
 8000516:	4852      	ldr	r0, [pc, #328]	; (8000660 <HAL_FMC_MspInit+0x210>)
 8000518:	f002 fd0e 	bl	8002f38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800051c:	2330      	movs	r3, #48	; 0x30
 800051e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000522:	2302      	movs	r3, #2
 8000524:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800052e:	2303      	movs	r3, #3
 8000530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000534:	230c      	movs	r3, #12
 8000536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800053e:	4619      	mov	r1, r3
 8000540:	4848      	ldr	r0, [pc, #288]	; (8000664 <HAL_FMC_MspInit+0x214>)
 8000542:	f002 fcf9 	bl	8002f38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000546:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800054a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054e:	2302      	movs	r3, #2
 8000550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000554:	2301      	movs	r3, #1
 8000556:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800055a:	2303      	movs	r3, #3
 800055c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000560:	230c      	movs	r3, #12
 8000562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000566:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800056a:	4619      	mov	r1, r3
 800056c:	483b      	ldr	r0, [pc, #236]	; (800065c <HAL_FMC_MspInit+0x20c>)
 800056e:	f002 fce3 	bl	8002f38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000572:	2301      	movs	r3, #1
 8000574:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	2302      	movs	r3, #2
 800057a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000584:	2303      	movs	r3, #3
 8000586:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800058a:	230c      	movs	r3, #12
 800058c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000590:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000594:	4619      	mov	r1, r3
 8000596:	4834      	ldr	r0, [pc, #208]	; (8000668 <HAL_FMC_MspInit+0x218>)
 8000598:	f002 fcce 	bl	8002f38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800059c:	f24e 7380 	movw	r3, #59264	; 0xe780
 80005a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005b6:	230c      	movs	r3, #12
 80005b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005c0:	4619      	mov	r1, r3
 80005c2:	482a      	ldr	r0, [pc, #168]	; (800066c <HAL_FMC_MspInit+0x21c>)
 80005c4:	f002 fcb8 	bl	8002f38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80005c8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80005cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005dc:	2303      	movs	r3, #3
 80005de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005e2:	230c      	movs	r3, #12
 80005e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005ec:	4619      	mov	r1, r3
 80005ee:	4820      	ldr	r0, [pc, #128]	; (8000670 <HAL_FMC_MspInit+0x220>)
 80005f0:	f002 fca2 	bl	8002f38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 80005f4:	f248 1310 	movw	r3, #33040	; 0x8110
 80005f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000602:	2301      	movs	r3, #1
 8000604:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800060e:	230c      	movs	r3, #12
 8000610:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000614:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000618:	4619      	mov	r1, r3
 800061a:	4813      	ldr	r0, [pc, #76]	; (8000668 <HAL_FMC_MspInit+0x218>)
 800061c:	f002 fc8c 	bl	8002f38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000620:	2303      	movs	r3, #3
 8000622:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062c:	2301      	movs	r3, #1
 800062e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000638:	230c      	movs	r3, #12
 800063a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800063e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000642:	4619      	mov	r1, r3
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <HAL_FMC_MspInit+0x21c>)
 8000646:	f002 fc77 	bl	8002f38 <HAL_GPIO_Init>
 800064a:	e000      	b.n	800064e <HAL_FMC_MspInit+0x1fe>
    return;
 800064c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800064e:	37d8      	adds	r7, #216	; 0xd8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	24000060 	.word	0x24000060
 8000658:	58024400 	.word	0x58024400
 800065c:	58021400 	.word	0x58021400
 8000660:	58020800 	.word	0x58020800
 8000664:	58020000 	.word	0x58020000
 8000668:	58021800 	.word	0x58021800
 800066c:	58021000 	.word	0x58021000
 8000670:	58020c00 	.word	0x58020c00

08000674 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800067c:	f7ff fee8 	bl	8000450 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069e:	4b40      	ldr	r3, [pc, #256]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a4:	4a3e      	ldr	r2, [pc, #248]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ae:	4b3c      	ldr	r3, [pc, #240]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b4:	f003 0310 	and.w	r3, r3, #16
 80006b8:	61bb      	str	r3, [r7, #24]
 80006ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006bc:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c2:	4a37      	ldr	r2, [pc, #220]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006c4:	f043 0320 	orr.w	r3, r3, #32
 80006c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006cc:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d2:	f003 0320 	and.w	r3, r3, #32
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e0:	4a2f      	ldr	r2, [pc, #188]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ea:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <MX_GPIO_Init+0x118>)
 80006fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fe:	4a28      	ldr	r2, [pc, #160]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <MX_GPIO_Init+0x118>)
 800070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <MX_GPIO_Init+0x118>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <MX_GPIO_Init+0x118>)
 800073c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <MX_GPIO_Init+0x118>)
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_GPIO_Init+0x118>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	f003 0308 	and.w	r3, r3, #8
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2120      	movs	r1, #32
 8000774:	480b      	ldr	r0, [pc, #44]	; (80007a4 <MX_GPIO_Init+0x11c>)
 8000776:	f002 fd87 	bl	8003288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800077a:	2320      	movs	r3, #32
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000782:	2301      	movs	r3, #1
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0x11c>)
 8000792:	f002 fbd1 	bl	8002f38 <HAL_GPIO_Init>

}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	; 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	58024400 	.word	0x58024400
 80007a4:	58021800 	.word	0x58021800

080007a8 <IS42S16800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S16800J_ERROR;
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S16800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f832 	bl	8000828 <IS42S16800J_ClockEnable>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d128      	bne.n	800081c <IS42S16800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S16800J_Delay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 f8e2 	bl	8000994 <IS42S16800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S16800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f84a 	bl	8000870 <IS42S16800J_Precharge>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d11c      	bne.n	800081c <IS42S16800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S16800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S16800J_OK)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	6819      	ldr	r1, [r3, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	461a      	mov	r2, r3
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 f897 	bl	8000920 <IS42S16800J_RefreshMode>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d111      	bne.n	800081c <IS42S16800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S16800J_ModeRegConfig(Ctx, pRegMode) == IS42S16800J_OK)
 80007f8:	6839      	ldr	r1, [r7, #0]
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f000 f85c 	bl	80008b8 <IS42S16800J_ModeRegConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10a      	bne.n	800081c <IS42S16800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S16800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S16800J_OK)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	4619      	mov	r1, r3
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f8ad 	bl	800096c <IS42S16800J_RefreshRate>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <IS42S16800J_Init+0x74>
          {
            ret = IS42S16800J_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800081c:	68fb      	ldr	r3, [r7, #12]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <IS42S16800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_CLK_ENABLE_CMD;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <IS42S16800J_ClockEnable+0x44>)
 8000834:	2201      	movs	r2, #1
 8000836:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000838:	4a0c      	ldr	r2, [pc, #48]	; (800086c <IS42S16800J_ClockEnable+0x44>)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <IS42S16800J_ClockEnable+0x44>)
 8000840:	2201      	movs	r2, #1
 8000842:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <IS42S16800J_ClockEnable+0x44>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 800084a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084e:	4907      	ldr	r1, [pc, #28]	; (800086c <IS42S16800J_ClockEnable+0x44>)
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f006 fc99 	bl	8007188 <HAL_SDRAM_SendCommand>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <IS42S16800J_ClockEnable+0x3a>
  {
    return IS42S16800J_ERROR;
 800085c:	f04f 33ff 	mov.w	r3, #4294967295
 8000860:	e000      	b.n	8000864 <IS42S16800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 8000862:	2300      	movs	r3, #0
  }
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000064 	.word	0x24000064

08000870 <IS42S16800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_PALL_CMD;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <IS42S16800J_Precharge+0x44>)
 800087c:	2202      	movs	r2, #2
 800087e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <IS42S16800J_Precharge+0x44>)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <IS42S16800J_Precharge+0x44>)
 8000888:	2201      	movs	r2, #1
 800088a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <IS42S16800J_Precharge+0x44>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000896:	4907      	ldr	r1, [pc, #28]	; (80008b4 <IS42S16800J_Precharge+0x44>)
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f006 fc75 	bl	8007188 <HAL_SDRAM_SendCommand>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d002      	beq.n	80008aa <IS42S16800J_Precharge+0x3a>
  {
    return IS42S16800J_ERROR;
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	e000      	b.n	80008ac <IS42S16800J_Precharge+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 80008aa:	2300      	movs	r3, #0
  }
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	24000064 	.word	0x24000064

080008b8 <IS42S16800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80008ca:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80008d0:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80008d6:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80008dc:	4313      	orrs	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S16800J_LOAD_MODE_CMD;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <IS42S16800J_ModeRegConfig+0x64>)
 80008e2:	2204      	movs	r2, #4
 80008e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a0c      	ldr	r2, [pc, #48]	; (800091c <IS42S16800J_ModeRegConfig+0x64>)
 80008ec:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <IS42S16800J_ModeRegConfig+0x64>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80008f4:	4a09      	ldr	r2, [pc, #36]	; (800091c <IS42S16800J_ModeRegConfig+0x64>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 80008fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008fe:	4907      	ldr	r1, [pc, #28]	; (800091c <IS42S16800J_ModeRegConfig+0x64>)
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f006 fc41 	bl	8007188 <HAL_SDRAM_SendCommand>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d002      	beq.n	8000912 <IS42S16800J_ModeRegConfig+0x5a>
  {
    return IS42S16800J_ERROR;
 800090c:	f04f 33ff 	mov.w	r3, #4294967295
 8000910:	e000      	b.n	8000914 <IS42S16800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S16800J_OK;
 8000912:	2300      	movs	r3, #0
  }
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	24000064 	.word	0x24000064

08000920 <IS42S16800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S16800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S16800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S16800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <IS42S16800J_RefreshMode+0x48>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000932:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <IS42S16800J_RefreshMode+0x48>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <IS42S16800J_RefreshMode+0x48>)
 800093a:	2208      	movs	r2, #8
 800093c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <IS42S16800J_RefreshMode+0x48>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000948:	4907      	ldr	r1, [pc, #28]	; (8000968 <IS42S16800J_RefreshMode+0x48>)
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	f006 fc1c 	bl	8007188 <HAL_SDRAM_SendCommand>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d002      	beq.n	800095c <IS42S16800J_RefreshMode+0x3c>
  {
    return IS42S16800J_ERROR;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	e000      	b.n	800095e <IS42S16800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S16800J_OK;
 800095c:	2300      	movs	r3, #0
  }
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	24000064 	.word	0x24000064

0800096c <IS42S16800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S16800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000976:	6839      	ldr	r1, [r7, #0]
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f006 fc3a 	bl	80071f2 <HAL_SDRAM_ProgramRefreshRate>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <IS42S16800J_RefreshRate+0x1e>
  {
    return IS42S16800J_ERROR;
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
 8000988:	e000      	b.n	800098c <IS42S16800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S16800J_OK;
 800098a:	2300      	movs	r3, #0
  }
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <IS42S16800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval IS42S16800J_OK
  */
static int32_t IS42S16800J_Delay(uint32_t Delay)
{  
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800099c:	f000 fcce 	bl	800133c <HAL_GetTick>
 80009a0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80009a2:	bf00      	nop
 80009a4:	f000 fcca 	bl	800133c <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d8f7      	bhi.n	80009a4 <IS42S16800J_Delay+0x10>
  {
  }
  return IS42S16800J_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 fc33 	bl	8001230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f867 	bl	8000a9c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009ce:	f000 f8d3 	bl	8000b78 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d2:	f7ff fe59 	bl	8000688 <MX_GPIO_Init>
  MX_DMA_Init();
 80009d6:	f7ff fc99 	bl	800030c <MX_DMA_Init>
  MX_SAI1_Init();
 80009da:	f000 f905 	bl	8000be8 <MX_SAI1_Init>
  MX_SPI1_Init();
 80009de:	f000 fa49 	bl	8000e74 <MX_SPI1_Init>
  MX_FMC_Init();
 80009e2:	f7ff fccb 	bl	800037c <MX_FMC_Init>
  while (1)
  {
	  uint32_t fmctestStart;
	  uint32_t fmctestStop;

	  fmctestStart = HAL_GetTick();
 80009e6:	f000 fca9 	bl	800133c <HAL_GetTick>
 80009ea:	60b8      	str	r0, [r7, #8]
	  uint32_t errorCounter =0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
	  for(uint32_t i = 0; i<10000;i++){
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	e03b      	b.n	8000a6e <main+0xae>

		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 80009f6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	e030      	b.n	8000a60 <main+0xa0>
			  fmctestStart = HAL_GetTick();
 80009fe:	f000 fc9d 	bl	800133c <HAL_GetTick>
 8000a02:	60b8      	str	r0, [r7, #8]
			  uint8_t number_inc = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	71bb      	strb	r3, [r7, #6]
//			  for(uint32_t counter = 1; counter<SDRAM_SIZE; counter=counter+2){
//				  *(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t) number_inc;
//				  number_inc++;
//			  }

			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	e007      	b.n	8000a1e <main+0x5e>
			 				  sdram_array[counter] = j;
 8000a0e:	4920      	ldr	r1, [pc, #128]	; (8000a90 <main+0xd0>)
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	697a      	ldr	r2, [r7, #20]
 8000a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <main+0xd4>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d9f3      	bls.n	8000a0e <main+0x4e>
//			  				  if(*(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) != j){
//			  					  errorCounter++;
//			  				  }


			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	e00c      	b.n	8000a46 <main+0x86>
				  if( sdram_array[counter] != j){
 8000a2c:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <main+0xd0>)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d002      	beq.n	8000a40 <main+0x80>
					  errorCounter++;
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3301      	adds	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <main+0xd4>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d9ee      	bls.n	8000a2c <main+0x6c>
				  }
			  }
			  fmctestStop = (HAL_GetTick()-fmctestStart);
 8000a4e:	f000 fc75 	bl	800133c <HAL_GetTick>
 8000a52:	4602      	mov	r2, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	603b      	str	r3, [r7, #0]
		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <main+0xd8>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d9ca      	bls.n	80009fe <main+0x3e>
	  for(uint32_t i = 0; i<10000;i++){
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d9be      	bls.n	80009f6 <main+0x36>
		  }

	  }

	  if(errorCounter){
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d000      	beq.n	8000a80 <main+0xc0>
		  while(1){
 8000a7e:	e7fe      	b.n	8000a7e <main+0xbe>

		  }
	  }

	  uint8_t var = *(__IO uint8_t*)(SDRAM_ADDRESS_START);
 8000a80:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(50);
 8000a88:	2032      	movs	r0, #50	; 0x32
 8000a8a:	f000 fc63 	bl	8001354 <HAL_Delay>
  {
 8000a8e:	e7aa      	b.n	80009e6 <main+0x26>
 8000a90:	c0000000 	.word	0xc0000000
 8000a94:	0005dbff 	.word	0x0005dbff
 8000a98:	000100c7 	.word	0x000100c7

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b09c      	sub	sp, #112	; 0x70
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	224c      	movs	r2, #76	; 0x4c
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f006 fe0c 	bl	80076c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f006 fe06 	bl	80076c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000abc:	2002      	movs	r0, #2
 8000abe:	f002 fbfd 	bl	80032bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <SystemClock_Config+0xd8>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a2a      	ldr	r2, [pc, #168]	; (8000b74 <SystemClock_Config+0xd8>)
 8000acc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <SystemClock_Config+0xd8>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ade:	bf00      	nop
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <SystemClock_Config+0xd8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aec:	d1f8      	bne.n	8000ae0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aee:	2301      	movs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afc:	2302      	movs	r3, #2
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b04:	232c      	movs	r3, #44	; 0x2c
 8000b06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b14:	230c      	movs	r3, #12
 8000b16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 fc03 	bl	8003330 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b30:	f000 f855 	bl	8000bde <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	233f      	movs	r3, #63	; 0x3f
 8000b36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b40:	2308      	movs	r3, #8
 8000b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b44:	2340      	movs	r3, #64	; 0x40
 8000b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b48:	2340      	movs	r3, #64	; 0x40
 8000b4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b52:	2340      	movs	r3, #64	; 0x40
 8000b54:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2103      	movs	r1, #3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 ffc2 	bl	8003ae4 <HAL_RCC_ClockConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b66:	f000 f83a 	bl	8000bde <Error_Handler>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3770      	adds	r7, #112	; 0x70
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	58024800 	.word	0x58024800

08000b78 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0ae      	sub	sp, #184	; 0xb8
 8000b7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	22b8      	movs	r2, #184	; 0xb8
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f006 fd9f 	bl	80076c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 8000b8a:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8000b8e:	f04f 0300 	mov.w	r3, #0
 8000b92:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000baa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 8000bb4:	f640 3386 	movw	r3, #2950	; 0xb86
 8000bb8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 fb02 	bl	80041d0 <HAL_RCCEx_PeriphCLKConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8000bd2:	f000 f804 	bl	8000bde <Error_Handler>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	37b8      	adds	r7, #184	; 0xb8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be2:	b672      	cpsid	i
}
 8000be4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <Error_Handler+0x8>

08000be8 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000bec:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <MX_SAI1_Init+0xb0>)
 8000bee:	4a2b      	ldr	r2, [pc, #172]	; (8000c9c <MX_SAI1_Init+0xb4>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000bf2:	4b29      	ldr	r3, [pc, #164]	; (8000c98 <MX_SAI1_Init+0xb0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bf8:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <MX_SAI1_Init+0xb0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bfe:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <MX_SAI1_Init+0xb0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <MX_SAI1_Init+0xb0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MX_SAI1_Init+0xb0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_SAI1_Init+0xb0>)
 8000c12:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000c16:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c18:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_SAI1_Init+0xb0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <MX_SAI1_Init+0xb0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <MX_SAI1_Init+0xb0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_SAI1_Init+0xb0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8000c30:	2308      	movs	r3, #8
 8000c32:	2202      	movs	r2, #2
 8000c34:	2100      	movs	r1, #0
 8000c36:	4818      	ldr	r0, [pc, #96]	; (8000c98 <MX_SAI1_Init+0xb0>)
 8000c38:	f005 feb0 	bl	800699c <HAL_SAI_InitProtocol>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000c42:	f7ff ffcc 	bl	8000bde <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_SAI1_Init+0xb8>)
 8000c48:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <MX_SAI1_Init+0xbc>)
 8000c4a:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_SAI1_Init+0xb8>)
 8000c4e:	2203      	movs	r2, #3
 8000c50:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_SAI1_Init+0xb8>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_SAI1_Init+0xb8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_SAI1_Init+0xb8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SAI1_Init+0xb8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <MX_SAI1_Init+0xb8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_SAI1_Init+0xb8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <MX_SAI1_Init+0xb8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	2202      	movs	r2, #2
 8000c80:	2100      	movs	r1, #0
 8000c82:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <MX_SAI1_Init+0xb8>)
 8000c84:	f005 fe8a 	bl	800699c <HAL_SAI_InitProtocol>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000c8e:	f7ff ffa6 	bl	8000bde <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	24000074 	.word	0x24000074
 8000c9c:	40015804 	.word	0x40015804
 8000ca0:	2400010c 	.word	0x2400010c
 8000ca4:	40015824 	.word	0x40015824

08000ca8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a66      	ldr	r2, [pc, #408]	; (8000e50 <HAL_SAI_MspInit+0x1a8>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d160      	bne.n	8000d7c <HAL_SAI_MspInit+0xd4>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8000cba:	4b66      	ldr	r3, [pc, #408]	; (8000e54 <HAL_SAI_MspInit+0x1ac>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10e      	bne.n	8000ce0 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000cc2:	4b65      	ldr	r3, [pc, #404]	; (8000e58 <HAL_SAI_MspInit+0x1b0>)
 8000cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cc8:	4a63      	ldr	r2, [pc, #396]	; (8000e58 <HAL_SAI_MspInit+0x1b0>)
 8000cca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000cd2:	4b61      	ldr	r3, [pc, #388]	; (8000e58 <HAL_SAI_MspInit+0x1b0>)
 8000cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8000ce0:	4b5c      	ldr	r3, [pc, #368]	; (8000e54 <HAL_SAI_MspInit+0x1ac>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	4a5b      	ldr	r2, [pc, #364]	; (8000e54 <HAL_SAI_MspInit+0x1ac>)
 8000ce8:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000cea:	2370      	movs	r3, #112	; 0x70
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000cfa:	2306      	movs	r3, #6
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	4855      	ldr	r0, [pc, #340]	; (8000e5c <HAL_SAI_MspInit+0x1b4>)
 8000d06:	f002 f917 	bl	8002f38 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8000d0a:	4b55      	ldr	r3, [pc, #340]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d0c:	4a55      	ldr	r2, [pc, #340]	; (8000e64 <HAL_SAI_MspInit+0x1bc>)
 8000d0e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8000d10:	4b53      	ldr	r3, [pc, #332]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d12:	2257      	movs	r2, #87	; 0x57
 8000d14:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d16:	4b52      	ldr	r3, [pc, #328]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d18:	2240      	movs	r2, #64	; 0x40
 8000d1a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1c:	4b50      	ldr	r3, [pc, #320]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8000d22:	4b4f      	ldr	r3, [pc, #316]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d28:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d2a:	4b4d      	ldr	r3, [pc, #308]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d30:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d32:	4b4b      	ldr	r3, [pc, #300]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d38:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000d3a:	4b49      	ldr	r3, [pc, #292]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d40:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d42:	4b47      	ldr	r3, [pc, #284]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d44:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d48:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d4a:	4b45      	ldr	r3, [pc, #276]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000d50:	4843      	ldr	r0, [pc, #268]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d52:	f000 fc33 	bl	80015bc <HAL_DMA_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000d5c:	f7ff ff3f 	bl	8000bde <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a3f      	ldr	r2, [pc, #252]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000d68:	4a3d      	ldr	r2, [pc, #244]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a3b      	ldr	r2, [pc, #236]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000d76:	4a3a      	ldr	r2, [pc, #232]	; (8000e60 <HAL_SAI_MspInit+0x1b8>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a39      	ldr	r2, [pc, #228]	; (8000e68 <HAL_SAI_MspInit+0x1c0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d160      	bne.n	8000e48 <HAL_SAI_MspInit+0x1a0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8000d86:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <HAL_SAI_MspInit+0x1ac>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10e      	bne.n	8000dac <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000d8e:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <HAL_SAI_MspInit+0x1b0>)
 8000d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d94:	4a30      	ldr	r2, [pc, #192]	; (8000e58 <HAL_SAI_MspInit+0x1b0>)
 8000d96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d9e:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <HAL_SAI_MspInit+0x1b0>)
 8000da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <HAL_SAI_MspInit+0x1ac>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <HAL_SAI_MspInit+0x1ac>)
 8000db4:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000db6:	2308      	movs	r3, #8
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000dc6:	2306      	movs	r3, #6
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4822      	ldr	r0, [pc, #136]	; (8000e5c <HAL_SAI_MspInit+0x1b4>)
 8000dd2:	f002 f8b1 	bl	8002f38 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000dd8:	4a25      	ldr	r2, [pc, #148]	; (8000e70 <HAL_SAI_MspInit+0x1c8>)
 8000dda:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000dde:	2258      	movs	r2, #88	; 0x58
 8000de0:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000df0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df4:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000df8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dfc:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000e00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e04:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0c:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000e10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e14:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8000e1c:	4813      	ldr	r0, [pc, #76]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000e1e:	f000 fbcd 	bl	80015bc <HAL_DMA_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 8000e28:	f7ff fed9 	bl	8000bde <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_SAI_MspInit+0x1c4>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8000e48:	bf00      	nop
 8000e4a:	3728      	adds	r7, #40	; 0x28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40015804 	.word	0x40015804
 8000e54:	24000294 	.word	0x24000294
 8000e58:	58024400 	.word	0x58024400
 8000e5c:	58021000 	.word	0x58021000
 8000e60:	240001a4 	.word	0x240001a4
 8000e64:	40020010 	.word	0x40020010
 8000e68:	40015824 	.word	0x40015824
 8000e6c:	2400021c 	.word	0x2400021c
 8000e70:	40020410 	.word	0x40020410

08000e74 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000e7a:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <MX_SPI1_Init+0xa8>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000e80:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e86:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000e8e:	2207      	movs	r2, #7
 8000e90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000ea0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ea4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000ea8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000eac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ecc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_SPI1_Init+0xa4>)
 8000f06:	f006 f99d 	bl	8007244 <HAL_SPI_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f10:	f7ff fe65 	bl	8000bde <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	24000298 	.word	0x24000298
 8000f1c:	40013000 	.word	0x40013000

08000f20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a3a      	ldr	r2, [pc, #232]	; (8001028 <HAL_SPI_MspInit+0x108>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d16d      	bne.n	800101e <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f42:	4b3a      	ldr	r3, [pc, #232]	; (800102c <HAL_SPI_MspInit+0x10c>)
 8000f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f48:	4a38      	ldr	r2, [pc, #224]	; (800102c <HAL_SPI_MspInit+0x10c>)
 8000f4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f52:	4b36      	ldr	r3, [pc, #216]	; (800102c <HAL_SPI_MspInit+0x10c>)
 8000f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f5c:	61bb      	str	r3, [r7, #24]
 8000f5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b32      	ldr	r3, [pc, #200]	; (800102c <HAL_SPI_MspInit+0x10c>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f66:	4a31      	ldr	r2, [pc, #196]	; (800102c <HAL_SPI_MspInit+0x10c>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f70:	4b2e      	ldr	r3, [pc, #184]	; (800102c <HAL_SPI_MspInit+0x10c>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <HAL_SPI_MspInit+0x10c>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	4a29      	ldr	r2, [pc, #164]	; (800102c <HAL_SPI_MspInit+0x10c>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <HAL_SPI_MspInit+0x10c>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9c:	4b23      	ldr	r3, [pc, #140]	; (800102c <HAL_SPI_MspInit+0x10c>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	4a22      	ldr	r2, [pc, #136]	; (800102c <HAL_SPI_MspInit+0x10c>)
 8000fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_SPI_MspInit+0x10c>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 8000fba:	f248 0340 	movw	r3, #32832	; 0x8040
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fcc:	2305      	movs	r3, #5
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4816      	ldr	r0, [pc, #88]	; (8001030 <HAL_SPI_MspInit+0x110>)
 8000fd8:	f001 ffae 	bl	8002f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fec:	2305      	movs	r3, #5
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480f      	ldr	r0, [pc, #60]	; (8001034 <HAL_SPI_MspInit+0x114>)
 8000ff8:	f001 ff9e 	bl	8002f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800100e:	2305      	movs	r3, #5
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	4807      	ldr	r0, [pc, #28]	; (8001038 <HAL_SPI_MspInit+0x118>)
 800101a:	f001 ff8d 	bl	8002f38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3730      	adds	r7, #48	; 0x30
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40013000 	.word	0x40013000
 800102c:	58024400 	.word	0x58024400
 8001030:	58020000 	.word	0x58020000
 8001034:	58020c00 	.word	0x58020c00
 8001038:	58021800 	.word	0x58021800

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_MspInit+0x30>)
 8001044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_MspInit+0x30>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_MspInit+0x30>)
 8001054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	58024400 	.word	0x58024400

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001074:	e7fe      	b.n	8001074 <NMI_Handler+0x4>

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <MemManage_Handler+0x4>

08001082 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <UsageFault_Handler+0x4>

0800108e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010bc:	f000 f92a 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <DMA1_Stream0_IRQHandler+0x10>)
 80010ca:	f000 fdcf 	bl	8001c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	240001a4 	.word	0x240001a4

080010d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <DMA2_Stream0_IRQHandler+0x10>)
 80010de:	f000 fdc5 	bl	8001c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2400021c 	.word	0x2400021c

080010ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f0:	4b32      	ldr	r3, [pc, #200]	; (80011bc <SystemInit+0xd0>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <SystemInit+0xd0>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <SystemInit+0xd4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 030f 	and.w	r3, r3, #15
 8001108:	2b06      	cmp	r3, #6
 800110a:	d807      	bhi.n	800111c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800110c:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <SystemInit+0xd4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 030f 	bic.w	r3, r3, #15
 8001114:	4a2a      	ldr	r2, [pc, #168]	; (80011c0 <SystemInit+0xd4>)
 8001116:	f043 0307 	orr.w	r3, r3, #7
 800111a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <SystemInit+0xd8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a28      	ldr	r2, [pc, #160]	; (80011c4 <SystemInit+0xd8>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <SystemInit+0xd8>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800112e:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <SystemInit+0xd8>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4924      	ldr	r1, [pc, #144]	; (80011c4 <SystemInit+0xd8>)
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <SystemInit+0xdc>)
 8001136:	4013      	ands	r3, r2
 8001138:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <SystemInit+0xd4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b00      	cmp	r3, #0
 8001144:	d007      	beq.n	8001156 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <SystemInit+0xd4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f023 030f 	bic.w	r3, r3, #15
 800114e:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <SystemInit+0xd4>)
 8001150:	f043 0307 	orr.w	r3, r3, #7
 8001154:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <SystemInit+0xd8>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <SystemInit+0xd8>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <SystemInit+0xd8>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <SystemInit+0xd8>)
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <SystemInit+0xe0>)
 800116c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <SystemInit+0xd8>)
 8001170:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <SystemInit+0xe4>)
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <SystemInit+0xd8>)
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <SystemInit+0xe8>)
 8001178:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <SystemInit+0xd8>)
 800117c:	2200      	movs	r2, #0
 800117e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <SystemInit+0xd8>)
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <SystemInit+0xe8>)
 8001184:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <SystemInit+0xd8>)
 8001188:	2200      	movs	r2, #0
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <SystemInit+0xd8>)
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <SystemInit+0xe8>)
 8001190:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <SystemInit+0xd8>)
 8001194:	2200      	movs	r2, #0
 8001196:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <SystemInit+0xd8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <SystemInit+0xd8>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <SystemInit+0xd8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <SystemInit+0xec>)
 80011ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00
 80011c0:	52002000 	.word	0x52002000
 80011c4:	58024400 	.word	0x58024400
 80011c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80011cc:	02020200 	.word	0x02020200
 80011d0:	01ff0000 	.word	0x01ff0000
 80011d4:	01010280 	.word	0x01010280
 80011d8:	52004000 	.word	0x52004000

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011e0:	f7ff ff84 	bl	80010ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011e6:	490d      	ldr	r1, [pc, #52]	; (800121c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011fc:	4c0a      	ldr	r4, [pc, #40]	; (8001228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120a:	f006 fa65 	bl	80076d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff fbd7 	bl	80009c0 <main>
  bx  lr
 8001212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001218:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800121c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001220:	08007758 	.word	0x08007758
  ldr r2, =_sbss
 8001224:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001228:	24000324 	.word	0x24000324

0800122c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC3_IRQHandler>
	...

08001230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001236:	2003      	movs	r0, #3
 8001238:	f000 f980 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800123c:	f002 fe08 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8001240:	4602      	mov	r2, r0
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_Init+0x68>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	4913      	ldr	r1, [pc, #76]	; (800129c <HAL_Init+0x6c>)
 800124e:	5ccb      	ldrb	r3, [r1, r3]
 8001250:	f003 031f 	and.w	r3, r3, #31
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
 8001258:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_Init+0x68>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_Init+0x6c>)
 8001264:	5cd3      	ldrb	r3, [r2, r3]
 8001266:	f003 031f 	and.w	r3, r3, #31
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	fa22 f303 	lsr.w	r3, r2, r3
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <HAL_Init+0x70>)
 8001272:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <HAL_Init+0x74>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800127a:	200f      	movs	r0, #15
 800127c:	f000 f814 	bl	80012a8 <HAL_InitTick>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e002      	b.n	8001290 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800128a:	f7ff fed7 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	58024400 	.word	0x58024400
 800129c:	08007738 	.word	0x08007738
 80012a0:	24000004 	.word	0x24000004
 80012a4:	24000000 	.word	0x24000000

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_InitTick+0x60>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e021      	b.n	8001300 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <HAL_InitTick+0x64>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_InitTick+0x60>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f965 	bl	80015a2 <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f92f 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x68>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2400000c 	.word	0x2400000c
 800130c:	24000000 	.word	0x24000000
 8001310:	24000008 	.word	0x24000008

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	2400000c 	.word	0x2400000c
 8001338:	24000320 	.word	0x24000320

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	24000320 	.word	0x24000320

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2400000c 	.word	0x2400000c

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00
 80013e0:	05fa0000 	.word	0x05fa0000

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff29 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff40 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff90 	bl	8001490 <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff5f 	bl	800143c <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff33 	bl	8001400 <__NVIC_EnableIRQ>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffa4 	bl	80014f8 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff feba 	bl	800133c <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e312      	b.n	8001bfa <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a66      	ldr	r2, [pc, #408]	; (8001774 <HAL_DMA_Init+0x1b8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d04a      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a65      	ldr	r2, [pc, #404]	; (8001778 <HAL_DMA_Init+0x1bc>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d045      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a63      	ldr	r2, [pc, #396]	; (800177c <HAL_DMA_Init+0x1c0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d040      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a62      	ldr	r2, [pc, #392]	; (8001780 <HAL_DMA_Init+0x1c4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d03b      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a60      	ldr	r2, [pc, #384]	; (8001784 <HAL_DMA_Init+0x1c8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d036      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a5f      	ldr	r2, [pc, #380]	; (8001788 <HAL_DMA_Init+0x1cc>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d031      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a5d      	ldr	r2, [pc, #372]	; (800178c <HAL_DMA_Init+0x1d0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d02c      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a5c      	ldr	r2, [pc, #368]	; (8001790 <HAL_DMA_Init+0x1d4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d027      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <HAL_DMA_Init+0x1d8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d022      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a59      	ldr	r2, [pc, #356]	; (8001798 <HAL_DMA_Init+0x1dc>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d01d      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a57      	ldr	r2, [pc, #348]	; (800179c <HAL_DMA_Init+0x1e0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d018      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a56      	ldr	r2, [pc, #344]	; (80017a0 <HAL_DMA_Init+0x1e4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d013      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a54      	ldr	r2, [pc, #336]	; (80017a4 <HAL_DMA_Init+0x1e8>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00e      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a53      	ldr	r2, [pc, #332]	; (80017a8 <HAL_DMA_Init+0x1ec>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d009      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a51      	ldr	r2, [pc, #324]	; (80017ac <HAL_DMA_Init+0x1f0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d004      	beq.n	8001674 <HAL_DMA_Init+0xb8>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a50      	ldr	r2, [pc, #320]	; (80017b0 <HAL_DMA_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d101      	bne.n	8001678 <HAL_DMA_Init+0xbc>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_DMA_Init+0xbe>
 8001678:	2300      	movs	r3, #0
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 813c 	beq.w	80018f8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a37      	ldr	r2, [pc, #220]	; (8001774 <HAL_DMA_Init+0x1b8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d04a      	beq.n	8001730 <HAL_DMA_Init+0x174>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a36      	ldr	r2, [pc, #216]	; (8001778 <HAL_DMA_Init+0x1bc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d045      	beq.n	8001730 <HAL_DMA_Init+0x174>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a34      	ldr	r2, [pc, #208]	; (800177c <HAL_DMA_Init+0x1c0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d040      	beq.n	8001730 <HAL_DMA_Init+0x174>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a33      	ldr	r2, [pc, #204]	; (8001780 <HAL_DMA_Init+0x1c4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d03b      	beq.n	8001730 <HAL_DMA_Init+0x174>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a31      	ldr	r2, [pc, #196]	; (8001784 <HAL_DMA_Init+0x1c8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d036      	beq.n	8001730 <HAL_DMA_Init+0x174>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a30      	ldr	r2, [pc, #192]	; (8001788 <HAL_DMA_Init+0x1cc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d031      	beq.n	8001730 <HAL_DMA_Init+0x174>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2e      	ldr	r2, [pc, #184]	; (800178c <HAL_DMA_Init+0x1d0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d02c      	beq.n	8001730 <HAL_DMA_Init+0x174>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a2d      	ldr	r2, [pc, #180]	; (8001790 <HAL_DMA_Init+0x1d4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d027      	beq.n	8001730 <HAL_DMA_Init+0x174>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a2b      	ldr	r2, [pc, #172]	; (8001794 <HAL_DMA_Init+0x1d8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d022      	beq.n	8001730 <HAL_DMA_Init+0x174>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a2a      	ldr	r2, [pc, #168]	; (8001798 <HAL_DMA_Init+0x1dc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d01d      	beq.n	8001730 <HAL_DMA_Init+0x174>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a28      	ldr	r2, [pc, #160]	; (800179c <HAL_DMA_Init+0x1e0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d018      	beq.n	8001730 <HAL_DMA_Init+0x174>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <HAL_DMA_Init+0x1e4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d013      	beq.n	8001730 <HAL_DMA_Init+0x174>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a25      	ldr	r2, [pc, #148]	; (80017a4 <HAL_DMA_Init+0x1e8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d00e      	beq.n	8001730 <HAL_DMA_Init+0x174>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a24      	ldr	r2, [pc, #144]	; (80017a8 <HAL_DMA_Init+0x1ec>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d009      	beq.n	8001730 <HAL_DMA_Init+0x174>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a22      	ldr	r2, [pc, #136]	; (80017ac <HAL_DMA_Init+0x1f0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d004      	beq.n	8001730 <HAL_DMA_Init+0x174>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a21      	ldr	r2, [pc, #132]	; (80017b0 <HAL_DMA_Init+0x1f4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d108      	bne.n	8001742 <HAL_DMA_Init+0x186>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e007      	b.n	8001752 <HAL_DMA_Init+0x196>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001752:	e02f      	b.n	80017b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001754:	f7ff fdf2 	bl	800133c <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b05      	cmp	r3, #5
 8001760:	d928      	bls.n	80017b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2220      	movs	r2, #32
 8001766:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2203      	movs	r2, #3
 800176c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e242      	b.n	8001bfa <HAL_DMA_Init+0x63e>
 8001774:	40020010 	.word	0x40020010
 8001778:	40020028 	.word	0x40020028
 800177c:	40020040 	.word	0x40020040
 8001780:	40020058 	.word	0x40020058
 8001784:	40020070 	.word	0x40020070
 8001788:	40020088 	.word	0x40020088
 800178c:	400200a0 	.word	0x400200a0
 8001790:	400200b8 	.word	0x400200b8
 8001794:	40020410 	.word	0x40020410
 8001798:	40020428 	.word	0x40020428
 800179c:	40020440 	.word	0x40020440
 80017a0:	40020458 	.word	0x40020458
 80017a4:	40020470 	.word	0x40020470
 80017a8:	40020488 	.word	0x40020488
 80017ac:	400204a0 	.word	0x400204a0
 80017b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1c8      	bne.n	8001754 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4b83      	ldr	r3, [pc, #524]	; (80019dc <HAL_DMA_Init+0x420>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80017da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	2b04      	cmp	r3, #4
 8001806:	d107      	bne.n	8001818 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	4313      	orrs	r3, r2
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4313      	orrs	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b28      	cmp	r3, #40	; 0x28
 800181e:	d903      	bls.n	8001828 <HAL_DMA_Init+0x26c>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b2e      	cmp	r3, #46	; 0x2e
 8001826:	d91f      	bls.n	8001868 <HAL_DMA_Init+0x2ac>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b3e      	cmp	r3, #62	; 0x3e
 800182e:	d903      	bls.n	8001838 <HAL_DMA_Init+0x27c>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b42      	cmp	r3, #66	; 0x42
 8001836:	d917      	bls.n	8001868 <HAL_DMA_Init+0x2ac>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b46      	cmp	r3, #70	; 0x46
 800183e:	d903      	bls.n	8001848 <HAL_DMA_Init+0x28c>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b48      	cmp	r3, #72	; 0x48
 8001846:	d90f      	bls.n	8001868 <HAL_DMA_Init+0x2ac>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b4e      	cmp	r3, #78	; 0x4e
 800184e:	d903      	bls.n	8001858 <HAL_DMA_Init+0x29c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b52      	cmp	r3, #82	; 0x52
 8001856:	d907      	bls.n	8001868 <HAL_DMA_Init+0x2ac>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b73      	cmp	r3, #115	; 0x73
 800185e:	d905      	bls.n	800186c <HAL_DMA_Init+0x2b0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b77      	cmp	r3, #119	; 0x77
 8001866:	d801      	bhi.n	800186c <HAL_DMA_Init+0x2b0>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_DMA_Init+0x2b2>
 800186c:	2300      	movs	r3, #0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001878:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f023 0307 	bic.w	r3, r3, #7
 8001890:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d117      	bne.n	80018d4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00e      	beq.n	80018d4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f001 f9b4 	bl	8002c24 <DMA_CheckFifoParam>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d008      	beq.n	80018d4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2240      	movs	r2, #64	; 0x40
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e192      	b.n	8001bfa <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f001 f8ef 	bl	8002ac0 <DMA_CalcBaseAndBitshift>
 80018e2:	4603      	mov	r3, r0
 80018e4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	223f      	movs	r2, #63	; 0x3f
 80018f0:	409a      	lsls	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	e0c8      	b.n	8001a8a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a38      	ldr	r2, [pc, #224]	; (80019e0 <HAL_DMA_Init+0x424>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d022      	beq.n	8001948 <HAL_DMA_Init+0x38c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a37      	ldr	r2, [pc, #220]	; (80019e4 <HAL_DMA_Init+0x428>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d01d      	beq.n	8001948 <HAL_DMA_Init+0x38c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a35      	ldr	r2, [pc, #212]	; (80019e8 <HAL_DMA_Init+0x42c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d018      	beq.n	8001948 <HAL_DMA_Init+0x38c>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a34      	ldr	r2, [pc, #208]	; (80019ec <HAL_DMA_Init+0x430>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d013      	beq.n	8001948 <HAL_DMA_Init+0x38c>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a32      	ldr	r2, [pc, #200]	; (80019f0 <HAL_DMA_Init+0x434>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00e      	beq.n	8001948 <HAL_DMA_Init+0x38c>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a31      	ldr	r2, [pc, #196]	; (80019f4 <HAL_DMA_Init+0x438>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d009      	beq.n	8001948 <HAL_DMA_Init+0x38c>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2f      	ldr	r2, [pc, #188]	; (80019f8 <HAL_DMA_Init+0x43c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d004      	beq.n	8001948 <HAL_DMA_Init+0x38c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a2e      	ldr	r2, [pc, #184]	; (80019fc <HAL_DMA_Init+0x440>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d101      	bne.n	800194c <HAL_DMA_Init+0x390>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_DMA_Init+0x392>
 800194c:	2300      	movs	r3, #0
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8092 	beq.w	8001a78 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <HAL_DMA_Init+0x424>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d021      	beq.n	80019a2 <HAL_DMA_Init+0x3e6>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a20      	ldr	r2, [pc, #128]	; (80019e4 <HAL_DMA_Init+0x428>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d01c      	beq.n	80019a2 <HAL_DMA_Init+0x3e6>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <HAL_DMA_Init+0x42c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d017      	beq.n	80019a2 <HAL_DMA_Init+0x3e6>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <HAL_DMA_Init+0x430>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d012      	beq.n	80019a2 <HAL_DMA_Init+0x3e6>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <HAL_DMA_Init+0x434>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00d      	beq.n	80019a2 <HAL_DMA_Init+0x3e6>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <HAL_DMA_Init+0x438>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d008      	beq.n	80019a2 <HAL_DMA_Init+0x3e6>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <HAL_DMA_Init+0x43c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d003      	beq.n	80019a2 <HAL_DMA_Init+0x3e6>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a17      	ldr	r2, [pc, #92]	; (80019fc <HAL_DMA_Init+0x440>)
 80019a0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2202      	movs	r2, #2
 80019a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_DMA_Init+0x444>)
 80019be:	4013      	ands	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b40      	cmp	r3, #64	; 0x40
 80019c8:	d01c      	beq.n	8001a04 <HAL_DMA_Init+0x448>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b80      	cmp	r3, #128	; 0x80
 80019d0:	d102      	bne.n	80019d8 <HAL_DMA_Init+0x41c>
 80019d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019d6:	e016      	b.n	8001a06 <HAL_DMA_Init+0x44a>
 80019d8:	2300      	movs	r3, #0
 80019da:	e014      	b.n	8001a06 <HAL_DMA_Init+0x44a>
 80019dc:	fe10803f 	.word	0xfe10803f
 80019e0:	58025408 	.word	0x58025408
 80019e4:	5802541c 	.word	0x5802541c
 80019e8:	58025430 	.word	0x58025430
 80019ec:	58025444 	.word	0x58025444
 80019f0:	58025458 	.word	0x58025458
 80019f4:	5802546c 	.word	0x5802546c
 80019f8:	58025480 	.word	0x58025480
 80019fc:	58025494 	.word	0x58025494
 8001a00:	fffe000f 	.word	0xfffe000f
 8001a04:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68d2      	ldr	r2, [r2, #12]
 8001a0a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001a14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a34:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b6e      	ldr	r3, [pc, #440]	; (8001c04 <HAL_DMA_Init+0x648>)
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <HAL_DMA_Init+0x64c>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	009a      	lsls	r2, r3, #2
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f001 f82f 	bl	8002ac0 <DMA_CalcBaseAndBitshift>
 8001a62:	4603      	mov	r3, r0
 8001a64:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	2201      	movs	r2, #1
 8001a70:	409a      	lsls	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	e008      	b.n	8001a8a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2240      	movs	r2, #64	; 0x40
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2203      	movs	r2, #3
 8001a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0b7      	b.n	8001bfa <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a5f      	ldr	r2, [pc, #380]	; (8001c0c <HAL_DMA_Init+0x650>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d072      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a5d      	ldr	r2, [pc, #372]	; (8001c10 <HAL_DMA_Init+0x654>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d06d      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a5c      	ldr	r2, [pc, #368]	; (8001c14 <HAL_DMA_Init+0x658>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d068      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a5a      	ldr	r2, [pc, #360]	; (8001c18 <HAL_DMA_Init+0x65c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d063      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a59      	ldr	r2, [pc, #356]	; (8001c1c <HAL_DMA_Init+0x660>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d05e      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a57      	ldr	r2, [pc, #348]	; (8001c20 <HAL_DMA_Init+0x664>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d059      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a56      	ldr	r2, [pc, #344]	; (8001c24 <HAL_DMA_Init+0x668>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d054      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a54      	ldr	r2, [pc, #336]	; (8001c28 <HAL_DMA_Init+0x66c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d04f      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a53      	ldr	r2, [pc, #332]	; (8001c2c <HAL_DMA_Init+0x670>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d04a      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a51      	ldr	r2, [pc, #324]	; (8001c30 <HAL_DMA_Init+0x674>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d045      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a50      	ldr	r2, [pc, #320]	; (8001c34 <HAL_DMA_Init+0x678>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d040      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a4e      	ldr	r2, [pc, #312]	; (8001c38 <HAL_DMA_Init+0x67c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d03b      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a4d      	ldr	r2, [pc, #308]	; (8001c3c <HAL_DMA_Init+0x680>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d036      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a4b      	ldr	r2, [pc, #300]	; (8001c40 <HAL_DMA_Init+0x684>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d031      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a4a      	ldr	r2, [pc, #296]	; (8001c44 <HAL_DMA_Init+0x688>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d02c      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a48      	ldr	r2, [pc, #288]	; (8001c48 <HAL_DMA_Init+0x68c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d027      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <HAL_DMA_Init+0x690>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d022      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a45      	ldr	r2, [pc, #276]	; (8001c50 <HAL_DMA_Init+0x694>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d01d      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a44      	ldr	r2, [pc, #272]	; (8001c54 <HAL_DMA_Init+0x698>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d018      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a42      	ldr	r2, [pc, #264]	; (8001c58 <HAL_DMA_Init+0x69c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a41      	ldr	r2, [pc, #260]	; (8001c5c <HAL_DMA_Init+0x6a0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d00e      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a3f      	ldr	r2, [pc, #252]	; (8001c60 <HAL_DMA_Init+0x6a4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d009      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a3e      	ldr	r2, [pc, #248]	; (8001c64 <HAL_DMA_Init+0x6a8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d004      	beq.n	8001b7a <HAL_DMA_Init+0x5be>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a3c      	ldr	r2, [pc, #240]	; (8001c68 <HAL_DMA_Init+0x6ac>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <HAL_DMA_Init+0x5c2>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_DMA_Init+0x5c4>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d032      	beq.n	8001bea <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f001 f8c9 	bl	8002d1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b80      	cmp	r3, #128	; 0x80
 8001b90:	d102      	bne.n	8001b98 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001bac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d010      	beq.n	8001bd8 <HAL_DMA_Init+0x61c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d80c      	bhi.n	8001bd8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f001 f946 	bl	8002e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	e008      	b.n	8001bea <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	a7fdabf8 	.word	0xa7fdabf8
 8001c08:	cccccccd 	.word	0xcccccccd
 8001c0c:	40020010 	.word	0x40020010
 8001c10:	40020028 	.word	0x40020028
 8001c14:	40020040 	.word	0x40020040
 8001c18:	40020058 	.word	0x40020058
 8001c1c:	40020070 	.word	0x40020070
 8001c20:	40020088 	.word	0x40020088
 8001c24:	400200a0 	.word	0x400200a0
 8001c28:	400200b8 	.word	0x400200b8
 8001c2c:	40020410 	.word	0x40020410
 8001c30:	40020428 	.word	0x40020428
 8001c34:	40020440 	.word	0x40020440
 8001c38:	40020458 	.word	0x40020458
 8001c3c:	40020470 	.word	0x40020470
 8001c40:	40020488 	.word	0x40020488
 8001c44:	400204a0 	.word	0x400204a0
 8001c48:	400204b8 	.word	0x400204b8
 8001c4c:	58025408 	.word	0x58025408
 8001c50:	5802541c 	.word	0x5802541c
 8001c54:	58025430 	.word	0x58025430
 8001c58:	58025444 	.word	0x58025444
 8001c5c:	58025458 	.word	0x58025458
 8001c60:	5802546c 	.word	0x5802546c
 8001c64:	58025480 	.word	0x58025480
 8001c68:	58025494 	.word	0x58025494

08001c6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c78:	4b67      	ldr	r3, [pc, #412]	; (8001e18 <HAL_DMA_IRQHandler+0x1ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a67      	ldr	r2, [pc, #412]	; (8001e1c <HAL_DMA_IRQHandler+0x1b0>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0a9b      	lsrs	r3, r3, #10
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a5f      	ldr	r2, [pc, #380]	; (8001e20 <HAL_DMA_IRQHandler+0x1b4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d04a      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a5d      	ldr	r2, [pc, #372]	; (8001e24 <HAL_DMA_IRQHandler+0x1b8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d045      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a5c      	ldr	r2, [pc, #368]	; (8001e28 <HAL_DMA_IRQHandler+0x1bc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d040      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a5a      	ldr	r2, [pc, #360]	; (8001e2c <HAL_DMA_IRQHandler+0x1c0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d03b      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a59      	ldr	r2, [pc, #356]	; (8001e30 <HAL_DMA_IRQHandler+0x1c4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d036      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a57      	ldr	r2, [pc, #348]	; (8001e34 <HAL_DMA_IRQHandler+0x1c8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d031      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a56      	ldr	r2, [pc, #344]	; (8001e38 <HAL_DMA_IRQHandler+0x1cc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d02c      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a54      	ldr	r2, [pc, #336]	; (8001e3c <HAL_DMA_IRQHandler+0x1d0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d027      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a53      	ldr	r2, [pc, #332]	; (8001e40 <HAL_DMA_IRQHandler+0x1d4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d022      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a51      	ldr	r2, [pc, #324]	; (8001e44 <HAL_DMA_IRQHandler+0x1d8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01d      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a50      	ldr	r2, [pc, #320]	; (8001e48 <HAL_DMA_IRQHandler+0x1dc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d018      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a4e      	ldr	r2, [pc, #312]	; (8001e4c <HAL_DMA_IRQHandler+0x1e0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a4d      	ldr	r2, [pc, #308]	; (8001e50 <HAL_DMA_IRQHandler+0x1e4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d00e      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	; (8001e54 <HAL_DMA_IRQHandler+0x1e8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d009      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a4a      	ldr	r2, [pc, #296]	; (8001e58 <HAL_DMA_IRQHandler+0x1ec>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d004      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xd2>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a48      	ldr	r2, [pc, #288]	; (8001e5c <HAL_DMA_IRQHandler+0x1f0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_DMA_IRQHandler+0xd6>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_DMA_IRQHandler+0xd8>
 8001d42:	2300      	movs	r3, #0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 842b 	beq.w	80025a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	2208      	movs	r2, #8
 8001d54:	409a      	lsls	r2, r3
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80a2 	beq.w	8001ea4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2e      	ldr	r2, [pc, #184]	; (8001e20 <HAL_DMA_IRQHandler+0x1b4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d04a      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2d      	ldr	r2, [pc, #180]	; (8001e24 <HAL_DMA_IRQHandler+0x1b8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d045      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2b      	ldr	r2, [pc, #172]	; (8001e28 <HAL_DMA_IRQHandler+0x1bc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d040      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2a      	ldr	r2, [pc, #168]	; (8001e2c <HAL_DMA_IRQHandler+0x1c0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d03b      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a28      	ldr	r2, [pc, #160]	; (8001e30 <HAL_DMA_IRQHandler+0x1c4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d036      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <HAL_DMA_IRQHandler+0x1c8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d031      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <HAL_DMA_IRQHandler+0x1cc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d02c      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <HAL_DMA_IRQHandler+0x1d0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d027      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <HAL_DMA_IRQHandler+0x1d4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d022      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <HAL_DMA_IRQHandler+0x1d8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d01d      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_DMA_IRQHandler+0x1dc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d018      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_DMA_IRQHandler+0x1e0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d013      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_DMA_IRQHandler+0x1e4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00e      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_DMA_IRQHandler+0x1e8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_DMA_IRQHandler+0x1ec>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x194>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <HAL_DMA_IRQHandler+0x1f0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d12f      	bne.n	8001e60 <HAL_DMA_IRQHandler+0x1f4>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf14      	ite	ne
 8001e0e:	2301      	movne	r3, #1
 8001e10:	2300      	moveq	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	e02e      	b.n	8001e74 <HAL_DMA_IRQHandler+0x208>
 8001e16:	bf00      	nop
 8001e18:	24000000 	.word	0x24000000
 8001e1c:	1b4e81b5 	.word	0x1b4e81b5
 8001e20:	40020010 	.word	0x40020010
 8001e24:	40020028 	.word	0x40020028
 8001e28:	40020040 	.word	0x40020040
 8001e2c:	40020058 	.word	0x40020058
 8001e30:	40020070 	.word	0x40020070
 8001e34:	40020088 	.word	0x40020088
 8001e38:	400200a0 	.word	0x400200a0
 8001e3c:	400200b8 	.word	0x400200b8
 8001e40:	40020410 	.word	0x40020410
 8001e44:	40020428 	.word	0x40020428
 8001e48:	40020440 	.word	0x40020440
 8001e4c:	40020458 	.word	0x40020458
 8001e50:	40020470 	.word	0x40020470
 8001e54:	40020488 	.word	0x40020488
 8001e58:	400204a0 	.word	0x400204a0
 8001e5c:	400204b8 	.word	0x400204b8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf14      	ite	ne
 8001e6e:	2301      	movne	r3, #1
 8001e70:	2300      	moveq	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d015      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0204 	bic.w	r2, r2, #4
 8001e86:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	2208      	movs	r2, #8
 8001e92:	409a      	lsls	r2, r3
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d06e      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a69      	ldr	r2, [pc, #420]	; (8002064 <HAL_DMA_IRQHandler+0x3f8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d04a      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a67      	ldr	r2, [pc, #412]	; (8002068 <HAL_DMA_IRQHandler+0x3fc>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d045      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a66      	ldr	r2, [pc, #408]	; (800206c <HAL_DMA_IRQHandler+0x400>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d040      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a64      	ldr	r2, [pc, #400]	; (8002070 <HAL_DMA_IRQHandler+0x404>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d03b      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a63      	ldr	r2, [pc, #396]	; (8002074 <HAL_DMA_IRQHandler+0x408>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d036      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a61      	ldr	r2, [pc, #388]	; (8002078 <HAL_DMA_IRQHandler+0x40c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d031      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a60      	ldr	r2, [pc, #384]	; (800207c <HAL_DMA_IRQHandler+0x410>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d02c      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a5e      	ldr	r2, [pc, #376]	; (8002080 <HAL_DMA_IRQHandler+0x414>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d027      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a5d      	ldr	r2, [pc, #372]	; (8002084 <HAL_DMA_IRQHandler+0x418>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d022      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a5b      	ldr	r2, [pc, #364]	; (8002088 <HAL_DMA_IRQHandler+0x41c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01d      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a5a      	ldr	r2, [pc, #360]	; (800208c <HAL_DMA_IRQHandler+0x420>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d018      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a58      	ldr	r2, [pc, #352]	; (8002090 <HAL_DMA_IRQHandler+0x424>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a57      	ldr	r2, [pc, #348]	; (8002094 <HAL_DMA_IRQHandler+0x428>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00e      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a55      	ldr	r2, [pc, #340]	; (8002098 <HAL_DMA_IRQHandler+0x42c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d009      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a54      	ldr	r2, [pc, #336]	; (800209c <HAL_DMA_IRQHandler+0x430>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d004      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2ee>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <HAL_DMA_IRQHandler+0x434>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10a      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x304>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf14      	ite	ne
 8001f68:	2301      	movne	r3, #1
 8001f6a:	2300      	moveq	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	e003      	b.n	8001f78 <HAL_DMA_IRQHandler+0x30c>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2300      	movs	r3, #0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00d      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2201      	movs	r2, #1
 8001f86:	409a      	lsls	r2, r3
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f90:	f043 0202 	orr.w	r2, r3, #2
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 808f 	beq.w	80020cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a2c      	ldr	r2, [pc, #176]	; (8002064 <HAL_DMA_IRQHandler+0x3f8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d04a      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <HAL_DMA_IRQHandler+0x3fc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d045      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_DMA_IRQHandler+0x400>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d040      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <HAL_DMA_IRQHandler+0x404>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d03b      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a26      	ldr	r2, [pc, #152]	; (8002074 <HAL_DMA_IRQHandler+0x408>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d036      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a24      	ldr	r2, [pc, #144]	; (8002078 <HAL_DMA_IRQHandler+0x40c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d031      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_DMA_IRQHandler+0x410>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d02c      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a21      	ldr	r2, [pc, #132]	; (8002080 <HAL_DMA_IRQHandler+0x414>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d027      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a20      	ldr	r2, [pc, #128]	; (8002084 <HAL_DMA_IRQHandler+0x418>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <HAL_DMA_IRQHandler+0x41c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01d      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1d      	ldr	r2, [pc, #116]	; (800208c <HAL_DMA_IRQHandler+0x420>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d018      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <HAL_DMA_IRQHandler+0x424>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1a      	ldr	r2, [pc, #104]	; (8002094 <HAL_DMA_IRQHandler+0x428>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00e      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a18      	ldr	r2, [pc, #96]	; (8002098 <HAL_DMA_IRQHandler+0x42c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d009      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <HAL_DMA_IRQHandler+0x430>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d004      	beq.n	800204e <HAL_DMA_IRQHandler+0x3e2>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <HAL_DMA_IRQHandler+0x434>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d12a      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x438>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e023      	b.n	80020ac <HAL_DMA_IRQHandler+0x440>
 8002064:	40020010 	.word	0x40020010
 8002068:	40020028 	.word	0x40020028
 800206c:	40020040 	.word	0x40020040
 8002070:	40020058 	.word	0x40020058
 8002074:	40020070 	.word	0x40020070
 8002078:	40020088 	.word	0x40020088
 800207c:	400200a0 	.word	0x400200a0
 8002080:	400200b8 	.word	0x400200b8
 8002084:	40020410 	.word	0x40020410
 8002088:	40020428 	.word	0x40020428
 800208c:	40020440 	.word	0x40020440
 8002090:	40020458 	.word	0x40020458
 8002094:	40020470 	.word	0x40020470
 8002098:	40020488 	.word	0x40020488
 800209c:	400204a0 	.word	0x400204a0
 80020a0:	400204b8 	.word	0x400204b8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2300      	movs	r3, #0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00d      	beq.n	80020cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	2204      	movs	r2, #4
 80020ba:	409a      	lsls	r2, r3
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	f043 0204 	orr.w	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	2210      	movs	r2, #16
 80020d6:	409a      	lsls	r2, r3
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80a6 	beq.w	800222e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a85      	ldr	r2, [pc, #532]	; (80022fc <HAL_DMA_IRQHandler+0x690>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d04a      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a83      	ldr	r2, [pc, #524]	; (8002300 <HAL_DMA_IRQHandler+0x694>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d045      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a82      	ldr	r2, [pc, #520]	; (8002304 <HAL_DMA_IRQHandler+0x698>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d040      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a80      	ldr	r2, [pc, #512]	; (8002308 <HAL_DMA_IRQHandler+0x69c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d03b      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a7f      	ldr	r2, [pc, #508]	; (800230c <HAL_DMA_IRQHandler+0x6a0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d036      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a7d      	ldr	r2, [pc, #500]	; (8002310 <HAL_DMA_IRQHandler+0x6a4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d031      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7c      	ldr	r2, [pc, #496]	; (8002314 <HAL_DMA_IRQHandler+0x6a8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d02c      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a7a      	ldr	r2, [pc, #488]	; (8002318 <HAL_DMA_IRQHandler+0x6ac>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d027      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a79      	ldr	r2, [pc, #484]	; (800231c <HAL_DMA_IRQHandler+0x6b0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d022      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a77      	ldr	r2, [pc, #476]	; (8002320 <HAL_DMA_IRQHandler+0x6b4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01d      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a76      	ldr	r2, [pc, #472]	; (8002324 <HAL_DMA_IRQHandler+0x6b8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d018      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a74      	ldr	r2, [pc, #464]	; (8002328 <HAL_DMA_IRQHandler+0x6bc>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a73      	ldr	r2, [pc, #460]	; (800232c <HAL_DMA_IRQHandler+0x6c0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a71      	ldr	r2, [pc, #452]	; (8002330 <HAL_DMA_IRQHandler+0x6c4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a70      	ldr	r2, [pc, #448]	; (8002334 <HAL_DMA_IRQHandler+0x6c8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_DMA_IRQHandler+0x516>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a6e      	ldr	r2, [pc, #440]	; (8002338 <HAL_DMA_IRQHandler+0x6cc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10a      	bne.n	8002198 <HAL_DMA_IRQHandler+0x52c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf14      	ite	ne
 8002190:	2301      	movne	r3, #1
 8002192:	2300      	moveq	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e009      	b.n	80021ac <HAL_DMA_IRQHandler+0x540>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf14      	ite	ne
 80021a6:	2301      	movne	r3, #1
 80021a8:	2300      	moveq	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d03e      	beq.n	800222e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	2210      	movs	r2, #16
 80021ba:	409a      	lsls	r2, r3
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d018      	beq.n	8002200 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d108      	bne.n	80021ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d024      	beq.n	800222e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
 80021ec:	e01f      	b.n	800222e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d01b      	beq.n	800222e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
 80021fe:	e016      	b.n	800222e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0208 	bic.w	r2, r2, #8
 800221c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2220      	movs	r2, #32
 8002238:	409a      	lsls	r2, r3
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8110 	beq.w	8002464 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2c      	ldr	r2, [pc, #176]	; (80022fc <HAL_DMA_IRQHandler+0x690>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d04a      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <HAL_DMA_IRQHandler+0x694>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d045      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a29      	ldr	r2, [pc, #164]	; (8002304 <HAL_DMA_IRQHandler+0x698>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d040      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a28      	ldr	r2, [pc, #160]	; (8002308 <HAL_DMA_IRQHandler+0x69c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d03b      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a26      	ldr	r2, [pc, #152]	; (800230c <HAL_DMA_IRQHandler+0x6a0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d036      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a25      	ldr	r2, [pc, #148]	; (8002310 <HAL_DMA_IRQHandler+0x6a4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d031      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a23      	ldr	r2, [pc, #140]	; (8002314 <HAL_DMA_IRQHandler+0x6a8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d02c      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a22      	ldr	r2, [pc, #136]	; (8002318 <HAL_DMA_IRQHandler+0x6ac>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d027      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a20      	ldr	r2, [pc, #128]	; (800231c <HAL_DMA_IRQHandler+0x6b0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d022      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <HAL_DMA_IRQHandler+0x6b4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d01d      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <HAL_DMA_IRQHandler+0x6b8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d018      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_DMA_IRQHandler+0x6bc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d013      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1a      	ldr	r2, [pc, #104]	; (800232c <HAL_DMA_IRQHandler+0x6c0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00e      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a19      	ldr	r2, [pc, #100]	; (8002330 <HAL_DMA_IRQHandler+0x6c4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d009      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_DMA_IRQHandler+0x6c8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d004      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x678>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a16      	ldr	r2, [pc, #88]	; (8002338 <HAL_DMA_IRQHandler+0x6cc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d12b      	bne.n	800233c <HAL_DMA_IRQHandler+0x6d0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	bf14      	ite	ne
 80022f2:	2301      	movne	r3, #1
 80022f4:	2300      	moveq	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	e02a      	b.n	8002350 <HAL_DMA_IRQHandler+0x6e4>
 80022fa:	bf00      	nop
 80022fc:	40020010 	.word	0x40020010
 8002300:	40020028 	.word	0x40020028
 8002304:	40020040 	.word	0x40020040
 8002308:	40020058 	.word	0x40020058
 800230c:	40020070 	.word	0x40020070
 8002310:	40020088 	.word	0x40020088
 8002314:	400200a0 	.word	0x400200a0
 8002318:	400200b8 	.word	0x400200b8
 800231c:	40020410 	.word	0x40020410
 8002320:	40020428 	.word	0x40020428
 8002324:	40020440 	.word	0x40020440
 8002328:	40020458 	.word	0x40020458
 800232c:	40020470 	.word	0x40020470
 8002330:	40020488 	.word	0x40020488
 8002334:	400204a0 	.word	0x400204a0
 8002338:	400204b8 	.word	0x400204b8
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf14      	ite	ne
 800234a:	2301      	movne	r3, #1
 800234c:	2300      	moveq	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8087 	beq.w	8002464 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2220      	movs	r2, #32
 8002360:	409a      	lsls	r2, r3
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b04      	cmp	r3, #4
 8002370:	d139      	bne.n	80023e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0216 	bic.w	r2, r2, #22
 8002380:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002390:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d103      	bne.n	80023a2 <HAL_DMA_IRQHandler+0x736>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0208 	bic.w	r2, r2, #8
 80023b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	223f      	movs	r2, #63	; 0x3f
 80023bc:	409a      	lsls	r2, r3
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 834a 	beq.w	8002a70 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	4798      	blx	r3
          }
          return;
 80023e4:	e344      	b.n	8002a70 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d018      	beq.n	8002426 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d108      	bne.n	8002414 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	2b00      	cmp	r3, #0
 8002408:	d02c      	beq.n	8002464 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	4798      	blx	r3
 8002412:	e027      	b.n	8002464 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d023      	beq.n	8002464 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
 8002424:	e01e      	b.n	8002464 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10f      	bne.n	8002454 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0210 	bic.w	r2, r2, #16
 8002442:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8306 	beq.w	8002a7a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8088 	beq.w	800258c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2204      	movs	r2, #4
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a7a      	ldr	r2, [pc, #488]	; (8002674 <HAL_DMA_IRQHandler+0xa08>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d04a      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a79      	ldr	r2, [pc, #484]	; (8002678 <HAL_DMA_IRQHandler+0xa0c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d045      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a77      	ldr	r2, [pc, #476]	; (800267c <HAL_DMA_IRQHandler+0xa10>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d040      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a76      	ldr	r2, [pc, #472]	; (8002680 <HAL_DMA_IRQHandler+0xa14>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d03b      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a74      	ldr	r2, [pc, #464]	; (8002684 <HAL_DMA_IRQHandler+0xa18>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d036      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a73      	ldr	r2, [pc, #460]	; (8002688 <HAL_DMA_IRQHandler+0xa1c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d031      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a71      	ldr	r2, [pc, #452]	; (800268c <HAL_DMA_IRQHandler+0xa20>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d02c      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a70      	ldr	r2, [pc, #448]	; (8002690 <HAL_DMA_IRQHandler+0xa24>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d027      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a6e      	ldr	r2, [pc, #440]	; (8002694 <HAL_DMA_IRQHandler+0xa28>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d022      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6d      	ldr	r2, [pc, #436]	; (8002698 <HAL_DMA_IRQHandler+0xa2c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d01d      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a6b      	ldr	r2, [pc, #428]	; (800269c <HAL_DMA_IRQHandler+0xa30>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d018      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6a      	ldr	r2, [pc, #424]	; (80026a0 <HAL_DMA_IRQHandler+0xa34>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d013      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a68      	ldr	r2, [pc, #416]	; (80026a4 <HAL_DMA_IRQHandler+0xa38>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00e      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a67      	ldr	r2, [pc, #412]	; (80026a8 <HAL_DMA_IRQHandler+0xa3c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a65      	ldr	r2, [pc, #404]	; (80026ac <HAL_DMA_IRQHandler+0xa40>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_DMA_IRQHandler+0x8b8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a64      	ldr	r2, [pc, #400]	; (80026b0 <HAL_DMA_IRQHandler+0xa44>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d108      	bne.n	8002536 <HAL_DMA_IRQHandler+0x8ca>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e007      	b.n	8002546 <HAL_DMA_IRQHandler+0x8da>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3301      	adds	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254e:	429a      	cmp	r2, r3
 8002550:	d307      	bcc.n	8002562 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f2      	bne.n	8002546 <HAL_DMA_IRQHandler+0x8da>
 8002560:	e000      	b.n	8002564 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002562:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2203      	movs	r2, #3
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800257a:	e003      	b.n	8002584 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 8272 	beq.w	8002a7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
 800259e:	e26c      	b.n	8002a7a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a43      	ldr	r2, [pc, #268]	; (80026b4 <HAL_DMA_IRQHandler+0xa48>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d022      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x984>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a42      	ldr	r2, [pc, #264]	; (80026b8 <HAL_DMA_IRQHandler+0xa4c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d01d      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x984>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a40      	ldr	r2, [pc, #256]	; (80026bc <HAL_DMA_IRQHandler+0xa50>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d018      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x984>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a3f      	ldr	r2, [pc, #252]	; (80026c0 <HAL_DMA_IRQHandler+0xa54>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d013      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x984>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a3d      	ldr	r2, [pc, #244]	; (80026c4 <HAL_DMA_IRQHandler+0xa58>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00e      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x984>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a3c      	ldr	r2, [pc, #240]	; (80026c8 <HAL_DMA_IRQHandler+0xa5c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d009      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x984>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a3a      	ldr	r2, [pc, #232]	; (80026cc <HAL_DMA_IRQHandler+0xa60>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d004      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x984>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a39      	ldr	r2, [pc, #228]	; (80026d0 <HAL_DMA_IRQHandler+0xa64>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x988>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_DMA_IRQHandler+0x98a>
 80025f4:	2300      	movs	r3, #0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 823f 	beq.w	8002a7a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	2204      	movs	r2, #4
 800260e:	409a      	lsls	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80cd 	beq.w	80027b4 <HAL_DMA_IRQHandler+0xb48>
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80c7 	beq.w	80027b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	2204      	movs	r2, #4
 8002630:	409a      	lsls	r2, r3
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d049      	beq.n	80026d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8210 	beq.w	8002a74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800265c:	e20a      	b.n	8002a74 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8206 	beq.w	8002a74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002670:	e200      	b.n	8002a74 <HAL_DMA_IRQHandler+0xe08>
 8002672:	bf00      	nop
 8002674:	40020010 	.word	0x40020010
 8002678:	40020028 	.word	0x40020028
 800267c:	40020040 	.word	0x40020040
 8002680:	40020058 	.word	0x40020058
 8002684:	40020070 	.word	0x40020070
 8002688:	40020088 	.word	0x40020088
 800268c:	400200a0 	.word	0x400200a0
 8002690:	400200b8 	.word	0x400200b8
 8002694:	40020410 	.word	0x40020410
 8002698:	40020428 	.word	0x40020428
 800269c:	40020440 	.word	0x40020440
 80026a0:	40020458 	.word	0x40020458
 80026a4:	40020470 	.word	0x40020470
 80026a8:	40020488 	.word	0x40020488
 80026ac:	400204a0 	.word	0x400204a0
 80026b0:	400204b8 	.word	0x400204b8
 80026b4:	58025408 	.word	0x58025408
 80026b8:	5802541c 	.word	0x5802541c
 80026bc:	58025430 	.word	0x58025430
 80026c0:	58025444 	.word	0x58025444
 80026c4:	58025458 	.word	0x58025458
 80026c8:	5802546c 	.word	0x5802546c
 80026cc:	58025480 	.word	0x58025480
 80026d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d160      	bne.n	80027a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7f      	ldr	r2, [pc, #508]	; (80028e0 <HAL_DMA_IRQHandler+0xc74>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d04a      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a7d      	ldr	r2, [pc, #500]	; (80028e4 <HAL_DMA_IRQHandler+0xc78>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d045      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a7c      	ldr	r2, [pc, #496]	; (80028e8 <HAL_DMA_IRQHandler+0xc7c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d040      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a7a      	ldr	r2, [pc, #488]	; (80028ec <HAL_DMA_IRQHandler+0xc80>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d03b      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a79      	ldr	r2, [pc, #484]	; (80028f0 <HAL_DMA_IRQHandler+0xc84>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d036      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a77      	ldr	r2, [pc, #476]	; (80028f4 <HAL_DMA_IRQHandler+0xc88>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d031      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a76      	ldr	r2, [pc, #472]	; (80028f8 <HAL_DMA_IRQHandler+0xc8c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d02c      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a74      	ldr	r2, [pc, #464]	; (80028fc <HAL_DMA_IRQHandler+0xc90>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d027      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a73      	ldr	r2, [pc, #460]	; (8002900 <HAL_DMA_IRQHandler+0xc94>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d022      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a71      	ldr	r2, [pc, #452]	; (8002904 <HAL_DMA_IRQHandler+0xc98>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01d      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a70      	ldr	r2, [pc, #448]	; (8002908 <HAL_DMA_IRQHandler+0xc9c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d018      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6e      	ldr	r2, [pc, #440]	; (800290c <HAL_DMA_IRQHandler+0xca0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a6d      	ldr	r2, [pc, #436]	; (8002910 <HAL_DMA_IRQHandler+0xca4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00e      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a6b      	ldr	r2, [pc, #428]	; (8002914 <HAL_DMA_IRQHandler+0xca8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d009      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a6a      	ldr	r2, [pc, #424]	; (8002918 <HAL_DMA_IRQHandler+0xcac>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d004      	beq.n	800277e <HAL_DMA_IRQHandler+0xb12>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a68      	ldr	r2, [pc, #416]	; (800291c <HAL_DMA_IRQHandler+0xcb0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <HAL_DMA_IRQHandler+0xb24>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0208 	bic.w	r2, r2, #8
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e007      	b.n	80027a0 <HAL_DMA_IRQHandler+0xb34>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0204 	bic.w	r2, r2, #4
 800279e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8165 	beq.w	8002a74 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027b2:	e15f      	b.n	8002a74 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	2202      	movs	r2, #2
 80027be:	409a      	lsls	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80c5 	beq.w	8002954 <HAL_DMA_IRQHandler+0xce8>
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80bf 	beq.w	8002954 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	2202      	movs	r2, #2
 80027e0:	409a      	lsls	r2, r3
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d018      	beq.n	8002822 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 813a 	beq.w	8002a78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800280c:	e134      	b.n	8002a78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8130 	beq.w	8002a78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002820:	e12a      	b.n	8002a78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	f040 8089 	bne.w	8002940 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2b      	ldr	r2, [pc, #172]	; (80028e0 <HAL_DMA_IRQHandler+0xc74>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d04a      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a29      	ldr	r2, [pc, #164]	; (80028e4 <HAL_DMA_IRQHandler+0xc78>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d045      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a28      	ldr	r2, [pc, #160]	; (80028e8 <HAL_DMA_IRQHandler+0xc7c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d040      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a26      	ldr	r2, [pc, #152]	; (80028ec <HAL_DMA_IRQHandler+0xc80>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d03b      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a25      	ldr	r2, [pc, #148]	; (80028f0 <HAL_DMA_IRQHandler+0xc84>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d036      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a23      	ldr	r2, [pc, #140]	; (80028f4 <HAL_DMA_IRQHandler+0xc88>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d031      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <HAL_DMA_IRQHandler+0xc8c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d02c      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a20      	ldr	r2, [pc, #128]	; (80028fc <HAL_DMA_IRQHandler+0xc90>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d027      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1f      	ldr	r2, [pc, #124]	; (8002900 <HAL_DMA_IRQHandler+0xc94>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d022      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <HAL_DMA_IRQHandler+0xc98>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d01d      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <HAL_DMA_IRQHandler+0xc9c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d018      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1a      	ldr	r2, [pc, #104]	; (800290c <HAL_DMA_IRQHandler+0xca0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a19      	ldr	r2, [pc, #100]	; (8002910 <HAL_DMA_IRQHandler+0xca4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00e      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a17      	ldr	r2, [pc, #92]	; (8002914 <HAL_DMA_IRQHandler+0xca8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d009      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a16      	ldr	r2, [pc, #88]	; (8002918 <HAL_DMA_IRQHandler+0xcac>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d004      	beq.n	80028ce <HAL_DMA_IRQHandler+0xc62>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a14      	ldr	r2, [pc, #80]	; (800291c <HAL_DMA_IRQHandler+0xcb0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d128      	bne.n	8002920 <HAL_DMA_IRQHandler+0xcb4>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0214 	bic.w	r2, r2, #20
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	e027      	b.n	8002930 <HAL_DMA_IRQHandler+0xcc4>
 80028e0:	40020010 	.word	0x40020010
 80028e4:	40020028 	.word	0x40020028
 80028e8:	40020040 	.word	0x40020040
 80028ec:	40020058 	.word	0x40020058
 80028f0:	40020070 	.word	0x40020070
 80028f4:	40020088 	.word	0x40020088
 80028f8:	400200a0 	.word	0x400200a0
 80028fc:	400200b8 	.word	0x400200b8
 8002900:	40020410 	.word	0x40020410
 8002904:	40020428 	.word	0x40020428
 8002908:	40020440 	.word	0x40020440
 800290c:	40020458 	.word	0x40020458
 8002910:	40020470 	.word	0x40020470
 8002914:	40020488 	.word	0x40020488
 8002918:	400204a0 	.word	0x400204a0
 800291c:	400204b8 	.word	0x400204b8
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 020a 	bic.w	r2, r2, #10
 800292e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8097 	beq.w	8002a78 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002952:	e091      	b.n	8002a78 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	2208      	movs	r2, #8
 800295e:	409a      	lsls	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8088 	beq.w	8002a7a <HAL_DMA_IRQHandler+0xe0e>
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8082 	beq.w	8002a7a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a41      	ldr	r2, [pc, #260]	; (8002a80 <HAL_DMA_IRQHandler+0xe14>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d04a      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a3f      	ldr	r2, [pc, #252]	; (8002a84 <HAL_DMA_IRQHandler+0xe18>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d045      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a3e      	ldr	r2, [pc, #248]	; (8002a88 <HAL_DMA_IRQHandler+0xe1c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d040      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a3c      	ldr	r2, [pc, #240]	; (8002a8c <HAL_DMA_IRQHandler+0xe20>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d03b      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a3b      	ldr	r2, [pc, #236]	; (8002a90 <HAL_DMA_IRQHandler+0xe24>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d036      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a39      	ldr	r2, [pc, #228]	; (8002a94 <HAL_DMA_IRQHandler+0xe28>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d031      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a38      	ldr	r2, [pc, #224]	; (8002a98 <HAL_DMA_IRQHandler+0xe2c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d02c      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a36      	ldr	r2, [pc, #216]	; (8002a9c <HAL_DMA_IRQHandler+0xe30>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d027      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a35      	ldr	r2, [pc, #212]	; (8002aa0 <HAL_DMA_IRQHandler+0xe34>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a33      	ldr	r2, [pc, #204]	; (8002aa4 <HAL_DMA_IRQHandler+0xe38>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01d      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a32      	ldr	r2, [pc, #200]	; (8002aa8 <HAL_DMA_IRQHandler+0xe3c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d018      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a30      	ldr	r2, [pc, #192]	; (8002aac <HAL_DMA_IRQHandler+0xe40>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a2f      	ldr	r2, [pc, #188]	; (8002ab0 <HAL_DMA_IRQHandler+0xe44>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00e      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a2d      	ldr	r2, [pc, #180]	; (8002ab4 <HAL_DMA_IRQHandler+0xe48>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d009      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <HAL_DMA_IRQHandler+0xe4c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d004      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xdaa>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <HAL_DMA_IRQHandler+0xe50>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d108      	bne.n	8002a28 <HAL_DMA_IRQHandler+0xdbc>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 021c 	bic.w	r2, r2, #28
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	e007      	b.n	8002a38 <HAL_DMA_IRQHandler+0xdcc>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 020e 	bic.w	r2, r2, #14
 8002a36:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2201      	movs	r2, #1
 8002a42:	409a      	lsls	r2, r3
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
 8002a6e:	e004      	b.n	8002a7a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002a70:	bf00      	nop
 8002a72:	e002      	b.n	8002a7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a74:	bf00      	nop
 8002a76:	e000      	b.n	8002a7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a78:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002a7a:	3728      	adds	r7, #40	; 0x28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40020010 	.word	0x40020010
 8002a84:	40020028 	.word	0x40020028
 8002a88:	40020040 	.word	0x40020040
 8002a8c:	40020058 	.word	0x40020058
 8002a90:	40020070 	.word	0x40020070
 8002a94:	40020088 	.word	0x40020088
 8002a98:	400200a0 	.word	0x400200a0
 8002a9c:	400200b8 	.word	0x400200b8
 8002aa0:	40020410 	.word	0x40020410
 8002aa4:	40020428 	.word	0x40020428
 8002aa8:	40020440 	.word	0x40020440
 8002aac:	40020458 	.word	0x40020458
 8002ab0:	40020470 	.word	0x40020470
 8002ab4:	40020488 	.word	0x40020488
 8002ab8:	400204a0 	.word	0x400204a0
 8002abc:	400204b8 	.word	0x400204b8

08002ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a42      	ldr	r2, [pc, #264]	; (8002bd8 <DMA_CalcBaseAndBitshift+0x118>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d04a      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a41      	ldr	r2, [pc, #260]	; (8002bdc <DMA_CalcBaseAndBitshift+0x11c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d045      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a3f      	ldr	r2, [pc, #252]	; (8002be0 <DMA_CalcBaseAndBitshift+0x120>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d040      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a3e      	ldr	r2, [pc, #248]	; (8002be4 <DMA_CalcBaseAndBitshift+0x124>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d03b      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a3c      	ldr	r2, [pc, #240]	; (8002be8 <DMA_CalcBaseAndBitshift+0x128>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d036      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a3b      	ldr	r2, [pc, #236]	; (8002bec <DMA_CalcBaseAndBitshift+0x12c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d031      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a39      	ldr	r2, [pc, #228]	; (8002bf0 <DMA_CalcBaseAndBitshift+0x130>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d02c      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a38      	ldr	r2, [pc, #224]	; (8002bf4 <DMA_CalcBaseAndBitshift+0x134>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d027      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a36      	ldr	r2, [pc, #216]	; (8002bf8 <DMA_CalcBaseAndBitshift+0x138>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d022      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a35      	ldr	r2, [pc, #212]	; (8002bfc <DMA_CalcBaseAndBitshift+0x13c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d01d      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a33      	ldr	r2, [pc, #204]	; (8002c00 <DMA_CalcBaseAndBitshift+0x140>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d018      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a32      	ldr	r2, [pc, #200]	; (8002c04 <DMA_CalcBaseAndBitshift+0x144>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d013      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a30      	ldr	r2, [pc, #192]	; (8002c08 <DMA_CalcBaseAndBitshift+0x148>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00e      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2f      	ldr	r2, [pc, #188]	; (8002c0c <DMA_CalcBaseAndBitshift+0x14c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d009      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a2d      	ldr	r2, [pc, #180]	; (8002c10 <DMA_CalcBaseAndBitshift+0x150>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d004      	beq.n	8002b68 <DMA_CalcBaseAndBitshift+0xa8>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a2c      	ldr	r2, [pc, #176]	; (8002c14 <DMA_CalcBaseAndBitshift+0x154>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d101      	bne.n	8002b6c <DMA_CalcBaseAndBitshift+0xac>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <DMA_CalcBaseAndBitshift+0xae>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d024      	beq.n	8002bbc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3b10      	subs	r3, #16
 8002b7a:	4a27      	ldr	r2, [pc, #156]	; (8002c18 <DMA_CalcBaseAndBitshift+0x158>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	4a24      	ldr	r2, [pc, #144]	; (8002c1c <DMA_CalcBaseAndBitshift+0x15c>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d908      	bls.n	8002bac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4b1f      	ldr	r3, [pc, #124]	; (8002c20 <DMA_CalcBaseAndBitshift+0x160>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	1d1a      	adds	r2, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	659a      	str	r2, [r3, #88]	; 0x58
 8002baa:	e00d      	b.n	8002bc8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <DMA_CalcBaseAndBitshift+0x160>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bba:	e005      	b.n	8002bc8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	40020010 	.word	0x40020010
 8002bdc:	40020028 	.word	0x40020028
 8002be0:	40020040 	.word	0x40020040
 8002be4:	40020058 	.word	0x40020058
 8002be8:	40020070 	.word	0x40020070
 8002bec:	40020088 	.word	0x40020088
 8002bf0:	400200a0 	.word	0x400200a0
 8002bf4:	400200b8 	.word	0x400200b8
 8002bf8:	40020410 	.word	0x40020410
 8002bfc:	40020428 	.word	0x40020428
 8002c00:	40020440 	.word	0x40020440
 8002c04:	40020458 	.word	0x40020458
 8002c08:	40020470 	.word	0x40020470
 8002c0c:	40020488 	.word	0x40020488
 8002c10:	400204a0 	.word	0x400204a0
 8002c14:	400204b8 	.word	0x400204b8
 8002c18:	aaaaaaab 	.word	0xaaaaaaab
 8002c1c:	08007748 	.word	0x08007748
 8002c20:	fffffc00 	.word	0xfffffc00

08002c24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d120      	bne.n	8002c7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d858      	bhi.n	8002cf2 <DMA_CheckFifoParam+0xce>
 8002c40:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <DMA_CheckFifoParam+0x24>)
 8002c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c46:	bf00      	nop
 8002c48:	08002c59 	.word	0x08002c59
 8002c4c:	08002c6b 	.word	0x08002c6b
 8002c50:	08002c59 	.word	0x08002c59
 8002c54:	08002cf3 	.word	0x08002cf3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d048      	beq.n	8002cf6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c68:	e045      	b.n	8002cf6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c72:	d142      	bne.n	8002cfa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c78:	e03f      	b.n	8002cfa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c82:	d123      	bne.n	8002ccc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d838      	bhi.n	8002cfe <DMA_CheckFifoParam+0xda>
 8002c8c:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <DMA_CheckFifoParam+0x70>)
 8002c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c92:	bf00      	nop
 8002c94:	08002ca5 	.word	0x08002ca5
 8002c98:	08002cab 	.word	0x08002cab
 8002c9c:	08002ca5 	.word	0x08002ca5
 8002ca0:	08002cbd 	.word	0x08002cbd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
        break;
 8002ca8:	e030      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d025      	beq.n	8002d02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002cba:	e022      	b.n	8002d02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cc4:	d11f      	bne.n	8002d06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002cca:	e01c      	b.n	8002d06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d902      	bls.n	8002cda <DMA_CheckFifoParam+0xb6>
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d003      	beq.n	8002ce0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002cd8:	e018      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
        break;
 8002cde:	e015      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00e      	beq.n	8002d0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
    break;
 8002cf0:	e00b      	b.n	8002d0a <DMA_CheckFifoParam+0xe6>
        break;
 8002cf2:	bf00      	nop
 8002cf4:	e00a      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
        break;
 8002cf6:	bf00      	nop
 8002cf8:	e008      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
        break;
 8002cfa:	bf00      	nop
 8002cfc:	e006      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
        break;
 8002cfe:	bf00      	nop
 8002d00:	e004      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
        break;
 8002d02:	bf00      	nop
 8002d04:	e002      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
        break;
 8002d06:	bf00      	nop
 8002d08:	e000      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
    break;
 8002d0a:	bf00      	nop
    }
  }

  return status;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop

08002d1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a38      	ldr	r2, [pc, #224]	; (8002e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d022      	beq.n	8002d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a36      	ldr	r2, [pc, #216]	; (8002e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01d      	beq.n	8002d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a35      	ldr	r2, [pc, #212]	; (8002e18 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d018      	beq.n	8002d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a33      	ldr	r2, [pc, #204]	; (8002e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a32      	ldr	r2, [pc, #200]	; (8002e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00e      	beq.n	8002d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a30      	ldr	r2, [pc, #192]	; (8002e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d009      	beq.n	8002d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a2d      	ldr	r2, [pc, #180]	; (8002e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01a      	beq.n	8002dba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	3b08      	subs	r3, #8
 8002d8c:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	461a      	mov	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a24      	ldr	r2, [pc, #144]	; (8002e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002da8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	2201      	movs	r2, #1
 8002db2:	409a      	lsls	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002db8:	e024      	b.n	8002e04 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3b10      	subs	r3, #16
 8002dc2:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4a1c      	ldr	r2, [pc, #112]	; (8002e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d806      	bhi.n	8002de2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4a1b      	ldr	r2, [pc, #108]	; (8002e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d902      	bls.n	8002de2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3308      	adds	r3, #8
 8002de0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	461a      	mov	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a16      	ldr	r2, [pc, #88]	; (8002e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002df4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	58025408 	.word	0x58025408
 8002e14:	5802541c 	.word	0x5802541c
 8002e18:	58025430 	.word	0x58025430
 8002e1c:	58025444 	.word	0x58025444
 8002e20:	58025458 	.word	0x58025458
 8002e24:	5802546c 	.word	0x5802546c
 8002e28:	58025480 	.word	0x58025480
 8002e2c:	58025494 	.word	0x58025494
 8002e30:	cccccccd 	.word	0xcccccccd
 8002e34:	16009600 	.word	0x16009600
 8002e38:	58025880 	.word	0x58025880
 8002e3c:	aaaaaaab 	.word	0xaaaaaaab
 8002e40:	400204b8 	.word	0x400204b8
 8002e44:	4002040f 	.word	0x4002040f
 8002e48:	10008200 	.word	0x10008200
 8002e4c:	40020880 	.word	0x40020880

08002e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d04a      	beq.n	8002efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d847      	bhi.n	8002efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a25      	ldr	r2, [pc, #148]	; (8002f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d022      	beq.n	8002ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a24      	ldr	r2, [pc, #144]	; (8002f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d01d      	beq.n	8002ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d018      	beq.n	8002ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a21      	ldr	r2, [pc, #132]	; (8002f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d013      	beq.n	8002ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00e      	beq.n	8002ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d101      	bne.n	8002ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	461a      	mov	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002ed8:	671a      	str	r2, [r3, #112]	; 0x70
 8002eda:	e009      	b.n	8002ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a11      	ldr	r2, [pc, #68]	; (8002f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002eee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	58025408 	.word	0x58025408
 8002f0c:	5802541c 	.word	0x5802541c
 8002f10:	58025430 	.word	0x58025430
 8002f14:	58025444 	.word	0x58025444
 8002f18:	58025458 	.word	0x58025458
 8002f1c:	5802546c 	.word	0x5802546c
 8002f20:	58025480 	.word	0x58025480
 8002f24:	58025494 	.word	0x58025494
 8002f28:	1600963f 	.word	0x1600963f
 8002f2c:	58025940 	.word	0x58025940
 8002f30:	1000823f 	.word	0x1000823f
 8002f34:	40020940 	.word	0x40020940

08002f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	; 0x24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f46:	4b86      	ldr	r3, [pc, #536]	; (8003160 <HAL_GPIO_Init+0x228>)
 8002f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f4a:	e18c      	b.n	8003266 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2101      	movs	r1, #1
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	fa01 f303 	lsl.w	r3, r1, r3
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 817e 	beq.w	8003260 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d005      	beq.n	8002f7c <HAL_GPIO_Init+0x44>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d130      	bne.n	8002fde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	2203      	movs	r2, #3
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	f003 0201 	and.w	r2, r3, #1
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d017      	beq.n	800301a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d123      	bne.n	800306e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	220f      	movs	r2, #15
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	08da      	lsrs	r2, r3, #3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3208      	adds	r2, #8
 8003068:	69b9      	ldr	r1, [r7, #24]
 800306a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	2203      	movs	r2, #3
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0203 	and.w	r2, r3, #3
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80d8 	beq.w	8003260 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b0:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <HAL_GPIO_Init+0x22c>)
 80030b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030b6:	4a2b      	ldr	r2, [pc, #172]	; (8003164 <HAL_GPIO_Init+0x22c>)
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80030c0:	4b28      	ldr	r3, [pc, #160]	; (8003164 <HAL_GPIO_Init+0x22c>)
 80030c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ce:	4a26      	ldr	r2, [pc, #152]	; (8003168 <HAL_GPIO_Init+0x230>)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a1d      	ldr	r2, [pc, #116]	; (800316c <HAL_GPIO_Init+0x234>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d04a      	beq.n	8003190 <HAL_GPIO_Init+0x258>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <HAL_GPIO_Init+0x238>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d02b      	beq.n	800315a <HAL_GPIO_Init+0x222>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <HAL_GPIO_Init+0x23c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d025      	beq.n	8003156 <HAL_GPIO_Init+0x21e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a1a      	ldr	r2, [pc, #104]	; (8003178 <HAL_GPIO_Init+0x240>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01f      	beq.n	8003152 <HAL_GPIO_Init+0x21a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a19      	ldr	r2, [pc, #100]	; (800317c <HAL_GPIO_Init+0x244>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d019      	beq.n	800314e <HAL_GPIO_Init+0x216>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a18      	ldr	r2, [pc, #96]	; (8003180 <HAL_GPIO_Init+0x248>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_GPIO_Init+0x212>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a17      	ldr	r2, [pc, #92]	; (8003184 <HAL_GPIO_Init+0x24c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00d      	beq.n	8003146 <HAL_GPIO_Init+0x20e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a16      	ldr	r2, [pc, #88]	; (8003188 <HAL_GPIO_Init+0x250>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <HAL_GPIO_Init+0x20a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a15      	ldr	r2, [pc, #84]	; (800318c <HAL_GPIO_Init+0x254>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_GPIO_Init+0x206>
 800313a:	2309      	movs	r3, #9
 800313c:	e029      	b.n	8003192 <HAL_GPIO_Init+0x25a>
 800313e:	230a      	movs	r3, #10
 8003140:	e027      	b.n	8003192 <HAL_GPIO_Init+0x25a>
 8003142:	2307      	movs	r3, #7
 8003144:	e025      	b.n	8003192 <HAL_GPIO_Init+0x25a>
 8003146:	2306      	movs	r3, #6
 8003148:	e023      	b.n	8003192 <HAL_GPIO_Init+0x25a>
 800314a:	2305      	movs	r3, #5
 800314c:	e021      	b.n	8003192 <HAL_GPIO_Init+0x25a>
 800314e:	2304      	movs	r3, #4
 8003150:	e01f      	b.n	8003192 <HAL_GPIO_Init+0x25a>
 8003152:	2303      	movs	r3, #3
 8003154:	e01d      	b.n	8003192 <HAL_GPIO_Init+0x25a>
 8003156:	2302      	movs	r3, #2
 8003158:	e01b      	b.n	8003192 <HAL_GPIO_Init+0x25a>
 800315a:	2301      	movs	r3, #1
 800315c:	e019      	b.n	8003192 <HAL_GPIO_Init+0x25a>
 800315e:	bf00      	nop
 8003160:	58000080 	.word	0x58000080
 8003164:	58024400 	.word	0x58024400
 8003168:	58000400 	.word	0x58000400
 800316c:	58020000 	.word	0x58020000
 8003170:	58020400 	.word	0x58020400
 8003174:	58020800 	.word	0x58020800
 8003178:	58020c00 	.word	0x58020c00
 800317c:	58021000 	.word	0x58021000
 8003180:	58021400 	.word	0x58021400
 8003184:	58021800 	.word	0x58021800
 8003188:	58021c00 	.word	0x58021c00
 800318c:	58022400 	.word	0x58022400
 8003190:	2300      	movs	r3, #0
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	f002 0203 	and.w	r2, r2, #3
 8003198:	0092      	lsls	r2, r2, #2
 800319a:	4093      	lsls	r3, r2
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a2:	4938      	ldr	r1, [pc, #224]	; (8003284 <HAL_GPIO_Init+0x34c>)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	3302      	adds	r3, #2
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	3301      	adds	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f ae6b 	bne.w	8002f4c <HAL_GPIO_Init+0x14>
  }
}
 8003276:	bf00      	nop
 8003278:	bf00      	nop
 800327a:	3724      	adds	r7, #36	; 0x24
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	58000400 	.word	0x58000400

08003288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
 8003294:	4613      	mov	r3, r2
 8003296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003298:	787b      	ldrb	r3, [r7, #1]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800329e:	887a      	ldrh	r2, [r7, #2]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80032a4:	e003      	b.n	80032ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	041a      	lsls	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	619a      	str	r2, [r3, #24]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_PWREx_ConfigSupply+0x70>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d00a      	beq.n	80032e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032d0:	4b16      	ldr	r3, [pc, #88]	; (800332c <HAL_PWREx_ConfigSupply+0x70>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d001      	beq.n	80032e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e01f      	b.n	8003322 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e01d      	b.n	8003322 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_PWREx_ConfigSupply+0x70>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f023 0207 	bic.w	r2, r3, #7
 80032ee:	490f      	ldr	r1, [pc, #60]	; (800332c <HAL_PWREx_ConfigSupply+0x70>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032f6:	f7fe f821 	bl	800133c <HAL_GetTick>
 80032fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032fc:	e009      	b.n	8003312 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032fe:	f7fe f81d 	bl	800133c <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800330c:	d901      	bls.n	8003312 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e007      	b.n	8003322 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_PWREx_ConfigSupply+0x70>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800331a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331e:	d1ee      	bne.n	80032fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	58024800 	.word	0x58024800

08003330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	; 0x30
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e3c8      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8087 	beq.w	800345e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003350:	4b88      	ldr	r3, [pc, #544]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800335a:	4b86      	ldr	r3, [pc, #536]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	2b10      	cmp	r3, #16
 8003364:	d007      	beq.n	8003376 <HAL_RCC_OscConfig+0x46>
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	2b18      	cmp	r3, #24
 800336a:	d110      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
 800336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d10b      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003376:	4b7f      	ldr	r3, [pc, #508]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d06c      	beq.n	800345c <HAL_RCC_OscConfig+0x12c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d168      	bne.n	800345c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e3a2      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x76>
 8003398:	4b76      	ldr	r3, [pc, #472]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a75      	ldr	r2, [pc, #468]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 800339e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	e02e      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x98>
 80033ae:	4b71      	ldr	r3, [pc, #452]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a70      	ldr	r2, [pc, #448]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80033b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b6e      	ldr	r3, [pc, #440]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6d      	ldr	r2, [pc, #436]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80033c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e01d      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0xbc>
 80033d2:	4b68      	ldr	r3, [pc, #416]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a67      	ldr	r2, [pc, #412]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80033d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b65      	ldr	r3, [pc, #404]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a64      	ldr	r2, [pc, #400]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033ec:	4b61      	ldr	r3, [pc, #388]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a60      	ldr	r2, [pc, #384]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b5e      	ldr	r3, [pc, #376]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a5d      	ldr	r2, [pc, #372]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fd ff96 	bl	800133c <HAL_GetTick>
 8003410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fd ff92 	bl	800133c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e356      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003426:	4b53      	ldr	r3, [pc, #332]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0xe4>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fd ff82 	bl	800133c <HAL_GetTick>
 8003438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fd ff7e 	bl	800133c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e342      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800344e:	4b49      	ldr	r3, [pc, #292]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x10c>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 808c 	beq.w	8003584 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346c:	4b41      	ldr	r3, [pc, #260]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003474:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003476:	4b3f      	ldr	r3, [pc, #252]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <HAL_RCC_OscConfig+0x162>
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	2b18      	cmp	r3, #24
 8003486:	d137      	bne.n	80034f8 <HAL_RCC_OscConfig+0x1c8>
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d132      	bne.n	80034f8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003492:	4b38      	ldr	r3, [pc, #224]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_RCC_OscConfig+0x17a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e314      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034aa:	4b32      	ldr	r3, [pc, #200]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 0219 	bic.w	r2, r3, #25
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	492f      	ldr	r1, [pc, #188]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fd ff3e 	bl	800133c <HAL_GetTick>
 80034c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c4:	f7fd ff3a 	bl	800133c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e2fe      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034d6:	4b27      	ldr	r3, [pc, #156]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e2:	4b24      	ldr	r3, [pc, #144]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	061b      	lsls	r3, r3, #24
 80034f0:	4920      	ldr	r1, [pc, #128]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f6:	e045      	b.n	8003584 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d026      	beq.n	800354e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003500:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 0219 	bic.w	r2, r3, #25
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4919      	ldr	r1, [pc, #100]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fd ff13 	bl	800133c <HAL_GetTick>
 8003516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351a:	f7fd ff0f 	bl	800133c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e2d3      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003538:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	490b      	ldr	r1, [pc, #44]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
 800354c:	e01a      	b.n	8003584 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a08      	ldr	r2, [pc, #32]	; (8003574 <HAL_RCC_OscConfig+0x244>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fd feef 	bl	800133c <HAL_GetTick>
 800355e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003562:	f7fd feeb 	bl	800133c <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d903      	bls.n	8003578 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e2af      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
 8003574:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003578:	4b96      	ldr	r3, [pc, #600]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ee      	bne.n	8003562 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	d06a      	beq.n	8003666 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003590:	4b90      	ldr	r3, [pc, #576]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003598:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800359a:	4b8e      	ldr	r3, [pc, #568]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d007      	beq.n	80035b6 <HAL_RCC_OscConfig+0x286>
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b18      	cmp	r3, #24
 80035aa:	d11b      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2b4>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d116      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035b6:	4b87      	ldr	r3, [pc, #540]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x29e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	2b80      	cmp	r3, #128	; 0x80
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e282      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035ce:	4b81      	ldr	r3, [pc, #516]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	061b      	lsls	r3, r3, #24
 80035dc:	497d      	ldr	r1, [pc, #500]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035e2:	e040      	b.n	8003666 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80035ec:	4b79      	ldr	r3, [pc, #484]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a78      	ldr	r2, [pc, #480]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80035f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fd fea0 	bl	800133c <HAL_GetTick>
 80035fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003600:	f7fd fe9c 	bl	800133c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e260      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003612:	4b70      	ldr	r3, [pc, #448]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800361e:	4b6d      	ldr	r3, [pc, #436]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	061b      	lsls	r3, r3, #24
 800362c:	4969      	ldr	r1, [pc, #420]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	60cb      	str	r3, [r1, #12]
 8003632:	e018      	b.n	8003666 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003634:	4b67      	ldr	r3, [pc, #412]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a66      	ldr	r2, [pc, #408]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800363a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800363e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fd fe7c 	bl	800133c <HAL_GetTick>
 8003644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003648:	f7fd fe78 	bl	800133c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e23c      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800365a:	4b5e      	ldr	r3, [pc, #376]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d036      	beq.n	80036e0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d019      	beq.n	80036ae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4b56      	ldr	r3, [pc, #344]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800367c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367e:	4a55      	ldr	r2, [pc, #340]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fd fe59 	bl	800133c <HAL_GetTick>
 800368a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368e:	f7fd fe55 	bl	800133c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e219      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036a0:	4b4c      	ldr	r3, [pc, #304]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80036a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x35e>
 80036ac:	e018      	b.n	80036e0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ae:	4b49      	ldr	r3, [pc, #292]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	4a48      	ldr	r2, [pc, #288]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fd fe3f 	bl	800133c <HAL_GetTick>
 80036be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c2:	f7fd fe3b 	bl	800133c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e1ff      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036d4:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80036d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f0      	bne.n	80036c2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0320 	and.w	r3, r3, #32
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d036      	beq.n	800375a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d019      	beq.n	8003728 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036f4:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a36      	ldr	r2, [pc, #216]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80036fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003700:	f7fd fe1c 	bl	800133c <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003708:	f7fd fe18 	bl	800133c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e1dc      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800371a:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x3d8>
 8003726:	e018      	b.n	800375a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003728:	4b2a      	ldr	r3, [pc, #168]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800372e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003732:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003734:	f7fd fe02 	bl	800133c <HAL_GetTick>
 8003738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800373c:	f7fd fdfe 	bl	800133c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1c2      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800374e:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8086 	beq.w	8003874 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003768:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_RCC_OscConfig+0x4a8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <HAL_RCC_OscConfig+0x4a8>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003772:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003774:	f7fd fde2 	bl	800133c <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fd fdde 	bl	800133c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e1a2      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_RCC_OscConfig+0x4a8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d106      	bne.n	80037b0 <HAL_RCC_OscConfig+0x480>
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	6713      	str	r3, [r2, #112]	; 0x70
 80037ae:	e032      	b.n	8003816 <HAL_RCC_OscConfig+0x4e6>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d111      	bne.n	80037dc <HAL_RCC_OscConfig+0x4ac>
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	4a05      	ldr	r2, [pc, #20]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	6713      	str	r3, [r2, #112]	; 0x70
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	4a02      	ldr	r2, [pc, #8]	; (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80037ca:	f023 0304 	bic.w	r3, r3, #4
 80037ce:	6713      	str	r3, [r2, #112]	; 0x70
 80037d0:	e021      	b.n	8003816 <HAL_RCC_OscConfig+0x4e6>
 80037d2:	bf00      	nop
 80037d4:	58024400 	.word	0x58024400
 80037d8:	58024800 	.word	0x58024800
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b05      	cmp	r3, #5
 80037e2:	d10c      	bne.n	80037fe <HAL_RCC_OscConfig+0x4ce>
 80037e4:	4b83      	ldr	r3, [pc, #524]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	4a82      	ldr	r2, [pc, #520]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80037ea:	f043 0304 	orr.w	r3, r3, #4
 80037ee:	6713      	str	r3, [r2, #112]	; 0x70
 80037f0:	4b80      	ldr	r3, [pc, #512]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	4a7f      	ldr	r2, [pc, #508]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6713      	str	r3, [r2, #112]	; 0x70
 80037fc:	e00b      	b.n	8003816 <HAL_RCC_OscConfig+0x4e6>
 80037fe:	4b7d      	ldr	r3, [pc, #500]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4a7c      	ldr	r2, [pc, #496]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	6713      	str	r3, [r2, #112]	; 0x70
 800380a:	4b7a      	ldr	r3, [pc, #488]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a79      	ldr	r2, [pc, #484]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003810:	f023 0304 	bic.w	r3, r3, #4
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d015      	beq.n	800384a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381e:	f7fd fd8d 	bl	800133c <HAL_GetTick>
 8003822:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003824:	e00a      	b.n	800383c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fd fd89 	bl	800133c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	; 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e14b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800383c:	4b6d      	ldr	r3, [pc, #436]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ee      	beq.n	8003826 <HAL_RCC_OscConfig+0x4f6>
 8003848:	e014      	b.n	8003874 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384a:	f7fd fd77 	bl	800133c <HAL_GetTick>
 800384e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003850:	e00a      	b.n	8003868 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003852:	f7fd fd73 	bl	800133c <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003860:	4293      	cmp	r3, r2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e135      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003868:	4b62      	ldr	r3, [pc, #392]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ee      	bne.n	8003852 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 812a 	beq.w	8003ad2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800387e:	4b5d      	ldr	r3, [pc, #372]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003886:	2b18      	cmp	r3, #24
 8003888:	f000 80ba 	beq.w	8003a00 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2b02      	cmp	r3, #2
 8003892:	f040 8095 	bne.w	80039c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003896:	4b57      	ldr	r3, [pc, #348]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a56      	ldr	r2, [pc, #344]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800389c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fd fd4b 	bl	800133c <HAL_GetTick>
 80038a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038aa:	f7fd fd47 	bl	800133c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e10b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038bc:	4b4d      	ldr	r3, [pc, #308]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038c8:	4b4a      	ldr	r3, [pc, #296]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80038ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038cc:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <HAL_RCC_OscConfig+0x6c8>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038d8:	0112      	lsls	r2, r2, #4
 80038da:	430a      	orrs	r2, r1
 80038dc:	4945      	ldr	r1, [pc, #276]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	628b      	str	r3, [r1, #40]	; 0x28
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f0:	3b01      	subs	r3, #1
 80038f2:	025b      	lsls	r3, r3, #9
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	3b01      	subs	r3, #1
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	3b01      	subs	r3, #1
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003912:	4938      	ldr	r1, [pc, #224]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003914:	4313      	orrs	r3, r2
 8003916:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003918:	4b36      	ldr	r3, [pc, #216]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	4a35      	ldr	r2, [pc, #212]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003924:	4b33      	ldr	r3, [pc, #204]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003928:	4b34      	ldr	r3, [pc, #208]	; (80039fc <HAL_RCC_OscConfig+0x6cc>)
 800392a:	4013      	ands	r3, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003930:	00d2      	lsls	r2, r2, #3
 8003932:	4930      	ldr	r1, [pc, #192]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003934:	4313      	orrs	r3, r2
 8003936:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003938:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	f023 020c 	bic.w	r2, r3, #12
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	492b      	ldr	r1, [pc, #172]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800394a:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	f023 0202 	bic.w	r2, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	4927      	ldr	r1, [pc, #156]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003958:	4313      	orrs	r3, r2
 800395a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003968:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003972:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003974:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800397a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800397e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003980:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	4a1b      	ldr	r2, [pc, #108]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a18      	ldr	r2, [pc, #96]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd fcd0 	bl	800133c <HAL_GetTick>
 800399c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fd fccc 	bl	800133c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e090      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x670>
 80039be:	e088      	b.n	8003ad2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80039c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fd fcb6 	bl	800133c <HAL_GetTick>
 80039d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d4:	f7fd fcb2 	bl	800133c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e076      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039e6:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x6a4>
 80039f2:	e06e      	b.n	8003ad2 <HAL_RCC_OscConfig+0x7a2>
 80039f4:	58024400 	.word	0x58024400
 80039f8:	fffffc0c 	.word	0xfffffc0c
 80039fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a00:	4b36      	ldr	r3, [pc, #216]	; (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a06:	4b35      	ldr	r3, [pc, #212]	; (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d031      	beq.n	8003a78 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f003 0203 	and.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d12a      	bne.n	8003a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d122      	bne.n	8003a78 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d11a      	bne.n	8003a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	0a5b      	lsrs	r3, r3, #9
 8003a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d111      	bne.n	8003a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	0c1b      	lsrs	r3, r3, #16
 8003a58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d108      	bne.n	8003a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	0e1b      	lsrs	r3, r3, #24
 8003a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e02b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003a7c:	4b17      	ldr	r3, [pc, #92]	; (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a80:	08db      	lsrs	r3, r3, #3
 8003a82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d01f      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	4a11      	ldr	r2, [pc, #68]	; (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a9e:	f7fd fc4d 	bl	800133c <HAL_GetTick>
 8003aa2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003aa4:	bf00      	nop
 8003aa6:	f7fd fc49 	bl	800133c <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d0f9      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_RCC_OscConfig+0x7b0>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003abe:	00d2      	lsls	r2, r2, #3
 8003ac0:	4906      	ldr	r1, [pc, #24]	; (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	4a04      	ldr	r2, [pc, #16]	; (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3730      	adds	r7, #48	; 0x30
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	58024400 	.word	0x58024400
 8003ae0:	ffff0007 	.word	0xffff0007

08003ae4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e19c      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003af8:	4b8a      	ldr	r3, [pc, #552]	; (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d910      	bls.n	8003b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b06:	4b87      	ldr	r3, [pc, #540]	; (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 020f 	bic.w	r2, r3, #15
 8003b0e:	4985      	ldr	r1, [pc, #532]	; (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b83      	ldr	r3, [pc, #524]	; (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e184      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d010      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	4b7b      	ldr	r3, [pc, #492]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d908      	bls.n	8003b56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b44:	4b78      	ldr	r3, [pc, #480]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	4975      	ldr	r1, [pc, #468]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d010      	beq.n	8003b84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	4b70      	ldr	r3, [pc, #448]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d908      	bls.n	8003b84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b72:	4b6d      	ldr	r3, [pc, #436]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	496a      	ldr	r1, [pc, #424]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d010      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699a      	ldr	r2, [r3, #24]
 8003b94:	4b64      	ldr	r3, [pc, #400]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d908      	bls.n	8003bb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ba0:	4b61      	ldr	r3, [pc, #388]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	495e      	ldr	r1, [pc, #376]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d010      	beq.n	8003be0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69da      	ldr	r2, [r3, #28]
 8003bc2:	4b59      	ldr	r3, [pc, #356]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d908      	bls.n	8003be0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bce:	4b56      	ldr	r3, [pc, #344]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	4953      	ldr	r1, [pc, #332]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	4b4d      	ldr	r3, [pc, #308]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d908      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfc:	4b4a      	ldr	r3, [pc, #296]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f023 020f 	bic.w	r2, r3, #15
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4947      	ldr	r1, [pc, #284]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d055      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c1a:	4b43      	ldr	r3, [pc, #268]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	4940      	ldr	r1, [pc, #256]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c34:	4b3c      	ldr	r3, [pc, #240]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d121      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0f6      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c4c:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d115      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0ea      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c64:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0de      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c74:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0d6      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c84:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f023 0207 	bic.w	r2, r3, #7
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	4925      	ldr	r1, [pc, #148]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c96:	f7fd fb51 	bl	800133c <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c9e:	f7fd fb4d 	bl	800133c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e0be      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb4:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d1eb      	bne.n	8003c9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d010      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d208      	bcs.n	8003cf4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce2:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f023 020f 	bic.w	r2, r3, #15
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	490e      	ldr	r1, [pc, #56]	; (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d214      	bcs.n	8003d2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 020f 	bic.w	r2, r3, #15
 8003d0a:	4906      	ldr	r1, [pc, #24]	; (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d12:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e086      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
 8003d24:	52002000 	.word	0x52002000
 8003d28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d010      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d208      	bcs.n	8003d5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d48:	4b3c      	ldr	r3, [pc, #240]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	4939      	ldr	r1, [pc, #228]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d010      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d208      	bcs.n	8003d88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d76:	4b31      	ldr	r3, [pc, #196]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	492e      	ldr	r1, [pc, #184]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d010      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	4b28      	ldr	r3, [pc, #160]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d208      	bcs.n	8003db6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003da4:	4b25      	ldr	r3, [pc, #148]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	4922      	ldr	r1, [pc, #136]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d010      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d208      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003dd2:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4917      	ldr	r1, [pc, #92]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003de4:	f000 f834 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	4912      	ldr	r1, [pc, #72]	; (8003e40 <HAL_RCC_ClockConfig+0x35c>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003e00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	4a0d      	ldr	r2, [pc, #52]	; (8003e40 <HAL_RCC_ClockConfig+0x35c>)
 8003e0c:	5cd3      	ldrb	r3, [r2, r3]
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	fa22 f303 	lsr.w	r3, r2, r3
 8003e18:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <HAL_RCC_ClockConfig+0x360>)
 8003e1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e1c:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <HAL_RCC_ClockConfig+0x364>)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <HAL_RCC_ClockConfig+0x368>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fd fa3e 	bl	80012a8 <HAL_InitTick>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	58024400 	.word	0x58024400
 8003e40:	08007738 	.word	0x08007738
 8003e44:	24000004 	.word	0x24000004
 8003e48:	24000000 	.word	0x24000000
 8003e4c:	24000008 	.word	0x24000008

08003e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e56:	4bb3      	ldr	r3, [pc, #716]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e5e:	2b18      	cmp	r3, #24
 8003e60:	f200 8155 	bhi.w	800410e <HAL_RCC_GetSysClockFreq+0x2be>
 8003e64:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003ed1 	.word	0x08003ed1
 8003e70:	0800410f 	.word	0x0800410f
 8003e74:	0800410f 	.word	0x0800410f
 8003e78:	0800410f 	.word	0x0800410f
 8003e7c:	0800410f 	.word	0x0800410f
 8003e80:	0800410f 	.word	0x0800410f
 8003e84:	0800410f 	.word	0x0800410f
 8003e88:	0800410f 	.word	0x0800410f
 8003e8c:	08003ef7 	.word	0x08003ef7
 8003e90:	0800410f 	.word	0x0800410f
 8003e94:	0800410f 	.word	0x0800410f
 8003e98:	0800410f 	.word	0x0800410f
 8003e9c:	0800410f 	.word	0x0800410f
 8003ea0:	0800410f 	.word	0x0800410f
 8003ea4:	0800410f 	.word	0x0800410f
 8003ea8:	0800410f 	.word	0x0800410f
 8003eac:	08003efd 	.word	0x08003efd
 8003eb0:	0800410f 	.word	0x0800410f
 8003eb4:	0800410f 	.word	0x0800410f
 8003eb8:	0800410f 	.word	0x0800410f
 8003ebc:	0800410f 	.word	0x0800410f
 8003ec0:	0800410f 	.word	0x0800410f
 8003ec4:	0800410f 	.word	0x0800410f
 8003ec8:	0800410f 	.word	0x0800410f
 8003ecc:	08003f03 	.word	0x08003f03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ed0:	4b94      	ldr	r3, [pc, #592]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003edc:	4b91      	ldr	r3, [pc, #580]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	08db      	lsrs	r3, r3, #3
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	4a90      	ldr	r2, [pc, #576]	; (8004128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003eee:	e111      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ef0:	4b8d      	ldr	r3, [pc, #564]	; (8004128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ef2:	61bb      	str	r3, [r7, #24]
      break;
 8003ef4:	e10e      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003ef6:	4b8d      	ldr	r3, [pc, #564]	; (800412c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ef8:	61bb      	str	r3, [r7, #24]
      break;
 8003efa:	e10b      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003efc:	4b8c      	ldr	r3, [pc, #560]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003efe:	61bb      	str	r3, [r7, #24]
      break;
 8003f00:	e108      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f02:	4b88      	ldr	r3, [pc, #544]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003f0c:	4b85      	ldr	r3, [pc, #532]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f18:	4b82      	ldr	r3, [pc, #520]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003f22:	4b80      	ldr	r3, [pc, #512]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f26:	08db      	lsrs	r3, r3, #3
 8003f28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80e1 	beq.w	8004108 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	f000 8083 	beq.w	8004054 <HAL_RCC_GetSysClockFreq+0x204>
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	f200 80a1 	bhi.w	8004098 <HAL_RCC_GetSysClockFreq+0x248>
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x114>
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d056      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f62:	e099      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f64:	4b6f      	ldr	r3, [pc, #444]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d02d      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f70:	4b6c      	ldr	r3, [pc, #432]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	08db      	lsrs	r3, r3, #3
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	4a6b      	ldr	r2, [pc, #428]	; (8004128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9a:	4b62      	ldr	r3, [pc, #392]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003fca:	e087      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004138 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fde:	4b51      	ldr	r3, [pc, #324]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ff2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800400e:	e065      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800413c <HAL_RCC_GetSysClockFreq+0x2ec>
 800401e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004022:	4b40      	ldr	r3, [pc, #256]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004032:	ed97 6a02 	vldr	s12, [r7, #8]
 8004036:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800403a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800403e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800404a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004052:	e043      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004140 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004066:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004076:	ed97 6a02 	vldr	s12, [r7, #8]
 800407a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800407e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800408a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800408e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004096:	e021      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800413c <HAL_RCC_GetSysClockFreq+0x2ec>
 80040a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040aa:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80040be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004134 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80040dc:	4b11      	ldr	r3, [pc, #68]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	0a5b      	lsrs	r3, r3, #9
 80040e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e6:	3301      	adds	r3, #1
 80040e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80040f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004100:	ee17 3a90 	vmov	r3, s15
 8004104:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004106:	e005      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	61bb      	str	r3, [r7, #24]
      break;
 800410c:	e002      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800410e:	4b07      	ldr	r3, [pc, #28]	; (800412c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004110:	61bb      	str	r3, [r7, #24]
      break;
 8004112:	bf00      	nop
  }

  return sysclockfreq;
 8004114:	69bb      	ldr	r3, [r7, #24]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3724      	adds	r7, #36	; 0x24
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	58024400 	.word	0x58024400
 8004128:	03d09000 	.word	0x03d09000
 800412c:	003d0900 	.word	0x003d0900
 8004130:	017d7840 	.word	0x017d7840
 8004134:	46000000 	.word	0x46000000
 8004138:	4c742400 	.word	0x4c742400
 800413c:	4a742400 	.word	0x4a742400
 8004140:	4bbebc20 	.word	0x4bbebc20

08004144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800414a:	f7ff fe81 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 800414e:	4602      	mov	r2, r0
 8004150:	4b10      	ldr	r3, [pc, #64]	; (8004194 <HAL_RCC_GetHCLKFreq+0x50>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	490f      	ldr	r1, [pc, #60]	; (8004198 <HAL_RCC_GetHCLKFreq+0x54>)
 800415c:	5ccb      	ldrb	r3, [r1, r3]
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	fa22 f303 	lsr.w	r3, r2, r3
 8004166:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_RCC_GetHCLKFreq+0x50>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	4a09      	ldr	r2, [pc, #36]	; (8004198 <HAL_RCC_GetHCLKFreq+0x54>)
 8004172:	5cd3      	ldrb	r3, [r2, r3]
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	fa22 f303 	lsr.w	r3, r2, r3
 800417e:	4a07      	ldr	r2, [pc, #28]	; (800419c <HAL_RCC_GetHCLKFreq+0x58>)
 8004180:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004182:	4a07      	ldr	r2, [pc, #28]	; (80041a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <HAL_RCC_GetHCLKFreq+0x58>)
 800418a:	681b      	ldr	r3, [r3, #0]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	58024400 	.word	0x58024400
 8004198:	08007738 	.word	0x08007738
 800419c:	24000004 	.word	0x24000004
 80041a0:	24000000 	.word	0x24000000

080041a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80041a8:	f7ff ffcc 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	4904      	ldr	r1, [pc, #16]	; (80041cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	58024400 	.word	0x58024400
 80041cc:	08007738 	.word	0x08007738

080041d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d4:	b0c6      	sub	sp, #280	; 0x118
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041dc:	2300      	movs	r3, #0
 80041de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041e2:	2300      	movs	r3, #0
 80041e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80041f4:	2500      	movs	r5, #0
 80041f6:	ea54 0305 	orrs.w	r3, r4, r5
 80041fa:	d049      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80041fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004202:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004206:	d02f      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004208:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800420c:	d828      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800420e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004212:	d01a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004218:	d822      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800421e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004222:	d007      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004224:	e01c      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004226:	4bab      	ldr	r3, [pc, #684]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	4aaa      	ldr	r2, [pc, #680]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800422c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004230:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004232:	e01a      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004238:	3308      	adds	r3, #8
 800423a:	2102      	movs	r1, #2
 800423c:	4618      	mov	r0, r3
 800423e:	f002 fa49 	bl	80066d4 <RCCEx_PLL2_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004248:	e00f      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800424a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800424e:	3328      	adds	r3, #40	; 0x28
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f002 faf0 	bl	8006838 <RCCEx_PLL3_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800425e:	e004      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004266:	e000      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800426a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004272:	4b98      	ldr	r3, [pc, #608]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004276:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800427a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800427e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004280:	4a94      	ldr	r2, [pc, #592]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004282:	430b      	orrs	r3, r1
 8004284:	6513      	str	r3, [r2, #80]	; 0x50
 8004286:	e003      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800428c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800429c:	f04f 0900 	mov.w	r9, #0
 80042a0:	ea58 0309 	orrs.w	r3, r8, r9
 80042a4:	d047      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80042a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d82a      	bhi.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80042b0:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080042cd 	.word	0x080042cd
 80042bc:	080042db 	.word	0x080042db
 80042c0:	080042f1 	.word	0x080042f1
 80042c4:	0800430f 	.word	0x0800430f
 80042c8:	0800430f 	.word	0x0800430f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042cc:	4b81      	ldr	r3, [pc, #516]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	4a80      	ldr	r2, [pc, #512]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042d8:	e01a      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042de:	3308      	adds	r3, #8
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f002 f9f6 	bl	80066d4 <RCCEx_PLL2_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042ee:	e00f      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042f4:	3328      	adds	r3, #40	; 0x28
 80042f6:	2100      	movs	r1, #0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f002 fa9d 	bl	8006838 <RCCEx_PLL3_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004304:	e004      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800430c:	e000      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800430e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004310:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004318:	4b6e      	ldr	r3, [pc, #440]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800431a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431c:	f023 0107 	bic.w	r1, r3, #7
 8004320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004326:	4a6b      	ldr	r2, [pc, #428]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004328:	430b      	orrs	r3, r1
 800432a:	6513      	str	r3, [r2, #80]	; 0x50
 800432c:	e003      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004332:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8004342:	f04f 0b00 	mov.w	fp, #0
 8004346:	ea5a 030b 	orrs.w	r3, sl, fp
 800434a:	d05b      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800434c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004350:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004354:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004358:	d03b      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800435a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800435e:	d834      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004360:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004364:	d037      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004366:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800436a:	d82e      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800436c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004370:	d033      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004372:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004376:	d828      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800437c:	d01a      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800437e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004382:	d822      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004388:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800438c:	d007      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800438e:	e01c      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004390:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	4a4f      	ldr	r2, [pc, #316]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800439a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800439c:	e01e      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800439e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043a2:	3308      	adds	r3, #8
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f002 f994 	bl	80066d4 <RCCEx_PLL2_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80043b2:	e013      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043b8:	3328      	adds	r3, #40	; 0x28
 80043ba:	2100      	movs	r1, #0
 80043bc:	4618      	mov	r0, r3
 80043be:	f002 fa3b 	bl	8006838 <RCCEx_PLL3_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043c8:	e008      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80043d0:	e004      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80043d2:	bf00      	nop
 80043d4:	e002      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80043da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10b      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80043e4:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80043ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043f4:	4a37      	ldr	r2, [pc, #220]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043f6:	430b      	orrs	r3, r1
 80043f8:	6593      	str	r3, [r2, #88]	; 0x58
 80043fa:	e003      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004400:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004410:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004414:	2300      	movs	r3, #0
 8004416:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800441a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800441e:	460b      	mov	r3, r1
 8004420:	4313      	orrs	r3, r2
 8004422:	d05d      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004428:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800442c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004430:	d03b      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004432:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004436:	d834      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800443c:	d037      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800443e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004442:	d82e      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004444:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004448:	d033      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800444a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800444e:	d828      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004450:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004454:	d01a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004456:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800445a:	d822      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004464:	d007      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004466:	e01c      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004468:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	4a19      	ldr	r2, [pc, #100]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800446e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004474:	e01e      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800447a:	3308      	adds	r3, #8
 800447c:	2100      	movs	r1, #0
 800447e:	4618      	mov	r0, r3
 8004480:	f002 f928 	bl	80066d4 <RCCEx_PLL2_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800448a:	e013      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800448c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004490:	3328      	adds	r3, #40	; 0x28
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f002 f9cf 	bl	8006838 <RCCEx_PLL3_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044a0:	e008      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80044a8:	e004      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80044b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10d      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80044c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044cc:	4a01      	ldr	r2, [pc, #4]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044ce:	430b      	orrs	r3, r1
 80044d0:	6593      	str	r3, [r2, #88]	; 0x58
 80044d2:	e005      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80044d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80044e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80044ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80044f0:	2300      	movs	r3, #0
 80044f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80044f6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4313      	orrs	r3, r2
 80044fe:	d03a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004506:	2b30      	cmp	r3, #48	; 0x30
 8004508:	d01f      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800450a:	2b30      	cmp	r3, #48	; 0x30
 800450c:	d819      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800450e:	2b20      	cmp	r3, #32
 8004510:	d00c      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004512:	2b20      	cmp	r3, #32
 8004514:	d815      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d019      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800451a:	2b10      	cmp	r3, #16
 800451c:	d111      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800451e:	4baa      	ldr	r3, [pc, #680]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	4aa9      	ldr	r2, [pc, #676]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800452a:	e011      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800452c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004530:	3308      	adds	r3, #8
 8004532:	2102      	movs	r1, #2
 8004534:	4618      	mov	r0, r3
 8004536:	f002 f8cd 	bl	80066d4 <RCCEx_PLL2_Config>
 800453a:	4603      	mov	r3, r0
 800453c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004540:	e006      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004548:	e002      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800454e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004550:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004558:	4b9b      	ldr	r3, [pc, #620]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800455a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	4a98      	ldr	r2, [pc, #608]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004568:	430b      	orrs	r3, r1
 800456a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800456c:	e003      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004572:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004582:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004586:	2300      	movs	r3, #0
 8004588:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800458c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004590:	460b      	mov	r3, r1
 8004592:	4313      	orrs	r3, r2
 8004594:	d051      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800459a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045a0:	d035      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80045a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045a6:	d82e      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80045a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045ac:	d031      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80045ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045b2:	d828      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80045b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b8:	d01a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80045ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045be:	d822      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80045c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c8:	d007      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80045ca:	e01c      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045cc:	4b7e      	ldr	r3, [pc, #504]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	4a7d      	ldr	r2, [pc, #500]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80045d8:	e01c      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045de:	3308      	adds	r3, #8
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f002 f876 	bl	80066d4 <RCCEx_PLL2_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80045ee:	e011      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f4:	3328      	adds	r3, #40	; 0x28
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f002 f91d 	bl	8006838 <RCCEx_PLL3_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004604:	e006      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800460c:	e002      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800460e:	bf00      	nop
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004614:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800461c:	4b6a      	ldr	r3, [pc, #424]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800461e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004620:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462a:	4a67      	ldr	r2, [pc, #412]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800462c:	430b      	orrs	r3, r1
 800462e:	6513      	str	r3, [r2, #80]	; 0x50
 8004630:	e003      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004632:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004636:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800463a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004646:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800464a:	2300      	movs	r3, #0
 800464c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004650:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004654:	460b      	mov	r3, r1
 8004656:	4313      	orrs	r3, r2
 8004658:	d053      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800465a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004664:	d033      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004666:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800466a:	d82c      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800466c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004670:	d02f      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004672:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004676:	d826      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004678:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800467c:	d02b      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800467e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004682:	d820      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004688:	d012      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800468a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800468e:	d81a      	bhi.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d022      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004698:	d115      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800469a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800469e:	3308      	adds	r3, #8
 80046a0:	2101      	movs	r1, #1
 80046a2:	4618      	mov	r0, r3
 80046a4:	f002 f816 	bl	80066d4 <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046ae:	e015      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046b4:	3328      	adds	r3, #40	; 0x28
 80046b6:	2101      	movs	r1, #1
 80046b8:	4618      	mov	r0, r3
 80046ba:	f002 f8bd 	bl	8006838 <RCCEx_PLL3_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046c4:	e00a      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80046cc:	e006      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80046ce:	bf00      	nop
 80046d0:	e004      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80046d2:	bf00      	nop
 80046d4:	e002      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80046d6:	bf00      	nop
 80046d8:	e000      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80046da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80046e4:	4b38      	ldr	r3, [pc, #224]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80046ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f2:	4a35      	ldr	r2, [pc, #212]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6513      	str	r3, [r2, #80]	; 0x50
 80046f8:	e003      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800470e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004712:	2300      	movs	r3, #0
 8004714:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004718:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800471c:	460b      	mov	r3, r1
 800471e:	4313      	orrs	r3, r2
 8004720:	d058      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004726:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800472a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800472e:	d033      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004734:	d82c      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473a:	d02f      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004740:	d826      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004742:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004746:	d02b      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004748:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800474c:	d820      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800474e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004752:	d012      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004758:	d81a      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800475a:	2b00      	cmp	r3, #0
 800475c:	d022      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800475e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004762:	d115      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004768:	3308      	adds	r3, #8
 800476a:	2101      	movs	r1, #1
 800476c:	4618      	mov	r0, r3
 800476e:	f001 ffb1 	bl	80066d4 <RCCEx_PLL2_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004778:	e015      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800477a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800477e:	3328      	adds	r3, #40	; 0x28
 8004780:	2101      	movs	r1, #1
 8004782:	4618      	mov	r0, r3
 8004784:	f002 f858 	bl	8006838 <RCCEx_PLL3_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800478e:	e00a      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004796:	e006      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004798:	bf00      	nop
 800479a:	e004      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800479c:	bf00      	nop
 800479e:	e002      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80047a0:	bf00      	nop
 80047a2:	e000      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80047a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10e      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80047b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047be:	4a02      	ldr	r2, [pc, #8]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047c0:	430b      	orrs	r3, r1
 80047c2:	6593      	str	r3, [r2, #88]	; 0x58
 80047c4:	e006      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80047c6:	bf00      	nop
 80047c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80047e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047e4:	2300      	movs	r3, #0
 80047e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4313      	orrs	r3, r2
 80047f2:	d037      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80047f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047fe:	d00e      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004804:	d816      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d018      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800480a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800480e:	d111      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004810:	4bc4      	ldr	r3, [pc, #784]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	4ac3      	ldr	r2, [pc, #780]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800481a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800481c:	e00f      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800481e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004822:	3308      	adds	r3, #8
 8004824:	2101      	movs	r1, #1
 8004826:	4618      	mov	r0, r3
 8004828:	f001 ff54 	bl	80066d4 <RCCEx_PLL2_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004832:	e004      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800483a:	e000      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800483c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800483e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004846:	4bb7      	ldr	r3, [pc, #732]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800484e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004854:	4ab3      	ldr	r2, [pc, #716]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004856:	430b      	orrs	r3, r1
 8004858:	6513      	str	r3, [r2, #80]	; 0x50
 800485a:	e003      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004860:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004870:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004874:	2300      	movs	r3, #0
 8004876:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800487a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800487e:	460b      	mov	r3, r1
 8004880:	4313      	orrs	r3, r2
 8004882:	d039      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488a:	2b03      	cmp	r3, #3
 800488c:	d81c      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800488e:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	080048d1 	.word	0x080048d1
 8004898:	080048a5 	.word	0x080048a5
 800489c:	080048b3 	.word	0x080048b3
 80048a0:	080048d1 	.word	0x080048d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a4:	4b9f      	ldr	r3, [pc, #636]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4a9e      	ldr	r2, [pc, #632]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80048b0:	e00f      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048b6:	3308      	adds	r3, #8
 80048b8:	2102      	movs	r1, #2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 ff0a 	bl	80066d4 <RCCEx_PLL2_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80048c6:	e004      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80048ce:	e000      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80048d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80048da:	4b92      	ldr	r3, [pc, #584]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048de:	f023 0103 	bic.w	r1, r3, #3
 80048e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	4a8e      	ldr	r2, [pc, #568]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048ea:	430b      	orrs	r3, r1
 80048ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048ee:	e003      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004904:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004908:	2300      	movs	r3, #0
 800490a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800490e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004912:	460b      	mov	r3, r1
 8004914:	4313      	orrs	r3, r2
 8004916:	f000 8099 	beq.w	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800491a:	4b83      	ldr	r3, [pc, #524]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a82      	ldr	r2, [pc, #520]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004924:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004926:	f7fc fd09 	bl	800133c <HAL_GetTick>
 800492a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800492e:	e00b      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004930:	f7fc fd04 	bl	800133c <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b64      	cmp	r3, #100	; 0x64
 800493e:	d903      	bls.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004946:	e005      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004948:	4b77      	ldr	r3, [pc, #476]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0ed      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004954:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004958:	2b00      	cmp	r3, #0
 800495a:	d173      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800495c:	4b71      	ldr	r3, [pc, #452]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800495e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004964:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004968:	4053      	eors	r3, r2
 800496a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496e:	2b00      	cmp	r3, #0
 8004970:	d015      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004972:	4b6c      	ldr	r3, [pc, #432]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800497e:	4b69      	ldr	r3, [pc, #420]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	4a68      	ldr	r2, [pc, #416]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004988:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800498a:	4b66      	ldr	r3, [pc, #408]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	4a65      	ldr	r2, [pc, #404]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004994:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004996:	4a63      	ldr	r2, [pc, #396]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800499e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049aa:	d118      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fc fcc6 	bl	800133c <HAL_GetTick>
 80049b0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049b4:	e00d      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fc fcc1 	bl	800133c <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80049c0:	1ad2      	subs	r2, r2, r3
 80049c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d903      	bls.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80049d0:	e005      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049d2:	4b54      	ldr	r3, [pc, #336]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0eb      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80049de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d129      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049f6:	d10e      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80049f8:	4b4a      	ldr	r3, [pc, #296]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a08:	091a      	lsrs	r2, r3, #4
 8004a0a:	4b48      	ldr	r3, [pc, #288]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	4a45      	ldr	r2, [pc, #276]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6113      	str	r3, [r2, #16]
 8004a14:	e005      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004a16:	4b43      	ldr	r3, [pc, #268]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	4a42      	ldr	r2, [pc, #264]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a20:	6113      	str	r3, [r2, #16]
 8004a22:	4b40      	ldr	r3, [pc, #256]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a24:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a32:	4a3c      	ldr	r2, [pc, #240]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6713      	str	r3, [r2, #112]	; 0x70
 8004a38:	e008      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a3e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8004a42:	e003      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f002 0301 	and.w	r3, r2, #1
 8004a58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004a66:	460b      	mov	r3, r1
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f000 808f 	beq.w	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a74:	2b28      	cmp	r3, #40	; 0x28
 8004a76:	d871      	bhi.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004a78:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004b65 	.word	0x08004b65
 8004a84:	08004b5d 	.word	0x08004b5d
 8004a88:	08004b5d 	.word	0x08004b5d
 8004a8c:	08004b5d 	.word	0x08004b5d
 8004a90:	08004b5d 	.word	0x08004b5d
 8004a94:	08004b5d 	.word	0x08004b5d
 8004a98:	08004b5d 	.word	0x08004b5d
 8004a9c:	08004b5d 	.word	0x08004b5d
 8004aa0:	08004b31 	.word	0x08004b31
 8004aa4:	08004b5d 	.word	0x08004b5d
 8004aa8:	08004b5d 	.word	0x08004b5d
 8004aac:	08004b5d 	.word	0x08004b5d
 8004ab0:	08004b5d 	.word	0x08004b5d
 8004ab4:	08004b5d 	.word	0x08004b5d
 8004ab8:	08004b5d 	.word	0x08004b5d
 8004abc:	08004b5d 	.word	0x08004b5d
 8004ac0:	08004b47 	.word	0x08004b47
 8004ac4:	08004b5d 	.word	0x08004b5d
 8004ac8:	08004b5d 	.word	0x08004b5d
 8004acc:	08004b5d 	.word	0x08004b5d
 8004ad0:	08004b5d 	.word	0x08004b5d
 8004ad4:	08004b5d 	.word	0x08004b5d
 8004ad8:	08004b5d 	.word	0x08004b5d
 8004adc:	08004b5d 	.word	0x08004b5d
 8004ae0:	08004b65 	.word	0x08004b65
 8004ae4:	08004b5d 	.word	0x08004b5d
 8004ae8:	08004b5d 	.word	0x08004b5d
 8004aec:	08004b5d 	.word	0x08004b5d
 8004af0:	08004b5d 	.word	0x08004b5d
 8004af4:	08004b5d 	.word	0x08004b5d
 8004af8:	08004b5d 	.word	0x08004b5d
 8004afc:	08004b5d 	.word	0x08004b5d
 8004b00:	08004b65 	.word	0x08004b65
 8004b04:	08004b5d 	.word	0x08004b5d
 8004b08:	08004b5d 	.word	0x08004b5d
 8004b0c:	08004b5d 	.word	0x08004b5d
 8004b10:	08004b5d 	.word	0x08004b5d
 8004b14:	08004b5d 	.word	0x08004b5d
 8004b18:	08004b5d 	.word	0x08004b5d
 8004b1c:	08004b5d 	.word	0x08004b5d
 8004b20:	08004b65 	.word	0x08004b65
 8004b24:	58024400 	.word	0x58024400
 8004b28:	58024800 	.word	0x58024800
 8004b2c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b34:	3308      	adds	r3, #8
 8004b36:	2101      	movs	r1, #1
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 fdcb 	bl	80066d4 <RCCEx_PLL2_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b44:	e00f      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b4a:	3328      	adds	r3, #40	; 0x28
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 fe72 	bl	8006838 <RCCEx_PLL3_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b5a:	e004      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b62:	e000      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b6e:	4bbf      	ldr	r3, [pc, #764]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b7c:	4abb      	ldr	r2, [pc, #748]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	6553      	str	r3, [r2, #84]	; 0x54
 8004b82:	e003      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f002 0302 	and.w	r3, r2, #2
 8004b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ba2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	d041      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb2:	2b05      	cmp	r3, #5
 8004bb4:	d824      	bhi.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004bb6:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004c09 	.word	0x08004c09
 8004bc0:	08004bd5 	.word	0x08004bd5
 8004bc4:	08004beb 	.word	0x08004beb
 8004bc8:	08004c09 	.word	0x08004c09
 8004bcc:	08004c09 	.word	0x08004c09
 8004bd0:	08004c09 	.word	0x08004c09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bd8:	3308      	adds	r3, #8
 8004bda:	2101      	movs	r1, #1
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f001 fd79 	bl	80066d4 <RCCEx_PLL2_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004be8:	e00f      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bee:	3328      	adds	r3, #40	; 0x28
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 fe20 	bl	8006838 <RCCEx_PLL3_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004bfe:	e004      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c06:	e000      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c12:	4b96      	ldr	r3, [pc, #600]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	f023 0107 	bic.w	r1, r3, #7
 8004c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c20:	4a92      	ldr	r2, [pc, #584]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c22:	430b      	orrs	r3, r1
 8004c24:	6553      	str	r3, [r2, #84]	; 0x54
 8004c26:	e003      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	f002 0304 	and.w	r3, r2, #4
 8004c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c40:	2300      	movs	r3, #0
 8004c42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c46:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	d044      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	d825      	bhi.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004c5c:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004cb1 	.word	0x08004cb1
 8004c68:	08004c7d 	.word	0x08004c7d
 8004c6c:	08004c93 	.word	0x08004c93
 8004c70:	08004cb1 	.word	0x08004cb1
 8004c74:	08004cb1 	.word	0x08004cb1
 8004c78:	08004cb1 	.word	0x08004cb1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c80:	3308      	adds	r3, #8
 8004c82:	2101      	movs	r1, #1
 8004c84:	4618      	mov	r0, r3
 8004c86:	f001 fd25 	bl	80066d4 <RCCEx_PLL2_Config>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c90:	e00f      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c96:	3328      	adds	r3, #40	; 0x28
 8004c98:	2101      	movs	r1, #1
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 fdcc 	bl	8006838 <RCCEx_PLL3_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ca6:	e004      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004cae:	e000      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10b      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cba:	4b6c      	ldr	r3, [pc, #432]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbe:	f023 0107 	bic.w	r1, r3, #7
 8004cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	4a68      	ldr	r2, [pc, #416]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6593      	str	r3, [r2, #88]	; 0x58
 8004cd0:	e003      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cd6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f002 0320 	and.w	r3, r2, #32
 8004ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cea:	2300      	movs	r3, #0
 8004cec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004cf0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	d055      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d06:	d033      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d0c:	d82c      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d12:	d02f      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d18:	d826      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d1e:	d02b      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004d20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d24:	d820      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d2a:	d012      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d30:	d81a      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d022      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004d36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d3a:	d115      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d40:	3308      	adds	r3, #8
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 fcc5 	bl	80066d4 <RCCEx_PLL2_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d50:	e015      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d56:	3328      	adds	r3, #40	; 0x28
 8004d58:	2102      	movs	r1, #2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 fd6c 	bl	8006838 <RCCEx_PLL3_Config>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d66:	e00a      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d6e:	e006      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004d70:	bf00      	nop
 8004d72:	e004      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004d74:	bf00      	nop
 8004d76:	e002      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004d78:	bf00      	nop
 8004d7a:	e000      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10b      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d86:	4b39      	ldr	r3, [pc, #228]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d96:	4a35      	ldr	r2, [pc, #212]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	6553      	str	r3, [r2, #84]	; 0x54
 8004d9c:	e003      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004da2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004db2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004db6:	2300      	movs	r3, #0
 8004db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dbc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	d058      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004dd2:	d033      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004dd4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004dd8:	d82c      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dde:	d02f      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de4:	d826      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004de6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dea:	d02b      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004df0:	d820      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df6:	d012      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfc:	d81a      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d022      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e06:	d115      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f001 fc5f 	bl	80066d4 <RCCEx_PLL2_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e1c:	e015      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e22:	3328      	adds	r3, #40	; 0x28
 8004e24:	2102      	movs	r1, #2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f001 fd06 	bl	8006838 <RCCEx_PLL3_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e32:	e00a      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004e3a:	e006      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004e3c:	bf00      	nop
 8004e3e:	e004      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004e40:	bf00      	nop
 8004e42:	e002      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004e44:	bf00      	nop
 8004e46:	e000      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10e      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e56:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e62:	4a02      	ldr	r2, [pc, #8]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e64:	430b      	orrs	r3, r1
 8004e66:	6593      	str	r3, [r2, #88]	; 0x58
 8004e68:	e006      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004e6a:	bf00      	nop
 8004e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004e84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e8e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004e92:	460b      	mov	r3, r1
 8004e94:	4313      	orrs	r3, r2
 8004e96:	d055      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ea0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ea4:	d033      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004ea6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004eaa:	d82c      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb0:	d02f      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb6:	d826      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004eb8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ebc:	d02b      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004ebe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ec2:	d820      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ec8:	d012      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004eca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ece:	d81a      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d022      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed8:	d115      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ede:	3308      	adds	r3, #8
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f001 fbf6 	bl	80066d4 <RCCEx_PLL2_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004eee:	e015      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef4:	3328      	adds	r3, #40	; 0x28
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 fc9d 	bl	8006838 <RCCEx_PLL3_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f04:	e00a      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f0c:	e006      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004f0e:	bf00      	nop
 8004f10:	e004      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10b      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f24:	4ba0      	ldr	r3, [pc, #640]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f28:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f34:	4a9c      	ldr	r2, [pc, #624]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f36:	430b      	orrs	r3, r1
 8004f38:	6593      	str	r3, [r2, #88]	; 0x58
 8004f3a:	e003      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f002 0308 	and.w	r3, r2, #8
 8004f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f54:	2300      	movs	r3, #0
 8004f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f5a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4313      	orrs	r3, r2
 8004f62:	d01e      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f76:	3328      	adds	r3, #40	; 0x28
 8004f78:	2102      	movs	r1, #2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f001 fc5c 	bl	8006838 <RCCEx_PLL3_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004f8c:	4b86      	ldr	r3, [pc, #536]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9c:	4a82      	ldr	r2, [pc, #520]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f002 0310 	and.w	r3, r2, #16
 8004fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fb8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	d01e      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fce:	d10c      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd4:	3328      	adds	r3, #40	; 0x28
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 fc2d 	bl	8006838 <RCCEx_PLL3_Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fea:	4b6f      	ldr	r3, [pc, #444]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffa:	4a6b      	ldr	r2, [pc, #428]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800500c:	67bb      	str	r3, [r7, #120]	; 0x78
 800500e:	2300      	movs	r3, #0
 8005010:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005012:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005016:	460b      	mov	r3, r1
 8005018:	4313      	orrs	r3, r2
 800501a:	d03e      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800501c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005020:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005028:	d022      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800502a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800502e:	d81b      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005038:	d00b      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800503a:	e015      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800503c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005040:	3308      	adds	r3, #8
 8005042:	2100      	movs	r1, #0
 8005044:	4618      	mov	r0, r3
 8005046:	f001 fb45 	bl	80066d4 <RCCEx_PLL2_Config>
 800504a:	4603      	mov	r3, r0
 800504c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005050:	e00f      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005056:	3328      	adds	r3, #40	; 0x28
 8005058:	2102      	movs	r1, #2
 800505a:	4618      	mov	r0, r3
 800505c:	f001 fbec 	bl	8006838 <RCCEx_PLL3_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005066:	e004      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800506e:	e000      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005072:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10b      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800507a:	4b4b      	ldr	r3, [pc, #300]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005086:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800508a:	4a47      	ldr	r2, [pc, #284]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800508c:	430b      	orrs	r3, r1
 800508e:	6593      	str	r3, [r2, #88]	; 0x58
 8005090:	e003      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005092:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005096:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800509a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80050a6:	673b      	str	r3, [r7, #112]	; 0x70
 80050a8:	2300      	movs	r3, #0
 80050aa:	677b      	str	r3, [r7, #116]	; 0x74
 80050ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80050b0:	460b      	mov	r3, r1
 80050b2:	4313      	orrs	r3, r2
 80050b4:	d03b      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80050b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050c2:	d01f      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80050c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050c8:	d818      	bhi.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80050ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ce:	d003      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80050d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050d4:	d007      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80050d6:	e011      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d8:	4b33      	ldr	r3, [pc, #204]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	4a32      	ldr	r2, [pc, #200]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80050e4:	e00f      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ea:	3328      	adds	r3, #40	; 0x28
 80050ec:	2101      	movs	r1, #1
 80050ee:	4618      	mov	r0, r3
 80050f0:	f001 fba2 	bl	8006838 <RCCEx_PLL3_Config>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80050fa:	e004      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005102:	e000      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005106:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10b      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800510e:	4b26      	ldr	r3, [pc, #152]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005112:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800511a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511e:	4a22      	ldr	r2, [pc, #136]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005120:	430b      	orrs	r3, r1
 8005122:	6553      	str	r3, [r2, #84]	; 0x54
 8005124:	e003      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005126:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800512a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800512e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800513a:	66bb      	str	r3, [r7, #104]	; 0x68
 800513c:	2300      	movs	r3, #0
 800513e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005140:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005144:	460b      	mov	r3, r1
 8005146:	4313      	orrs	r3, r2
 8005148:	d034      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800514a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	d007      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800515a:	e011      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800515c:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4a11      	ldr	r2, [pc, #68]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005168:	e00e      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800516a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800516e:	3308      	adds	r3, #8
 8005170:	2102      	movs	r1, #2
 8005172:	4618      	mov	r0, r3
 8005174:	f001 faae 	bl	80066d4 <RCCEx_PLL2_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800517e:	e003      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005188:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10d      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800519c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519e:	4a02      	ldr	r2, [pc, #8]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051a0:	430b      	orrs	r3, r1
 80051a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051a4:	e006      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80051a6:	bf00      	nop
 80051a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80051c0:	663b      	str	r3, [r7, #96]	; 0x60
 80051c2:	2300      	movs	r3, #0
 80051c4:	667b      	str	r3, [r7, #100]	; 0x64
 80051c6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80051ca:	460b      	mov	r3, r1
 80051cc:	4313      	orrs	r3, r2
 80051ce:	d00c      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d4:	3328      	adds	r3, #40	; 0x28
 80051d6:	2102      	movs	r1, #2
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 fb2d 	bl	8006838 <RCCEx_PLL3_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80051f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80051f8:	2300      	movs	r3, #0
 80051fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051fc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005200:	460b      	mov	r3, r1
 8005202:	4313      	orrs	r3, r2
 8005204:	d036      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800520a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005210:	d018      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005216:	d811      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800521c:	d014      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800521e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005222:	d80b      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d011      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522c:	d106      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800522e:	4bb7      	ldr	r3, [pc, #732]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	4ab6      	ldr	r2, [pc, #728]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005238:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800523a:	e008      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005242:	e004      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005244:	bf00      	nop
 8005246:	e002      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005248:	bf00      	nop
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800524c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10a      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005256:	4bad      	ldr	r3, [pc, #692]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800525e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005264:	4aa9      	ldr	r2, [pc, #676]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005266:	430b      	orrs	r3, r1
 8005268:	6553      	str	r3, [r2, #84]	; 0x54
 800526a:	e003      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005270:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005280:	653b      	str	r3, [r7, #80]	; 0x50
 8005282:	2300      	movs	r3, #0
 8005284:	657b      	str	r3, [r7, #84]	; 0x54
 8005286:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800528a:	460b      	mov	r3, r1
 800528c:	4313      	orrs	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005290:	4b9e      	ldr	r3, [pc, #632]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005294:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529e:	4a9b      	ldr	r2, [pc, #620]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052a0:	430b      	orrs	r3, r1
 80052a2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80052b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052b2:	2300      	movs	r3, #0
 80052b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80052ba:	460b      	mov	r3, r1
 80052bc:	4313      	orrs	r3, r2
 80052be:	d009      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052c0:	4b92      	ldr	r3, [pc, #584]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ce:	4a8f      	ldr	r2, [pc, #572]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052d0:	430b      	orrs	r3, r1
 80052d2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80052d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80052e0:	643b      	str	r3, [r7, #64]	; 0x40
 80052e2:	2300      	movs	r3, #0
 80052e4:	647b      	str	r3, [r7, #68]	; 0x44
 80052e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80052ea:	460b      	mov	r3, r1
 80052ec:	4313      	orrs	r3, r2
 80052ee:	d00e      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052f0:	4b86      	ldr	r3, [pc, #536]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	4a85      	ldr	r2, [pc, #532]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052fa:	6113      	str	r3, [r2, #16]
 80052fc:	4b83      	ldr	r3, [pc, #524]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052fe:	6919      	ldr	r1, [r3, #16]
 8005300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005304:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005308:	4a80      	ldr	r2, [pc, #512]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800530a:	430b      	orrs	r3, r1
 800530c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800530e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800531a:	63bb      	str	r3, [r7, #56]	; 0x38
 800531c:	2300      	movs	r3, #0
 800531e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005320:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005324:	460b      	mov	r3, r1
 8005326:	4313      	orrs	r3, r2
 8005328:	d009      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800532a:	4b78      	ldr	r3, [pc, #480]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800532c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005338:	4a74      	ldr	r2, [pc, #464]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800533a:	430b      	orrs	r3, r1
 800533c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800533e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800534a:	633b      	str	r3, [r7, #48]	; 0x30
 800534c:	2300      	movs	r3, #0
 800534e:	637b      	str	r3, [r7, #52]	; 0x34
 8005350:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005354:	460b      	mov	r3, r1
 8005356:	4313      	orrs	r3, r2
 8005358:	d00a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800535a:	4b6c      	ldr	r3, [pc, #432]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800535c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	4a68      	ldr	r2, [pc, #416]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800536c:	430b      	orrs	r3, r1
 800536e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	2100      	movs	r1, #0
 800537a:	62b9      	str	r1, [r7, #40]	; 0x28
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005382:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005386:	460b      	mov	r3, r1
 8005388:	4313      	orrs	r3, r2
 800538a:	d011      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800538c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005390:	3308      	adds	r3, #8
 8005392:	2100      	movs	r1, #0
 8005394:	4618      	mov	r0, r3
 8005396:	f001 f99d 	bl	80066d4 <RCCEx_PLL2_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80053a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80053b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	2100      	movs	r1, #0
 80053ba:	6239      	str	r1, [r7, #32]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
 80053c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80053c6:	460b      	mov	r3, r1
 80053c8:	4313      	orrs	r3, r2
 80053ca:	d011      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d0:	3308      	adds	r3, #8
 80053d2:	2101      	movs	r1, #1
 80053d4:	4618      	mov	r0, r3
 80053d6:	f001 f97d 	bl	80066d4 <RCCEx_PLL2_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80053e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80053f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	2100      	movs	r1, #0
 80053fa:	61b9      	str	r1, [r7, #24]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005406:	460b      	mov	r3, r1
 8005408:	4313      	orrs	r3, r2
 800540a:	d011      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800540c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005410:	3308      	adds	r3, #8
 8005412:	2102      	movs	r1, #2
 8005414:	4618      	mov	r0, r3
 8005416:	f001 f95d 	bl	80066d4 <RCCEx_PLL2_Config>
 800541a:	4603      	mov	r3, r0
 800541c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005420:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005428:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800542c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	2100      	movs	r1, #0
 800543a:	6139      	str	r1, [r7, #16]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005446:	460b      	mov	r3, r1
 8005448:	4313      	orrs	r3, r2
 800544a:	d011      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800544c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005450:	3328      	adds	r3, #40	; 0x28
 8005452:	2100      	movs	r1, #0
 8005454:	4618      	mov	r0, r3
 8005456:	f001 f9ef 	bl	8006838 <RCCEx_PLL3_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8005460:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005468:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800546c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	2100      	movs	r1, #0
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005486:	460b      	mov	r3, r1
 8005488:	4313      	orrs	r3, r2
 800548a:	d011      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800548c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005490:	3328      	adds	r3, #40	; 0x28
 8005492:	2101      	movs	r1, #1
 8005494:	4618      	mov	r0, r3
 8005496:	f001 f9cf 	bl	8006838 <RCCEx_PLL3_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80054a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80054b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	2100      	movs	r1, #0
 80054ba:	6039      	str	r1, [r7, #0]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	607b      	str	r3, [r7, #4]
 80054c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80054c6:	460b      	mov	r3, r1
 80054c8:	4313      	orrs	r3, r2
 80054ca:	d011      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d0:	3328      	adds	r3, #40	; 0x28
 80054d2:	2102      	movs	r1, #2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f001 f9af 	bl	8006838 <RCCEx_PLL3_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80054e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80054f0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e000      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
}
 80054fe:	4618      	mov	r0, r3
 8005500:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005504:	46bd      	mov	sp, r7
 8005506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800550a:	bf00      	nop
 800550c:	58024400 	.word	0x58024400

08005510 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b090      	sub	sp, #64	; 0x40
 8005514:	af00      	add	r7, sp, #0
 8005516:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800551a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800551e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005522:	430b      	orrs	r3, r1
 8005524:	f040 8094 	bne.w	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005528:	4b9b      	ldr	r3, [pc, #620]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800552a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	2b04      	cmp	r3, #4
 8005536:	f200 8087 	bhi.w	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800553a:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	08005555 	.word	0x08005555
 8005544:	0800557d 	.word	0x0800557d
 8005548:	080055a5 	.word	0x080055a5
 800554c:	08005641 	.word	0x08005641
 8005550:	080055cd 	.word	0x080055cd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005554:	4b90      	ldr	r3, [pc, #576]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005560:	d108      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005566:	4618      	mov	r0, r3
 8005568:	f000 ff62 	bl	8006430 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005570:	f000 bc93 	b.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005578:	f000 bc8f 	b.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800557c:	4b86      	ldr	r3, [pc, #536]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005588:	d108      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800558a:	f107 0318 	add.w	r3, r7, #24
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fca6 	bl	8005ee0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005598:	f000 bc7f 	b.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055a0:	f000 bc7b 	b.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055a4:	4b7c      	ldr	r3, [pc, #496]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055b0:	d108      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055b2:	f107 030c 	add.w	r3, r7, #12
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fde6 	bl	8006188 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055c0:	f000 bc6b 	b.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c8:	f000 bc67 	b.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80055cc:	4b72      	ldr	r3, [pc, #456]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055d6:	4b70      	ldr	r3, [pc, #448]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d10c      	bne.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80055e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d109      	bne.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055e8:	4b6b      	ldr	r3, [pc, #428]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	08db      	lsrs	r3, r3, #3
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	4a6a      	ldr	r2, [pc, #424]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80055f4:	fa22 f303 	lsr.w	r3, r2, r3
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055fa:	e01f      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055fc:	4b66      	ldr	r3, [pc, #408]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005608:	d106      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800560a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005610:	d102      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005612:	4b63      	ldr	r3, [pc, #396]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005616:	e011      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005618:	4b5f      	ldr	r3, [pc, #380]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005624:	d106      	bne.n	8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800562c:	d102      	bne.n	8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800562e:	4b5d      	ldr	r3, [pc, #372]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005632:	e003      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005638:	f000 bc2f 	b.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800563c:	f000 bc2d 	b.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005640:	4b59      	ldr	r3, [pc, #356]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005644:	f000 bc29 	b.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800564c:	f000 bc25 	b.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005654:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005658:	430b      	orrs	r3, r1
 800565a:	f040 80a7 	bne.w	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800565e:	4b4e      	ldr	r3, [pc, #312]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005662:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005666:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800566e:	d054      	beq.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005676:	f200 808b 	bhi.w	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005680:	f000 8083 	beq.w	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800568a:	f200 8081 	bhi.w	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005694:	d02f      	beq.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800569c:	d878      	bhi.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056aa:	d012      	beq.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80056ac:	e070      	b.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056ae:	4b3a      	ldr	r3, [pc, #232]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056ba:	d107      	bne.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 feb5 	bl	8006430 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056ca:	e3e6      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056cc:	2300      	movs	r3, #0
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d0:	e3e3      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056d2:	4b31      	ldr	r3, [pc, #196]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056de:	d107      	bne.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056e0:	f107 0318 	add.w	r3, r7, #24
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fbfb 	bl	8005ee0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056ee:	e3d4      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056f4:	e3d1      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056f6:	4b28      	ldr	r3, [pc, #160]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005702:	d107      	bne.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005704:	f107 030c 	add.w	r3, r7, #12
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fd3d 	bl	8006188 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005712:	e3c2      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005718:	e3bf      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800571a:	4b1f      	ldr	r3, [pc, #124]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800571c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005722:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005724:	4b1c      	ldr	r3, [pc, #112]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b04      	cmp	r3, #4
 800572e:	d10c      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	08db      	lsrs	r3, r3, #3
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	4a16      	ldr	r2, [pc, #88]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005742:	fa22 f303 	lsr.w	r3, r2, r3
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005748:	e01e      	b.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800574a:	4b13      	ldr	r3, [pc, #76]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005756:	d106      	bne.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800575e:	d102      	bne.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005760:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005764:	e010      	b.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005772:	d106      	bne.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800577a:	d102      	bne.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800577c:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005780:	e002      	b.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005786:	e388      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005788:	e387      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800578a:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800578c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800578e:	e384      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005794:	e381      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005796:	bf00      	nop
 8005798:	58024400 	.word	0x58024400
 800579c:	03d09000 	.word	0x03d09000
 80057a0:	003d0900 	.word	0x003d0900
 80057a4:	017d7840 	.word	0x017d7840
 80057a8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80057ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057b0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80057b4:	430b      	orrs	r3, r1
 80057b6:	f040 809c 	bne.w	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80057ba:	4b9e      	ldr	r3, [pc, #632]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80057c2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057ca:	d054      	beq.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057d2:	f200 808b 	bhi.w	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057dc:	f000 8083 	beq.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057e6:	f200 8081 	bhi.w	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057f0:	d02f      	beq.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057f8:	d878      	bhi.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d004      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005806:	d012      	beq.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005808:	e070      	b.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800580a:	4b8a      	ldr	r3, [pc, #552]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005816:	d107      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fe07 	bl	8006430 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005826:	e338      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800582c:	e335      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800582e:	4b81      	ldr	r3, [pc, #516]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800583a:	d107      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800583c:	f107 0318 	add.w	r3, r7, #24
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fb4d 	bl	8005ee0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800584a:	e326      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005850:	e323      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005852:	4b78      	ldr	r3, [pc, #480]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800585a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800585e:	d107      	bne.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005860:	f107 030c 	add.w	r3, r7, #12
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fc8f 	bl	8006188 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800586e:	e314      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005874:	e311      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005876:	4b6f      	ldr	r3, [pc, #444]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800587e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005880:	4b6c      	ldr	r3, [pc, #432]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b04      	cmp	r3, #4
 800588a:	d10c      	bne.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588e:	2b00      	cmp	r3, #0
 8005890:	d109      	bne.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005892:	4b68      	ldr	r3, [pc, #416]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	08db      	lsrs	r3, r3, #3
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	4a66      	ldr	r2, [pc, #408]	; (8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800589e:	fa22 f303 	lsr.w	r3, r2, r3
 80058a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a4:	e01e      	b.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058a6:	4b63      	ldr	r3, [pc, #396]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b2:	d106      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ba:	d102      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80058bc:	4b5f      	ldr	r3, [pc, #380]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058c0:	e010      	b.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058c2:	4b5c      	ldr	r3, [pc, #368]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058ce:	d106      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058d6:	d102      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80058d8:	4b59      	ldr	r3, [pc, #356]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058dc:	e002      	b.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80058e2:	e2da      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80058e4:	e2d9      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80058e6:	4b57      	ldr	r3, [pc, #348]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058ea:	e2d6      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058f0:	e2d3      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80058f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058f6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80058fa:	430b      	orrs	r3, r1
 80058fc:	f040 80a7 	bne.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005900:	4b4c      	ldr	r3, [pc, #304]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005904:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005908:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005910:	d055      	beq.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005918:	f200 8096 	bhi.w	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005922:	f000 8084 	beq.w	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800592c:	f200 808c 	bhi.w	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005936:	d030      	beq.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800593e:	f200 8083 	bhi.w	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	2b00      	cmp	r3, #0
 8005946:	d004      	beq.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800594e:	d012      	beq.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005950:	e07a      	b.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005952:	4b38      	ldr	r3, [pc, #224]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800595e:	d107      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fd63 	bl	8006430 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800596e:	e294      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005974:	e291      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005976:	4b2f      	ldr	r3, [pc, #188]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800597e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005982:	d107      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005984:	f107 0318 	add.w	r3, r7, #24
 8005988:	4618      	mov	r0, r3
 800598a:	f000 faa9 	bl	8005ee0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005992:	e282      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005998:	e27f      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800599a:	4b26      	ldr	r3, [pc, #152]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059a6:	d107      	bne.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059a8:	f107 030c 	add.w	r3, r7, #12
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fbeb 	bl	8006188 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059b6:	e270      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059bc:	e26d      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059be:	4b1d      	ldr	r3, [pc, #116]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80059c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059c6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059c8:	4b1a      	ldr	r3, [pc, #104]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d10c      	bne.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80059d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d109      	bne.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059da:	4b16      	ldr	r3, [pc, #88]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	08db      	lsrs	r3, r3, #3
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	4a14      	ldr	r2, [pc, #80]	; (8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80059e6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ec:	e01e      	b.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059ee:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059fa:	d106      	bne.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80059fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a02:	d102      	bne.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a04:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a08:	e010      	b.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a16:	d106      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a1e:	d102      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005a20:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a24:	e002      	b.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005a2a:	e236      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005a2c:	e235      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a2e:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005a30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a32:	e232      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005a34:	58024400 	.word	0x58024400
 8005a38:	03d09000 	.word	0x03d09000
 8005a3c:	003d0900 	.word	0x003d0900
 8005a40:	017d7840 	.word	0x017d7840
 8005a44:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a4c:	e225      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a52:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005a56:	430b      	orrs	r3, r1
 8005a58:	f040 8085 	bne.w	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005a5c:	4b9c      	ldr	r3, [pc, #624]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a60:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005a64:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a6c:	d06b      	beq.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a74:	d874      	bhi.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a7c:	d056      	beq.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a84:	d86c      	bhi.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a8c:	d03b      	beq.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a94:	d864      	bhi.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a9c:	d021      	beq.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aa4:	d85c      	bhi.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d004      	beq.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab2:	d004      	beq.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8005ab4:	e054      	b.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005ab6:	f7fe fb75 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
 8005aba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005abc:	e1ed      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005abe:	4b84      	ldr	r3, [pc, #528]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aca:	d107      	bne.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005acc:	f107 0318 	add.w	r3, r7, #24
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fa05 	bl	8005ee0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ada:	e1de      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ae0:	e1db      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ae2:	4b7b      	ldr	r3, [pc, #492]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aee:	d107      	bne.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005af0:	f107 030c 	add.w	r3, r7, #12
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fb47 	bl	8006188 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005afe:	e1cc      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b04:	e1c9      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b06:	4b72      	ldr	r3, [pc, #456]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d109      	bne.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b12:	4b6f      	ldr	r3, [pc, #444]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	08db      	lsrs	r3, r3, #3
 8005b18:	f003 0303 	and.w	r3, r3, #3
 8005b1c:	4a6d      	ldr	r2, [pc, #436]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b24:	e1b9      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b2a:	e1b6      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005b2c:	4b68      	ldr	r3, [pc, #416]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b38:	d102      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8005b3a:	4b67      	ldr	r3, [pc, #412]	; (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b3e:	e1ac      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b44:	e1a9      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b46:	4b62      	ldr	r3, [pc, #392]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b52:	d102      	bne.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8005b54:	4b61      	ldr	r3, [pc, #388]	; (8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b58:	e19f      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b5e:	e19c      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b64:	e199      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b6a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	d173      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005b72:	4b57      	ldr	r3, [pc, #348]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b7a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b82:	d02f      	beq.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b8a:	d863      	bhi.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d004      	beq.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b98:	d012      	beq.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8005b9a:	e05b      	b.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b9c:	4b4c      	ldr	r3, [pc, #304]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ba8:	d107      	bne.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005baa:	f107 0318 	add.w	r3, r7, #24
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 f996 	bl	8005ee0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bb8:	e16f      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bbe:	e16c      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005bc0:	4b43      	ldr	r3, [pc, #268]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bcc:	d107      	bne.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bce:	f107 030c 	add.w	r3, r7, #12
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fad8 	bl	8006188 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bdc:	e15d      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005be2:	e15a      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005be4:	4b3a      	ldr	r3, [pc, #232]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bee:	4b38      	ldr	r3, [pc, #224]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d10c      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d109      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c00:	4b33      	ldr	r3, [pc, #204]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	08db      	lsrs	r3, r3, #3
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	4a32      	ldr	r2, [pc, #200]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c12:	e01e      	b.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c14:	4b2e      	ldr	r3, [pc, #184]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c20:	d106      	bne.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c28:	d102      	bne.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c2a:	4b2b      	ldr	r3, [pc, #172]	; (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8005c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c2e:	e010      	b.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c30:	4b27      	ldr	r3, [pc, #156]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c3c:	d106      	bne.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c44:	d102      	bne.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c46:	4b25      	ldr	r3, [pc, #148]	; (8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c4a:	e002      	b.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005c50:	e123      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005c52:	e122      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005c54:	2300      	movs	r3, #0
 8005c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c58:	e11f      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c5e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005c62:	430b      	orrs	r3, r1
 8005c64:	d13c      	bne.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005c66:	4b1a      	ldr	r3, [pc, #104]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7c:	d012      	beq.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8005c7e:	e023      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c80:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c8c:	d107      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fbcc 	bl	8006430 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c9c:	e0fd      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ca2:	e0fa      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cb0:	d107      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cb2:	f107 0318 	add.w	r3, r7, #24
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 f912 	bl	8005ee0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cc0:	e0eb      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cc6:	e0e8      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ccc:	e0e5      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005cce:	bf00      	nop
 8005cd0:	58024400 	.word	0x58024400
 8005cd4:	03d09000 	.word	0x03d09000
 8005cd8:	003d0900 	.word	0x003d0900
 8005cdc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ce4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	f040 8085 	bne.w	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005cee:	4b6d      	ldr	r3, [pc, #436]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005cf6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cfe:	d06b      	beq.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d06:	d874      	bhi.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0e:	d056      	beq.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d16:	d86c      	bhi.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d1e:	d03b      	beq.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d26:	d864      	bhi.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d2e:	d021      	beq.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d36:	d85c      	bhi.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d44:	d004      	beq.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005d46:	e054      	b.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005d48:	f000 f8b4 	bl	8005eb4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005d4c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d4e:	e0a4      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d50:	4b54      	ldr	r3, [pc, #336]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d5c:	d107      	bne.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d5e:	f107 0318 	add.w	r3, r7, #24
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 f8bc 	bl	8005ee0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d6c:	e095      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d72:	e092      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d74:	4b4b      	ldr	r3, [pc, #300]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d80:	d107      	bne.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d82:	f107 030c 	add.w	r3, r7, #12
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f9fe 	bl	8006188 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d90:	e083      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d96:	e080      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d98:	4b42      	ldr	r3, [pc, #264]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d109      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005da4:	4b3f      	ldr	r3, [pc, #252]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	08db      	lsrs	r3, r3, #3
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	4a3e      	ldr	r2, [pc, #248]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
 8005db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005db6:	e070      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005db8:	2300      	movs	r3, #0
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dbc:	e06d      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005dbe:	4b39      	ldr	r3, [pc, #228]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dca:	d102      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8005dcc:	4b37      	ldr	r3, [pc, #220]	; (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dd0:	e063      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dd6:	e060      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005dd8:	4b32      	ldr	r3, [pc, #200]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005de4:	d102      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8005de6:	4b32      	ldr	r3, [pc, #200]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dea:	e056      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005df0:	e053      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005df6:	e050      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005e00:	430b      	orrs	r3, r1
 8005e02:	d148      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005e04:	4b27      	ldr	r3, [pc, #156]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e0c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e14:	d02a      	beq.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e1c:	d838      	bhi.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d004      	beq.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e2a:	d00d      	beq.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005e2c:	e030      	b.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e3a:	d102      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8005e3c:	4b1c      	ldr	r3, [pc, #112]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e40:	e02b      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e46:	e028      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e48:	4b16      	ldr	r3, [pc, #88]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e54:	d107      	bne.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fae8 	bl	8006430 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e64:	e019      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e6a:	e016      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e78:	d107      	bne.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e7a:	f107 0318 	add.w	r3, r7, #24
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 f82e 	bl	8005ee0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e88:	e007      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e8e:	e004      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e94:	e001      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3740      	adds	r7, #64	; 0x40
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	58024400 	.word	0x58024400
 8005ea8:	03d09000 	.word	0x03d09000
 8005eac:	003d0900 	.word	0x003d0900
 8005eb0:	017d7840 	.word	0x017d7840

08005eb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005eb8:	f7fe f944 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	091b      	lsrs	r3, r3, #4
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	4904      	ldr	r1, [pc, #16]	; (8005edc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005eca:	5ccb      	ldrb	r3, [r1, r3]
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	08007738 	.word	0x08007738

08005ee0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b089      	sub	sp, #36	; 0x24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ee8:	4ba1      	ldr	r3, [pc, #644]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005ef2:	4b9f      	ldr	r3, [pc, #636]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	0b1b      	lsrs	r3, r3, #12
 8005ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005efc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005efe:	4b9c      	ldr	r3, [pc, #624]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	091b      	lsrs	r3, r3, #4
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005f0a:	4b99      	ldr	r3, [pc, #612]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0e:	08db      	lsrs	r3, r3, #3
 8005f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 8111 	beq.w	8006150 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	f000 8083 	beq.w	800603c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	f200 80a1 	bhi.w	8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d056      	beq.n	8005ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005f4a:	e099      	b.n	8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f4c:	4b88      	ldr	r3, [pc, #544]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d02d      	beq.n	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f58:	4b85      	ldr	r3, [pc, #532]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	08db      	lsrs	r3, r3, #3
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	4a84      	ldr	r2, [pc, #528]	; (8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005f64:	fa22 f303 	lsr.w	r3, r2, r3
 8005f68:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f82:	4b7b      	ldr	r3, [pc, #492]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006178 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005fb2:	e087      	b.n	80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800617c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc6:	4b6a      	ldr	r3, [pc, #424]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006178 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ff6:	e065      	b.n	80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006002:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006180 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600a:	4b59      	ldr	r3, [pc, #356]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601a:	ed97 6a03 	vldr	s12, [r7, #12]
 800601e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006178 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800602e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800603a:	e043      	b.n	80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006046:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800604a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800604e:	4b48      	ldr	r3, [pc, #288]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006062:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006178 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800606e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800607e:	e021      	b.n	80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006180 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800608e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006092:	4b37      	ldr	r3, [pc, #220]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006178 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80060c4:	4b2a      	ldr	r3, [pc, #168]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	0a5b      	lsrs	r3, r3, #9
 80060ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060de:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ea:	ee17 2a90 	vmov	r2, s15
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80060f2:	4b1f      	ldr	r3, [pc, #124]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f6:	0c1b      	lsrs	r3, r3, #16
 80060f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006108:	ee37 7a87 	vadd.f32	s14, s15, s14
 800610c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006118:	ee17 2a90 	vmov	r2, s15
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006120:	4b13      	ldr	r3, [pc, #76]	; (8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	0e1b      	lsrs	r3, r3, #24
 8006126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800613a:	edd7 6a07 	vldr	s13, [r7, #28]
 800613e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006146:	ee17 2a90 	vmov	r2, s15
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800614e:	e008      	b.n	8006162 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	609a      	str	r2, [r3, #8]
}
 8006162:	bf00      	nop
 8006164:	3724      	adds	r7, #36	; 0x24
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	58024400 	.word	0x58024400
 8006174:	03d09000 	.word	0x03d09000
 8006178:	46000000 	.word	0x46000000
 800617c:	4c742400 	.word	0x4c742400
 8006180:	4a742400 	.word	0x4a742400
 8006184:	4bbebc20 	.word	0x4bbebc20

08006188 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006188:	b480      	push	{r7}
 800618a:	b089      	sub	sp, #36	; 0x24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006190:	4ba1      	ldr	r3, [pc, #644]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	f003 0303 	and.w	r3, r3, #3
 8006198:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800619a:	4b9f      	ldr	r3, [pc, #636]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	0d1b      	lsrs	r3, r3, #20
 80061a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80061a6:	4b9c      	ldr	r3, [pc, #624]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	0a1b      	lsrs	r3, r3, #8
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80061b2:	4b99      	ldr	r3, [pc, #612]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b6:	08db      	lsrs	r3, r3, #3
 80061b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8111 	beq.w	80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	f000 8083 	beq.w	80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	f200 80a1 	bhi.w	8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d056      	beq.n	80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80061f2:	e099      	b.n	8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061f4:	4b88      	ldr	r3, [pc, #544]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d02d      	beq.n	800625c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006200:	4b85      	ldr	r3, [pc, #532]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	08db      	lsrs	r3, r3, #3
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	4a84      	ldr	r2, [pc, #528]	; (800641c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800620c:	fa22 f303 	lsr.w	r3, r2, r3
 8006210:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	ee07 3a90 	vmov	s15, r3
 8006218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622a:	4b7b      	ldr	r3, [pc, #492]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623a:	ed97 6a03 	vldr	s12, [r7, #12]
 800623e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006420 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800624e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006256:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800625a:	e087      	b.n	800636c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006266:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800626a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800626e:	4b6a      	ldr	r3, [pc, #424]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006282:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006420 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800629e:	e065      	b.n	800636c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006428 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80062ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b2:	4b59      	ldr	r3, [pc, #356]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006420 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062e2:	e043      	b.n	800636c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	ee07 3a90 	vmov	s15, r3
 80062ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800642c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80062f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f6:	4b48      	ldr	r3, [pc, #288]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006306:	ed97 6a03 	vldr	s12, [r7, #12]
 800630a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006420 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800630e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800631a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006326:	e021      	b.n	800636c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006332:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006428 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633a:	4b37      	ldr	r3, [pc, #220]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634a:	ed97 6a03 	vldr	s12, [r7, #12]
 800634e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006420 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800635e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800636a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800636c:	4b2a      	ldr	r3, [pc, #168]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	0a5b      	lsrs	r3, r3, #9
 8006372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006382:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006386:	edd7 6a07 	vldr	s13, [r7, #28]
 800638a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800638e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006392:	ee17 2a90 	vmov	r2, s15
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800639a:	4b1f      	ldr	r3, [pc, #124]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	0c1b      	lsrs	r3, r3, #16
 80063a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80063b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063c0:	ee17 2a90 	vmov	r2, s15
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80063c8:	4b13      	ldr	r3, [pc, #76]	; (8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	0e1b      	lsrs	r3, r3, #24
 80063ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ee:	ee17 2a90 	vmov	r2, s15
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80063f6:	e008      	b.n	800640a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	609a      	str	r2, [r3, #8]
}
 800640a:	bf00      	nop
 800640c:	3724      	adds	r7, #36	; 0x24
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	58024400 	.word	0x58024400
 800641c:	03d09000 	.word	0x03d09000
 8006420:	46000000 	.word	0x46000000
 8006424:	4c742400 	.word	0x4c742400
 8006428:	4a742400 	.word	0x4a742400
 800642c:	4bbebc20 	.word	0x4bbebc20

08006430 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006430:	b480      	push	{r7}
 8006432:	b089      	sub	sp, #36	; 0x24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006438:	4ba0      	ldr	r3, [pc, #640]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800643a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006442:	4b9e      	ldr	r3, [pc, #632]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	091b      	lsrs	r3, r3, #4
 8006448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800644c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800644e:	4b9b      	ldr	r3, [pc, #620]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006458:	4b98      	ldr	r3, [pc, #608]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800645a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645c:	08db      	lsrs	r3, r3, #3
 800645e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	fb02 f303 	mul.w	r3, r2, r3
 8006468:	ee07 3a90 	vmov	s15, r3
 800646c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006470:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 8111 	beq.w	800669e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	2b02      	cmp	r3, #2
 8006480:	f000 8083 	beq.w	800658a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	2b02      	cmp	r3, #2
 8006488:	f200 80a1 	bhi.w	80065ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d056      	beq.n	8006546 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006498:	e099      	b.n	80065ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800649a:	4b88      	ldr	r3, [pc, #544]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d02d      	beq.n	8006502 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064a6:	4b85      	ldr	r3, [pc, #532]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	08db      	lsrs	r3, r3, #3
 80064ac:	f003 0303 	and.w	r3, r3, #3
 80064b0:	4a83      	ldr	r2, [pc, #524]	; (80066c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80064b2:	fa22 f303 	lsr.w	r3, r2, r3
 80064b6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	ee07 3a90 	vmov	s15, r3
 80064c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d0:	4b7a      	ldr	r3, [pc, #488]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d8:	ee07 3a90 	vmov	s15, r3
 80064dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80064e4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80066c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80064e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006500:	e087      	b.n	8006612 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	ee07 3a90 	vmov	s15, r3
 8006508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80066c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006514:	4b69      	ldr	r3, [pc, #420]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651c:	ee07 3a90 	vmov	s15, r3
 8006520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006524:	ed97 6a03 	vldr	s12, [r7, #12]
 8006528:	eddf 5a66 	vldr	s11, [pc, #408]	; 80066c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800652c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006540:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006544:	e065      	b.n	8006612 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	ee07 3a90 	vmov	s15, r3
 800654c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006550:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80066cc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006558:	4b58      	ldr	r3, [pc, #352]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006560:	ee07 3a90 	vmov	s15, r3
 8006564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006568:	ed97 6a03 	vldr	s12, [r7, #12]
 800656c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80066c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006578:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800657c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006584:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006588:	e043      	b.n	8006612 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	ee07 3a90 	vmov	s15, r3
 8006590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006594:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80066d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800659c:	4b47      	ldr	r3, [pc, #284]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800659e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a4:	ee07 3a90 	vmov	s15, r3
 80065a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80065b0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80066c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065cc:	e021      	b.n	8006612 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80066c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80065dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e0:	4b36      	ldr	r3, [pc, #216]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e8:	ee07 3a90 	vmov	s15, r3
 80065ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80065f4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80066c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006610:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006612:	4b2a      	ldr	r3, [pc, #168]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	0a5b      	lsrs	r3, r3, #9
 8006618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800661c:	ee07 3a90 	vmov	s15, r3
 8006620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006624:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006628:	ee37 7a87 	vadd.f32	s14, s15, s14
 800662c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006638:	ee17 2a90 	vmov	r2, s15
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006640:	4b1e      	ldr	r3, [pc, #120]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	0c1b      	lsrs	r3, r3, #16
 8006646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006656:	ee37 7a87 	vadd.f32	s14, s15, s14
 800665a:	edd7 6a07 	vldr	s13, [r7, #28]
 800665e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006666:	ee17 2a90 	vmov	r2, s15
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800666e:	4b13      	ldr	r3, [pc, #76]	; (80066bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006672:	0e1b      	lsrs	r3, r3, #24
 8006674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006678:	ee07 3a90 	vmov	s15, r3
 800667c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006684:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006688:	edd7 6a07 	vldr	s13, [r7, #28]
 800668c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006694:	ee17 2a90 	vmov	r2, s15
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800669c:	e008      	b.n	80066b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	609a      	str	r2, [r3, #8]
}
 80066b0:	bf00      	nop
 80066b2:	3724      	adds	r7, #36	; 0x24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	58024400 	.word	0x58024400
 80066c0:	03d09000 	.word	0x03d09000
 80066c4:	46000000 	.word	0x46000000
 80066c8:	4c742400 	.word	0x4c742400
 80066cc:	4a742400 	.word	0x4a742400
 80066d0:	4bbebc20 	.word	0x4bbebc20

080066d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066e2:	4b53      	ldr	r3, [pc, #332]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d101      	bne.n	80066f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e099      	b.n	8006826 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80066f2:	4b4f      	ldr	r3, [pc, #316]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a4e      	ldr	r2, [pc, #312]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80066f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066fe:	f7fa fe1d 	bl	800133c <HAL_GetTick>
 8006702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006704:	e008      	b.n	8006718 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006706:	f7fa fe19 	bl	800133c <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b02      	cmp	r3, #2
 8006712:	d901      	bls.n	8006718 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e086      	b.n	8006826 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006718:	4b45      	ldr	r3, [pc, #276]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1f0      	bne.n	8006706 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006724:	4b42      	ldr	r3, [pc, #264]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 8006726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006728:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	031b      	lsls	r3, r3, #12
 8006732:	493f      	ldr	r1, [pc, #252]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 8006734:	4313      	orrs	r3, r2
 8006736:	628b      	str	r3, [r1, #40]	; 0x28
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	3b01      	subs	r3, #1
 800673e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	3b01      	subs	r3, #1
 8006748:	025b      	lsls	r3, r3, #9
 800674a:	b29b      	uxth	r3, r3
 800674c:	431a      	orrs	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	3b01      	subs	r3, #1
 8006754:	041b      	lsls	r3, r3, #16
 8006756:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	3b01      	subs	r3, #1
 8006762:	061b      	lsls	r3, r3, #24
 8006764:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006768:	4931      	ldr	r1, [pc, #196]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 800676a:	4313      	orrs	r3, r2
 800676c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800676e:	4b30      	ldr	r3, [pc, #192]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	492d      	ldr	r1, [pc, #180]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 800677c:	4313      	orrs	r3, r2
 800677e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006780:	4b2b      	ldr	r3, [pc, #172]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	f023 0220 	bic.w	r2, r3, #32
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	4928      	ldr	r1, [pc, #160]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 800678e:	4313      	orrs	r3, r2
 8006790:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006792:	4b27      	ldr	r3, [pc, #156]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 8006794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006796:	4a26      	ldr	r2, [pc, #152]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 8006798:	f023 0310 	bic.w	r3, r3, #16
 800679c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800679e:	4b24      	ldr	r3, [pc, #144]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80067a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067a2:	4b24      	ldr	r3, [pc, #144]	; (8006834 <RCCEx_PLL2_Config+0x160>)
 80067a4:	4013      	ands	r3, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	69d2      	ldr	r2, [r2, #28]
 80067aa:	00d2      	lsls	r2, r2, #3
 80067ac:	4920      	ldr	r1, [pc, #128]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80067b2:	4b1f      	ldr	r3, [pc, #124]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	4a1e      	ldr	r2, [pc, #120]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80067b8:	f043 0310 	orr.w	r3, r3, #16
 80067bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d106      	bne.n	80067d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80067c4:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	4a19      	ldr	r2, [pc, #100]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80067ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067d0:	e00f      	b.n	80067f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d106      	bne.n	80067e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80067d8:	4b15      	ldr	r3, [pc, #84]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067dc:	4a14      	ldr	r2, [pc, #80]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80067de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067e4:	e005      	b.n	80067f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80067e6:	4b12      	ldr	r3, [pc, #72]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ea:	4a11      	ldr	r2, [pc, #68]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80067ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80067f2:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a0e      	ldr	r2, [pc, #56]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 80067f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067fe:	f7fa fd9d 	bl	800133c <HAL_GetTick>
 8006802:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006804:	e008      	b.n	8006818 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006806:	f7fa fd99 	bl	800133c <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d901      	bls.n	8006818 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e006      	b.n	8006826 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006818:	4b05      	ldr	r3, [pc, #20]	; (8006830 <RCCEx_PLL2_Config+0x15c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0f0      	beq.n	8006806 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	58024400 	.word	0x58024400
 8006834:	ffff0007 	.word	0xffff0007

08006838 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006846:	4b53      	ldr	r3, [pc, #332]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	2b03      	cmp	r3, #3
 8006850:	d101      	bne.n	8006856 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e099      	b.n	800698a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006856:	4b4f      	ldr	r3, [pc, #316]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a4e      	ldr	r2, [pc, #312]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 800685c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006862:	f7fa fd6b 	bl	800133c <HAL_GetTick>
 8006866:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006868:	e008      	b.n	800687c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800686a:	f7fa fd67 	bl	800133c <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e086      	b.n	800698a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800687c:	4b45      	ldr	r3, [pc, #276]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1f0      	bne.n	800686a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006888:	4b42      	ldr	r3, [pc, #264]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	051b      	lsls	r3, r3, #20
 8006896:	493f      	ldr	r1, [pc, #252]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 8006898:	4313      	orrs	r3, r2
 800689a:	628b      	str	r3, [r1, #40]	; 0x28
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	3b01      	subs	r3, #1
 80068a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	025b      	lsls	r3, r3, #9
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	041b      	lsls	r3, r3, #16
 80068ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	061b      	lsls	r3, r3, #24
 80068c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068cc:	4931      	ldr	r1, [pc, #196]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80068d2:	4b30      	ldr	r3, [pc, #192]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 80068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	492d      	ldr	r1, [pc, #180]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80068e4:	4b2b      	ldr	r3, [pc, #172]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	4928      	ldr	r1, [pc, #160]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80068f6:	4b27      	ldr	r3, [pc, #156]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fa:	4a26      	ldr	r2, [pc, #152]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 80068fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006900:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006902:	4b24      	ldr	r3, [pc, #144]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 8006904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006906:	4b24      	ldr	r3, [pc, #144]	; (8006998 <RCCEx_PLL3_Config+0x160>)
 8006908:	4013      	ands	r3, r2
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	69d2      	ldr	r2, [r2, #28]
 800690e:	00d2      	lsls	r2, r2, #3
 8006910:	4920      	ldr	r1, [pc, #128]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 8006912:	4313      	orrs	r3, r2
 8006914:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006916:	4b1f      	ldr	r3, [pc, #124]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	4a1e      	ldr	r2, [pc, #120]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 800691c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006920:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d106      	bne.n	8006936 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006928:	4b1a      	ldr	r3, [pc, #104]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	4a19      	ldr	r2, [pc, #100]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 800692e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006932:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006934:	e00f      	b.n	8006956 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d106      	bne.n	800694a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800693c:	4b15      	ldr	r3, [pc, #84]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	4a14      	ldr	r2, [pc, #80]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 8006942:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006946:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006948:	e005      	b.n	8006956 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800694a:	4b12      	ldr	r3, [pc, #72]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 800694c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694e:	4a11      	ldr	r2, [pc, #68]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 8006950:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006954:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006956:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a0e      	ldr	r2, [pc, #56]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 800695c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006962:	f7fa fceb 	bl	800133c <HAL_GetTick>
 8006966:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006968:	e008      	b.n	800697c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800696a:	f7fa fce7 	bl	800133c <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e006      	b.n	800698a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800697c:	4b05      	ldr	r3, [pc, #20]	; (8006994 <RCCEx_PLL3_Config+0x15c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0f0      	beq.n	800696a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	58024400 	.word	0x58024400
 8006998:	ffff0007 	.word	0xffff0007

0800699c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d904      	bls.n	80069ba <HAL_SAI_InitProtocol+0x1e>
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	3b03      	subs	r3, #3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d812      	bhi.n	80069de <HAL_SAI_InitProtocol+0x42>
 80069b8:	e008      	b.n	80069cc <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 fa37 	bl	8006e34 <SAI_InitI2S>
 80069c6:	4603      	mov	r3, r0
 80069c8:	75fb      	strb	r3, [r7, #23]
      break;
 80069ca:	e00b      	b.n	80069e4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 fae0 	bl	8006f98 <SAI_InitPCM>
 80069d8:	4603      	mov	r3, r0
 80069da:	75fb      	strb	r3, [r7, #23]
      break;
 80069dc:	e002      	b.n	80069e4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	75fb      	strb	r3, [r7, #23]
      break;
 80069e2:	bf00      	nop
  }

  if (status == HAL_OK)
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d104      	bne.n	80069f4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f808 	bl	8006a00 <HAL_SAI_Init>
 80069f0:	4603      	mov	r3, r0
 80069f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08a      	sub	sp, #40	; 0x28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e201      	b.n	8006e16 <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d113      	bne.n	8006a44 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a99      	ldr	r2, [pc, #612]	; (8006c88 <HAL_SAI_Init+0x288>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d004      	beq.n	8006a30 <HAL_SAI_Init+0x30>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a98      	ldr	r2, [pc, #608]	; (8006c8c <HAL_SAI_Init+0x28c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d107      	bne.n	8006a40 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d103      	bne.n	8006a40 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e1e8      	b.n	8006e16 <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a8f      	ldr	r2, [pc, #572]	; (8006c88 <HAL_SAI_Init+0x288>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d004      	beq.n	8006a58 <HAL_SAI_Init+0x58>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a8f      	ldr	r2, [pc, #572]	; (8006c90 <HAL_SAI_Init+0x290>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d102      	bne.n	8006a5e <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8006a58:	4b8e      	ldr	r3, [pc, #568]	; (8006c94 <HAL_SAI_Init+0x294>)
 8006a5a:	61bb      	str	r3, [r7, #24]
 8006a5c:	e00e      	b.n	8006a7c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a8a      	ldr	r2, [pc, #552]	; (8006c8c <HAL_SAI_Init+0x28c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d004      	beq.n	8006a72 <HAL_SAI_Init+0x72>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a8a      	ldr	r2, [pc, #552]	; (8006c98 <HAL_SAI_Init+0x298>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d102      	bne.n	8006a78 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8006a72:	4b8a      	ldr	r3, [pc, #552]	; (8006c9c <HAL_SAI_Init+0x29c>)
 8006a74:	61bb      	str	r3, [r7, #24]
 8006a76:	e001      	b.n	8006a7c <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e1cc      	b.n	8006e16 <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d106      	bne.n	8006a96 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7fa f909 	bl	8000ca8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fb00 	bl	800709c <SAI_Disable>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e1b7      	b.n	8006e16 <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d00c      	beq.n	8006ad0 <HAL_SAI_Init+0xd0>
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d80d      	bhi.n	8006ad6 <HAL_SAI_Init+0xd6>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <HAL_SAI_Init+0xc4>
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d003      	beq.n	8006aca <HAL_SAI_Init+0xca>
 8006ac2:	e008      	b.n	8006ad6 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ac8:	e008      	b.n	8006adc <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006aca:	2310      	movs	r3, #16
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ace:	e005      	b.n	8006adc <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006ad0:	2320      	movs	r3, #32
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ad4:	e002      	b.n	8006adc <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ada:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b05      	cmp	r3, #5
 8006ae2:	d822      	bhi.n	8006b2a <HAL_SAI_Init+0x12a>
 8006ae4:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <HAL_SAI_Init+0xec>)
 8006ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aea:	bf00      	nop
 8006aec:	08006b05 	.word	0x08006b05
 8006af0:	08006b0b 	.word	0x08006b0b
 8006af4:	08006b13 	.word	0x08006b13
 8006af8:	08006b2b 	.word	0x08006b2b
 8006afc:	08006b2b 	.word	0x08006b2b
 8006b00:	08006b1b 	.word	0x08006b1b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61fb      	str	r3, [r7, #28]
      break;
 8006b08:	e012      	b.n	8006b30 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b0e:	61fb      	str	r3, [r7, #28]
      break;
 8006b10:	e00e      	b.n	8006b30 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b16:	61fb      	str	r3, [r7, #28]
      break;
 8006b18:	e00a      	b.n	8006b30 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b1e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	f043 0303 	orr.w	r3, r3, #3
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b28:	e002      	b.n	8006b30 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
      break;
 8006b2e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b34:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 808a 	beq.w	8006c54 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a4f      	ldr	r2, [pc, #316]	; (8006c88 <HAL_SAI_Init+0x288>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <HAL_SAI_Init+0x158>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a4f      	ldr	r2, [pc, #316]	; (8006c90 <HAL_SAI_Init+0x290>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d106      	bne.n	8006b66 <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006b58:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006b5c:	f04f 0100 	mov.w	r1, #0
 8006b60:	f7fe fcd6 	bl	8005510 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b64:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a48      	ldr	r2, [pc, #288]	; (8006c8c <HAL_SAI_Init+0x28c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d106      	bne.n	8006b7e <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006b70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006b74:	f04f 0100 	mov.w	r1, #0
 8006b78:	f7fe fcca 	bl	8005510 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b7c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a45      	ldr	r2, [pc, #276]	; (8006c98 <HAL_SAI_Init+0x298>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d106      	bne.n	8006b96 <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006b88:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b8c:	f04f 0100 	mov.w	r1, #0
 8006b90:	f7fe fcbe 	bl	8005510 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b94:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b9e:	d120      	bne.n	8006be2 <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d102      	bne.n	8006bae <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8006ba8:	2340      	movs	r3, #64	; 0x40
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e00a      	b.n	8006bc4 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb2:	2b08      	cmp	r3, #8
 8006bb4:	d103      	bne.n	8006bbe <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8006bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	e002      	b.n	8006bc4 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	4619      	mov	r1, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	fb02 f303 	mul.w	r3, r2, r3
 8006bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	e017      	b.n	8006c12 <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bea:	d101      	bne.n	8006bf0 <HAL_SAI_Init+0x1f0>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e000      	b.n	8006bf2 <HAL_SAI_Init+0x1f2>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	4619      	mov	r1, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	fb02 f303 	mul.w	r3, r2, r3
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c10:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	4a22      	ldr	r2, [pc, #136]	; (8006ca0 <HAL_SAI_Init+0x2a0>)
 8006c16:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1a:	08da      	lsrs	r2, r3, #3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006c20:	6939      	ldr	r1, [r7, #16]
 8006c22:	4b1f      	ldr	r3, [pc, #124]	; (8006ca0 <HAL_SAI_Init+0x2a0>)
 8006c24:	fba3 2301 	umull	r2, r3, r3, r1
 8006c28:	08da      	lsrs	r2, r3, #3
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	1aca      	subs	r2, r1, r3
 8006c34:	2a08      	cmp	r2, #8
 8006c36:	d904      	bls.n	8006c42 <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d104      	bne.n	8006c54 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	085a      	lsrs	r2, r3, #1
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <HAL_SAI_Init+0x264>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d109      	bne.n	8006c78 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_SAI_Init+0x270>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	e001      	b.n	8006c74 <HAL_SAI_Init+0x274>
 8006c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c74:	623b      	str	r3, [r7, #32]
 8006c76:	e017      	b.n	8006ca8 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d111      	bne.n	8006ca4 <HAL_SAI_Init+0x2a4>
 8006c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c84:	e00f      	b.n	8006ca6 <HAL_SAI_Init+0x2a6>
 8006c86:	bf00      	nop
 8006c88:	40015804 	.word	0x40015804
 8006c8c:	58005404 	.word	0x58005404
 8006c90:	40015824 	.word	0x40015824
 8006c94:	40015800 	.word	0x40015800
 8006c98:	58005424 	.word	0x58005424
 8006c9c:	58005400 	.word	0x58005400
 8006ca0:	cccccccd 	.word	0xcccccccd
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6819      	ldr	r1, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b5b      	ldr	r3, [pc, #364]	; (8006e20 <HAL_SAI_Init+0x420>)
 8006cb4:	400b      	ands	r3, r1
 8006cb6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6819      	ldr	r1, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ccc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006ce0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cec:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	051b      	lsls	r3, r3, #20
 8006cf4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006cfa:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6859      	ldr	r1, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	4b43      	ldr	r3, [pc, #268]	; (8006e24 <HAL_SAI_Init+0x424>)
 8006d16:	400b      	ands	r3, r1
 8006d18:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6859      	ldr	r1, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	69da      	ldr	r2, [r3, #28]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6899      	ldr	r1, [r3, #8]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b39      	ldr	r3, [pc, #228]	; (8006e28 <HAL_SAI_Init+0x428>)
 8006d44:	400b      	ands	r3, r1
 8006d46:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6899      	ldr	r1, [r3, #8]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d52:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d58:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006d5e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006d64:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006d6e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68d9      	ldr	r1, [r3, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006d86:	400b      	ands	r3, r1
 8006d88:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68d9      	ldr	r1, [r3, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d98:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006da0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da6:	3b01      	subs	r3, #1
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a1c      	ldr	r2, [pc, #112]	; (8006e2c <HAL_SAI_Init+0x42c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d004      	beq.n	8006dc8 <HAL_SAI_Init+0x3c8>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a1b      	ldr	r2, [pc, #108]	; (8006e30 <HAL_SAI_Init+0x430>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d119      	bne.n	8006dfc <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dcc:	f023 0201 	bic.w	r2, r3, #1
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d10e      	bne.n	8006dfc <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de6:	3b01      	subs	r3, #1
 8006de8:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006dea:	431a      	orrs	r2, r3
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df4:	f043 0201 	orr.w	r2, r3, #1
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3728      	adds	r7, #40	; 0x28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	f005c010 	.word	0xf005c010
 8006e24:	ffff1ff0 	.word	0xffff1ff0
 8006e28:	fff88000 	.word	0xfff88000
 8006e2c:	40015804 	.word	0x40015804
 8006e30:	58005404 	.word	0x58005404

08006e34 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <SAI_InitI2S+0x2e>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d103      	bne.n	8006e6a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	651a      	str	r2, [r3, #80]	; 0x50
 8006e68:	e002      	b.n	8006e70 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e76:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e7e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e077      	b.n	8006f8a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d107      	bne.n	8006eb0 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006eac:	665a      	str	r2, [r3, #100]	; 0x64
 8006eae:	e006      	b.n	8006ebe <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006eb6:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d84f      	bhi.n	8006f64 <SAI_InitI2S+0x130>
 8006ec4:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <SAI_InitI2S+0x98>)
 8006ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eca:	bf00      	nop
 8006ecc:	08006edd 	.word	0x08006edd
 8006ed0:	08006eff 	.word	0x08006eff
 8006ed4:	08006f21 	.word	0x08006f21
 8006ed8:	08006f43 	.word	0x08006f43
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2280      	movs	r2, #128	; 0x80
 8006ee0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	085b      	lsrs	r3, r3, #1
 8006ef0:	011a      	lsls	r2, r3, #4
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2240      	movs	r2, #64	; 0x40
 8006efa:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006efc:	e035      	b.n	8006f6a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2280      	movs	r2, #128	; 0x80
 8006f02:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	085b      	lsrs	r3, r3, #1
 8006f08:	019a      	lsls	r2, r3, #6
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2280      	movs	r2, #128	; 0x80
 8006f1c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006f1e:	e024      	b.n	8006f6a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	22c0      	movs	r2, #192	; 0xc0
 8006f24:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	085b      	lsrs	r3, r3, #1
 8006f2a:	019a      	lsls	r2, r3, #6
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	085b      	lsrs	r3, r3, #1
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2280      	movs	r2, #128	; 0x80
 8006f3e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006f40:	e013      	b.n	8006f6a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	22e0      	movs	r2, #224	; 0xe0
 8006f46:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	019a      	lsls	r2, r3, #6
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	085b      	lsrs	r3, r3, #1
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2280      	movs	r2, #128	; 0x80
 8006f60:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006f62:	e002      	b.n	8006f6a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	75fb      	strb	r3, [r7, #23]
      break;
 8006f68:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d10b      	bne.n	8006f88 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d102      	bne.n	8006f7c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2210      	movs	r2, #16
 8006f7a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d102      	bne.n	8006f88 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2208      	movs	r2, #8
 8006f86:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	371c      	adds	r7, #28
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop

08006f98 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <SAI_InitPCM+0x2e>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d103      	bne.n	8006fce <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	651a      	str	r2, [r3, #80]	; 0x50
 8006fcc:	e002      	b.n	8006fd4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006fe0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006fe8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ffc:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d103      	bne.n	800700c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	659a      	str	r2, [r3, #88]	; 0x58
 800700a:	e002      	b.n	8007012 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	220d      	movs	r2, #13
 8007010:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b03      	cmp	r3, #3
 8007016:	d837      	bhi.n	8007088 <SAI_InitPCM+0xf0>
 8007018:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <SAI_InitPCM+0x88>)
 800701a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701e:	bf00      	nop
 8007020:	08007031 	.word	0x08007031
 8007024:	08007047 	.word	0x08007047
 8007028:	0800705d 	.word	0x0800705d
 800702c:	08007073 	.word	0x08007073
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2280      	movs	r2, #128	; 0x80
 8007034:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	011a      	lsls	r2, r3, #4
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2240      	movs	r2, #64	; 0x40
 8007042:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007044:	e023      	b.n	800708e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2280      	movs	r2, #128	; 0x80
 800704a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2280      	movs	r2, #128	; 0x80
 8007058:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800705a:	e018      	b.n	800708e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	22c0      	movs	r2, #192	; 0xc0
 8007060:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2280      	movs	r2, #128	; 0x80
 800706e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007070:	e00d      	b.n	800708e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	22e0      	movs	r2, #224	; 0xe0
 8007076:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2280      	movs	r2, #128	; 0x80
 8007084:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007086:	e002      	b.n	800708e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	75fb      	strb	r3, [r7, #23]
      break;
 800708c:	bf00      	nop
  }

  return status;
 800708e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007090:	4618      	mov	r0, r3
 8007092:	371c      	adds	r7, #28
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80070a4:	4b18      	ldr	r3, [pc, #96]	; (8007108 <SAI_Disable+0x6c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a18      	ldr	r2, [pc, #96]	; (800710c <SAI_Disable+0x70>)
 80070aa:	fba2 2303 	umull	r2, r3, r2, r3
 80070ae:	0b1b      	lsrs	r3, r3, #12
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80070c6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10a      	bne.n	80070e4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	72fb      	strb	r3, [r7, #11]
      break;
 80070e2:	e009      	b.n	80070f8 <SAI_Disable+0x5c>
    }
    count--;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e7      	bne.n	80070c8 <SAI_Disable+0x2c>

  return status;
 80070f8:	7afb      	ldrb	r3, [r7, #11]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	24000000 	.word	0x24000000
 800710c:	95cbec1b 	.word	0x95cbec1b

08007110 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e02b      	b.n	800717c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7f9 fa9b 	bl	8000674 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2202      	movs	r2, #2
 8007142:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3304      	adds	r3, #4
 800714e:	4619      	mov	r1, r3
 8007150:	4610      	mov	r0, r2
 8007152:	f000 f9b7 	bl	80074c4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6818      	ldr	r0, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	461a      	mov	r2, r3
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	f000 fa0b 	bl	800757c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007166:	4b07      	ldr	r3, [pc, #28]	; (8007184 <HAL_SDRAM_Init+0x74>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a06      	ldr	r2, [pc, #24]	; (8007184 <HAL_SDRAM_Init+0x74>)
 800716c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007170:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	52004000 	.word	0x52004000

08007188 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800719a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d101      	bne.n	80071a6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80071a2:	2302      	movs	r3, #2
 80071a4:	e021      	b.n	80071ea <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d002      	beq.n	80071b2 <HAL_SDRAM_SendCommand+0x2a>
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	2b05      	cmp	r3, #5
 80071b0:	d118      	bne.n	80071e4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2202      	movs	r2, #2
 80071b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fa44 	bl	8007650 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d104      	bne.n	80071da <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2205      	movs	r2, #5
 80071d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071d8:	e006      	b.n	80071e8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071e2:	e001      	b.n	80071e8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e000      	b.n	80071ea <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b082      	sub	sp, #8
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d101      	bne.n	800720c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007208:	2302      	movs	r3, #2
 800720a:	e016      	b.n	800723a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	d10f      	bne.n	8007238 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f000 fa36 	bl	8007698 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	e000      	b.n	800723a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e10f      	b.n	8007476 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a87      	ldr	r2, [pc, #540]	; (8007480 <HAL_SPI_Init+0x23c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d00f      	beq.n	8007286 <HAL_SPI_Init+0x42>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a86      	ldr	r2, [pc, #536]	; (8007484 <HAL_SPI_Init+0x240>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00a      	beq.n	8007286 <HAL_SPI_Init+0x42>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a84      	ldr	r2, [pc, #528]	; (8007488 <HAL_SPI_Init+0x244>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d005      	beq.n	8007286 <HAL_SPI_Init+0x42>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	2b0f      	cmp	r3, #15
 8007280:	d901      	bls.n	8007286 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e0f7      	b.n	8007476 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f900 	bl	800748c <SPI_GetPacketSize>
 800728c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a7b      	ldr	r2, [pc, #492]	; (8007480 <HAL_SPI_Init+0x23c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00c      	beq.n	80072b2 <HAL_SPI_Init+0x6e>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a79      	ldr	r2, [pc, #484]	; (8007484 <HAL_SPI_Init+0x240>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d007      	beq.n	80072b2 <HAL_SPI_Init+0x6e>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a78      	ldr	r2, [pc, #480]	; (8007488 <HAL_SPI_Init+0x244>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d002      	beq.n	80072b2 <HAL_SPI_Init+0x6e>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d811      	bhi.n	80072d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072b6:	4a72      	ldr	r2, [pc, #456]	; (8007480 <HAL_SPI_Init+0x23c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d009      	beq.n	80072d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a70      	ldr	r2, [pc, #448]	; (8007484 <HAL_SPI_Init+0x240>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d004      	beq.n	80072d0 <HAL_SPI_Init+0x8c>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a6f      	ldr	r2, [pc, #444]	; (8007488 <HAL_SPI_Init+0x244>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d104      	bne.n	80072da <HAL_SPI_Init+0x96>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b10      	cmp	r3, #16
 80072d4:	d901      	bls.n	80072da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e0cd      	b.n	8007476 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d106      	bne.n	80072f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7f9 fe16 	bl	8000f20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0201 	bic.w	r2, r2, #1
 800730a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007316:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007320:	d119      	bne.n	8007356 <HAL_SPI_Init+0x112>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800732a:	d103      	bne.n	8007334 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10c      	bne.n	8007356 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007344:	d107      	bne.n	8007356 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007354:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00f      	beq.n	8007382 <HAL_SPI_Init+0x13e>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	2b06      	cmp	r3, #6
 8007368:	d90b      	bls.n	8007382 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	e007      	b.n	8007392 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007390:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69da      	ldr	r2, [r3, #28]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739a:	431a      	orrs	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a4:	ea42 0103 	orr.w	r1, r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f2:	ea42 0103 	orr.w	r1, r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d113      	bne.n	8007432 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800741c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007430:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0201 	bic.w	r2, r2, #1
 8007440:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	40013000 	.word	0x40013000
 8007484:	40003800 	.word	0x40003800
 8007488:	40003c00 	.word	0x40003c00

0800748c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007498:	095b      	lsrs	r3, r3, #5
 800749a:	3301      	adds	r3, #1
 800749c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	3301      	adds	r3, #1
 80074a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	3307      	adds	r3, #7
 80074aa:	08db      	lsrs	r3, r3, #3
 80074ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	fb02 f303 	mul.w	r3, r2, r3
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
	...

080074c4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d121      	bne.n	800751a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	4b27      	ldr	r3, [pc, #156]	; (8007578 <FMC_SDRAM_Init+0xb4>)
 80074dc:	4013      	ands	r3, r2
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	6851      	ldr	r1, [r2, #4]
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	6892      	ldr	r2, [r2, #8]
 80074e6:	4311      	orrs	r1, r2
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	68d2      	ldr	r2, [r2, #12]
 80074ec:	4311      	orrs	r1, r2
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	6912      	ldr	r2, [r2, #16]
 80074f2:	4311      	orrs	r1, r2
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	6952      	ldr	r2, [r2, #20]
 80074f8:	4311      	orrs	r1, r2
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	6992      	ldr	r2, [r2, #24]
 80074fe:	4311      	orrs	r1, r2
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	69d2      	ldr	r2, [r2, #28]
 8007504:	4311      	orrs	r1, r2
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	6a12      	ldr	r2, [r2, #32]
 800750a:	4311      	orrs	r1, r2
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007510:	430a      	orrs	r2, r1
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	e026      	b.n	8007568 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	69d9      	ldr	r1, [r3, #28]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	4319      	orrs	r1, r3
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	430b      	orrs	r3, r1
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	4b0e      	ldr	r3, [pc, #56]	; (8007578 <FMC_SDRAM_Init+0xb4>)
 800753e:	4013      	ands	r3, r2
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	6851      	ldr	r1, [r2, #4]
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	6892      	ldr	r2, [r2, #8]
 8007548:	4311      	orrs	r1, r2
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	68d2      	ldr	r2, [r2, #12]
 800754e:	4311      	orrs	r1, r2
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	6912      	ldr	r2, [r2, #16]
 8007554:	4311      	orrs	r1, r2
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	6952      	ldr	r2, [r2, #20]
 800755a:	4311      	orrs	r1, r2
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	6992      	ldr	r2, [r2, #24]
 8007560:	430a      	orrs	r2, r1
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	ffff8000 	.word	0xffff8000

0800757c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d128      	bne.n	80075e0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	1e59      	subs	r1, r3, #1
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	4319      	orrs	r1, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	4319      	orrs	r1, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	031b      	lsls	r3, r3, #12
 80075b8:	4319      	orrs	r1, r3
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	3b01      	subs	r3, #1
 80075c0:	041b      	lsls	r3, r3, #16
 80075c2:	4319      	orrs	r1, r3
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	3b01      	subs	r3, #1
 80075ca:	051b      	lsls	r3, r3, #20
 80075cc:	4319      	orrs	r1, r3
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	061b      	lsls	r3, r3, #24
 80075d6:	430b      	orrs	r3, r1
 80075d8:	431a      	orrs	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	609a      	str	r2, [r3, #8]
 80075de:	e02d      	b.n	800763c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	4b19      	ldr	r3, [pc, #100]	; (800764c <FMC_SDRAM_Timing_Init+0xd0>)
 80075e6:	4013      	ands	r3, r2
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	68d2      	ldr	r2, [r2, #12]
 80075ec:	3a01      	subs	r2, #1
 80075ee:	0311      	lsls	r1, r2, #12
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	6952      	ldr	r2, [r2, #20]
 80075f4:	3a01      	subs	r2, #1
 80075f6:	0512      	lsls	r2, r2, #20
 80075f8:	430a      	orrs	r2, r1
 80075fa:	431a      	orrs	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	1e59      	subs	r1, r3, #1
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	3b01      	subs	r3, #1
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	4319      	orrs	r1, r3
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	3b01      	subs	r3, #1
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	4319      	orrs	r1, r3
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	3b01      	subs	r3, #1
 8007628:	041b      	lsls	r3, r3, #16
 800762a:	4319      	orrs	r1, r3
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	3b01      	subs	r3, #1
 8007632:	061b      	lsls	r3, r3, #24
 8007634:	430b      	orrs	r3, r1
 8007636:	431a      	orrs	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	ff0f0fff 	.word	0xff0f0fff

08007650 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	4b0c      	ldr	r3, [pc, #48]	; (8007694 <FMC_SDRAM_SendCommand+0x44>)
 8007662:	4013      	ands	r3, r2
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	6811      	ldr	r1, [r2, #0]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	6852      	ldr	r2, [r2, #4]
 800766c:	4311      	orrs	r1, r2
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	6892      	ldr	r2, [r2, #8]
 8007672:	3a01      	subs	r2, #1
 8007674:	0152      	lsls	r2, r2, #5
 8007676:	4311      	orrs	r1, r2
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	68d2      	ldr	r2, [r2, #12]
 800767c:	0252      	lsls	r2, r2, #9
 800767e:	430a      	orrs	r2, r1
 8007680:	431a      	orrs	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	ffc00000 	.word	0xffc00000

08007698 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	695a      	ldr	r2, [r3, #20]
 80076a6:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	0052      	lsls	r2, r2, #1
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	ffffc001 	.word	0xffffc001

080076c8 <memset>:
 80076c8:	4402      	add	r2, r0
 80076ca:	4603      	mov	r3, r0
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d100      	bne.n	80076d2 <memset+0xa>
 80076d0:	4770      	bx	lr
 80076d2:	f803 1b01 	strb.w	r1, [r3], #1
 80076d6:	e7f9      	b.n	80076cc <memset+0x4>

080076d8 <__libc_init_array>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	4d0d      	ldr	r5, [pc, #52]	; (8007710 <__libc_init_array+0x38>)
 80076dc:	4c0d      	ldr	r4, [pc, #52]	; (8007714 <__libc_init_array+0x3c>)
 80076de:	1b64      	subs	r4, r4, r5
 80076e0:	10a4      	asrs	r4, r4, #2
 80076e2:	2600      	movs	r6, #0
 80076e4:	42a6      	cmp	r6, r4
 80076e6:	d109      	bne.n	80076fc <__libc_init_array+0x24>
 80076e8:	4d0b      	ldr	r5, [pc, #44]	; (8007718 <__libc_init_array+0x40>)
 80076ea:	4c0c      	ldr	r4, [pc, #48]	; (800771c <__libc_init_array+0x44>)
 80076ec:	f000 f818 	bl	8007720 <_init>
 80076f0:	1b64      	subs	r4, r4, r5
 80076f2:	10a4      	asrs	r4, r4, #2
 80076f4:	2600      	movs	r6, #0
 80076f6:	42a6      	cmp	r6, r4
 80076f8:	d105      	bne.n	8007706 <__libc_init_array+0x2e>
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007700:	4798      	blx	r3
 8007702:	3601      	adds	r6, #1
 8007704:	e7ee      	b.n	80076e4 <__libc_init_array+0xc>
 8007706:	f855 3b04 	ldr.w	r3, [r5], #4
 800770a:	4798      	blx	r3
 800770c:	3601      	adds	r6, #1
 800770e:	e7f2      	b.n	80076f6 <__libc_init_array+0x1e>
 8007710:	08007750 	.word	0x08007750
 8007714:	08007750 	.word	0x08007750
 8007718:	08007750 	.word	0x08007750
 800771c:	08007754 	.word	0x08007754

08007720 <_init>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	bf00      	nop
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr

0800772c <_fini>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	bf00      	nop
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr
