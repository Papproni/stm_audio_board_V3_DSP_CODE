
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008918  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008be4  08008be4  00018be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008bfc  08008bfc  00018bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008c00  08008c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08008c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000394  24000010  08008c14  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240003a4  08008c14  000203a4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010978  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000024fe  00000000  00000000  000309f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d60  00000000  00000000  00032ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a29  00000000  00000000  00033c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000327c0  00000000  00000000  00034681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000128c9  00000000  00000000  00066e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001430f7  00000000  00000000  0007970a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003710  00000000  00000000  001bc804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000092  00000000  00000000  001bff14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08008bcc 	.word	0x08008bcc

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08008bcc 	.word	0x08008bcc

0800030c <ad1939_write_reg>:
#include "AD1939_driver.h"


// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af02      	add	r7, sp, #8
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
	int8_t retval = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	73fb      	strb	r3, [r7, #15]
	TXdata[0] = AD1939_Global_Address_Write;
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <ad1939_write_reg+0x4c>)
 8000322:	2208      	movs	r2, #8
 8000324:	701a      	strb	r2, [r3, #0]
	TXdata[1] = reg_address;
 8000326:	4a0c      	ldr	r2, [pc, #48]	; (8000358 <ad1939_write_reg+0x4c>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	7053      	strb	r3, [r2, #1]
	TXdata[2] = data;
 800032c:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <ad1939_write_reg+0x4c>)
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	7093      	strb	r3, [r2, #2]

//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <ad1939_write_reg+0x50>)
 8000334:	6818      	ldr	r0, [r3, #0]
 8000336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2303      	movs	r3, #3
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <ad1939_write_reg+0x54>)
 8000340:	4905      	ldr	r1, [pc, #20]	; (8000358 <ad1939_write_reg+0x4c>)
 8000342:	f007 fef1 	bl	8008128 <HAL_SPI_TransmitReceive>
 8000346:	4603      	mov	r3, r0
 8000348:	73fb      	strb	r3, [r7, #15]
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 //HAL_Delay(10);
	return retval;
 800034a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	24000030 	.word	0x24000030
 800035c:	2400002c 	.word	0x2400002c
 8000360:	24000034 	.word	0x24000034

08000364 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af02      	add	r7, sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <ad1939_pll_locked+0x3c>)
 800036c:	2209      	movs	r2, #9
 800036e:	701a      	strb	r2, [r3, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000372:	2201      	movs	r2, #1
 8000374:	705a      	strb	r2, [r3, #1]
	TXdata[2] = 0b00000100;
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000378:	2204      	movs	r2, #4
 800037a:	709a      	strb	r2, [r3, #2]
	HAL_Delay(10);
 800037c:	200a      	movs	r0, #10
 800037e:	f000 ffdd 	bl	800133c <HAL_Delay>
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <ad1939_pll_locked+0x40>)
 8000384:	6818      	ldr	r0, [r3, #0]
 8000386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2303      	movs	r3, #3
 800038e:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <ad1939_pll_locked+0x44>)
 8000390:	4903      	ldr	r1, [pc, #12]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000392:	f007 fec9 	bl	8008128 <HAL_SPI_TransmitReceive>
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 return 0;
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	24000030 	.word	0x24000030
 80003a4:	2400002c 	.word	0x2400002c
 80003a8:	24000034 	.word	0x24000034

080003ac <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
    AD1939_spi = hspi_codec;
 80003b4:	4a3d      	ldr	r2, [pc, #244]	; (80004ac <ad1939_init+0x100>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6013      	str	r3, [r2, #0]

    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 80003ba:	21be      	movs	r1, #190	; 0xbe
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff ffa5 	bl	800030c <ad1939_write_reg>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d002      	beq.n	80003ce <ad1939_init+0x22>
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295
 80003cc:	e069      	b.n	80004a2 <ad1939_init+0xf6>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 80003ce:	2104      	movs	r1, #4
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff9b 	bl	800030c <ad1939_write_reg>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d002      	beq.n	80003e2 <ad1939_init+0x36>
 80003dc:	f04f 33ff 	mov.w	r3, #4294967295
 80003e0:	e05f      	b.n	80004a2 <ad1939_init+0xf6>





    HAL_Delay(100);
 80003e2:	2064      	movs	r0, #100	; 0x64
 80003e4:	f000 ffaa 	bl	800133c <HAL_Delay>

    if(ad1939_pll_locked()){
 80003e8:	f7ff ffbc 	bl	8000364 <ad1939_pll_locked>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b01000000)) return -1;
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	2002      	movs	r0, #2
 80003f0:	f7ff ff8c 	bl	800030c <ad1939_write_reg>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d002      	beq.n	8000400 <ad1939_init+0x54>
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
 80003fe:	e050      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000100)) return -1; // Slave setup
 8000400:	2104      	movs	r1, #4
 8000402:	2003      	movs	r0, #3
 8000404:	f7ff ff82 	bl	800030c <ad1939_write_reg>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <ad1939_init+0x68>
 800040e:	f04f 33ff 	mov.w	r3, #4294967295
 8000412:	e046      	b.n	80004a2 <ad1939_init+0xf6>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 8000414:	2100      	movs	r1, #0
 8000416:	2004      	movs	r0, #4
 8000418:	f7ff ff78 	bl	800030c <ad1939_write_reg>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d002      	beq.n	8000428 <ad1939_init+0x7c>
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	e03c      	b.n	80004a2 <ad1939_init+0xf6>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 8000428:	2100      	movs	r1, #0
 800042a:	2005      	movs	r0, #5
 800042c:	f7ff ff6e 	bl	800030c <ad1939_write_reg>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d002      	beq.n	800043c <ad1939_init+0x90>
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
 800043a:	e032      	b.n	80004a2 <ad1939_init+0xf6>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 800043c:	2100      	movs	r1, #0
 800043e:	2008      	movs	r0, #8
 8000440:	f7ff ff64 	bl	800030c <ad1939_write_reg>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d002      	beq.n	8000450 <ad1939_init+0xa4>
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
 800044e:	e028      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 8000450:	2100      	movs	r1, #0
 8000452:	2009      	movs	r0, #9
 8000454:	f7ff ff5a 	bl	800030c <ad1939_write_reg>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d002      	beq.n	8000464 <ad1939_init+0xb8>
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	e01e      	b.n	80004a2 <ad1939_init+0xf6>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000464:	2100      	movs	r1, #0
 8000466:	200e      	movs	r0, #14
 8000468:	f7ff ff50 	bl	800030c <ad1939_write_reg>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d002      	beq.n	8000478 <ad1939_init+0xcc>
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	e014      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0b00100000 )) return -1;
 8000478:	2120      	movs	r1, #32
 800047a:	200f      	movs	r0, #15
 800047c:	f7ff ff46 	bl	800030c <ad1939_write_reg>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <ad1939_init+0xe0>
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e00a      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 800048c:	2100      	movs	r1, #0
 800048e:	2010      	movs	r0, #16
 8000490:	f7ff ff3c 	bl	800030c <ad1939_write_reg>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d002      	beq.n	80004a0 <ad1939_init+0xf4>
 800049a:	f04f 33ff 	mov.w	r3, #4294967295
 800049e:	e000      	b.n	80004a2 <ad1939_init+0xf6>



    return 0; // Return 0 if all writes are successful
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	2400002c 	.word	0x2400002c

080004b0 <HAL_SAI_TxCpltCallback>:
volatile uint8_t 			ADC_HALF_COMPLETE_FLAG = 0;
volatile uint8_t 			DAC_HALF_COMPLETE_FLAG = 0;
volatile uint32_t input_i2s_buffer_au32[16];
volatile uint32_t output_i2s_buffer_au32[16];

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 0;
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <HAL_SAI_TxCpltCallback+0x1c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	24000315 	.word	0x24000315

080004d0 <HAL_SAI_TxHalfCpltCallback>:
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 1;
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <HAL_SAI_TxHalfCpltCallback+0x1c>)
 80004da:	2201      	movs	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	24000315 	.word	0x24000315

080004f0 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 0;
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <HAL_SAI_RxCpltCallback+0x2c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
	output_i2s_buffer_au32[14] = input_i2s_buffer_au32[10];
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_SAI_RxCpltCallback+0x30>)
 8000500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000502:	4a08      	ldr	r2, [pc, #32]	; (8000524 <HAL_SAI_RxCpltCallback+0x34>)
 8000504:	6393      	str	r3, [r2, #56]	; 0x38
	output_i2s_buffer_au32[15] = input_i2s_buffer_au32[11];
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_SAI_RxCpltCallback+0x30>)
 8000508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050a:	4a06      	ldr	r2, [pc, #24]	; (8000524 <HAL_SAI_RxCpltCallback+0x34>)
 800050c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	24000314 	.word	0x24000314
 8000520:	24000318 	.word	0x24000318
 8000524:	24000358 	.word	0x24000358

08000528 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 1;
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_SAI_RxHalfCpltCallback+0x2c>)
 8000532:	2201      	movs	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
	output_i2s_buffer_au32[6] = input_i2s_buffer_au32[2];
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_SAI_RxHalfCpltCallback+0x30>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <HAL_SAI_RxHalfCpltCallback+0x34>)
 800053c:	6193      	str	r3, [r2, #24]
	output_i2s_buffer_au32[7] = input_i2s_buffer_au32[3];
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_SAI_RxHalfCpltCallback+0x30>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	4a06      	ldr	r2, [pc, #24]	; (800055c <HAL_SAI_RxHalfCpltCallback+0x34>)
 8000544:	61d3      	str	r3, [r2, #28]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	24000314 	.word	0x24000314
 8000558:	24000318 	.word	0x24000318
 800055c:	24000358 	.word	0x24000358

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fe57 	bl	8001218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f85b 	bl	8000624 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800056e:	f000 f8c7 	bl	8000700 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 fa71 	bl	8000a58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000576:	f000 f9ad 	bl	80008d4 <MX_DMA_Init>
  MX_SAI1_Init();
 800057a:	f000 f8f5 	bl	8000768 <MX_SAI1_Init>
  MX_SPI1_Init();
 800057e:	f000 f953 	bl	8000828 <MX_SPI1_Init>
  MX_FMC_Init();
 8000582:	f000 f9df 	bl	8000944 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  // init SAI interface
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, output_i2s_buffer_au32, 	16);
 8000586:	2210      	movs	r2, #16
 8000588:	4921      	ldr	r1, [pc, #132]	; (8000610 <main+0xb0>)
 800058a:	4822      	ldr	r0, [pc, #136]	; (8000614 <main+0xb4>)
 800058c:	f007 f868 	bl	8007660 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, input_i2s_buffer_au32, 	16);
 8000590:	2210      	movs	r2, #16
 8000592:	4921      	ldr	r1, [pc, #132]	; (8000618 <main+0xb8>)
 8000594:	4821      	ldr	r0, [pc, #132]	; (800061c <main+0xbc>)
 8000596:	f007 f919 	bl	80077cc <HAL_SAI_Receive_DMA>

  // init CODEC
	ad1939_init(&hspi1);
 800059a:	4821      	ldr	r0, [pc, #132]	; (8000620 <main+0xc0>)
 800059c:	f7ff ff06 	bl	80003ac <ad1939_init>
  while (1)
  {
	  uint32_t fmctestStart;
	  uint32_t fmctestStop;

	  fmctestStart = HAL_GetTick();
 80005a0:	f000 fec0 	bl	8001324 <HAL_GetTick>
 80005a4:	60f8      	str	r0, [r7, #12]

	  for(uint32_t counter = 0; counter<SDRAM_SIZE; counter++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	e007      	b.n	80005bc <main+0x5c>
		  *(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t) 0x0;
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	  for(uint32_t counter = 0; counter<SDRAM_SIZE; counter++){
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	3301      	adds	r3, #1
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005c2:	d3f3      	bcc.n	80005ac <main+0x4c>
	  }

	  fmctestStop = HAL_GetTick();
 80005c4:	f000 feae 	bl	8001324 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]

	  HAL_Delay(50);
 80005ca:	2032      	movs	r0, #50	; 0x32
 80005cc:	f000 feb6 	bl	800133c <HAL_Delay>

	  fmctestStart = HAL_GetTick();
 80005d0:	f000 fea8 	bl	8001324 <HAL_GetTick>
 80005d4:	60f8      	str	r0, [r7, #12]

	  for(uint32_t counter = 0; counter<SDRAM_SIZE; counter++){
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	e007      	b.n	80005ec <main+0x8c>
		  *(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t) 0x11;
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80005e2:	2211      	movs	r2, #17
 80005e4:	701a      	strb	r2, [r3, #0]
	  for(uint32_t counter = 0; counter<SDRAM_SIZE; counter++){
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	3301      	adds	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005f2:	d3f3      	bcc.n	80005dc <main+0x7c>
	  }

	  fmctestStop = HAL_GetTick()-fmctestStart;
 80005f4:	f000 fe96 	bl	8001324 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	60bb      	str	r3, [r7, #8]
	  uint8_t var = *(__IO uint8_t*)(SDRAM_ADDRESS_START);
 8000600:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(50);
 8000608:	2032      	movs	r0, #50	; 0x32
 800060a:	f000 fe97 	bl	800133c <HAL_Delay>
  {
 800060e:	e7c7      	b.n	80005a0 <main+0x40>
 8000610:	24000358 	.word	0x24000358
 8000614:	24000038 	.word	0x24000038
 8000618:	24000318 	.word	0x24000318
 800061c:	240000d0 	.word	0x240000d0
 8000620:	24000258 	.word	0x24000258

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09c      	sub	sp, #112	; 0x70
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062e:	224c      	movs	r2, #76	; 0x4c
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f008 fa9e 	bl	8008b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2220      	movs	r2, #32
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f008 fa98 	bl	8008b74 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000644:	2002      	movs	r0, #2
 8000646:	f003 fa4f 	bl	8003ae8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <SystemClock_Config+0xd8>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4a2a      	ldr	r2, [pc, #168]	; (80006fc <SystemClock_Config+0xd8>)
 8000654:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000658:	6193      	str	r3, [r2, #24]
 800065a:	4b28      	ldr	r3, [pc, #160]	; (80006fc <SystemClock_Config+0xd8>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000666:	bf00      	nop
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <SystemClock_Config+0xd8>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000674:	d1f8      	bne.n	8000668 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000676:	2301      	movs	r3, #1
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000684:	2302      	movs	r3, #2
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800068c:	232c      	movs	r3, #44	; 0x2c
 800068e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000690:	2301      	movs	r3, #1
 8000692:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000698:	2302      	movs	r3, #2
 800069a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800069c:	230c      	movs	r3, #12
 800069e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ac:	4618      	mov	r0, r3
 80006ae:	f003 fa55 	bl	8003b5c <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b8:	f000 fa5e 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	233f      	movs	r3, #63	; 0x3f
 80006be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2303      	movs	r3, #3
 80006c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006c8:	2308      	movs	r3, #8
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006d0:	2340      	movs	r3, #64	; 0x40
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006da:	2340      	movs	r3, #64	; 0x40
 80006dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2103      	movs	r1, #3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 fe14 	bl	8004310 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80006ee:	f000 fa43 	bl	8000b78 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3770      	adds	r7, #112	; 0x70
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	58024800 	.word	0x58024800

08000700 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b0ae      	sub	sp, #184	; 0xb8
 8000704:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	22b8      	movs	r2, #184	; 0xb8
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f008 fa31 	bl	8008b74 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 8000712:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8000716:	f04f 0300 	mov.w	r3, #0
 800071a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 800071e:	2302      	movs	r3, #2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 8000722:	230f      	movs	r3, #15
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000732:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000738:	2300      	movs	r3, #0
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 800073c:	f640 3386 	movw	r3, #2950	; 0xb86
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8000742:	2302      	movs	r3, #2
 8000744:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4618      	mov	r0, r3
 8000750:	f004 f954 	bl	80049fc <HAL_RCCEx_PeriphCLKConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 800075a:	f000 fa0d 	bl	8000b78 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	37b8      	adds	r7, #184	; 0xb8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800076c:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <MX_SAI1_Init+0xb0>)
 800076e:	4a2b      	ldr	r2, [pc, #172]	; (800081c <MX_SAI1_Init+0xb4>)
 8000770:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_SAI1_Init+0xb0>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <MX_SAI1_Init+0xb0>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <MX_SAI1_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000784:	4b24      	ldr	r3, [pc, #144]	; (8000818 <MX_SAI1_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <MX_SAI1_Init+0xb0>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_SAI1_Init+0xb0>)
 8000792:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000796:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_SAI1_Init+0xb0>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <MX_SAI1_Init+0xb0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_SAI1_Init+0xb0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_SAI1_Init+0xb0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 80007b0:	2308      	movs	r3, #8
 80007b2:	2202      	movs	r2, #2
 80007b4:	2100      	movs	r1, #0
 80007b6:	4818      	ldr	r0, [pc, #96]	; (8000818 <MX_SAI1_Init+0xb0>)
 80007b8:	f006 fd06 	bl	80071c8 <HAL_SAI_InitProtocol>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80007c2:	f000 f9d9 	bl	8000b78 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_SAI1_Init+0xb8>)
 80007c8:	4a16      	ldr	r2, [pc, #88]	; (8000824 <MX_SAI1_Init+0xbc>)
 80007ca:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_SAI1_Init+0xb8>)
 80007ce:	2203      	movs	r2, #3
 80007d0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_SAI1_Init+0xb8>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_SAI1_Init+0xb8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_SAI1_Init+0xb8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_SAI1_Init+0xb8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_SAI1_Init+0xb8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_SAI1_Init+0xb8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_SAI1_Init+0xb8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 80007fc:	2308      	movs	r3, #8
 80007fe:	2202      	movs	r2, #2
 8000800:	2100      	movs	r1, #0
 8000802:	4807      	ldr	r0, [pc, #28]	; (8000820 <MX_SAI1_Init+0xb8>)
 8000804:	f006 fce0 	bl	80071c8 <HAL_SAI_InitProtocol>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 800080e:	f000 f9b3 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	24000038 	.word	0x24000038
 800081c:	40015804 	.word	0x40015804
 8000820:	240000d0 	.word	0x240000d0
 8000824:	40015824 	.word	0x40015824

08000828 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800082c:	4b27      	ldr	r3, [pc, #156]	; (80008cc <MX_SPI1_Init+0xa4>)
 800082e:	4a28      	ldr	r2, [pc, #160]	; (80008d0 <MX_SPI1_Init+0xa8>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_SPI1_Init+0xa4>)
 8000834:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000838:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_SPI1_Init+0xa4>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_SPI1_Init+0xa4>)
 8000842:	2207      	movs	r2, #7
 8000844:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_SPI1_Init+0xa4>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_SPI1_Init+0xa4>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_SPI1_Init+0xa4>)
 8000854:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000858:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_SPI1_Init+0xa4>)
 800085c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000860:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_SPI1_Init+0xa4>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_SPI1_Init+0xa4>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_SPI1_Init+0xa4>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_SPI1_Init+0xa4>)
 8000876:	2200      	movs	r2, #0
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_SPI1_Init+0xa4>)
 800087c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000880:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_SPI1_Init+0xa4>)
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_SPI1_Init+0xa4>)
 800088a:	2200      	movs	r2, #0
 800088c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_SPI1_Init+0xa4>)
 8000890:	2200      	movs	r2, #0
 8000892:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_SPI1_Init+0xa4>)
 8000896:	2200      	movs	r2, #0
 8000898:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_SPI1_Init+0xa4>)
 800089c:	2200      	movs	r2, #0
 800089e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_SPI1_Init+0xa4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_SPI1_Init+0xa4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_SPI1_Init+0xa4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_SPI1_Init+0xa4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_SPI1_Init+0xa4>)
 80008ba:	f007 fb11 	bl	8007ee0 <HAL_SPI_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80008c4:	f000 f958 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	24000258 	.word	0x24000258
 80008d0:	40013000 	.word	0x40013000

080008d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_DMA_Init+0x6c>)
 80008dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <MX_DMA_Init+0x6c>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_DMA_Init+0x6c>)
 80008ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_DMA_Init+0x6c>)
 80008fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <MX_DMA_Init+0x6c>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <MX_DMA_Init+0x6c>)
 800090a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	200b      	movs	r0, #11
 800091c:	f000 fe0d 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000920:	200b      	movs	r0, #11
 8000922:	f000 fe24 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2038      	movs	r0, #56	; 0x38
 800092c:	f000 fe05 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000930:	2038      	movs	r0, #56	; 0x38
 8000932:	f000 fe1c 	bl	800156e <HAL_NVIC_EnableIRQ>

}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	58024400 	.word	0x58024400

08000944 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800095e:	4b3c      	ldr	r3, [pc, #240]	; (8000a50 <MX_FMC_Init+0x10c>)
 8000960:	4a3c      	ldr	r2, [pc, #240]	; (8000a54 <MX_FMC_Init+0x110>)
 8000962:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000964:	4b3a      	ldr	r3, [pc, #232]	; (8000a50 <MX_FMC_Init+0x10c>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800096a:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <MX_FMC_Init+0x10c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000970:	4b37      	ldr	r3, [pc, #220]	; (8000a50 <MX_FMC_Init+0x10c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000976:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <MX_FMC_Init+0x10c>)
 8000978:	2210      	movs	r2, #16
 800097a:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 800097c:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <MX_FMC_Init+0x10c>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000982:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <MX_FMC_Init+0x10c>)
 8000984:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000988:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800098a:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <MX_FMC_Init+0x10c>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000990:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <MX_FMC_Init+0x10c>)
 8000992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000996:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000998:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <MX_FMC_Init+0x10c>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 800099e:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <MX_FMC_Init+0x10c>)
 80009a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009aa:	2307      	movs	r3, #7
 80009ac:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 80009ae:	2305      	movs	r3, #5
 80009b0:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 80009b2:	2306      	movs	r3, #6
 80009b4:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 80009b6:	2303      	movs	r3, #3
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4821      	ldr	r0, [pc, #132]	; (8000a50 <MX_FMC_Init+0x10c>)
 80009ca:	f007 f9ef 	bl	8007dac <HAL_SDRAM_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 80009d4:	f000 f8d0 	bl	8000b78 <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
   FMC_SDRAM_CommandTypeDef Command;
   /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
   /* Step 3: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 80009d8:	2301      	movs	r3, #1
 80009da:	607b      	str	r3, [r7, #4]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1; /* configure the Target Bank bits */
 80009dc:	2310      	movs	r3, #16
 80009de:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber      = 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009ee:	4619      	mov	r1, r3
 80009f0:	4817      	ldr	r0, [pc, #92]	; (8000a50 <MX_FMC_Init+0x10c>)
 80009f2:	f007 fa17 	bl	8007e24 <HAL_SDRAM_SendCommand>
    HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 fca0 	bl	800133c <HAL_Delay>
    /* Step 5: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 80009fc:	2302      	movs	r3, #2
 80009fe:	607b      	str	r3, [r7, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a06:	4619      	mov	r1, r3
 8000a08:	4811      	ldr	r0, [pc, #68]	; (8000a50 <MX_FMC_Init+0x10c>)
 8000a0a:	f007 fa0b 	bl	8007e24 <HAL_SDRAM_SendCommand>
    /* Step 6: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000a0e:	2303      	movs	r3, #3
 8000a10:	607b      	str	r3, [r7, #4]
    Command.AutoRefreshNumber      = 2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	60fb      	str	r3, [r7, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480c      	ldr	r0, [pc, #48]	; (8000a50 <MX_FMC_Init+0x10c>)
 8000a20:	f007 fa00 	bl	8007e24 <HAL_SDRAM_SendCommand>
    /* Step 7: Program the external memory mode register */
    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000a24:	2304      	movs	r3, #4
 8000a26:	607b      	str	r3, [r7, #4]
    Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000a28:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000a2c:	613b      	str	r3, [r7, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_FMC_Init+0x10c>)
 8000a38:	f007 f9f4 	bl	8007e24 <HAL_SDRAM_SendCommand>
    /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
    /* Set the device refresh rate
     * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
             = [(32ms/2048) * 270/2MHz] - 20 = 2089*/

    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2090);
 8000a3c:	f640 012a 	movw	r1, #2090	; 0x82a
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <MX_FMC_Init+0x10c>)
 8000a42:	f007 fa24 	bl	8007e8e <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000a46:	bf00      	nop
 8000a48:	3730      	adds	r7, #48	; 0x30
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	240002e0 	.word	0x240002e0
 8000a54:	52004140 	.word	0x52004140

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08c      	sub	sp, #48	; 0x30
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a6e:	4b40      	ldr	r3, [pc, #256]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	4a3e      	ldr	r2, [pc, #248]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7e:	4b3c      	ldr	r3, [pc, #240]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	f003 0310 	and.w	r3, r3, #16
 8000a88:	61bb      	str	r3, [r7, #24]
 8000a8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8c:	4b38      	ldr	r3, [pc, #224]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	4a37      	ldr	r2, [pc, #220]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000a94:	f043 0320 	orr.w	r3, r3, #32
 8000a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9c:	4b34      	ldr	r3, [pc, #208]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	f003 0320 	and.w	r3, r3, #32
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	4a28      	ldr	r2, [pc, #160]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	4a20      	ldr	r2, [pc, #128]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af6:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000b2a:	f043 0308 	orr.w	r3, r3, #8
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_GPIO_Init+0x118>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2120      	movs	r1, #32
 8000b44:	480b      	ldr	r0, [pc, #44]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000b46:	f002 ffb5 	bl	8003ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b4a:	2320      	movs	r3, #32
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000b62:	f002 fdff 	bl	8003764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b66:	bf00      	nop
 8000b68:	3730      	adds	r7, #48	; 0x30
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	58024400 	.word	0x58024400
 8000b74:	58021800 	.word	0x58021800

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_MspInit+0x30>)
 8000b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b90:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x30>)
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x30>)
 8000b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	58024400 	.word	0x58024400

08000bb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a3a      	ldr	r2, [pc, #232]	; (8000cc0 <HAL_SPI_MspInit+0x108>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d16d      	bne.n	8000cb6 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bda:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <HAL_SPI_MspInit+0x10c>)
 8000bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000be0:	4a38      	ldr	r2, [pc, #224]	; (8000cc4 <HAL_SPI_MspInit+0x10c>)
 8000be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000be6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000bea:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <HAL_SPI_MspInit+0x10c>)
 8000bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <HAL_SPI_MspInit+0x10c>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <HAL_SPI_MspInit+0x10c>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c08:	4b2e      	ldr	r3, [pc, #184]	; (8000cc4 <HAL_SPI_MspInit+0x10c>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	4b2b      	ldr	r3, [pc, #172]	; (8000cc4 <HAL_SPI_MspInit+0x10c>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4a29      	ldr	r2, [pc, #164]	; (8000cc4 <HAL_SPI_MspInit+0x10c>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <HAL_SPI_MspInit+0x10c>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <HAL_SPI_MspInit+0x10c>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <HAL_SPI_MspInit+0x10c>)
 8000c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <HAL_SPI_MspInit+0x10c>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 8000c52:	f248 0340 	movw	r3, #32832	; 0x8040
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c64:	2305      	movs	r3, #5
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4816      	ldr	r0, [pc, #88]	; (8000cc8 <HAL_SPI_MspInit+0x110>)
 8000c70:	f002 fd78 	bl	8003764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c84:	2305      	movs	r3, #5
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480f      	ldr	r0, [pc, #60]	; (8000ccc <HAL_SPI_MspInit+0x114>)
 8000c90:	f002 fd68 	bl	8003764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <HAL_SPI_MspInit+0x118>)
 8000cb2:	f002 fd57 	bl	8003764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3730      	adds	r7, #48	; 0x30
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40013000 	.word	0x40013000
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58020000 	.word	0x58020000
 8000ccc:	58020c00 	.word	0x58020c00
 8000cd0:	58021800 	.word	0x58021800

08000cd4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0b6      	sub	sp, #216	; 0xd8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000cda:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000cea:	4b5b      	ldr	r3, [pc, #364]	; (8000e58 <HAL_FMC_MspInit+0x184>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f040 80ae 	bne.w	8000e50 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 8000cf4:	4b58      	ldr	r3, [pc, #352]	; (8000e58 <HAL_FMC_MspInit+0x184>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	22b8      	movs	r2, #184	; 0xb8
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f007 ff36 	bl	8008b74 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000d08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f003 fe6d 	bl	80049fc <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000d28:	f7ff ff26 	bl	8000b78 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d2c:	4b4b      	ldr	r3, [pc, #300]	; (8000e5c <HAL_FMC_MspInit+0x188>)
 8000d2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d32:	4a4a      	ldr	r2, [pc, #296]	; (8000e5c <HAL_FMC_MspInit+0x188>)
 8000d34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d38:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000d3c:	4b47      	ldr	r3, [pc, #284]	; (8000e5c <HAL_FMC_MspInit+0x188>)
 8000d3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d4a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d64:	230c      	movs	r3, #12
 8000d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d6a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	483b      	ldr	r0, [pc, #236]	; (8000e60 <HAL_FMC_MspInit+0x18c>)
 8000d72:	f002 fcf7 	bl	8003764 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000d76:	230d      	movs	r3, #13
 8000d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d8e:	230c      	movs	r3, #12
 8000d90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d94:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4832      	ldr	r0, [pc, #200]	; (8000e64 <HAL_FMC_MspInit+0x190>)
 8000d9c:	f002 fce2 	bl	8003764 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000da0:	2330      	movs	r3, #48	; 0x30
 8000da2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000db8:	230c      	movs	r3, #12
 8000dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <HAL_FMC_MspInit+0x194>)
 8000dc6:	f002 fccd 	bl	8003764 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8000dca:	f248 1311 	movw	r3, #33041	; 0x8111
 8000dce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000de4:	230c      	movs	r3, #12
 8000de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000dee:	4619      	mov	r1, r3
 8000df0:	481e      	ldr	r0, [pc, #120]	; (8000e6c <HAL_FMC_MspInit+0x198>)
 8000df2:	f002 fcb7 	bl	8003764 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000df6:	f24e 7383 	movw	r3, #59267	; 0xe783
 8000dfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e10:	230c      	movs	r3, #12
 8000e12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e16:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4814      	ldr	r0, [pc, #80]	; (8000e70 <HAL_FMC_MspInit+0x19c>)
 8000e1e:	f002 fca1 	bl	8003764 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e22:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e42:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e46:	4619      	mov	r1, r3
 8000e48:	480a      	ldr	r0, [pc, #40]	; (8000e74 <HAL_FMC_MspInit+0x1a0>)
 8000e4a:	f002 fc8b 	bl	8003764 <HAL_GPIO_Init>
 8000e4e:	e000      	b.n	8000e52 <HAL_FMC_MspInit+0x17e>
    return;
 8000e50:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e52:	37d8      	adds	r7, #216	; 0xd8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	24000398 	.word	0x24000398
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58021400 	.word	0x58021400
 8000e64:	58020800 	.word	0x58020800
 8000e68:	58020000 	.word	0x58020000
 8000e6c:	58021800 	.word	0x58021800
 8000e70:	58021000 	.word	0x58021000
 8000e74:	58020c00 	.word	0x58020c00

08000e78 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000e80:	f7ff ff28 	bl	8000cd4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a66      	ldr	r2, [pc, #408]	; (8001034 <HAL_SAI_MspInit+0x1a8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d160      	bne.n	8000f60 <HAL_SAI_MspInit+0xd4>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8000e9e:	4b66      	ldr	r3, [pc, #408]	; (8001038 <HAL_SAI_MspInit+0x1ac>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10e      	bne.n	8000ec4 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000ea6:	4b65      	ldr	r3, [pc, #404]	; (800103c <HAL_SAI_MspInit+0x1b0>)
 8000ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000eac:	4a63      	ldr	r2, [pc, #396]	; (800103c <HAL_SAI_MspInit+0x1b0>)
 8000eae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000eb6:	4b61      	ldr	r3, [pc, #388]	; (800103c <HAL_SAI_MspInit+0x1b0>)
 8000eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8000ec4:	4b5c      	ldr	r3, [pc, #368]	; (8001038 <HAL_SAI_MspInit+0x1ac>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	4a5b      	ldr	r2, [pc, #364]	; (8001038 <HAL_SAI_MspInit+0x1ac>)
 8000ecc:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ece:	2370      	movs	r3, #112	; 0x70
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000ede:	2306      	movs	r3, #6
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4855      	ldr	r0, [pc, #340]	; (8001040 <HAL_SAI_MspInit+0x1b4>)
 8000eea:	f002 fc3b 	bl	8003764 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8000eee:	4b55      	ldr	r3, [pc, #340]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000ef0:	4a55      	ldr	r2, [pc, #340]	; (8001048 <HAL_SAI_MspInit+0x1bc>)
 8000ef2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8000ef4:	4b53      	ldr	r3, [pc, #332]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000ef6:	2257      	movs	r2, #87	; 0x57
 8000ef8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000efa:	4b52      	ldr	r3, [pc, #328]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000efc:	2240      	movs	r2, #64	; 0x40
 8000efe:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f00:	4b50      	ldr	r3, [pc, #320]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8000f06:	4b4f      	ldr	r3, [pc, #316]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0c:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f0e:	4b4d      	ldr	r3, [pc, #308]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000f10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f14:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f16:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000f18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f1c:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000f1e:	4b49      	ldr	r3, [pc, #292]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f24:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f26:	4b47      	ldr	r3, [pc, #284]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000f28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f2c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f2e:	4b45      	ldr	r3, [pc, #276]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000f34:	4843      	ldr	r0, [pc, #268]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000f36:	f000 fb35 	bl	80015a4 <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000f40:	f7ff fe1a 	bl	8000b78 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a3f      	ldr	r2, [pc, #252]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000f4c:	4a3d      	ldr	r2, [pc, #244]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a3b      	ldr	r2, [pc, #236]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000f5a:	4a3a      	ldr	r2, [pc, #232]	; (8001044 <HAL_SAI_MspInit+0x1b8>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a39      	ldr	r2, [pc, #228]	; (800104c <HAL_SAI_MspInit+0x1c0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d160      	bne.n	800102c <HAL_SAI_MspInit+0x1a0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8000f6a:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_SAI_MspInit+0x1ac>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10e      	bne.n	8000f90 <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000f72:	4b32      	ldr	r3, [pc, #200]	; (800103c <HAL_SAI_MspInit+0x1b0>)
 8000f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f78:	4a30      	ldr	r2, [pc, #192]	; (800103c <HAL_SAI_MspInit+0x1b0>)
 8000f7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f82:	4b2e      	ldr	r3, [pc, #184]	; (800103c <HAL_SAI_MspInit+0x1b0>)
 8000f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8000f90:	4b29      	ldr	r3, [pc, #164]	; (8001038 <HAL_SAI_MspInit+0x1ac>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	4a28      	ldr	r2, [pc, #160]	; (8001038 <HAL_SAI_MspInit+0x1ac>)
 8000f98:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000faa:	2306      	movs	r3, #6
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4822      	ldr	r0, [pc, #136]	; (8001040 <HAL_SAI_MspInit+0x1b4>)
 8000fb6:	f002 fbd5 	bl	8003764 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8000fbc:	4a25      	ldr	r2, [pc, #148]	; (8001054 <HAL_SAI_MspInit+0x1c8>)
 8000fbe:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8000fc2:	2258      	movs	r2, #88	; 0x58
 8000fc4:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8000fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd8:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8000fdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe0:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8000fe4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fe8:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8000fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff0:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8000ff4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ff8:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001000:	4813      	ldr	r0, [pc, #76]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8001002:	f000 facf 	bl	80015a4 <HAL_DMA_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 800100c:	f7ff fdb4 	bl	8000b78 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8001014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8001022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_SAI_MspInit+0x1c4>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40015804 	.word	0x40015804
 8001038:	2400039c 	.word	0x2400039c
 800103c:	58024400 	.word	0x58024400
 8001040:	58021000 	.word	0x58021000
 8001044:	24000168 	.word	0x24000168
 8001048:	40020010 	.word	0x40020010
 800104c:	40015824 	.word	0x40015824
 8001050:	240001e0 	.word	0x240001e0
 8001054:	40020410 	.word	0x40020410

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a4:	f000 f92a 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <DMA1_Stream0_IRQHandler+0x10>)
 80010b2:	f001 f839 	bl	8002128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	24000168 	.word	0x24000168

080010c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <DMA2_Stream0_IRQHandler+0x10>)
 80010c6:	f001 f82f 	bl	8002128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	240001e0 	.word	0x240001e0

080010d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010d8:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <SystemInit+0xd0>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010de:	4a31      	ldr	r2, [pc, #196]	; (80011a4 <SystemInit+0xd0>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <SystemInit+0xd4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 030f 	and.w	r3, r3, #15
 80010f0:	2b06      	cmp	r3, #6
 80010f2:	d807      	bhi.n	8001104 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f4:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <SystemInit+0xd4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f023 030f 	bic.w	r3, r3, #15
 80010fc:	4a2a      	ldr	r2, [pc, #168]	; (80011a8 <SystemInit+0xd4>)
 80010fe:	f043 0307 	orr.w	r3, r3, #7
 8001102:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <SystemInit+0xd8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a28      	ldr	r2, [pc, #160]	; (80011ac <SystemInit+0xd8>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <SystemInit+0xd8>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <SystemInit+0xd8>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4924      	ldr	r1, [pc, #144]	; (80011ac <SystemInit+0xd8>)
 800111c:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <SystemInit+0xdc>)
 800111e:	4013      	ands	r3, r2
 8001120:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <SystemInit+0xd4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b00      	cmp	r3, #0
 800112c:	d007      	beq.n	800113e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <SystemInit+0xd4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 030f 	bic.w	r3, r3, #15
 8001136:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <SystemInit+0xd4>)
 8001138:	f043 0307 	orr.w	r3, r3, #7
 800113c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <SystemInit+0xd8>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <SystemInit+0xd8>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <SystemInit+0xd8>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <SystemInit+0xd8>)
 8001152:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <SystemInit+0xe0>)
 8001154:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <SystemInit+0xd8>)
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <SystemInit+0xe4>)
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <SystemInit+0xd8>)
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <SystemInit+0xe8>)
 8001160:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <SystemInit+0xd8>)
 8001164:	2200      	movs	r2, #0
 8001166:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <SystemInit+0xd8>)
 800116a:	4a14      	ldr	r2, [pc, #80]	; (80011bc <SystemInit+0xe8>)
 800116c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <SystemInit+0xd8>)
 8001170:	2200      	movs	r2, #0
 8001172:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <SystemInit+0xd8>)
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <SystemInit+0xe8>)
 8001178:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <SystemInit+0xd8>)
 800117c:	2200      	movs	r2, #0
 800117e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <SystemInit+0xd8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a09      	ldr	r2, [pc, #36]	; (80011ac <SystemInit+0xd8>)
 8001186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <SystemInit+0xd8>)
 800118e:	2200      	movs	r2, #0
 8001190:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <SystemInit+0xec>)
 8001194:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001198:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00
 80011a8:	52002000 	.word	0x52002000
 80011ac:	58024400 	.word	0x58024400
 80011b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80011b4:	02020200 	.word	0x02020200
 80011b8:	01ff0000 	.word	0x01ff0000
 80011bc:	01010280 	.word	0x01010280
 80011c0:	52004000 	.word	0x52004000

080011c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011c8:	f7ff ff84 	bl	80010d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ce:	490d      	ldr	r1, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e4:	4c0a      	ldr	r4, [pc, #40]	; (8001210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f2:	f007 fcc7 	bl	8008b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f6:	f7ff f9b3 	bl	8000560 <main>
  bx  lr
 80011fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001200:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001204:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001208:	08008c04 	.word	0x08008c04
  ldr r2, =_sbss
 800120c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001210:	240003a4 	.word	0x240003a4

08001214 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC3_IRQHandler>
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121e:	2003      	movs	r0, #3
 8001220:	f000 f980 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001224:	f003 fa2a 	bl	800467c <HAL_RCC_GetSysClockFreq>
 8001228:	4602      	mov	r2, r0
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_Init+0x68>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	4913      	ldr	r1, [pc, #76]	; (8001284 <HAL_Init+0x6c>)
 8001236:	5ccb      	ldrb	r3, [r1, r3]
 8001238:	f003 031f 	and.w	r3, r3, #31
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_Init+0x68>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_Init+0x6c>)
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_Init+0x70>)
 800125a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800125c:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_Init+0x74>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001262:	200f      	movs	r0, #15
 8001264:	f000 f814 	bl	8001290 <HAL_InitTick>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e002      	b.n	8001278 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001272:	f7ff fc87 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	58024400 	.word	0x58024400
 8001284:	08008be4 	.word	0x08008be4
 8001288:	24000004 	.word	0x24000004
 800128c:	24000000 	.word	0x24000000

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_InitTick+0x60>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e021      	b.n	80012e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_InitTick+0x64>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_InitTick+0x60>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f965 	bl	800158a <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 f92f 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_InitTick+0x68>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2400000c 	.word	0x2400000c
 80012f4:	24000000 	.word	0x24000000
 80012f8:	24000008 	.word	0x24000008

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2400000c 	.word	0x2400000c
 8001320:	240003a0 	.word	0x240003a0

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	240003a0 	.word	0x240003a0

0800133c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d005      	beq.n	8001362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_Delay+0x44>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001362:	bf00      	nop
 8001364:	f7ff ffde 	bl	8001324 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f7      	bhi.n	8001364 <HAL_Delay+0x28>
  {
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2400000c 	.word	0x2400000c

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <__NVIC_SetPriorityGrouping+0x40>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	05fa0000 	.word	0x05fa0000

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff29 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff40 	bl	80013cc <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff90 	bl	8001478 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5f 	bl	8001424 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff33 	bl	80013e8 <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffa4 	bl	80014e0 <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff feba 	bl	8001324 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e312      	b.n	8001be2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a66      	ldr	r2, [pc, #408]	; (800175c <HAL_DMA_Init+0x1b8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d04a      	beq.n	800165c <HAL_DMA_Init+0xb8>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a65      	ldr	r2, [pc, #404]	; (8001760 <HAL_DMA_Init+0x1bc>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d045      	beq.n	800165c <HAL_DMA_Init+0xb8>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a63      	ldr	r2, [pc, #396]	; (8001764 <HAL_DMA_Init+0x1c0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d040      	beq.n	800165c <HAL_DMA_Init+0xb8>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a62      	ldr	r2, [pc, #392]	; (8001768 <HAL_DMA_Init+0x1c4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d03b      	beq.n	800165c <HAL_DMA_Init+0xb8>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a60      	ldr	r2, [pc, #384]	; (800176c <HAL_DMA_Init+0x1c8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d036      	beq.n	800165c <HAL_DMA_Init+0xb8>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a5f      	ldr	r2, [pc, #380]	; (8001770 <HAL_DMA_Init+0x1cc>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d031      	beq.n	800165c <HAL_DMA_Init+0xb8>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a5d      	ldr	r2, [pc, #372]	; (8001774 <HAL_DMA_Init+0x1d0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d02c      	beq.n	800165c <HAL_DMA_Init+0xb8>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a5c      	ldr	r2, [pc, #368]	; (8001778 <HAL_DMA_Init+0x1d4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d027      	beq.n	800165c <HAL_DMA_Init+0xb8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a5a      	ldr	r2, [pc, #360]	; (800177c <HAL_DMA_Init+0x1d8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d022      	beq.n	800165c <HAL_DMA_Init+0xb8>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a59      	ldr	r2, [pc, #356]	; (8001780 <HAL_DMA_Init+0x1dc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d01d      	beq.n	800165c <HAL_DMA_Init+0xb8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a57      	ldr	r2, [pc, #348]	; (8001784 <HAL_DMA_Init+0x1e0>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d018      	beq.n	800165c <HAL_DMA_Init+0xb8>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a56      	ldr	r2, [pc, #344]	; (8001788 <HAL_DMA_Init+0x1e4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d013      	beq.n	800165c <HAL_DMA_Init+0xb8>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a54      	ldr	r2, [pc, #336]	; (800178c <HAL_DMA_Init+0x1e8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00e      	beq.n	800165c <HAL_DMA_Init+0xb8>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a53      	ldr	r2, [pc, #332]	; (8001790 <HAL_DMA_Init+0x1ec>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d009      	beq.n	800165c <HAL_DMA_Init+0xb8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a51      	ldr	r2, [pc, #324]	; (8001794 <HAL_DMA_Init+0x1f0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d004      	beq.n	800165c <HAL_DMA_Init+0xb8>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a50      	ldr	r2, [pc, #320]	; (8001798 <HAL_DMA_Init+0x1f4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d101      	bne.n	8001660 <HAL_DMA_Init+0xbc>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <HAL_DMA_Init+0xbe>
 8001660:	2300      	movs	r3, #0
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 813c 	beq.w	80018e0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a37      	ldr	r2, [pc, #220]	; (800175c <HAL_DMA_Init+0x1b8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d04a      	beq.n	8001718 <HAL_DMA_Init+0x174>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a36      	ldr	r2, [pc, #216]	; (8001760 <HAL_DMA_Init+0x1bc>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d045      	beq.n	8001718 <HAL_DMA_Init+0x174>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a34      	ldr	r2, [pc, #208]	; (8001764 <HAL_DMA_Init+0x1c0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d040      	beq.n	8001718 <HAL_DMA_Init+0x174>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a33      	ldr	r2, [pc, #204]	; (8001768 <HAL_DMA_Init+0x1c4>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d03b      	beq.n	8001718 <HAL_DMA_Init+0x174>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a31      	ldr	r2, [pc, #196]	; (800176c <HAL_DMA_Init+0x1c8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d036      	beq.n	8001718 <HAL_DMA_Init+0x174>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a30      	ldr	r2, [pc, #192]	; (8001770 <HAL_DMA_Init+0x1cc>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d031      	beq.n	8001718 <HAL_DMA_Init+0x174>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a2e      	ldr	r2, [pc, #184]	; (8001774 <HAL_DMA_Init+0x1d0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d02c      	beq.n	8001718 <HAL_DMA_Init+0x174>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a2d      	ldr	r2, [pc, #180]	; (8001778 <HAL_DMA_Init+0x1d4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d027      	beq.n	8001718 <HAL_DMA_Init+0x174>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a2b      	ldr	r2, [pc, #172]	; (800177c <HAL_DMA_Init+0x1d8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d022      	beq.n	8001718 <HAL_DMA_Init+0x174>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a2a      	ldr	r2, [pc, #168]	; (8001780 <HAL_DMA_Init+0x1dc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d01d      	beq.n	8001718 <HAL_DMA_Init+0x174>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a28      	ldr	r2, [pc, #160]	; (8001784 <HAL_DMA_Init+0x1e0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d018      	beq.n	8001718 <HAL_DMA_Init+0x174>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a27      	ldr	r2, [pc, #156]	; (8001788 <HAL_DMA_Init+0x1e4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d013      	beq.n	8001718 <HAL_DMA_Init+0x174>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a25      	ldr	r2, [pc, #148]	; (800178c <HAL_DMA_Init+0x1e8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00e      	beq.n	8001718 <HAL_DMA_Init+0x174>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a24      	ldr	r2, [pc, #144]	; (8001790 <HAL_DMA_Init+0x1ec>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d009      	beq.n	8001718 <HAL_DMA_Init+0x174>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a22      	ldr	r2, [pc, #136]	; (8001794 <HAL_DMA_Init+0x1f0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d004      	beq.n	8001718 <HAL_DMA_Init+0x174>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a21      	ldr	r2, [pc, #132]	; (8001798 <HAL_DMA_Init+0x1f4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d108      	bne.n	800172a <HAL_DMA_Init+0x186>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e007      	b.n	800173a <HAL_DMA_Init+0x196>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0201 	bic.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800173a:	e02f      	b.n	800179c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800173c:	f7ff fdf2 	bl	8001324 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b05      	cmp	r3, #5
 8001748:	d928      	bls.n	800179c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2220      	movs	r2, #32
 800174e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2203      	movs	r2, #3
 8001754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e242      	b.n	8001be2 <HAL_DMA_Init+0x63e>
 800175c:	40020010 	.word	0x40020010
 8001760:	40020028 	.word	0x40020028
 8001764:	40020040 	.word	0x40020040
 8001768:	40020058 	.word	0x40020058
 800176c:	40020070 	.word	0x40020070
 8001770:	40020088 	.word	0x40020088
 8001774:	400200a0 	.word	0x400200a0
 8001778:	400200b8 	.word	0x400200b8
 800177c:	40020410 	.word	0x40020410
 8001780:	40020428 	.word	0x40020428
 8001784:	40020440 	.word	0x40020440
 8001788:	40020458 	.word	0x40020458
 800178c:	40020470 	.word	0x40020470
 8001790:	40020488 	.word	0x40020488
 8001794:	400204a0 	.word	0x400204a0
 8001798:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1c8      	bne.n	800173c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4b83      	ldr	r3, [pc, #524]	; (80019c4 <HAL_DMA_Init+0x420>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80017c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d107      	bne.n	8001800 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4313      	orrs	r3, r2
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b28      	cmp	r3, #40	; 0x28
 8001806:	d903      	bls.n	8001810 <HAL_DMA_Init+0x26c>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b2e      	cmp	r3, #46	; 0x2e
 800180e:	d91f      	bls.n	8001850 <HAL_DMA_Init+0x2ac>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b3e      	cmp	r3, #62	; 0x3e
 8001816:	d903      	bls.n	8001820 <HAL_DMA_Init+0x27c>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b42      	cmp	r3, #66	; 0x42
 800181e:	d917      	bls.n	8001850 <HAL_DMA_Init+0x2ac>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b46      	cmp	r3, #70	; 0x46
 8001826:	d903      	bls.n	8001830 <HAL_DMA_Init+0x28c>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b48      	cmp	r3, #72	; 0x48
 800182e:	d90f      	bls.n	8001850 <HAL_DMA_Init+0x2ac>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b4e      	cmp	r3, #78	; 0x4e
 8001836:	d903      	bls.n	8001840 <HAL_DMA_Init+0x29c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b52      	cmp	r3, #82	; 0x52
 800183e:	d907      	bls.n	8001850 <HAL_DMA_Init+0x2ac>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b73      	cmp	r3, #115	; 0x73
 8001846:	d905      	bls.n	8001854 <HAL_DMA_Init+0x2b0>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b77      	cmp	r3, #119	; 0x77
 800184e:	d801      	bhi.n	8001854 <HAL_DMA_Init+0x2b0>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_DMA_Init+0x2b2>
 8001854:	2300      	movs	r3, #0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001860:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f023 0307 	bic.w	r3, r3, #7
 8001878:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	2b04      	cmp	r3, #4
 800188a:	d117      	bne.n	80018bc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	4313      	orrs	r3, r2
 8001894:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00e      	beq.n	80018bc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f001 fdd6 	bl	8003450 <DMA_CheckFifoParam>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2240      	movs	r2, #64	; 0x40
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e192      	b.n	8001be2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f001 fd11 	bl	80032ec <DMA_CalcBaseAndBitshift>
 80018ca:	4603      	mov	r3, r0
 80018cc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	223f      	movs	r2, #63	; 0x3f
 80018d8:	409a      	lsls	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	e0c8      	b.n	8001a72 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a38      	ldr	r2, [pc, #224]	; (80019c8 <HAL_DMA_Init+0x424>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d022      	beq.n	8001930 <HAL_DMA_Init+0x38c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a37      	ldr	r2, [pc, #220]	; (80019cc <HAL_DMA_Init+0x428>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d01d      	beq.n	8001930 <HAL_DMA_Init+0x38c>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a35      	ldr	r2, [pc, #212]	; (80019d0 <HAL_DMA_Init+0x42c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d018      	beq.n	8001930 <HAL_DMA_Init+0x38c>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a34      	ldr	r2, [pc, #208]	; (80019d4 <HAL_DMA_Init+0x430>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d013      	beq.n	8001930 <HAL_DMA_Init+0x38c>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a32      	ldr	r2, [pc, #200]	; (80019d8 <HAL_DMA_Init+0x434>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00e      	beq.n	8001930 <HAL_DMA_Init+0x38c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a31      	ldr	r2, [pc, #196]	; (80019dc <HAL_DMA_Init+0x438>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d009      	beq.n	8001930 <HAL_DMA_Init+0x38c>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a2f      	ldr	r2, [pc, #188]	; (80019e0 <HAL_DMA_Init+0x43c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d004      	beq.n	8001930 <HAL_DMA_Init+0x38c>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a2e      	ldr	r2, [pc, #184]	; (80019e4 <HAL_DMA_Init+0x440>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d101      	bne.n	8001934 <HAL_DMA_Init+0x390>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_DMA_Init+0x392>
 8001934:	2300      	movs	r3, #0
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8092 	beq.w	8001a60 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <HAL_DMA_Init+0x424>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d021      	beq.n	800198a <HAL_DMA_Init+0x3e6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a20      	ldr	r2, [pc, #128]	; (80019cc <HAL_DMA_Init+0x428>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d01c      	beq.n	800198a <HAL_DMA_Init+0x3e6>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <HAL_DMA_Init+0x42c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d017      	beq.n	800198a <HAL_DMA_Init+0x3e6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_DMA_Init+0x430>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d012      	beq.n	800198a <HAL_DMA_Init+0x3e6>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <HAL_DMA_Init+0x434>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00d      	beq.n	800198a <HAL_DMA_Init+0x3e6>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1a      	ldr	r2, [pc, #104]	; (80019dc <HAL_DMA_Init+0x438>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d008      	beq.n	800198a <HAL_DMA_Init+0x3e6>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <HAL_DMA_Init+0x43c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d003      	beq.n	800198a <HAL_DMA_Init+0x3e6>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <HAL_DMA_Init+0x440>)
 8001988:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2202      	movs	r2, #2
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_DMA_Init+0x444>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b40      	cmp	r3, #64	; 0x40
 80019b0:	d01c      	beq.n	80019ec <HAL_DMA_Init+0x448>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b80      	cmp	r3, #128	; 0x80
 80019b8:	d102      	bne.n	80019c0 <HAL_DMA_Init+0x41c>
 80019ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019be:	e016      	b.n	80019ee <HAL_DMA_Init+0x44a>
 80019c0:	2300      	movs	r3, #0
 80019c2:	e014      	b.n	80019ee <HAL_DMA_Init+0x44a>
 80019c4:	fe10803f 	.word	0xfe10803f
 80019c8:	58025408 	.word	0x58025408
 80019cc:	5802541c 	.word	0x5802541c
 80019d0:	58025430 	.word	0x58025430
 80019d4:	58025444 	.word	0x58025444
 80019d8:	58025458 	.word	0x58025458
 80019dc:	5802546c 	.word	0x5802546c
 80019e0:	58025480 	.word	0x58025480
 80019e4:	58025494 	.word	0x58025494
 80019e8:	fffe000f 	.word	0xfffe000f
 80019ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68d2      	ldr	r2, [r2, #12]
 80019f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80019fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a1c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b6e      	ldr	r3, [pc, #440]	; (8001bec <HAL_DMA_Init+0x648>)
 8001a34:	4413      	add	r3, r2
 8001a36:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_DMA_Init+0x64c>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	009a      	lsls	r2, r3, #2
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f001 fc51 	bl	80032ec <DMA_CalcBaseAndBitshift>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2201      	movs	r2, #1
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	e008      	b.n	8001a72 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2240      	movs	r2, #64	; 0x40
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0b7      	b.n	8001be2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a5f      	ldr	r2, [pc, #380]	; (8001bf4 <HAL_DMA_Init+0x650>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d072      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a5d      	ldr	r2, [pc, #372]	; (8001bf8 <HAL_DMA_Init+0x654>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d06d      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a5c      	ldr	r2, [pc, #368]	; (8001bfc <HAL_DMA_Init+0x658>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d068      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <HAL_DMA_Init+0x65c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d063      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a59      	ldr	r2, [pc, #356]	; (8001c04 <HAL_DMA_Init+0x660>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d05e      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_DMA_Init+0x664>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d059      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a56      	ldr	r2, [pc, #344]	; (8001c0c <HAL_DMA_Init+0x668>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d054      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a54      	ldr	r2, [pc, #336]	; (8001c10 <HAL_DMA_Init+0x66c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d04f      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a53      	ldr	r2, [pc, #332]	; (8001c14 <HAL_DMA_Init+0x670>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d04a      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a51      	ldr	r2, [pc, #324]	; (8001c18 <HAL_DMA_Init+0x674>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d045      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a50      	ldr	r2, [pc, #320]	; (8001c1c <HAL_DMA_Init+0x678>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d040      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a4e      	ldr	r2, [pc, #312]	; (8001c20 <HAL_DMA_Init+0x67c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d03b      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a4d      	ldr	r2, [pc, #308]	; (8001c24 <HAL_DMA_Init+0x680>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d036      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a4b      	ldr	r2, [pc, #300]	; (8001c28 <HAL_DMA_Init+0x684>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d031      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a4a      	ldr	r2, [pc, #296]	; (8001c2c <HAL_DMA_Init+0x688>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d02c      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <HAL_DMA_Init+0x68c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d027      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a47      	ldr	r2, [pc, #284]	; (8001c34 <HAL_DMA_Init+0x690>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d022      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a45      	ldr	r2, [pc, #276]	; (8001c38 <HAL_DMA_Init+0x694>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d01d      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a44      	ldr	r2, [pc, #272]	; (8001c3c <HAL_DMA_Init+0x698>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d018      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a42      	ldr	r2, [pc, #264]	; (8001c40 <HAL_DMA_Init+0x69c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a41      	ldr	r2, [pc, #260]	; (8001c44 <HAL_DMA_Init+0x6a0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00e      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a3f      	ldr	r2, [pc, #252]	; (8001c48 <HAL_DMA_Init+0x6a4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d009      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a3e      	ldr	r2, [pc, #248]	; (8001c4c <HAL_DMA_Init+0x6a8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d004      	beq.n	8001b62 <HAL_DMA_Init+0x5be>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a3c      	ldr	r2, [pc, #240]	; (8001c50 <HAL_DMA_Init+0x6ac>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_DMA_Init+0x5c2>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_DMA_Init+0x5c4>
 8001b66:	2300      	movs	r3, #0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d032      	beq.n	8001bd2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f001 fceb 	bl	8003548 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b80      	cmp	r3, #128	; 0x80
 8001b78:	d102      	bne.n	8001b80 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b94:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d010      	beq.n	8001bc0 <HAL_DMA_Init+0x61c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d80c      	bhi.n	8001bc0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f001 fd68 	bl	800367c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	e008      	b.n	8001bd2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	a7fdabf8 	.word	0xa7fdabf8
 8001bf0:	cccccccd 	.word	0xcccccccd
 8001bf4:	40020010 	.word	0x40020010
 8001bf8:	40020028 	.word	0x40020028
 8001bfc:	40020040 	.word	0x40020040
 8001c00:	40020058 	.word	0x40020058
 8001c04:	40020070 	.word	0x40020070
 8001c08:	40020088 	.word	0x40020088
 8001c0c:	400200a0 	.word	0x400200a0
 8001c10:	400200b8 	.word	0x400200b8
 8001c14:	40020410 	.word	0x40020410
 8001c18:	40020428 	.word	0x40020428
 8001c1c:	40020440 	.word	0x40020440
 8001c20:	40020458 	.word	0x40020458
 8001c24:	40020470 	.word	0x40020470
 8001c28:	40020488 	.word	0x40020488
 8001c2c:	400204a0 	.word	0x400204a0
 8001c30:	400204b8 	.word	0x400204b8
 8001c34:	58025408 	.word	0x58025408
 8001c38:	5802541c 	.word	0x5802541c
 8001c3c:	58025430 	.word	0x58025430
 8001c40:	58025444 	.word	0x58025444
 8001c44:	58025458 	.word	0x58025458
 8001c48:	5802546c 	.word	0x5802546c
 8001c4c:	58025480 	.word	0x58025480
 8001c50:	58025494 	.word	0x58025494

08001c54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e226      	b.n	80020be <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_DMA_Start_IT+0x2a>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e21f      	b.n	80020be <HAL_DMA_Start_IT+0x46a>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	f040 820a 	bne.w	80020a8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a68      	ldr	r2, [pc, #416]	; (8001e48 <HAL_DMA_Start_IT+0x1f4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d04a      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a66      	ldr	r2, [pc, #408]	; (8001e4c <HAL_DMA_Start_IT+0x1f8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d045      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a65      	ldr	r2, [pc, #404]	; (8001e50 <HAL_DMA_Start_IT+0x1fc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d040      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a63      	ldr	r2, [pc, #396]	; (8001e54 <HAL_DMA_Start_IT+0x200>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d03b      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a62      	ldr	r2, [pc, #392]	; (8001e58 <HAL_DMA_Start_IT+0x204>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d036      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a60      	ldr	r2, [pc, #384]	; (8001e5c <HAL_DMA_Start_IT+0x208>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d031      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a5f      	ldr	r2, [pc, #380]	; (8001e60 <HAL_DMA_Start_IT+0x20c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d02c      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a5d      	ldr	r2, [pc, #372]	; (8001e64 <HAL_DMA_Start_IT+0x210>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d027      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a5c      	ldr	r2, [pc, #368]	; (8001e68 <HAL_DMA_Start_IT+0x214>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d022      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a5a      	ldr	r2, [pc, #360]	; (8001e6c <HAL_DMA_Start_IT+0x218>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d01d      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a59      	ldr	r2, [pc, #356]	; (8001e70 <HAL_DMA_Start_IT+0x21c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d018      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a57      	ldr	r2, [pc, #348]	; (8001e74 <HAL_DMA_Start_IT+0x220>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a56      	ldr	r2, [pc, #344]	; (8001e78 <HAL_DMA_Start_IT+0x224>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00e      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a54      	ldr	r2, [pc, #336]	; (8001e7c <HAL_DMA_Start_IT+0x228>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d009      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a53      	ldr	r2, [pc, #332]	; (8001e80 <HAL_DMA_Start_IT+0x22c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d004      	beq.n	8001d42 <HAL_DMA_Start_IT+0xee>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a51      	ldr	r2, [pc, #324]	; (8001e84 <HAL_DMA_Start_IT+0x230>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d108      	bne.n	8001d54 <HAL_DMA_Start_IT+0x100>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0201 	bic.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e007      	b.n	8001d64 <HAL_DMA_Start_IT+0x110>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f001 f912 	bl	8002f94 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a34      	ldr	r2, [pc, #208]	; (8001e48 <HAL_DMA_Start_IT+0x1f4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d04a      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a33      	ldr	r2, [pc, #204]	; (8001e4c <HAL_DMA_Start_IT+0x1f8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d045      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a31      	ldr	r2, [pc, #196]	; (8001e50 <HAL_DMA_Start_IT+0x1fc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d040      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a30      	ldr	r2, [pc, #192]	; (8001e54 <HAL_DMA_Start_IT+0x200>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d03b      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a2e      	ldr	r2, [pc, #184]	; (8001e58 <HAL_DMA_Start_IT+0x204>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d036      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <HAL_DMA_Start_IT+0x208>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d031      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a2b      	ldr	r2, [pc, #172]	; (8001e60 <HAL_DMA_Start_IT+0x20c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d02c      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a2a      	ldr	r2, [pc, #168]	; (8001e64 <HAL_DMA_Start_IT+0x210>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d027      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a28      	ldr	r2, [pc, #160]	; (8001e68 <HAL_DMA_Start_IT+0x214>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d022      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <HAL_DMA_Start_IT+0x218>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d01d      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a25      	ldr	r2, [pc, #148]	; (8001e70 <HAL_DMA_Start_IT+0x21c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d018      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <HAL_DMA_Start_IT+0x220>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <HAL_DMA_Start_IT+0x224>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00e      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a21      	ldr	r2, [pc, #132]	; (8001e7c <HAL_DMA_Start_IT+0x228>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1f      	ldr	r2, [pc, #124]	; (8001e80 <HAL_DMA_Start_IT+0x22c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d004      	beq.n	8001e10 <HAL_DMA_Start_IT+0x1bc>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <HAL_DMA_Start_IT+0x230>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d101      	bne.n	8001e14 <HAL_DMA_Start_IT+0x1c0>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_DMA_Start_IT+0x1c2>
 8001e14:	2300      	movs	r3, #0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d036      	beq.n	8001e88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 021e 	bic.w	r2, r3, #30
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0216 	orr.w	r2, r2, #22
 8001e2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d03e      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0208 	orr.w	r2, r2, #8
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e035      	b.n	8001eb4 <HAL_DMA_Start_IT+0x260>
 8001e48:	40020010 	.word	0x40020010
 8001e4c:	40020028 	.word	0x40020028
 8001e50:	40020040 	.word	0x40020040
 8001e54:	40020058 	.word	0x40020058
 8001e58:	40020070 	.word	0x40020070
 8001e5c:	40020088 	.word	0x40020088
 8001e60:	400200a0 	.word	0x400200a0
 8001e64:	400200b8 	.word	0x400200b8
 8001e68:	40020410 	.word	0x40020410
 8001e6c:	40020428 	.word	0x40020428
 8001e70:	40020440 	.word	0x40020440
 8001e74:	40020458 	.word	0x40020458
 8001e78:	40020470 	.word	0x40020470
 8001e7c:	40020488 	.word	0x40020488
 8001e80:	400204a0 	.word	0x400204a0
 8001e84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 020e 	bic.w	r2, r3, #14
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 020a 	orr.w	r2, r2, #10
 8001e9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0204 	orr.w	r2, r2, #4
 8001eb2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a83      	ldr	r2, [pc, #524]	; (80020c8 <HAL_DMA_Start_IT+0x474>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d072      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a82      	ldr	r2, [pc, #520]	; (80020cc <HAL_DMA_Start_IT+0x478>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d06d      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a80      	ldr	r2, [pc, #512]	; (80020d0 <HAL_DMA_Start_IT+0x47c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d068      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7f      	ldr	r2, [pc, #508]	; (80020d4 <HAL_DMA_Start_IT+0x480>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d063      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a7d      	ldr	r2, [pc, #500]	; (80020d8 <HAL_DMA_Start_IT+0x484>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d05e      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a7c      	ldr	r2, [pc, #496]	; (80020dc <HAL_DMA_Start_IT+0x488>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d059      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a7a      	ldr	r2, [pc, #488]	; (80020e0 <HAL_DMA_Start_IT+0x48c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d054      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a79      	ldr	r2, [pc, #484]	; (80020e4 <HAL_DMA_Start_IT+0x490>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d04f      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a77      	ldr	r2, [pc, #476]	; (80020e8 <HAL_DMA_Start_IT+0x494>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d04a      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a76      	ldr	r2, [pc, #472]	; (80020ec <HAL_DMA_Start_IT+0x498>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d045      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a74      	ldr	r2, [pc, #464]	; (80020f0 <HAL_DMA_Start_IT+0x49c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d040      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a73      	ldr	r2, [pc, #460]	; (80020f4 <HAL_DMA_Start_IT+0x4a0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d03b      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a71      	ldr	r2, [pc, #452]	; (80020f8 <HAL_DMA_Start_IT+0x4a4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d036      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a70      	ldr	r2, [pc, #448]	; (80020fc <HAL_DMA_Start_IT+0x4a8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d031      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a6e      	ldr	r2, [pc, #440]	; (8002100 <HAL_DMA_Start_IT+0x4ac>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d02c      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a6d      	ldr	r2, [pc, #436]	; (8002104 <HAL_DMA_Start_IT+0x4b0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d027      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6b      	ldr	r2, [pc, #428]	; (8002108 <HAL_DMA_Start_IT+0x4b4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d022      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a6a      	ldr	r2, [pc, #424]	; (800210c <HAL_DMA_Start_IT+0x4b8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d01d      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a68      	ldr	r2, [pc, #416]	; (8002110 <HAL_DMA_Start_IT+0x4bc>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d018      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a67      	ldr	r2, [pc, #412]	; (8002114 <HAL_DMA_Start_IT+0x4c0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d013      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_DMA_Start_IT+0x4c4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00e      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a64      	ldr	r2, [pc, #400]	; (800211c <HAL_DMA_Start_IT+0x4c8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d009      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a62      	ldr	r2, [pc, #392]	; (8002120 <HAL_DMA_Start_IT+0x4cc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x350>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a61      	ldr	r2, [pc, #388]	; (8002124 <HAL_DMA_Start_IT+0x4d0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DMA_Start_IT+0x354>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_DMA_Start_IT+0x356>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d01a      	beq.n	8001fe4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d007      	beq.n	8001fe4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a37      	ldr	r2, [pc, #220]	; (80020c8 <HAL_DMA_Start_IT+0x474>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d04a      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a36      	ldr	r2, [pc, #216]	; (80020cc <HAL_DMA_Start_IT+0x478>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d045      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a34      	ldr	r2, [pc, #208]	; (80020d0 <HAL_DMA_Start_IT+0x47c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d040      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a33      	ldr	r2, [pc, #204]	; (80020d4 <HAL_DMA_Start_IT+0x480>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d03b      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a31      	ldr	r2, [pc, #196]	; (80020d8 <HAL_DMA_Start_IT+0x484>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d036      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a30      	ldr	r2, [pc, #192]	; (80020dc <HAL_DMA_Start_IT+0x488>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d031      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a2e      	ldr	r2, [pc, #184]	; (80020e0 <HAL_DMA_Start_IT+0x48c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02c      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a2d      	ldr	r2, [pc, #180]	; (80020e4 <HAL_DMA_Start_IT+0x490>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d027      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a2b      	ldr	r2, [pc, #172]	; (80020e8 <HAL_DMA_Start_IT+0x494>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d022      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2a      	ldr	r2, [pc, #168]	; (80020ec <HAL_DMA_Start_IT+0x498>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d01d      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <HAL_DMA_Start_IT+0x49c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d018      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a27      	ldr	r2, [pc, #156]	; (80020f4 <HAL_DMA_Start_IT+0x4a0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a25      	ldr	r2, [pc, #148]	; (80020f8 <HAL_DMA_Start_IT+0x4a4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00e      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a24      	ldr	r2, [pc, #144]	; (80020fc <HAL_DMA_Start_IT+0x4a8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a22      	ldr	r2, [pc, #136]	; (8002100 <HAL_DMA_Start_IT+0x4ac>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d004      	beq.n	8002084 <HAL_DMA_Start_IT+0x430>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a21      	ldr	r2, [pc, #132]	; (8002104 <HAL_DMA_Start_IT+0x4b0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d108      	bne.n	8002096 <HAL_DMA_Start_IT+0x442>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e012      	b.n	80020bc <HAL_DMA_Start_IT+0x468>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0201 	orr.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e009      	b.n	80020bc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40020010 	.word	0x40020010
 80020cc:	40020028 	.word	0x40020028
 80020d0:	40020040 	.word	0x40020040
 80020d4:	40020058 	.word	0x40020058
 80020d8:	40020070 	.word	0x40020070
 80020dc:	40020088 	.word	0x40020088
 80020e0:	400200a0 	.word	0x400200a0
 80020e4:	400200b8 	.word	0x400200b8
 80020e8:	40020410 	.word	0x40020410
 80020ec:	40020428 	.word	0x40020428
 80020f0:	40020440 	.word	0x40020440
 80020f4:	40020458 	.word	0x40020458
 80020f8:	40020470 	.word	0x40020470
 80020fc:	40020488 	.word	0x40020488
 8002100:	400204a0 	.word	0x400204a0
 8002104:	400204b8 	.word	0x400204b8
 8002108:	58025408 	.word	0x58025408
 800210c:	5802541c 	.word	0x5802541c
 8002110:	58025430 	.word	0x58025430
 8002114:	58025444 	.word	0x58025444
 8002118:	58025458 	.word	0x58025458
 800211c:	5802546c 	.word	0x5802546c
 8002120:	58025480 	.word	0x58025480
 8002124:	58025494 	.word	0x58025494

08002128 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002134:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_DMA_IRQHandler+0x1ac>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a67      	ldr	r2, [pc, #412]	; (80022d8 <HAL_DMA_IRQHandler+0x1b0>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0a9b      	lsrs	r3, r3, #10
 8002140:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a5f      	ldr	r2, [pc, #380]	; (80022dc <HAL_DMA_IRQHandler+0x1b4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d04a      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a5d      	ldr	r2, [pc, #372]	; (80022e0 <HAL_DMA_IRQHandler+0x1b8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d045      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a5c      	ldr	r2, [pc, #368]	; (80022e4 <HAL_DMA_IRQHandler+0x1bc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d040      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5a      	ldr	r2, [pc, #360]	; (80022e8 <HAL_DMA_IRQHandler+0x1c0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d03b      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a59      	ldr	r2, [pc, #356]	; (80022ec <HAL_DMA_IRQHandler+0x1c4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d036      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_DMA_IRQHandler+0x1c8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d031      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a56      	ldr	r2, [pc, #344]	; (80022f4 <HAL_DMA_IRQHandler+0x1cc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d02c      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a54      	ldr	r2, [pc, #336]	; (80022f8 <HAL_DMA_IRQHandler+0x1d0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d027      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a53      	ldr	r2, [pc, #332]	; (80022fc <HAL_DMA_IRQHandler+0x1d4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d022      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a51      	ldr	r2, [pc, #324]	; (8002300 <HAL_DMA_IRQHandler+0x1d8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01d      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a50      	ldr	r2, [pc, #320]	; (8002304 <HAL_DMA_IRQHandler+0x1dc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d018      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a4e      	ldr	r2, [pc, #312]	; (8002308 <HAL_DMA_IRQHandler+0x1e0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a4d      	ldr	r2, [pc, #308]	; (800230c <HAL_DMA_IRQHandler+0x1e4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00e      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a4b      	ldr	r2, [pc, #300]	; (8002310 <HAL_DMA_IRQHandler+0x1e8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d009      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a4a      	ldr	r2, [pc, #296]	; (8002314 <HAL_DMA_IRQHandler+0x1ec>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d004      	beq.n	80021fa <HAL_DMA_IRQHandler+0xd2>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a48      	ldr	r2, [pc, #288]	; (8002318 <HAL_DMA_IRQHandler+0x1f0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <HAL_DMA_IRQHandler+0xd6>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_DMA_IRQHandler+0xd8>
 80021fe:	2300      	movs	r3, #0
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 842b 	beq.w	8002a5c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	2208      	movs	r2, #8
 8002210:	409a      	lsls	r2, r3
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80a2 	beq.w	8002360 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2e      	ldr	r2, [pc, #184]	; (80022dc <HAL_DMA_IRQHandler+0x1b4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d04a      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <HAL_DMA_IRQHandler+0x1b8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d045      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a2b      	ldr	r2, [pc, #172]	; (80022e4 <HAL_DMA_IRQHandler+0x1bc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d040      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <HAL_DMA_IRQHandler+0x1c0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d03b      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a28      	ldr	r2, [pc, #160]	; (80022ec <HAL_DMA_IRQHandler+0x1c4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d036      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <HAL_DMA_IRQHandler+0x1c8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d031      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <HAL_DMA_IRQHandler+0x1cc>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d02c      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a24      	ldr	r2, [pc, #144]	; (80022f8 <HAL_DMA_IRQHandler+0x1d0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d027      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a22      	ldr	r2, [pc, #136]	; (80022fc <HAL_DMA_IRQHandler+0x1d4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d022      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a21      	ldr	r2, [pc, #132]	; (8002300 <HAL_DMA_IRQHandler+0x1d8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d01d      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1f      	ldr	r2, [pc, #124]	; (8002304 <HAL_DMA_IRQHandler+0x1dc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d018      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <HAL_DMA_IRQHandler+0x1e0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d013      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1c      	ldr	r2, [pc, #112]	; (800230c <HAL_DMA_IRQHandler+0x1e4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00e      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <HAL_DMA_IRQHandler+0x1e8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d009      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a19      	ldr	r2, [pc, #100]	; (8002314 <HAL_DMA_IRQHandler+0x1ec>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d004      	beq.n	80022bc <HAL_DMA_IRQHandler+0x194>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a18      	ldr	r2, [pc, #96]	; (8002318 <HAL_DMA_IRQHandler+0x1f0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d12f      	bne.n	800231c <HAL_DMA_IRQHandler+0x1f4>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bf14      	ite	ne
 80022ca:	2301      	movne	r3, #1
 80022cc:	2300      	moveq	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	e02e      	b.n	8002330 <HAL_DMA_IRQHandler+0x208>
 80022d2:	bf00      	nop
 80022d4:	24000000 	.word	0x24000000
 80022d8:	1b4e81b5 	.word	0x1b4e81b5
 80022dc:	40020010 	.word	0x40020010
 80022e0:	40020028 	.word	0x40020028
 80022e4:	40020040 	.word	0x40020040
 80022e8:	40020058 	.word	0x40020058
 80022ec:	40020070 	.word	0x40020070
 80022f0:	40020088 	.word	0x40020088
 80022f4:	400200a0 	.word	0x400200a0
 80022f8:	400200b8 	.word	0x400200b8
 80022fc:	40020410 	.word	0x40020410
 8002300:	40020428 	.word	0x40020428
 8002304:	40020440 	.word	0x40020440
 8002308:	40020458 	.word	0x40020458
 800230c:	40020470 	.word	0x40020470
 8002310:	40020488 	.word	0x40020488
 8002314:	400204a0 	.word	0x400204a0
 8002318:	400204b8 	.word	0x400204b8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0204 	bic.w	r2, r2, #4
 8002342:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	2208      	movs	r2, #8
 800234e:	409a      	lsls	r2, r3
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f043 0201 	orr.w	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d06e      	beq.n	8002454 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a69      	ldr	r2, [pc, #420]	; (8002520 <HAL_DMA_IRQHandler+0x3f8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d04a      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a67      	ldr	r2, [pc, #412]	; (8002524 <HAL_DMA_IRQHandler+0x3fc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d045      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a66      	ldr	r2, [pc, #408]	; (8002528 <HAL_DMA_IRQHandler+0x400>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d040      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a64      	ldr	r2, [pc, #400]	; (800252c <HAL_DMA_IRQHandler+0x404>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d03b      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a63      	ldr	r2, [pc, #396]	; (8002530 <HAL_DMA_IRQHandler+0x408>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d036      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a61      	ldr	r2, [pc, #388]	; (8002534 <HAL_DMA_IRQHandler+0x40c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d031      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a60      	ldr	r2, [pc, #384]	; (8002538 <HAL_DMA_IRQHandler+0x410>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d02c      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a5e      	ldr	r2, [pc, #376]	; (800253c <HAL_DMA_IRQHandler+0x414>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d027      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a5d      	ldr	r2, [pc, #372]	; (8002540 <HAL_DMA_IRQHandler+0x418>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d022      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a5b      	ldr	r2, [pc, #364]	; (8002544 <HAL_DMA_IRQHandler+0x41c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01d      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a5a      	ldr	r2, [pc, #360]	; (8002548 <HAL_DMA_IRQHandler+0x420>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d018      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a58      	ldr	r2, [pc, #352]	; (800254c <HAL_DMA_IRQHandler+0x424>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a57      	ldr	r2, [pc, #348]	; (8002550 <HAL_DMA_IRQHandler+0x428>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00e      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a55      	ldr	r2, [pc, #340]	; (8002554 <HAL_DMA_IRQHandler+0x42c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a54      	ldr	r2, [pc, #336]	; (8002558 <HAL_DMA_IRQHandler+0x430>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2ee>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a52      	ldr	r2, [pc, #328]	; (800255c <HAL_DMA_IRQHandler+0x434>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10a      	bne.n	800242c <HAL_DMA_IRQHandler+0x304>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	e003      	b.n	8002434 <HAL_DMA_IRQHandler+0x30c>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2300      	movs	r3, #0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00d      	beq.n	8002454 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2201      	movs	r2, #1
 8002442:	409a      	lsls	r2, r3
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244c:	f043 0202 	orr.w	r2, r3, #2
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2204      	movs	r2, #4
 800245e:	409a      	lsls	r2, r3
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 808f 	beq.w	8002588 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2c      	ldr	r2, [pc, #176]	; (8002520 <HAL_DMA_IRQHandler+0x3f8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d04a      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2a      	ldr	r2, [pc, #168]	; (8002524 <HAL_DMA_IRQHandler+0x3fc>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d045      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a29      	ldr	r2, [pc, #164]	; (8002528 <HAL_DMA_IRQHandler+0x400>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d040      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a27      	ldr	r2, [pc, #156]	; (800252c <HAL_DMA_IRQHandler+0x404>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d03b      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a26      	ldr	r2, [pc, #152]	; (8002530 <HAL_DMA_IRQHandler+0x408>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d036      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a24      	ldr	r2, [pc, #144]	; (8002534 <HAL_DMA_IRQHandler+0x40c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d031      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a23      	ldr	r2, [pc, #140]	; (8002538 <HAL_DMA_IRQHandler+0x410>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d02c      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a21      	ldr	r2, [pc, #132]	; (800253c <HAL_DMA_IRQHandler+0x414>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d027      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a20      	ldr	r2, [pc, #128]	; (8002540 <HAL_DMA_IRQHandler+0x418>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d022      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1e      	ldr	r2, [pc, #120]	; (8002544 <HAL_DMA_IRQHandler+0x41c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01d      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_DMA_IRQHandler+0x420>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d018      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1b      	ldr	r2, [pc, #108]	; (800254c <HAL_DMA_IRQHandler+0x424>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <HAL_DMA_IRQHandler+0x428>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00e      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_DMA_IRQHandler+0x42c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d009      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_DMA_IRQHandler+0x430>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d004      	beq.n	800250a <HAL_DMA_IRQHandler+0x3e2>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a15      	ldr	r2, [pc, #84]	; (800255c <HAL_DMA_IRQHandler+0x434>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d12a      	bne.n	8002560 <HAL_DMA_IRQHandler+0x438>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	e023      	b.n	8002568 <HAL_DMA_IRQHandler+0x440>
 8002520:	40020010 	.word	0x40020010
 8002524:	40020028 	.word	0x40020028
 8002528:	40020040 	.word	0x40020040
 800252c:	40020058 	.word	0x40020058
 8002530:	40020070 	.word	0x40020070
 8002534:	40020088 	.word	0x40020088
 8002538:	400200a0 	.word	0x400200a0
 800253c:	400200b8 	.word	0x400200b8
 8002540:	40020410 	.word	0x40020410
 8002544:	40020428 	.word	0x40020428
 8002548:	40020440 	.word	0x40020440
 800254c:	40020458 	.word	0x40020458
 8002550:	40020470 	.word	0x40020470
 8002554:	40020488 	.word	0x40020488
 8002558:	400204a0 	.word	0x400204a0
 800255c:	400204b8 	.word	0x400204b8
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2300      	movs	r3, #0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2204      	movs	r2, #4
 8002576:	409a      	lsls	r2, r3
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	f043 0204 	orr.w	r2, r3, #4
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2210      	movs	r2, #16
 8002592:	409a      	lsls	r2, r3
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a6 	beq.w	80026ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a85      	ldr	r2, [pc, #532]	; (80027b8 <HAL_DMA_IRQHandler+0x690>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d04a      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a83      	ldr	r2, [pc, #524]	; (80027bc <HAL_DMA_IRQHandler+0x694>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d045      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a82      	ldr	r2, [pc, #520]	; (80027c0 <HAL_DMA_IRQHandler+0x698>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d040      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a80      	ldr	r2, [pc, #512]	; (80027c4 <HAL_DMA_IRQHandler+0x69c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d03b      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a7f      	ldr	r2, [pc, #508]	; (80027c8 <HAL_DMA_IRQHandler+0x6a0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d036      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a7d      	ldr	r2, [pc, #500]	; (80027cc <HAL_DMA_IRQHandler+0x6a4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d031      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a7c      	ldr	r2, [pc, #496]	; (80027d0 <HAL_DMA_IRQHandler+0x6a8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d02c      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7a      	ldr	r2, [pc, #488]	; (80027d4 <HAL_DMA_IRQHandler+0x6ac>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d027      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a79      	ldr	r2, [pc, #484]	; (80027d8 <HAL_DMA_IRQHandler+0x6b0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d022      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a77      	ldr	r2, [pc, #476]	; (80027dc <HAL_DMA_IRQHandler+0x6b4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d01d      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a76      	ldr	r2, [pc, #472]	; (80027e0 <HAL_DMA_IRQHandler+0x6b8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d018      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a74      	ldr	r2, [pc, #464]	; (80027e4 <HAL_DMA_IRQHandler+0x6bc>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a73      	ldr	r2, [pc, #460]	; (80027e8 <HAL_DMA_IRQHandler+0x6c0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00e      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a71      	ldr	r2, [pc, #452]	; (80027ec <HAL_DMA_IRQHandler+0x6c4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d009      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a70      	ldr	r2, [pc, #448]	; (80027f0 <HAL_DMA_IRQHandler+0x6c8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d004      	beq.n	800263e <HAL_DMA_IRQHandler+0x516>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a6e      	ldr	r2, [pc, #440]	; (80027f4 <HAL_DMA_IRQHandler+0x6cc>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10a      	bne.n	8002654 <HAL_DMA_IRQHandler+0x52c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	e009      	b.n	8002668 <HAL_DMA_IRQHandler+0x540>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	bf14      	ite	ne
 8002662:	2301      	movne	r3, #1
 8002664:	2300      	moveq	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d03e      	beq.n	80026ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2210      	movs	r2, #16
 8002676:	409a      	lsls	r2, r3
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d018      	beq.n	80026bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d108      	bne.n	80026aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d024      	beq.n	80026ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4798      	blx	r3
 80026a8:	e01f      	b.n	80026ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d01b      	beq.n	80026ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	4798      	blx	r3
 80026ba:	e016      	b.n	80026ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d107      	bne.n	80026da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0208 	bic.w	r2, r2, #8
 80026d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	2220      	movs	r2, #32
 80026f4:	409a      	lsls	r2, r3
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8110 	beq.w	8002920 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a2c      	ldr	r2, [pc, #176]	; (80027b8 <HAL_DMA_IRQHandler+0x690>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d04a      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a2b      	ldr	r2, [pc, #172]	; (80027bc <HAL_DMA_IRQHandler+0x694>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d045      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a29      	ldr	r2, [pc, #164]	; (80027c0 <HAL_DMA_IRQHandler+0x698>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d040      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a28      	ldr	r2, [pc, #160]	; (80027c4 <HAL_DMA_IRQHandler+0x69c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d03b      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a26      	ldr	r2, [pc, #152]	; (80027c8 <HAL_DMA_IRQHandler+0x6a0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d036      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a25      	ldr	r2, [pc, #148]	; (80027cc <HAL_DMA_IRQHandler+0x6a4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d031      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <HAL_DMA_IRQHandler+0x6a8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d02c      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a22      	ldr	r2, [pc, #136]	; (80027d4 <HAL_DMA_IRQHandler+0x6ac>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d027      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a20      	ldr	r2, [pc, #128]	; (80027d8 <HAL_DMA_IRQHandler+0x6b0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d022      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1f      	ldr	r2, [pc, #124]	; (80027dc <HAL_DMA_IRQHandler+0x6b4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d01d      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <HAL_DMA_IRQHandler+0x6b8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d018      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <HAL_DMA_IRQHandler+0x6bc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d013      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <HAL_DMA_IRQHandler+0x6c0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00e      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a19      	ldr	r2, [pc, #100]	; (80027ec <HAL_DMA_IRQHandler+0x6c4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <HAL_DMA_IRQHandler+0x6c8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x678>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <HAL_DMA_IRQHandler+0x6cc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d12b      	bne.n	80027f8 <HAL_DMA_IRQHandler+0x6d0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	e02a      	b.n	800280c <HAL_DMA_IRQHandler+0x6e4>
 80027b6:	bf00      	nop
 80027b8:	40020010 	.word	0x40020010
 80027bc:	40020028 	.word	0x40020028
 80027c0:	40020040 	.word	0x40020040
 80027c4:	40020058 	.word	0x40020058
 80027c8:	40020070 	.word	0x40020070
 80027cc:	40020088 	.word	0x40020088
 80027d0:	400200a0 	.word	0x400200a0
 80027d4:	400200b8 	.word	0x400200b8
 80027d8:	40020410 	.word	0x40020410
 80027dc:	40020428 	.word	0x40020428
 80027e0:	40020440 	.word	0x40020440
 80027e4:	40020458 	.word	0x40020458
 80027e8:	40020470 	.word	0x40020470
 80027ec:	40020488 	.word	0x40020488
 80027f0:	400204a0 	.word	0x400204a0
 80027f4:	400204b8 	.word	0x400204b8
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	bf14      	ite	ne
 8002806:	2301      	movne	r3, #1
 8002808:	2300      	moveq	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8087 	beq.w	8002920 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	2220      	movs	r2, #32
 800281c:	409a      	lsls	r2, r3
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b04      	cmp	r3, #4
 800282c:	d139      	bne.n	80028a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0216 	bic.w	r2, r2, #22
 800283c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800284c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d103      	bne.n	800285e <HAL_DMA_IRQHandler+0x736>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0208 	bic.w	r2, r2, #8
 800286c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	223f      	movs	r2, #63	; 0x3f
 8002878:	409a      	lsls	r2, r3
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 834a 	beq.w	8002f2c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
          }
          return;
 80028a0:	e344      	b.n	8002f2c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d018      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d108      	bne.n	80028d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d02c      	beq.n	8002920 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
 80028ce:	e027      	b.n	8002920 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d023      	beq.n	8002920 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
 80028e0:	e01e      	b.n	8002920 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10f      	bne.n	8002910 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0210 	bic.w	r2, r2, #16
 80028fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8306 	beq.w	8002f36 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8088 	beq.w	8002a48 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2204      	movs	r2, #4
 800293c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a7a      	ldr	r2, [pc, #488]	; (8002b30 <HAL_DMA_IRQHandler+0xa08>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d04a      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a79      	ldr	r2, [pc, #484]	; (8002b34 <HAL_DMA_IRQHandler+0xa0c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d045      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a77      	ldr	r2, [pc, #476]	; (8002b38 <HAL_DMA_IRQHandler+0xa10>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d040      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a76      	ldr	r2, [pc, #472]	; (8002b3c <HAL_DMA_IRQHandler+0xa14>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d03b      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a74      	ldr	r2, [pc, #464]	; (8002b40 <HAL_DMA_IRQHandler+0xa18>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d036      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a73      	ldr	r2, [pc, #460]	; (8002b44 <HAL_DMA_IRQHandler+0xa1c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d031      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a71      	ldr	r2, [pc, #452]	; (8002b48 <HAL_DMA_IRQHandler+0xa20>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02c      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a70      	ldr	r2, [pc, #448]	; (8002b4c <HAL_DMA_IRQHandler+0xa24>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d027      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a6e      	ldr	r2, [pc, #440]	; (8002b50 <HAL_DMA_IRQHandler+0xa28>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d022      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6d      	ldr	r2, [pc, #436]	; (8002b54 <HAL_DMA_IRQHandler+0xa2c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d01d      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a6b      	ldr	r2, [pc, #428]	; (8002b58 <HAL_DMA_IRQHandler+0xa30>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d018      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a6a      	ldr	r2, [pc, #424]	; (8002b5c <HAL_DMA_IRQHandler+0xa34>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d013      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a68      	ldr	r2, [pc, #416]	; (8002b60 <HAL_DMA_IRQHandler+0xa38>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00e      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a67      	ldr	r2, [pc, #412]	; (8002b64 <HAL_DMA_IRQHandler+0xa3c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d009      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a65      	ldr	r2, [pc, #404]	; (8002b68 <HAL_DMA_IRQHandler+0xa40>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x8b8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a64      	ldr	r2, [pc, #400]	; (8002b6c <HAL_DMA_IRQHandler+0xa44>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d108      	bne.n	80029f2 <HAL_DMA_IRQHandler+0x8ca>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	e007      	b.n	8002a02 <HAL_DMA_IRQHandler+0x8da>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3301      	adds	r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d307      	bcc.n	8002a1e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f2      	bne.n	8002a02 <HAL_DMA_IRQHandler+0x8da>
 8002a1c:	e000      	b.n	8002a20 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002a1e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d004      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2203      	movs	r2, #3
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002a36:	e003      	b.n	8002a40 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8272 	beq.w	8002f36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
 8002a5a:	e26c      	b.n	8002f36 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a43      	ldr	r2, [pc, #268]	; (8002b70 <HAL_DMA_IRQHandler+0xa48>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d022      	beq.n	8002aac <HAL_DMA_IRQHandler+0x984>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a42      	ldr	r2, [pc, #264]	; (8002b74 <HAL_DMA_IRQHandler+0xa4c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d01d      	beq.n	8002aac <HAL_DMA_IRQHandler+0x984>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a40      	ldr	r2, [pc, #256]	; (8002b78 <HAL_DMA_IRQHandler+0xa50>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d018      	beq.n	8002aac <HAL_DMA_IRQHandler+0x984>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a3f      	ldr	r2, [pc, #252]	; (8002b7c <HAL_DMA_IRQHandler+0xa54>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d013      	beq.n	8002aac <HAL_DMA_IRQHandler+0x984>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a3d      	ldr	r2, [pc, #244]	; (8002b80 <HAL_DMA_IRQHandler+0xa58>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00e      	beq.n	8002aac <HAL_DMA_IRQHandler+0x984>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a3c      	ldr	r2, [pc, #240]	; (8002b84 <HAL_DMA_IRQHandler+0xa5c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d009      	beq.n	8002aac <HAL_DMA_IRQHandler+0x984>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3a      	ldr	r2, [pc, #232]	; (8002b88 <HAL_DMA_IRQHandler+0xa60>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <HAL_DMA_IRQHandler+0x984>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a39      	ldr	r2, [pc, #228]	; (8002b8c <HAL_DMA_IRQHandler+0xa64>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x988>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_DMA_IRQHandler+0x98a>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 823f 	beq.w	8002f36 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	2204      	movs	r2, #4
 8002aca:	409a      	lsls	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80cd 	beq.w	8002c70 <HAL_DMA_IRQHandler+0xb48>
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80c7 	beq.w	8002c70 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2204      	movs	r2, #4
 8002aec:	409a      	lsls	r2, r3
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d049      	beq.n	8002b90 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8210 	beq.w	8002f30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b18:	e20a      	b.n	8002f30 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8206 	beq.w	8002f30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b2c:	e200      	b.n	8002f30 <HAL_DMA_IRQHandler+0xe08>
 8002b2e:	bf00      	nop
 8002b30:	40020010 	.word	0x40020010
 8002b34:	40020028 	.word	0x40020028
 8002b38:	40020040 	.word	0x40020040
 8002b3c:	40020058 	.word	0x40020058
 8002b40:	40020070 	.word	0x40020070
 8002b44:	40020088 	.word	0x40020088
 8002b48:	400200a0 	.word	0x400200a0
 8002b4c:	400200b8 	.word	0x400200b8
 8002b50:	40020410 	.word	0x40020410
 8002b54:	40020428 	.word	0x40020428
 8002b58:	40020440 	.word	0x40020440
 8002b5c:	40020458 	.word	0x40020458
 8002b60:	40020470 	.word	0x40020470
 8002b64:	40020488 	.word	0x40020488
 8002b68:	400204a0 	.word	0x400204a0
 8002b6c:	400204b8 	.word	0x400204b8
 8002b70:	58025408 	.word	0x58025408
 8002b74:	5802541c 	.word	0x5802541c
 8002b78:	58025430 	.word	0x58025430
 8002b7c:	58025444 	.word	0x58025444
 8002b80:	58025458 	.word	0x58025458
 8002b84:	5802546c 	.word	0x5802546c
 8002b88:	58025480 	.word	0x58025480
 8002b8c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d160      	bne.n	8002c5c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a7f      	ldr	r2, [pc, #508]	; (8002d9c <HAL_DMA_IRQHandler+0xc74>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d04a      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a7d      	ldr	r2, [pc, #500]	; (8002da0 <HAL_DMA_IRQHandler+0xc78>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d045      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7c      	ldr	r2, [pc, #496]	; (8002da4 <HAL_DMA_IRQHandler+0xc7c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d040      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a7a      	ldr	r2, [pc, #488]	; (8002da8 <HAL_DMA_IRQHandler+0xc80>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d03b      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a79      	ldr	r2, [pc, #484]	; (8002dac <HAL_DMA_IRQHandler+0xc84>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d036      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a77      	ldr	r2, [pc, #476]	; (8002db0 <HAL_DMA_IRQHandler+0xc88>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d031      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a76      	ldr	r2, [pc, #472]	; (8002db4 <HAL_DMA_IRQHandler+0xc8c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d02c      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a74      	ldr	r2, [pc, #464]	; (8002db8 <HAL_DMA_IRQHandler+0xc90>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d027      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a73      	ldr	r2, [pc, #460]	; (8002dbc <HAL_DMA_IRQHandler+0xc94>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d022      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a71      	ldr	r2, [pc, #452]	; (8002dc0 <HAL_DMA_IRQHandler+0xc98>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01d      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a70      	ldr	r2, [pc, #448]	; (8002dc4 <HAL_DMA_IRQHandler+0xc9c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d018      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a6e      	ldr	r2, [pc, #440]	; (8002dc8 <HAL_DMA_IRQHandler+0xca0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6d      	ldr	r2, [pc, #436]	; (8002dcc <HAL_DMA_IRQHandler+0xca4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00e      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a6b      	ldr	r2, [pc, #428]	; (8002dd0 <HAL_DMA_IRQHandler+0xca8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d009      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a6a      	ldr	r2, [pc, #424]	; (8002dd4 <HAL_DMA_IRQHandler+0xcac>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xb12>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a68      	ldr	r2, [pc, #416]	; (8002dd8 <HAL_DMA_IRQHandler+0xcb0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d108      	bne.n	8002c4c <HAL_DMA_IRQHandler+0xb24>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0208 	bic.w	r2, r2, #8
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e007      	b.n	8002c5c <HAL_DMA_IRQHandler+0xb34>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0204 	bic.w	r2, r2, #4
 8002c5a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8165 	beq.w	8002f30 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c6e:	e15f      	b.n	8002f30 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	2202      	movs	r2, #2
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80c5 	beq.w	8002e10 <HAL_DMA_IRQHandler+0xce8>
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80bf 	beq.w	8002e10 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	409a      	lsls	r2, r3
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d018      	beq.n	8002cde <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 813a 	beq.w	8002f34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cc8:	e134      	b.n	8002f34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 8130 	beq.w	8002f34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cdc:	e12a      	b.n	8002f34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 8089 	bne.w	8002dfc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2b      	ldr	r2, [pc, #172]	; (8002d9c <HAL_DMA_IRQHandler+0xc74>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d04a      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <HAL_DMA_IRQHandler+0xc78>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d045      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a28      	ldr	r2, [pc, #160]	; (8002da4 <HAL_DMA_IRQHandler+0xc7c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d040      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a26      	ldr	r2, [pc, #152]	; (8002da8 <HAL_DMA_IRQHandler+0xc80>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d03b      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a25      	ldr	r2, [pc, #148]	; (8002dac <HAL_DMA_IRQHandler+0xc84>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d036      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a23      	ldr	r2, [pc, #140]	; (8002db0 <HAL_DMA_IRQHandler+0xc88>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d031      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <HAL_DMA_IRQHandler+0xc8c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d02c      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a20      	ldr	r2, [pc, #128]	; (8002db8 <HAL_DMA_IRQHandler+0xc90>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d027      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <HAL_DMA_IRQHandler+0xc94>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d022      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <HAL_DMA_IRQHandler+0xc98>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01d      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <HAL_DMA_IRQHandler+0xc9c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d018      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1a      	ldr	r2, [pc, #104]	; (8002dc8 <HAL_DMA_IRQHandler+0xca0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <HAL_DMA_IRQHandler+0xca4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00e      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <HAL_DMA_IRQHandler+0xca8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d009      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a16      	ldr	r2, [pc, #88]	; (8002dd4 <HAL_DMA_IRQHandler+0xcac>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d004      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xc62>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <HAL_DMA_IRQHandler+0xcb0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d128      	bne.n	8002ddc <HAL_DMA_IRQHandler+0xcb4>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0214 	bic.w	r2, r2, #20
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e027      	b.n	8002dec <HAL_DMA_IRQHandler+0xcc4>
 8002d9c:	40020010 	.word	0x40020010
 8002da0:	40020028 	.word	0x40020028
 8002da4:	40020040 	.word	0x40020040
 8002da8:	40020058 	.word	0x40020058
 8002dac:	40020070 	.word	0x40020070
 8002db0:	40020088 	.word	0x40020088
 8002db4:	400200a0 	.word	0x400200a0
 8002db8:	400200b8 	.word	0x400200b8
 8002dbc:	40020410 	.word	0x40020410
 8002dc0:	40020428 	.word	0x40020428
 8002dc4:	40020440 	.word	0x40020440
 8002dc8:	40020458 	.word	0x40020458
 8002dcc:	40020470 	.word	0x40020470
 8002dd0:	40020488 	.word	0x40020488
 8002dd4:	400204a0 	.word	0x400204a0
 8002dd8:	400204b8 	.word	0x400204b8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 020a 	bic.w	r2, r2, #10
 8002dea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8097 	beq.w	8002f34 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e0e:	e091      	b.n	8002f34 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	2208      	movs	r2, #8
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8088 	beq.w	8002f36 <HAL_DMA_IRQHandler+0xe0e>
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8082 	beq.w	8002f36 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a41      	ldr	r2, [pc, #260]	; (8002f3c <HAL_DMA_IRQHandler+0xe14>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d04a      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a3f      	ldr	r2, [pc, #252]	; (8002f40 <HAL_DMA_IRQHandler+0xe18>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d045      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a3e      	ldr	r2, [pc, #248]	; (8002f44 <HAL_DMA_IRQHandler+0xe1c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d040      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a3c      	ldr	r2, [pc, #240]	; (8002f48 <HAL_DMA_IRQHandler+0xe20>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d03b      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a3b      	ldr	r2, [pc, #236]	; (8002f4c <HAL_DMA_IRQHandler+0xe24>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d036      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a39      	ldr	r2, [pc, #228]	; (8002f50 <HAL_DMA_IRQHandler+0xe28>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d031      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a38      	ldr	r2, [pc, #224]	; (8002f54 <HAL_DMA_IRQHandler+0xe2c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d02c      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a36      	ldr	r2, [pc, #216]	; (8002f58 <HAL_DMA_IRQHandler+0xe30>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d027      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a35      	ldr	r2, [pc, #212]	; (8002f5c <HAL_DMA_IRQHandler+0xe34>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d022      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a33      	ldr	r2, [pc, #204]	; (8002f60 <HAL_DMA_IRQHandler+0xe38>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01d      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a32      	ldr	r2, [pc, #200]	; (8002f64 <HAL_DMA_IRQHandler+0xe3c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d018      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a30      	ldr	r2, [pc, #192]	; (8002f68 <HAL_DMA_IRQHandler+0xe40>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a2f      	ldr	r2, [pc, #188]	; (8002f6c <HAL_DMA_IRQHandler+0xe44>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a2d      	ldr	r2, [pc, #180]	; (8002f70 <HAL_DMA_IRQHandler+0xe48>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a2c      	ldr	r2, [pc, #176]	; (8002f74 <HAL_DMA_IRQHandler+0xe4c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdaa>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a2a      	ldr	r2, [pc, #168]	; (8002f78 <HAL_DMA_IRQHandler+0xe50>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d108      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0xdbc>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 021c 	bic.w	r2, r2, #28
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e007      	b.n	8002ef4 <HAL_DMA_IRQHandler+0xdcc>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 020e 	bic.w	r2, r2, #14
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	2201      	movs	r2, #1
 8002efe:	409a      	lsls	r2, r3
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
 8002f2a:	e004      	b.n	8002f36 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002f2c:	bf00      	nop
 8002f2e:	e002      	b.n	8002f36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f30:	bf00      	nop
 8002f32:	e000      	b.n	8002f36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f34:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002f36:	3728      	adds	r7, #40	; 0x28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40020010 	.word	0x40020010
 8002f40:	40020028 	.word	0x40020028
 8002f44:	40020040 	.word	0x40020040
 8002f48:	40020058 	.word	0x40020058
 8002f4c:	40020070 	.word	0x40020070
 8002f50:	40020088 	.word	0x40020088
 8002f54:	400200a0 	.word	0x400200a0
 8002f58:	400200b8 	.word	0x400200b8
 8002f5c:	40020410 	.word	0x40020410
 8002f60:	40020428 	.word	0x40020428
 8002f64:	40020440 	.word	0x40020440
 8002f68:	40020458 	.word	0x40020458
 8002f6c:	40020470 	.word	0x40020470
 8002f70:	40020488 	.word	0x40020488
 8002f74:	400204a0 	.word	0x400204a0
 8002f78:	400204b8 	.word	0x400204b8

08002f7c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a7f      	ldr	r2, [pc, #508]	; (80031b0 <DMA_SetConfig+0x21c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d072      	beq.n	800309e <DMA_SetConfig+0x10a>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a7d      	ldr	r2, [pc, #500]	; (80031b4 <DMA_SetConfig+0x220>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d06d      	beq.n	800309e <DMA_SetConfig+0x10a>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a7c      	ldr	r2, [pc, #496]	; (80031b8 <DMA_SetConfig+0x224>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d068      	beq.n	800309e <DMA_SetConfig+0x10a>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a7a      	ldr	r2, [pc, #488]	; (80031bc <DMA_SetConfig+0x228>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d063      	beq.n	800309e <DMA_SetConfig+0x10a>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a79      	ldr	r2, [pc, #484]	; (80031c0 <DMA_SetConfig+0x22c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d05e      	beq.n	800309e <DMA_SetConfig+0x10a>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a77      	ldr	r2, [pc, #476]	; (80031c4 <DMA_SetConfig+0x230>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d059      	beq.n	800309e <DMA_SetConfig+0x10a>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a76      	ldr	r2, [pc, #472]	; (80031c8 <DMA_SetConfig+0x234>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d054      	beq.n	800309e <DMA_SetConfig+0x10a>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a74      	ldr	r2, [pc, #464]	; (80031cc <DMA_SetConfig+0x238>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d04f      	beq.n	800309e <DMA_SetConfig+0x10a>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a73      	ldr	r2, [pc, #460]	; (80031d0 <DMA_SetConfig+0x23c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d04a      	beq.n	800309e <DMA_SetConfig+0x10a>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a71      	ldr	r2, [pc, #452]	; (80031d4 <DMA_SetConfig+0x240>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d045      	beq.n	800309e <DMA_SetConfig+0x10a>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a70      	ldr	r2, [pc, #448]	; (80031d8 <DMA_SetConfig+0x244>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d040      	beq.n	800309e <DMA_SetConfig+0x10a>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6e      	ldr	r2, [pc, #440]	; (80031dc <DMA_SetConfig+0x248>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d03b      	beq.n	800309e <DMA_SetConfig+0x10a>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a6d      	ldr	r2, [pc, #436]	; (80031e0 <DMA_SetConfig+0x24c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d036      	beq.n	800309e <DMA_SetConfig+0x10a>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a6b      	ldr	r2, [pc, #428]	; (80031e4 <DMA_SetConfig+0x250>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d031      	beq.n	800309e <DMA_SetConfig+0x10a>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a6a      	ldr	r2, [pc, #424]	; (80031e8 <DMA_SetConfig+0x254>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d02c      	beq.n	800309e <DMA_SetConfig+0x10a>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a68      	ldr	r2, [pc, #416]	; (80031ec <DMA_SetConfig+0x258>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d027      	beq.n	800309e <DMA_SetConfig+0x10a>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a67      	ldr	r2, [pc, #412]	; (80031f0 <DMA_SetConfig+0x25c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d022      	beq.n	800309e <DMA_SetConfig+0x10a>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a65      	ldr	r2, [pc, #404]	; (80031f4 <DMA_SetConfig+0x260>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01d      	beq.n	800309e <DMA_SetConfig+0x10a>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a64      	ldr	r2, [pc, #400]	; (80031f8 <DMA_SetConfig+0x264>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d018      	beq.n	800309e <DMA_SetConfig+0x10a>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a62      	ldr	r2, [pc, #392]	; (80031fc <DMA_SetConfig+0x268>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <DMA_SetConfig+0x10a>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a61      	ldr	r2, [pc, #388]	; (8003200 <DMA_SetConfig+0x26c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00e      	beq.n	800309e <DMA_SetConfig+0x10a>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a5f      	ldr	r2, [pc, #380]	; (8003204 <DMA_SetConfig+0x270>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d009      	beq.n	800309e <DMA_SetConfig+0x10a>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a5e      	ldr	r2, [pc, #376]	; (8003208 <DMA_SetConfig+0x274>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d004      	beq.n	800309e <DMA_SetConfig+0x10a>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a5c      	ldr	r2, [pc, #368]	; (800320c <DMA_SetConfig+0x278>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <DMA_SetConfig+0x10e>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <DMA_SetConfig+0x110>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a39      	ldr	r2, [pc, #228]	; (80031b0 <DMA_SetConfig+0x21c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d04a      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a38      	ldr	r2, [pc, #224]	; (80031b4 <DMA_SetConfig+0x220>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d045      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a36      	ldr	r2, [pc, #216]	; (80031b8 <DMA_SetConfig+0x224>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d040      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a35      	ldr	r2, [pc, #212]	; (80031bc <DMA_SetConfig+0x228>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d03b      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a33      	ldr	r2, [pc, #204]	; (80031c0 <DMA_SetConfig+0x22c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d036      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a32      	ldr	r2, [pc, #200]	; (80031c4 <DMA_SetConfig+0x230>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d031      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a30      	ldr	r2, [pc, #192]	; (80031c8 <DMA_SetConfig+0x234>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02c      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2f      	ldr	r2, [pc, #188]	; (80031cc <DMA_SetConfig+0x238>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d027      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2d      	ldr	r2, [pc, #180]	; (80031d0 <DMA_SetConfig+0x23c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d022      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2c      	ldr	r2, [pc, #176]	; (80031d4 <DMA_SetConfig+0x240>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d01d      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a2a      	ldr	r2, [pc, #168]	; (80031d8 <DMA_SetConfig+0x244>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d018      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a29      	ldr	r2, [pc, #164]	; (80031dc <DMA_SetConfig+0x248>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a27      	ldr	r2, [pc, #156]	; (80031e0 <DMA_SetConfig+0x24c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <DMA_SetConfig+0x250>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a24      	ldr	r2, [pc, #144]	; (80031e8 <DMA_SetConfig+0x254>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <DMA_SetConfig+0x1d0>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a23      	ldr	r2, [pc, #140]	; (80031ec <DMA_SetConfig+0x258>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <DMA_SetConfig+0x1d4>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <DMA_SetConfig+0x1d6>
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d059      	beq.n	8003222 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	223f      	movs	r2, #63	; 0x3f
 8003178:	409a      	lsls	r2, r3
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800318c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b40      	cmp	r3, #64	; 0x40
 800319c:	d138      	bne.n	8003210 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80031ae:	e086      	b.n	80032be <DMA_SetConfig+0x32a>
 80031b0:	40020010 	.word	0x40020010
 80031b4:	40020028 	.word	0x40020028
 80031b8:	40020040 	.word	0x40020040
 80031bc:	40020058 	.word	0x40020058
 80031c0:	40020070 	.word	0x40020070
 80031c4:	40020088 	.word	0x40020088
 80031c8:	400200a0 	.word	0x400200a0
 80031cc:	400200b8 	.word	0x400200b8
 80031d0:	40020410 	.word	0x40020410
 80031d4:	40020428 	.word	0x40020428
 80031d8:	40020440 	.word	0x40020440
 80031dc:	40020458 	.word	0x40020458
 80031e0:	40020470 	.word	0x40020470
 80031e4:	40020488 	.word	0x40020488
 80031e8:	400204a0 	.word	0x400204a0
 80031ec:	400204b8 	.word	0x400204b8
 80031f0:	58025408 	.word	0x58025408
 80031f4:	5802541c 	.word	0x5802541c
 80031f8:	58025430 	.word	0x58025430
 80031fc:	58025444 	.word	0x58025444
 8003200:	58025458 	.word	0x58025458
 8003204:	5802546c 	.word	0x5802546c
 8003208:	58025480 	.word	0x58025480
 800320c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	60da      	str	r2, [r3, #12]
}
 8003220:	e04d      	b.n	80032be <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a29      	ldr	r2, [pc, #164]	; (80032cc <DMA_SetConfig+0x338>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d022      	beq.n	8003272 <DMA_SetConfig+0x2de>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <DMA_SetConfig+0x33c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d01d      	beq.n	8003272 <DMA_SetConfig+0x2de>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a26      	ldr	r2, [pc, #152]	; (80032d4 <DMA_SetConfig+0x340>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d018      	beq.n	8003272 <DMA_SetConfig+0x2de>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a24      	ldr	r2, [pc, #144]	; (80032d8 <DMA_SetConfig+0x344>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <DMA_SetConfig+0x2de>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a23      	ldr	r2, [pc, #140]	; (80032dc <DMA_SetConfig+0x348>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00e      	beq.n	8003272 <DMA_SetConfig+0x2de>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <DMA_SetConfig+0x34c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d009      	beq.n	8003272 <DMA_SetConfig+0x2de>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a20      	ldr	r2, [pc, #128]	; (80032e4 <DMA_SetConfig+0x350>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <DMA_SetConfig+0x2de>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <DMA_SetConfig+0x354>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d101      	bne.n	8003276 <DMA_SetConfig+0x2e2>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <DMA_SetConfig+0x2e4>
 8003276:	2300      	movs	r3, #0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	2201      	movs	r2, #1
 8003286:	409a      	lsls	r2, r3
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d108      	bne.n	80032ae <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	60da      	str	r2, [r3, #12]
}
 80032ac:	e007      	b.n	80032be <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	60da      	str	r2, [r3, #12]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	58025408 	.word	0x58025408
 80032d0:	5802541c 	.word	0x5802541c
 80032d4:	58025430 	.word	0x58025430
 80032d8:	58025444 	.word	0x58025444
 80032dc:	58025458 	.word	0x58025458
 80032e0:	5802546c 	.word	0x5802546c
 80032e4:	58025480 	.word	0x58025480
 80032e8:	58025494 	.word	0x58025494

080032ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a42      	ldr	r2, [pc, #264]	; (8003404 <DMA_CalcBaseAndBitshift+0x118>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d04a      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a41      	ldr	r2, [pc, #260]	; (8003408 <DMA_CalcBaseAndBitshift+0x11c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d045      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a3f      	ldr	r2, [pc, #252]	; (800340c <DMA_CalcBaseAndBitshift+0x120>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d040      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a3e      	ldr	r2, [pc, #248]	; (8003410 <DMA_CalcBaseAndBitshift+0x124>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d03b      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a3c      	ldr	r2, [pc, #240]	; (8003414 <DMA_CalcBaseAndBitshift+0x128>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d036      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a3b      	ldr	r2, [pc, #236]	; (8003418 <DMA_CalcBaseAndBitshift+0x12c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d031      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a39      	ldr	r2, [pc, #228]	; (800341c <DMA_CalcBaseAndBitshift+0x130>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d02c      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a38      	ldr	r2, [pc, #224]	; (8003420 <DMA_CalcBaseAndBitshift+0x134>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d027      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a36      	ldr	r2, [pc, #216]	; (8003424 <DMA_CalcBaseAndBitshift+0x138>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d022      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a35      	ldr	r2, [pc, #212]	; (8003428 <DMA_CalcBaseAndBitshift+0x13c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d01d      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a33      	ldr	r2, [pc, #204]	; (800342c <DMA_CalcBaseAndBitshift+0x140>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d018      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a32      	ldr	r2, [pc, #200]	; (8003430 <DMA_CalcBaseAndBitshift+0x144>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d013      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a30      	ldr	r2, [pc, #192]	; (8003434 <DMA_CalcBaseAndBitshift+0x148>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00e      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a2f      	ldr	r2, [pc, #188]	; (8003438 <DMA_CalcBaseAndBitshift+0x14c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d009      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2d      	ldr	r2, [pc, #180]	; (800343c <DMA_CalcBaseAndBitshift+0x150>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d004      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xa8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <DMA_CalcBaseAndBitshift+0x154>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d101      	bne.n	8003398 <DMA_CalcBaseAndBitshift+0xac>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <DMA_CalcBaseAndBitshift+0xae>
 8003398:	2300      	movs	r3, #0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d024      	beq.n	80033e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	3b10      	subs	r3, #16
 80033a6:	4a27      	ldr	r2, [pc, #156]	; (8003444 <DMA_CalcBaseAndBitshift+0x158>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	4a24      	ldr	r2, [pc, #144]	; (8003448 <DMA_CalcBaseAndBitshift+0x15c>)
 80033b8:	5cd3      	ldrb	r3, [r2, r3]
 80033ba:	461a      	mov	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d908      	bls.n	80033d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b1f      	ldr	r3, [pc, #124]	; (800344c <DMA_CalcBaseAndBitshift+0x160>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	1d1a      	adds	r2, r3, #4
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	659a      	str	r2, [r3, #88]	; 0x58
 80033d6:	e00d      	b.n	80033f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	4b1b      	ldr	r3, [pc, #108]	; (800344c <DMA_CalcBaseAndBitshift+0x160>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6593      	str	r3, [r2, #88]	; 0x58
 80033e6:	e005      	b.n	80033f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	40020010 	.word	0x40020010
 8003408:	40020028 	.word	0x40020028
 800340c:	40020040 	.word	0x40020040
 8003410:	40020058 	.word	0x40020058
 8003414:	40020070 	.word	0x40020070
 8003418:	40020088 	.word	0x40020088
 800341c:	400200a0 	.word	0x400200a0
 8003420:	400200b8 	.word	0x400200b8
 8003424:	40020410 	.word	0x40020410
 8003428:	40020428 	.word	0x40020428
 800342c:	40020440 	.word	0x40020440
 8003430:	40020458 	.word	0x40020458
 8003434:	40020470 	.word	0x40020470
 8003438:	40020488 	.word	0x40020488
 800343c:	400204a0 	.word	0x400204a0
 8003440:	400204b8 	.word	0x400204b8
 8003444:	aaaaaaab 	.word	0xaaaaaaab
 8003448:	08008bf4 	.word	0x08008bf4
 800344c:	fffffc00 	.word	0xfffffc00

08003450 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d120      	bne.n	80034a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	2b03      	cmp	r3, #3
 800346a:	d858      	bhi.n	800351e <DMA_CheckFifoParam+0xce>
 800346c:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <DMA_CheckFifoParam+0x24>)
 800346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003472:	bf00      	nop
 8003474:	08003485 	.word	0x08003485
 8003478:	08003497 	.word	0x08003497
 800347c:	08003485 	.word	0x08003485
 8003480:	0800351f 	.word	0x0800351f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d048      	beq.n	8003522 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003494:	e045      	b.n	8003522 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800349e:	d142      	bne.n	8003526 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80034a4:	e03f      	b.n	8003526 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ae:	d123      	bne.n	80034f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d838      	bhi.n	800352a <DMA_CheckFifoParam+0xda>
 80034b8:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <DMA_CheckFifoParam+0x70>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034d1 	.word	0x080034d1
 80034c4:	080034d7 	.word	0x080034d7
 80034c8:	080034d1 	.word	0x080034d1
 80034cc:	080034e9 	.word	0x080034e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
        break;
 80034d4:	e030      	b.n	8003538 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d025      	beq.n	800352e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80034e6:	e022      	b.n	800352e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034f0:	d11f      	bne.n	8003532 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80034f6:	e01c      	b.n	8003532 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d902      	bls.n	8003506 <DMA_CheckFifoParam+0xb6>
 8003500:	2b03      	cmp	r3, #3
 8003502:	d003      	beq.n	800350c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003504:	e018      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
        break;
 800350a:	e015      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00e      	beq.n	8003536 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
    break;
 800351c:	e00b      	b.n	8003536 <DMA_CheckFifoParam+0xe6>
        break;
 800351e:	bf00      	nop
 8003520:	e00a      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
        break;
 8003522:	bf00      	nop
 8003524:	e008      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
        break;
 8003526:	bf00      	nop
 8003528:	e006      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
        break;
 800352a:	bf00      	nop
 800352c:	e004      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
        break;
 800352e:	bf00      	nop
 8003530:	e002      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
        break;
 8003532:	bf00      	nop
 8003534:	e000      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
    break;
 8003536:	bf00      	nop
    }
  }

  return status;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop

08003548 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a38      	ldr	r2, [pc, #224]	; (800363c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d022      	beq.n	80035a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a36      	ldr	r2, [pc, #216]	; (8003640 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01d      	beq.n	80035a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a35      	ldr	r2, [pc, #212]	; (8003644 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d018      	beq.n	80035a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a33      	ldr	r2, [pc, #204]	; (8003648 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a32      	ldr	r2, [pc, #200]	; (800364c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00e      	beq.n	80035a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a30      	ldr	r2, [pc, #192]	; (8003650 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d009      	beq.n	80035a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2f      	ldr	r2, [pc, #188]	; (8003654 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2d      	ldr	r2, [pc, #180]	; (8003658 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80035aa:	2300      	movs	r3, #0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01a      	beq.n	80035e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	3b08      	subs	r3, #8
 80035b8:	4a28      	ldr	r2, [pc, #160]	; (800365c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4b26      	ldr	r3, [pc, #152]	; (8003660 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	461a      	mov	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a24      	ldr	r2, [pc, #144]	; (8003664 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80035d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2201      	movs	r2, #1
 80035de:	409a      	lsls	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80035e4:	e024      	b.n	8003630 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	3b10      	subs	r3, #16
 80035ee:	4a1e      	ldr	r2, [pc, #120]	; (8003668 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4a1c      	ldr	r2, [pc, #112]	; (800366c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d806      	bhi.n	800360e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d902      	bls.n	800360e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3308      	adds	r3, #8
 800360c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4b18      	ldr	r3, [pc, #96]	; (8003674 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	461a      	mov	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a16      	ldr	r2, [pc, #88]	; (8003678 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003620:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	2201      	movs	r2, #1
 800362a:	409a      	lsls	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	58025408 	.word	0x58025408
 8003640:	5802541c 	.word	0x5802541c
 8003644:	58025430 	.word	0x58025430
 8003648:	58025444 	.word	0x58025444
 800364c:	58025458 	.word	0x58025458
 8003650:	5802546c 	.word	0x5802546c
 8003654:	58025480 	.word	0x58025480
 8003658:	58025494 	.word	0x58025494
 800365c:	cccccccd 	.word	0xcccccccd
 8003660:	16009600 	.word	0x16009600
 8003664:	58025880 	.word	0x58025880
 8003668:	aaaaaaab 	.word	0xaaaaaaab
 800366c:	400204b8 	.word	0x400204b8
 8003670:	4002040f 	.word	0x4002040f
 8003674:	10008200 	.word	0x10008200
 8003678:	40020880 	.word	0x40020880

0800367c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d04a      	beq.n	8003728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d847      	bhi.n	8003728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a25      	ldr	r2, [pc, #148]	; (8003734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d022      	beq.n	80036e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a24      	ldr	r2, [pc, #144]	; (8003738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01d      	beq.n	80036e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a22      	ldr	r2, [pc, #136]	; (800373c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d018      	beq.n	80036e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a21      	ldr	r2, [pc, #132]	; (8003740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1f      	ldr	r2, [pc, #124]	; (8003744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00e      	beq.n	80036e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d009      	beq.n	80036e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1c      	ldr	r2, [pc, #112]	; (800374c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4b17      	ldr	r3, [pc, #92]	; (8003754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	461a      	mov	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a15      	ldr	r2, [pc, #84]	; (8003758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003704:	671a      	str	r2, [r3, #112]	; 0x70
 8003706:	e009      	b.n	800371c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	461a      	mov	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a11      	ldr	r2, [pc, #68]	; (8003760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800371a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3b01      	subs	r3, #1
 8003720:	2201      	movs	r2, #1
 8003722:	409a      	lsls	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	58025408 	.word	0x58025408
 8003738:	5802541c 	.word	0x5802541c
 800373c:	58025430 	.word	0x58025430
 8003740:	58025444 	.word	0x58025444
 8003744:	58025458 	.word	0x58025458
 8003748:	5802546c 	.word	0x5802546c
 800374c:	58025480 	.word	0x58025480
 8003750:	58025494 	.word	0x58025494
 8003754:	1600963f 	.word	0x1600963f
 8003758:	58025940 	.word	0x58025940
 800375c:	1000823f 	.word	0x1000823f
 8003760:	40020940 	.word	0x40020940

08003764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003772:	4b86      	ldr	r3, [pc, #536]	; (800398c <HAL_GPIO_Init+0x228>)
 8003774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003776:	e18c      	b.n	8003a92 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	2101      	movs	r1, #1
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 817e 	beq.w	8003a8c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b01      	cmp	r3, #1
 800379a:	d005      	beq.n	80037a8 <HAL_GPIO_Init+0x44>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d130      	bne.n	800380a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	2203      	movs	r2, #3
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037de:	2201      	movs	r2, #1
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 0201 	and.w	r2, r3, #1
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b03      	cmp	r3, #3
 8003814:	d017      	beq.n	8003846 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	2203      	movs	r2, #3
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d123      	bne.n	800389a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	08da      	lsrs	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3208      	adds	r2, #8
 800385a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	220f      	movs	r2, #15
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4313      	orrs	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	08da      	lsrs	r2, r3, #3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3208      	adds	r2, #8
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	2203      	movs	r2, #3
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 0203 	and.w	r2, r3, #3
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80d8 	beq.w	8003a8c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038dc:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <HAL_GPIO_Init+0x22c>)
 80038de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038e2:	4a2b      	ldr	r2, [pc, #172]	; (8003990 <HAL_GPIO_Init+0x22c>)
 80038e4:	f043 0302 	orr.w	r3, r3, #2
 80038e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80038ec:	4b28      	ldr	r3, [pc, #160]	; (8003990 <HAL_GPIO_Init+0x22c>)
 80038ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038fa:	4a26      	ldr	r2, [pc, #152]	; (8003994 <HAL_GPIO_Init+0x230>)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	3302      	adds	r3, #2
 8003902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	220f      	movs	r2, #15
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <HAL_GPIO_Init+0x234>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d04a      	beq.n	80039bc <HAL_GPIO_Init+0x258>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1c      	ldr	r2, [pc, #112]	; (800399c <HAL_GPIO_Init+0x238>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d02b      	beq.n	8003986 <HAL_GPIO_Init+0x222>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <HAL_GPIO_Init+0x23c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d025      	beq.n	8003982 <HAL_GPIO_Init+0x21e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_GPIO_Init+0x240>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01f      	beq.n	800397e <HAL_GPIO_Init+0x21a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <HAL_GPIO_Init+0x244>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d019      	beq.n	800397a <HAL_GPIO_Init+0x216>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <HAL_GPIO_Init+0x248>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d013      	beq.n	8003976 <HAL_GPIO_Init+0x212>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <HAL_GPIO_Init+0x24c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00d      	beq.n	8003972 <HAL_GPIO_Init+0x20e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <HAL_GPIO_Init+0x250>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <HAL_GPIO_Init+0x20a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <HAL_GPIO_Init+0x254>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d101      	bne.n	800396a <HAL_GPIO_Init+0x206>
 8003966:	2309      	movs	r3, #9
 8003968:	e029      	b.n	80039be <HAL_GPIO_Init+0x25a>
 800396a:	230a      	movs	r3, #10
 800396c:	e027      	b.n	80039be <HAL_GPIO_Init+0x25a>
 800396e:	2307      	movs	r3, #7
 8003970:	e025      	b.n	80039be <HAL_GPIO_Init+0x25a>
 8003972:	2306      	movs	r3, #6
 8003974:	e023      	b.n	80039be <HAL_GPIO_Init+0x25a>
 8003976:	2305      	movs	r3, #5
 8003978:	e021      	b.n	80039be <HAL_GPIO_Init+0x25a>
 800397a:	2304      	movs	r3, #4
 800397c:	e01f      	b.n	80039be <HAL_GPIO_Init+0x25a>
 800397e:	2303      	movs	r3, #3
 8003980:	e01d      	b.n	80039be <HAL_GPIO_Init+0x25a>
 8003982:	2302      	movs	r3, #2
 8003984:	e01b      	b.n	80039be <HAL_GPIO_Init+0x25a>
 8003986:	2301      	movs	r3, #1
 8003988:	e019      	b.n	80039be <HAL_GPIO_Init+0x25a>
 800398a:	bf00      	nop
 800398c:	58000080 	.word	0x58000080
 8003990:	58024400 	.word	0x58024400
 8003994:	58000400 	.word	0x58000400
 8003998:	58020000 	.word	0x58020000
 800399c:	58020400 	.word	0x58020400
 80039a0:	58020800 	.word	0x58020800
 80039a4:	58020c00 	.word	0x58020c00
 80039a8:	58021000 	.word	0x58021000
 80039ac:	58021400 	.word	0x58021400
 80039b0:	58021800 	.word	0x58021800
 80039b4:	58021c00 	.word	0x58021c00
 80039b8:	58022400 	.word	0x58022400
 80039bc:	2300      	movs	r3, #0
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	f002 0203 	and.w	r2, r2, #3
 80039c4:	0092      	lsls	r2, r2, #2
 80039c6:	4093      	lsls	r3, r2
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039ce:	4938      	ldr	r1, [pc, #224]	; (8003ab0 <HAL_GPIO_Init+0x34c>)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	3302      	adds	r3, #2
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f47f ae6b 	bne.w	8003778 <HAL_GPIO_Init+0x14>
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
 8003aa6:	3724      	adds	r7, #36	; 0x24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	58000400 	.word	0x58000400

08003ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	807b      	strh	r3, [r7, #2]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ac4:	787b      	ldrb	r3, [r7, #1]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ad0:	e003      	b.n	8003ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ad2:	887b      	ldrh	r3, [r7, #2]
 8003ad4:	041a      	lsls	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	619a      	str	r2, [r3, #24]
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003af0:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <HAL_PWREx_ConfigSupply+0x70>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d00a      	beq.n	8003b12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003afc:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <HAL_PWREx_ConfigSupply+0x70>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d001      	beq.n	8003b0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e01f      	b.n	8003b4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e01d      	b.n	8003b4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b12:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <HAL_PWREx_ConfigSupply+0x70>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f023 0207 	bic.w	r2, r3, #7
 8003b1a:	490f      	ldr	r1, [pc, #60]	; (8003b58 <HAL_PWREx_ConfigSupply+0x70>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b22:	f7fd fbff 	bl	8001324 <HAL_GetTick>
 8003b26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b28:	e009      	b.n	8003b3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b2a:	f7fd fbfb 	bl	8001324 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b38:	d901      	bls.n	8003b3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e007      	b.n	8003b4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_PWREx_ConfigSupply+0x70>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4a:	d1ee      	bne.n	8003b2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	58024800 	.word	0x58024800

08003b5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08c      	sub	sp, #48	; 0x30
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e3c8      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8087 	beq.w	8003c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b7c:	4b88      	ldr	r3, [pc, #544]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b86:	4b86      	ldr	r3, [pc, #536]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d007      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x46>
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b94:	2b18      	cmp	r3, #24
 8003b96:	d110      	bne.n	8003bba <HAL_RCC_OscConfig+0x5e>
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d10b      	bne.n	8003bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba2:	4b7f      	ldr	r3, [pc, #508]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d06c      	beq.n	8003c88 <HAL_RCC_OscConfig+0x12c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d168      	bne.n	8003c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e3a2      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x76>
 8003bc4:	4b76      	ldr	r3, [pc, #472]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a75      	ldr	r2, [pc, #468]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	e02e      	b.n	8003c30 <HAL_RCC_OscConfig+0xd4>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x98>
 8003bda:	4b71      	ldr	r3, [pc, #452]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a70      	ldr	r2, [pc, #448]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b6e      	ldr	r3, [pc, #440]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a6d      	ldr	r2, [pc, #436]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e01d      	b.n	8003c30 <HAL_RCC_OscConfig+0xd4>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCC_OscConfig+0xbc>
 8003bfe:	4b68      	ldr	r3, [pc, #416]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a67      	ldr	r2, [pc, #412]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	4b65      	ldr	r3, [pc, #404]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a64      	ldr	r2, [pc, #400]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e00b      	b.n	8003c30 <HAL_RCC_OscConfig+0xd4>
 8003c18:	4b61      	ldr	r3, [pc, #388]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a60      	ldr	r2, [pc, #384]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	4b5e      	ldr	r3, [pc, #376]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a5d      	ldr	r2, [pc, #372]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d013      	beq.n	8003c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fd fb74 	bl	8001324 <HAL_GetTick>
 8003c3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c40:	f7fd fb70 	bl	8001324 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	; 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e356      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c52:	4b53      	ldr	r3, [pc, #332]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0xe4>
 8003c5e:	e014      	b.n	8003c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fd fb60 	bl	8001324 <HAL_GetTick>
 8003c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c68:	f7fd fb5c 	bl	8001324 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	; 0x64
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e342      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c7a:	4b49      	ldr	r3, [pc, #292]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x10c>
 8003c86:	e000      	b.n	8003c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 808c 	beq.w	8003db0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c98:	4b41      	ldr	r3, [pc, #260]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ca0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ca2:	4b3f      	ldr	r3, [pc, #252]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <HAL_RCC_OscConfig+0x162>
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	2b18      	cmp	r3, #24
 8003cb2:	d137      	bne.n	8003d24 <HAL_RCC_OscConfig+0x1c8>
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d132      	bne.n	8003d24 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cbe:	4b38      	ldr	r3, [pc, #224]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x17a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e314      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cd6:	4b32      	ldr	r3, [pc, #200]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 0219 	bic.w	r2, r3, #25
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	492f      	ldr	r1, [pc, #188]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fd fb1c 	bl	8001324 <HAL_GetTick>
 8003cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf0:	f7fd fb18 	bl	8001324 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e2fe      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d02:	4b27      	ldr	r3, [pc, #156]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0e:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	061b      	lsls	r3, r3, #24
 8003d1c:	4920      	ldr	r1, [pc, #128]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d22:	e045      	b.n	8003db0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d026      	beq.n	8003d7a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d2c:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 0219 	bic.w	r2, r3, #25
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4919      	ldr	r1, [pc, #100]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3e:	f7fd faf1 	bl	8001324 <HAL_GetTick>
 8003d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d46:	f7fd faed 	bl	8001324 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e2d3      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d58:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	490b      	ldr	r1, [pc, #44]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
 8003d78:	e01a      	b.n	8003db0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fd facd 	bl	8001324 <HAL_GetTick>
 8003d8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d8e:	f7fd fac9 	bl	8001324 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d903      	bls.n	8003da4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e2af      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
 8003da0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003da4:	4b96      	ldr	r3, [pc, #600]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1ee      	bne.n	8003d8e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d06a      	beq.n	8003e92 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dbc:	4b90      	ldr	r3, [pc, #576]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dc4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003dc6:	4b8e      	ldr	r3, [pc, #568]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d007      	beq.n	8003de2 <HAL_RCC_OscConfig+0x286>
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	2b18      	cmp	r3, #24
 8003dd6:	d11b      	bne.n	8003e10 <HAL_RCC_OscConfig+0x2b4>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d116      	bne.n	8003e10 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003de2:	4b87      	ldr	r3, [pc, #540]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <HAL_RCC_OscConfig+0x29e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	2b80      	cmp	r3, #128	; 0x80
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e282      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dfa:	4b81      	ldr	r3, [pc, #516]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	061b      	lsls	r3, r3, #24
 8003e08:	497d      	ldr	r1, [pc, #500]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e0e:	e040      	b.n	8003e92 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d023      	beq.n	8003e60 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e18:	4b79      	ldr	r3, [pc, #484]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a78      	ldr	r2, [pc, #480]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e24:	f7fd fa7e 	bl	8001324 <HAL_GetTick>
 8003e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e2c:	f7fd fa7a 	bl	8001324 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e260      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e3e:	4b70      	ldr	r3, [pc, #448]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e4a:	4b6d      	ldr	r3, [pc, #436]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	061b      	lsls	r3, r3, #24
 8003e58:	4969      	ldr	r1, [pc, #420]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60cb      	str	r3, [r1, #12]
 8003e5e:	e018      	b.n	8003e92 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e60:	4b67      	ldr	r3, [pc, #412]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a66      	ldr	r2, [pc, #408]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd fa5a 	bl	8001324 <HAL_GetTick>
 8003e70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e74:	f7fd fa56 	bl	8001324 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e23c      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e86:	4b5e      	ldr	r3, [pc, #376]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d036      	beq.n	8003f0c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d019      	beq.n	8003eda <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea6:	4b56      	ldr	r3, [pc, #344]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eaa:	4a55      	ldr	r2, [pc, #340]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb2:	f7fd fa37 	bl	8001324 <HAL_GetTick>
 8003eb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eba:	f7fd fa33 	bl	8001324 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e219      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ecc:	4b4c      	ldr	r3, [pc, #304]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x35e>
 8003ed8:	e018      	b.n	8003f0c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eda:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ede:	4a48      	ldr	r2, [pc, #288]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003ee0:	f023 0301 	bic.w	r3, r3, #1
 8003ee4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee6:	f7fd fa1d 	bl	8001324 <HAL_GetTick>
 8003eea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eee:	f7fd fa19 	bl	8001324 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e1ff      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f00:	4b3f      	ldr	r3, [pc, #252]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f0      	bne.n	8003eee <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d036      	beq.n	8003f86 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d019      	beq.n	8003f54 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f20:	4b37      	ldr	r3, [pc, #220]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a36      	ldr	r2, [pc, #216]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003f26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f2c:	f7fd f9fa 	bl	8001324 <HAL_GetTick>
 8003f30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f34:	f7fd f9f6 	bl	8001324 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e1dc      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f46:	4b2e      	ldr	r3, [pc, #184]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x3d8>
 8003f52:	e018      	b.n	8003f86 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f54:	4b2a      	ldr	r3, [pc, #168]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a29      	ldr	r2, [pc, #164]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f60:	f7fd f9e0 	bl	8001324 <HAL_GetTick>
 8003f64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f68:	f7fd f9dc 	bl	8001324 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e1c2      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f7a:	4b21      	ldr	r3, [pc, #132]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8086 	beq.w	80040a0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f94:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <HAL_RCC_OscConfig+0x4a8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1a      	ldr	r2, [pc, #104]	; (8004004 <HAL_RCC_OscConfig+0x4a8>)
 8003f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fa0:	f7fd f9c0 	bl	8001324 <HAL_GetTick>
 8003fa4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa8:	f7fd f9bc 	bl	8001324 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b64      	cmp	r3, #100	; 0x64
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e1a2      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <HAL_RCC_OscConfig+0x4a8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d106      	bne.n	8003fdc <HAL_RCC_OscConfig+0x480>
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fda:	e032      	b.n	8004042 <HAL_RCC_OscConfig+0x4e6>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d111      	bne.n	8004008 <HAL_RCC_OscConfig+0x4ac>
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe8:	4a05      	ldr	r2, [pc, #20]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff0:	4b03      	ldr	r3, [pc, #12]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	4a02      	ldr	r2, [pc, #8]	; (8004000 <HAL_RCC_OscConfig+0x4a4>)
 8003ff6:	f023 0304 	bic.w	r3, r3, #4
 8003ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffc:	e021      	b.n	8004042 <HAL_RCC_OscConfig+0x4e6>
 8003ffe:	bf00      	nop
 8004000:	58024400 	.word	0x58024400
 8004004:	58024800 	.word	0x58024800
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b05      	cmp	r3, #5
 800400e:	d10c      	bne.n	800402a <HAL_RCC_OscConfig+0x4ce>
 8004010:	4b83      	ldr	r3, [pc, #524]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a82      	ldr	r2, [pc, #520]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004016:	f043 0304 	orr.w	r3, r3, #4
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
 800401c:	4b80      	ldr	r3, [pc, #512]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	4a7f      	ldr	r2, [pc, #508]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	6713      	str	r3, [r2, #112]	; 0x70
 8004028:	e00b      	b.n	8004042 <HAL_RCC_OscConfig+0x4e6>
 800402a:	4b7d      	ldr	r3, [pc, #500]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a7c      	ldr	r2, [pc, #496]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
 8004036:	4b7a      	ldr	r3, [pc, #488]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	4a79      	ldr	r2, [pc, #484]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 800403c:	f023 0304 	bic.w	r3, r3, #4
 8004040:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d015      	beq.n	8004076 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404a:	f7fd f96b 	bl	8001324 <HAL_GetTick>
 800404e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004050:	e00a      	b.n	8004068 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004052:	f7fd f967 	bl	8001324 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004060:	4293      	cmp	r3, r2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e14b      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004068:	4b6d      	ldr	r3, [pc, #436]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0ee      	beq.n	8004052 <HAL_RCC_OscConfig+0x4f6>
 8004074:	e014      	b.n	80040a0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7fd f955 	bl	8001324 <HAL_GetTick>
 800407a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fd f951 	bl	8001324 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e135      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004094:	4b62      	ldr	r3, [pc, #392]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ee      	bne.n	800407e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 812a 	beq.w	80042fe <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040aa:	4b5d      	ldr	r3, [pc, #372]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040b2:	2b18      	cmp	r3, #24
 80040b4:	f000 80ba 	beq.w	800422c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	2b02      	cmp	r3, #2
 80040be:	f040 8095 	bne.w	80041ec <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c2:	4b57      	ldr	r3, [pc, #348]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a56      	ldr	r2, [pc, #344]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80040c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fd f929 	bl	8001324 <HAL_GetTick>
 80040d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fd f925 	bl	8001324 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e10b      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040e8:	4b4d      	ldr	r3, [pc, #308]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f4:	4b4a      	ldr	r3, [pc, #296]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80040f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040f8:	4b4a      	ldr	r3, [pc, #296]	; (8004224 <HAL_RCC_OscConfig+0x6c8>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004104:	0112      	lsls	r2, r2, #4
 8004106:	430a      	orrs	r2, r1
 8004108:	4945      	ldr	r1, [pc, #276]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 800410a:	4313      	orrs	r3, r2
 800410c:	628b      	str	r3, [r1, #40]	; 0x28
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	3b01      	subs	r3, #1
 8004114:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411c:	3b01      	subs	r3, #1
 800411e:	025b      	lsls	r3, r3, #9
 8004120:	b29b      	uxth	r3, r3
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	3b01      	subs	r3, #1
 800412a:	041b      	lsls	r3, r3, #16
 800412c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	3b01      	subs	r3, #1
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800413e:	4938      	ldr	r1, [pc, #224]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004144:	4b36      	ldr	r3, [pc, #216]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	4a35      	ldr	r2, [pc, #212]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004150:	4b33      	ldr	r3, [pc, #204]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004154:	4b34      	ldr	r3, [pc, #208]	; (8004228 <HAL_RCC_OscConfig+0x6cc>)
 8004156:	4013      	ands	r3, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800415c:	00d2      	lsls	r2, r2, #3
 800415e:	4930      	ldr	r1, [pc, #192]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004160:	4313      	orrs	r3, r2
 8004162:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004164:	4b2e      	ldr	r3, [pc, #184]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	f023 020c 	bic.w	r2, r3, #12
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	492b      	ldr	r1, [pc, #172]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004172:	4313      	orrs	r3, r2
 8004174:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004176:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	f023 0202 	bic.w	r2, r3, #2
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	4927      	ldr	r1, [pc, #156]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004184:	4313      	orrs	r3, r2
 8004186:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004188:	4b25      	ldr	r3, [pc, #148]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	4a24      	ldr	r2, [pc, #144]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 800418e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004194:	4b22      	ldr	r3, [pc, #136]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	4a21      	ldr	r2, [pc, #132]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 800419a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800419e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041a0:	4b1f      	ldr	r3, [pc, #124]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80041a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80041ac:	4b1c      	ldr	r3, [pc, #112]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a18      	ldr	r2, [pc, #96]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80041be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fd f8ae 	bl	8001324 <HAL_GetTick>
 80041c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fd f8aa 	bl	8001324 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e090      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041de:	4b10      	ldr	r3, [pc, #64]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x670>
 80041ea:	e088      	b.n	80042fe <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 80041f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fd f894 	bl	8001324 <HAL_GetTick>
 80041fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004200:	f7fd f890 	bl	8001324 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e076      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004212:	4b03      	ldr	r3, [pc, #12]	; (8004220 <HAL_RCC_OscConfig+0x6c4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x6a4>
 800421e:	e06e      	b.n	80042fe <HAL_RCC_OscConfig+0x7a2>
 8004220:	58024400 	.word	0x58024400
 8004224:	fffffc0c 	.word	0xfffffc0c
 8004228:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800422c:	4b36      	ldr	r3, [pc, #216]	; (8004308 <HAL_RCC_OscConfig+0x7ac>)
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004232:	4b35      	ldr	r3, [pc, #212]	; (8004308 <HAL_RCC_OscConfig+0x7ac>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	2b01      	cmp	r3, #1
 800423e:	d031      	beq.n	80042a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f003 0203 	and.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d12a      	bne.n	80042a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d122      	bne.n	80042a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d11a      	bne.n	80042a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	0a5b      	lsrs	r3, r3, #9
 8004272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d111      	bne.n	80042a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	0c1b      	lsrs	r3, r3, #16
 8004284:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d108      	bne.n	80042a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	0e1b      	lsrs	r3, r3, #24
 8004296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e02b      	b.n	8004300 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80042a8:	4b17      	ldr	r3, [pc, #92]	; (8004308 <HAL_RCC_OscConfig+0x7ac>)
 80042aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ac:	08db      	lsrs	r3, r3, #3
 80042ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d01f      	beq.n	80042fe <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_RCC_OscConfig+0x7ac>)
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	4a11      	ldr	r2, [pc, #68]	; (8004308 <HAL_RCC_OscConfig+0x7ac>)
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042ca:	f7fd f82b 	bl	8001324 <HAL_GetTick>
 80042ce:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80042d0:	bf00      	nop
 80042d2:	f7fd f827 	bl	8001324 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	4293      	cmp	r3, r2
 80042dc:	d0f9      	beq.n	80042d2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_RCC_OscConfig+0x7ac>)
 80042e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <HAL_RCC_OscConfig+0x7b0>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042ea:	00d2      	lsls	r2, r2, #3
 80042ec:	4906      	ldr	r1, [pc, #24]	; (8004308 <HAL_RCC_OscConfig+0x7ac>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_RCC_OscConfig+0x7ac>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	4a04      	ldr	r2, [pc, #16]	; (8004308 <HAL_RCC_OscConfig+0x7ac>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3730      	adds	r7, #48	; 0x30
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	58024400 	.word	0x58024400
 800430c:	ffff0007 	.word	0xffff0007

08004310 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e19c      	b.n	800465e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004324:	4b8a      	ldr	r3, [pc, #552]	; (8004550 <HAL_RCC_ClockConfig+0x240>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d910      	bls.n	8004354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b87      	ldr	r3, [pc, #540]	; (8004550 <HAL_RCC_ClockConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 020f 	bic.w	r2, r3, #15
 800433a:	4985      	ldr	r1, [pc, #532]	; (8004550 <HAL_RCC_ClockConfig+0x240>)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b83      	ldr	r3, [pc, #524]	; (8004550 <HAL_RCC_ClockConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e184      	b.n	800465e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d010      	beq.n	8004382 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	4b7b      	ldr	r3, [pc, #492]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800436c:	429a      	cmp	r2, r3
 800436e:	d908      	bls.n	8004382 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004370:	4b78      	ldr	r3, [pc, #480]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	4975      	ldr	r1, [pc, #468]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 800437e:	4313      	orrs	r3, r2
 8004380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d010      	beq.n	80043b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	4b70      	ldr	r3, [pc, #448]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800439a:	429a      	cmp	r2, r3
 800439c:	d908      	bls.n	80043b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800439e:	4b6d      	ldr	r3, [pc, #436]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	496a      	ldr	r1, [pc, #424]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d010      	beq.n	80043de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699a      	ldr	r2, [r3, #24]
 80043c0:	4b64      	ldr	r3, [pc, #400]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d908      	bls.n	80043de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043cc:	4b61      	ldr	r3, [pc, #388]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	495e      	ldr	r1, [pc, #376]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d010      	beq.n	800440c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69da      	ldr	r2, [r3, #28]
 80043ee:	4b59      	ldr	r3, [pc, #356]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d908      	bls.n	800440c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043fa:	4b56      	ldr	r3, [pc, #344]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	4953      	ldr	r1, [pc, #332]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 8004408:	4313      	orrs	r3, r2
 800440a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d010      	beq.n	800443a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	4b4d      	ldr	r3, [pc, #308]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	429a      	cmp	r2, r3
 8004426:	d908      	bls.n	800443a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004428:	4b4a      	ldr	r3, [pc, #296]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f023 020f 	bic.w	r2, r3, #15
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4947      	ldr	r1, [pc, #284]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 8004436:	4313      	orrs	r3, r2
 8004438:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d055      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004446:	4b43      	ldr	r3, [pc, #268]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4940      	ldr	r1, [pc, #256]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 8004454:	4313      	orrs	r3, r2
 8004456:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d107      	bne.n	8004470 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004460:	4b3c      	ldr	r3, [pc, #240]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d121      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0f6      	b.n	800465e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b03      	cmp	r3, #3
 8004476:	d107      	bne.n	8004488 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004478:	4b36      	ldr	r3, [pc, #216]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d115      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0ea      	b.n	800465e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004490:	4b30      	ldr	r3, [pc, #192]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d109      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0de      	b.n	800465e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044a0:	4b2c      	ldr	r3, [pc, #176]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0d6      	b.n	800465e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044b0:	4b28      	ldr	r3, [pc, #160]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f023 0207 	bic.w	r2, r3, #7
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	4925      	ldr	r1, [pc, #148]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c2:	f7fc ff2f 	bl	8001324 <HAL_GetTick>
 80044c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ca:	f7fc ff2b 	bl	8001324 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e0be      	b.n	800465e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e0:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d1eb      	bne.n	80044ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d010      	beq.n	8004520 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	4b14      	ldr	r3, [pc, #80]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	429a      	cmp	r2, r3
 800450c:	d208      	bcs.n	8004520 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800450e:	4b11      	ldr	r3, [pc, #68]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f023 020f 	bic.w	r2, r3, #15
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	490e      	ldr	r1, [pc, #56]	; (8004554 <HAL_RCC_ClockConfig+0x244>)
 800451c:	4313      	orrs	r3, r2
 800451e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCC_ClockConfig+0x240>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d214      	bcs.n	8004558 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <HAL_RCC_ClockConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 020f 	bic.w	r2, r3, #15
 8004536:	4906      	ldr	r1, [pc, #24]	; (8004550 <HAL_RCC_ClockConfig+0x240>)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	4313      	orrs	r3, r2
 800453c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800453e:	4b04      	ldr	r3, [pc, #16]	; (8004550 <HAL_RCC_ClockConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d005      	beq.n	8004558 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e086      	b.n	800465e <HAL_RCC_ClockConfig+0x34e>
 8004550:	52002000 	.word	0x52002000
 8004554:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d010      	beq.n	8004586 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004570:	429a      	cmp	r2, r3
 8004572:	d208      	bcs.n	8004586 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004574:	4b3c      	ldr	r3, [pc, #240]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	4939      	ldr	r1, [pc, #228]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 8004582:	4313      	orrs	r3, r2
 8004584:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d010      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	4b34      	ldr	r3, [pc, #208]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800459e:	429a      	cmp	r2, r3
 80045a0:	d208      	bcs.n	80045b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045a2:	4b31      	ldr	r3, [pc, #196]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	492e      	ldr	r1, [pc, #184]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d010      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699a      	ldr	r2, [r3, #24]
 80045c4:	4b28      	ldr	r3, [pc, #160]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d208      	bcs.n	80045e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045d0:	4b25      	ldr	r3, [pc, #148]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	4922      	ldr	r1, [pc, #136]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d010      	beq.n	8004610 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69da      	ldr	r2, [r3, #28]
 80045f2:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d208      	bcs.n	8004610 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80045fe:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	4917      	ldr	r1, [pc, #92]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 800460c:	4313      	orrs	r3, r2
 800460e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004610:	f000 f834 	bl	800467c <HAL_RCC_GetSysClockFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	4b14      	ldr	r3, [pc, #80]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	4912      	ldr	r1, [pc, #72]	; (800466c <HAL_RCC_ClockConfig+0x35c>)
 8004622:	5ccb      	ldrb	r3, [r1, r3]
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
 800462c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800462e:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <HAL_RCC_ClockConfig+0x358>)
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	4a0d      	ldr	r2, [pc, #52]	; (800466c <HAL_RCC_ClockConfig+0x35c>)
 8004638:	5cd3      	ldrb	r3, [r2, r3]
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
 8004644:	4a0a      	ldr	r2, [pc, #40]	; (8004670 <HAL_RCC_ClockConfig+0x360>)
 8004646:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004648:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <HAL_RCC_ClockConfig+0x364>)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800464e:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <HAL_RCC_ClockConfig+0x368>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fc fe1c 	bl	8001290 <HAL_InitTick>
 8004658:	4603      	mov	r3, r0
 800465a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800465c:	7bfb      	ldrb	r3, [r7, #15]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	58024400 	.word	0x58024400
 800466c:	08008be4 	.word	0x08008be4
 8004670:	24000004 	.word	0x24000004
 8004674:	24000000 	.word	0x24000000
 8004678:	24000008 	.word	0x24000008

0800467c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800467c:	b480      	push	{r7}
 800467e:	b089      	sub	sp, #36	; 0x24
 8004680:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004682:	4bb3      	ldr	r3, [pc, #716]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800468a:	2b18      	cmp	r3, #24
 800468c:	f200 8155 	bhi.w	800493a <HAL_RCC_GetSysClockFreq+0x2be>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046fd 	.word	0x080046fd
 800469c:	0800493b 	.word	0x0800493b
 80046a0:	0800493b 	.word	0x0800493b
 80046a4:	0800493b 	.word	0x0800493b
 80046a8:	0800493b 	.word	0x0800493b
 80046ac:	0800493b 	.word	0x0800493b
 80046b0:	0800493b 	.word	0x0800493b
 80046b4:	0800493b 	.word	0x0800493b
 80046b8:	08004723 	.word	0x08004723
 80046bc:	0800493b 	.word	0x0800493b
 80046c0:	0800493b 	.word	0x0800493b
 80046c4:	0800493b 	.word	0x0800493b
 80046c8:	0800493b 	.word	0x0800493b
 80046cc:	0800493b 	.word	0x0800493b
 80046d0:	0800493b 	.word	0x0800493b
 80046d4:	0800493b 	.word	0x0800493b
 80046d8:	08004729 	.word	0x08004729
 80046dc:	0800493b 	.word	0x0800493b
 80046e0:	0800493b 	.word	0x0800493b
 80046e4:	0800493b 	.word	0x0800493b
 80046e8:	0800493b 	.word	0x0800493b
 80046ec:	0800493b 	.word	0x0800493b
 80046f0:	0800493b 	.word	0x0800493b
 80046f4:	0800493b 	.word	0x0800493b
 80046f8:	0800472f 	.word	0x0800472f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046fc:	4b94      	ldr	r3, [pc, #592]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d009      	beq.n	800471c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004708:	4b91      	ldr	r3, [pc, #580]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	08db      	lsrs	r3, r3, #3
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	4a90      	ldr	r2, [pc, #576]	; (8004954 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
 8004718:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800471a:	e111      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800471c:	4b8d      	ldr	r3, [pc, #564]	; (8004954 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800471e:	61bb      	str	r3, [r7, #24]
      break;
 8004720:	e10e      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004722:	4b8d      	ldr	r3, [pc, #564]	; (8004958 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004724:	61bb      	str	r3, [r7, #24]
      break;
 8004726:	e10b      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004728:	4b8c      	ldr	r3, [pc, #560]	; (800495c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800472a:	61bb      	str	r3, [r7, #24]
      break;
 800472c:	e108      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800472e:	4b88      	ldr	r3, [pc, #544]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004738:	4b85      	ldr	r3, [pc, #532]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004742:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004744:	4b82      	ldr	r3, [pc, #520]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800474e:	4b80      	ldr	r3, [pc, #512]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004752:	08db      	lsrs	r3, r3, #3
 8004754:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	fb02 f303 	mul.w	r3, r2, r3
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004766:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80e1 	beq.w	8004934 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b02      	cmp	r3, #2
 8004776:	f000 8083 	beq.w	8004880 <HAL_RCC_GetSysClockFreq+0x204>
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b02      	cmp	r3, #2
 800477e:	f200 80a1 	bhi.w	80048c4 <HAL_RCC_GetSysClockFreq+0x248>
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0x114>
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d056      	beq.n	800483c <HAL_RCC_GetSysClockFreq+0x1c0>
 800478e:	e099      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004790:	4b6f      	ldr	r3, [pc, #444]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	d02d      	beq.n	80047f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800479c:	4b6c      	ldr	r3, [pc, #432]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	08db      	lsrs	r3, r3, #3
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	4a6b      	ldr	r2, [pc, #428]	; (8004954 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	ee07 3a90 	vmov	s15, r3
 80047b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c6:	4b62      	ldr	r3, [pc, #392]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004960 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80047f6:	e087      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004802:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004964 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480a:	4b51      	ldr	r3, [pc, #324]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481a:	ed97 6a02 	vldr	s12, [r7, #8]
 800481e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004960 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800482e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800483a:	e065      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004846:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004968 <HAL_RCC_GetSysClockFreq+0x2ec>
 800484a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484e:	4b40      	ldr	r3, [pc, #256]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004862:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004960 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800487e:	e043      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800496c <HAL_RCC_GetSysClockFreq+0x2f0>
 800488e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004892:	4b2f      	ldr	r3, [pc, #188]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004960 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048c2:	e021      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004968 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d6:	4b1e      	ldr	r3, [pc, #120]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004960 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004902:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004906:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004908:	4b11      	ldr	r3, [pc, #68]	; (8004950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	0a5b      	lsrs	r3, r3, #9
 800490e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004912:	3301      	adds	r3, #1
 8004914:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	ee07 3a90 	vmov	s15, r3
 800491c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004920:	edd7 6a07 	vldr	s13, [r7, #28]
 8004924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800492c:	ee17 3a90 	vmov	r3, s15
 8004930:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004932:	e005      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	61bb      	str	r3, [r7, #24]
      break;
 8004938:	e002      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800493c:	61bb      	str	r3, [r7, #24]
      break;
 800493e:	bf00      	nop
  }

  return sysclockfreq;
 8004940:	69bb      	ldr	r3, [r7, #24]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3724      	adds	r7, #36	; 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	58024400 	.word	0x58024400
 8004954:	03d09000 	.word	0x03d09000
 8004958:	003d0900 	.word	0x003d0900
 800495c:	017d7840 	.word	0x017d7840
 8004960:	46000000 	.word	0x46000000
 8004964:	4c742400 	.word	0x4c742400
 8004968:	4a742400 	.word	0x4a742400
 800496c:	4bbebc20 	.word	0x4bbebc20

08004970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004976:	f7ff fe81 	bl	800467c <HAL_RCC_GetSysClockFreq>
 800497a:	4602      	mov	r2, r0
 800497c:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	490f      	ldr	r1, [pc, #60]	; (80049c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004988:	5ccb      	ldrb	r3, [r1, r3]
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	fa22 f303 	lsr.w	r3, r2, r3
 8004992:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004994:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	4a09      	ldr	r2, [pc, #36]	; (80049c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800499e:	5cd3      	ldrb	r3, [r2, r3]
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	fa22 f303 	lsr.w	r3, r2, r3
 80049aa:	4a07      	ldr	r2, [pc, #28]	; (80049c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049ae:	4a07      	ldr	r2, [pc, #28]	; (80049cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049b4:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049b6:	681b      	ldr	r3, [r3, #0]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	58024400 	.word	0x58024400
 80049c4:	08008be4 	.word	0x08008be4
 80049c8:	24000004 	.word	0x24000004
 80049cc:	24000000 	.word	0x24000000

080049d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049d4:	f7ff ffcc 	bl	8004970 <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	091b      	lsrs	r3, r3, #4
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4904      	ldr	r1, [pc, #16]	; (80049f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	58024400 	.word	0x58024400
 80049f8:	08008be4 	.word	0x08008be4

080049fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a00:	b0c6      	sub	sp, #280	; 0x118
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004a20:	2500      	movs	r5, #0
 8004a22:	ea54 0305 	orrs.w	r3, r4, r5
 8004a26:	d049      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a32:	d02f      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004a34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a38:	d828      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a3e:	d01a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a44:	d822      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4e:	d007      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a50:	e01c      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a52:	4bab      	ldr	r3, [pc, #684]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	4aaa      	ldr	r2, [pc, #680]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a5e:	e01a      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a64:	3308      	adds	r3, #8
 8004a66:	2102      	movs	r1, #2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f002 fa49 	bl	8006f00 <RCCEx_PLL2_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a74:	e00f      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a7a:	3328      	adds	r3, #40	; 0x28
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f002 faf0 	bl	8007064 <RCCEx_PLL3_Config>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a8a:	e004      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a92:	e000      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10a      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a9e:	4b98      	ldr	r3, [pc, #608]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aac:	4a94      	ldr	r2, [pc, #592]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	6513      	str	r3, [r2, #80]	; 0x50
 8004ab2:	e003      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ab8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004ac8:	f04f 0900 	mov.w	r9, #0
 8004acc:	ea58 0309 	orrs.w	r3, r8, r9
 8004ad0:	d047      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d82a      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004af9 	.word	0x08004af9
 8004ae8:	08004b07 	.word	0x08004b07
 8004aec:	08004b1d 	.word	0x08004b1d
 8004af0:	08004b3b 	.word	0x08004b3b
 8004af4:	08004b3b 	.word	0x08004b3b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af8:	4b81      	ldr	r3, [pc, #516]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	4a80      	ldr	r2, [pc, #512]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b04:	e01a      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f002 f9f6 	bl	8006f00 <RCCEx_PLL2_Config>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b1a:	e00f      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b20:	3328      	adds	r3, #40	; 0x28
 8004b22:	2100      	movs	r1, #0
 8004b24:	4618      	mov	r0, r3
 8004b26:	f002 fa9d 	bl	8007064 <RCCEx_PLL3_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b30:	e004      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b38:	e000      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b44:	4b6e      	ldr	r3, [pc, #440]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b48:	f023 0107 	bic.w	r1, r3, #7
 8004b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b52:	4a6b      	ldr	r2, [pc, #428]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6513      	str	r3, [r2, #80]	; 0x50
 8004b58:	e003      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8004b6e:	f04f 0b00 	mov.w	fp, #0
 8004b72:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b76:	d05b      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b80:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004b84:	d03b      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004b86:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004b8a:	d834      	bhi.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004b8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b90:	d037      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004b92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b96:	d82e      	bhi.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004b98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b9c:	d033      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ba2:	d828      	bhi.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba8:	d01a      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bae:	d822      	bhi.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004bb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bb8:	d007      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004bba:	e01c      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bbc:	4b50      	ldr	r3, [pc, #320]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	4a4f      	ldr	r2, [pc, #316]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bc8:	e01e      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bce:	3308      	adds	r3, #8
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f002 f994 	bl	8006f00 <RCCEx_PLL2_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004bde:	e013      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004be4:	3328      	adds	r3, #40	; 0x28
 8004be6:	2100      	movs	r1, #0
 8004be8:	4618      	mov	r0, r3
 8004bea:	f002 fa3b 	bl	8007064 <RCCEx_PLL3_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bf4:	e008      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004bfc:	e004      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004bfe:	bf00      	nop
 8004c00:	e002      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10b      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c10:	4b3b      	ldr	r3, [pc, #236]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c14:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c20:	4a37      	ldr	r2, [pc, #220]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c22:	430b      	orrs	r3, r1
 8004c24:	6593      	str	r3, [r2, #88]	; 0x58
 8004c26:	e003      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c40:	2300      	movs	r3, #0
 8004c42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	d05d      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c58:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004c5c:	d03b      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004c5e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004c62:	d834      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c68:	d037      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004c6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c6e:	d82e      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004c70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c74:	d033      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004c76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c7a:	d828      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004c7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c80:	d01a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004c82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c86:	d822      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c90:	d007      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004c92:	e01c      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c94:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	4a19      	ldr	r2, [pc, #100]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ca0:	e01e      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f002 f928 	bl	8006f00 <RCCEx_PLL2_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004cb6:	e013      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cbc:	3328      	adds	r3, #40	; 0x28
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f002 f9cf 	bl	8007064 <RCCEx_PLL3_Config>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004cd4:	e004      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004cd6:	bf00      	nop
 8004cd8:	e002      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004cda:	bf00      	nop
 8004cdc:	e000      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10d      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cf4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cf8:	4a01      	ldr	r2, [pc, #4]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8004cfe:	e005      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004d00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004d18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d22:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	d03a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d32:	2b30      	cmp	r3, #48	; 0x30
 8004d34:	d01f      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004d36:	2b30      	cmp	r3, #48	; 0x30
 8004d38:	d819      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004d3a:	2b20      	cmp	r3, #32
 8004d3c:	d00c      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d815      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d019      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004d46:	2b10      	cmp	r3, #16
 8004d48:	d111      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d4a:	4baa      	ldr	r3, [pc, #680]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	4aa9      	ldr	r2, [pc, #676]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004d56:	e011      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	2102      	movs	r1, #2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f002 f8cd 	bl	8006f00 <RCCEx_PLL2_Config>
 8004d66:	4603      	mov	r3, r0
 8004d68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004d6c:	e006      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d74:	e002      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004d76:	bf00      	nop
 8004d78:	e000      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d84:	4b9b      	ldr	r3, [pc, #620]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d88:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d92:	4a98      	ldr	r2, [pc, #608]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d94:	430b      	orrs	r3, r1
 8004d96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d98:	e003      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004dae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004db2:	2300      	movs	r3, #0
 8004db4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004db8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	d051      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dcc:	d035      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dd2:	d82e      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004dd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dd8:	d031      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004dda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dde:	d828      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de4:	d01a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dea:	d822      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df4:	d007      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004df6:	e01c      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df8:	4b7e      	ldr	r3, [pc, #504]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	4a7d      	ldr	r2, [pc, #500]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e04:	e01c      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f002 f876 	bl	8006f00 <RCCEx_PLL2_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e1a:	e011      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e20:	3328      	adds	r3, #40	; 0x28
 8004e22:	2100      	movs	r1, #0
 8004e24:	4618      	mov	r0, r3
 8004e26:	f002 f91d 	bl	8007064 <RCCEx_PLL3_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e30:	e006      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004e38:	e002      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e48:	4b6a      	ldr	r3, [pc, #424]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e56:	4a67      	ldr	r2, [pc, #412]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6513      	str	r3, [r2, #80]	; 0x50
 8004e5c:	e003      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e62:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004e72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e76:	2300      	movs	r3, #0
 8004e78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e7c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4313      	orrs	r3, r2
 8004e84:	d053      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e90:	d033      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004e92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e96:	d82c      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004e98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e9c:	d02f      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004e9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ea2:	d826      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004ea4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ea8:	d02b      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004eaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eae:	d820      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb4:	d012      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004eb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eba:	d81a      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d022      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec4:	d115      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eca:	3308      	adds	r3, #8
 8004ecc:	2101      	movs	r1, #1
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f002 f816 	bl	8006f00 <RCCEx_PLL2_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004eda:	e015      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee0:	3328      	adds	r3, #40	; 0x28
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f002 f8bd 	bl	8007064 <RCCEx_PLL3_Config>
 8004eea:	4603      	mov	r3, r0
 8004eec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ef0:	e00a      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ef8:	e006      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004efa:	bf00      	nop
 8004efc:	e004      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004efe:	bf00      	nop
 8004f00:	e002      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f10:	4b38      	ldr	r3, [pc, #224]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1e:	4a35      	ldr	r2, [pc, #212]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f20:	430b      	orrs	r3, r1
 8004f22:	6513      	str	r3, [r2, #80]	; 0x50
 8004f24:	e003      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004f44:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	d058      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f5a:	d033      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f60:	d82c      	bhi.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f66:	d02f      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6c:	d826      	bhi.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004f6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f72:	d02b      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004f74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f78:	d820      	bhi.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f7e:	d012      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f84:	d81a      	bhi.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d022      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f8e:	d115      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f94:	3308      	adds	r3, #8
 8004f96:	2101      	movs	r1, #1
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f001 ffb1 	bl	8006f00 <RCCEx_PLL2_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fa4:	e015      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004faa:	3328      	adds	r3, #40	; 0x28
 8004fac:	2101      	movs	r1, #1
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f002 f858 	bl	8007064 <RCCEx_PLL3_Config>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004fc2:	e006      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004fc4:	bf00      	nop
 8004fc6:	e004      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004fc8:	bf00      	nop
 8004fca:	e002      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004fcc:	bf00      	nop
 8004fce:	e000      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10e      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fea:	4a02      	ldr	r2, [pc, #8]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fec:	430b      	orrs	r3, r1
 8004fee:	6593      	str	r3, [r2, #88]	; 0x58
 8004ff0:	e006      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004ff2:	bf00      	nop
 8004ff4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ffc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800500c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005010:	2300      	movs	r3, #0
 8005012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005016:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800501a:	460b      	mov	r3, r1
 800501c:	4313      	orrs	r3, r2
 800501e:	d037      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502a:	d00e      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800502c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005030:	d816      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d018      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800503a:	d111      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800503c:	4bc4      	ldr	r3, [pc, #784]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	4ac3      	ldr	r2, [pc, #780]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005046:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005048:	e00f      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800504a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800504e:	3308      	adds	r3, #8
 8005050:	2101      	movs	r1, #1
 8005052:	4618      	mov	r0, r3
 8005054:	f001 ff54 	bl	8006f00 <RCCEx_PLL2_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800505e:	e004      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005066:	e000      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800506a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10a      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005072:	4bb7      	ldr	r3, [pc, #732]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005076:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800507a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800507e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005080:	4ab3      	ldr	r2, [pc, #716]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005082:	430b      	orrs	r3, r1
 8005084:	6513      	str	r3, [r2, #80]	; 0x50
 8005086:	e003      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005088:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800508c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800509c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050a0:	2300      	movs	r3, #0
 80050a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80050aa:	460b      	mov	r3, r1
 80050ac:	4313      	orrs	r3, r2
 80050ae:	d039      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80050b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d81c      	bhi.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050fd 	.word	0x080050fd
 80050c4:	080050d1 	.word	0x080050d1
 80050c8:	080050df 	.word	0x080050df
 80050cc:	080050fd 	.word	0x080050fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d0:	4b9f      	ldr	r3, [pc, #636]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	4a9e      	ldr	r2, [pc, #632]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050dc:	e00f      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e2:	3308      	adds	r3, #8
 80050e4:	2102      	movs	r1, #2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f001 ff0a 	bl	8006f00 <RCCEx_PLL2_Config>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050f2:	e004      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80050fa:	e000      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80050fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005106:	4b92      	ldr	r3, [pc, #584]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510a:	f023 0103 	bic.w	r1, r3, #3
 800510e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005114:	4a8e      	ldr	r2, [pc, #568]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005116:	430b      	orrs	r3, r1
 8005118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800511a:	e003      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005120:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005130:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005134:	2300      	movs	r3, #0
 8005136:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800513a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800513e:	460b      	mov	r3, r1
 8005140:	4313      	orrs	r3, r2
 8005142:	f000 8099 	beq.w	8005278 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005146:	4b83      	ldr	r3, [pc, #524]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a82      	ldr	r2, [pc, #520]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800514c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005150:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005152:	f7fc f8e7 	bl	8001324 <HAL_GetTick>
 8005156:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800515a:	e00b      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515c:	f7fc f8e2 	bl	8001324 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b64      	cmp	r3, #100	; 0x64
 800516a:	d903      	bls.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005172:	e005      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005174:	4b77      	ldr	r3, [pc, #476]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0ed      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005180:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005184:	2b00      	cmp	r3, #0
 8005186:	d173      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005188:	4b71      	ldr	r3, [pc, #452]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800518a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800518c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005190:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005194:	4053      	eors	r3, r2
 8005196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519a:	2b00      	cmp	r3, #0
 800519c:	d015      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800519e:	4b6c      	ldr	r3, [pc, #432]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051aa:	4b69      	ldr	r3, [pc, #420]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	4a68      	ldr	r2, [pc, #416]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051b6:	4b66      	ldr	r3, [pc, #408]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	4a65      	ldr	r2, [pc, #404]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80051c2:	4a63      	ldr	r2, [pc, #396]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80051ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d6:	d118      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d8:	f7fc f8a4 	bl	8001324 <HAL_GetTick>
 80051dc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051e0:	e00d      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fc f89f 	bl	8001324 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051ec:	1ad2      	subs	r2, r2, r3
 80051ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d903      	bls.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80051fc:	e005      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051fe:	4b54      	ldr	r3, [pc, #336]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0eb      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800520a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800520e:	2b00      	cmp	r3, #0
 8005210:	d129      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005216:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800521a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800521e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005222:	d10e      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005224:	4b4a      	ldr	r3, [pc, #296]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800522c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005230:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005234:	091a      	lsrs	r2, r3, #4
 8005236:	4b48      	ldr	r3, [pc, #288]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005238:	4013      	ands	r3, r2
 800523a:	4a45      	ldr	r2, [pc, #276]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800523c:	430b      	orrs	r3, r1
 800523e:	6113      	str	r3, [r2, #16]
 8005240:	e005      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005242:	4b43      	ldr	r3, [pc, #268]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	4a42      	ldr	r2, [pc, #264]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005248:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800524c:	6113      	str	r3, [r2, #16]
 800524e:	4b40      	ldr	r3, [pc, #256]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005250:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005256:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800525a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800525e:	4a3c      	ldr	r2, [pc, #240]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005260:	430b      	orrs	r3, r1
 8005262:	6713      	str	r3, [r2, #112]	; 0x70
 8005264:	e008      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005266:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800526a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800526e:	e003      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005274:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f002 0301 	and.w	r3, r2, #1
 8005284:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005288:	2300      	movs	r3, #0
 800528a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800528e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005292:	460b      	mov	r3, r1
 8005294:	4313      	orrs	r3, r2
 8005296:	f000 808f 	beq.w	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800529a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052a0:	2b28      	cmp	r3, #40	; 0x28
 80052a2:	d871      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	08005391 	.word	0x08005391
 80052b0:	08005389 	.word	0x08005389
 80052b4:	08005389 	.word	0x08005389
 80052b8:	08005389 	.word	0x08005389
 80052bc:	08005389 	.word	0x08005389
 80052c0:	08005389 	.word	0x08005389
 80052c4:	08005389 	.word	0x08005389
 80052c8:	08005389 	.word	0x08005389
 80052cc:	0800535d 	.word	0x0800535d
 80052d0:	08005389 	.word	0x08005389
 80052d4:	08005389 	.word	0x08005389
 80052d8:	08005389 	.word	0x08005389
 80052dc:	08005389 	.word	0x08005389
 80052e0:	08005389 	.word	0x08005389
 80052e4:	08005389 	.word	0x08005389
 80052e8:	08005389 	.word	0x08005389
 80052ec:	08005373 	.word	0x08005373
 80052f0:	08005389 	.word	0x08005389
 80052f4:	08005389 	.word	0x08005389
 80052f8:	08005389 	.word	0x08005389
 80052fc:	08005389 	.word	0x08005389
 8005300:	08005389 	.word	0x08005389
 8005304:	08005389 	.word	0x08005389
 8005308:	08005389 	.word	0x08005389
 800530c:	08005391 	.word	0x08005391
 8005310:	08005389 	.word	0x08005389
 8005314:	08005389 	.word	0x08005389
 8005318:	08005389 	.word	0x08005389
 800531c:	08005389 	.word	0x08005389
 8005320:	08005389 	.word	0x08005389
 8005324:	08005389 	.word	0x08005389
 8005328:	08005389 	.word	0x08005389
 800532c:	08005391 	.word	0x08005391
 8005330:	08005389 	.word	0x08005389
 8005334:	08005389 	.word	0x08005389
 8005338:	08005389 	.word	0x08005389
 800533c:	08005389 	.word	0x08005389
 8005340:	08005389 	.word	0x08005389
 8005344:	08005389 	.word	0x08005389
 8005348:	08005389 	.word	0x08005389
 800534c:	08005391 	.word	0x08005391
 8005350:	58024400 	.word	0x58024400
 8005354:	58024800 	.word	0x58024800
 8005358:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800535c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005360:	3308      	adds	r3, #8
 8005362:	2101      	movs	r1, #1
 8005364:	4618      	mov	r0, r3
 8005366:	f001 fdcb 	bl	8006f00 <RCCEx_PLL2_Config>
 800536a:	4603      	mov	r3, r0
 800536c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005370:	e00f      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005376:	3328      	adds	r3, #40	; 0x28
 8005378:	2101      	movs	r1, #1
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fe72 	bl	8007064 <RCCEx_PLL3_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005386:	e004      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800538e:	e000      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005392:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800539a:	4bbf      	ldr	r3, [pc, #764]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80053a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053a8:	4abb      	ldr	r2, [pc, #748]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80053aa:	430b      	orrs	r3, r1
 80053ac:	6553      	str	r3, [r2, #84]	; 0x54
 80053ae:	e003      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f002 0302 	and.w	r3, r2, #2
 80053c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053c8:	2300      	movs	r3, #0
 80053ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4313      	orrs	r3, r2
 80053d6:	d041      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80053d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053de:	2b05      	cmp	r3, #5
 80053e0:	d824      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80053e2:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	08005435 	.word	0x08005435
 80053ec:	08005401 	.word	0x08005401
 80053f0:	08005417 	.word	0x08005417
 80053f4:	08005435 	.word	0x08005435
 80053f8:	08005435 	.word	0x08005435
 80053fc:	08005435 	.word	0x08005435
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005404:	3308      	adds	r3, #8
 8005406:	2101      	movs	r1, #1
 8005408:	4618      	mov	r0, r3
 800540a:	f001 fd79 	bl	8006f00 <RCCEx_PLL2_Config>
 800540e:	4603      	mov	r3, r0
 8005410:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005414:	e00f      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800541a:	3328      	adds	r3, #40	; 0x28
 800541c:	2101      	movs	r1, #1
 800541e:	4618      	mov	r0, r3
 8005420:	f001 fe20 	bl	8007064 <RCCEx_PLL3_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800542a:	e004      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005432:	e000      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005436:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800543e:	4b96      	ldr	r3, [pc, #600]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	f023 0107 	bic.w	r1, r3, #7
 8005446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800544a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800544c:	4a92      	ldr	r2, [pc, #584]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800544e:	430b      	orrs	r3, r1
 8005450:	6553      	str	r3, [r2, #84]	; 0x54
 8005452:	e003      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005458:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800545c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f002 0304 	and.w	r3, r2, #4
 8005468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800546c:	2300      	movs	r3, #0
 800546e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005472:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005476:	460b      	mov	r3, r1
 8005478:	4313      	orrs	r3, r2
 800547a:	d044      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800547c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	2b05      	cmp	r3, #5
 8005486:	d825      	bhi.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054dd 	.word	0x080054dd
 8005494:	080054a9 	.word	0x080054a9
 8005498:	080054bf 	.word	0x080054bf
 800549c:	080054dd 	.word	0x080054dd
 80054a0:	080054dd 	.word	0x080054dd
 80054a4:	080054dd 	.word	0x080054dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ac:	3308      	adds	r3, #8
 80054ae:	2101      	movs	r1, #1
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fd25 	bl	8006f00 <RCCEx_PLL2_Config>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054bc:	e00f      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c2:	3328      	adds	r3, #40	; 0x28
 80054c4:	2101      	movs	r1, #1
 80054c6:	4618      	mov	r0, r3
 80054c8:	f001 fdcc 	bl	8007064 <RCCEx_PLL3_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054d2:	e004      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80054da:	e000      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80054dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10b      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054e6:	4b6c      	ldr	r3, [pc, #432]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ea:	f023 0107 	bic.w	r1, r3, #7
 80054ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	4a68      	ldr	r2, [pc, #416]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6593      	str	r3, [r2, #88]	; 0x58
 80054fc:	e003      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005502:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550e:	f002 0320 	and.w	r3, r2, #32
 8005512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005516:	2300      	movs	r3, #0
 8005518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800551c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005520:	460b      	mov	r3, r1
 8005522:	4313      	orrs	r3, r2
 8005524:	d055      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800552a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800552e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005532:	d033      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005538:	d82c      	bhi.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553e:	d02f      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005544:	d826      	bhi.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005546:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800554a:	d02b      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800554c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005550:	d820      	bhi.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005556:	d012      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800555c:	d81a      	bhi.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800555e:	2b00      	cmp	r3, #0
 8005560:	d022      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005566:	d115      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800556c:	3308      	adds	r3, #8
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f001 fcc5 	bl	8006f00 <RCCEx_PLL2_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800557c:	e015      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800557e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005582:	3328      	adds	r3, #40	; 0x28
 8005584:	2102      	movs	r1, #2
 8005586:	4618      	mov	r0, r3
 8005588:	f001 fd6c 	bl	8007064 <RCCEx_PLL3_Config>
 800558c:	4603      	mov	r3, r0
 800558e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005592:	e00a      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800559a:	e006      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800559c:	bf00      	nop
 800559e:	e004      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80055a0:	bf00      	nop
 80055a2:	e002      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80055a4:	bf00      	nop
 80055a6:	e000      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80055a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10b      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055b2:	4b39      	ldr	r3, [pc, #228]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80055b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80055ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c2:	4a35      	ldr	r2, [pc, #212]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80055c4:	430b      	orrs	r3, r1
 80055c6:	6553      	str	r3, [r2, #84]	; 0x54
 80055c8:	e003      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80055de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055e2:	2300      	movs	r3, #0
 80055e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055e8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80055ec:	460b      	mov	r3, r1
 80055ee:	4313      	orrs	r3, r2
 80055f0:	d058      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80055f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055fe:	d033      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005600:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005604:	d82c      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560a:	d02f      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800560c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005610:	d826      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005612:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005616:	d02b      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005618:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800561c:	d820      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800561e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005622:	d012      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005628:	d81a      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d022      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800562e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005632:	d115      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005638:	3308      	adds	r3, #8
 800563a:	2100      	movs	r1, #0
 800563c:	4618      	mov	r0, r3
 800563e:	f001 fc5f 	bl	8006f00 <RCCEx_PLL2_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005648:	e015      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564e:	3328      	adds	r3, #40	; 0x28
 8005650:	2102      	movs	r1, #2
 8005652:	4618      	mov	r0, r3
 8005654:	f001 fd06 	bl	8007064 <RCCEx_PLL3_Config>
 8005658:	4603      	mov	r3, r0
 800565a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800565e:	e00a      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005666:	e006      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005668:	bf00      	nop
 800566a:	e004      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800566c:	bf00      	nop
 800566e:	e002      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005670:	bf00      	nop
 8005672:	e000      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005676:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10e      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005682:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800568e:	4a02      	ldr	r2, [pc, #8]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005690:	430b      	orrs	r3, r1
 8005692:	6593      	str	r3, [r2, #88]	; 0x58
 8005694:	e006      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005696:	bf00      	nop
 8005698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80056b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056b4:	2300      	movs	r3, #0
 80056b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80056be:	460b      	mov	r3, r1
 80056c0:	4313      	orrs	r3, r2
 80056c2:	d055      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80056c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056d0:	d033      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80056d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056d6:	d82c      	bhi.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80056d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056dc:	d02f      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80056de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e2:	d826      	bhi.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80056e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056e8:	d02b      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80056ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056ee:	d820      	bhi.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80056f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f4:	d012      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80056f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fa:	d81a      	bhi.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d022      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005704:	d115      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800570a:	3308      	adds	r3, #8
 800570c:	2100      	movs	r1, #0
 800570e:	4618      	mov	r0, r3
 8005710:	f001 fbf6 	bl	8006f00 <RCCEx_PLL2_Config>
 8005714:	4603      	mov	r3, r0
 8005716:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800571a:	e015      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800571c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005720:	3328      	adds	r3, #40	; 0x28
 8005722:	2102      	movs	r1, #2
 8005724:	4618      	mov	r0, r3
 8005726:	f001 fc9d 	bl	8007064 <RCCEx_PLL3_Config>
 800572a:	4603      	mov	r3, r0
 800572c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005730:	e00a      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005738:	e006      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800573a:	bf00      	nop
 800573c:	e004      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800573e:	bf00      	nop
 8005740:	e002      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005748:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10b      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005750:	4ba0      	ldr	r3, [pc, #640]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005754:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800575c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005760:	4a9c      	ldr	r2, [pc, #624]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005762:	430b      	orrs	r3, r1
 8005764:	6593      	str	r3, [r2, #88]	; 0x58
 8005766:	e003      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005768:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800576c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f002 0308 	and.w	r3, r2, #8
 800577c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005780:	2300      	movs	r3, #0
 8005782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005786:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800578a:	460b      	mov	r3, r1
 800578c:	4313      	orrs	r3, r2
 800578e:	d01e      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579c:	d10c      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800579e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a2:	3328      	adds	r3, #40	; 0x28
 80057a4:	2102      	movs	r1, #2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 fc5c 	bl	8007064 <RCCEx_PLL3_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80057b8:	4b86      	ldr	r3, [pc, #536]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057c8:	4a82      	ldr	r2, [pc, #520]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057ca:	430b      	orrs	r3, r1
 80057cc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	f002 0310 	and.w	r3, r2, #16
 80057da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057de:	2300      	movs	r3, #0
 80057e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057e4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80057e8:	460b      	mov	r3, r1
 80057ea:	4313      	orrs	r3, r2
 80057ec:	d01e      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80057ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fa:	d10c      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005800:	3328      	adds	r3, #40	; 0x28
 8005802:	2102      	movs	r1, #2
 8005804:	4618      	mov	r0, r3
 8005806:	f001 fc2d 	bl	8007064 <RCCEx_PLL3_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005816:	4b6f      	ldr	r3, [pc, #444]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800581e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005826:	4a6b      	ldr	r2, [pc, #428]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005828:	430b      	orrs	r3, r1
 800582a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800582c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005838:	67bb      	str	r3, [r7, #120]	; 0x78
 800583a:	2300      	movs	r3, #0
 800583c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800583e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005842:	460b      	mov	r3, r1
 8005844:	4313      	orrs	r3, r2
 8005846:	d03e      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800584c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005854:	d022      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800585a:	d81b      	bhi.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005864:	d00b      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005866:	e015      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800586c:	3308      	adds	r3, #8
 800586e:	2100      	movs	r1, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f001 fb45 	bl	8006f00 <RCCEx_PLL2_Config>
 8005876:	4603      	mov	r3, r0
 8005878:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800587c:	e00f      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800587e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005882:	3328      	adds	r3, #40	; 0x28
 8005884:	2102      	movs	r1, #2
 8005886:	4618      	mov	r0, r3
 8005888:	f001 fbec 	bl	8007064 <RCCEx_PLL3_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005892:	e004      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800589a:	e000      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800589c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800589e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058a6:	4b4b      	ldr	r3, [pc, #300]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80058ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80058b6:	4a47      	ldr	r2, [pc, #284]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058b8:	430b      	orrs	r3, r1
 80058ba:	6593      	str	r3, [r2, #88]	; 0x58
 80058bc:	e003      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80058c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80058d2:	673b      	str	r3, [r7, #112]	; 0x70
 80058d4:	2300      	movs	r3, #0
 80058d6:	677b      	str	r3, [r7, #116]	; 0x74
 80058d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80058dc:	460b      	mov	r3, r1
 80058de:	4313      	orrs	r3, r2
 80058e0:	d03b      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80058e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058ee:	d01f      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80058f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058f4:	d818      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80058f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058fa:	d003      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80058fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005900:	d007      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005902:	e011      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005904:	4b33      	ldr	r3, [pc, #204]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4a32      	ldr	r2, [pc, #200]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800590a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800590e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005910:	e00f      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005916:	3328      	adds	r3, #40	; 0x28
 8005918:	2101      	movs	r1, #1
 800591a:	4618      	mov	r0, r3
 800591c:	f001 fba2 	bl	8007064 <RCCEx_PLL3_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005926:	e004      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800592e:	e000      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005932:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10b      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800593a:	4b26      	ldr	r3, [pc, #152]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800593c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800594a:	4a22      	ldr	r2, [pc, #136]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800594c:	430b      	orrs	r3, r1
 800594e:	6553      	str	r3, [r2, #84]	; 0x54
 8005950:	e003      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005952:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005956:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800595a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005966:	66bb      	str	r3, [r7, #104]	; 0x68
 8005968:	2300      	movs	r3, #0
 800596a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800596c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005970:	460b      	mov	r3, r1
 8005972:	4313      	orrs	r3, r2
 8005974:	d034      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800597a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005984:	d007      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005986:	e011      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005988:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	4a11      	ldr	r2, [pc, #68]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800598e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005994:	e00e      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800599a:	3308      	adds	r3, #8
 800599c:	2102      	movs	r1, #2
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 faae 	bl	8006f00 <RCCEx_PLL2_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80059aa:	e003      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80059b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10d      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80059bc:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ca:	4a02      	ldr	r2, [pc, #8]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059cc:	430b      	orrs	r3, r1
 80059ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059d0:	e006      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80059d2:	bf00      	nop
 80059d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80059ec:	663b      	str	r3, [r7, #96]	; 0x60
 80059ee:	2300      	movs	r3, #0
 80059f0:	667b      	str	r3, [r7, #100]	; 0x64
 80059f2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80059f6:	460b      	mov	r3, r1
 80059f8:	4313      	orrs	r3, r2
 80059fa:	d00c      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a00:	3328      	adds	r3, #40	; 0x28
 8005a02:	2102      	movs	r1, #2
 8005a04:	4618      	mov	r0, r3
 8005a06:	f001 fb2d 	bl	8007064 <RCCEx_PLL3_Config>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005a22:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a24:	2300      	movs	r3, #0
 8005a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a28:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	d036      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a3c:	d018      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a42:	d811      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a48:	d014      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a4e:	d80b      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d011      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a58:	d106      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a5a:	4bb7      	ldr	r3, [pc, #732]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	4ab6      	ldr	r2, [pc, #728]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a66:	e008      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005a6e:	e004      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005a70:	bf00      	nop
 8005a72:	e002      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005a74:	bf00      	nop
 8005a76:	e000      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a82:	4bad      	ldr	r3, [pc, #692]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a90:	4aa9      	ldr	r2, [pc, #676]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a92:	430b      	orrs	r3, r1
 8005a94:	6553      	str	r3, [r2, #84]	; 0x54
 8005a96:	e003      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005aac:	653b      	str	r3, [r7, #80]	; 0x50
 8005aae:	2300      	movs	r3, #0
 8005ab0:	657b      	str	r3, [r7, #84]	; 0x54
 8005ab2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	d009      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005abc:	4b9e      	ldr	r3, [pc, #632]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aca:	4a9b      	ldr	r2, [pc, #620]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005acc:	430b      	orrs	r3, r1
 8005ace:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ade:	2300      	movs	r3, #0
 8005ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	d009      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005aec:	4b92      	ldr	r3, [pc, #584]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005afa:	4a8f      	ldr	r2, [pc, #572]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b0e:	2300      	movs	r3, #0
 8005b10:	647b      	str	r3, [r7, #68]	; 0x44
 8005b12:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005b16:	460b      	mov	r3, r1
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	d00e      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b1c:	4b86      	ldr	r3, [pc, #536]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	4a85      	ldr	r2, [pc, #532]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b26:	6113      	str	r3, [r2, #16]
 8005b28:	4b83      	ldr	r3, [pc, #524]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b2a:	6919      	ldr	r1, [r3, #16]
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b34:	4a80      	ldr	r2, [pc, #512]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b36:	430b      	orrs	r3, r1
 8005b38:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b48:	2300      	movs	r3, #0
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b4c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005b50:	460b      	mov	r3, r1
 8005b52:	4313      	orrs	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b56:	4b78      	ldr	r3, [pc, #480]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b64:	4a74      	ldr	r2, [pc, #464]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b66:	430b      	orrs	r3, r1
 8005b68:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005b76:	633b      	str	r3, [r7, #48]	; 0x30
 8005b78:	2300      	movs	r3, #0
 8005b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b7c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005b80:	460b      	mov	r3, r1
 8005b82:	4313      	orrs	r3, r2
 8005b84:	d00a      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b86:	4b6c      	ldr	r3, [pc, #432]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	4a68      	ldr	r2, [pc, #416]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	62b9      	str	r1, [r7, #40]	; 0x28
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	d011      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 f99d 	bl	8006f00 <RCCEx_PLL2_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005bcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005bd8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	2100      	movs	r1, #0
 8005be6:	6239      	str	r1, [r7, #32]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
 8005bee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	d011      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	2101      	movs	r1, #1
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 f97d 	bl	8006f00 <RCCEx_PLL2_Config>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005c0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	2100      	movs	r1, #0
 8005c26:	61b9      	str	r1, [r7, #24]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c32:	460b      	mov	r3, r1
 8005c34:	4313      	orrs	r3, r2
 8005c36:	d011      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	2102      	movs	r1, #2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f001 f95d 	bl	8006f00 <RCCEx_PLL2_Config>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005c4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	2100      	movs	r1, #0
 8005c66:	6139      	str	r1, [r7, #16]
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c72:	460b      	mov	r3, r1
 8005c74:	4313      	orrs	r3, r2
 8005c76:	d011      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7c:	3328      	adds	r3, #40	; 0x28
 8005c7e:	2100      	movs	r1, #0
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 f9ef 	bl	8007064 <RCCEx_PLL3_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8005c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	d011      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cbc:	3328      	adds	r3, #40	; 0x28
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 f9cf 	bl	8007064 <RCCEx_PLL3_Config>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cd8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	6039      	str	r1, [r7, #0]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	607b      	str	r3, [r7, #4]
 8005cee:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	d011      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cfc:	3328      	adds	r3, #40	; 0x28
 8005cfe:	2102      	movs	r1, #2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 f9af 	bl	8007064 <RCCEx_PLL3_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8005d1c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e000      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d36:	bf00      	nop
 8005d38:	58024400 	.word	0x58024400

08005d3c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b090      	sub	sp, #64	; 0x40
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005d46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d4a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	f040 8094 	bne.w	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005d54:	4b9b      	ldr	r3, [pc, #620]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	f200 8087 	bhi.w	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005d66:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005d81 	.word	0x08005d81
 8005d70:	08005da9 	.word	0x08005da9
 8005d74:	08005dd1 	.word	0x08005dd1
 8005d78:	08005e6d 	.word	0x08005e6d
 8005d7c:	08005df9 	.word	0x08005df9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d80:	4b90      	ldr	r3, [pc, #576]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d8c:	d108      	bne.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 ff62 	bl	8006c5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d9c:	f000 bc93 	b.w	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005da4:	f000 bc8f 	b.w	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005da8:	4b86      	ldr	r3, [pc, #536]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005db4:	d108      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005db6:	f107 0318 	add.w	r3, r7, #24
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fca6 	bl	800670c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dc4:	f000 bc7f 	b.w	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dcc:	f000 bc7b 	b.w	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005dd0:	4b7c      	ldr	r3, [pc, #496]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ddc:	d108      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dde:	f107 030c 	add.w	r3, r7, #12
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fde6 	bl	80069b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dec:	f000 bc6b 	b.w	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005df4:	f000 bc67 	b.w	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005df8:	4b72      	ldr	r3, [pc, #456]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e00:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e02:	4b70      	ldr	r3, [pc, #448]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d109      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e14:	4b6b      	ldr	r3, [pc, #428]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	08db      	lsrs	r3, r3, #3
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	4a6a      	ldr	r2, [pc, #424]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005e20:	fa22 f303 	lsr.w	r3, r2, r3
 8005e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e26:	e01f      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e28:	4b66      	ldr	r3, [pc, #408]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e34:	d106      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e3c:	d102      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e3e:	4b63      	ldr	r3, [pc, #396]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e42:	e011      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e44:	4b5f      	ldr	r3, [pc, #380]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e50:	d106      	bne.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e58:	d102      	bne.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e5a:	4b5d      	ldr	r3, [pc, #372]	; (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e5e:	e003      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005e64:	f000 bc2f 	b.w	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e68:	f000 bc2d 	b.w	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e6c:	4b59      	ldr	r3, [pc, #356]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e70:	f000 bc29 	b.w	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e78:	f000 bc25 	b.w	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e80:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005e84:	430b      	orrs	r3, r1
 8005e86:	f040 80a7 	bne.w	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005e8a:	4b4e      	ldr	r3, [pc, #312]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005e92:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e9a:	d054      	beq.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ea2:	f200 808b 	bhi.w	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005eac:	f000 8083 	beq.w	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005eb6:	f200 8081 	bhi.w	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ec0:	d02f      	beq.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ec8:	d878      	bhi.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ed6:	d012      	beq.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8005ed8:	e070      	b.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005eda:	4b3a      	ldr	r3, [pc, #232]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ee6:	d107      	bne.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 feb5 	bl	8006c5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ef6:	e3e6      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005efc:	e3e3      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005efe:	4b31      	ldr	r3, [pc, #196]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f0a:	d107      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f0c:	f107 0318 	add.w	r3, r7, #24
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 fbfb 	bl	800670c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f1a:	e3d4      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f20:	e3d1      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f22:	4b28      	ldr	r3, [pc, #160]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f2e:	d107      	bne.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f30:	f107 030c 	add.w	r3, r7, #12
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fd3d 	bl	80069b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f3e:	e3c2      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f44:	e3bf      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f4e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f50:	4b1c      	ldr	r3, [pc, #112]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d10c      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f62:	4b18      	ldr	r3, [pc, #96]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	08db      	lsrs	r3, r3, #3
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	4a16      	ldr	r2, [pc, #88]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f74:	e01e      	b.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f76:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f82:	d106      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f8a:	d102      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f90:	e010      	b.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f92:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f9e:	d106      	bne.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fa6:	d102      	bne.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005fa8:	4b09      	ldr	r3, [pc, #36]	; (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fac:	e002      	b.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005fb2:	e388      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005fb4:	e387      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005fb6:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fba:	e384      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fc0:	e381      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005fc2:	bf00      	nop
 8005fc4:	58024400 	.word	0x58024400
 8005fc8:	03d09000 	.word	0x03d09000
 8005fcc:	003d0900 	.word	0x003d0900
 8005fd0:	017d7840 	.word	0x017d7840
 8005fd4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fdc:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	f040 809c 	bne.w	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005fe6:	4b9e      	ldr	r3, [pc, #632]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fea:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005fee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ff6:	d054      	beq.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ffe:	f200 808b 	bhi.w	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006008:	f000 8083 	beq.w	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006012:	f200 8081 	bhi.w	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800601c:	d02f      	beq.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006024:	d878      	bhi.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006032:	d012      	beq.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006034:	e070      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006036:	4b8a      	ldr	r3, [pc, #552]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006042:	d107      	bne.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fe07 	bl	8006c5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006052:	e338      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006058:	e335      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800605a:	4b81      	ldr	r3, [pc, #516]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006066:	d107      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006068:	f107 0318 	add.w	r3, r7, #24
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fb4d 	bl	800670c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006076:	e326      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006078:	2300      	movs	r3, #0
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800607c:	e323      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800607e:	4b78      	ldr	r3, [pc, #480]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800608a:	d107      	bne.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800608c:	f107 030c 	add.w	r3, r7, #12
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fc8f 	bl	80069b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800609a:	e314      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060a0:	e311      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060a2:	4b6f      	ldr	r3, [pc, #444]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80060a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060ac:	4b6c      	ldr	r3, [pc, #432]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d10c      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060be:	4b68      	ldr	r3, [pc, #416]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	08db      	lsrs	r3, r3, #3
 80060c4:	f003 0303 	and.w	r3, r3, #3
 80060c8:	4a66      	ldr	r2, [pc, #408]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80060ca:	fa22 f303 	lsr.w	r3, r2, r3
 80060ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060d0:	e01e      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060d2:	4b63      	ldr	r3, [pc, #396]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060de:	d106      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80060e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060e6:	d102      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80060e8:	4b5f      	ldr	r3, [pc, #380]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80060ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060ec:	e010      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060ee:	4b5c      	ldr	r3, [pc, #368]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060fa:	d106      	bne.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80060fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006102:	d102      	bne.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006104:	4b59      	ldr	r3, [pc, #356]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006108:	e002      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800610e:	e2da      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006110:	e2d9      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006112:	4b57      	ldr	r3, [pc, #348]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006116:	e2d6      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800611c:	e2d3      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800611e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006122:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006126:	430b      	orrs	r3, r1
 8006128:	f040 80a7 	bne.w	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800612c:	4b4c      	ldr	r3, [pc, #304]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800612e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006130:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006134:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800613c:	d055      	beq.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006144:	f200 8096 	bhi.w	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800614e:	f000 8084 	beq.w	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006158:	f200 808c 	bhi.w	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006162:	d030      	beq.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800616a:	f200 8083 	bhi.w	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006170:	2b00      	cmp	r3, #0
 8006172:	d004      	beq.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617a:	d012      	beq.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800617c:	e07a      	b.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800617e:	4b38      	ldr	r3, [pc, #224]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800618a:	d107      	bne.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800618c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fd63 	bl	8006c5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800619a:	e294      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061a0:	e291      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061a2:	4b2f      	ldr	r3, [pc, #188]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ae:	d107      	bne.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061b0:	f107 0318 	add.w	r3, r7, #24
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 faa9 	bl	800670c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061be:	e282      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061c4:	e27f      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061c6:	4b26      	ldr	r3, [pc, #152]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061d2:	d107      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061d4:	f107 030c 	add.w	r3, r7, #12
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fbeb 	bl	80069b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061e2:	e270      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061e8:	e26d      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80061ea:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80061ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061f4:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d10c      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006206:	4b16      	ldr	r3, [pc, #88]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	08db      	lsrs	r3, r3, #3
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	4a14      	ldr	r2, [pc, #80]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006212:	fa22 f303 	lsr.w	r3, r2, r3
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006218:	e01e      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800621a:	4b11      	ldr	r3, [pc, #68]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006226:	d106      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800622e:	d102      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006230:	4b0d      	ldr	r3, [pc, #52]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006234:	e010      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006236:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006242:	d106      	bne.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800624a:	d102      	bne.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800624c:	4b07      	ldr	r3, [pc, #28]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800624e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006250:	e002      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006256:	e236      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006258:	e235      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800625a:	4b05      	ldr	r3, [pc, #20]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800625c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800625e:	e232      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006260:	58024400 	.word	0x58024400
 8006264:	03d09000 	.word	0x03d09000
 8006268:	003d0900 	.word	0x003d0900
 800626c:	017d7840 	.word	0x017d7840
 8006270:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006278:	e225      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800627a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800627e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006282:	430b      	orrs	r3, r1
 8006284:	f040 8085 	bne.w	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006288:	4b9c      	ldr	r3, [pc, #624]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800628a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006290:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006298:	d06b      	beq.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062a0:	d874      	bhi.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062a8:	d056      	beq.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062b0:	d86c      	bhi.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062b8:	d03b      	beq.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80062ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062c0:	d864      	bhi.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80062c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062c8:	d021      	beq.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062d0:	d85c      	bhi.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80062d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d004      	beq.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80062d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062de:	d004      	beq.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80062e0:	e054      	b.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80062e2:	f7fe fb75 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 80062e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062e8:	e1ed      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062ea:	4b84      	ldr	r3, [pc, #528]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062f6:	d107      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062f8:	f107 0318 	add.w	r3, r7, #24
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fa05 	bl	800670c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006306:	e1de      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800630c:	e1db      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800630e:	4b7b      	ldr	r3, [pc, #492]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800631a:	d107      	bne.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800631c:	f107 030c 	add.w	r3, r7, #12
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fb47 	bl	80069b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800632a:	e1cc      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006330:	e1c9      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006332:	4b72      	ldr	r3, [pc, #456]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b04      	cmp	r3, #4
 800633c:	d109      	bne.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800633e:	4b6f      	ldr	r3, [pc, #444]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	08db      	lsrs	r3, r3, #3
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	4a6d      	ldr	r2, [pc, #436]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800634a:	fa22 f303 	lsr.w	r3, r2, r3
 800634e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006350:	e1b9      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006352:	2300      	movs	r3, #0
 8006354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006356:	e1b6      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006358:	4b68      	ldr	r3, [pc, #416]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006364:	d102      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8006366:	4b67      	ldr	r3, [pc, #412]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006368:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800636a:	e1ac      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006370:	e1a9      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006372:	4b62      	ldr	r3, [pc, #392]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800637e:	d102      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8006380:	4b61      	ldr	r3, [pc, #388]	; (8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006384:	e19f      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006386:	2300      	movs	r3, #0
 8006388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800638a:	e19c      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800638c:	2300      	movs	r3, #0
 800638e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006390:	e199      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006396:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800639a:	430b      	orrs	r3, r1
 800639c:	d173      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800639e:	4b57      	ldr	r3, [pc, #348]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80063a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063a6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80063a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ae:	d02f      	beq.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063b6:	d863      	bhi.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80063be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c4:	d012      	beq.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80063c6:	e05b      	b.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063c8:	4b4c      	ldr	r3, [pc, #304]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063d4:	d107      	bne.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063d6:	f107 0318 	add.w	r3, r7, #24
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 f996 	bl	800670c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063e4:	e16f      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ea:	e16c      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063ec:	4b43      	ldr	r3, [pc, #268]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f8:	d107      	bne.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063fa:	f107 030c 	add.w	r3, r7, #12
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fad8 	bl	80069b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006408:	e15d      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800640e:	e15a      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006410:	4b3a      	ldr	r3, [pc, #232]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006414:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006418:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800641a:	4b38      	ldr	r3, [pc, #224]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b04      	cmp	r3, #4
 8006424:	d10c      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800642c:	4b33      	ldr	r3, [pc, #204]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	08db      	lsrs	r3, r3, #3
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	4a32      	ldr	r2, [pc, #200]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006438:	fa22 f303 	lsr.w	r3, r2, r3
 800643c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800643e:	e01e      	b.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006440:	4b2e      	ldr	r3, [pc, #184]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800644c:	d106      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800644e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006454:	d102      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006456:	4b2b      	ldr	r3, [pc, #172]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800645a:	e010      	b.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800645c:	4b27      	ldr	r3, [pc, #156]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006468:	d106      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800646a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006470:	d102      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006472:	4b25      	ldr	r3, [pc, #148]	; (8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006476:	e002      	b.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006478:	2300      	movs	r3, #0
 800647a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800647c:	e123      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800647e:	e122      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006484:	e11f      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800648a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800648e:	430b      	orrs	r3, r1
 8006490:	d13c      	bne.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006492:	4b1a      	ldr	r3, [pc, #104]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800649a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80064a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a8:	d012      	beq.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80064aa:	e023      	b.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064ac:	4b13      	ldr	r3, [pc, #76]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064b8:	d107      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fbcc 	bl	8006c5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064c8:	e0fd      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064ce:	e0fa      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064d0:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064dc:	d107      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064de:	f107 0318 	add.w	r3, r7, #24
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f912 	bl	800670c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ec:	e0eb      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064f2:	e0e8      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064f8:	e0e5      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80064fa:	bf00      	nop
 80064fc:	58024400 	.word	0x58024400
 8006500:	03d09000 	.word	0x03d09000
 8006504:	003d0900 	.word	0x003d0900
 8006508:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800650c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006510:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006514:	430b      	orrs	r3, r1
 8006516:	f040 8085 	bne.w	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800651a:	4b6d      	ldr	r3, [pc, #436]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800651c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006522:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800652a:	d06b      	beq.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800652c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006532:	d874      	bhi.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653a:	d056      	beq.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006542:	d86c      	bhi.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800654a:	d03b      	beq.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800654c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006552:	d864      	bhi.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800655a:	d021      	beq.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006562:	d85c      	bhi.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006570:	d004      	beq.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006572:	e054      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006574:	f000 f8b4 	bl	80066e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006578:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800657a:	e0a4      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800657c:	4b54      	ldr	r3, [pc, #336]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006588:	d107      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800658a:	f107 0318 	add.w	r3, r7, #24
 800658e:	4618      	mov	r0, r3
 8006590:	f000 f8bc 	bl	800670c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006598:	e095      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800659e:	e092      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065a0:	4b4b      	ldr	r3, [pc, #300]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ac:	d107      	bne.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ae:	f107 030c 	add.w	r3, r7, #12
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 f9fe 	bl	80069b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065bc:	e083      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065c2:	e080      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065c4:	4b42      	ldr	r3, [pc, #264]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d109      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065d0:	4b3f      	ldr	r3, [pc, #252]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	08db      	lsrs	r3, r3, #3
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	4a3e      	ldr	r2, [pc, #248]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80065dc:	fa22 f303 	lsr.w	r3, r2, r3
 80065e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065e2:	e070      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065e8:	e06d      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80065ea:	4b39      	ldr	r3, [pc, #228]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f6:	d102      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80065f8:	4b37      	ldr	r3, [pc, #220]	; (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065fc:	e063      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006602:	e060      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006604:	4b32      	ldr	r3, [pc, #200]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006610:	d102      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8006612:	4b32      	ldr	r3, [pc, #200]	; (80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006616:	e056      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800661c:	e053      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006622:	e050      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006628:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800662c:	430b      	orrs	r3, r1
 800662e:	d148      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006630:	4b27      	ldr	r3, [pc, #156]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006638:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006640:	d02a      	beq.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006648:	d838      	bhi.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006656:	d00d      	beq.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006658:	e030      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800665a:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006662:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006666:	d102      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006668:	4b1c      	ldr	r3, [pc, #112]	; (80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800666a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800666c:	e02b      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006672:	e028      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006674:	4b16      	ldr	r3, [pc, #88]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006680:	d107      	bne.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006686:	4618      	mov	r0, r3
 8006688:	f000 fae8 	bl	8006c5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006690:	e019      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006696:	e016      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006698:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066a4:	d107      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066a6:	f107 0318 	add.w	r3, r7, #24
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 f82e 	bl	800670c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066b4:	e007      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ba:	e004      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066c0:	e001      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80066c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3740      	adds	r7, #64	; 0x40
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	58024400 	.word	0x58024400
 80066d4:	03d09000 	.word	0x03d09000
 80066d8:	003d0900 	.word	0x003d0900
 80066dc:	017d7840 	.word	0x017d7840

080066e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80066e4:	f7fe f944 	bl	8004970 <HAL_RCC_GetHCLKFreq>
 80066e8:	4602      	mov	r2, r0
 80066ea:	4b06      	ldr	r3, [pc, #24]	; (8006704 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	091b      	lsrs	r3, r3, #4
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	4904      	ldr	r1, [pc, #16]	; (8006708 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80066f6:	5ccb      	ldrb	r3, [r1, r3]
 80066f8:	f003 031f 	and.w	r3, r3, #31
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006700:	4618      	mov	r0, r3
 8006702:	bd80      	pop	{r7, pc}
 8006704:	58024400 	.word	0x58024400
 8006708:	08008be4 	.word	0x08008be4

0800670c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800670c:	b480      	push	{r7}
 800670e:	b089      	sub	sp, #36	; 0x24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006714:	4ba1      	ldr	r3, [pc, #644]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	f003 0303 	and.w	r3, r3, #3
 800671c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800671e:	4b9f      	ldr	r3, [pc, #636]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006722:	0b1b      	lsrs	r3, r3, #12
 8006724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006728:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800672a:	4b9c      	ldr	r3, [pc, #624]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	091b      	lsrs	r3, r3, #4
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006736:	4b99      	ldr	r3, [pc, #612]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673a:	08db      	lsrs	r3, r3, #3
 800673c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	fb02 f303 	mul.w	r3, r2, r3
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8111 	beq.w	800697c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b02      	cmp	r3, #2
 800675e:	f000 8083 	beq.w	8006868 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	2b02      	cmp	r3, #2
 8006766:	f200 80a1 	bhi.w	80068ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d056      	beq.n	8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006776:	e099      	b.n	80068ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006778:	4b88      	ldr	r3, [pc, #544]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d02d      	beq.n	80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006784:	4b85      	ldr	r3, [pc, #532]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	08db      	lsrs	r3, r3, #3
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	4a84      	ldr	r2, [pc, #528]	; (80069a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006790:	fa22 f303 	lsr.w	r3, r2, r3
 8006794:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	ee07 3a90 	vmov	s15, r3
 800679c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ae:	4b7b      	ldr	r3, [pc, #492]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067be:	ed97 6a03 	vldr	s12, [r7, #12]
 80067c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80067de:	e087      	b.n	80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80067ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f2:	4b6a      	ldr	r3, [pc, #424]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006802:	ed97 6a03 	vldr	s12, [r7, #12]
 8006806:	eddf 5a67 	vldr	s11, [pc, #412]	; 80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800680a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006822:	e065      	b.n	80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006836:	4b59      	ldr	r3, [pc, #356]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006846:	ed97 6a03 	vldr	s12, [r7, #12]
 800684a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800684e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800685a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006866:	e043      	b.n	80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006872:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687a:	4b48      	ldr	r3, [pc, #288]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688a:	ed97 6a03 	vldr	s12, [r7, #12]
 800688e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800689e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068aa:	e021      	b.n	80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068be:	4b37      	ldr	r3, [pc, #220]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80068d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80068f0:	4b2a      	ldr	r3, [pc, #168]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	0a5b      	lsrs	r3, r3, #9
 80068f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800690a:	edd7 6a07 	vldr	s13, [r7, #28]
 800690e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006916:	ee17 2a90 	vmov	r2, s15
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800691e:	4b1f      	ldr	r3, [pc, #124]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	0c1b      	lsrs	r3, r3, #16
 8006924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006928:	ee07 3a90 	vmov	s15, r3
 800692c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006934:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006938:	edd7 6a07 	vldr	s13, [r7, #28]
 800693c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006944:	ee17 2a90 	vmov	r2, s15
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800694c:	4b13      	ldr	r3, [pc, #76]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	0e1b      	lsrs	r3, r3, #24
 8006952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006962:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006966:	edd7 6a07 	vldr	s13, [r7, #28]
 800696a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800696e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006972:	ee17 2a90 	vmov	r2, s15
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800697a:	e008      	b.n	800698e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	609a      	str	r2, [r3, #8]
}
 800698e:	bf00      	nop
 8006990:	3724      	adds	r7, #36	; 0x24
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	58024400 	.word	0x58024400
 80069a0:	03d09000 	.word	0x03d09000
 80069a4:	46000000 	.word	0x46000000
 80069a8:	4c742400 	.word	0x4c742400
 80069ac:	4a742400 	.word	0x4a742400
 80069b0:	4bbebc20 	.word	0x4bbebc20

080069b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b089      	sub	sp, #36	; 0x24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069bc:	4ba1      	ldr	r3, [pc, #644]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80069c6:	4b9f      	ldr	r3, [pc, #636]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	0d1b      	lsrs	r3, r3, #20
 80069cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80069d2:	4b9c      	ldr	r3, [pc, #624]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80069de:	4b99      	ldr	r3, [pc, #612]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e2:	08db      	lsrs	r3, r3, #3
 80069e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	fb02 f303 	mul.w	r3, r2, r3
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8111 	beq.w	8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	f000 8083 	beq.w	8006b10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	f200 80a1 	bhi.w	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d056      	beq.n	8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a1e:	e099      	b.n	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a20:	4b88      	ldr	r3, [pc, #544]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d02d      	beq.n	8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a2c:	4b85      	ldr	r3, [pc, #532]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	4a84      	ldr	r2, [pc, #528]	; (8006c48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	ee07 3a90 	vmov	s15, r3
 8006a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a56:	4b7b      	ldr	r3, [pc, #492]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a86:	e087      	b.n	8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9a:	4b6a      	ldr	r3, [pc, #424]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aca:	e065      	b.n	8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ade:	4b59      	ldr	r3, [pc, #356]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006af2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b0e:	e043      	b.n	8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b22:	4b48      	ldr	r3, [pc, #288]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b52:	e021      	b.n	8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b66:	4b37      	ldr	r3, [pc, #220]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006b98:	4b2a      	ldr	r3, [pc, #168]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	0a5b      	lsrs	r3, r3, #9
 8006b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bbe:	ee17 2a90 	vmov	r2, s15
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006bc6:	4b1f      	ldr	r3, [pc, #124]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	0c1b      	lsrs	r3, r3, #16
 8006bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd0:	ee07 3a90 	vmov	s15, r3
 8006bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bec:	ee17 2a90 	vmov	r2, s15
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006bf4:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	0e1b      	lsrs	r3, r3, #24
 8006bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c1a:	ee17 2a90 	vmov	r2, s15
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c22:	e008      	b.n	8006c36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	609a      	str	r2, [r3, #8]
}
 8006c36:	bf00      	nop
 8006c38:	3724      	adds	r7, #36	; 0x24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	58024400 	.word	0x58024400
 8006c48:	03d09000 	.word	0x03d09000
 8006c4c:	46000000 	.word	0x46000000
 8006c50:	4c742400 	.word	0x4c742400
 8006c54:	4a742400 	.word	0x4a742400
 8006c58:	4bbebc20 	.word	0x4bbebc20

08006c5c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b089      	sub	sp, #36	; 0x24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c64:	4ba0      	ldr	r3, [pc, #640]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	f003 0303 	and.w	r3, r3, #3
 8006c6c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006c6e:	4b9e      	ldr	r3, [pc, #632]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	091b      	lsrs	r3, r3, #4
 8006c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c78:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006c7a:	4b9b      	ldr	r3, [pc, #620]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c84:	4b98      	ldr	r3, [pc, #608]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c88:	08db      	lsrs	r3, r3, #3
 8006c8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	fb02 f303 	mul.w	r3, r2, r3
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 8111 	beq.w	8006eca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	f000 8083 	beq.w	8006db6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	f200 80a1 	bhi.w	8006dfa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d056      	beq.n	8006d72 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006cc4:	e099      	b.n	8006dfa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cc6:	4b88      	ldr	r3, [pc, #544]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d02d      	beq.n	8006d2e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cd2:	4b85      	ldr	r3, [pc, #532]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	08db      	lsrs	r3, r3, #3
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	4a83      	ldr	r2, [pc, #524]	; (8006eec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006cde:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	ee07 3a90 	vmov	s15, r3
 8006cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cfc:	4b7a      	ldr	r3, [pc, #488]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d04:	ee07 3a90 	vmov	s15, r3
 8006d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d10:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d28:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d2c:	e087      	b.n	8006e3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	ee07 3a90 	vmov	s15, r3
 8006d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d38:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006d3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d40:	4b69      	ldr	r3, [pc, #420]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d48:	ee07 3a90 	vmov	s15, r3
 8006d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d50:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d54:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d70:	e065      	b.n	8006e3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	ee07 3a90 	vmov	s15, r3
 8006d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d7c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d84:	4b58      	ldr	r3, [pc, #352]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8c:	ee07 3a90 	vmov	s15, r3
 8006d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d94:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d98:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006db4:	e043      	b.n	8006e3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006efc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc8:	4b47      	ldr	r3, [pc, #284]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd0:	ee07 3a90 	vmov	s15, r3
 8006dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ddc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006de8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006df8:	e021      	b.n	8006e3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	ee07 3a90 	vmov	s15, r3
 8006e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e04:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e0c:	4b36      	ldr	r3, [pc, #216]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e14:	ee07 3a90 	vmov	s15, r3
 8006e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e20:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e3c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006e3e:	4b2a      	ldr	r3, [pc, #168]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	0a5b      	lsrs	r3, r3, #9
 8006e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e48:	ee07 3a90 	vmov	s15, r3
 8006e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e58:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e64:	ee17 2a90 	vmov	r2, s15
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006e6c:	4b1e      	ldr	r3, [pc, #120]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	0c1b      	lsrs	r3, r3, #16
 8006e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e92:	ee17 2a90 	vmov	r2, s15
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006e9a:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	0e1b      	lsrs	r3, r3, #24
 8006ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea4:	ee07 3a90 	vmov	s15, r3
 8006ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ec0:	ee17 2a90 	vmov	r2, s15
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006ec8:	e008      	b.n	8006edc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	609a      	str	r2, [r3, #8]
}
 8006edc:	bf00      	nop
 8006ede:	3724      	adds	r7, #36	; 0x24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	58024400 	.word	0x58024400
 8006eec:	03d09000 	.word	0x03d09000
 8006ef0:	46000000 	.word	0x46000000
 8006ef4:	4c742400 	.word	0x4c742400
 8006ef8:	4a742400 	.word	0x4a742400
 8006efc:	4bbebc20 	.word	0x4bbebc20

08006f00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f0e:	4b53      	ldr	r3, [pc, #332]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d101      	bne.n	8006f1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e099      	b.n	8007052 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f1e:	4b4f      	ldr	r3, [pc, #316]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a4e      	ldr	r2, [pc, #312]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006f24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f2a:	f7fa f9fb 	bl	8001324 <HAL_GetTick>
 8006f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f30:	e008      	b.n	8006f44 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f32:	f7fa f9f7 	bl	8001324 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e086      	b.n	8007052 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f44:	4b45      	ldr	r3, [pc, #276]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1f0      	bne.n	8006f32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f50:	4b42      	ldr	r3, [pc, #264]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	031b      	lsls	r3, r3, #12
 8006f5e:	493f      	ldr	r1, [pc, #252]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	628b      	str	r3, [r1, #40]	; 0x28
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	025b      	lsls	r3, r3, #9
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	041b      	lsls	r3, r3, #16
 8006f82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	061b      	lsls	r3, r3, #24
 8006f90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f94:	4931      	ldr	r1, [pc, #196]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006f9a:	4b30      	ldr	r3, [pc, #192]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	492d      	ldr	r1, [pc, #180]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006fac:	4b2b      	ldr	r3, [pc, #172]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	f023 0220 	bic.w	r2, r3, #32
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	4928      	ldr	r1, [pc, #160]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006fbe:	4b27      	ldr	r3, [pc, #156]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	4a26      	ldr	r2, [pc, #152]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006fc4:	f023 0310 	bic.w	r3, r3, #16
 8006fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006fca:	4b24      	ldr	r3, [pc, #144]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fce:	4b24      	ldr	r3, [pc, #144]	; (8007060 <RCCEx_PLL2_Config+0x160>)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	69d2      	ldr	r2, [r2, #28]
 8006fd6:	00d2      	lsls	r2, r2, #3
 8006fd8:	4920      	ldr	r1, [pc, #128]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006fde:	4b1f      	ldr	r3, [pc, #124]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe2:	4a1e      	ldr	r2, [pc, #120]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006fe4:	f043 0310 	orr.w	r3, r3, #16
 8006fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d106      	bne.n	8006ffe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ff0:	4b1a      	ldr	r3, [pc, #104]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	4a19      	ldr	r2, [pc, #100]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8006ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ffa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ffc:	e00f      	b.n	800701e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d106      	bne.n	8007012 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007004:	4b15      	ldr	r3, [pc, #84]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	4a14      	ldr	r2, [pc, #80]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 800700a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800700e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007010:	e005      	b.n	800701e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007012:	4b12      	ldr	r3, [pc, #72]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8007014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007016:	4a11      	ldr	r2, [pc, #68]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8007018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800701c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800701e:	4b0f      	ldr	r3, [pc, #60]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a0e      	ldr	r2, [pc, #56]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8007024:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800702a:	f7fa f97b 	bl	8001324 <HAL_GetTick>
 800702e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007030:	e008      	b.n	8007044 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007032:	f7fa f977 	bl	8001324 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d901      	bls.n	8007044 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e006      	b.n	8007052 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007044:	4b05      	ldr	r3, [pc, #20]	; (800705c <RCCEx_PLL2_Config+0x15c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0f0      	beq.n	8007032 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007050:	7bfb      	ldrb	r3, [r7, #15]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	58024400 	.word	0x58024400
 8007060:	ffff0007 	.word	0xffff0007

08007064 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007072:	4b53      	ldr	r3, [pc, #332]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	2b03      	cmp	r3, #3
 800707c:	d101      	bne.n	8007082 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e099      	b.n	80071b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007082:	4b4f      	ldr	r3, [pc, #316]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a4e      	ldr	r2, [pc, #312]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800708c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800708e:	f7fa f949 	bl	8001324 <HAL_GetTick>
 8007092:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007094:	e008      	b.n	80070a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007096:	f7fa f945 	bl	8001324 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d901      	bls.n	80070a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e086      	b.n	80071b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070a8:	4b45      	ldr	r3, [pc, #276]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1f0      	bne.n	8007096 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80070b4:	4b42      	ldr	r3, [pc, #264]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 80070b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	051b      	lsls	r3, r3, #20
 80070c2:	493f      	ldr	r1, [pc, #252]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	628b      	str	r3, [r1, #40]	; 0x28
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	025b      	lsls	r3, r3, #9
 80070da:	b29b      	uxth	r3, r3
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	041b      	lsls	r3, r3, #16
 80070e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070ea:	431a      	orrs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	061b      	lsls	r3, r3, #24
 80070f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070f8:	4931      	ldr	r1, [pc, #196]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80070fe:	4b30      	ldr	r3, [pc, #192]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	492d      	ldr	r1, [pc, #180]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 800710c:	4313      	orrs	r3, r2
 800710e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007110:	4b2b      	ldr	r3, [pc, #172]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	4928      	ldr	r1, [pc, #160]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 800711e:	4313      	orrs	r3, r2
 8007120:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007122:	4b27      	ldr	r3, [pc, #156]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	4a26      	ldr	r2, [pc, #152]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800712c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800712e:	4b24      	ldr	r3, [pc, #144]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007132:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <RCCEx_PLL3_Config+0x160>)
 8007134:	4013      	ands	r3, r2
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	69d2      	ldr	r2, [r2, #28]
 800713a:	00d2      	lsls	r2, r2, #3
 800713c:	4920      	ldr	r1, [pc, #128]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 800713e:	4313      	orrs	r3, r2
 8007140:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007142:	4b1f      	ldr	r3, [pc, #124]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007146:	4a1e      	ldr	r2, [pc, #120]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800714c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d106      	bne.n	8007162 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007154:	4b1a      	ldr	r3, [pc, #104]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	4a19      	ldr	r2, [pc, #100]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 800715a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800715e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007160:	e00f      	b.n	8007182 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d106      	bne.n	8007176 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007168:	4b15      	ldr	r3, [pc, #84]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	4a14      	ldr	r2, [pc, #80]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 800716e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007172:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007174:	e005      	b.n	8007182 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007176:	4b12      	ldr	r3, [pc, #72]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717a:	4a11      	ldr	r2, [pc, #68]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 800717c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007180:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007182:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a0e      	ldr	r2, [pc, #56]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 8007188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800718c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800718e:	f7fa f8c9 	bl	8001324 <HAL_GetTick>
 8007192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007194:	e008      	b.n	80071a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007196:	f7fa f8c5 	bl	8001324 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e006      	b.n	80071b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071a8:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <RCCEx_PLL3_Config+0x15c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0f0      	beq.n	8007196 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	58024400 	.word	0x58024400
 80071c4:	ffff0007 	.word	0xffff0007

080071c8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d904      	bls.n	80071e6 <HAL_SAI_InitProtocol+0x1e>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	3b03      	subs	r3, #3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d812      	bhi.n	800720a <HAL_SAI_InitProtocol+0x42>
 80071e4:	e008      	b.n	80071f8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fb8b 	bl	8007908 <SAI_InitI2S>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]
      break;
 80071f6:	e00b      	b.n	8007210 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 fc34 	bl	8007a6c <SAI_InitPCM>
 8007204:	4603      	mov	r3, r0
 8007206:	75fb      	strb	r3, [r7, #23]
      break;
 8007208:	e002      	b.n	8007210 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	75fb      	strb	r3, [r7, #23]
      break;
 800720e:	bf00      	nop
  }

  if (status == HAL_OK)
 8007210:	7dfb      	ldrb	r3, [r7, #23]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d104      	bne.n	8007220 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 f808 	bl	800722c <HAL_SAI_Init>
 800721c:	4603      	mov	r3, r0
 800721e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007220:	7dfb      	ldrb	r3, [r7, #23]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	; 0x28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e201      	b.n	8007642 <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007244:	2b01      	cmp	r3, #1
 8007246:	d113      	bne.n	8007270 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a99      	ldr	r2, [pc, #612]	; (80074b4 <HAL_SAI_Init+0x288>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <HAL_SAI_Init+0x30>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a98      	ldr	r2, [pc, #608]	; (80074b8 <HAL_SAI_Init+0x28c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d107      	bne.n	800726c <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007260:	2b01      	cmp	r3, #1
 8007262:	d103      	bne.n	800726c <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e1e8      	b.n	8007642 <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a8f      	ldr	r2, [pc, #572]	; (80074b4 <HAL_SAI_Init+0x288>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d004      	beq.n	8007284 <HAL_SAI_Init+0x58>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a8f      	ldr	r2, [pc, #572]	; (80074bc <HAL_SAI_Init+0x290>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d102      	bne.n	800728a <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8007284:	4b8e      	ldr	r3, [pc, #568]	; (80074c0 <HAL_SAI_Init+0x294>)
 8007286:	61bb      	str	r3, [r7, #24]
 8007288:	e00e      	b.n	80072a8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a8a      	ldr	r2, [pc, #552]	; (80074b8 <HAL_SAI_Init+0x28c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d004      	beq.n	800729e <HAL_SAI_Init+0x72>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a8a      	ldr	r2, [pc, #552]	; (80074c4 <HAL_SAI_Init+0x298>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d102      	bne.n	80072a4 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800729e:	4b8a      	ldr	r3, [pc, #552]	; (80074c8 <HAL_SAI_Init+0x29c>)
 80072a0:	61bb      	str	r3, [r7, #24]
 80072a2:	e001      	b.n	80072a8 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e1cc      	b.n	8007642 <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d106      	bne.n	80072c2 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7f9 fde5 	bl	8000e8c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fc8c 	bl	8007be0 <SAI_Disable>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e1b7      	b.n	8007642 <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2202      	movs	r2, #2
 80072d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d00c      	beq.n	80072fc <HAL_SAI_Init+0xd0>
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d80d      	bhi.n	8007302 <HAL_SAI_Init+0xd6>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <HAL_SAI_Init+0xc4>
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d003      	beq.n	80072f6 <HAL_SAI_Init+0xca>
 80072ee:	e008      	b.n	8007302 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80072f4:	e008      	b.n	8007308 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80072f6:	2310      	movs	r3, #16
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80072fa:	e005      	b.n	8007308 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80072fc:	2320      	movs	r3, #32
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007300:	e002      	b.n	8007308 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007306:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	2b05      	cmp	r3, #5
 800730e:	d822      	bhi.n	8007356 <HAL_SAI_Init+0x12a>
 8007310:	a201      	add	r2, pc, #4	; (adr r2, 8007318 <HAL_SAI_Init+0xec>)
 8007312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007316:	bf00      	nop
 8007318:	08007331 	.word	0x08007331
 800731c:	08007337 	.word	0x08007337
 8007320:	0800733f 	.word	0x0800733f
 8007324:	08007357 	.word	0x08007357
 8007328:	08007357 	.word	0x08007357
 800732c:	08007347 	.word	0x08007347
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	61fb      	str	r3, [r7, #28]
      break;
 8007334:	e012      	b.n	800735c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800733a:	61fb      	str	r3, [r7, #28]
      break;
 800733c:	e00e      	b.n	800735c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800733e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007342:	61fb      	str	r3, [r7, #28]
      break;
 8007344:	e00a      	b.n	800735c <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800734a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	f043 0303 	orr.w	r3, r3, #3
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007354:	e002      	b.n	800735c <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	61fb      	str	r3, [r7, #28]
      break;
 800735a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007360:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 808a 	beq.w	8007480 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a4f      	ldr	r2, [pc, #316]	; (80074b4 <HAL_SAI_Init+0x288>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d004      	beq.n	8007384 <HAL_SAI_Init+0x158>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a4f      	ldr	r2, [pc, #316]	; (80074bc <HAL_SAI_Init+0x290>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d106      	bne.n	8007392 <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007384:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007388:	f04f 0100 	mov.w	r1, #0
 800738c:	f7fe fcd6 	bl	8005d3c <HAL_RCCEx_GetPeriphCLKFreq>
 8007390:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a48      	ldr	r2, [pc, #288]	; (80074b8 <HAL_SAI_Init+0x28c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d106      	bne.n	80073aa <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800739c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80073a0:	f04f 0100 	mov.w	r1, #0
 80073a4:	f7fe fcca 	bl	8005d3c <HAL_RCCEx_GetPeriphCLKFreq>
 80073a8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a45      	ldr	r2, [pc, #276]	; (80074c4 <HAL_SAI_Init+0x298>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d106      	bne.n	80073c2 <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80073b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80073b8:	f04f 0100 	mov.w	r1, #0
 80073bc:	f7fe fcbe 	bl	8005d3c <HAL_RCCEx_GetPeriphCLKFreq>
 80073c0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073ca:	d120      	bne.n	800740e <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d102      	bne.n	80073da <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80073d4:	2340      	movs	r3, #64	; 0x40
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	e00a      	b.n	80073f0 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073de:	2b08      	cmp	r3, #8
 80073e0:	d103      	bne.n	80073ea <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80073e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	e002      	b.n	80073f0 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ee:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	4619      	mov	r1, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	fb02 f303 	mul.w	r3, r2, r3
 8007406:	fbb1 f3f3 	udiv	r3, r1, r3
 800740a:	613b      	str	r3, [r7, #16]
 800740c:	e017      	b.n	800743e <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007412:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007416:	d101      	bne.n	800741c <HAL_SAI_Init+0x1f0>
 8007418:	2302      	movs	r3, #2
 800741a:	e000      	b.n	800741e <HAL_SAI_Init+0x1f2>
 800741c:	2301      	movs	r3, #1
 800741e:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	4619      	mov	r1, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	fb02 f303 	mul.w	r3, r2, r3
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	fbb1 f3f3 	udiv	r3, r1, r3
 800743c:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	4a22      	ldr	r2, [pc, #136]	; (80074cc <HAL_SAI_Init+0x2a0>)
 8007442:	fba2 2303 	umull	r2, r3, r2, r3
 8007446:	08da      	lsrs	r2, r3, #3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800744c:	6939      	ldr	r1, [r7, #16]
 800744e:	4b1f      	ldr	r3, [pc, #124]	; (80074cc <HAL_SAI_Init+0x2a0>)
 8007450:	fba3 2301 	umull	r2, r3, r3, r1
 8007454:	08da      	lsrs	r2, r3, #3
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	1aca      	subs	r2, r1, r3
 8007460:	2a08      	cmp	r2, #8
 8007462:	d904      	bls.n	800746e <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007472:	2b04      	cmp	r3, #4
 8007474:	d104      	bne.n	8007480 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	085a      	lsrs	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <HAL_SAI_Init+0x264>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d109      	bne.n	80074a4 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007494:	2b01      	cmp	r3, #1
 8007496:	d101      	bne.n	800749c <HAL_SAI_Init+0x270>
 8007498:	2300      	movs	r3, #0
 800749a:	e001      	b.n	80074a0 <HAL_SAI_Init+0x274>
 800749c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074a0:	623b      	str	r3, [r7, #32]
 80074a2:	e017      	b.n	80074d4 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d111      	bne.n	80074d0 <HAL_SAI_Init+0x2a4>
 80074ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b0:	e00f      	b.n	80074d2 <HAL_SAI_Init+0x2a6>
 80074b2:	bf00      	nop
 80074b4:	40015804 	.word	0x40015804
 80074b8:	58005404 	.word	0x58005404
 80074bc:	40015824 	.word	0x40015824
 80074c0:	40015800 	.word	0x40015800
 80074c4:	58005424 	.word	0x58005424
 80074c8:	58005400 	.word	0x58005400
 80074cc:	cccccccd 	.word	0xcccccccd
 80074d0:	2300      	movs	r3, #0
 80074d2:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6819      	ldr	r1, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	4b5b      	ldr	r3, [pc, #364]	; (800764c <HAL_SAI_Init+0x420>)
 80074e0:	400b      	ands	r3, r1
 80074e2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6819      	ldr	r1, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074f8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fe:	431a      	orrs	r2, r3
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800750c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007518:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	051b      	lsls	r3, r3, #20
 8007520:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007526:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6859      	ldr	r1, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	4b43      	ldr	r3, [pc, #268]	; (8007650 <HAL_SAI_Init+0x424>)
 8007542:	400b      	ands	r3, r1
 8007544:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6859      	ldr	r1, [r3, #4]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69da      	ldr	r2, [r3, #28]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	431a      	orrs	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755a:	431a      	orrs	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6899      	ldr	r1, [r3, #8]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	4b39      	ldr	r3, [pc, #228]	; (8007654 <HAL_SAI_Init+0x428>)
 8007570:	400b      	ands	r3, r1
 8007572:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6899      	ldr	r1, [r3, #8]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007584:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800758a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007590:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007596:	3b01      	subs	r3, #1
 8007598:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800759a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68d9      	ldr	r1, [r3, #12]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	f24f 0320 	movw	r3, #61472	; 0xf020
 80075b2:	400b      	ands	r3, r1
 80075b4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68d9      	ldr	r1, [r3, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ca:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80075cc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d2:	3b01      	subs	r3, #1
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a1c      	ldr	r2, [pc, #112]	; (8007658 <HAL_SAI_Init+0x42c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d004      	beq.n	80075f4 <HAL_SAI_Init+0x3c8>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a1b      	ldr	r2, [pc, #108]	; (800765c <HAL_SAI_Init+0x430>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d119      	bne.n	8007628 <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f8:	f023 0201 	bic.w	r2, r3, #1
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007606:	2b01      	cmp	r3, #1
 8007608:	d10e      	bne.n	8007628 <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007612:	3b01      	subs	r3, #1
 8007614:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007616:	431a      	orrs	r2, r3
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007620:	f043 0201 	orr.w	r2, r3, #1
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3728      	adds	r7, #40	; 0x28
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	f005c010 	.word	0xf005c010
 8007650:	ffff1ff0 	.word	0xffff1ff0
 8007654:	fff88000 	.word	0xfff88000
 8007658:	40015804 	.word	0x40015804
 800765c:	58005404 	.word	0x58005404

08007660 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800766e:	f7f9 fe59 	bl	8001324 <HAL_GetTick>
 8007672:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <HAL_SAI_Transmit_DMA+0x20>
 800767a:	88fb      	ldrh	r3, [r7, #6]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e098      	b.n	80077b6 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b01      	cmp	r3, #1
 800768e:	f040 8091 	bne.w	80077b4 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007698:	2b01      	cmp	r3, #1
 800769a:	d101      	bne.n	80076a0 <HAL_SAI_Transmit_DMA+0x40>
 800769c:	2302      	movs	r3, #2
 800769e:	e08a      	b.n	80077b6 <HAL_SAI_Transmit_DMA+0x156>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	88fa      	ldrh	r2, [r7, #6]
 80076b2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	88fa      	ldrh	r2, [r7, #6]
 80076ba:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2212      	movs	r2, #18
 80076ca:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d4:	4a3a      	ldr	r2, [pc, #232]	; (80077c0 <HAL_SAI_Transmit_DMA+0x160>)
 80076d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076de:	4a39      	ldr	r2, [pc, #228]	; (80077c4 <HAL_SAI_Transmit_DMA+0x164>)
 80076e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076e8:	4a37      	ldr	r2, [pc, #220]	; (80077c8 <HAL_SAI_Transmit_DMA+0x168>)
 80076ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076f2:	2200      	movs	r2, #0
 80076f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007700:	4619      	mov	r1, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	331c      	adds	r3, #28
 8007708:	461a      	mov	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007710:	f7fa faa0 	bl	8001c54 <HAL_DMA_Start_IT>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d005      	beq.n	8007726 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e047      	b.n	80077b6 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007726:	2100      	movs	r1, #0
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fa21 	bl	8007b70 <SAI_InterruptFlag>
 800772e:	4601      	mov	r1, r0
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	691a      	ldr	r2, [r3, #16]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800774c:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800774e:	e015      	b.n	800777c <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007750:	f7f9 fde8 	bl	8001324 <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800775e:	d90d      	bls.n	800777c <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007766:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e01c      	b.n	80077b6 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0e2      	beq.n	8007750 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d107      	bne.n	80077a8 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80077a6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	e000      	b.n	80077b6 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 80077b4:	2302      	movs	r3, #2
  }
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	08007cb5 	.word	0x08007cb5
 80077c4:	08007c55 	.word	0x08007c55
 80077c8:	08007d4d 	.word	0x08007d4d

080077cc <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <HAL_SAI_Receive_DMA+0x1a>
 80077e0:	88fb      	ldrh	r3, [r7, #6]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e079      	b.n	80078de <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d172      	bne.n	80078dc <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_SAI_Receive_DMA+0x38>
 8007800:	2302      	movs	r3, #2
 8007802:	e06c      	b.n	80078de <HAL_SAI_Receive_DMA+0x112>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	88fa      	ldrh	r2, [r7, #6]
 8007816:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	88fa      	ldrh	r2, [r7, #6]
 800781e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2222      	movs	r2, #34	; 0x22
 800782e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007838:	4a2b      	ldr	r2, [pc, #172]	; (80078e8 <HAL_SAI_Receive_DMA+0x11c>)
 800783a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007842:	4a2a      	ldr	r2, [pc, #168]	; (80078ec <HAL_SAI_Receive_DMA+0x120>)
 8007844:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800784c:	4a28      	ldr	r2, [pc, #160]	; (80078f0 <HAL_SAI_Receive_DMA+0x124>)
 800784e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007856:	2200      	movs	r2, #0
 8007858:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	331c      	adds	r3, #28
 8007866:	4619      	mov	r1, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800786c:	461a      	mov	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007874:	f7fa f9ee 	bl	8001c54 <HAL_DMA_Start_IT>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d005      	beq.n	800788a <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e029      	b.n	80078de <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800788a:	2100      	movs	r1, #0
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f96f 	bl	8007b70 <SAI_InterruptFlag>
 8007892:	4601      	mov	r1, r0
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80078b0:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d107      	bne.n	80078d0 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80078ce:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	e000      	b.n	80078de <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80078dc:	2302      	movs	r3, #2
  }
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	08007d31 	.word	0x08007d31
 80078ec:	08007cd1 	.word	0x08007cd1
 80078f0:	08007d4d 	.word	0x08007d4d

080078f4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <SAI_InitI2S+0x2e>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2b02      	cmp	r3, #2
 8007934:	d103      	bne.n	800793e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	651a      	str	r2, [r3, #80]	; 0x50
 800793c:	e002      	b.n	8007944 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2201      	movs	r2, #1
 8007942:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800794a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007952:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e077      	b.n	8007a5e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d107      	bne.n	8007984 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007980:	665a      	str	r2, [r3, #100]	; 0x64
 8007982:	e006      	b.n	8007992 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800798a:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b03      	cmp	r3, #3
 8007996:	d84f      	bhi.n	8007a38 <SAI_InitI2S+0x130>
 8007998:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <SAI_InitI2S+0x98>)
 800799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799e:	bf00      	nop
 80079a0:	080079b1 	.word	0x080079b1
 80079a4:	080079d3 	.word	0x080079d3
 80079a8:	080079f5 	.word	0x080079f5
 80079ac:	08007a17 	.word	0x08007a17
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2280      	movs	r2, #128	; 0x80
 80079b4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	085b      	lsrs	r3, r3, #1
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	085b      	lsrs	r3, r3, #1
 80079c4:	011a      	lsls	r2, r3, #4
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2240      	movs	r2, #64	; 0x40
 80079ce:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80079d0:	e035      	b.n	8007a3e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2280      	movs	r2, #128	; 0x80
 80079d6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	085b      	lsrs	r3, r3, #1
 80079dc:	019a      	lsls	r2, r3, #6
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	085b      	lsrs	r3, r3, #1
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2280      	movs	r2, #128	; 0x80
 80079f0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80079f2:	e024      	b.n	8007a3e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	22c0      	movs	r2, #192	; 0xc0
 80079f8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	085b      	lsrs	r3, r3, #1
 80079fe:	019a      	lsls	r2, r3, #6
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	085b      	lsrs	r3, r3, #1
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2280      	movs	r2, #128	; 0x80
 8007a12:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007a14:	e013      	b.n	8007a3e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	22e0      	movs	r2, #224	; 0xe0
 8007a1a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	085b      	lsrs	r3, r3, #1
 8007a20:	019a      	lsls	r2, r3, #6
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	085b      	lsrs	r3, r3, #1
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2280      	movs	r2, #128	; 0x80
 8007a34:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007a36:	e002      	b.n	8007a3e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a3c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d10b      	bne.n	8007a5c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d102      	bne.n	8007a50 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2210      	movs	r2, #16
 8007a4e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d102      	bne.n	8007a5c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2208      	movs	r2, #8
 8007a5a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	371c      	adds	r7, #28
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop

08007a6c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <SAI_InitPCM+0x2e>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d103      	bne.n	8007aa2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	651a      	str	r2, [r3, #80]	; 0x50
 8007aa0:	e002      	b.n	8007aa8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007ab4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007abc:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ad0:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d103      	bne.n	8007ae0 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	659a      	str	r2, [r3, #88]	; 0x58
 8007ade:	e002      	b.n	8007ae6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	220d      	movs	r2, #13
 8007ae4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d837      	bhi.n	8007b5c <SAI_InitPCM+0xf0>
 8007aec:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <SAI_InitPCM+0x88>)
 8007aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af2:	bf00      	nop
 8007af4:	08007b05 	.word	0x08007b05
 8007af8:	08007b1b 	.word	0x08007b1b
 8007afc:	08007b31 	.word	0x08007b31
 8007b00:	08007b47 	.word	0x08007b47
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2280      	movs	r2, #128	; 0x80
 8007b08:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	011a      	lsls	r2, r3, #4
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2240      	movs	r2, #64	; 0x40
 8007b16:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007b18:	e023      	b.n	8007b62 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2280      	movs	r2, #128	; 0x80
 8007b1e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2280      	movs	r2, #128	; 0x80
 8007b2c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007b2e:	e018      	b.n	8007b62 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	22c0      	movs	r2, #192	; 0xc0
 8007b34:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2280      	movs	r2, #128	; 0x80
 8007b42:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007b44:	e00d      	b.n	8007b62 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	22e0      	movs	r2, #224	; 0xe0
 8007b4a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2280      	movs	r2, #128	; 0x80
 8007b58:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007b5a:	e002      	b.n	8007b62 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b60:	bf00      	nop
  }

  return status;
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	371c      	adds	r7, #28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d103      	bne.n	8007b8e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f043 0308 	orr.w	r3, r3, #8
 8007b8c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b92:	2b08      	cmp	r3, #8
 8007b94:	d10b      	bne.n	8007bae <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d003      	beq.n	8007ba6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d103      	bne.n	8007bae <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f043 0310 	orr.w	r3, r3, #16
 8007bac:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d003      	beq.n	8007bbe <SAI_InterruptFlag+0x4e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d104      	bne.n	8007bc8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	e003      	b.n	8007bd0 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f043 0304 	orr.w	r3, r3, #4
 8007bce:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
	...

08007be0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007be8:	4b18      	ldr	r3, [pc, #96]	; (8007c4c <SAI_Disable+0x6c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a18      	ldr	r2, [pc, #96]	; (8007c50 <SAI_Disable+0x70>)
 8007bee:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf2:	0b1b      	lsrs	r3, r3, #12
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c0a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10a      	bne.n	8007c28 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	72fb      	strb	r3, [r7, #11]
      break;
 8007c26:	e009      	b.n	8007c3c <SAI_Disable+0x5c>
    }
    count--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e7      	bne.n	8007c0c <SAI_Disable+0x2c>

  return status;
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	24000000 	.word	0x24000000
 8007c50:	95cbec1b 	.word	0x95cbec1b

08007c54 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c6a:	d01c      	beq.n	8007ca6 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007c82:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007c84:	2100      	movs	r1, #0
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7ff ff72 	bl	8007b70 <SAI_InterruptFlag>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	43d9      	mvns	r1, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	691a      	ldr	r2, [r3, #16]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	400a      	ands	r2, r1
 8007c9c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f7f8 fc02 	bl	80004b0 <HAL_SAI_TxCpltCallback>
#endif
}
 8007cac:	bf00      	nop
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f7f8 fc04 	bl	80004d0 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8007cc8:	bf00      	nop
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ce6:	d01c      	beq.n	8007d22 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007cf6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007d00:	2100      	movs	r1, #0
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7ff ff34 	bl	8007b70 <SAI_InterruptFlag>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	43d9      	mvns	r1, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691a      	ldr	r2, [r3, #16]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	400a      	ands	r2, r1
 8007d18:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7f8 fbe4 	bl	80004f0 <HAL_SAI_RxCpltCallback>
#endif
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7f8 fbf2 	bl	8000528 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8007d44:	bf00      	nop
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7fb f90e 	bl	8002f7c <HAL_DMA_GetError>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d01d      	beq.n	8007da2 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007d84:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff ff2a 	bl	8007be0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7ff fda9 	bl	80078f4 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8007da2:	bf00      	nop
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e02b      	b.n	8007e18 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d106      	bne.n	8007dda <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7f9 f84f 	bl	8000e78 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2202      	movs	r2, #2
 8007dde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3304      	adds	r3, #4
 8007dea:	4619      	mov	r1, r3
 8007dec:	4610      	mov	r0, r2
 8007dee:	f000 fdbf 	bl	8008970 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6818      	ldr	r0, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	f000 fe13 	bl	8008a28 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007e02:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <HAL_SDRAM_Init+0x74>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a06      	ldr	r2, [pc, #24]	; (8007e20 <HAL_SDRAM_Init+0x74>)
 8007e08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e0c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	52004000 	.word	0x52004000

08007e24 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e36:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d101      	bne.n	8007e42 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e021      	b.n	8007e86 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d002      	beq.n	8007e4e <HAL_SDRAM_SendCommand+0x2a>
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	2b05      	cmp	r3, #5
 8007e4c:	d118      	bne.n	8007e80 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2202      	movs	r2, #2
 8007e52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	68b9      	ldr	r1, [r7, #8]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fe4c 	bl	8008afc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d104      	bne.n	8007e76 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2205      	movs	r2, #5
 8007e70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007e74:	e006      	b.n	8007e84 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007e7e:	e001      	b.n	8007e84 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e000      	b.n	8007e86 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d101      	bne.n	8007ea8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e016      	b.n	8007ed6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d10f      	bne.n	8007ed4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fe3e 	bl	8008b44 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	e000      	b.n	8007ed6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e10f      	b.n	8008112 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a87      	ldr	r2, [pc, #540]	; (800811c <HAL_SPI_Init+0x23c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d00f      	beq.n	8007f22 <HAL_SPI_Init+0x42>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a86      	ldr	r2, [pc, #536]	; (8008120 <HAL_SPI_Init+0x240>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00a      	beq.n	8007f22 <HAL_SPI_Init+0x42>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a84      	ldr	r2, [pc, #528]	; (8008124 <HAL_SPI_Init+0x244>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d005      	beq.n	8007f22 <HAL_SPI_Init+0x42>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	2b0f      	cmp	r3, #15
 8007f1c:	d901      	bls.n	8007f22 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e0f7      	b.n	8008112 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fd08 	bl	8008938 <SPI_GetPacketSize>
 8007f28:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a7b      	ldr	r2, [pc, #492]	; (800811c <HAL_SPI_Init+0x23c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00c      	beq.n	8007f4e <HAL_SPI_Init+0x6e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a79      	ldr	r2, [pc, #484]	; (8008120 <HAL_SPI_Init+0x240>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d007      	beq.n	8007f4e <HAL_SPI_Init+0x6e>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a78      	ldr	r2, [pc, #480]	; (8008124 <HAL_SPI_Init+0x244>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d002      	beq.n	8007f4e <HAL_SPI_Init+0x6e>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b08      	cmp	r3, #8
 8007f4c:	d811      	bhi.n	8007f72 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f52:	4a72      	ldr	r2, [pc, #456]	; (800811c <HAL_SPI_Init+0x23c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d009      	beq.n	8007f6c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a70      	ldr	r2, [pc, #448]	; (8008120 <HAL_SPI_Init+0x240>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d004      	beq.n	8007f6c <HAL_SPI_Init+0x8c>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a6f      	ldr	r2, [pc, #444]	; (8008124 <HAL_SPI_Init+0x244>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d104      	bne.n	8007f76 <HAL_SPI_Init+0x96>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b10      	cmp	r3, #16
 8007f70:	d901      	bls.n	8007f76 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e0cd      	b.n	8008112 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d106      	bne.n	8007f90 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7f8 fe14 	bl	8000bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f022 0201 	bic.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007fb2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fbc:	d119      	bne.n	8007ff2 <HAL_SPI_Init+0x112>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fc6:	d103      	bne.n	8007fd0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d008      	beq.n	8007fe2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10c      	bne.n	8007ff2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007fdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fe0:	d107      	bne.n	8007ff2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ff0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00f      	beq.n	800801e <HAL_SPI_Init+0x13e>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	2b06      	cmp	r3, #6
 8008004:	d90b      	bls.n	800801e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	e007      	b.n	800802e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800802c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69da      	ldr	r2, [r3, #28]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008036:	431a      	orrs	r2, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	431a      	orrs	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008040:	ea42 0103 	orr.w	r1, r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	430a      	orrs	r2, r1
 800804e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	431a      	orrs	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	431a      	orrs	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	431a      	orrs	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	431a      	orrs	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	431a      	orrs	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008082:	431a      	orrs	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	431a      	orrs	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800808e:	ea42 0103 	orr.w	r1, r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d113      	bne.n	80080ce <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080b8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080cc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0201 	bic.w	r2, r2, #1
 80080dc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	40013000 	.word	0x40013000
 8008120:	40003800 	.word	0x40003800
 8008124:	40003c00 	.word	0x40003c00

08008128 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b08e      	sub	sp, #56	; 0x38
 800812c:	af02      	add	r7, sp, #8
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3320      	adds	r3, #32
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3330      	adds	r3, #48	; 0x30
 8008144:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	095b      	lsrs	r3, r3, #5
 800814c:	b29b      	uxth	r3, r3
 800814e:	3301      	adds	r3, #1
 8008150:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008152:	f7f9 f8e7 	bl	8001324 <HAL_GetTick>
 8008156:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8008158:	887b      	ldrh	r3, [r7, #2]
 800815a:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800815c:	887b      	ldrh	r3, [r7, #2]
 800815e:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b01      	cmp	r3, #1
 800816a:	d001      	beq.n	8008170 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800816c:	2302      	movs	r3, #2
 800816e:	e310      	b.n	8008792 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d005      	beq.n	8008182 <HAL_SPI_TransmitReceive+0x5a>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <HAL_SPI_TransmitReceive+0x5a>
 800817c:	887b      	ldrh	r3, [r7, #2]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e305      	b.n	8008792 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800818c:	2b01      	cmp	r3, #1
 800818e:	d101      	bne.n	8008194 <HAL_SPI_TransmitReceive+0x6c>
 8008190:	2302      	movs	r3, #2
 8008192:	e2fe      	b.n	8008792 <HAL_SPI_TransmitReceive+0x66a>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2205      	movs	r2, #5
 80081a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	887a      	ldrh	r2, [r7, #2]
 80081b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	887a      	ldrh	r2, [r7, #2]
 80081be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	887a      	ldrh	r2, [r7, #2]
 80081cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	887a      	ldrh	r2, [r7, #2]
 80081d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 80081f2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a70      	ldr	r2, [pc, #448]	; (80083bc <HAL_SPI_TransmitReceive+0x294>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d009      	beq.n	8008212 <HAL_SPI_TransmitReceive+0xea>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a6f      	ldr	r2, [pc, #444]	; (80083c0 <HAL_SPI_TransmitReceive+0x298>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d004      	beq.n	8008212 <HAL_SPI_TransmitReceive+0xea>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a6d      	ldr	r2, [pc, #436]	; (80083c4 <HAL_SPI_TransmitReceive+0x29c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d102      	bne.n	8008218 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8008212:	2310      	movs	r3, #16
 8008214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008216:	e001      	b.n	800821c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8008218:	2308      	movs	r3, #8
 800821a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	4b69      	ldr	r3, [pc, #420]	; (80083c8 <HAL_SPI_TransmitReceive+0x2a0>)
 8008224:	4013      	ands	r3, r2
 8008226:	8879      	ldrh	r1, [r7, #2]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	6812      	ldr	r2, [r2, #0]
 800822c:	430b      	orrs	r3, r1
 800822e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0201 	orr.w	r2, r2, #1
 800823e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008248:	d107      	bne.n	800825a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008258:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	2b0f      	cmp	r3, #15
 8008260:	f240 80a2 	bls.w	80083a8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8008264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008266:	089b      	lsrs	r3, r3, #2
 8008268:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800826a:	e094      	b.n	8008396 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b02      	cmp	r3, #2
 8008278:	d120      	bne.n	80082bc <HAL_SPI_TransmitReceive+0x194>
 800827a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800827c:	2b00      	cmp	r3, #0
 800827e:	d01d      	beq.n	80082bc <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008280:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008282:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008286:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008288:	429a      	cmp	r2, r3
 800828a:	d217      	bcs.n	80082bc <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6812      	ldr	r2, [r2, #0]
 8008296:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800829c:	1d1a      	adds	r2, r3, #4
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3b01      	subs	r3, #1
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082ba:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80082c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d065      	beq.n	8008396 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d118      	bne.n	800830a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80082e2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e8:	1d1a      	adds	r2, r3, #4
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	3b01      	subs	r3, #1
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008306:	853b      	strh	r3, [r7, #40]	; 0x28
 8008308:	e045      	b.n	8008396 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800830a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800830c:	8bfb      	ldrh	r3, [r7, #30]
 800830e:	429a      	cmp	r2, r3
 8008310:	d21d      	bcs.n	800834e <HAL_SPI_TransmitReceive+0x226>
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d018      	beq.n	800834e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008324:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008326:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800832c:	1d1a      	adds	r2, r3, #4
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	b29a      	uxth	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800834a:	853b      	strh	r3, [r7, #40]	; 0x28
 800834c:	e023      	b.n	8008396 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800834e:	f7f8 ffe9 	bl	8001324 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800835a:	429a      	cmp	r2, r3
 800835c:	d803      	bhi.n	8008366 <HAL_SPI_TransmitReceive+0x23e>
 800835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008364:	d102      	bne.n	800836c <HAL_SPI_TransmitReceive+0x244>
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	2b00      	cmp	r3, #0
 800836a:	d114      	bne.n	8008396 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 fa15 	bl	800879c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008378:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e1fd      	b.n	8008792 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008396:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008398:	2b00      	cmp	r3, #0
 800839a:	f47f af67 	bne.w	800826c <HAL_SPI_TransmitReceive+0x144>
 800839e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f47f af63 	bne.w	800826c <HAL_SPI_TransmitReceive+0x144>
 80083a6:	e1ce      	b.n	8008746 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	2b07      	cmp	r3, #7
 80083ae:	f240 81c2 	bls.w	8008736 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80083b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b4:	085b      	lsrs	r3, r3, #1
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80083b8:	e0c9      	b.n	800854e <HAL_SPI_TransmitReceive+0x426>
 80083ba:	bf00      	nop
 80083bc:	40013000 	.word	0x40013000
 80083c0:	40003800 	.word	0x40003800
 80083c4:	40003c00 	.word	0x40003c00
 80083c8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d11f      	bne.n	800841a <HAL_SPI_TransmitReceive+0x2f2>
 80083da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d01c      	beq.n	800841a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80083e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80083e2:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80083e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d216      	bcs.n	800841a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f0:	881a      	ldrh	r2, [r3, #0]
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083fa:	1c9a      	adds	r2, r3, #2
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008406:	b29b      	uxth	r3, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	b29a      	uxth	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008418:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008422:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 8092 	beq.w	800854e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b01      	cmp	r3, #1
 8008436:	d118      	bne.n	800846a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800843c:	6a3a      	ldr	r2, [r7, #32]
 800843e:	8812      	ldrh	r2, [r2, #0]
 8008440:	b292      	uxth	r2, r2
 8008442:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008448:	1c9a      	adds	r2, r3, #2
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008454:	b29b      	uxth	r3, r3
 8008456:	3b01      	subs	r3, #1
 8008458:	b29a      	uxth	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008466:	853b      	strh	r3, [r7, #40]	; 0x28
 8008468:	e071      	b.n	800854e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800846a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800846c:	8bfb      	ldrh	r3, [r7, #30]
 800846e:	429a      	cmp	r2, r3
 8008470:	d228      	bcs.n	80084c4 <HAL_SPI_TransmitReceive+0x39c>
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d023      	beq.n	80084c4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008480:	6a3a      	ldr	r2, [r7, #32]
 8008482:	8812      	ldrh	r2, [r2, #0]
 8008484:	b292      	uxth	r2, r2
 8008486:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800848c:	1c9a      	adds	r2, r3, #2
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008496:	6a3a      	ldr	r2, [r7, #32]
 8008498:	8812      	ldrh	r2, [r2, #0]
 800849a:	b292      	uxth	r2, r2
 800849c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084a2:	1c9a      	adds	r2, r3, #2
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b02      	subs	r3, #2
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084c0:	853b      	strh	r3, [r7, #40]	; 0x28
 80084c2:	e044      	b.n	800854e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80084c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d11d      	bne.n	8008506 <HAL_SPI_TransmitReceive+0x3de>
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d018      	beq.n	8008506 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084d8:	6a3a      	ldr	r2, [r7, #32]
 80084da:	8812      	ldrh	r2, [r2, #0]
 80084dc:	b292      	uxth	r2, r2
 80084de:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084e4:	1c9a      	adds	r2, r3, #2
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	3b01      	subs	r3, #1
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008502:	853b      	strh	r3, [r7, #40]	; 0x28
 8008504:	e023      	b.n	800854e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008506:	f7f8 ff0d 	bl	8001324 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008512:	429a      	cmp	r2, r3
 8008514:	d803      	bhi.n	800851e <HAL_SPI_TransmitReceive+0x3f6>
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851c:	d102      	bne.n	8008524 <HAL_SPI_TransmitReceive+0x3fc>
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008520:	2b00      	cmp	r3, #0
 8008522:	d114      	bne.n	800854e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f939 	bl	800879c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008530:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e121      	b.n	8008792 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800854e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008550:	2b00      	cmp	r3, #0
 8008552:	f47f af3b 	bne.w	80083cc <HAL_SPI_TransmitReceive+0x2a4>
 8008556:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008558:	2b00      	cmp	r3, #0
 800855a:	f47f af37 	bne.w	80083cc <HAL_SPI_TransmitReceive+0x2a4>
 800855e:	e0f2      	b.n	8008746 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	f003 0302 	and.w	r3, r3, #2
 800856a:	2b02      	cmp	r3, #2
 800856c:	d121      	bne.n	80085b2 <HAL_SPI_TransmitReceive+0x48a>
 800856e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008570:	2b00      	cmp	r3, #0
 8008572:	d01e      	beq.n	80085b2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008574:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008576:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800857c:	429a      	cmp	r2, r3
 800857e:	d218      	bcs.n	80085b2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3320      	adds	r3, #32
 800858a:	7812      	ldrb	r2, [r2, #0]
 800858c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800859e:	b29b      	uxth	r3, r3
 80085a0:	3b01      	subs	r3, #1
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80085b0:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80085ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 80ba 	beq.w	8008736 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d11b      	bne.n	8008608 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085dc:	7812      	ldrb	r2, [r2, #0]
 80085de:	b2d2      	uxtb	r2, r2
 80085e0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	3b01      	subs	r3, #1
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008604:	853b      	strh	r3, [r7, #40]	; 0x28
 8008606:	e096      	b.n	8008736 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008608:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800860a:	8bfb      	ldrh	r3, [r7, #30]
 800860c:	429a      	cmp	r2, r3
 800860e:	d24a      	bcs.n	80086a6 <HAL_SPI_TransmitReceive+0x57e>
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d045      	beq.n	80086a6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008626:	7812      	ldrb	r2, [r2, #0]
 8008628:	b2d2      	uxtb	r2, r2
 800862a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008642:	7812      	ldrb	r2, [r2, #0]
 8008644:	b2d2      	uxtb	r2, r2
 8008646:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800864c:	1c5a      	adds	r2, r3, #1
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800865e:	7812      	ldrb	r2, [r2, #0]
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800867a:	7812      	ldrb	r2, [r2, #0]
 800867c:	b2d2      	uxtb	r2, r2
 800867e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008690:	b29b      	uxth	r3, r3
 8008692:	3b04      	subs	r3, #4
 8008694:	b29a      	uxth	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80086a2:	853b      	strh	r3, [r7, #40]	; 0x28
 80086a4:	e047      	b.n	8008736 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80086a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d820      	bhi.n	80086ee <HAL_SPI_TransmitReceive+0x5c6>
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d01b      	beq.n	80086ee <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086c2:	7812      	ldrb	r2, [r2, #0]
 80086c4:	b2d2      	uxtb	r2, r2
 80086c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086cc:	1c5a      	adds	r2, r3, #1
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80086d8:	b29b      	uxth	r3, r3
 80086da:	3b01      	subs	r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80086ea:	853b      	strh	r3, [r7, #40]	; 0x28
 80086ec:	e023      	b.n	8008736 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086ee:	f7f8 fe19 	bl	8001324 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d803      	bhi.n	8008706 <HAL_SPI_TransmitReceive+0x5de>
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008704:	d102      	bne.n	800870c <HAL_SPI_TransmitReceive+0x5e4>
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	2b00      	cmp	r3, #0
 800870a:	d114      	bne.n	8008736 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 f845 	bl	800879c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008718:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e02d      	b.n	8008792 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008736:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008738:	2b00      	cmp	r3, #0
 800873a:	f47f af11 	bne.w	8008560 <HAL_SPI_TransmitReceive+0x438>
 800873e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008740:	2b00      	cmp	r3, #0
 8008742:	f47f af0d 	bne.w	8008560 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	2200      	movs	r2, #0
 800874e:	2108      	movs	r1, #8
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 f8c3 	bl	80088dc <SPI_WaitOnFlagUntilTimeout>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d007      	beq.n	800876c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008762:	f043 0220 	orr.w	r2, r3, #32
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 f815 	bl	800879c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e000      	b.n	8008792 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8008790:	2300      	movs	r3, #0
  }
}
 8008792:	4618      	mov	r0, r3
 8008794:	3730      	adds	r7, #48	; 0x30
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop

0800879c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699a      	ldr	r2, [r3, #24]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0208 	orr.w	r2, r2, #8
 80087ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 0210 	orr.w	r2, r2, #16
 80087ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f022 0201 	bic.w	r2, r2, #1
 80087da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6919      	ldr	r1, [r3, #16]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	4b3c      	ldr	r3, [pc, #240]	; (80088d8 <SPI_CloseTransfer+0x13c>)
 80087e8:	400b      	ands	r3, r1
 80087ea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689a      	ldr	r2, [r3, #8]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80087fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b04      	cmp	r3, #4
 8008806:	d014      	beq.n	8008832 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00f      	beq.n	8008832 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008818:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	699a      	ldr	r2, [r3, #24]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f042 0220 	orr.w	r2, r2, #32
 8008830:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b03      	cmp	r3, #3
 800883c:	d014      	beq.n	8008868 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00f      	beq.n	8008868 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800884e:	f043 0204 	orr.w	r2, r3, #4
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	699a      	ldr	r2, [r3, #24]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008866:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00f      	beq.n	8008892 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008878:	f043 0201 	orr.w	r2, r3, #1
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	699a      	ldr	r2, [r3, #24]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008890:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00f      	beq.n	80088bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088a2:	f043 0208 	orr.w	r2, r3, #8
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699a      	ldr	r2, [r3, #24]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80088cc:	bf00      	nop
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	fffffc90 	.word	0xfffffc90

080088dc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	603b      	str	r3, [r7, #0]
 80088e8:	4613      	mov	r3, r2
 80088ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80088ec:	e010      	b.n	8008910 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ee:	f7f8 fd19 	bl	8001324 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d803      	bhi.n	8008906 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008904:	d102      	bne.n	800890c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d101      	bne.n	8008910 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e00f      	b.n	8008930 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	695a      	ldr	r2, [r3, #20]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	4013      	ands	r3, r2
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	429a      	cmp	r2, r3
 800891e:	bf0c      	ite	eq
 8008920:	2301      	moveq	r3, #1
 8008922:	2300      	movne	r3, #0
 8008924:	b2db      	uxtb	r3, r3
 8008926:	461a      	mov	r2, r3
 8008928:	79fb      	ldrb	r3, [r7, #7]
 800892a:	429a      	cmp	r2, r3
 800892c:	d0df      	beq.n	80088ee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008944:	095b      	lsrs	r3, r3, #5
 8008946:	3301      	adds	r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	3301      	adds	r3, #1
 8008950:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	3307      	adds	r3, #7
 8008956:	08db      	lsrs	r3, r3, #3
 8008958:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
	...

08008970 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d121      	bne.n	80089c6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	4b27      	ldr	r3, [pc, #156]	; (8008a24 <FMC_SDRAM_Init+0xb4>)
 8008988:	4013      	ands	r3, r2
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	6851      	ldr	r1, [r2, #4]
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	6892      	ldr	r2, [r2, #8]
 8008992:	4311      	orrs	r1, r2
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	68d2      	ldr	r2, [r2, #12]
 8008998:	4311      	orrs	r1, r2
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	6912      	ldr	r2, [r2, #16]
 800899e:	4311      	orrs	r1, r2
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	6952      	ldr	r2, [r2, #20]
 80089a4:	4311      	orrs	r1, r2
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	6992      	ldr	r2, [r2, #24]
 80089aa:	4311      	orrs	r1, r2
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	69d2      	ldr	r2, [r2, #28]
 80089b0:	4311      	orrs	r1, r2
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	6a12      	ldr	r2, [r2, #32]
 80089b6:	4311      	orrs	r1, r2
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089bc:	430a      	orrs	r2, r1
 80089be:	431a      	orrs	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	e026      	b.n	8008a14 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	69d9      	ldr	r1, [r3, #28]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	4319      	orrs	r1, r3
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089dc:	430b      	orrs	r3, r1
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	4b0e      	ldr	r3, [pc, #56]	; (8008a24 <FMC_SDRAM_Init+0xb4>)
 80089ea:	4013      	ands	r3, r2
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	6851      	ldr	r1, [r2, #4]
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	6892      	ldr	r2, [r2, #8]
 80089f4:	4311      	orrs	r1, r2
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	68d2      	ldr	r2, [r2, #12]
 80089fa:	4311      	orrs	r1, r2
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	6912      	ldr	r2, [r2, #16]
 8008a00:	4311      	orrs	r1, r2
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	6952      	ldr	r2, [r2, #20]
 8008a06:	4311      	orrs	r1, r2
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	6992      	ldr	r2, [r2, #24]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	ffff8000 	.word	0xffff8000

08008a28 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d128      	bne.n	8008a8c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	1e59      	subs	r1, r3, #1
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	4319      	orrs	r1, r3
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	3b01      	subs	r3, #1
 8008a58:	021b      	lsls	r3, r3, #8
 8008a5a:	4319      	orrs	r1, r3
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	3b01      	subs	r3, #1
 8008a62:	031b      	lsls	r3, r3, #12
 8008a64:	4319      	orrs	r1, r3
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	041b      	lsls	r3, r3, #16
 8008a6e:	4319      	orrs	r1, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	3b01      	subs	r3, #1
 8008a76:	051b      	lsls	r3, r3, #20
 8008a78:	4319      	orrs	r1, r3
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	061b      	lsls	r3, r3, #24
 8008a82:	430b      	orrs	r3, r1
 8008a84:	431a      	orrs	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	609a      	str	r2, [r3, #8]
 8008a8a:	e02d      	b.n	8008ae8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	689a      	ldr	r2, [r3, #8]
 8008a90:	4b19      	ldr	r3, [pc, #100]	; (8008af8 <FMC_SDRAM_Timing_Init+0xd0>)
 8008a92:	4013      	ands	r3, r2
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	68d2      	ldr	r2, [r2, #12]
 8008a98:	3a01      	subs	r2, #1
 8008a9a:	0311      	lsls	r1, r2, #12
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	6952      	ldr	r2, [r2, #20]
 8008aa0:	3a01      	subs	r2, #1
 8008aa2:	0512      	lsls	r2, r2, #20
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	1e59      	subs	r1, r3, #1
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	011b      	lsls	r3, r3, #4
 8008ac2:	4319      	orrs	r1, r3
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	021b      	lsls	r3, r3, #8
 8008acc:	4319      	orrs	r1, r3
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	041b      	lsls	r3, r3, #16
 8008ad6:	4319      	orrs	r1, r3
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	061b      	lsls	r3, r3, #24
 8008ae0:	430b      	orrs	r3, r1
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	ff0f0fff 	.word	0xff0f0fff

08008afc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	691a      	ldr	r2, [r3, #16]
 8008b0c:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <FMC_SDRAM_SendCommand+0x44>)
 8008b0e:	4013      	ands	r3, r2
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	6811      	ldr	r1, [r2, #0]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	6852      	ldr	r2, [r2, #4]
 8008b18:	4311      	orrs	r1, r2
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	6892      	ldr	r2, [r2, #8]
 8008b1e:	3a01      	subs	r2, #1
 8008b20:	0152      	lsls	r2, r2, #5
 8008b22:	4311      	orrs	r1, r2
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	68d2      	ldr	r2, [r2, #12]
 8008b28:	0252      	lsls	r2, r2, #9
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	ffc00000 	.word	0xffc00000

08008b44 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	695a      	ldr	r2, [r3, #20]
 8008b52:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8008b54:	4013      	ands	r3, r2
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	0052      	lsls	r2, r2, #1
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	ffffc001 	.word	0xffffc001

08008b74 <memset>:
 8008b74:	4402      	add	r2, r0
 8008b76:	4603      	mov	r3, r0
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d100      	bne.n	8008b7e <memset+0xa>
 8008b7c:	4770      	bx	lr
 8008b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b82:	e7f9      	b.n	8008b78 <memset+0x4>

08008b84 <__libc_init_array>:
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	4d0d      	ldr	r5, [pc, #52]	; (8008bbc <__libc_init_array+0x38>)
 8008b88:	4c0d      	ldr	r4, [pc, #52]	; (8008bc0 <__libc_init_array+0x3c>)
 8008b8a:	1b64      	subs	r4, r4, r5
 8008b8c:	10a4      	asrs	r4, r4, #2
 8008b8e:	2600      	movs	r6, #0
 8008b90:	42a6      	cmp	r6, r4
 8008b92:	d109      	bne.n	8008ba8 <__libc_init_array+0x24>
 8008b94:	4d0b      	ldr	r5, [pc, #44]	; (8008bc4 <__libc_init_array+0x40>)
 8008b96:	4c0c      	ldr	r4, [pc, #48]	; (8008bc8 <__libc_init_array+0x44>)
 8008b98:	f000 f818 	bl	8008bcc <_init>
 8008b9c:	1b64      	subs	r4, r4, r5
 8008b9e:	10a4      	asrs	r4, r4, #2
 8008ba0:	2600      	movs	r6, #0
 8008ba2:	42a6      	cmp	r6, r4
 8008ba4:	d105      	bne.n	8008bb2 <__libc_init_array+0x2e>
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
 8008ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bac:	4798      	blx	r3
 8008bae:	3601      	adds	r6, #1
 8008bb0:	e7ee      	b.n	8008b90 <__libc_init_array+0xc>
 8008bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bb6:	4798      	blx	r3
 8008bb8:	3601      	adds	r6, #1
 8008bba:	e7f2      	b.n	8008ba2 <__libc_init_array+0x1e>
 8008bbc:	08008bfc 	.word	0x08008bfc
 8008bc0:	08008bfc 	.word	0x08008bfc
 8008bc4:	08008bfc 	.word	0x08008bfc
 8008bc8:	08008c00 	.word	0x08008c00

08008bcc <_init>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	bf00      	nop
 8008bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd2:	bc08      	pop	{r3}
 8008bd4:	469e      	mov	lr, r3
 8008bd6:	4770      	bx	lr

08008bd8 <_fini>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr
