
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b0  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800867c  0800867c  0001867c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008694  08008694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008698  08008698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800869c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000035c  24000010  080086ac  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400036c  080086ac  0002036c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ddc9  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000020fd  00000000  00000000  0002de4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b90  00000000  00000000  0002ff48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008c7  00000000  00000000  00030ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031b5c  00000000  00000000  0003139f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001080a  00000000  00000000  00062efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013ee90  00000000  00000000  00073705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00002f14  00000000  00000000  001b2598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000063  00000000  00000000  001b54ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08008664 	.word	0x08008664

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08008664 	.word	0x08008664

0800030c <ad1939_write_reg>:
#include "AD1939_driver.h"


// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af02      	add	r7, sp, #8
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
	int8_t retval = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	73fb      	strb	r3, [r7, #15]
	TXdata[0] = AD1939_Global_Address_Write;
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <ad1939_write_reg+0x4c>)
 8000322:	2208      	movs	r2, #8
 8000324:	701a      	strb	r2, [r3, #0]
	TXdata[1] = reg_address;
 8000326:	4a0c      	ldr	r2, [pc, #48]	; (8000358 <ad1939_write_reg+0x4c>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	7053      	strb	r3, [r2, #1]
	TXdata[2] = data;
 800032c:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <ad1939_write_reg+0x4c>)
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	7093      	strb	r3, [r2, #2]

//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <ad1939_write_reg+0x50>)
 8000334:	6818      	ldr	r0, [r3, #0]
 8000336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2303      	movs	r3, #3
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <ad1939_write_reg+0x54>)
 8000340:	4905      	ldr	r1, [pc, #20]	; (8000358 <ad1939_write_reg+0x4c>)
 8000342:	f007 fd3f 	bl	8007dc4 <HAL_SPI_TransmitReceive>
 8000346:	4603      	mov	r3, r0
 8000348:	73fb      	strb	r3, [r7, #15]
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 //HAL_Delay(10);
	return retval;
 800034a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	24000030 	.word	0x24000030
 800035c:	2400002c 	.word	0x2400002c
 8000360:	24000034 	.word	0x24000034

08000364 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af02      	add	r7, sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <ad1939_pll_locked+0x3c>)
 800036c:	2209      	movs	r2, #9
 800036e:	701a      	strb	r2, [r3, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000372:	2201      	movs	r2, #1
 8000374:	705a      	strb	r2, [r3, #1]
	TXdata[2] = 0b00000100;
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000378:	2204      	movs	r2, #4
 800037a:	709a      	strb	r2, [r3, #2]
	HAL_Delay(10);
 800037c:	200a      	movs	r0, #10
 800037e:	f000 fe4d 	bl	800101c <HAL_Delay>
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <ad1939_pll_locked+0x40>)
 8000384:	6818      	ldr	r0, [r3, #0]
 8000386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2303      	movs	r3, #3
 800038e:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <ad1939_pll_locked+0x44>)
 8000390:	4903      	ldr	r1, [pc, #12]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000392:	f007 fd17 	bl	8007dc4 <HAL_SPI_TransmitReceive>
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 return 0;
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	24000030 	.word	0x24000030
 80003a4:	2400002c 	.word	0x2400002c
 80003a8:	24000034 	.word	0x24000034

080003ac <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
    AD1939_spi = hspi_codec;
 80003b4:	4a3d      	ldr	r2, [pc, #244]	; (80004ac <ad1939_init+0x100>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6013      	str	r3, [r2, #0]

    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 80003ba:	21be      	movs	r1, #190	; 0xbe
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff ffa5 	bl	800030c <ad1939_write_reg>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d002      	beq.n	80003ce <ad1939_init+0x22>
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295
 80003cc:	e069      	b.n	80004a2 <ad1939_init+0xf6>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 80003ce:	2104      	movs	r1, #4
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff9b 	bl	800030c <ad1939_write_reg>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d002      	beq.n	80003e2 <ad1939_init+0x36>
 80003dc:	f04f 33ff 	mov.w	r3, #4294967295
 80003e0:	e05f      	b.n	80004a2 <ad1939_init+0xf6>





    HAL_Delay(100);
 80003e2:	2064      	movs	r0, #100	; 0x64
 80003e4:	f000 fe1a 	bl	800101c <HAL_Delay>

    if(ad1939_pll_locked()){
 80003e8:	f7ff ffbc 	bl	8000364 <ad1939_pll_locked>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b01000000)) return -1;
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	2002      	movs	r0, #2
 80003f0:	f7ff ff8c 	bl	800030c <ad1939_write_reg>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d002      	beq.n	8000400 <ad1939_init+0x54>
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
 80003fe:	e050      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000100)) return -1; // Slave setup
 8000400:	2104      	movs	r1, #4
 8000402:	2003      	movs	r0, #3
 8000404:	f7ff ff82 	bl	800030c <ad1939_write_reg>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <ad1939_init+0x68>
 800040e:	f04f 33ff 	mov.w	r3, #4294967295
 8000412:	e046      	b.n	80004a2 <ad1939_init+0xf6>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 8000414:	2100      	movs	r1, #0
 8000416:	2004      	movs	r0, #4
 8000418:	f7ff ff78 	bl	800030c <ad1939_write_reg>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d002      	beq.n	8000428 <ad1939_init+0x7c>
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	e03c      	b.n	80004a2 <ad1939_init+0xf6>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 8000428:	2100      	movs	r1, #0
 800042a:	2005      	movs	r0, #5
 800042c:	f7ff ff6e 	bl	800030c <ad1939_write_reg>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d002      	beq.n	800043c <ad1939_init+0x90>
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
 800043a:	e032      	b.n	80004a2 <ad1939_init+0xf6>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 800043c:	2100      	movs	r1, #0
 800043e:	2008      	movs	r0, #8
 8000440:	f7ff ff64 	bl	800030c <ad1939_write_reg>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d002      	beq.n	8000450 <ad1939_init+0xa4>
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
 800044e:	e028      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 8000450:	2100      	movs	r1, #0
 8000452:	2009      	movs	r0, #9
 8000454:	f7ff ff5a 	bl	800030c <ad1939_write_reg>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d002      	beq.n	8000464 <ad1939_init+0xb8>
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	e01e      	b.n	80004a2 <ad1939_init+0xf6>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000464:	2100      	movs	r1, #0
 8000466:	200e      	movs	r0, #14
 8000468:	f7ff ff50 	bl	800030c <ad1939_write_reg>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d002      	beq.n	8000478 <ad1939_init+0xcc>
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	e014      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0b00100000 )) return -1;
 8000478:	2120      	movs	r1, #32
 800047a:	200f      	movs	r0, #15
 800047c:	f7ff ff46 	bl	800030c <ad1939_write_reg>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <ad1939_init+0xe0>
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e00a      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 800048c:	2100      	movs	r1, #0
 800048e:	2010      	movs	r0, #16
 8000490:	f7ff ff3c 	bl	800030c <ad1939_write_reg>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d002      	beq.n	80004a0 <ad1939_init+0xf4>
 800049a:	f04f 33ff 	mov.w	r3, #4294967295
 800049e:	e000      	b.n	80004a2 <ad1939_init+0xf6>



    return 0; // Return 0 if all writes are successful
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	2400002c 	.word	0x2400002c

080004b0 <HAL_SAI_TxCpltCallback>:
volatile uint8_t 			ADC_HALF_COMPLETE_FLAG = 0;
volatile uint8_t 			DAC_HALF_COMPLETE_FLAG = 0;
volatile uint32_t input_i2s_buffer_au32[16];
volatile uint32_t output_i2s_buffer_au32[16];

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 0;
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <HAL_SAI_TxCpltCallback+0x1c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	240002e1 	.word	0x240002e1

080004d0 <HAL_SAI_TxHalfCpltCallback>:
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 1;
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <HAL_SAI_TxHalfCpltCallback+0x1c>)
 80004da:	2201      	movs	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	240002e1 	.word	0x240002e1

080004f0 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 0;
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <HAL_SAI_RxCpltCallback+0x2c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
	output_i2s_buffer_au32[14] = input_i2s_buffer_au32[10];
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_SAI_RxCpltCallback+0x30>)
 8000500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000502:	4a08      	ldr	r2, [pc, #32]	; (8000524 <HAL_SAI_RxCpltCallback+0x34>)
 8000504:	6393      	str	r3, [r2, #56]	; 0x38
	output_i2s_buffer_au32[15] = input_i2s_buffer_au32[11];
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_SAI_RxCpltCallback+0x30>)
 8000508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050a:	4a06      	ldr	r2, [pc, #24]	; (8000524 <HAL_SAI_RxCpltCallback+0x34>)
 800050c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	240002e0 	.word	0x240002e0
 8000520:	240002e4 	.word	0x240002e4
 8000524:	24000324 	.word	0x24000324

08000528 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 1;
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_SAI_RxHalfCpltCallback+0x2c>)
 8000532:	2201      	movs	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
	output_i2s_buffer_au32[6] = input_i2s_buffer_au32[2];
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_SAI_RxHalfCpltCallback+0x30>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <HAL_SAI_RxHalfCpltCallback+0x34>)
 800053c:	6193      	str	r3, [r2, #24]
	output_i2s_buffer_au32[7] = input_i2s_buffer_au32[3];
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_SAI_RxHalfCpltCallback+0x30>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	4a06      	ldr	r2, [pc, #24]	; (800055c <HAL_SAI_RxHalfCpltCallback+0x34>)
 8000544:	61d3      	str	r3, [r2, #28]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	240002e0 	.word	0x240002e0
 8000558:	240002e4 	.word	0x240002e4
 800055c:	24000324 	.word	0x24000324

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000564:	f000 fa28 	bl	80009b8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fcc6 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f822 	bl	80005b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000570:	f000 f88e 	bl	8000690 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f9ae 	bl	80008d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000578:	f000 f974 	bl	8000864 <MX_DMA_Init>
  MX_SAI1_Init();
 800057c:	f000 f8bc 	bl	80006f8 <MX_SAI1_Init>
  MX_SPI1_Init();
 8000580:	f000 f91a 	bl	80007b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // init SAI interface
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, output_i2s_buffer_au32, 	16);
 8000584:	2210      	movs	r2, #16
 8000586:	4906      	ldr	r1, [pc, #24]	; (80005a0 <main+0x40>)
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <main+0x44>)
 800058a:	f006 ff51 	bl	8007430 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, input_i2s_buffer_au32, 	16);
 800058e:	2210      	movs	r2, #16
 8000590:	4905      	ldr	r1, [pc, #20]	; (80005a8 <main+0x48>)
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <main+0x4c>)
 8000594:	f007 f802 	bl	800759c <HAL_SAI_Receive_DMA>

  // init CODEC
	ad1939_init(&hspi1);
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <main+0x50>)
 800059a:	f7ff ff07 	bl	80003ac <ad1939_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059e:	e7fe      	b.n	800059e <main+0x3e>
 80005a0:	24000324 	.word	0x24000324
 80005a4:	24000038 	.word	0x24000038
 80005a8:	240002e4 	.word	0x240002e4
 80005ac:	240000d0 	.word	0x240000d0
 80005b0:	24000258 	.word	0x24000258

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b09c      	sub	sp, #112	; 0x70
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005be:	224c      	movs	r2, #76	; 0x4c
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f008 f821 	bl	800860a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2220      	movs	r2, #32
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f008 f81b 	bl	800860a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80005d4:	2002      	movs	r0, #2
 80005d6:	f003 f96f 	bl	80038b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <SystemClock_Config+0xd8>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a2a      	ldr	r2, [pc, #168]	; (800068c <SystemClock_Config+0xd8>)
 80005e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xd8>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f6:	bf00      	nop
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <SystemClock_Config+0xd8>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000604:	d1f8      	bne.n	80005f8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000606:	2301      	movs	r3, #1
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000614:	2302      	movs	r3, #2
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800061c:	232c      	movs	r3, #44	; 0x2c
 800061e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000620:	2301      	movs	r3, #1
 8000622:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800062c:	230c      	movs	r3, #12
 800062e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000630:	2300      	movs	r3, #0
 8000632:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063c:	4618      	mov	r0, r3
 800063e:	f003 f975 	bl	800392c <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000648:	f000 f9e2 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	233f      	movs	r3, #63	; 0x3f
 800064e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2303      	movs	r3, #3
 8000652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000658:	2308      	movs	r3, #8
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800065c:	2340      	movs	r3, #64	; 0x40
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000660:	2340      	movs	r3, #64	; 0x40
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000668:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800066a:	2340      	movs	r3, #64	; 0x40
 800066c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2103      	movs	r1, #3
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fd34 	bl	80040e0 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800067e:	f000 f9c7 	bl	8000a10 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3770      	adds	r7, #112	; 0x70
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	58024800 	.word	0x58024800

08000690 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b0ae      	sub	sp, #184	; 0xb8
 8000694:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	22b8      	movs	r2, #184	; 0xb8
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f007 ffb4 	bl	800860a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 80006a2:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 80006b2:	230f      	movs	r3, #15
 80006b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80006c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 80006cc:	f640 3386 	movw	r3, #2950	; 0xb86
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 80006d2:	2302      	movs	r3, #2
 80006d4:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80006d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006da:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 f874 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 80006ea:	f000 f991 	bl	8000a10 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	37b8      	adds	r7, #184	; 0xb8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80006fc:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <MX_SAI1_Init+0xb0>)
 80006fe:	4a2b      	ldr	r2, [pc, #172]	; (80007ac <MX_SAI1_Init+0xb4>)
 8000700:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000702:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <MX_SAI1_Init+0xb0>)
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000708:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <MX_SAI1_Init+0xb0>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <MX_SAI1_Init+0xb0>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <MX_SAI1_Init+0xb0>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <MX_SAI1_Init+0xb0>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_SAI1_Init+0xb0>)
 8000722:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000726:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_SAI1_Init+0xb0>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_SAI1_Init+0xb0>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_SAI1_Init+0xb0>)
 8000736:	2200      	movs	r2, #0
 8000738:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_SAI1_Init+0xb0>)
 800073c:	2200      	movs	r2, #0
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8000740:	2308      	movs	r3, #8
 8000742:	2202      	movs	r2, #2
 8000744:	2100      	movs	r1, #0
 8000746:	4818      	ldr	r0, [pc, #96]	; (80007a8 <MX_SAI1_Init+0xb0>)
 8000748:	f006 fc26 	bl	8006f98 <HAL_SAI_InitProtocol>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000752:	f000 f95d 	bl	8000a10 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_SAI1_Init+0xb8>)
 8000758:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <MX_SAI1_Init+0xbc>)
 800075a:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_SAI1_Init+0xb8>)
 800075e:	2203      	movs	r2, #3
 8000760:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_SAI1_Init+0xb8>)
 8000764:	2201      	movs	r2, #1
 8000766:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_SAI1_Init+0xb8>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_SAI1_Init+0xb8>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_SAI1_Init+0xb8>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_SAI1_Init+0xb8>)
 800077c:	2200      	movs	r2, #0
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_SAI1_Init+0xb8>)
 8000782:	2200      	movs	r2, #0
 8000784:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_SAI1_Init+0xb8>)
 8000788:	2200      	movs	r2, #0
 800078a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 800078c:	2308      	movs	r3, #8
 800078e:	2202      	movs	r2, #2
 8000790:	2100      	movs	r1, #0
 8000792:	4807      	ldr	r0, [pc, #28]	; (80007b0 <MX_SAI1_Init+0xb8>)
 8000794:	f006 fc00 	bl	8006f98 <HAL_SAI_InitProtocol>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 800079e:	f000 f937 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	24000038 	.word	0x24000038
 80007ac:	40015804 	.word	0x40015804
 80007b0:	240000d0 	.word	0x240000d0
 80007b4:	40015824 	.word	0x40015824

080007b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <MX_SPI1_Init+0xa4>)
 80007be:	4a28      	ldr	r2, [pc, #160]	; (8000860 <MX_SPI1_Init+0xa8>)
 80007c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <MX_SPI1_Init+0xa4>)
 80007c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <MX_SPI1_Init+0xa4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <MX_SPI1_Init+0xa4>)
 80007d2:	2207      	movs	r2, #7
 80007d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <MX_SPI1_Init+0xa4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_SPI1_Init+0xa4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_SPI1_Init+0xa4>)
 80007e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80007e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_SPI1_Init+0xa4>)
 80007ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_SPI1_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_SPI1_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_SPI1_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_SPI1_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_SPI1_Init+0xa4>)
 800080c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_SPI1_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_SPI1_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_SPI1_Init+0xa4>)
 8000820:	2200      	movs	r2, #0
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MX_SPI1_Init+0xa4>)
 8000826:	2200      	movs	r2, #0
 8000828:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_SPI1_Init+0xa4>)
 800082c:	2200      	movs	r2, #0
 800082e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_SPI1_Init+0xa4>)
 8000832:	2200      	movs	r2, #0
 8000834:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_SPI1_Init+0xa4>)
 8000838:	2200      	movs	r2, #0
 800083a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_SPI1_Init+0xa4>)
 800083e:	2200      	movs	r2, #0
 8000840:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_SPI1_Init+0xa4>)
 8000844:	2200      	movs	r2, #0
 8000846:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_SPI1_Init+0xa4>)
 800084a:	f007 f997 	bl	8007b7c <HAL_SPI_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000854:	f000 f8dc 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	24000258 	.word	0x24000258
 8000860:	40013000 	.word	0x40013000

08000864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_DMA_Init+0x6c>)
 800086c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000870:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <MX_DMA_Init+0x6c>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_DMA_Init+0x6c>)
 800087c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_DMA_Init+0x6c>)
 800088a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <MX_DMA_Init+0x6c>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000898:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_DMA_Init+0x6c>)
 800089a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	200b      	movs	r0, #11
 80008ac:	f000 fcb5 	bl	800121a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008b0:	200b      	movs	r0, #11
 80008b2:	f000 fccc 	bl	800124e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2038      	movs	r0, #56	; 0x38
 80008bc:	f000 fcad 	bl	800121a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008c0:	2038      	movs	r0, #56	; 0x38
 80008c2:	f000 fcc4 	bl	800124e <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	58024400 	.word	0x58024400

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ea:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <MX_GPIO_Init+0xdc>)
 80008ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f0:	4a2f      	ldr	r2, [pc, #188]	; (80009b0 <MX_GPIO_Init+0xdc>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <MX_GPIO_Init+0xdc>)
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000900:	f003 0310 	and.w	r3, r3, #16
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <MX_GPIO_Init+0xdc>)
 800090a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090e:	4a28      	ldr	r2, [pc, #160]	; (80009b0 <MX_GPIO_Init+0xdc>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000918:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <MX_GPIO_Init+0xdc>)
 800091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_GPIO_Init+0xdc>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	4a20      	ldr	r2, [pc, #128]	; (80009b0 <MX_GPIO_Init+0xdc>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <MX_GPIO_Init+0xdc>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_GPIO_Init+0xdc>)
 8000946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094a:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <MX_GPIO_Init+0xdc>)
 800094c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_GPIO_Init+0xdc>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_GPIO_Init+0xdc>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <MX_GPIO_Init+0xdc>)
 800096a:	f043 0308 	orr.w	r3, r3, #8
 800096e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_GPIO_Init+0xdc>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	f003 0308 	and.w	r3, r3, #8
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2120      	movs	r1, #32
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <MX_GPIO_Init+0xe0>)
 8000986:	f002 ff7d 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800098a:	2320      	movs	r3, #32
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000992:	2301      	movs	r3, #1
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_GPIO_Init+0xe0>)
 80009a2:	f002 fdc7 	bl	8003534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	58024400 	.word	0x58024400
 80009b4:	58021800 	.word	0x58021800

080009b8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009be:	463b      	mov	r3, r7
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009ca:	f000 fc5b 	bl	8001284 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009ce:	2301      	movs	r3, #1
 80009d0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009da:	231f      	movs	r3, #31
 80009dc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80009de:	2387      	movs	r3, #135	; 0x87
 80009e0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009e6:	2300      	movs	r3, #0
 80009e8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009ea:	2301      	movs	r3, #1
 80009ec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009ee:	2301      	movs	r3, #1
 80009f0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009fa:	463b      	mov	r3, r7
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fc79 	bl	80012f4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a02:	2004      	movs	r0, #4
 8000a04:	f000 fc56 	bl	80012b4 <HAL_MPU_Enable>

}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_MspInit+0x30>)
 8000a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a28:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_MspInit+0x30>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_MspInit+0x30>)
 8000a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	58024400 	.word	0x58024400

08000a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a3a      	ldr	r2, [pc, #232]	; (8000b58 <HAL_SPI_MspInit+0x108>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d16d      	bne.n	8000b4e <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a72:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <HAL_SPI_MspInit+0x10c>)
 8000a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a78:	4a38      	ldr	r2, [pc, #224]	; (8000b5c <HAL_SPI_MspInit+0x10c>)
 8000a7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000a82:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <HAL_SPI_MspInit+0x10c>)
 8000a84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a8c:	61bb      	str	r3, [r7, #24]
 8000a8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <HAL_SPI_MspInit+0x10c>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	4a31      	ldr	r2, [pc, #196]	; (8000b5c <HAL_SPI_MspInit+0x10c>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa0:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <HAL_SPI_MspInit+0x10c>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_SPI_MspInit+0x10c>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab4:	4a29      	ldr	r2, [pc, #164]	; (8000b5c <HAL_SPI_MspInit+0x10c>)
 8000ab6:	f043 0308 	orr.w	r3, r3, #8
 8000aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abe:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <HAL_SPI_MspInit+0x10c>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000acc:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <HAL_SPI_MspInit+0x10c>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad2:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <HAL_SPI_MspInit+0x10c>)
 8000ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <HAL_SPI_MspInit+0x10c>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 8000aea:	f248 0340 	movw	r3, #32832	; 0x8040
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000afc:	2305      	movs	r3, #5
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4816      	ldr	r0, [pc, #88]	; (8000b60 <HAL_SPI_MspInit+0x110>)
 8000b08:	f002 fd14 	bl	8003534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	480f      	ldr	r0, [pc, #60]	; (8000b64 <HAL_SPI_MspInit+0x114>)
 8000b28:	f002 fd04 	bl	8003534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b3e:	2305      	movs	r3, #5
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <HAL_SPI_MspInit+0x118>)
 8000b4a:	f002 fcf3 	bl	8003534 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3730      	adds	r7, #48	; 0x30
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40013000 	.word	0x40013000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020000 	.word	0x58020000
 8000b64:	58020c00 	.word	0x58020c00
 8000b68:	58021800 	.word	0x58021800

08000b6c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a66      	ldr	r2, [pc, #408]	; (8000d14 <HAL_SAI_MspInit+0x1a8>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d160      	bne.n	8000c40 <HAL_SAI_MspInit+0xd4>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8000b7e:	4b66      	ldr	r3, [pc, #408]	; (8000d18 <HAL_SAI_MspInit+0x1ac>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d10e      	bne.n	8000ba4 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000b86:	4b65      	ldr	r3, [pc, #404]	; (8000d1c <HAL_SAI_MspInit+0x1b0>)
 8000b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b8c:	4a63      	ldr	r2, [pc, #396]	; (8000d1c <HAL_SAI_MspInit+0x1b0>)
 8000b8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000b96:	4b61      	ldr	r3, [pc, #388]	; (8000d1c <HAL_SAI_MspInit+0x1b0>)
 8000b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8000ba4:	4b5c      	ldr	r3, [pc, #368]	; (8000d18 <HAL_SAI_MspInit+0x1ac>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	4a5b      	ldr	r2, [pc, #364]	; (8000d18 <HAL_SAI_MspInit+0x1ac>)
 8000bac:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000bae:	2370      	movs	r3, #112	; 0x70
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4855      	ldr	r0, [pc, #340]	; (8000d20 <HAL_SAI_MspInit+0x1b4>)
 8000bca:	f002 fcb3 	bl	8003534 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8000bce:	4b55      	ldr	r3, [pc, #340]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000bd0:	4a55      	ldr	r2, [pc, #340]	; (8000d28 <HAL_SAI_MspInit+0x1bc>)
 8000bd2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8000bd4:	4b53      	ldr	r3, [pc, #332]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000bd6:	2257      	movs	r2, #87	; 0x57
 8000bd8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bda:	4b52      	ldr	r3, [pc, #328]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be0:	4b50      	ldr	r3, [pc, #320]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8000be6:	4b4f      	ldr	r3, [pc, #316]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000be8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bec:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bee:	4b4d      	ldr	r3, [pc, #308]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bf4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bf6:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000bf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bfc:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000bfe:	4b49      	ldr	r3, [pc, #292]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c04:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c06:	4b47      	ldr	r3, [pc, #284]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000c08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c0c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0e:	4b45      	ldr	r3, [pc, #276]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000c14:	4843      	ldr	r0, [pc, #268]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000c16:	f000 fbad 	bl	8001374 <HAL_DMA_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000c20:	f7ff fef6 	bl	8000a10 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a3f      	ldr	r2, [pc, #252]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000c2c:	4a3d      	ldr	r2, [pc, #244]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a3b      	ldr	r2, [pc, #236]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000c36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000c3a:	4a3a      	ldr	r2, [pc, #232]	; (8000d24 <HAL_SAI_MspInit+0x1b8>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <HAL_SAI_MspInit+0x1c0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d160      	bne.n	8000d0c <HAL_SAI_MspInit+0x1a0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8000c4a:	4b33      	ldr	r3, [pc, #204]	; (8000d18 <HAL_SAI_MspInit+0x1ac>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10e      	bne.n	8000c70 <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <HAL_SAI_MspInit+0x1b0>)
 8000c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c58:	4a30      	ldr	r2, [pc, #192]	; (8000d1c <HAL_SAI_MspInit+0x1b0>)
 8000c5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c62:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <HAL_SAI_MspInit+0x1b0>)
 8000c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8000c70:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <HAL_SAI_MspInit+0x1ac>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	4a28      	ldr	r2, [pc, #160]	; (8000d18 <HAL_SAI_MspInit+0x1ac>)
 8000c78:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000c8a:	2306      	movs	r3, #6
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4822      	ldr	r0, [pc, #136]	; (8000d20 <HAL_SAI_MspInit+0x1b4>)
 8000c96:	f002 fc4d 	bl	8003534 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 8000c9a:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000c9c:	4a25      	ldr	r2, [pc, #148]	; (8000d34 <HAL_SAI_MspInit+0x1c8>)
 8000c9e:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000ca2:	2258      	movs	r2, #88	; 0x58
 8000ca4:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cac:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb8:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000cbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cc0:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000cc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cc8:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd0:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000cd4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cd8:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8000ce0:	4813      	ldr	r0, [pc, #76]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000ce2:	f000 fb47 	bl	8001374 <HAL_DMA_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 8000cec:	f7ff fe90 	bl	8000a10 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_SAI_MspInit+0x1c4>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40015804 	.word	0x40015804
 8000d18:	24000364 	.word	0x24000364
 8000d1c:	58024400 	.word	0x58024400
 8000d20:	58021000 	.word	0x58021000
 8000d24:	24000168 	.word	0x24000168
 8000d28:	40020010 	.word	0x40020010
 8000d2c:	40015824 	.word	0x40015824
 8000d30:	240001e0 	.word	0x240001e0
 8000d34:	40020410 	.word	0x40020410

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 f92a 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <DMA1_Stream0_IRQHandler+0x10>)
 8000d92:	f001 f8b1 	bl	8001ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	24000168 	.word	0x24000168

08000da0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <DMA2_Stream0_IRQHandler+0x10>)
 8000da6:	f001 f8a7 	bl	8001ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	240001e0 	.word	0x240001e0

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000db8:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <SystemInit+0xd0>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <SystemInit+0xd0>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <SystemInit+0xd4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	2b06      	cmp	r3, #6
 8000dd2:	d807      	bhi.n	8000de4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dd4:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <SystemInit+0xd4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 030f 	bic.w	r3, r3, #15
 8000ddc:	4a2a      	ldr	r2, [pc, #168]	; (8000e88 <SystemInit+0xd4>)
 8000dde:	f043 0307 	orr.w	r3, r3, #7
 8000de2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000de4:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <SystemInit+0xd8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a28      	ldr	r2, [pc, #160]	; (8000e8c <SystemInit+0xd8>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000df0:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <SystemInit+0xd8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000df6:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <SystemInit+0xd8>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4924      	ldr	r1, [pc, #144]	; (8000e8c <SystemInit+0xd8>)
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <SystemInit+0xdc>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <SystemInit+0xd4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d007      	beq.n	8000e1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <SystemInit+0xd4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f023 030f 	bic.w	r3, r3, #15
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <SystemInit+0xd4>)
 8000e18:	f043 0307 	orr.w	r3, r3, #7
 8000e1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <SystemInit+0xd8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <SystemInit+0xd8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <SystemInit+0xd8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <SystemInit+0xd8>)
 8000e32:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <SystemInit+0xe0>)
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <SystemInit+0xd8>)
 8000e38:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <SystemInit+0xe4>)
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <SystemInit+0xd8>)
 8000e3e:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <SystemInit+0xe8>)
 8000e40:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <SystemInit+0xd8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <SystemInit+0xd8>)
 8000e4a:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <SystemInit+0xe8>)
 8000e4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <SystemInit+0xd8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <SystemInit+0xd8>)
 8000e56:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <SystemInit+0xe8>)
 8000e58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <SystemInit+0xd8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <SystemInit+0xd8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <SystemInit+0xd8>)
 8000e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <SystemInit+0xd8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <SystemInit+0xec>)
 8000e74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00
 8000e88:	52002000 	.word	0x52002000
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e94:	02020200 	.word	0x02020200
 8000e98:	01ff0000 	.word	0x01ff0000
 8000e9c:	01010280 	.word	0x01010280
 8000ea0:	52004000 	.word	0x52004000

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000edc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea8:	f7ff ff84 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eae:	490d      	ldr	r1, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	; (8000ef0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f007 fba3 	bl	800861c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff fb43 	bl	8000560 <main>
  bx  lr
 8000eda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000edc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000ee0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ee4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ee8:	0800869c 	.word	0x0800869c
  ldr r2, =_sbss
 8000eec:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ef0:	2400036c 	.word	0x2400036c

08000ef4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC3_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efe:	2003      	movs	r0, #3
 8000f00:	f000 f980 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f04:	f003 faa2 	bl	800444c <HAL_RCC_GetSysClockFreq>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_Init+0x68>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	4913      	ldr	r1, [pc, #76]	; (8000f64 <HAL_Init+0x6c>)
 8000f16:	5ccb      	ldrb	r3, [r1, r3]
 8000f18:	f003 031f 	and.w	r3, r3, #31
 8000f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_Init+0x68>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_Init+0x6c>)
 8000f2c:	5cd3      	ldrb	r3, [r2, r3]
 8000f2e:	f003 031f 	and.w	r3, r3, #31
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	fa22 f303 	lsr.w	r3, r2, r3
 8000f38:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_Init+0x70>)
 8000f3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f3c:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <HAL_Init+0x74>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f814 	bl	8000f70 <HAL_InitTick>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e002      	b.n	8000f58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f52:	f7ff fd63 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	58024400 	.word	0x58024400
 8000f64:	0800867c 	.word	0x0800867c
 8000f68:	24000004 	.word	0x24000004
 8000f6c:	24000000 	.word	0x24000000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_InitTick+0x60>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e021      	b.n	8000fc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_InitTick+0x64>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_InitTick+0x60>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f965 	bl	800126a <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 f92f 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x68>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2400000c 	.word	0x2400000c
 8000fd4:	24000000 	.word	0x24000000
 8000fd8:	24000008 	.word	0x24000008

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2400000c 	.word	0x2400000c
 8001000:	24000368 	.word	0x24000368

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	24000368 	.word	0x24000368

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_Delay+0x44>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2400000c 	.word	0x2400000c

08001064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	4313      	orrs	r3, r2
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00
 80010a8:	05fa0000 	.word	0x05fa0000

080010ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	db0b      	blt.n	80010f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	f003 021f 	and.w	r2, r3, #31
 80010e0:	4907      	ldr	r1, [pc, #28]	; (8001100 <__NVIC_EnableIRQ+0x38>)
 80010e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	2001      	movs	r0, #1
 80010ea:	fa00 f202 	lsl.w	r2, r0, r2
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	; (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
         );
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff8e 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff29 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001228:	f7ff ff40 	bl	80010ac <__NVIC_GetPriorityGrouping>
 800122c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	6978      	ldr	r0, [r7, #20]
 8001234:	f7ff ff90 	bl	8001158 <NVIC_EncodePriority>
 8001238:	4602      	mov	r2, r0
 800123a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5f 	bl	8001104 <__NVIC_SetPriority>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff33 	bl	80010c8 <__NVIC_EnableIRQ>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ffa4 	bl	80011c0 <SysTick_Config>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001288:	f3bf 8f5f 	dmb	sy
}
 800128c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <HAL_MPU_Disable+0x28>)
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	4a06      	ldr	r2, [pc, #24]	; (80012ac <HAL_MPU_Disable+0x28>)
 8001294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001298:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800129a:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_MPU_Disable+0x2c>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00
 80012b0:	e000ed90 	.word	0xe000ed90

080012b4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80012bc:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <HAL_MPU_Enable+0x38>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_MPU_Enable+0x3c>)
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <HAL_MPU_Enable+0x3c>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80012d2:	f3bf 8f4f 	dsb	sy
}
 80012d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d8:	f3bf 8f6f 	isb	sy
}
 80012dc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed90 	.word	0xe000ed90
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	785a      	ldrb	r2, [r3, #1]
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_MPU_ConfigRegion+0x7c>)
 8001302:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_MPU_ConfigRegion+0x7c>)
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	4a19      	ldr	r2, [pc, #100]	; (8001370 <HAL_MPU_ConfigRegion+0x7c>)
 800130a:	f023 0301 	bic.w	r3, r3, #1
 800130e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001310:	4a17      	ldr	r2, [pc, #92]	; (8001370 <HAL_MPU_ConfigRegion+0x7c>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7b1b      	ldrb	r3, [r3, #12]
 800131c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	7adb      	ldrb	r3, [r3, #11]
 8001322:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001324:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7a9b      	ldrb	r3, [r3, #10]
 800132a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800132c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7b5b      	ldrb	r3, [r3, #13]
 8001332:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001334:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7b9b      	ldrb	r3, [r3, #14]
 800133a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800133c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7bdb      	ldrb	r3, [r3, #15]
 8001342:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001344:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7a5b      	ldrb	r3, [r3, #9]
 800134a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800134c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7a1b      	ldrb	r3, [r3, #8]
 8001352:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001354:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800135e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001360:	6113      	str	r3, [r2, #16]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed90 	.word	0xe000ed90

08001374 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff fe42 	bl	8001004 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e312      	b.n	80019b2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a66      	ldr	r2, [pc, #408]	; (800152c <HAL_DMA_Init+0x1b8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d04a      	beq.n	800142c <HAL_DMA_Init+0xb8>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a65      	ldr	r2, [pc, #404]	; (8001530 <HAL_DMA_Init+0x1bc>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d045      	beq.n	800142c <HAL_DMA_Init+0xb8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a63      	ldr	r2, [pc, #396]	; (8001534 <HAL_DMA_Init+0x1c0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d040      	beq.n	800142c <HAL_DMA_Init+0xb8>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a62      	ldr	r2, [pc, #392]	; (8001538 <HAL_DMA_Init+0x1c4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d03b      	beq.n	800142c <HAL_DMA_Init+0xb8>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a60      	ldr	r2, [pc, #384]	; (800153c <HAL_DMA_Init+0x1c8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d036      	beq.n	800142c <HAL_DMA_Init+0xb8>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a5f      	ldr	r2, [pc, #380]	; (8001540 <HAL_DMA_Init+0x1cc>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d031      	beq.n	800142c <HAL_DMA_Init+0xb8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a5d      	ldr	r2, [pc, #372]	; (8001544 <HAL_DMA_Init+0x1d0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d02c      	beq.n	800142c <HAL_DMA_Init+0xb8>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a5c      	ldr	r2, [pc, #368]	; (8001548 <HAL_DMA_Init+0x1d4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d027      	beq.n	800142c <HAL_DMA_Init+0xb8>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a5a      	ldr	r2, [pc, #360]	; (800154c <HAL_DMA_Init+0x1d8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d022      	beq.n	800142c <HAL_DMA_Init+0xb8>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a59      	ldr	r2, [pc, #356]	; (8001550 <HAL_DMA_Init+0x1dc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d01d      	beq.n	800142c <HAL_DMA_Init+0xb8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a57      	ldr	r2, [pc, #348]	; (8001554 <HAL_DMA_Init+0x1e0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d018      	beq.n	800142c <HAL_DMA_Init+0xb8>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a56      	ldr	r2, [pc, #344]	; (8001558 <HAL_DMA_Init+0x1e4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d013      	beq.n	800142c <HAL_DMA_Init+0xb8>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a54      	ldr	r2, [pc, #336]	; (800155c <HAL_DMA_Init+0x1e8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00e      	beq.n	800142c <HAL_DMA_Init+0xb8>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a53      	ldr	r2, [pc, #332]	; (8001560 <HAL_DMA_Init+0x1ec>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d009      	beq.n	800142c <HAL_DMA_Init+0xb8>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a51      	ldr	r2, [pc, #324]	; (8001564 <HAL_DMA_Init+0x1f0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d004      	beq.n	800142c <HAL_DMA_Init+0xb8>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a50      	ldr	r2, [pc, #320]	; (8001568 <HAL_DMA_Init+0x1f4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d101      	bne.n	8001430 <HAL_DMA_Init+0xbc>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_DMA_Init+0xbe>
 8001430:	2300      	movs	r3, #0
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 813c 	beq.w	80016b0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2202      	movs	r2, #2
 800143c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a37      	ldr	r2, [pc, #220]	; (800152c <HAL_DMA_Init+0x1b8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d04a      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a36      	ldr	r2, [pc, #216]	; (8001530 <HAL_DMA_Init+0x1bc>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d045      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a34      	ldr	r2, [pc, #208]	; (8001534 <HAL_DMA_Init+0x1c0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d040      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a33      	ldr	r2, [pc, #204]	; (8001538 <HAL_DMA_Init+0x1c4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d03b      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a31      	ldr	r2, [pc, #196]	; (800153c <HAL_DMA_Init+0x1c8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d036      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a30      	ldr	r2, [pc, #192]	; (8001540 <HAL_DMA_Init+0x1cc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d031      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a2e      	ldr	r2, [pc, #184]	; (8001544 <HAL_DMA_Init+0x1d0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d02c      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a2d      	ldr	r2, [pc, #180]	; (8001548 <HAL_DMA_Init+0x1d4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d027      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a2b      	ldr	r2, [pc, #172]	; (800154c <HAL_DMA_Init+0x1d8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d022      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a2a      	ldr	r2, [pc, #168]	; (8001550 <HAL_DMA_Init+0x1dc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d01d      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a28      	ldr	r2, [pc, #160]	; (8001554 <HAL_DMA_Init+0x1e0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d018      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_DMA_Init+0x1e4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d013      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a25      	ldr	r2, [pc, #148]	; (800155c <HAL_DMA_Init+0x1e8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00e      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a24      	ldr	r2, [pc, #144]	; (8001560 <HAL_DMA_Init+0x1ec>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d009      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a22      	ldr	r2, [pc, #136]	; (8001564 <HAL_DMA_Init+0x1f0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d004      	beq.n	80014e8 <HAL_DMA_Init+0x174>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a21      	ldr	r2, [pc, #132]	; (8001568 <HAL_DMA_Init+0x1f4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d108      	bne.n	80014fa <HAL_DMA_Init+0x186>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	e007      	b.n	800150a <HAL_DMA_Init+0x196>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0201 	bic.w	r2, r2, #1
 8001508:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800150a:	e02f      	b.n	800156c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800150c:	f7ff fd7a 	bl	8001004 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b05      	cmp	r3, #5
 8001518:	d928      	bls.n	800156c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2220      	movs	r2, #32
 800151e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2203      	movs	r2, #3
 8001524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e242      	b.n	80019b2 <HAL_DMA_Init+0x63e>
 800152c:	40020010 	.word	0x40020010
 8001530:	40020028 	.word	0x40020028
 8001534:	40020040 	.word	0x40020040
 8001538:	40020058 	.word	0x40020058
 800153c:	40020070 	.word	0x40020070
 8001540:	40020088 	.word	0x40020088
 8001544:	400200a0 	.word	0x400200a0
 8001548:	400200b8 	.word	0x400200b8
 800154c:	40020410 	.word	0x40020410
 8001550:	40020428 	.word	0x40020428
 8001554:	40020440 	.word	0x40020440
 8001558:	40020458 	.word	0x40020458
 800155c:	40020470 	.word	0x40020470
 8001560:	40020488 	.word	0x40020488
 8001564:	400204a0 	.word	0x400204a0
 8001568:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1c8      	bne.n	800150c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4b83      	ldr	r3, [pc, #524]	; (8001794 <HAL_DMA_Init+0x420>)
 8001586:	4013      	ands	r3, r2
 8001588:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001592:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800159e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d107      	bne.n	80015d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	4313      	orrs	r3, r2
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b28      	cmp	r3, #40	; 0x28
 80015d6:	d903      	bls.n	80015e0 <HAL_DMA_Init+0x26c>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b2e      	cmp	r3, #46	; 0x2e
 80015de:	d91f      	bls.n	8001620 <HAL_DMA_Init+0x2ac>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b3e      	cmp	r3, #62	; 0x3e
 80015e6:	d903      	bls.n	80015f0 <HAL_DMA_Init+0x27c>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b42      	cmp	r3, #66	; 0x42
 80015ee:	d917      	bls.n	8001620 <HAL_DMA_Init+0x2ac>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b46      	cmp	r3, #70	; 0x46
 80015f6:	d903      	bls.n	8001600 <HAL_DMA_Init+0x28c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b48      	cmp	r3, #72	; 0x48
 80015fe:	d90f      	bls.n	8001620 <HAL_DMA_Init+0x2ac>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b4e      	cmp	r3, #78	; 0x4e
 8001606:	d903      	bls.n	8001610 <HAL_DMA_Init+0x29c>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b52      	cmp	r3, #82	; 0x52
 800160e:	d907      	bls.n	8001620 <HAL_DMA_Init+0x2ac>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b73      	cmp	r3, #115	; 0x73
 8001616:	d905      	bls.n	8001624 <HAL_DMA_Init+0x2b0>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b77      	cmp	r3, #119	; 0x77
 800161e:	d801      	bhi.n	8001624 <HAL_DMA_Init+0x2b0>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_DMA_Init+0x2b2>
 8001624:	2300      	movs	r3, #0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001630:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f023 0307 	bic.w	r3, r3, #7
 8001648:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4313      	orrs	r3, r2
 8001652:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	2b04      	cmp	r3, #4
 800165a:	d117      	bne.n	800168c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4313      	orrs	r3, r2
 8001664:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00e      	beq.n	800168c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f001 fdd6 	bl	8003220 <DMA_CheckFifoParam>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d008      	beq.n	800168c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2240      	movs	r2, #64	; 0x40
 800167e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e192      	b.n	80019b2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f001 fd11 	bl	80030bc <DMA_CalcBaseAndBitshift>
 800169a:	4603      	mov	r3, r0
 800169c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	223f      	movs	r2, #63	; 0x3f
 80016a8:	409a      	lsls	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	e0c8      	b.n	8001842 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a38      	ldr	r2, [pc, #224]	; (8001798 <HAL_DMA_Init+0x424>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d022      	beq.n	8001700 <HAL_DMA_Init+0x38c>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a37      	ldr	r2, [pc, #220]	; (800179c <HAL_DMA_Init+0x428>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d01d      	beq.n	8001700 <HAL_DMA_Init+0x38c>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a35      	ldr	r2, [pc, #212]	; (80017a0 <HAL_DMA_Init+0x42c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d018      	beq.n	8001700 <HAL_DMA_Init+0x38c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a34      	ldr	r2, [pc, #208]	; (80017a4 <HAL_DMA_Init+0x430>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d013      	beq.n	8001700 <HAL_DMA_Init+0x38c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a32      	ldr	r2, [pc, #200]	; (80017a8 <HAL_DMA_Init+0x434>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00e      	beq.n	8001700 <HAL_DMA_Init+0x38c>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a31      	ldr	r2, [pc, #196]	; (80017ac <HAL_DMA_Init+0x438>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d009      	beq.n	8001700 <HAL_DMA_Init+0x38c>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a2f      	ldr	r2, [pc, #188]	; (80017b0 <HAL_DMA_Init+0x43c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d004      	beq.n	8001700 <HAL_DMA_Init+0x38c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a2e      	ldr	r2, [pc, #184]	; (80017b4 <HAL_DMA_Init+0x440>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d101      	bne.n	8001704 <HAL_DMA_Init+0x390>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_DMA_Init+0x392>
 8001704:	2300      	movs	r3, #0
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8092 	beq.w	8001830 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a21      	ldr	r2, [pc, #132]	; (8001798 <HAL_DMA_Init+0x424>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d021      	beq.n	800175a <HAL_DMA_Init+0x3e6>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a20      	ldr	r2, [pc, #128]	; (800179c <HAL_DMA_Init+0x428>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d01c      	beq.n	800175a <HAL_DMA_Init+0x3e6>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <HAL_DMA_Init+0x42c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d017      	beq.n	800175a <HAL_DMA_Init+0x3e6>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <HAL_DMA_Init+0x430>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d012      	beq.n	800175a <HAL_DMA_Init+0x3e6>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a1b      	ldr	r2, [pc, #108]	; (80017a8 <HAL_DMA_Init+0x434>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00d      	beq.n	800175a <HAL_DMA_Init+0x3e6>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1a      	ldr	r2, [pc, #104]	; (80017ac <HAL_DMA_Init+0x438>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d008      	beq.n	800175a <HAL_DMA_Init+0x3e6>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <HAL_DMA_Init+0x43c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d003      	beq.n	800175a <HAL_DMA_Init+0x3e6>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <HAL_DMA_Init+0x440>)
 8001758:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2202      	movs	r2, #2
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_DMA_Init+0x444>)
 8001776:	4013      	ands	r3, r2
 8001778:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b40      	cmp	r3, #64	; 0x40
 8001780:	d01c      	beq.n	80017bc <HAL_DMA_Init+0x448>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b80      	cmp	r3, #128	; 0x80
 8001788:	d102      	bne.n	8001790 <HAL_DMA_Init+0x41c>
 800178a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800178e:	e016      	b.n	80017be <HAL_DMA_Init+0x44a>
 8001790:	2300      	movs	r3, #0
 8001792:	e014      	b.n	80017be <HAL_DMA_Init+0x44a>
 8001794:	fe10803f 	.word	0xfe10803f
 8001798:	58025408 	.word	0x58025408
 800179c:	5802541c 	.word	0x5802541c
 80017a0:	58025430 	.word	0x58025430
 80017a4:	58025444 	.word	0x58025444
 80017a8:	58025458 	.word	0x58025458
 80017ac:	5802546c 	.word	0x5802546c
 80017b0:	58025480 	.word	0x58025480
 80017b4:	58025494 	.word	0x58025494
 80017b8:	fffe000f 	.word	0xfffe000f
 80017bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68d2      	ldr	r2, [r2, #12]
 80017c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80017e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80017ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b6e      	ldr	r3, [pc, #440]	; (80019bc <HAL_DMA_Init+0x648>)
 8001804:	4413      	add	r3, r2
 8001806:	4a6e      	ldr	r2, [pc, #440]	; (80019c0 <HAL_DMA_Init+0x64c>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	009a      	lsls	r2, r3, #2
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f001 fc51 	bl	80030bc <DMA_CalcBaseAndBitshift>
 800181a:	4603      	mov	r3, r0
 800181c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	2201      	movs	r2, #1
 8001828:	409a      	lsls	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	e008      	b.n	8001842 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2240      	movs	r2, #64	; 0x40
 8001834:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2203      	movs	r2, #3
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e0b7      	b.n	80019b2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a5f      	ldr	r2, [pc, #380]	; (80019c4 <HAL_DMA_Init+0x650>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d072      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a5d      	ldr	r2, [pc, #372]	; (80019c8 <HAL_DMA_Init+0x654>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d06d      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a5c      	ldr	r2, [pc, #368]	; (80019cc <HAL_DMA_Init+0x658>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d068      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a5a      	ldr	r2, [pc, #360]	; (80019d0 <HAL_DMA_Init+0x65c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d063      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a59      	ldr	r2, [pc, #356]	; (80019d4 <HAL_DMA_Init+0x660>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d05e      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a57      	ldr	r2, [pc, #348]	; (80019d8 <HAL_DMA_Init+0x664>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d059      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a56      	ldr	r2, [pc, #344]	; (80019dc <HAL_DMA_Init+0x668>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d054      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a54      	ldr	r2, [pc, #336]	; (80019e0 <HAL_DMA_Init+0x66c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d04f      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a53      	ldr	r2, [pc, #332]	; (80019e4 <HAL_DMA_Init+0x670>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d04a      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <HAL_DMA_Init+0x674>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d045      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a50      	ldr	r2, [pc, #320]	; (80019ec <HAL_DMA_Init+0x678>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d040      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a4e      	ldr	r2, [pc, #312]	; (80019f0 <HAL_DMA_Init+0x67c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d03b      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a4d      	ldr	r2, [pc, #308]	; (80019f4 <HAL_DMA_Init+0x680>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d036      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a4b      	ldr	r2, [pc, #300]	; (80019f8 <HAL_DMA_Init+0x684>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d031      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a4a      	ldr	r2, [pc, #296]	; (80019fc <HAL_DMA_Init+0x688>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d02c      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a48      	ldr	r2, [pc, #288]	; (8001a00 <HAL_DMA_Init+0x68c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d027      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a47      	ldr	r2, [pc, #284]	; (8001a04 <HAL_DMA_Init+0x690>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d022      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a45      	ldr	r2, [pc, #276]	; (8001a08 <HAL_DMA_Init+0x694>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01d      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a44      	ldr	r2, [pc, #272]	; (8001a0c <HAL_DMA_Init+0x698>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d018      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a42      	ldr	r2, [pc, #264]	; (8001a10 <HAL_DMA_Init+0x69c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a41      	ldr	r2, [pc, #260]	; (8001a14 <HAL_DMA_Init+0x6a0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d00e      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a3f      	ldr	r2, [pc, #252]	; (8001a18 <HAL_DMA_Init+0x6a4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d009      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a3e      	ldr	r2, [pc, #248]	; (8001a1c <HAL_DMA_Init+0x6a8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d004      	beq.n	8001932 <HAL_DMA_Init+0x5be>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a3c      	ldr	r2, [pc, #240]	; (8001a20 <HAL_DMA_Init+0x6ac>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_DMA_Init+0x5c2>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_DMA_Init+0x5c4>
 8001936:	2300      	movs	r3, #0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d032      	beq.n	80019a2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f001 fceb 	bl	8003318 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b80      	cmp	r3, #128	; 0x80
 8001948:	d102      	bne.n	8001950 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001964:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d010      	beq.n	8001990 <HAL_DMA_Init+0x61c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b08      	cmp	r3, #8
 8001974:	d80c      	bhi.n	8001990 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f001 fd68 	bl	800344c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	e008      	b.n	80019a2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	a7fdabf8 	.word	0xa7fdabf8
 80019c0:	cccccccd 	.word	0xcccccccd
 80019c4:	40020010 	.word	0x40020010
 80019c8:	40020028 	.word	0x40020028
 80019cc:	40020040 	.word	0x40020040
 80019d0:	40020058 	.word	0x40020058
 80019d4:	40020070 	.word	0x40020070
 80019d8:	40020088 	.word	0x40020088
 80019dc:	400200a0 	.word	0x400200a0
 80019e0:	400200b8 	.word	0x400200b8
 80019e4:	40020410 	.word	0x40020410
 80019e8:	40020428 	.word	0x40020428
 80019ec:	40020440 	.word	0x40020440
 80019f0:	40020458 	.word	0x40020458
 80019f4:	40020470 	.word	0x40020470
 80019f8:	40020488 	.word	0x40020488
 80019fc:	400204a0 	.word	0x400204a0
 8001a00:	400204b8 	.word	0x400204b8
 8001a04:	58025408 	.word	0x58025408
 8001a08:	5802541c 	.word	0x5802541c
 8001a0c:	58025430 	.word	0x58025430
 8001a10:	58025444 	.word	0x58025444
 8001a14:	58025458 	.word	0x58025458
 8001a18:	5802546c 	.word	0x5802546c
 8001a1c:	58025480 	.word	0x58025480
 8001a20:	58025494 	.word	0x58025494

08001a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e226      	b.n	8001e8e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_DMA_Start_IT+0x2a>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e21f      	b.n	8001e8e <HAL_DMA_Start_IT+0x46a>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	f040 820a 	bne.w	8001e78 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a68      	ldr	r2, [pc, #416]	; (8001c18 <HAL_DMA_Start_IT+0x1f4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d04a      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a66      	ldr	r2, [pc, #408]	; (8001c1c <HAL_DMA_Start_IT+0x1f8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d045      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a65      	ldr	r2, [pc, #404]	; (8001c20 <HAL_DMA_Start_IT+0x1fc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d040      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a63      	ldr	r2, [pc, #396]	; (8001c24 <HAL_DMA_Start_IT+0x200>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d03b      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a62      	ldr	r2, [pc, #392]	; (8001c28 <HAL_DMA_Start_IT+0x204>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d036      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a60      	ldr	r2, [pc, #384]	; (8001c2c <HAL_DMA_Start_IT+0x208>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d031      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a5f      	ldr	r2, [pc, #380]	; (8001c30 <HAL_DMA_Start_IT+0x20c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d02c      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a5d      	ldr	r2, [pc, #372]	; (8001c34 <HAL_DMA_Start_IT+0x210>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d027      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a5c      	ldr	r2, [pc, #368]	; (8001c38 <HAL_DMA_Start_IT+0x214>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d022      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a5a      	ldr	r2, [pc, #360]	; (8001c3c <HAL_DMA_Start_IT+0x218>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01d      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a59      	ldr	r2, [pc, #356]	; (8001c40 <HAL_DMA_Start_IT+0x21c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d018      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a57      	ldr	r2, [pc, #348]	; (8001c44 <HAL_DMA_Start_IT+0x220>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a56      	ldr	r2, [pc, #344]	; (8001c48 <HAL_DMA_Start_IT+0x224>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d00e      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a54      	ldr	r2, [pc, #336]	; (8001c4c <HAL_DMA_Start_IT+0x228>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d009      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a53      	ldr	r2, [pc, #332]	; (8001c50 <HAL_DMA_Start_IT+0x22c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d004      	beq.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a51      	ldr	r2, [pc, #324]	; (8001c54 <HAL_DMA_Start_IT+0x230>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d108      	bne.n	8001b24 <HAL_DMA_Start_IT+0x100>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e007      	b.n	8001b34 <HAL_DMA_Start_IT+0x110>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f001 f912 	bl	8002d64 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a34      	ldr	r2, [pc, #208]	; (8001c18 <HAL_DMA_Start_IT+0x1f4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d04a      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a33      	ldr	r2, [pc, #204]	; (8001c1c <HAL_DMA_Start_IT+0x1f8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d045      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a31      	ldr	r2, [pc, #196]	; (8001c20 <HAL_DMA_Start_IT+0x1fc>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d040      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a30      	ldr	r2, [pc, #192]	; (8001c24 <HAL_DMA_Start_IT+0x200>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d03b      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a2e      	ldr	r2, [pc, #184]	; (8001c28 <HAL_DMA_Start_IT+0x204>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d036      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a2d      	ldr	r2, [pc, #180]	; (8001c2c <HAL_DMA_Start_IT+0x208>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d031      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a2b      	ldr	r2, [pc, #172]	; (8001c30 <HAL_DMA_Start_IT+0x20c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d02c      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <HAL_DMA_Start_IT+0x210>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d027      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <HAL_DMA_Start_IT+0x214>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d022      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a27      	ldr	r2, [pc, #156]	; (8001c3c <HAL_DMA_Start_IT+0x218>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d01d      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a25      	ldr	r2, [pc, #148]	; (8001c40 <HAL_DMA_Start_IT+0x21c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d018      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a24      	ldr	r2, [pc, #144]	; (8001c44 <HAL_DMA_Start_IT+0x220>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a22      	ldr	r2, [pc, #136]	; (8001c48 <HAL_DMA_Start_IT+0x224>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00e      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a21      	ldr	r2, [pc, #132]	; (8001c4c <HAL_DMA_Start_IT+0x228>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d009      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_DMA_Start_IT+0x22c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d004      	beq.n	8001be0 <HAL_DMA_Start_IT+0x1bc>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <HAL_DMA_Start_IT+0x230>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d101      	bne.n	8001be4 <HAL_DMA_Start_IT+0x1c0>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_DMA_Start_IT+0x1c2>
 8001be4:	2300      	movs	r3, #0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d036      	beq.n	8001c58 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 021e 	bic.w	r2, r3, #30
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0216 	orr.w	r2, r2, #22
 8001bfc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d03e      	beq.n	8001c84 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0208 	orr.w	r2, r2, #8
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	e035      	b.n	8001c84 <HAL_DMA_Start_IT+0x260>
 8001c18:	40020010 	.word	0x40020010
 8001c1c:	40020028 	.word	0x40020028
 8001c20:	40020040 	.word	0x40020040
 8001c24:	40020058 	.word	0x40020058
 8001c28:	40020070 	.word	0x40020070
 8001c2c:	40020088 	.word	0x40020088
 8001c30:	400200a0 	.word	0x400200a0
 8001c34:	400200b8 	.word	0x400200b8
 8001c38:	40020410 	.word	0x40020410
 8001c3c:	40020428 	.word	0x40020428
 8001c40:	40020440 	.word	0x40020440
 8001c44:	40020458 	.word	0x40020458
 8001c48:	40020470 	.word	0x40020470
 8001c4c:	40020488 	.word	0x40020488
 8001c50:	400204a0 	.word	0x400204a0
 8001c54:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 020e 	bic.w	r2, r3, #14
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 020a 	orr.w	r2, r2, #10
 8001c6a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d007      	beq.n	8001c84 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0204 	orr.w	r2, r2, #4
 8001c82:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a83      	ldr	r2, [pc, #524]	; (8001e98 <HAL_DMA_Start_IT+0x474>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d072      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a82      	ldr	r2, [pc, #520]	; (8001e9c <HAL_DMA_Start_IT+0x478>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d06d      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a80      	ldr	r2, [pc, #512]	; (8001ea0 <HAL_DMA_Start_IT+0x47c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d068      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a7f      	ldr	r2, [pc, #508]	; (8001ea4 <HAL_DMA_Start_IT+0x480>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d063      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a7d      	ldr	r2, [pc, #500]	; (8001ea8 <HAL_DMA_Start_IT+0x484>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d05e      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a7c      	ldr	r2, [pc, #496]	; (8001eac <HAL_DMA_Start_IT+0x488>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d059      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a7a      	ldr	r2, [pc, #488]	; (8001eb0 <HAL_DMA_Start_IT+0x48c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d054      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a79      	ldr	r2, [pc, #484]	; (8001eb4 <HAL_DMA_Start_IT+0x490>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d04f      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a77      	ldr	r2, [pc, #476]	; (8001eb8 <HAL_DMA_Start_IT+0x494>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d04a      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a76      	ldr	r2, [pc, #472]	; (8001ebc <HAL_DMA_Start_IT+0x498>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d045      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a74      	ldr	r2, [pc, #464]	; (8001ec0 <HAL_DMA_Start_IT+0x49c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d040      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a73      	ldr	r2, [pc, #460]	; (8001ec4 <HAL_DMA_Start_IT+0x4a0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d03b      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a71      	ldr	r2, [pc, #452]	; (8001ec8 <HAL_DMA_Start_IT+0x4a4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d036      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a70      	ldr	r2, [pc, #448]	; (8001ecc <HAL_DMA_Start_IT+0x4a8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d031      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a6e      	ldr	r2, [pc, #440]	; (8001ed0 <HAL_DMA_Start_IT+0x4ac>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d02c      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6d      	ldr	r2, [pc, #436]	; (8001ed4 <HAL_DMA_Start_IT+0x4b0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d027      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a6b      	ldr	r2, [pc, #428]	; (8001ed8 <HAL_DMA_Start_IT+0x4b4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d022      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6a      	ldr	r2, [pc, #424]	; (8001edc <HAL_DMA_Start_IT+0x4b8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d01d      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a68      	ldr	r2, [pc, #416]	; (8001ee0 <HAL_DMA_Start_IT+0x4bc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d018      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a67      	ldr	r2, [pc, #412]	; (8001ee4 <HAL_DMA_Start_IT+0x4c0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d013      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a65      	ldr	r2, [pc, #404]	; (8001ee8 <HAL_DMA_Start_IT+0x4c4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00e      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a64      	ldr	r2, [pc, #400]	; (8001eec <HAL_DMA_Start_IT+0x4c8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d009      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a62      	ldr	r2, [pc, #392]	; (8001ef0 <HAL_DMA_Start_IT+0x4cc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d004      	beq.n	8001d74 <HAL_DMA_Start_IT+0x350>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a61      	ldr	r2, [pc, #388]	; (8001ef4 <HAL_DMA_Start_IT+0x4d0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d101      	bne.n	8001d78 <HAL_DMA_Start_IT+0x354>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_DMA_Start_IT+0x356>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d01a      	beq.n	8001db4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d9a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d007      	beq.n	8001db4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001db2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a37      	ldr	r2, [pc, #220]	; (8001e98 <HAL_DMA_Start_IT+0x474>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d04a      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a36      	ldr	r2, [pc, #216]	; (8001e9c <HAL_DMA_Start_IT+0x478>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d045      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a34      	ldr	r2, [pc, #208]	; (8001ea0 <HAL_DMA_Start_IT+0x47c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d040      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a33      	ldr	r2, [pc, #204]	; (8001ea4 <HAL_DMA_Start_IT+0x480>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d03b      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a31      	ldr	r2, [pc, #196]	; (8001ea8 <HAL_DMA_Start_IT+0x484>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d036      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a30      	ldr	r2, [pc, #192]	; (8001eac <HAL_DMA_Start_IT+0x488>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d031      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a2e      	ldr	r2, [pc, #184]	; (8001eb0 <HAL_DMA_Start_IT+0x48c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d02c      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a2d      	ldr	r2, [pc, #180]	; (8001eb4 <HAL_DMA_Start_IT+0x490>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d027      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2b      	ldr	r2, [pc, #172]	; (8001eb8 <HAL_DMA_Start_IT+0x494>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d022      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a2a      	ldr	r2, [pc, #168]	; (8001ebc <HAL_DMA_Start_IT+0x498>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d01d      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a28      	ldr	r2, [pc, #160]	; (8001ec0 <HAL_DMA_Start_IT+0x49c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d018      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <HAL_DMA_Start_IT+0x4a0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a25      	ldr	r2, [pc, #148]	; (8001ec8 <HAL_DMA_Start_IT+0x4a4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00e      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <HAL_DMA_Start_IT+0x4a8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d009      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a22      	ldr	r2, [pc, #136]	; (8001ed0 <HAL_DMA_Start_IT+0x4ac>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d004      	beq.n	8001e54 <HAL_DMA_Start_IT+0x430>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <HAL_DMA_Start_IT+0x4b0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d108      	bne.n	8001e66 <HAL_DMA_Start_IT+0x442>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e012      	b.n	8001e8c <HAL_DMA_Start_IT+0x468>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	e009      	b.n	8001e8c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40020010 	.word	0x40020010
 8001e9c:	40020028 	.word	0x40020028
 8001ea0:	40020040 	.word	0x40020040
 8001ea4:	40020058 	.word	0x40020058
 8001ea8:	40020070 	.word	0x40020070
 8001eac:	40020088 	.word	0x40020088
 8001eb0:	400200a0 	.word	0x400200a0
 8001eb4:	400200b8 	.word	0x400200b8
 8001eb8:	40020410 	.word	0x40020410
 8001ebc:	40020428 	.word	0x40020428
 8001ec0:	40020440 	.word	0x40020440
 8001ec4:	40020458 	.word	0x40020458
 8001ec8:	40020470 	.word	0x40020470
 8001ecc:	40020488 	.word	0x40020488
 8001ed0:	400204a0 	.word	0x400204a0
 8001ed4:	400204b8 	.word	0x400204b8
 8001ed8:	58025408 	.word	0x58025408
 8001edc:	5802541c 	.word	0x5802541c
 8001ee0:	58025430 	.word	0x58025430
 8001ee4:	58025444 	.word	0x58025444
 8001ee8:	58025458 	.word	0x58025458
 8001eec:	5802546c 	.word	0x5802546c
 8001ef0:	58025480 	.word	0x58025480
 8001ef4:	58025494 	.word	0x58025494

08001ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f04:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <HAL_DMA_IRQHandler+0x1ac>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a67      	ldr	r2, [pc, #412]	; (80020a8 <HAL_DMA_IRQHandler+0x1b0>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0a9b      	lsrs	r3, r3, #10
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a5f      	ldr	r2, [pc, #380]	; (80020ac <HAL_DMA_IRQHandler+0x1b4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d04a      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a5d      	ldr	r2, [pc, #372]	; (80020b0 <HAL_DMA_IRQHandler+0x1b8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d045      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a5c      	ldr	r2, [pc, #368]	; (80020b4 <HAL_DMA_IRQHandler+0x1bc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d040      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a5a      	ldr	r2, [pc, #360]	; (80020b8 <HAL_DMA_IRQHandler+0x1c0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d03b      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a59      	ldr	r2, [pc, #356]	; (80020bc <HAL_DMA_IRQHandler+0x1c4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d036      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a57      	ldr	r2, [pc, #348]	; (80020c0 <HAL_DMA_IRQHandler+0x1c8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d031      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a56      	ldr	r2, [pc, #344]	; (80020c4 <HAL_DMA_IRQHandler+0x1cc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d02c      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a54      	ldr	r2, [pc, #336]	; (80020c8 <HAL_DMA_IRQHandler+0x1d0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d027      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a53      	ldr	r2, [pc, #332]	; (80020cc <HAL_DMA_IRQHandler+0x1d4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d022      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a51      	ldr	r2, [pc, #324]	; (80020d0 <HAL_DMA_IRQHandler+0x1d8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01d      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a50      	ldr	r2, [pc, #320]	; (80020d4 <HAL_DMA_IRQHandler+0x1dc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d018      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a4e      	ldr	r2, [pc, #312]	; (80020d8 <HAL_DMA_IRQHandler+0x1e0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d013      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a4d      	ldr	r2, [pc, #308]	; (80020dc <HAL_DMA_IRQHandler+0x1e4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00e      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a4b      	ldr	r2, [pc, #300]	; (80020e0 <HAL_DMA_IRQHandler+0x1e8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d009      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a4a      	ldr	r2, [pc, #296]	; (80020e4 <HAL_DMA_IRQHandler+0x1ec>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d004      	beq.n	8001fca <HAL_DMA_IRQHandler+0xd2>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a48      	ldr	r2, [pc, #288]	; (80020e8 <HAL_DMA_IRQHandler+0x1f0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_DMA_IRQHandler+0xd6>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_DMA_IRQHandler+0xd8>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 842b 	beq.w	800282c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	2208      	movs	r2, #8
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80a2 	beq.w	8002130 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2e      	ldr	r2, [pc, #184]	; (80020ac <HAL_DMA_IRQHandler+0x1b4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d04a      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2d      	ldr	r2, [pc, #180]	; (80020b0 <HAL_DMA_IRQHandler+0x1b8>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d045      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a2b      	ldr	r2, [pc, #172]	; (80020b4 <HAL_DMA_IRQHandler+0x1bc>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d040      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a2a      	ldr	r2, [pc, #168]	; (80020b8 <HAL_DMA_IRQHandler+0x1c0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d03b      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a28      	ldr	r2, [pc, #160]	; (80020bc <HAL_DMA_IRQHandler+0x1c4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d036      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a27      	ldr	r2, [pc, #156]	; (80020c0 <HAL_DMA_IRQHandler+0x1c8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d031      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a25      	ldr	r2, [pc, #148]	; (80020c4 <HAL_DMA_IRQHandler+0x1cc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d02c      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a24      	ldr	r2, [pc, #144]	; (80020c8 <HAL_DMA_IRQHandler+0x1d0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d027      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_DMA_IRQHandler+0x1d4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d022      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <HAL_DMA_IRQHandler+0x1d8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d01d      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1f      	ldr	r2, [pc, #124]	; (80020d4 <HAL_DMA_IRQHandler+0x1dc>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d018      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <HAL_DMA_IRQHandler+0x1e0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d013      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1c      	ldr	r2, [pc, #112]	; (80020dc <HAL_DMA_IRQHandler+0x1e4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00e      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <HAL_DMA_IRQHandler+0x1e8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d009      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a19      	ldr	r2, [pc, #100]	; (80020e4 <HAL_DMA_IRQHandler+0x1ec>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d004      	beq.n	800208c <HAL_DMA_IRQHandler+0x194>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a18      	ldr	r2, [pc, #96]	; (80020e8 <HAL_DMA_IRQHandler+0x1f0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d12f      	bne.n	80020ec <HAL_DMA_IRQHandler+0x1f4>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	bf14      	ite	ne
 800209a:	2301      	movne	r3, #1
 800209c:	2300      	moveq	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	e02e      	b.n	8002100 <HAL_DMA_IRQHandler+0x208>
 80020a2:	bf00      	nop
 80020a4:	24000000 	.word	0x24000000
 80020a8:	1b4e81b5 	.word	0x1b4e81b5
 80020ac:	40020010 	.word	0x40020010
 80020b0:	40020028 	.word	0x40020028
 80020b4:	40020040 	.word	0x40020040
 80020b8:	40020058 	.word	0x40020058
 80020bc:	40020070 	.word	0x40020070
 80020c0:	40020088 	.word	0x40020088
 80020c4:	400200a0 	.word	0x400200a0
 80020c8:	400200b8 	.word	0x400200b8
 80020cc:	40020410 	.word	0x40020410
 80020d0:	40020428 	.word	0x40020428
 80020d4:	40020440 	.word	0x40020440
 80020d8:	40020458 	.word	0x40020458
 80020dc:	40020470 	.word	0x40020470
 80020e0:	40020488 	.word	0x40020488
 80020e4:	400204a0 	.word	0x400204a0
 80020e8:	400204b8 	.word	0x400204b8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf14      	ite	ne
 80020fa:	2301      	movne	r3, #1
 80020fc:	2300      	moveq	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d015      	beq.n	8002130 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0204 	bic.w	r2, r2, #4
 8002112:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	2208      	movs	r2, #8
 800211e:	409a      	lsls	r2, r3
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	fa22 f303 	lsr.w	r3, r2, r3
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d06e      	beq.n	8002224 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a69      	ldr	r2, [pc, #420]	; (80022f0 <HAL_DMA_IRQHandler+0x3f8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d04a      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a67      	ldr	r2, [pc, #412]	; (80022f4 <HAL_DMA_IRQHandler+0x3fc>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d045      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a66      	ldr	r2, [pc, #408]	; (80022f8 <HAL_DMA_IRQHandler+0x400>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d040      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a64      	ldr	r2, [pc, #400]	; (80022fc <HAL_DMA_IRQHandler+0x404>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d03b      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a63      	ldr	r2, [pc, #396]	; (8002300 <HAL_DMA_IRQHandler+0x408>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d036      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a61      	ldr	r2, [pc, #388]	; (8002304 <HAL_DMA_IRQHandler+0x40c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d031      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a60      	ldr	r2, [pc, #384]	; (8002308 <HAL_DMA_IRQHandler+0x410>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d02c      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a5e      	ldr	r2, [pc, #376]	; (800230c <HAL_DMA_IRQHandler+0x414>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d027      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a5d      	ldr	r2, [pc, #372]	; (8002310 <HAL_DMA_IRQHandler+0x418>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a5b      	ldr	r2, [pc, #364]	; (8002314 <HAL_DMA_IRQHandler+0x41c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01d      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a5a      	ldr	r2, [pc, #360]	; (8002318 <HAL_DMA_IRQHandler+0x420>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d018      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a58      	ldr	r2, [pc, #352]	; (800231c <HAL_DMA_IRQHandler+0x424>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a57      	ldr	r2, [pc, #348]	; (8002320 <HAL_DMA_IRQHandler+0x428>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00e      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a55      	ldr	r2, [pc, #340]	; (8002324 <HAL_DMA_IRQHandler+0x42c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a54      	ldr	r2, [pc, #336]	; (8002328 <HAL_DMA_IRQHandler+0x430>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2ee>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a52      	ldr	r2, [pc, #328]	; (800232c <HAL_DMA_IRQHandler+0x434>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d10a      	bne.n	80021fc <HAL_DMA_IRQHandler+0x304>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e003      	b.n	8002204 <HAL_DMA_IRQHandler+0x30c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2300      	movs	r3, #0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00d      	beq.n	8002224 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2201      	movs	r2, #1
 8002212:	409a      	lsls	r2, r3
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221c:	f043 0202 	orr.w	r2, r3, #2
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	2204      	movs	r2, #4
 800222e:	409a      	lsls	r2, r3
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 808f 	beq.w	8002358 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <HAL_DMA_IRQHandler+0x3f8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d04a      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_DMA_IRQHandler+0x3fc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d045      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <HAL_DMA_IRQHandler+0x400>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d040      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a27      	ldr	r2, [pc, #156]	; (80022fc <HAL_DMA_IRQHandler+0x404>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d03b      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a26      	ldr	r2, [pc, #152]	; (8002300 <HAL_DMA_IRQHandler+0x408>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d036      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a24      	ldr	r2, [pc, #144]	; (8002304 <HAL_DMA_IRQHandler+0x40c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d031      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a23      	ldr	r2, [pc, #140]	; (8002308 <HAL_DMA_IRQHandler+0x410>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d02c      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a21      	ldr	r2, [pc, #132]	; (800230c <HAL_DMA_IRQHandler+0x414>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d027      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a20      	ldr	r2, [pc, #128]	; (8002310 <HAL_DMA_IRQHandler+0x418>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d022      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <HAL_DMA_IRQHandler+0x41c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d01d      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <HAL_DMA_IRQHandler+0x420>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d018      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <HAL_DMA_IRQHandler+0x424>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <HAL_DMA_IRQHandler+0x428>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00e      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a18      	ldr	r2, [pc, #96]	; (8002324 <HAL_DMA_IRQHandler+0x42c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d009      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <HAL_DMA_IRQHandler+0x430>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d004      	beq.n	80022da <HAL_DMA_IRQHandler+0x3e2>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a15      	ldr	r2, [pc, #84]	; (800232c <HAL_DMA_IRQHandler+0x434>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d12a      	bne.n	8002330 <HAL_DMA_IRQHandler+0x438>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf14      	ite	ne
 80022e8:	2301      	movne	r3, #1
 80022ea:	2300      	moveq	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e023      	b.n	8002338 <HAL_DMA_IRQHandler+0x440>
 80022f0:	40020010 	.word	0x40020010
 80022f4:	40020028 	.word	0x40020028
 80022f8:	40020040 	.word	0x40020040
 80022fc:	40020058 	.word	0x40020058
 8002300:	40020070 	.word	0x40020070
 8002304:	40020088 	.word	0x40020088
 8002308:	400200a0 	.word	0x400200a0
 800230c:	400200b8 	.word	0x400200b8
 8002310:	40020410 	.word	0x40020410
 8002314:	40020428 	.word	0x40020428
 8002318:	40020440 	.word	0x40020440
 800231c:	40020458 	.word	0x40020458
 8002320:	40020470 	.word	0x40020470
 8002324:	40020488 	.word	0x40020488
 8002328:	400204a0 	.word	0x400204a0
 800232c:	400204b8 	.word	0x400204b8
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2300      	movs	r3, #0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00d      	beq.n	8002358 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	2204      	movs	r2, #4
 8002346:	409a      	lsls	r2, r3
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f043 0204 	orr.w	r2, r3, #4
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2210      	movs	r2, #16
 8002362:	409a      	lsls	r2, r3
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80a6 	beq.w	80024ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a85      	ldr	r2, [pc, #532]	; (8002588 <HAL_DMA_IRQHandler+0x690>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d04a      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a83      	ldr	r2, [pc, #524]	; (800258c <HAL_DMA_IRQHandler+0x694>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d045      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a82      	ldr	r2, [pc, #520]	; (8002590 <HAL_DMA_IRQHandler+0x698>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d040      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a80      	ldr	r2, [pc, #512]	; (8002594 <HAL_DMA_IRQHandler+0x69c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d03b      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7f      	ldr	r2, [pc, #508]	; (8002598 <HAL_DMA_IRQHandler+0x6a0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d036      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a7d      	ldr	r2, [pc, #500]	; (800259c <HAL_DMA_IRQHandler+0x6a4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d031      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7c      	ldr	r2, [pc, #496]	; (80025a0 <HAL_DMA_IRQHandler+0x6a8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d02c      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a7a      	ldr	r2, [pc, #488]	; (80025a4 <HAL_DMA_IRQHandler+0x6ac>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d027      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a79      	ldr	r2, [pc, #484]	; (80025a8 <HAL_DMA_IRQHandler+0x6b0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d022      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a77      	ldr	r2, [pc, #476]	; (80025ac <HAL_DMA_IRQHandler+0x6b4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01d      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a76      	ldr	r2, [pc, #472]	; (80025b0 <HAL_DMA_IRQHandler+0x6b8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d018      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a74      	ldr	r2, [pc, #464]	; (80025b4 <HAL_DMA_IRQHandler+0x6bc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a73      	ldr	r2, [pc, #460]	; (80025b8 <HAL_DMA_IRQHandler+0x6c0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00e      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a71      	ldr	r2, [pc, #452]	; (80025bc <HAL_DMA_IRQHandler+0x6c4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a70      	ldr	r2, [pc, #448]	; (80025c0 <HAL_DMA_IRQHandler+0x6c8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d004      	beq.n	800240e <HAL_DMA_IRQHandler+0x516>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a6e      	ldr	r2, [pc, #440]	; (80025c4 <HAL_DMA_IRQHandler+0x6cc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10a      	bne.n	8002424 <HAL_DMA_IRQHandler+0x52c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e009      	b.n	8002438 <HAL_DMA_IRQHandler+0x540>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d03e      	beq.n	80024ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	2210      	movs	r2, #16
 8002446:	409a      	lsls	r2, r3
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d018      	beq.n	800248c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d108      	bne.n	800247a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	2b00      	cmp	r3, #0
 800246e:	d024      	beq.n	80024ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	4798      	blx	r3
 8002478:	e01f      	b.n	80024ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247e:	2b00      	cmp	r3, #0
 8002480:	d01b      	beq.n	80024ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
 800248a:	e016      	b.n	80024ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d107      	bne.n	80024aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0208 	bic.w	r2, r2, #8
 80024a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2220      	movs	r2, #32
 80024c4:	409a      	lsls	r2, r3
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8110 	beq.w	80026f0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2c      	ldr	r2, [pc, #176]	; (8002588 <HAL_DMA_IRQHandler+0x690>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d04a      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a2b      	ldr	r2, [pc, #172]	; (800258c <HAL_DMA_IRQHandler+0x694>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d045      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a29      	ldr	r2, [pc, #164]	; (8002590 <HAL_DMA_IRQHandler+0x698>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d040      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a28      	ldr	r2, [pc, #160]	; (8002594 <HAL_DMA_IRQHandler+0x69c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d03b      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a26      	ldr	r2, [pc, #152]	; (8002598 <HAL_DMA_IRQHandler+0x6a0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d036      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a25      	ldr	r2, [pc, #148]	; (800259c <HAL_DMA_IRQHandler+0x6a4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d031      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a23      	ldr	r2, [pc, #140]	; (80025a0 <HAL_DMA_IRQHandler+0x6a8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d02c      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <HAL_DMA_IRQHandler+0x6ac>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d027      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <HAL_DMA_IRQHandler+0x6b0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d022      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <HAL_DMA_IRQHandler+0x6b4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d01d      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_DMA_IRQHandler+0x6b8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d018      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <HAL_DMA_IRQHandler+0x6bc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <HAL_DMA_IRQHandler+0x6c0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00e      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a19      	ldr	r2, [pc, #100]	; (80025bc <HAL_DMA_IRQHandler+0x6c4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d009      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <HAL_DMA_IRQHandler+0x6c8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d004      	beq.n	8002570 <HAL_DMA_IRQHandler+0x678>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <HAL_DMA_IRQHandler+0x6cc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d12b      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x6d0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf14      	ite	ne
 800257e:	2301      	movne	r3, #1
 8002580:	2300      	moveq	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	e02a      	b.n	80025dc <HAL_DMA_IRQHandler+0x6e4>
 8002586:	bf00      	nop
 8002588:	40020010 	.word	0x40020010
 800258c:	40020028 	.word	0x40020028
 8002590:	40020040 	.word	0x40020040
 8002594:	40020058 	.word	0x40020058
 8002598:	40020070 	.word	0x40020070
 800259c:	40020088 	.word	0x40020088
 80025a0:	400200a0 	.word	0x400200a0
 80025a4:	400200b8 	.word	0x400200b8
 80025a8:	40020410 	.word	0x40020410
 80025ac:	40020428 	.word	0x40020428
 80025b0:	40020440 	.word	0x40020440
 80025b4:	40020458 	.word	0x40020458
 80025b8:	40020470 	.word	0x40020470
 80025bc:	40020488 	.word	0x40020488
 80025c0:	400204a0 	.word	0x400204a0
 80025c4:	400204b8 	.word	0x400204b8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf14      	ite	ne
 80025d6:	2301      	movne	r3, #1
 80025d8:	2300      	moveq	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8087 	beq.w	80026f0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2220      	movs	r2, #32
 80025ec:	409a      	lsls	r2, r3
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d139      	bne.n	8002672 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0216 	bic.w	r2, r2, #22
 800260c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <HAL_DMA_IRQHandler+0x736>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0208 	bic.w	r2, r2, #8
 800263c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	223f      	movs	r2, #63	; 0x3f
 8002648:	409a      	lsls	r2, r3
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 834a 	beq.w	8002cfc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
          }
          return;
 8002670:	e344      	b.n	8002cfc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d018      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d108      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	2b00      	cmp	r3, #0
 8002694:	d02c      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
 800269e:	e027      	b.n	80026f0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d023      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
 80026b0:	e01e      	b.n	80026f0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10f      	bne.n	80026e0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0210 	bic.w	r2, r2, #16
 80026ce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8306 	beq.w	8002d06 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8088 	beq.w	8002818 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2204      	movs	r2, #4
 800270c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a7a      	ldr	r2, [pc, #488]	; (8002900 <HAL_DMA_IRQHandler+0xa08>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d04a      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a79      	ldr	r2, [pc, #484]	; (8002904 <HAL_DMA_IRQHandler+0xa0c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d045      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a77      	ldr	r2, [pc, #476]	; (8002908 <HAL_DMA_IRQHandler+0xa10>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d040      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a76      	ldr	r2, [pc, #472]	; (800290c <HAL_DMA_IRQHandler+0xa14>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d03b      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a74      	ldr	r2, [pc, #464]	; (8002910 <HAL_DMA_IRQHandler+0xa18>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d036      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a73      	ldr	r2, [pc, #460]	; (8002914 <HAL_DMA_IRQHandler+0xa1c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d031      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a71      	ldr	r2, [pc, #452]	; (8002918 <HAL_DMA_IRQHandler+0xa20>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02c      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a70      	ldr	r2, [pc, #448]	; (800291c <HAL_DMA_IRQHandler+0xa24>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d027      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a6e      	ldr	r2, [pc, #440]	; (8002920 <HAL_DMA_IRQHandler+0xa28>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d022      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a6d      	ldr	r2, [pc, #436]	; (8002924 <HAL_DMA_IRQHandler+0xa2c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d01d      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a6b      	ldr	r2, [pc, #428]	; (8002928 <HAL_DMA_IRQHandler+0xa30>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d018      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6a      	ldr	r2, [pc, #424]	; (800292c <HAL_DMA_IRQHandler+0xa34>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a68      	ldr	r2, [pc, #416]	; (8002930 <HAL_DMA_IRQHandler+0xa38>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00e      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a67      	ldr	r2, [pc, #412]	; (8002934 <HAL_DMA_IRQHandler+0xa3c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a65      	ldr	r2, [pc, #404]	; (8002938 <HAL_DMA_IRQHandler+0xa40>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x8b8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a64      	ldr	r2, [pc, #400]	; (800293c <HAL_DMA_IRQHandler+0xa44>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d108      	bne.n	80027c2 <HAL_DMA_IRQHandler+0x8ca>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e007      	b.n	80027d2 <HAL_DMA_IRQHandler+0x8da>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3301      	adds	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027da:	429a      	cmp	r2, r3
 80027dc:	d307      	bcc.n	80027ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f2      	bne.n	80027d2 <HAL_DMA_IRQHandler+0x8da>
 80027ec:	e000      	b.n	80027f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80027ee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2203      	movs	r2, #3
 8002802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002806:	e003      	b.n	8002810 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8272 	beq.w	8002d06 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
 800282a:	e26c      	b.n	8002d06 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a43      	ldr	r2, [pc, #268]	; (8002940 <HAL_DMA_IRQHandler+0xa48>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d022      	beq.n	800287c <HAL_DMA_IRQHandler+0x984>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a42      	ldr	r2, [pc, #264]	; (8002944 <HAL_DMA_IRQHandler+0xa4c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d01d      	beq.n	800287c <HAL_DMA_IRQHandler+0x984>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a40      	ldr	r2, [pc, #256]	; (8002948 <HAL_DMA_IRQHandler+0xa50>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d018      	beq.n	800287c <HAL_DMA_IRQHandler+0x984>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a3f      	ldr	r2, [pc, #252]	; (800294c <HAL_DMA_IRQHandler+0xa54>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_DMA_IRQHandler+0x984>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a3d      	ldr	r2, [pc, #244]	; (8002950 <HAL_DMA_IRQHandler+0xa58>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_DMA_IRQHandler+0x984>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a3c      	ldr	r2, [pc, #240]	; (8002954 <HAL_DMA_IRQHandler+0xa5c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_DMA_IRQHandler+0x984>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a3a      	ldr	r2, [pc, #232]	; (8002958 <HAL_DMA_IRQHandler+0xa60>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_DMA_IRQHandler+0x984>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a39      	ldr	r2, [pc, #228]	; (800295c <HAL_DMA_IRQHandler+0xa64>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_DMA_IRQHandler+0x988>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <HAL_DMA_IRQHandler+0x98a>
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 823f 	beq.w	8002d06 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	2204      	movs	r2, #4
 800289a:	409a      	lsls	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80cd 	beq.w	8002a40 <HAL_DMA_IRQHandler+0xb48>
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80c7 	beq.w	8002a40 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	2204      	movs	r2, #4
 80028bc:	409a      	lsls	r2, r3
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d049      	beq.n	8002960 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8210 	beq.w	8002d00 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028e8:	e20a      	b.n	8002d00 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8206 	beq.w	8002d00 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028fc:	e200      	b.n	8002d00 <HAL_DMA_IRQHandler+0xe08>
 80028fe:	bf00      	nop
 8002900:	40020010 	.word	0x40020010
 8002904:	40020028 	.word	0x40020028
 8002908:	40020040 	.word	0x40020040
 800290c:	40020058 	.word	0x40020058
 8002910:	40020070 	.word	0x40020070
 8002914:	40020088 	.word	0x40020088
 8002918:	400200a0 	.word	0x400200a0
 800291c:	400200b8 	.word	0x400200b8
 8002920:	40020410 	.word	0x40020410
 8002924:	40020428 	.word	0x40020428
 8002928:	40020440 	.word	0x40020440
 800292c:	40020458 	.word	0x40020458
 8002930:	40020470 	.word	0x40020470
 8002934:	40020488 	.word	0x40020488
 8002938:	400204a0 	.word	0x400204a0
 800293c:	400204b8 	.word	0x400204b8
 8002940:	58025408 	.word	0x58025408
 8002944:	5802541c 	.word	0x5802541c
 8002948:	58025430 	.word	0x58025430
 800294c:	58025444 	.word	0x58025444
 8002950:	58025458 	.word	0x58025458
 8002954:	5802546c 	.word	0x5802546c
 8002958:	58025480 	.word	0x58025480
 800295c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d160      	bne.n	8002a2c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a7f      	ldr	r2, [pc, #508]	; (8002b6c <HAL_DMA_IRQHandler+0xc74>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d04a      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a7d      	ldr	r2, [pc, #500]	; (8002b70 <HAL_DMA_IRQHandler+0xc78>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d045      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a7c      	ldr	r2, [pc, #496]	; (8002b74 <HAL_DMA_IRQHandler+0xc7c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d040      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a7a      	ldr	r2, [pc, #488]	; (8002b78 <HAL_DMA_IRQHandler+0xc80>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d03b      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a79      	ldr	r2, [pc, #484]	; (8002b7c <HAL_DMA_IRQHandler+0xc84>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d036      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a77      	ldr	r2, [pc, #476]	; (8002b80 <HAL_DMA_IRQHandler+0xc88>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d031      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a76      	ldr	r2, [pc, #472]	; (8002b84 <HAL_DMA_IRQHandler+0xc8c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d02c      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a74      	ldr	r2, [pc, #464]	; (8002b88 <HAL_DMA_IRQHandler+0xc90>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d027      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a73      	ldr	r2, [pc, #460]	; (8002b8c <HAL_DMA_IRQHandler+0xc94>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d022      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a71      	ldr	r2, [pc, #452]	; (8002b90 <HAL_DMA_IRQHandler+0xc98>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01d      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a70      	ldr	r2, [pc, #448]	; (8002b94 <HAL_DMA_IRQHandler+0xc9c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d018      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a6e      	ldr	r2, [pc, #440]	; (8002b98 <HAL_DMA_IRQHandler+0xca0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a6d      	ldr	r2, [pc, #436]	; (8002b9c <HAL_DMA_IRQHandler+0xca4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00e      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a6b      	ldr	r2, [pc, #428]	; (8002ba0 <HAL_DMA_IRQHandler+0xca8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a6a      	ldr	r2, [pc, #424]	; (8002ba4 <HAL_DMA_IRQHandler+0xcac>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d004      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xb12>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a68      	ldr	r2, [pc, #416]	; (8002ba8 <HAL_DMA_IRQHandler+0xcb0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d108      	bne.n	8002a1c <HAL_DMA_IRQHandler+0xb24>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0208 	bic.w	r2, r2, #8
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e007      	b.n	8002a2c <HAL_DMA_IRQHandler+0xb34>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0204 	bic.w	r2, r2, #4
 8002a2a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8165 	beq.w	8002d00 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a3e:	e15f      	b.n	8002d00 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2202      	movs	r2, #2
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80c5 	beq.w	8002be0 <HAL_DMA_IRQHandler+0xce8>
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80bf 	beq.w	8002be0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d018      	beq.n	8002aae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 813a 	beq.w	8002d04 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a98:	e134      	b.n	8002d04 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8130 	beq.w	8002d04 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002aac:	e12a      	b.n	8002d04 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 8089 	bne.w	8002bcc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a2b      	ldr	r2, [pc, #172]	; (8002b6c <HAL_DMA_IRQHandler+0xc74>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d04a      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a29      	ldr	r2, [pc, #164]	; (8002b70 <HAL_DMA_IRQHandler+0xc78>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d045      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a28      	ldr	r2, [pc, #160]	; (8002b74 <HAL_DMA_IRQHandler+0xc7c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d040      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a26      	ldr	r2, [pc, #152]	; (8002b78 <HAL_DMA_IRQHandler+0xc80>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d03b      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <HAL_DMA_IRQHandler+0xc84>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d036      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a23      	ldr	r2, [pc, #140]	; (8002b80 <HAL_DMA_IRQHandler+0xc88>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d031      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a22      	ldr	r2, [pc, #136]	; (8002b84 <HAL_DMA_IRQHandler+0xc8c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d02c      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a20      	ldr	r2, [pc, #128]	; (8002b88 <HAL_DMA_IRQHandler+0xc90>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d027      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <HAL_DMA_IRQHandler+0xc94>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d022      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <HAL_DMA_IRQHandler+0xc98>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01d      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1c      	ldr	r2, [pc, #112]	; (8002b94 <HAL_DMA_IRQHandler+0xc9c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d018      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a1a      	ldr	r2, [pc, #104]	; (8002b98 <HAL_DMA_IRQHandler+0xca0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a19      	ldr	r2, [pc, #100]	; (8002b9c <HAL_DMA_IRQHandler+0xca4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00e      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a17      	ldr	r2, [pc, #92]	; (8002ba0 <HAL_DMA_IRQHandler+0xca8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d009      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a16      	ldr	r2, [pc, #88]	; (8002ba4 <HAL_DMA_IRQHandler+0xcac>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d004      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xc62>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <HAL_DMA_IRQHandler+0xcb0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d128      	bne.n	8002bac <HAL_DMA_IRQHandler+0xcb4>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0214 	bic.w	r2, r2, #20
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e027      	b.n	8002bbc <HAL_DMA_IRQHandler+0xcc4>
 8002b6c:	40020010 	.word	0x40020010
 8002b70:	40020028 	.word	0x40020028
 8002b74:	40020040 	.word	0x40020040
 8002b78:	40020058 	.word	0x40020058
 8002b7c:	40020070 	.word	0x40020070
 8002b80:	40020088 	.word	0x40020088
 8002b84:	400200a0 	.word	0x400200a0
 8002b88:	400200b8 	.word	0x400200b8
 8002b8c:	40020410 	.word	0x40020410
 8002b90:	40020428 	.word	0x40020428
 8002b94:	40020440 	.word	0x40020440
 8002b98:	40020458 	.word	0x40020458
 8002b9c:	40020470 	.word	0x40020470
 8002ba0:	40020488 	.word	0x40020488
 8002ba4:	400204a0 	.word	0x400204a0
 8002ba8:	400204b8 	.word	0x400204b8
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 020a 	bic.w	r2, r2, #10
 8002bba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8097 	beq.w	8002d04 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bde:	e091      	b.n	8002d04 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2208      	movs	r2, #8
 8002bea:	409a      	lsls	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8088 	beq.w	8002d06 <HAL_DMA_IRQHandler+0xe0e>
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8082 	beq.w	8002d06 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a41      	ldr	r2, [pc, #260]	; (8002d0c <HAL_DMA_IRQHandler+0xe14>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d04a      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a3f      	ldr	r2, [pc, #252]	; (8002d10 <HAL_DMA_IRQHandler+0xe18>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d045      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a3e      	ldr	r2, [pc, #248]	; (8002d14 <HAL_DMA_IRQHandler+0xe1c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d040      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a3c      	ldr	r2, [pc, #240]	; (8002d18 <HAL_DMA_IRQHandler+0xe20>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d03b      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a3b      	ldr	r2, [pc, #236]	; (8002d1c <HAL_DMA_IRQHandler+0xe24>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d036      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a39      	ldr	r2, [pc, #228]	; (8002d20 <HAL_DMA_IRQHandler+0xe28>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d031      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a38      	ldr	r2, [pc, #224]	; (8002d24 <HAL_DMA_IRQHandler+0xe2c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d02c      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a36      	ldr	r2, [pc, #216]	; (8002d28 <HAL_DMA_IRQHandler+0xe30>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d027      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a35      	ldr	r2, [pc, #212]	; (8002d2c <HAL_DMA_IRQHandler+0xe34>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d022      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a33      	ldr	r2, [pc, #204]	; (8002d30 <HAL_DMA_IRQHandler+0xe38>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01d      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a32      	ldr	r2, [pc, #200]	; (8002d34 <HAL_DMA_IRQHandler+0xe3c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d018      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a30      	ldr	r2, [pc, #192]	; (8002d38 <HAL_DMA_IRQHandler+0xe40>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <HAL_DMA_IRQHandler+0xe44>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00e      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2d      	ldr	r2, [pc, #180]	; (8002d40 <HAL_DMA_IRQHandler+0xe48>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2c      	ldr	r2, [pc, #176]	; (8002d44 <HAL_DMA_IRQHandler+0xe4c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xdaa>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <HAL_DMA_IRQHandler+0xe50>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d108      	bne.n	8002cb4 <HAL_DMA_IRQHandler+0xdbc>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 021c 	bic.w	r2, r2, #28
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	e007      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xdcc>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 020e 	bic.w	r2, r2, #14
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2201      	movs	r2, #1
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
 8002cfa:	e004      	b.n	8002d06 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002cfc:	bf00      	nop
 8002cfe:	e002      	b.n	8002d06 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d00:	bf00      	nop
 8002d02:	e000      	b.n	8002d06 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d04:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002d06:	3728      	adds	r7, #40	; 0x28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40020010 	.word	0x40020010
 8002d10:	40020028 	.word	0x40020028
 8002d14:	40020040 	.word	0x40020040
 8002d18:	40020058 	.word	0x40020058
 8002d1c:	40020070 	.word	0x40020070
 8002d20:	40020088 	.word	0x40020088
 8002d24:	400200a0 	.word	0x400200a0
 8002d28:	400200b8 	.word	0x400200b8
 8002d2c:	40020410 	.word	0x40020410
 8002d30:	40020428 	.word	0x40020428
 8002d34:	40020440 	.word	0x40020440
 8002d38:	40020458 	.word	0x40020458
 8002d3c:	40020470 	.word	0x40020470
 8002d40:	40020488 	.word	0x40020488
 8002d44:	400204a0 	.word	0x400204a0
 8002d48:	400204b8 	.word	0x400204b8

08002d4c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7f      	ldr	r2, [pc, #508]	; (8002f80 <DMA_SetConfig+0x21c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d072      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a7d      	ldr	r2, [pc, #500]	; (8002f84 <DMA_SetConfig+0x220>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d06d      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7c      	ldr	r2, [pc, #496]	; (8002f88 <DMA_SetConfig+0x224>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d068      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a7a      	ldr	r2, [pc, #488]	; (8002f8c <DMA_SetConfig+0x228>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d063      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a79      	ldr	r2, [pc, #484]	; (8002f90 <DMA_SetConfig+0x22c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d05e      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a77      	ldr	r2, [pc, #476]	; (8002f94 <DMA_SetConfig+0x230>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d059      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a76      	ldr	r2, [pc, #472]	; (8002f98 <DMA_SetConfig+0x234>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d054      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a74      	ldr	r2, [pc, #464]	; (8002f9c <DMA_SetConfig+0x238>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d04f      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a73      	ldr	r2, [pc, #460]	; (8002fa0 <DMA_SetConfig+0x23c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d04a      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a71      	ldr	r2, [pc, #452]	; (8002fa4 <DMA_SetConfig+0x240>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d045      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a70      	ldr	r2, [pc, #448]	; (8002fa8 <DMA_SetConfig+0x244>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d040      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a6e      	ldr	r2, [pc, #440]	; (8002fac <DMA_SetConfig+0x248>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d03b      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6d      	ldr	r2, [pc, #436]	; (8002fb0 <DMA_SetConfig+0x24c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d036      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a6b      	ldr	r2, [pc, #428]	; (8002fb4 <DMA_SetConfig+0x250>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d031      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a6a      	ldr	r2, [pc, #424]	; (8002fb8 <DMA_SetConfig+0x254>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d02c      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a68      	ldr	r2, [pc, #416]	; (8002fbc <DMA_SetConfig+0x258>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d027      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a67      	ldr	r2, [pc, #412]	; (8002fc0 <DMA_SetConfig+0x25c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d022      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a65      	ldr	r2, [pc, #404]	; (8002fc4 <DMA_SetConfig+0x260>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01d      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a64      	ldr	r2, [pc, #400]	; (8002fc8 <DMA_SetConfig+0x264>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d018      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a62      	ldr	r2, [pc, #392]	; (8002fcc <DMA_SetConfig+0x268>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a61      	ldr	r2, [pc, #388]	; (8002fd0 <DMA_SetConfig+0x26c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a5f      	ldr	r2, [pc, #380]	; (8002fd4 <DMA_SetConfig+0x270>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d009      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a5e      	ldr	r2, [pc, #376]	; (8002fd8 <DMA_SetConfig+0x274>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <DMA_SetConfig+0x10a>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a5c      	ldr	r2, [pc, #368]	; (8002fdc <DMA_SetConfig+0x278>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <DMA_SetConfig+0x10e>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <DMA_SetConfig+0x110>
 8002e72:	2300      	movs	r3, #0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00d      	beq.n	8002e94 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e80:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e92:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a39      	ldr	r2, [pc, #228]	; (8002f80 <DMA_SetConfig+0x21c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d04a      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a38      	ldr	r2, [pc, #224]	; (8002f84 <DMA_SetConfig+0x220>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d045      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a36      	ldr	r2, [pc, #216]	; (8002f88 <DMA_SetConfig+0x224>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d040      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a35      	ldr	r2, [pc, #212]	; (8002f8c <DMA_SetConfig+0x228>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d03b      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a33      	ldr	r2, [pc, #204]	; (8002f90 <DMA_SetConfig+0x22c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d036      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a32      	ldr	r2, [pc, #200]	; (8002f94 <DMA_SetConfig+0x230>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d031      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a30      	ldr	r2, [pc, #192]	; (8002f98 <DMA_SetConfig+0x234>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d02c      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2f      	ldr	r2, [pc, #188]	; (8002f9c <DMA_SetConfig+0x238>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d027      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a2d      	ldr	r2, [pc, #180]	; (8002fa0 <DMA_SetConfig+0x23c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d022      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <DMA_SetConfig+0x240>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d01d      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2a      	ldr	r2, [pc, #168]	; (8002fa8 <DMA_SetConfig+0x244>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d018      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a29      	ldr	r2, [pc, #164]	; (8002fac <DMA_SetConfig+0x248>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d013      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a27      	ldr	r2, [pc, #156]	; (8002fb0 <DMA_SetConfig+0x24c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00e      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <DMA_SetConfig+0x250>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d009      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a24      	ldr	r2, [pc, #144]	; (8002fb8 <DMA_SetConfig+0x254>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d004      	beq.n	8002f34 <DMA_SetConfig+0x1d0>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <DMA_SetConfig+0x258>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d101      	bne.n	8002f38 <DMA_SetConfig+0x1d4>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <DMA_SetConfig+0x1d6>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d059      	beq.n	8002ff2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	223f      	movs	r2, #63	; 0x3f
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f5c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d138      	bne.n	8002fe0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002f7e:	e086      	b.n	800308e <DMA_SetConfig+0x32a>
 8002f80:	40020010 	.word	0x40020010
 8002f84:	40020028 	.word	0x40020028
 8002f88:	40020040 	.word	0x40020040
 8002f8c:	40020058 	.word	0x40020058
 8002f90:	40020070 	.word	0x40020070
 8002f94:	40020088 	.word	0x40020088
 8002f98:	400200a0 	.word	0x400200a0
 8002f9c:	400200b8 	.word	0x400200b8
 8002fa0:	40020410 	.word	0x40020410
 8002fa4:	40020428 	.word	0x40020428
 8002fa8:	40020440 	.word	0x40020440
 8002fac:	40020458 	.word	0x40020458
 8002fb0:	40020470 	.word	0x40020470
 8002fb4:	40020488 	.word	0x40020488
 8002fb8:	400204a0 	.word	0x400204a0
 8002fbc:	400204b8 	.word	0x400204b8
 8002fc0:	58025408 	.word	0x58025408
 8002fc4:	5802541c 	.word	0x5802541c
 8002fc8:	58025430 	.word	0x58025430
 8002fcc:	58025444 	.word	0x58025444
 8002fd0:	58025458 	.word	0x58025458
 8002fd4:	5802546c 	.word	0x5802546c
 8002fd8:	58025480 	.word	0x58025480
 8002fdc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	60da      	str	r2, [r3, #12]
}
 8002ff0:	e04d      	b.n	800308e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a29      	ldr	r2, [pc, #164]	; (800309c <DMA_SetConfig+0x338>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d022      	beq.n	8003042 <DMA_SetConfig+0x2de>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a27      	ldr	r2, [pc, #156]	; (80030a0 <DMA_SetConfig+0x33c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01d      	beq.n	8003042 <DMA_SetConfig+0x2de>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a26      	ldr	r2, [pc, #152]	; (80030a4 <DMA_SetConfig+0x340>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d018      	beq.n	8003042 <DMA_SetConfig+0x2de>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <DMA_SetConfig+0x344>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <DMA_SetConfig+0x2de>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a23      	ldr	r2, [pc, #140]	; (80030ac <DMA_SetConfig+0x348>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00e      	beq.n	8003042 <DMA_SetConfig+0x2de>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a21      	ldr	r2, [pc, #132]	; (80030b0 <DMA_SetConfig+0x34c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d009      	beq.n	8003042 <DMA_SetConfig+0x2de>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a20      	ldr	r2, [pc, #128]	; (80030b4 <DMA_SetConfig+0x350>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d004      	beq.n	8003042 <DMA_SetConfig+0x2de>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <DMA_SetConfig+0x354>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <DMA_SetConfig+0x2e2>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <DMA_SetConfig+0x2e4>
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d020      	beq.n	800308e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2201      	movs	r2, #1
 8003056:	409a      	lsls	r2, r3
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	d108      	bne.n	800307e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	60da      	str	r2, [r3, #12]
}
 800307c:	e007      	b.n	800308e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	60da      	str	r2, [r3, #12]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	58025408 	.word	0x58025408
 80030a0:	5802541c 	.word	0x5802541c
 80030a4:	58025430 	.word	0x58025430
 80030a8:	58025444 	.word	0x58025444
 80030ac:	58025458 	.word	0x58025458
 80030b0:	5802546c 	.word	0x5802546c
 80030b4:	58025480 	.word	0x58025480
 80030b8:	58025494 	.word	0x58025494

080030bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a42      	ldr	r2, [pc, #264]	; (80031d4 <DMA_CalcBaseAndBitshift+0x118>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d04a      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a41      	ldr	r2, [pc, #260]	; (80031d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d045      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a3f      	ldr	r2, [pc, #252]	; (80031dc <DMA_CalcBaseAndBitshift+0x120>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d040      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a3e      	ldr	r2, [pc, #248]	; (80031e0 <DMA_CalcBaseAndBitshift+0x124>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d03b      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a3c      	ldr	r2, [pc, #240]	; (80031e4 <DMA_CalcBaseAndBitshift+0x128>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d036      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a3b      	ldr	r2, [pc, #236]	; (80031e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d031      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a39      	ldr	r2, [pc, #228]	; (80031ec <DMA_CalcBaseAndBitshift+0x130>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02c      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a38      	ldr	r2, [pc, #224]	; (80031f0 <DMA_CalcBaseAndBitshift+0x134>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d027      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a36      	ldr	r2, [pc, #216]	; (80031f4 <DMA_CalcBaseAndBitshift+0x138>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d022      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a35      	ldr	r2, [pc, #212]	; (80031f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d01d      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a33      	ldr	r2, [pc, #204]	; (80031fc <DMA_CalcBaseAndBitshift+0x140>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d018      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a32      	ldr	r2, [pc, #200]	; (8003200 <DMA_CalcBaseAndBitshift+0x144>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a30      	ldr	r2, [pc, #192]	; (8003204 <DMA_CalcBaseAndBitshift+0x148>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a2f      	ldr	r2, [pc, #188]	; (8003208 <DMA_CalcBaseAndBitshift+0x14c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2d      	ldr	r2, [pc, #180]	; (800320c <DMA_CalcBaseAndBitshift+0x150>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <DMA_CalcBaseAndBitshift+0xa8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2c      	ldr	r2, [pc, #176]	; (8003210 <DMA_CalcBaseAndBitshift+0x154>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <DMA_CalcBaseAndBitshift+0xac>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <DMA_CalcBaseAndBitshift+0xae>
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d024      	beq.n	80031b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3b10      	subs	r3, #16
 8003176:	4a27      	ldr	r2, [pc, #156]	; (8003214 <DMA_CalcBaseAndBitshift+0x158>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	4a24      	ldr	r2, [pc, #144]	; (8003218 <DMA_CalcBaseAndBitshift+0x15c>)
 8003188:	5cd3      	ldrb	r3, [r2, r3]
 800318a:	461a      	mov	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d908      	bls.n	80031a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	4b1f      	ldr	r3, [pc, #124]	; (800321c <DMA_CalcBaseAndBitshift+0x160>)
 800319e:	4013      	ands	r3, r2
 80031a0:	1d1a      	adds	r2, r3, #4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	659a      	str	r2, [r3, #88]	; 0x58
 80031a6:	e00d      	b.n	80031c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b1b      	ldr	r3, [pc, #108]	; (800321c <DMA_CalcBaseAndBitshift+0x160>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6593      	str	r3, [r2, #88]	; 0x58
 80031b6:	e005      	b.n	80031c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40020010 	.word	0x40020010
 80031d8:	40020028 	.word	0x40020028
 80031dc:	40020040 	.word	0x40020040
 80031e0:	40020058 	.word	0x40020058
 80031e4:	40020070 	.word	0x40020070
 80031e8:	40020088 	.word	0x40020088
 80031ec:	400200a0 	.word	0x400200a0
 80031f0:	400200b8 	.word	0x400200b8
 80031f4:	40020410 	.word	0x40020410
 80031f8:	40020428 	.word	0x40020428
 80031fc:	40020440 	.word	0x40020440
 8003200:	40020458 	.word	0x40020458
 8003204:	40020470 	.word	0x40020470
 8003208:	40020488 	.word	0x40020488
 800320c:	400204a0 	.word	0x400204a0
 8003210:	400204b8 	.word	0x400204b8
 8003214:	aaaaaaab 	.word	0xaaaaaaab
 8003218:	0800868c 	.word	0x0800868c
 800321c:	fffffc00 	.word	0xfffffc00

08003220 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d120      	bne.n	8003276 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	2b03      	cmp	r3, #3
 800323a:	d858      	bhi.n	80032ee <DMA_CheckFifoParam+0xce>
 800323c:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <DMA_CheckFifoParam+0x24>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	08003255 	.word	0x08003255
 8003248:	08003267 	.word	0x08003267
 800324c:	08003255 	.word	0x08003255
 8003250:	080032ef 	.word	0x080032ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d048      	beq.n	80032f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003264:	e045      	b.n	80032f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800326e:	d142      	bne.n	80032f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003274:	e03f      	b.n	80032f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800327e:	d123      	bne.n	80032c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	2b03      	cmp	r3, #3
 8003286:	d838      	bhi.n	80032fa <DMA_CheckFifoParam+0xda>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <DMA_CheckFifoParam+0x70>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032a1 	.word	0x080032a1
 8003294:	080032a7 	.word	0x080032a7
 8003298:	080032a1 	.word	0x080032a1
 800329c:	080032b9 	.word	0x080032b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
        break;
 80032a4:	e030      	b.n	8003308 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d025      	beq.n	80032fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80032b6:	e022      	b.n	80032fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032c0:	d11f      	bne.n	8003302 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80032c6:	e01c      	b.n	8003302 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d902      	bls.n	80032d6 <DMA_CheckFifoParam+0xb6>
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d003      	beq.n	80032dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80032d4:	e018      	b.n	8003308 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	73fb      	strb	r3, [r7, #15]
        break;
 80032da:	e015      	b.n	8003308 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00e      	beq.n	8003306 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
    break;
 80032ec:	e00b      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
        break;
 80032ee:	bf00      	nop
 80032f0:	e00a      	b.n	8003308 <DMA_CheckFifoParam+0xe8>
        break;
 80032f2:	bf00      	nop
 80032f4:	e008      	b.n	8003308 <DMA_CheckFifoParam+0xe8>
        break;
 80032f6:	bf00      	nop
 80032f8:	e006      	b.n	8003308 <DMA_CheckFifoParam+0xe8>
        break;
 80032fa:	bf00      	nop
 80032fc:	e004      	b.n	8003308 <DMA_CheckFifoParam+0xe8>
        break;
 80032fe:	bf00      	nop
 8003300:	e002      	b.n	8003308 <DMA_CheckFifoParam+0xe8>
        break;
 8003302:	bf00      	nop
 8003304:	e000      	b.n	8003308 <DMA_CheckFifoParam+0xe8>
    break;
 8003306:	bf00      	nop
    }
  }

  return status;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop

08003318 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a38      	ldr	r2, [pc, #224]	; (800340c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d022      	beq.n	8003376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a36      	ldr	r2, [pc, #216]	; (8003410 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01d      	beq.n	8003376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a35      	ldr	r2, [pc, #212]	; (8003414 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d018      	beq.n	8003376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a33      	ldr	r2, [pc, #204]	; (8003418 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a32      	ldr	r2, [pc, #200]	; (800341c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00e      	beq.n	8003376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a30      	ldr	r2, [pc, #192]	; (8003420 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d009      	beq.n	8003376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2f      	ldr	r2, [pc, #188]	; (8003424 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d004      	beq.n	8003376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2d      	ldr	r2, [pc, #180]	; (8003428 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01a      	beq.n	80033b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3b08      	subs	r3, #8
 8003388:	4a28      	ldr	r2, [pc, #160]	; (800342c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4b26      	ldr	r3, [pc, #152]	; (8003430 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	461a      	mov	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a24      	ldr	r2, [pc, #144]	; (8003434 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80033a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	2201      	movs	r2, #1
 80033ae:	409a      	lsls	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80033b4:	e024      	b.n	8003400 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3b10      	subs	r3, #16
 80033be:	4a1e      	ldr	r2, [pc, #120]	; (8003438 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4a1c      	ldr	r2, [pc, #112]	; (800343c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d806      	bhi.n	80033de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d902      	bls.n	80033de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3308      	adds	r3, #8
 80033dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4b18      	ldr	r3, [pc, #96]	; (8003444 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a16      	ldr	r2, [pc, #88]	; (8003448 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80033f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2201      	movs	r2, #1
 80033fa:	409a      	lsls	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	58025408 	.word	0x58025408
 8003410:	5802541c 	.word	0x5802541c
 8003414:	58025430 	.word	0x58025430
 8003418:	58025444 	.word	0x58025444
 800341c:	58025458 	.word	0x58025458
 8003420:	5802546c 	.word	0x5802546c
 8003424:	58025480 	.word	0x58025480
 8003428:	58025494 	.word	0x58025494
 800342c:	cccccccd 	.word	0xcccccccd
 8003430:	16009600 	.word	0x16009600
 8003434:	58025880 	.word	0x58025880
 8003438:	aaaaaaab 	.word	0xaaaaaaab
 800343c:	400204b8 	.word	0x400204b8
 8003440:	4002040f 	.word	0x4002040f
 8003444:	10008200 	.word	0x10008200
 8003448:	40020880 	.word	0x40020880

0800344c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d04a      	beq.n	80034f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d847      	bhi.n	80034f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a25      	ldr	r2, [pc, #148]	; (8003504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d022      	beq.n	80034b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a24      	ldr	r2, [pc, #144]	; (8003508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d01d      	beq.n	80034b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a22      	ldr	r2, [pc, #136]	; (800350c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d018      	beq.n	80034b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a21      	ldr	r2, [pc, #132]	; (8003510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d013      	beq.n	80034b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00e      	beq.n	80034b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1e      	ldr	r2, [pc, #120]	; (8003518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d009      	beq.n	80034b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	; (800351c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1b      	ldr	r2, [pc, #108]	; (8003520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d101      	bne.n	80034bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80034bc:	2300      	movs	r3, #0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4b17      	ldr	r3, [pc, #92]	; (8003524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	461a      	mov	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a15      	ldr	r2, [pc, #84]	; (8003528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80034d4:	671a      	str	r2, [r3, #112]	; 0x70
 80034d6:	e009      	b.n	80034ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4b14      	ldr	r3, [pc, #80]	; (800352c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	461a      	mov	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a11      	ldr	r2, [pc, #68]	; (8003530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80034ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	2201      	movs	r2, #1
 80034f2:	409a      	lsls	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	58025408 	.word	0x58025408
 8003508:	5802541c 	.word	0x5802541c
 800350c:	58025430 	.word	0x58025430
 8003510:	58025444 	.word	0x58025444
 8003514:	58025458 	.word	0x58025458
 8003518:	5802546c 	.word	0x5802546c
 800351c:	58025480 	.word	0x58025480
 8003520:	58025494 	.word	0x58025494
 8003524:	1600963f 	.word	0x1600963f
 8003528:	58025940 	.word	0x58025940
 800352c:	1000823f 	.word	0x1000823f
 8003530:	40020940 	.word	0x40020940

08003534 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003542:	4b86      	ldr	r3, [pc, #536]	; (800375c <HAL_GPIO_Init+0x228>)
 8003544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003546:	e18c      	b.n	8003862 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2101      	movs	r1, #1
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 817e 	beq.w	800385c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d005      	beq.n	8003578 <HAL_GPIO_Init+0x44>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d130      	bne.n	80035da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	2203      	movs	r2, #3
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ae:	2201      	movs	r2, #1
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 0201 	and.w	r2, r3, #1
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d017      	beq.n	8003616 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d123      	bne.n	800366a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	220f      	movs	r2, #15
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	08da      	lsrs	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3208      	adds	r2, #8
 8003664:	69b9      	ldr	r1, [r7, #24]
 8003666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	2203      	movs	r2, #3
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0203 	and.w	r2, r3, #3
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80d8 	beq.w	800385c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ac:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <HAL_GPIO_Init+0x22c>)
 80036ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036b2:	4a2b      	ldr	r2, [pc, #172]	; (8003760 <HAL_GPIO_Init+0x22c>)
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80036bc:	4b28      	ldr	r3, [pc, #160]	; (8003760 <HAL_GPIO_Init+0x22c>)
 80036be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ca:	4a26      	ldr	r2, [pc, #152]	; (8003764 <HAL_GPIO_Init+0x230>)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	3302      	adds	r3, #2
 80036d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	220f      	movs	r2, #15
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_GPIO_Init+0x234>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d04a      	beq.n	800378c <HAL_GPIO_Init+0x258>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a1c      	ldr	r2, [pc, #112]	; (800376c <HAL_GPIO_Init+0x238>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d02b      	beq.n	8003756 <HAL_GPIO_Init+0x222>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1b      	ldr	r2, [pc, #108]	; (8003770 <HAL_GPIO_Init+0x23c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d025      	beq.n	8003752 <HAL_GPIO_Init+0x21e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a1a      	ldr	r2, [pc, #104]	; (8003774 <HAL_GPIO_Init+0x240>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01f      	beq.n	800374e <HAL_GPIO_Init+0x21a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a19      	ldr	r2, [pc, #100]	; (8003778 <HAL_GPIO_Init+0x244>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d019      	beq.n	800374a <HAL_GPIO_Init+0x216>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a18      	ldr	r2, [pc, #96]	; (800377c <HAL_GPIO_Init+0x248>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_GPIO_Init+0x212>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <HAL_GPIO_Init+0x24c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00d      	beq.n	8003742 <HAL_GPIO_Init+0x20e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a16      	ldr	r2, [pc, #88]	; (8003784 <HAL_GPIO_Init+0x250>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <HAL_GPIO_Init+0x20a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a15      	ldr	r2, [pc, #84]	; (8003788 <HAL_GPIO_Init+0x254>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d101      	bne.n	800373a <HAL_GPIO_Init+0x206>
 8003736:	2309      	movs	r3, #9
 8003738:	e029      	b.n	800378e <HAL_GPIO_Init+0x25a>
 800373a:	230a      	movs	r3, #10
 800373c:	e027      	b.n	800378e <HAL_GPIO_Init+0x25a>
 800373e:	2307      	movs	r3, #7
 8003740:	e025      	b.n	800378e <HAL_GPIO_Init+0x25a>
 8003742:	2306      	movs	r3, #6
 8003744:	e023      	b.n	800378e <HAL_GPIO_Init+0x25a>
 8003746:	2305      	movs	r3, #5
 8003748:	e021      	b.n	800378e <HAL_GPIO_Init+0x25a>
 800374a:	2304      	movs	r3, #4
 800374c:	e01f      	b.n	800378e <HAL_GPIO_Init+0x25a>
 800374e:	2303      	movs	r3, #3
 8003750:	e01d      	b.n	800378e <HAL_GPIO_Init+0x25a>
 8003752:	2302      	movs	r3, #2
 8003754:	e01b      	b.n	800378e <HAL_GPIO_Init+0x25a>
 8003756:	2301      	movs	r3, #1
 8003758:	e019      	b.n	800378e <HAL_GPIO_Init+0x25a>
 800375a:	bf00      	nop
 800375c:	58000080 	.word	0x58000080
 8003760:	58024400 	.word	0x58024400
 8003764:	58000400 	.word	0x58000400
 8003768:	58020000 	.word	0x58020000
 800376c:	58020400 	.word	0x58020400
 8003770:	58020800 	.word	0x58020800
 8003774:	58020c00 	.word	0x58020c00
 8003778:	58021000 	.word	0x58021000
 800377c:	58021400 	.word	0x58021400
 8003780:	58021800 	.word	0x58021800
 8003784:	58021c00 	.word	0x58021c00
 8003788:	58022400 	.word	0x58022400
 800378c:	2300      	movs	r3, #0
 800378e:	69fa      	ldr	r2, [r7, #28]
 8003790:	f002 0203 	and.w	r2, r2, #3
 8003794:	0092      	lsls	r2, r2, #2
 8003796:	4093      	lsls	r3, r2
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800379e:	4938      	ldr	r1, [pc, #224]	; (8003880 <HAL_GPIO_Init+0x34c>)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	089b      	lsrs	r3, r3, #2
 80037a4:	3302      	adds	r3, #2
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4013      	ands	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80037d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	3301      	adds	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	f47f ae6b 	bne.w	8003548 <HAL_GPIO_Init+0x14>
  }
}
 8003872:	bf00      	nop
 8003874:	bf00      	nop
 8003876:	3724      	adds	r7, #36	; 0x24
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	58000400 	.word	0x58000400

08003884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
 8003890:	4613      	mov	r3, r2
 8003892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003894:	787b      	ldrb	r3, [r7, #1]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800389a:	887a      	ldrh	r2, [r7, #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038a0:	e003      	b.n	80038aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038a2:	887b      	ldrh	r3, [r7, #2]
 80038a4:	041a      	lsls	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	619a      	str	r2, [r3, #24]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038c0:	4b19      	ldr	r3, [pc, #100]	; (8003928 <HAL_PWREx_ConfigSupply+0x70>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d00a      	beq.n	80038e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038cc:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_PWREx_ConfigSupply+0x70>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d001      	beq.n	80038de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e01f      	b.n	800391e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	e01d      	b.n	800391e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <HAL_PWREx_ConfigSupply+0x70>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f023 0207 	bic.w	r2, r3, #7
 80038ea:	490f      	ldr	r1, [pc, #60]	; (8003928 <HAL_PWREx_ConfigSupply+0x70>)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038f2:	f7fd fb87 	bl	8001004 <HAL_GetTick>
 80038f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038f8:	e009      	b.n	800390e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038fa:	f7fd fb83 	bl	8001004 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003908:	d901      	bls.n	800390e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e007      	b.n	800391e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_PWREx_ConfigSupply+0x70>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391a:	d1ee      	bne.n	80038fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	58024800 	.word	0x58024800

0800392c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	; 0x30
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e3c8      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8087 	beq.w	8003a5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394c:	4b88      	ldr	r3, [pc, #544]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003956:	4b86      	ldr	r3, [pc, #536]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	2b10      	cmp	r3, #16
 8003960:	d007      	beq.n	8003972 <HAL_RCC_OscConfig+0x46>
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	2b18      	cmp	r3, #24
 8003966:	d110      	bne.n	800398a <HAL_RCC_OscConfig+0x5e>
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d10b      	bne.n	800398a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003972:	4b7f      	ldr	r3, [pc, #508]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d06c      	beq.n	8003a58 <HAL_RCC_OscConfig+0x12c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d168      	bne.n	8003a58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e3a2      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x76>
 8003994:	4b76      	ldr	r3, [pc, #472]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a75      	ldr	r2, [pc, #468]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 800399a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	e02e      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x98>
 80039aa:	4b71      	ldr	r3, [pc, #452]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a70      	ldr	r2, [pc, #448]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b6e      	ldr	r3, [pc, #440]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6d      	ldr	r2, [pc, #436]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e01d      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0xbc>
 80039ce:	4b68      	ldr	r3, [pc, #416]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a67      	ldr	r2, [pc, #412]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a64      	ldr	r2, [pc, #400]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e00b      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039e8:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a60      	ldr	r2, [pc, #384]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b5e      	ldr	r3, [pc, #376]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a5d      	ldr	r2, [pc, #372]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd fafc 	bl	8001004 <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fd faf8 	bl	8001004 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e356      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a22:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0xe4>
 8003a2e:	e014      	b.n	8003a5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fae8 	bl	8001004 <HAL_GetTick>
 8003a34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fd fae4 	bl	8001004 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e342      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a4a:	4b49      	ldr	r3, [pc, #292]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x10c>
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 808c 	beq.w	8003b80 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a68:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a72:	4b3f      	ldr	r3, [pc, #252]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_RCC_OscConfig+0x162>
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	2b18      	cmp	r3, #24
 8003a82:	d137      	bne.n	8003af4 <HAL_RCC_OscConfig+0x1c8>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d132      	bne.n	8003af4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a8e:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x17a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e314      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003aa6:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0219 	bic.w	r2, r3, #25
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	492f      	ldr	r1, [pc, #188]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd faa4 	bl	8001004 <HAL_GetTick>
 8003abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac0:	f7fd faa0 	bl	8001004 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e2fe      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad2:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	061b      	lsls	r3, r3, #24
 8003aec:	4920      	ldr	r1, [pc, #128]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af2:	e045      	b.n	8003b80 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d026      	beq.n	8003b4a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003afc:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 0219 	bic.w	r2, r3, #25
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4919      	ldr	r1, [pc, #100]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fd fa79 	bl	8001004 <HAL_GetTick>
 8003b12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b16:	f7fd fa75 	bl	8001004 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e2d3      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b34:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	490b      	ldr	r1, [pc, #44]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
 8003b48:	e01a      	b.n	8003b80 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b56:	f7fd fa55 	bl	8001004 <HAL_GetTick>
 8003b5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5e:	f7fd fa51 	bl	8001004 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d903      	bls.n	8003b74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e2af      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
 8003b70:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b74:	4b96      	ldr	r3, [pc, #600]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ee      	bne.n	8003b5e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d06a      	beq.n	8003c62 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8c:	4b90      	ldr	r3, [pc, #576]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b94:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b96:	4b8e      	ldr	r3, [pc, #568]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d007      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x286>
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b18      	cmp	r3, #24
 8003ba6:	d11b      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2b4>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d116      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bb2:	4b87      	ldr	r3, [pc, #540]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_RCC_OscConfig+0x29e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	2b80      	cmp	r3, #128	; 0x80
 8003bc4:	d001      	beq.n	8003bca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e282      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bca:	4b81      	ldr	r3, [pc, #516]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	061b      	lsls	r3, r3, #24
 8003bd8:	497d      	ldr	r1, [pc, #500]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bde:	e040      	b.n	8003c62 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d023      	beq.n	8003c30 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003be8:	4b79      	ldr	r3, [pc, #484]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a78      	ldr	r2, [pc, #480]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fd fa06 	bl	8001004 <HAL_GetTick>
 8003bf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bfc:	f7fd fa02 	bl	8001004 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e260      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c0e:	4b70      	ldr	r3, [pc, #448]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c1a:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	061b      	lsls	r3, r3, #24
 8003c28:	4969      	ldr	r1, [pc, #420]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60cb      	str	r3, [r1, #12]
 8003c2e:	e018      	b.n	8003c62 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c30:	4b67      	ldr	r3, [pc, #412]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a66      	ldr	r2, [pc, #408]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fd f9e2 	bl	8001004 <HAL_GetTick>
 8003c40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c44:	f7fd f9de 	bl	8001004 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e23c      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c56:	4b5e      	ldr	r3, [pc, #376]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d036      	beq.n	8003cdc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d019      	beq.n	8003caa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c76:	4b56      	ldr	r3, [pc, #344]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7a:	4a55      	ldr	r2, [pc, #340]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c82:	f7fd f9bf 	bl	8001004 <HAL_GetTick>
 8003c86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8a:	f7fd f9bb 	bl	8001004 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e219      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c9c:	4b4c      	ldr	r3, [pc, #304]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x35e>
 8003ca8:	e018      	b.n	8003cdc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003caa:	4b49      	ldr	r3, [pc, #292]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cae:	4a48      	ldr	r2, [pc, #288]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb6:	f7fd f9a5 	bl	8001004 <HAL_GetTick>
 8003cba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cbe:	f7fd f9a1 	bl	8001004 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e1ff      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d036      	beq.n	8003d56 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d019      	beq.n	8003d24 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cf0:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a36      	ldr	r2, [pc, #216]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003cf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cfc:	f7fd f982 	bl	8001004 <HAL_GetTick>
 8003d00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d04:	f7fd f97e 	bl	8001004 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e1dc      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d16:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x3d8>
 8003d22:	e018      	b.n	8003d56 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d24:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a29      	ldr	r2, [pc, #164]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d30:	f7fd f968 	bl	8001004 <HAL_GetTick>
 8003d34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d38:	f7fd f964 	bl	8001004 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e1c2      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d4a:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8086 	beq.w	8003e70 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x4a8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1a      	ldr	r2, [pc, #104]	; (8003dd4 <HAL_RCC_OscConfig+0x4a8>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d70:	f7fd f948 	bl	8001004 <HAL_GetTick>
 8003d74:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fd f944 	bl	8001004 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1a2      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <HAL_RCC_OscConfig+0x4a8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d106      	bne.n	8003dac <HAL_RCC_OscConfig+0x480>
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	4a0b      	ldr	r2, [pc, #44]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	6713      	str	r3, [r2, #112]	; 0x70
 8003daa:	e032      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e6>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d111      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x4ac>
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc0:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	4a02      	ldr	r2, [pc, #8]	; (8003dd0 <HAL_RCC_OscConfig+0x4a4>)
 8003dc6:	f023 0304 	bic.w	r3, r3, #4
 8003dca:	6713      	str	r3, [r2, #112]	; 0x70
 8003dcc:	e021      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e6>
 8003dce:	bf00      	nop
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	58024800 	.word	0x58024800
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d10c      	bne.n	8003dfa <HAL_RCC_OscConfig+0x4ce>
 8003de0:	4b83      	ldr	r3, [pc, #524]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4a82      	ldr	r2, [pc, #520]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003de6:	f043 0304 	orr.w	r3, r3, #4
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
 8003dec:	4b80      	ldr	r3, [pc, #512]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	4a7f      	ldr	r2, [pc, #508]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6713      	str	r3, [r2, #112]	; 0x70
 8003df8:	e00b      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e6>
 8003dfa:	4b7d      	ldr	r3, [pc, #500]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a7c      	ldr	r2, [pc, #496]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
 8003e06:	4b7a      	ldr	r3, [pc, #488]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	4a79      	ldr	r2, [pc, #484]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e0c:	f023 0304 	bic.w	r3, r3, #4
 8003e10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d015      	beq.n	8003e46 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1a:	f7fd f8f3 	bl	8001004 <HAL_GetTick>
 8003e1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e22:	f7fd f8ef 	bl	8001004 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e14b      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e38:	4b6d      	ldr	r3, [pc, #436]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ee      	beq.n	8003e22 <HAL_RCC_OscConfig+0x4f6>
 8003e44:	e014      	b.n	8003e70 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e46:	f7fd f8dd 	bl	8001004 <HAL_GetTick>
 8003e4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fd f8d9 	bl	8001004 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e135      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e64:	4b62      	ldr	r3, [pc, #392]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1ee      	bne.n	8003e4e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 812a 	beq.w	80040ce <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e7a:	4b5d      	ldr	r3, [pc, #372]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e82:	2b18      	cmp	r3, #24
 8003e84:	f000 80ba 	beq.w	8003ffc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	f040 8095 	bne.w	8003fbc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e92:	4b57      	ldr	r3, [pc, #348]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a56      	ldr	r2, [pc, #344]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fd f8b1 	bl	8001004 <HAL_GetTick>
 8003ea2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea6:	f7fd f8ad 	bl	8001004 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e10b      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eb8:	4b4d      	ldr	r3, [pc, #308]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f0      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec4:	4b4a      	ldr	r3, [pc, #296]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ec8:	4b4a      	ldr	r3, [pc, #296]	; (8003ff4 <HAL_RCC_OscConfig+0x6c8>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ed4:	0112      	lsls	r2, r2, #4
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	4945      	ldr	r1, [pc, #276]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	628b      	str	r3, [r1, #40]	; 0x28
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eec:	3b01      	subs	r3, #1
 8003eee:	025b      	lsls	r3, r3, #9
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	3b01      	subs	r3, #1
 8003f08:	061b      	lsls	r3, r3, #24
 8003f0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f0e:	4938      	ldr	r1, [pc, #224]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f14:	4b36      	ldr	r3, [pc, #216]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	4a35      	ldr	r2, [pc, #212]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f20:	4b33      	ldr	r3, [pc, #204]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f24:	4b34      	ldr	r3, [pc, #208]	; (8003ff8 <HAL_RCC_OscConfig+0x6cc>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f2c:	00d2      	lsls	r2, r2, #3
 8003f2e:	4930      	ldr	r1, [pc, #192]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f34:	4b2e      	ldr	r3, [pc, #184]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	f023 020c 	bic.w	r2, r3, #12
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	492b      	ldr	r1, [pc, #172]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f46:	4b2a      	ldr	r3, [pc, #168]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	f023 0202 	bic.w	r2, r3, #2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	4927      	ldr	r1, [pc, #156]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f58:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	4a24      	ldr	r2, [pc, #144]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f64:	4b22      	ldr	r3, [pc, #136]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	4a21      	ldr	r2, [pc, #132]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f70:	4b1f      	ldr	r3, [pc, #124]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	4a1b      	ldr	r2, [pc, #108]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fd f836 	bl	8001004 <HAL_GetTick>
 8003f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fd f832 	bl	8001004 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e090      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x670>
 8003fba:	e088      	b.n	80040ce <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a0b      	ldr	r2, [pc, #44]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fd f81c 	bl	8001004 <HAL_GetTick>
 8003fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fd f818 	bl	8001004 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e076      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fe2:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <HAL_RCC_OscConfig+0x6c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x6a4>
 8003fee:	e06e      	b.n	80040ce <HAL_RCC_OscConfig+0x7a2>
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	fffffc0c 	.word	0xfffffc0c
 8003ff8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ffc:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004000:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004002:	4b35      	ldr	r3, [pc, #212]	; (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	2b01      	cmp	r3, #1
 800400e:	d031      	beq.n	8004074 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f003 0203 	and.w	r2, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d12a      	bne.n	8004074 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d122      	bne.n	8004074 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d11a      	bne.n	8004074 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	0a5b      	lsrs	r3, r3, #9
 8004042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d111      	bne.n	8004074 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	0c1b      	lsrs	r3, r3, #16
 8004054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d108      	bne.n	8004074 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	0e1b      	lsrs	r3, r3, #24
 8004066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e02b      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004078:	4b17      	ldr	r3, [pc, #92]	; (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 800407a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407c:	08db      	lsrs	r3, r3, #3
 800407e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004082:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	429a      	cmp	r2, r3
 800408c:	d01f      	beq.n	80040ce <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	4a11      	ldr	r2, [pc, #68]	; (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800409a:	f7fc ffb3 	bl	8001004 <HAL_GetTick>
 800409e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040a0:	bf00      	nop
 80040a2:	f7fc ffaf 	bl	8001004 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d0f9      	beq.n	80040a2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 80040b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <HAL_RCC_OscConfig+0x7b0>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040ba:	00d2      	lsls	r2, r2, #3
 80040bc:	4906      	ldr	r1, [pc, #24]	; (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3730      	adds	r7, #48	; 0x30
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	58024400 	.word	0x58024400
 80040dc:	ffff0007 	.word	0xffff0007

080040e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e19c      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f4:	4b8a      	ldr	r3, [pc, #552]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d910      	bls.n	8004124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b87      	ldr	r3, [pc, #540]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 020f 	bic.w	r2, r3, #15
 800410a:	4985      	ldr	r1, [pc, #532]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b83      	ldr	r3, [pc, #524]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e184      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d010      	beq.n	8004152 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	4b7b      	ldr	r3, [pc, #492]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800413c:	429a      	cmp	r2, r3
 800413e:	d908      	bls.n	8004152 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004140:	4b78      	ldr	r3, [pc, #480]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	4975      	ldr	r1, [pc, #468]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 800414e:	4313      	orrs	r3, r2
 8004150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d010      	beq.n	8004180 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	4b70      	ldr	r3, [pc, #448]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800416a:	429a      	cmp	r2, r3
 800416c:	d908      	bls.n	8004180 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800416e:	4b6d      	ldr	r3, [pc, #436]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	496a      	ldr	r1, [pc, #424]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 800417c:	4313      	orrs	r3, r2
 800417e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699a      	ldr	r2, [r3, #24]
 8004190:	4b64      	ldr	r3, [pc, #400]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004198:	429a      	cmp	r2, r3
 800419a:	d908      	bls.n	80041ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800419c:	4b61      	ldr	r3, [pc, #388]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	495e      	ldr	r1, [pc, #376]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	4b59      	ldr	r3, [pc, #356]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d908      	bls.n	80041dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041ca:	4b56      	ldr	r3, [pc, #344]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	4953      	ldr	r1, [pc, #332]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4b4d      	ldr	r3, [pc, #308]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d908      	bls.n	800420a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f8:	4b4a      	ldr	r3, [pc, #296]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f023 020f 	bic.w	r2, r3, #15
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4947      	ldr	r1, [pc, #284]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004206:	4313      	orrs	r3, r2
 8004208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d055      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004216:	4b43      	ldr	r3, [pc, #268]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	4940      	ldr	r1, [pc, #256]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004224:	4313      	orrs	r3, r2
 8004226:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d107      	bne.n	8004240 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004230:	4b3c      	ldr	r3, [pc, #240]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d121      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0f6      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d107      	bne.n	8004258 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004248:	4b36      	ldr	r3, [pc, #216]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d115      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0ea      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d107      	bne.n	8004270 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004260:	4b30      	ldr	r3, [pc, #192]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0de      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004270:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0d6      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004280:	4b28      	ldr	r3, [pc, #160]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f023 0207 	bic.w	r2, r3, #7
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4925      	ldr	r1, [pc, #148]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 800428e:	4313      	orrs	r3, r2
 8004290:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004292:	f7fc feb7 	bl	8001004 <HAL_GetTick>
 8004296:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429a:	f7fc feb3 	bl	8001004 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e0be      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b0:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	429a      	cmp	r2, r3
 80042c0:	d1eb      	bne.n	800429a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d010      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	4b14      	ldr	r3, [pc, #80]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	429a      	cmp	r2, r3
 80042dc:	d208      	bcs.n	80042f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042de:	4b11      	ldr	r3, [pc, #68]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f023 020f 	bic.w	r2, r3, #15
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	490e      	ldr	r1, [pc, #56]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d214      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 020f 	bic.w	r2, r3, #15
 8004306:	4906      	ldr	r1, [pc, #24]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b04      	ldr	r3, [pc, #16]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e086      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
 8004320:	52002000 	.word	0x52002000
 8004324:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	4b3f      	ldr	r3, [pc, #252]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004340:	429a      	cmp	r2, r3
 8004342:	d208      	bcs.n	8004356 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004344:	4b3c      	ldr	r3, [pc, #240]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	4939      	ldr	r1, [pc, #228]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004352:	4313      	orrs	r3, r2
 8004354:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d010      	beq.n	8004384 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	4b34      	ldr	r3, [pc, #208]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800436e:	429a      	cmp	r2, r3
 8004370:	d208      	bcs.n	8004384 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004372:	4b31      	ldr	r3, [pc, #196]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	492e      	ldr	r1, [pc, #184]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004380:	4313      	orrs	r3, r2
 8004382:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	d010      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	4b28      	ldr	r3, [pc, #160]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800439c:	429a      	cmp	r2, r3
 800439e:	d208      	bcs.n	80043b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043a0:	4b25      	ldr	r3, [pc, #148]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	4922      	ldr	r1, [pc, #136]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d010      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d208      	bcs.n	80043e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043ce:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	4917      	ldr	r1, [pc, #92]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043e0:	f000 f834 	bl	800444c <HAL_RCC_GetSysClockFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b14      	ldr	r3, [pc, #80]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	4912      	ldr	r1, [pc, #72]	; (800443c <HAL_RCC_ClockConfig+0x35c>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
 80043fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	4a0d      	ldr	r2, [pc, #52]	; (800443c <HAL_RCC_ClockConfig+0x35c>)
 8004408:	5cd3      	ldrb	r3, [r2, r3]
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
 8004414:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <HAL_RCC_ClockConfig+0x360>)
 8004416:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004418:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <HAL_RCC_ClockConfig+0x364>)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800441e:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <HAL_RCC_ClockConfig+0x368>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fc fda4 	bl	8000f70 <HAL_InitTick>
 8004428:	4603      	mov	r3, r0
 800442a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800442c:	7bfb      	ldrb	r3, [r7, #15]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	58024400 	.word	0x58024400
 800443c:	0800867c 	.word	0x0800867c
 8004440:	24000004 	.word	0x24000004
 8004444:	24000000 	.word	0x24000000
 8004448:	24000008 	.word	0x24000008

0800444c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	b089      	sub	sp, #36	; 0x24
 8004450:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004452:	4bb3      	ldr	r3, [pc, #716]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800445a:	2b18      	cmp	r3, #24
 800445c:	f200 8155 	bhi.w	800470a <HAL_RCC_GetSysClockFreq+0x2be>
 8004460:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	080044cd 	.word	0x080044cd
 800446c:	0800470b 	.word	0x0800470b
 8004470:	0800470b 	.word	0x0800470b
 8004474:	0800470b 	.word	0x0800470b
 8004478:	0800470b 	.word	0x0800470b
 800447c:	0800470b 	.word	0x0800470b
 8004480:	0800470b 	.word	0x0800470b
 8004484:	0800470b 	.word	0x0800470b
 8004488:	080044f3 	.word	0x080044f3
 800448c:	0800470b 	.word	0x0800470b
 8004490:	0800470b 	.word	0x0800470b
 8004494:	0800470b 	.word	0x0800470b
 8004498:	0800470b 	.word	0x0800470b
 800449c:	0800470b 	.word	0x0800470b
 80044a0:	0800470b 	.word	0x0800470b
 80044a4:	0800470b 	.word	0x0800470b
 80044a8:	080044f9 	.word	0x080044f9
 80044ac:	0800470b 	.word	0x0800470b
 80044b0:	0800470b 	.word	0x0800470b
 80044b4:	0800470b 	.word	0x0800470b
 80044b8:	0800470b 	.word	0x0800470b
 80044bc:	0800470b 	.word	0x0800470b
 80044c0:	0800470b 	.word	0x0800470b
 80044c4:	0800470b 	.word	0x0800470b
 80044c8:	080044ff 	.word	0x080044ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044cc:	4b94      	ldr	r3, [pc, #592]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044d8:	4b91      	ldr	r3, [pc, #580]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	4a90      	ldr	r2, [pc, #576]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
 80044e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80044ea:	e111      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044ec:	4b8d      	ldr	r3, [pc, #564]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044ee:	61bb      	str	r3, [r7, #24]
      break;
 80044f0:	e10e      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044f2:	4b8d      	ldr	r3, [pc, #564]	; (8004728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044f4:	61bb      	str	r3, [r7, #24]
      break;
 80044f6:	e10b      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80044f8:	4b8c      	ldr	r3, [pc, #560]	; (800472c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044fa:	61bb      	str	r3, [r7, #24]
      break;
 80044fc:	e108      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044fe:	4b88      	ldr	r3, [pc, #544]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004508:	4b85      	ldr	r3, [pc, #532]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004512:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004514:	4b82      	ldr	r3, [pc, #520]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800451e:	4b80      	ldr	r3, [pc, #512]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004522:	08db      	lsrs	r3, r3, #3
 8004524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80e1 	beq.w	8004704 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b02      	cmp	r3, #2
 8004546:	f000 8083 	beq.w	8004650 <HAL_RCC_GetSysClockFreq+0x204>
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b02      	cmp	r3, #2
 800454e:	f200 80a1 	bhi.w	8004694 <HAL_RCC_GetSysClockFreq+0x248>
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0x114>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d056      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0x1c0>
 800455e:	e099      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004560:	4b6f      	ldr	r3, [pc, #444]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d02d      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800456c:	4b6c      	ldr	r3, [pc, #432]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	08db      	lsrs	r3, r3, #3
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	4a6b      	ldr	r2, [pc, #428]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
 800457c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004596:	4b62      	ldr	r3, [pc, #392]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045c6:	e087      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004734 <HAL_RCC_GetSysClockFreq+0x2e8>
 80045d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045da:	4b51      	ldr	r3, [pc, #324]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800460a:	e065      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004738 <HAL_RCC_GetSysClockFreq+0x2ec>
 800461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461e:	4b40      	ldr	r3, [pc, #256]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004632:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800464e:	e043      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800473c <HAL_RCC_GetSysClockFreq+0x2f0>
 800465e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004662:	4b2f      	ldr	r3, [pc, #188]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004672:	ed97 6a02 	vldr	s12, [r7, #8]
 8004676:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 800467a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004692:	e021      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004738 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a6:	4b1e      	ldr	r3, [pc, #120]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	0a5b      	lsrs	r3, r3, #9
 80046de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e2:	3301      	adds	r3, #1
 80046e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fc:	ee17 3a90 	vmov	r3, s15
 8004700:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004702:	e005      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	61bb      	str	r3, [r7, #24]
      break;
 8004708:	e002      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800470a:	4b07      	ldr	r3, [pc, #28]	; (8004728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800470c:	61bb      	str	r3, [r7, #24]
      break;
 800470e:	bf00      	nop
  }

  return sysclockfreq;
 8004710:	69bb      	ldr	r3, [r7, #24]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3724      	adds	r7, #36	; 0x24
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	58024400 	.word	0x58024400
 8004724:	03d09000 	.word	0x03d09000
 8004728:	003d0900 	.word	0x003d0900
 800472c:	017d7840 	.word	0x017d7840
 8004730:	46000000 	.word	0x46000000
 8004734:	4c742400 	.word	0x4c742400
 8004738:	4a742400 	.word	0x4a742400
 800473c:	4bbebc20 	.word	0x4bbebc20

08004740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004746:	f7ff fe81 	bl	800444c <HAL_RCC_GetSysClockFreq>
 800474a:	4602      	mov	r2, r0
 800474c:	4b10      	ldr	r3, [pc, #64]	; (8004790 <HAL_RCC_GetHCLKFreq+0x50>)
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	0a1b      	lsrs	r3, r3, #8
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	490f      	ldr	r1, [pc, #60]	; (8004794 <HAL_RCC_GetHCLKFreq+0x54>)
 8004758:	5ccb      	ldrb	r3, [r1, r3]
 800475a:	f003 031f 	and.w	r3, r3, #31
 800475e:	fa22 f303 	lsr.w	r3, r2, r3
 8004762:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004764:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <HAL_RCC_GetHCLKFreq+0x50>)
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	4a09      	ldr	r2, [pc, #36]	; (8004794 <HAL_RCC_GetHCLKFreq+0x54>)
 800476e:	5cd3      	ldrb	r3, [r2, r3]
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	fa22 f303 	lsr.w	r3, r2, r3
 800477a:	4a07      	ldr	r2, [pc, #28]	; (8004798 <HAL_RCC_GetHCLKFreq+0x58>)
 800477c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800477e:	4a07      	ldr	r2, [pc, #28]	; (800479c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <HAL_RCC_GetHCLKFreq+0x58>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	58024400 	.word	0x58024400
 8004794:	0800867c 	.word	0x0800867c
 8004798:	24000004 	.word	0x24000004
 800479c:	24000000 	.word	0x24000000

080047a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047a4:	f7ff ffcc 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 80047a8:	4602      	mov	r2, r0
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	091b      	lsrs	r3, r3, #4
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	4904      	ldr	r1, [pc, #16]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047b6:	5ccb      	ldrb	r3, [r1, r3]
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	58024400 	.word	0x58024400
 80047c8:	0800867c 	.word	0x0800867c

080047cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d0:	b0c6      	sub	sp, #280	; 0x118
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047d8:	2300      	movs	r3, #0
 80047da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047de:	2300      	movs	r3, #0
 80047e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80047f0:	2500      	movs	r5, #0
 80047f2:	ea54 0305 	orrs.w	r3, r4, r5
 80047f6:	d049      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80047f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004802:	d02f      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004804:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004808:	d828      	bhi.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800480a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800480e:	d01a      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004810:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004814:	d822      	bhi.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800481a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800481e:	d007      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004820:	e01c      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004822:	4bab      	ldr	r3, [pc, #684]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	4aaa      	ldr	r2, [pc, #680]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800482e:	e01a      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004834:	3308      	adds	r3, #8
 8004836:	2102      	movs	r1, #2
 8004838:	4618      	mov	r0, r3
 800483a:	f002 fa49 	bl	8006cd0 <RCCEx_PLL2_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004844:	e00f      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800484a:	3328      	adds	r3, #40	; 0x28
 800484c:	2102      	movs	r1, #2
 800484e:	4618      	mov	r0, r3
 8004850:	f002 faf0 	bl	8006e34 <RCCEx_PLL3_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800485a:	e004      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004862:	e000      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004866:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10a      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800486e:	4b98      	ldr	r3, [pc, #608]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004872:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800487a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800487c:	4a94      	ldr	r2, [pc, #592]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800487e:	430b      	orrs	r3, r1
 8004880:	6513      	str	r3, [r2, #80]	; 0x50
 8004882:	e003      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004884:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004888:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800488c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004894:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004898:	f04f 0900 	mov.w	r9, #0
 800489c:	ea58 0309 	orrs.w	r3, r8, r9
 80048a0:	d047      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80048a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d82a      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80048ac:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	080048c9 	.word	0x080048c9
 80048b8:	080048d7 	.word	0x080048d7
 80048bc:	080048ed 	.word	0x080048ed
 80048c0:	0800490b 	.word	0x0800490b
 80048c4:	0800490b 	.word	0x0800490b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c8:	4b81      	ldr	r3, [pc, #516]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	4a80      	ldr	r2, [pc, #512]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048d4:	e01a      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048da:	3308      	adds	r3, #8
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f002 f9f6 	bl	8006cd0 <RCCEx_PLL2_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048ea:	e00f      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048f0:	3328      	adds	r3, #40	; 0x28
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f002 fa9d 	bl	8006e34 <RCCEx_PLL3_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004900:	e004      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004908:	e000      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800490a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004914:	4b6e      	ldr	r3, [pc, #440]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004918:	f023 0107 	bic.w	r1, r3, #7
 800491c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	4a6b      	ldr	r2, [pc, #428]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004924:	430b      	orrs	r3, r1
 8004926:	6513      	str	r3, [r2, #80]	; 0x50
 8004928:	e003      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800492e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800493e:	f04f 0b00 	mov.w	fp, #0
 8004942:	ea5a 030b 	orrs.w	r3, sl, fp
 8004946:	d05b      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800494c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004950:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004954:	d03b      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004956:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800495a:	d834      	bhi.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800495c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004960:	d037      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004962:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004966:	d82e      	bhi.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004968:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800496c:	d033      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800496e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004972:	d828      	bhi.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004978:	d01a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800497a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800497e:	d822      	bhi.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004984:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004988:	d007      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800498a:	e01c      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800498c:	4b50      	ldr	r3, [pc, #320]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	4a4f      	ldr	r2, [pc, #316]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004996:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004998:	e01e      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800499a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800499e:	3308      	adds	r3, #8
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f002 f994 	bl	8006cd0 <RCCEx_PLL2_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80049ae:	e013      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b4:	3328      	adds	r3, #40	; 0x28
 80049b6:	2100      	movs	r1, #0
 80049b8:	4618      	mov	r0, r3
 80049ba:	f002 fa3b 	bl	8006e34 <RCCEx_PLL3_Config>
 80049be:	4603      	mov	r3, r0
 80049c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049c4:	e008      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80049cc:	e004      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80049ce:	bf00      	nop
 80049d0:	e002      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80049d2:	bf00      	nop
 80049d4:	e000      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80049d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10b      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80049e0:	4b3b      	ldr	r3, [pc, #236]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80049e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049f0:	4a37      	ldr	r2, [pc, #220]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	6593      	str	r3, [r2, #88]	; 0x58
 80049f6:	e003      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80049fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a16:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	d05d      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a28:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004a2c:	d03b      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004a2e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004a32:	d834      	bhi.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a38:	d037      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004a3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a3e:	d82e      	bhi.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a44:	d033      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004a46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a4a:	d828      	bhi.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a50:	d01a      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a56:	d822      	bhi.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a60:	d007      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004a62:	e01c      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a64:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a70:	e01e      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a76:	3308      	adds	r3, #8
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f002 f928 	bl	8006cd0 <RCCEx_PLL2_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a86:	e013      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a8c:	3328      	adds	r3, #40	; 0x28
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f002 f9cf 	bl	8006e34 <RCCEx_PLL3_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004aa4:	e004      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004aa6:	bf00      	nop
 8004aa8:	e002      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004aaa:	bf00      	nop
 8004aac:	e000      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10d      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ac4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ac8:	4a01      	ldr	r2, [pc, #4]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aca:	430b      	orrs	r3, r1
 8004acc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ace:	e005      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004ad0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ad8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004ae8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004aec:	2300      	movs	r3, #0
 8004aee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004af2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4313      	orrs	r3, r2
 8004afa:	d03a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b02:	2b30      	cmp	r3, #48	; 0x30
 8004b04:	d01f      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004b06:	2b30      	cmp	r3, #48	; 0x30
 8004b08:	d819      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d00c      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d815      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d019      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d111      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1a:	4baa      	ldr	r3, [pc, #680]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	4aa9      	ldr	r2, [pc, #676]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b26:	e011      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	2102      	movs	r1, #2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f002 f8cd 	bl	8006cd0 <RCCEx_PLL2_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b3c:	e006      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b44:	e002      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004b46:	bf00      	nop
 8004b48:	e000      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b54:	4b9b      	ldr	r3, [pc, #620]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b58:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b62:	4a98      	ldr	r2, [pc, #608]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b64:	430b      	orrs	r3, r1
 8004b66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b68:	e003      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b6e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b82:	2300      	movs	r3, #0
 8004b84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	d051      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b9c:	d035      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba2:	d82e      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004ba4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ba8:	d031      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004baa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bae:	d828      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb4:	d01a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bba:	d822      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc4:	d007      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004bc6:	e01c      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc8:	4b7e      	ldr	r3, [pc, #504]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	4a7d      	ldr	r2, [pc, #500]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bd4:	e01c      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bda:	3308      	adds	r3, #8
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f002 f876 	bl	8006cd0 <RCCEx_PLL2_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bea:	e011      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bf0:	3328      	adds	r3, #40	; 0x28
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f002 f91d 	bl	8006e34 <RCCEx_PLL3_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c00:	e006      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c08:	e002      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004c0a:	bf00      	nop
 8004c0c:	e000      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10a      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c18:	4b6a      	ldr	r3, [pc, #424]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c26:	4a67      	ldr	r2, [pc, #412]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	6513      	str	r3, [r2, #80]	; 0x50
 8004c2c:	e003      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c32:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004c42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c46:	2300      	movs	r3, #0
 8004c48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c4c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4313      	orrs	r3, r2
 8004c54:	d053      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c60:	d033      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004c62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c66:	d82c      	bhi.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c6c:	d02f      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004c6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c72:	d826      	bhi.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c78:	d02b      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004c7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c7e:	d820      	bhi.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c84:	d012      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c8a:	d81a      	bhi.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d022      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c94:	d115      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f002 f816 	bl	8006cd0 <RCCEx_PLL2_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004caa:	e015      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb0:	3328      	adds	r3, #40	; 0x28
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f002 f8bd 	bl	8006e34 <RCCEx_PLL3_Config>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004cc8:	e006      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004cca:	bf00      	nop
 8004ccc:	e004      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004cce:	bf00      	nop
 8004cd0:	e002      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004cd2:	bf00      	nop
 8004cd4:	e000      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ce0:	4b38      	ldr	r3, [pc, #224]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cee:	4a35      	ldr	r2, [pc, #212]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6513      	str	r3, [r2, #80]	; 0x50
 8004cf4:	e003      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cfa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004d14:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	d058      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d2a:	d033      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d30:	d82c      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d02f      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3c:	d826      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d42:	d02b      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004d44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d48:	d820      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d4e:	d012      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d54:	d81a      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d022      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d5e:	d115      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d64:	3308      	adds	r3, #8
 8004d66:	2101      	movs	r1, #1
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f001 ffb1 	bl	8006cd0 <RCCEx_PLL2_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d74:	e015      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d7a:	3328      	adds	r3, #40	; 0x28
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f002 f858 	bl	8006e34 <RCCEx_PLL3_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d8a:	e00a      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d92:	e006      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d94:	bf00      	nop
 8004d96:	e004      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d98:	bf00      	nop
 8004d9a:	e002      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d9c:	bf00      	nop
 8004d9e:	e000      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10e      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004dba:	4a02      	ldr	r2, [pc, #8]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004dc0:	e006      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004dcc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004de0:	2300      	movs	r3, #0
 8004de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004de6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4313      	orrs	r3, r2
 8004dee:	d037      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dfa:	d00e      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e00:	d816      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d018      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e0a:	d111      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e0c:	4bc4      	ldr	r3, [pc, #784]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	4ac3      	ldr	r2, [pc, #780]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e18:	e00f      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e1e:	3308      	adds	r3, #8
 8004e20:	2101      	movs	r1, #1
 8004e22:	4618      	mov	r0, r3
 8004e24:	f001 ff54 	bl	8006cd0 <RCCEx_PLL2_Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e2e:	e004      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004e36:	e000      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e42:	4bb7      	ldr	r3, [pc, #732]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e46:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e50:	4ab3      	ldr	r2, [pc, #716]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e52:	430b      	orrs	r3, r1
 8004e54:	6513      	str	r3, [r2, #80]	; 0x50
 8004e56:	e003      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e70:	2300      	movs	r3, #0
 8004e72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	d039      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d81c      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004e8a:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e90:	08004ecd 	.word	0x08004ecd
 8004e94:	08004ea1 	.word	0x08004ea1
 8004e98:	08004eaf 	.word	0x08004eaf
 8004e9c:	08004ecd 	.word	0x08004ecd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea0:	4b9f      	ldr	r3, [pc, #636]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	4a9e      	ldr	r2, [pc, #632]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004eac:	e00f      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f001 ff0a 	bl	8006cd0 <RCCEx_PLL2_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ec2:	e004      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004eca:	e000      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ece:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004ed6:	4b92      	ldr	r3, [pc, #584]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eda:	f023 0103 	bic.w	r1, r3, #3
 8004ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee4:	4a8e      	ldr	r2, [pc, #568]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004eea:	e003      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ef0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004f00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f04:	2300      	movs	r3, #0
 8004f06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f000 8099 	beq.w	8005048 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f16:	4b83      	ldr	r3, [pc, #524]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a82      	ldr	r2, [pc, #520]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f22:	f7fc f86f 	bl	8001004 <HAL_GetTick>
 8004f26:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f2a:	e00b      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2c:	f7fc f86a 	bl	8001004 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b64      	cmp	r3, #100	; 0x64
 8004f3a:	d903      	bls.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f42:	e005      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f44:	4b77      	ldr	r3, [pc, #476]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0ed      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004f50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d173      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f58:	4b71      	ldr	r3, [pc, #452]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f64:	4053      	eors	r3, r2
 8004f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d015      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f6e:	4b6c      	ldr	r3, [pc, #432]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f7a:	4b69      	ldr	r3, [pc, #420]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	4a68      	ldr	r2, [pc, #416]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f84:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f86:	4b66      	ldr	r3, [pc, #408]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8a:	4a65      	ldr	r2, [pc, #404]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f90:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f92:	4a63      	ldr	r2, [pc, #396]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa6:	d118      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fc f82c 	bl	8001004 <HAL_GetTick>
 8004fac:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fb0:	e00d      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb2:	f7fc f827 	bl	8001004 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004fbc:	1ad2      	subs	r2, r2, r3
 8004fbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d903      	bls.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8004fcc:	e005      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fce:	4b54      	ldr	r3, [pc, #336]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0eb      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004fda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d129      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ff2:	d10e      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004ff4:	4b4a      	ldr	r3, [pc, #296]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005000:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005004:	091a      	lsrs	r2, r3, #4
 8005006:	4b48      	ldr	r3, [pc, #288]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005008:	4013      	ands	r3, r2
 800500a:	4a45      	ldr	r2, [pc, #276]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800500c:	430b      	orrs	r3, r1
 800500e:	6113      	str	r3, [r2, #16]
 8005010:	e005      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005012:	4b43      	ldr	r3, [pc, #268]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	4a42      	ldr	r2, [pc, #264]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005018:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800501c:	6113      	str	r3, [r2, #16]
 800501e:	4b40      	ldr	r3, [pc, #256]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005020:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005026:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800502a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502e:	4a3c      	ldr	r2, [pc, #240]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005030:	430b      	orrs	r3, r1
 8005032:	6713      	str	r3, [r2, #112]	; 0x70
 8005034:	e008      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005036:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800503a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800503e:	e003      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005044:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f002 0301 	and.w	r3, r2, #1
 8005054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005058:	2300      	movs	r3, #0
 800505a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800505e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005062:	460b      	mov	r3, r1
 8005064:	4313      	orrs	r3, r2
 8005066:	f000 808f 	beq.w	8005188 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800506a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800506e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005070:	2b28      	cmp	r3, #40	; 0x28
 8005072:	d871      	bhi.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005074:	a201      	add	r2, pc, #4	; (adr r2, 800507c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507a:	bf00      	nop
 800507c:	08005161 	.word	0x08005161
 8005080:	08005159 	.word	0x08005159
 8005084:	08005159 	.word	0x08005159
 8005088:	08005159 	.word	0x08005159
 800508c:	08005159 	.word	0x08005159
 8005090:	08005159 	.word	0x08005159
 8005094:	08005159 	.word	0x08005159
 8005098:	08005159 	.word	0x08005159
 800509c:	0800512d 	.word	0x0800512d
 80050a0:	08005159 	.word	0x08005159
 80050a4:	08005159 	.word	0x08005159
 80050a8:	08005159 	.word	0x08005159
 80050ac:	08005159 	.word	0x08005159
 80050b0:	08005159 	.word	0x08005159
 80050b4:	08005159 	.word	0x08005159
 80050b8:	08005159 	.word	0x08005159
 80050bc:	08005143 	.word	0x08005143
 80050c0:	08005159 	.word	0x08005159
 80050c4:	08005159 	.word	0x08005159
 80050c8:	08005159 	.word	0x08005159
 80050cc:	08005159 	.word	0x08005159
 80050d0:	08005159 	.word	0x08005159
 80050d4:	08005159 	.word	0x08005159
 80050d8:	08005159 	.word	0x08005159
 80050dc:	08005161 	.word	0x08005161
 80050e0:	08005159 	.word	0x08005159
 80050e4:	08005159 	.word	0x08005159
 80050e8:	08005159 	.word	0x08005159
 80050ec:	08005159 	.word	0x08005159
 80050f0:	08005159 	.word	0x08005159
 80050f4:	08005159 	.word	0x08005159
 80050f8:	08005159 	.word	0x08005159
 80050fc:	08005161 	.word	0x08005161
 8005100:	08005159 	.word	0x08005159
 8005104:	08005159 	.word	0x08005159
 8005108:	08005159 	.word	0x08005159
 800510c:	08005159 	.word	0x08005159
 8005110:	08005159 	.word	0x08005159
 8005114:	08005159 	.word	0x08005159
 8005118:	08005159 	.word	0x08005159
 800511c:	08005161 	.word	0x08005161
 8005120:	58024400 	.word	0x58024400
 8005124:	58024800 	.word	0x58024800
 8005128:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800512c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005130:	3308      	adds	r3, #8
 8005132:	2101      	movs	r1, #1
 8005134:	4618      	mov	r0, r3
 8005136:	f001 fdcb 	bl	8006cd0 <RCCEx_PLL2_Config>
 800513a:	4603      	mov	r3, r0
 800513c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005140:	e00f      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005146:	3328      	adds	r3, #40	; 0x28
 8005148:	2101      	movs	r1, #1
 800514a:	4618      	mov	r0, r3
 800514c:	f001 fe72 	bl	8006e34 <RCCEx_PLL3_Config>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005156:	e004      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800515e:	e000      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005162:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800516a:	4bbf      	ldr	r3, [pc, #764]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800516c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005178:	4abb      	ldr	r2, [pc, #748]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800517a:	430b      	orrs	r3, r1
 800517c:	6553      	str	r3, [r2, #84]	; 0x54
 800517e:	e003      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005180:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005184:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f002 0302 	and.w	r3, r2, #2
 8005194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005198:	2300      	movs	r3, #0
 800519a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800519e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4313      	orrs	r3, r2
 80051a6:	d041      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80051a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d824      	bhi.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80051b2:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	08005205 	.word	0x08005205
 80051bc:	080051d1 	.word	0x080051d1
 80051c0:	080051e7 	.word	0x080051e7
 80051c4:	08005205 	.word	0x08005205
 80051c8:	08005205 	.word	0x08005205
 80051cc:	08005205 	.word	0x08005205
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d4:	3308      	adds	r3, #8
 80051d6:	2101      	movs	r1, #1
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 fd79 	bl	8006cd0 <RCCEx_PLL2_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80051e4:	e00f      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ea:	3328      	adds	r3, #40	; 0x28
 80051ec:	2101      	movs	r1, #1
 80051ee:	4618      	mov	r0, r3
 80051f0:	f001 fe20 	bl	8006e34 <RCCEx_PLL3_Config>
 80051f4:	4603      	mov	r3, r0
 80051f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80051fa:	e004      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005202:	e000      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005206:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800520e:	4b96      	ldr	r3, [pc, #600]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	f023 0107 	bic.w	r1, r3, #7
 8005216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800521a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521c:	4a92      	ldr	r2, [pc, #584]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800521e:	430b      	orrs	r3, r1
 8005220:	6553      	str	r3, [r2, #84]	; 0x54
 8005222:	e003      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005224:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005228:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800522c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	f002 0304 	and.w	r3, r2, #4
 8005238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800523c:	2300      	movs	r3, #0
 800523e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005242:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005246:	460b      	mov	r3, r1
 8005248:	4313      	orrs	r3, r2
 800524a:	d044      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800524c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005254:	2b05      	cmp	r3, #5
 8005256:	d825      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005258:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	080052ad 	.word	0x080052ad
 8005264:	08005279 	.word	0x08005279
 8005268:	0800528f 	.word	0x0800528f
 800526c:	080052ad 	.word	0x080052ad
 8005270:	080052ad 	.word	0x080052ad
 8005274:	080052ad 	.word	0x080052ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527c:	3308      	adds	r3, #8
 800527e:	2101      	movs	r1, #1
 8005280:	4618      	mov	r0, r3
 8005282:	f001 fd25 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005286:	4603      	mov	r3, r0
 8005288:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800528c:	e00f      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800528e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005292:	3328      	adds	r3, #40	; 0x28
 8005294:	2101      	movs	r1, #1
 8005296:	4618      	mov	r0, r3
 8005298:	f001 fdcc 	bl	8006e34 <RCCEx_PLL3_Config>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052a2:	e004      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80052aa:	e000      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80052ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052b6:	4b6c      	ldr	r3, [pc, #432]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	f023 0107 	bic.w	r1, r3, #7
 80052be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c6:	4a68      	ldr	r2, [pc, #416]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80052c8:	430b      	orrs	r3, r1
 80052ca:	6593      	str	r3, [r2, #88]	; 0x58
 80052cc:	e003      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	f002 0320 	and.w	r3, r2, #32
 80052e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052e6:	2300      	movs	r3, #0
 80052e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80052ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4313      	orrs	r3, r2
 80052f4:	d055      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80052f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005302:	d033      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005308:	d82c      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800530a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530e:	d02f      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005314:	d826      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005316:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800531a:	d02b      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800531c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005320:	d820      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005326:	d012      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800532c:	d81a      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d022      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005336:	d115      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800533c:	3308      	adds	r3, #8
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f001 fcc5 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800534c:	e015      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800534e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005352:	3328      	adds	r3, #40	; 0x28
 8005354:	2102      	movs	r1, #2
 8005356:	4618      	mov	r0, r3
 8005358:	f001 fd6c 	bl	8006e34 <RCCEx_PLL3_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005362:	e00a      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800536a:	e006      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800536c:	bf00      	nop
 800536e:	e004      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005370:	bf00      	nop
 8005372:	e002      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005374:	bf00      	nop
 8005376:	e000      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800537a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10b      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005382:	4b39      	ldr	r3, [pc, #228]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800538a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800538e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005392:	4a35      	ldr	r2, [pc, #212]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005394:	430b      	orrs	r3, r1
 8005396:	6553      	str	r3, [r2, #84]	; 0x54
 8005398:	e003      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800539e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80053a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80053ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053b2:	2300      	movs	r3, #0
 80053b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053b8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80053bc:	460b      	mov	r3, r1
 80053be:	4313      	orrs	r3, r2
 80053c0:	d058      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80053c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80053ce:	d033      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80053d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80053d4:	d82c      	bhi.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80053d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053da:	d02f      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80053dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e0:	d826      	bhi.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80053e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053e6:	d02b      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80053e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053ec:	d820      	bhi.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80053ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f2:	d012      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80053f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f8:	d81a      	bhi.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d022      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80053fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005402:	d115      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005408:	3308      	adds	r3, #8
 800540a:	2100      	movs	r1, #0
 800540c:	4618      	mov	r0, r3
 800540e:	f001 fc5f 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005412:	4603      	mov	r3, r0
 8005414:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005418:	e015      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800541a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800541e:	3328      	adds	r3, #40	; 0x28
 8005420:	2102      	movs	r1, #2
 8005422:	4618      	mov	r0, r3
 8005424:	f001 fd06 	bl	8006e34 <RCCEx_PLL3_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800542e:	e00a      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005436:	e006      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005438:	bf00      	nop
 800543a:	e004      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800543c:	bf00      	nop
 800543e:	e002      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005440:	bf00      	nop
 8005442:	e000      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005446:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10e      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800544e:	4b06      	ldr	r3, [pc, #24]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005452:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800545e:	4a02      	ldr	r2, [pc, #8]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005460:	430b      	orrs	r3, r1
 8005462:	6593      	str	r3, [r2, #88]	; 0x58
 8005464:	e006      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005466:	bf00      	nop
 8005468:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005470:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005480:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005484:	2300      	movs	r3, #0
 8005486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800548a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800548e:	460b      	mov	r3, r1
 8005490:	4313      	orrs	r3, r2
 8005492:	d055      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005498:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800549c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054a0:	d033      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80054a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054a6:	d82c      	bhi.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80054a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ac:	d02f      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80054ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b2:	d826      	bhi.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80054b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054b8:	d02b      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80054ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054be:	d820      	bhi.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80054c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054c4:	d012      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80054c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ca:	d81a      	bhi.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d022      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80054d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d4:	d115      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054da:	3308      	adds	r3, #8
 80054dc:	2100      	movs	r1, #0
 80054de:	4618      	mov	r0, r3
 80054e0:	f001 fbf6 	bl	8006cd0 <RCCEx_PLL2_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054ea:	e015      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f0:	3328      	adds	r3, #40	; 0x28
 80054f2:	2102      	movs	r1, #2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 fc9d 	bl	8006e34 <RCCEx_PLL3_Config>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005500:	e00a      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005508:	e006      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800550a:	bf00      	nop
 800550c:	e004      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800550e:	bf00      	nop
 8005510:	e002      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005512:	bf00      	nop
 8005514:	e000      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005518:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10b      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005520:	4ba0      	ldr	r3, [pc, #640]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005524:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800552c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005530:	4a9c      	ldr	r2, [pc, #624]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005532:	430b      	orrs	r3, r1
 8005534:	6593      	str	r3, [r2, #88]	; 0x58
 8005536:	e003      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005538:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800553c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f002 0308 	and.w	r3, r2, #8
 800554c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005550:	2300      	movs	r3, #0
 8005552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005556:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800555a:	460b      	mov	r3, r1
 800555c:	4313      	orrs	r3, r2
 800555e:	d01e      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800556c:	d10c      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800556e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005572:	3328      	adds	r3, #40	; 0x28
 8005574:	2102      	movs	r1, #2
 8005576:	4618      	mov	r0, r3
 8005578:	f001 fc5c 	bl	8006e34 <RCCEx_PLL3_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005588:	4b86      	ldr	r3, [pc, #536]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800558a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005598:	4a82      	ldr	r2, [pc, #520]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800559a:	430b      	orrs	r3, r1
 800559c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800559e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f002 0310 	and.w	r3, r2, #16
 80055aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055ae:	2300      	movs	r3, #0
 80055b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055b4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80055b8:	460b      	mov	r3, r1
 80055ba:	4313      	orrs	r3, r2
 80055bc:	d01e      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80055be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ca:	d10c      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d0:	3328      	adds	r3, #40	; 0x28
 80055d2:	2102      	movs	r1, #2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 fc2d 	bl	8006e34 <RCCEx_PLL3_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055e6:	4b6f      	ldr	r3, [pc, #444]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055f6:	4a6b      	ldr	r2, [pc, #428]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005608:	67bb      	str	r3, [r7, #120]	; 0x78
 800560a:	2300      	movs	r3, #0
 800560c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800560e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005612:	460b      	mov	r3, r1
 8005614:	4313      	orrs	r3, r2
 8005616:	d03e      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005624:	d022      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800562a:	d81b      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005634:	d00b      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005636:	e015      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800563c:	3308      	adds	r3, #8
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fb45 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800564c:	e00f      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800564e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005652:	3328      	adds	r3, #40	; 0x28
 8005654:	2102      	movs	r1, #2
 8005656:	4618      	mov	r0, r3
 8005658:	f001 fbec 	bl	8006e34 <RCCEx_PLL3_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005662:	e004      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800566c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800566e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005676:	4b4b      	ldr	r3, [pc, #300]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800567e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005682:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005686:	4a47      	ldr	r2, [pc, #284]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005688:	430b      	orrs	r3, r1
 800568a:	6593      	str	r3, [r2, #88]	; 0x58
 800568c:	e003      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005692:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80056a2:	673b      	str	r3, [r7, #112]	; 0x70
 80056a4:	2300      	movs	r3, #0
 80056a6:	677b      	str	r3, [r7, #116]	; 0x74
 80056a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80056ac:	460b      	mov	r3, r1
 80056ae:	4313      	orrs	r3, r2
 80056b0:	d03b      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80056b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056be:	d01f      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80056c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056c4:	d818      	bhi.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80056c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ca:	d003      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80056cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056d0:	d007      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80056d2:	e011      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d4:	4b33      	ldr	r3, [pc, #204]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	4a32      	ldr	r2, [pc, #200]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80056e0:	e00f      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e6:	3328      	adds	r3, #40	; 0x28
 80056e8:	2101      	movs	r1, #1
 80056ea:	4618      	mov	r0, r3
 80056ec:	f001 fba2 	bl	8006e34 <RCCEx_PLL3_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80056f6:	e004      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80056fe:	e000      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005702:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800570a:	4b26      	ldr	r3, [pc, #152]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800571a:	4a22      	ldr	r2, [pc, #136]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800571c:	430b      	orrs	r3, r1
 800571e:	6553      	str	r3, [r2, #84]	; 0x54
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005726:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800572a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005736:	66bb      	str	r3, [r7, #104]	; 0x68
 8005738:	2300      	movs	r3, #0
 800573a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800573c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005740:	460b      	mov	r3, r1
 8005742:	4313      	orrs	r3, r2
 8005744:	d034      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800574a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005754:	d007      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005756:	e011      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005758:	4b12      	ldr	r3, [pc, #72]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	4a11      	ldr	r2, [pc, #68]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800575e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005764:	e00e      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800576a:	3308      	adds	r3, #8
 800576c:	2102      	movs	r1, #2
 800576e:	4618      	mov	r0, r3
 8005770:	f001 faae 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800577a:	e003      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005784:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10d      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800578c:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800578e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579a:	4a02      	ldr	r2, [pc, #8]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800579c:	430b      	orrs	r3, r1
 800579e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057a0:	e006      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80057a2:	bf00      	nop
 80057a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80057bc:	663b      	str	r3, [r7, #96]	; 0x60
 80057be:	2300      	movs	r3, #0
 80057c0:	667b      	str	r3, [r7, #100]	; 0x64
 80057c2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80057c6:	460b      	mov	r3, r1
 80057c8:	4313      	orrs	r3, r2
 80057ca:	d00c      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d0:	3328      	adds	r3, #40	; 0x28
 80057d2:	2102      	movs	r1, #2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 fb2d 	bl	8006e34 <RCCEx_PLL3_Config>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80057e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80057f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80057f4:	2300      	movs	r3, #0
 80057f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80057fc:	460b      	mov	r3, r1
 80057fe:	4313      	orrs	r3, r2
 8005800:	d036      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800580c:	d018      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800580e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005812:	d811      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005818:	d014      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800581a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800581e:	d80b      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d011      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005828:	d106      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582a:	4bb7      	ldr	r3, [pc, #732]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	4ab6      	ldr	r2, [pc, #728]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005834:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005836:	e008      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800583e:	e004      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005840:	bf00      	nop
 8005842:	e002      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005844:	bf00      	nop
 8005846:	e000      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800584a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005852:	4bad      	ldr	r3, [pc, #692]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005856:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800585a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800585e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005860:	4aa9      	ldr	r2, [pc, #676]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005862:	430b      	orrs	r3, r1
 8005864:	6553      	str	r3, [r2, #84]	; 0x54
 8005866:	e003      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005868:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800586c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800587c:	653b      	str	r3, [r7, #80]	; 0x50
 800587e:	2300      	movs	r3, #0
 8005880:	657b      	str	r3, [r7, #84]	; 0x54
 8005882:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005886:	460b      	mov	r3, r1
 8005888:	4313      	orrs	r3, r2
 800588a:	d009      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800588c:	4b9e      	ldr	r3, [pc, #632]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800588e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005890:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589a:	4a9b      	ldr	r2, [pc, #620]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800589c:	430b      	orrs	r3, r1
 800589e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80058ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ae:	2300      	movs	r3, #0
 80058b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80058b6:	460b      	mov	r3, r1
 80058b8:	4313      	orrs	r3, r2
 80058ba:	d009      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058bc:	4b92      	ldr	r3, [pc, #584]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80058c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ca:	4a8f      	ldr	r2, [pc, #572]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80058d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80058dc:	643b      	str	r3, [r7, #64]	; 0x40
 80058de:	2300      	movs	r3, #0
 80058e0:	647b      	str	r3, [r7, #68]	; 0x44
 80058e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80058e6:	460b      	mov	r3, r1
 80058e8:	4313      	orrs	r3, r2
 80058ea:	d00e      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058ec:	4b86      	ldr	r3, [pc, #536]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	4a85      	ldr	r2, [pc, #532]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058f6:	6113      	str	r3, [r2, #16]
 80058f8:	4b83      	ldr	r3, [pc, #524]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058fa:	6919      	ldr	r1, [r3, #16]
 80058fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005900:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005904:	4a80      	ldr	r2, [pc, #512]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005906:	430b      	orrs	r3, r1
 8005908:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800590a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005916:	63bb      	str	r3, [r7, #56]	; 0x38
 8005918:	2300      	movs	r3, #0
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800591c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005920:	460b      	mov	r3, r1
 8005922:	4313      	orrs	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005926:	4b78      	ldr	r3, [pc, #480]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800592a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800592e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	4a74      	ldr	r2, [pc, #464]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005936:	430b      	orrs	r3, r1
 8005938:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800593a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005946:	633b      	str	r3, [r7, #48]	; 0x30
 8005948:	2300      	movs	r3, #0
 800594a:	637b      	str	r3, [r7, #52]	; 0x34
 800594c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005950:	460b      	mov	r3, r1
 8005952:	4313      	orrs	r3, r2
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005956:	4b6c      	ldr	r3, [pc, #432]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800595e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005966:	4a68      	ldr	r2, [pc, #416]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005968:	430b      	orrs	r3, r1
 800596a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800596c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	2100      	movs	r1, #0
 8005976:	62b9      	str	r1, [r7, #40]	; 0x28
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800597e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005982:	460b      	mov	r3, r1
 8005984:	4313      	orrs	r3, r2
 8005986:	d011      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800598c:	3308      	adds	r3, #8
 800598e:	2100      	movs	r1, #0
 8005990:	4618      	mov	r0, r3
 8005992:	f001 f99d 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005996:	4603      	mov	r3, r0
 8005998:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800599c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80059ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	2100      	movs	r1, #0
 80059b6:	6239      	str	r1, [r7, #32]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
 80059be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80059c2:	460b      	mov	r3, r1
 80059c4:	4313      	orrs	r3, r2
 80059c6:	d011      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059cc:	3308      	adds	r3, #8
 80059ce:	2101      	movs	r1, #1
 80059d0:	4618      	mov	r0, r3
 80059d2:	f001 f97d 	bl	8006cd0 <RCCEx_PLL2_Config>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80059dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80059ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	2100      	movs	r1, #0
 80059f6:	61b9      	str	r1, [r7, #24]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a02:	460b      	mov	r3, r1
 8005a04:	4313      	orrs	r3, r2
 8005a06:	d011      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	2102      	movs	r1, #2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 f95d 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	2100      	movs	r1, #0
 8005a36:	6139      	str	r1, [r7, #16]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a42:	460b      	mov	r3, r1
 8005a44:	4313      	orrs	r3, r2
 8005a46:	d011      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a4c:	3328      	adds	r3, #40	; 0x28
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 f9ef 	bl	8006e34 <RCCEx_PLL3_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8005a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	2100      	movs	r1, #0
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a82:	460b      	mov	r3, r1
 8005a84:	4313      	orrs	r3, r2
 8005a86:	d011      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a8c:	3328      	adds	r3, #40	; 0x28
 8005a8e:	2101      	movs	r1, #1
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 f9cf 	bl	8006e34 <RCCEx_PLL3_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005a9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005aa8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	6039      	str	r1, [r7, #0]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	607b      	str	r3, [r7, #4]
 8005abe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	d011      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005acc:	3328      	adds	r3, #40	; 0x28
 8005ace:	2102      	movs	r1, #2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 f9af 	bl	8006e34 <RCCEx_PLL3_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005adc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ae8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8005aec:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	e000      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005b00:	46bd      	mov	sp, r7
 8005b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b06:	bf00      	nop
 8005b08:	58024400 	.word	0x58024400

08005b0c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b090      	sub	sp, #64	; 0x40
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b1a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	f040 8094 	bne.w	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005b24:	4b9b      	ldr	r3, [pc, #620]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	f200 8087 	bhi.w	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005b36:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b51 	.word	0x08005b51
 8005b40:	08005b79 	.word	0x08005b79
 8005b44:	08005ba1 	.word	0x08005ba1
 8005b48:	08005c3d 	.word	0x08005c3d
 8005b4c:	08005bc9 	.word	0x08005bc9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b50:	4b90      	ldr	r3, [pc, #576]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b5c:	d108      	bne.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 ff62 	bl	8006a2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b6c:	f000 bc93 	b.w	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b74:	f000 bc8f 	b.w	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b78:	4b86      	ldr	r3, [pc, #536]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b84:	d108      	bne.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b86:	f107 0318 	add.w	r3, r7, #24
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fca6 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b94:	f000 bc7f 	b.w	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b9c:	f000 bc7b 	b.w	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ba0:	4b7c      	ldr	r3, [pc, #496]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bac:	d108      	bne.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bae:	f107 030c 	add.w	r3, r7, #12
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fde6 	bl	8006784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bbc:	f000 bc6b 	b.w	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bc4:	f000 bc67 	b.w	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005bc8:	4b72      	ldr	r3, [pc, #456]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bd0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bd2:	4b70      	ldr	r3, [pc, #448]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d109      	bne.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005be4:	4b6b      	ldr	r3, [pc, #428]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	08db      	lsrs	r3, r3, #3
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	4a6a      	ldr	r2, [pc, #424]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bf6:	e01f      	b.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bf8:	4b66      	ldr	r3, [pc, #408]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c04:	d106      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c0c:	d102      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c0e:	4b63      	ldr	r3, [pc, #396]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c12:	e011      	b.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c14:	4b5f      	ldr	r3, [pc, #380]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c20:	d106      	bne.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c28:	d102      	bne.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c2a:	4b5d      	ldr	r3, [pc, #372]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c2e:	e003      	b.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005c34:	f000 bc2f 	b.w	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005c38:	f000 bc2d 	b.w	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c3c:	4b59      	ldr	r3, [pc, #356]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c40:	f000 bc29 	b.w	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c48:	f000 bc25 	b.w	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c50:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005c54:	430b      	orrs	r3, r1
 8005c56:	f040 80a7 	bne.w	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005c5a:	4b4e      	ldr	r3, [pc, #312]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005c62:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c6a:	d054      	beq.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c72:	f200 808b 	bhi.w	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c7c:	f000 8083 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c86:	f200 8081 	bhi.w	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c90:	d02f      	beq.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c98:	d878      	bhi.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d004      	beq.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ca6:	d012      	beq.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8005ca8:	e070      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005caa:	4b3a      	ldr	r3, [pc, #232]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cb6:	d107      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 feb5 	bl	8006a2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cc6:	e3e6      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ccc:	e3e3      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cce:	4b31      	ldr	r3, [pc, #196]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cda:	d107      	bne.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cdc:	f107 0318 	add.w	r3, r7, #24
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fbfb 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cea:	e3d4      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf0:	e3d1      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cf2:	4b28      	ldr	r3, [pc, #160]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cfe:	d107      	bne.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d00:	f107 030c 	add.w	r3, r7, #12
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fd3d 	bl	8006784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d0e:	e3c2      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d14:	e3bf      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d16:	4b1f      	ldr	r3, [pc, #124]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d1e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d20:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d10c      	bne.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d32:	4b18      	ldr	r3, [pc, #96]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	08db      	lsrs	r3, r3, #3
 8005d38:	f003 0303 	and.w	r3, r3, #3
 8005d3c:	4a16      	ldr	r2, [pc, #88]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d44:	e01e      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d46:	4b13      	ldr	r3, [pc, #76]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d52:	d106      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d5a:	d102      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d60:	e010      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d62:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d6e:	d106      	bne.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d76:	d102      	bne.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005d78:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7c:	e002      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005d82:	e388      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005d84:	e387      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d86:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d8a:	e384      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d90:	e381      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005d92:	bf00      	nop
 8005d94:	58024400 	.word	0x58024400
 8005d98:	03d09000 	.word	0x03d09000
 8005d9c:	003d0900 	.word	0x003d0900
 8005da0:	017d7840 	.word	0x017d7840
 8005da4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dac:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005db0:	430b      	orrs	r3, r1
 8005db2:	f040 809c 	bne.w	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005db6:	4b9e      	ldr	r3, [pc, #632]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005dbe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dc6:	d054      	beq.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dce:	f200 808b 	bhi.w	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005dd8:	f000 8083 	beq.w	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005de2:	f200 8081 	bhi.w	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dec:	d02f      	beq.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005df4:	d878      	bhi.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d004      	beq.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e02:	d012      	beq.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005e04:	e070      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e06:	4b8a      	ldr	r3, [pc, #552]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e12:	d107      	bne.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fe07 	bl	8006a2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e22:	e338      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e28:	e335      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e2a:	4b81      	ldr	r3, [pc, #516]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e36:	d107      	bne.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e38:	f107 0318 	add.w	r3, r7, #24
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fb4d 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e46:	e326      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e4c:	e323      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e4e:	4b78      	ldr	r3, [pc, #480]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e5a:	d107      	bne.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e5c:	f107 030c 	add.w	r3, r7, #12
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fc8f 	bl	8006784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e6a:	e314      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e70:	e311      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e72:	4b6f      	ldr	r3, [pc, #444]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e7c:	4b6c      	ldr	r3, [pc, #432]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d10c      	bne.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d109      	bne.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e8e:	4b68      	ldr	r3, [pc, #416]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	08db      	lsrs	r3, r3, #3
 8005e94:	f003 0303 	and.w	r3, r3, #3
 8005e98:	4a66      	ldr	r2, [pc, #408]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ea0:	e01e      	b.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ea2:	4b63      	ldr	r3, [pc, #396]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eae:	d106      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eb6:	d102      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005eb8:	4b5f      	ldr	r3, [pc, #380]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ebc:	e010      	b.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ebe:	4b5c      	ldr	r3, [pc, #368]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eca:	d106      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8005ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed2:	d102      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ed4:	4b59      	ldr	r3, [pc, #356]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ed8:	e002      	b.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005ede:	e2da      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005ee0:	e2d9      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ee2:	4b57      	ldr	r3, [pc, #348]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ee6:	e2d6      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eec:	e2d3      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ef2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	f040 80a7 	bne.w	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005efc:	4b4c      	ldr	r3, [pc, #304]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f00:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005f04:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f0c:	d055      	beq.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f14:	f200 8096 	bhi.w	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f1e:	f000 8084 	beq.w	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f28:	f200 808c 	bhi.w	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f32:	d030      	beq.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f3a:	f200 8083 	bhi.w	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4a:	d012      	beq.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005f4c:	e07a      	b.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f4e:	4b38      	ldr	r3, [pc, #224]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f5a:	d107      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fd63 	bl	8006a2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f6a:	e294      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f70:	e291      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f72:	4b2f      	ldr	r3, [pc, #188]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f7e:	d107      	bne.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f80:	f107 0318 	add.w	r3, r7, #24
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 faa9 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f8e:	e282      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f94:	e27f      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f96:	4b26      	ldr	r3, [pc, #152]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fa2:	d107      	bne.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fa4:	f107 030c 	add.w	r3, r7, #12
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fbeb 	bl	8006784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fb2:	e270      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fb8:	e26d      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fba:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fc2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fc4:	4b1a      	ldr	r3, [pc, #104]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d10c      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d109      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fd6:	4b16      	ldr	r3, [pc, #88]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	08db      	lsrs	r3, r3, #3
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	4a14      	ldr	r2, [pc, #80]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fe8:	e01e      	b.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fea:	4b11      	ldr	r3, [pc, #68]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff6:	d106      	bne.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ffe:	d102      	bne.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006000:	4b0d      	ldr	r3, [pc, #52]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006004:	e010      	b.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006006:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006012:	d106      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800601a:	d102      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800601c:	4b07      	ldr	r3, [pc, #28]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800601e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006020:	e002      	b.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006026:	e236      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006028:	e235      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800602c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800602e:	e232      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006030:	58024400 	.word	0x58024400
 8006034:	03d09000 	.word	0x03d09000
 8006038:	003d0900 	.word	0x003d0900
 800603c:	017d7840 	.word	0x017d7840
 8006040:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006048:	e225      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800604a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006052:	430b      	orrs	r3, r1
 8006054:	f040 8085 	bne.w	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006058:	4b9c      	ldr	r3, [pc, #624]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800605a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006060:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006068:	d06b      	beq.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006070:	d874      	bhi.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006078:	d056      	beq.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006080:	d86c      	bhi.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006088:	d03b      	beq.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006090:	d864      	bhi.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006098:	d021      	beq.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060a0:	d85c      	bhi.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d004      	beq.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ae:	d004      	beq.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80060b0:	e054      	b.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80060b2:	f7fe fb75 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 80060b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060b8:	e1ed      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060ba:	4b84      	ldr	r3, [pc, #528]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060c6:	d107      	bne.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060c8:	f107 0318 	add.w	r3, r7, #24
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fa05 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060d6:	e1de      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060dc:	e1db      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060de:	4b7b      	ldr	r3, [pc, #492]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ea:	d107      	bne.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060ec:	f107 030c 	add.w	r3, r7, #12
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fb47 	bl	8006784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060fa:	e1cc      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006100:	e1c9      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006102:	4b72      	ldr	r3, [pc, #456]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b04      	cmp	r3, #4
 800610c:	d109      	bne.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800610e:	4b6f      	ldr	r3, [pc, #444]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	08db      	lsrs	r3, r3, #3
 8006114:	f003 0303 	and.w	r3, r3, #3
 8006118:	4a6d      	ldr	r2, [pc, #436]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800611a:	fa22 f303 	lsr.w	r3, r2, r3
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006120:	e1b9      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006126:	e1b6      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006128:	4b68      	ldr	r3, [pc, #416]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006134:	d102      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8006136:	4b67      	ldr	r3, [pc, #412]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006138:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800613a:	e1ac      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006140:	e1a9      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006142:	4b62      	ldr	r3, [pc, #392]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800614e:	d102      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8006150:	4b61      	ldr	r3, [pc, #388]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006152:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006154:	e19f      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800615a:	e19c      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006160:	e199      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006166:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800616a:	430b      	orrs	r3, r1
 800616c:	d173      	bne.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800616e:	4b57      	ldr	r3, [pc, #348]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006172:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006176:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800617e:	d02f      	beq.n	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006186:	d863      	bhi.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618a:	2b00      	cmp	r3, #0
 800618c:	d004      	beq.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006194:	d012      	beq.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006196:	e05b      	b.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006198:	4b4c      	ldr	r3, [pc, #304]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061a4:	d107      	bne.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061a6:	f107 0318 	add.w	r3, r7, #24
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 f996 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061b4:	e16f      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061ba:	e16c      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061bc:	4b43      	ldr	r3, [pc, #268]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061c8:	d107      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ca:	f107 030c 	add.w	r3, r7, #12
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fad8 	bl	8006784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061d8:	e15d      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061da:	2300      	movs	r3, #0
 80061dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061de:	e15a      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80061e0:	4b3a      	ldr	r3, [pc, #232]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80061e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061e8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061ea:	4b38      	ldr	r3, [pc, #224]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d10c      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80061f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d109      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061fc:	4b33      	ldr	r3, [pc, #204]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	08db      	lsrs	r3, r3, #3
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	4a32      	ldr	r2, [pc, #200]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006208:	fa22 f303 	lsr.w	r3, r2, r3
 800620c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800620e:	e01e      	b.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006210:	4b2e      	ldr	r3, [pc, #184]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621c:	d106      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800621e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006220:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006224:	d102      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006226:	4b2b      	ldr	r3, [pc, #172]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800622a:	e010      	b.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800622c:	4b27      	ldr	r3, [pc, #156]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006238:	d106      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800623a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006240:	d102      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006242:	4b25      	ldr	r3, [pc, #148]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006246:	e002      	b.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800624c:	e123      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800624e:	e122      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006254:	e11f      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800625a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800625e:	430b      	orrs	r3, r1
 8006260:	d13c      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006262:	4b1a      	ldr	r3, [pc, #104]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800626a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006278:	d012      	beq.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800627a:	e023      	b.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800627c:	4b13      	ldr	r3, [pc, #76]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006284:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006288:	d107      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800628a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fbcc 	bl	8006a2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006298:	e0fd      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800629e:	e0fa      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062a0:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ac:	d107      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062ae:	f107 0318 	add.w	r3, r7, #24
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 f912 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062bc:	e0eb      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062c2:	e0e8      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062c8:	e0e5      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80062ca:	bf00      	nop
 80062cc:	58024400 	.word	0x58024400
 80062d0:	03d09000 	.word	0x03d09000
 80062d4:	003d0900 	.word	0x003d0900
 80062d8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80062dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80062e4:	430b      	orrs	r3, r1
 80062e6:	f040 8085 	bne.w	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80062ea:	4b6d      	ldr	r3, [pc, #436]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80062ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80062f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062fa:	d06b      	beq.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80062fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006302:	d874      	bhi.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630a:	d056      	beq.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006312:	d86c      	bhi.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800631a:	d03b      	beq.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006322:	d864      	bhi.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800632a:	d021      	beq.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800632c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006332:	d85c      	bhi.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	2b00      	cmp	r3, #0
 8006338:	d004      	beq.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006340:	d004      	beq.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006342:	e054      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006344:	f000 f8b4 	bl	80064b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006348:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800634a:	e0a4      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800634c:	4b54      	ldr	r3, [pc, #336]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006358:	d107      	bne.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800635a:	f107 0318 	add.w	r3, r7, #24
 800635e:	4618      	mov	r0, r3
 8006360:	f000 f8bc 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006368:	e095      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800636e:	e092      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006370:	4b4b      	ldr	r3, [pc, #300]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800637c:	d107      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800637e:	f107 030c 	add.w	r3, r7, #12
 8006382:	4618      	mov	r0, r3
 8006384:	f000 f9fe 	bl	8006784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800638c:	e083      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006392:	e080      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006394:	4b42      	ldr	r3, [pc, #264]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b04      	cmp	r3, #4
 800639e:	d109      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063a0:	4b3f      	ldr	r3, [pc, #252]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	08db      	lsrs	r3, r3, #3
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	4a3e      	ldr	r2, [pc, #248]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80063ac:	fa22 f303 	lsr.w	r3, r2, r3
 80063b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063b2:	e070      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b8:	e06d      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80063ba:	4b39      	ldr	r3, [pc, #228]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c6:	d102      	bne.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80063c8:	4b37      	ldr	r3, [pc, #220]	; (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063cc:	e063      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063d2:	e060      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80063d4:	4b32      	ldr	r3, [pc, #200]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063e0:	d102      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80063e2:	4b32      	ldr	r3, [pc, #200]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063e6:	e056      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ec:	e053      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063f2:	e050      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80063f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80063fc:	430b      	orrs	r3, r1
 80063fe:	d148      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006400:	4b27      	ldr	r3, [pc, #156]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006404:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006408:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006410:	d02a      	beq.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006418:	d838      	bhi.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	2b00      	cmp	r3, #0
 800641e:	d004      	beq.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006426:	d00d      	beq.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006428:	e030      	b.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800642a:	4b1d      	ldr	r3, [pc, #116]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006436:	d102      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006438:	4b1c      	ldr	r3, [pc, #112]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800643c:	e02b      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006442:	e028      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006444:	4b16      	ldr	r3, [pc, #88]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006450:	d107      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fae8 	bl	8006a2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006460:	e019      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006466:	e016      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006468:	4b0d      	ldr	r3, [pc, #52]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006474:	d107      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006476:	f107 0318 	add.w	r3, r7, #24
 800647a:	4618      	mov	r0, r3
 800647c:	f000 f82e 	bl	80064dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006484:	e007      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800648a:	e004      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006490:	e001      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006498:	4618      	mov	r0, r3
 800649a:	3740      	adds	r7, #64	; 0x40
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	58024400 	.word	0x58024400
 80064a4:	03d09000 	.word	0x03d09000
 80064a8:	003d0900 	.word	0x003d0900
 80064ac:	017d7840 	.word	0x017d7840

080064b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80064b4:	f7fe f944 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 80064b8:	4602      	mov	r2, r0
 80064ba:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	091b      	lsrs	r3, r3, #4
 80064c0:	f003 0307 	and.w	r3, r3, #7
 80064c4:	4904      	ldr	r1, [pc, #16]	; (80064d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80064c6:	5ccb      	ldrb	r3, [r1, r3]
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	58024400 	.word	0x58024400
 80064d8:	0800867c 	.word	0x0800867c

080064dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80064dc:	b480      	push	{r7}
 80064de:	b089      	sub	sp, #36	; 0x24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064e4:	4ba1      	ldr	r3, [pc, #644]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	f003 0303 	and.w	r3, r3, #3
 80064ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80064ee:	4b9f      	ldr	r3, [pc, #636]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	0b1b      	lsrs	r3, r3, #12
 80064f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80064fa:	4b9c      	ldr	r3, [pc, #624]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	091b      	lsrs	r3, r3, #4
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006506:	4b99      	ldr	r3, [pc, #612]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650a:	08db      	lsrs	r3, r3, #3
 800650c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	fb02 f303 	mul.w	r3, r2, r3
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8111 	beq.w	800674c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	2b02      	cmp	r3, #2
 800652e:	f000 8083 	beq.w	8006638 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	2b02      	cmp	r3, #2
 8006536:	f200 80a1 	bhi.w	800667c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d056      	beq.n	80065f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006546:	e099      	b.n	800667c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006548:	4b88      	ldr	r3, [pc, #544]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0320 	and.w	r3, r3, #32
 8006550:	2b00      	cmp	r3, #0
 8006552:	d02d      	beq.n	80065b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006554:	4b85      	ldr	r3, [pc, #532]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	08db      	lsrs	r3, r3, #3
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	4a84      	ldr	r2, [pc, #528]	; (8006770 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006560:	fa22 f303 	lsr.w	r3, r2, r3
 8006564:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	ee07 3a90 	vmov	s15, r3
 800656c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800657a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657e:	4b7b      	ldr	r3, [pc, #492]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006592:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800659a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80065ae:	e087      	b.n	80066c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006778 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80065be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065c2:	4b6a      	ldr	r3, [pc, #424]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065f2:	e065      	b.n	80066c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800677c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006606:	4b59      	ldr	r3, [pc, #356]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006616:	ed97 6a03 	vldr	s12, [r7, #12]
 800661a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800661e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800662a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006636:	e043      	b.n	80066c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006642:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006780 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800664a:	4b48      	ldr	r3, [pc, #288]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800665a:	ed97 6a03 	vldr	s12, [r7, #12]
 800665e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800666a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800666e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800667a:	e021      	b.n	80066c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006686:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800677c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800668a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800668e:	4b37      	ldr	r3, [pc, #220]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006696:	ee07 3a90 	vmov	s15, r3
 800669a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800669e:	ed97 6a03 	vldr	s12, [r7, #12]
 80066a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80066c0:	4b2a      	ldr	r3, [pc, #168]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c4:	0a5b      	lsrs	r3, r3, #9
 80066c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ca:	ee07 3a90 	vmov	s15, r3
 80066ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066da:	edd7 6a07 	vldr	s13, [r7, #28]
 80066de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066e6:	ee17 2a90 	vmov	r2, s15
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80066ee:	4b1f      	ldr	r3, [pc, #124]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	0c1b      	lsrs	r3, r3, #16
 80066f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f8:	ee07 3a90 	vmov	s15, r3
 80066fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006704:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006708:	edd7 6a07 	vldr	s13, [r7, #28]
 800670c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006714:	ee17 2a90 	vmov	r2, s15
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800671c:	4b13      	ldr	r3, [pc, #76]	; (800676c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	0e1b      	lsrs	r3, r3, #24
 8006722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006732:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006736:	edd7 6a07 	vldr	s13, [r7, #28]
 800673a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800673e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006742:	ee17 2a90 	vmov	r2, s15
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800674a:	e008      	b.n	800675e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	609a      	str	r2, [r3, #8]
}
 800675e:	bf00      	nop
 8006760:	3724      	adds	r7, #36	; 0x24
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	58024400 	.word	0x58024400
 8006770:	03d09000 	.word	0x03d09000
 8006774:	46000000 	.word	0x46000000
 8006778:	4c742400 	.word	0x4c742400
 800677c:	4a742400 	.word	0x4a742400
 8006780:	4bbebc20 	.word	0x4bbebc20

08006784 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006784:	b480      	push	{r7}
 8006786:	b089      	sub	sp, #36	; 0x24
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800678c:	4ba1      	ldr	r3, [pc, #644]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800678e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006796:	4b9f      	ldr	r3, [pc, #636]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	0d1b      	lsrs	r3, r3, #20
 800679c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80067a2:	4b9c      	ldr	r3, [pc, #624]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	0a1b      	lsrs	r3, r3, #8
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80067ae:	4b99      	ldr	r3, [pc, #612]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b2:	08db      	lsrs	r3, r3, #3
 80067b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	fb02 f303 	mul.w	r3, r2, r3
 80067be:	ee07 3a90 	vmov	s15, r3
 80067c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 8111 	beq.w	80069f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	f000 8083 	beq.w	80068e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b02      	cmp	r3, #2
 80067de:	f200 80a1 	bhi.w	8006924 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d056      	beq.n	800689c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80067ee:	e099      	b.n	8006924 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067f0:	4b88      	ldr	r3, [pc, #544]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0320 	and.w	r3, r3, #32
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d02d      	beq.n	8006858 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067fc:	4b85      	ldr	r3, [pc, #532]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	08db      	lsrs	r3, r3, #3
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	4a84      	ldr	r2, [pc, #528]	; (8006a18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
 800680c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	ee07 3a90 	vmov	s15, r3
 8006814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	ee07 3a90 	vmov	s15, r3
 800681e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006826:	4b7b      	ldr	r3, [pc, #492]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006836:	ed97 6a03 	vldr	s12, [r7, #12]
 800683a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800683e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800684a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006852:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006856:	e087      	b.n	8006968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	ee07 3a90 	vmov	s15, r3
 800685e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006862:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006a20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800686a:	4b6a      	ldr	r3, [pc, #424]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800687a:	ed97 6a03 	vldr	s12, [r7, #12]
 800687e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800688a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800688e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800689a:	e065      	b.n	8006968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80068aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ae:	4b59      	ldr	r3, [pc, #356]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068be:	ed97 6a03 	vldr	s12, [r7, #12]
 80068c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068de:	e043      	b.n	8006968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80068ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068f2:	4b48      	ldr	r3, [pc, #288]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006902:	ed97 6a03 	vldr	s12, [r7, #12]
 8006906:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800690a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800691a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006922:	e021      	b.n	8006968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006936:	4b37      	ldr	r3, [pc, #220]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006946:	ed97 6a03 	vldr	s12, [r7, #12]
 800694a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800694e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800695a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006966:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006968:	4b2a      	ldr	r3, [pc, #168]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696c:	0a5b      	lsrs	r3, r3, #9
 800696e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800697e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006982:	edd7 6a07 	vldr	s13, [r7, #28]
 8006986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800698a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800698e:	ee17 2a90 	vmov	r2, s15
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006996:	4b1f      	ldr	r3, [pc, #124]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	0c1b      	lsrs	r3, r3, #16
 800699c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a0:	ee07 3a90 	vmov	s15, r3
 80069a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80069b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069bc:	ee17 2a90 	vmov	r2, s15
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80069c4:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	0e1b      	lsrs	r3, r3, #24
 80069ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ce:	ee07 3a90 	vmov	s15, r3
 80069d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069de:	edd7 6a07 	vldr	s13, [r7, #28]
 80069e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ea:	ee17 2a90 	vmov	r2, s15
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80069f2:	e008      	b.n	8006a06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	609a      	str	r2, [r3, #8]
}
 8006a06:	bf00      	nop
 8006a08:	3724      	adds	r7, #36	; 0x24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	58024400 	.word	0x58024400
 8006a18:	03d09000 	.word	0x03d09000
 8006a1c:	46000000 	.word	0x46000000
 8006a20:	4c742400 	.word	0x4c742400
 8006a24:	4a742400 	.word	0x4a742400
 8006a28:	4bbebc20 	.word	0x4bbebc20

08006a2c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	; 0x24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a34:	4ba0      	ldr	r3, [pc, #640]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006a3e:	4b9e      	ldr	r3, [pc, #632]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a42:	091b      	lsrs	r3, r3, #4
 8006a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a48:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006a4a:	4b9b      	ldr	r3, [pc, #620]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a54:	4b98      	ldr	r3, [pc, #608]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a58:	08db      	lsrs	r3, r3, #3
 8006a5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	fb02 f303 	mul.w	r3, r2, r3
 8006a64:	ee07 3a90 	vmov	s15, r3
 8006a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 8111 	beq.w	8006c9a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	f000 8083 	beq.w	8006b86 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	f200 80a1 	bhi.w	8006bca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d056      	beq.n	8006b42 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006a94:	e099      	b.n	8006bca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a96:	4b88      	ldr	r3, [pc, #544]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0320 	and.w	r3, r3, #32
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d02d      	beq.n	8006afe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aa2:	4b85      	ldr	r3, [pc, #532]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	08db      	lsrs	r3, r3, #3
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	4a83      	ldr	r2, [pc, #524]	; (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006aae:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	ee07 3a90 	vmov	s15, r3
 8006ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006acc:	4b7a      	ldr	r3, [pc, #488]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad4:	ee07 3a90 	vmov	s15, r3
 8006ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006adc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ae0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006afc:	e087      	b.n	8006c0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	ee07 3a90 	vmov	s15, r3
 8006b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b08:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b10:	4b69      	ldr	r3, [pc, #420]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b18:	ee07 3a90 	vmov	s15, r3
 8006b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b20:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b24:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b40:	e065      	b.n	8006c0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	ee07 3a90 	vmov	s15, r3
 8006b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b54:	4b58      	ldr	r3, [pc, #352]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b64:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b68:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b84:	e043      	b.n	8006c0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	ee07 3a90 	vmov	s15, r3
 8006b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b90:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006ccc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b98:	4b47      	ldr	r3, [pc, #284]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba0:	ee07 3a90 	vmov	s15, r3
 8006ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bac:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006bb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bc8:	e021      	b.n	8006c0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006bd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bdc:	4b36      	ldr	r3, [pc, #216]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be4:	ee07 3a90 	vmov	s15, r3
 8006be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bec:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006bf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c0c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006c0e:	4b2a      	ldr	r3, [pc, #168]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	0a5b      	lsrs	r3, r3, #9
 8006c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c18:	ee07 3a90 	vmov	s15, r3
 8006c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c28:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c34:	ee17 2a90 	vmov	r2, s15
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006c3c:	4b1e      	ldr	r3, [pc, #120]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c40:	0c1b      	lsrs	r3, r3, #16
 8006c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c62:	ee17 2a90 	vmov	r2, s15
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006c6a:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6e:	0e1b      	lsrs	r3, r3, #24
 8006c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c74:	ee07 3a90 	vmov	s15, r3
 8006c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c90:	ee17 2a90 	vmov	r2, s15
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006c98:	e008      	b.n	8006cac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	609a      	str	r2, [r3, #8]
}
 8006cac:	bf00      	nop
 8006cae:	3724      	adds	r7, #36	; 0x24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	58024400 	.word	0x58024400
 8006cbc:	03d09000 	.word	0x03d09000
 8006cc0:	46000000 	.word	0x46000000
 8006cc4:	4c742400 	.word	0x4c742400
 8006cc8:	4a742400 	.word	0x4a742400
 8006ccc:	4bbebc20 	.word	0x4bbebc20

08006cd0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cde:	4b53      	ldr	r3, [pc, #332]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d101      	bne.n	8006cee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e099      	b.n	8006e22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006cee:	4b4f      	ldr	r3, [pc, #316]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a4e      	ldr	r2, [pc, #312]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006cf4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cfa:	f7fa f983 	bl	8001004 <HAL_GetTick>
 8006cfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d00:	e008      	b.n	8006d14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d02:	f7fa f97f 	bl	8001004 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d901      	bls.n	8006d14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e086      	b.n	8006e22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d14:	4b45      	ldr	r3, [pc, #276]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1f0      	bne.n	8006d02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d20:	4b42      	ldr	r3, [pc, #264]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	031b      	lsls	r3, r3, #12
 8006d2e:	493f      	ldr	r1, [pc, #252]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	628b      	str	r3, [r1, #40]	; 0x28
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	025b      	lsls	r3, r3, #9
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	041b      	lsls	r3, r3, #16
 8006d52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	061b      	lsls	r3, r3, #24
 8006d60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d64:	4931      	ldr	r1, [pc, #196]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d6a:	4b30      	ldr	r3, [pc, #192]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	492d      	ldr	r1, [pc, #180]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d7c:	4b2b      	ldr	r3, [pc, #172]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	f023 0220 	bic.w	r2, r3, #32
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	4928      	ldr	r1, [pc, #160]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d8e:	4b27      	ldr	r3, [pc, #156]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d92:	4a26      	ldr	r2, [pc, #152]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d94:	f023 0310 	bic.w	r3, r3, #16
 8006d98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d9a:	4b24      	ldr	r3, [pc, #144]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d9e:	4b24      	ldr	r3, [pc, #144]	; (8006e30 <RCCEx_PLL2_Config+0x160>)
 8006da0:	4013      	ands	r3, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	69d2      	ldr	r2, [r2, #28]
 8006da6:	00d2      	lsls	r2, r2, #3
 8006da8:	4920      	ldr	r1, [pc, #128]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006dae:	4b1f      	ldr	r3, [pc, #124]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	4a1e      	ldr	r2, [pc, #120]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006db4:	f043 0310 	orr.w	r3, r3, #16
 8006db8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d106      	bne.n	8006dce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006dc0:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	4a19      	ldr	r2, [pc, #100]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006dc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006dcc:	e00f      	b.n	8006dee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d106      	bne.n	8006de2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006dd4:	4b15      	ldr	r3, [pc, #84]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006de0:	e005      	b.n	8006dee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006de2:	4b12      	ldr	r3, [pc, #72]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	4a11      	ldr	r2, [pc, #68]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006de8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006dec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006dee:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a0e      	ldr	r2, [pc, #56]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006df4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dfa:	f7fa f903 	bl	8001004 <HAL_GetTick>
 8006dfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e00:	e008      	b.n	8006e14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e02:	f7fa f8ff 	bl	8001004 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d901      	bls.n	8006e14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e006      	b.n	8006e22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0f0      	beq.n	8006e02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	ffff0007 	.word	0xffff0007

08006e34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e42:	4b53      	ldr	r3, [pc, #332]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d101      	bne.n	8006e52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e099      	b.n	8006f86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e52:	4b4f      	ldr	r3, [pc, #316]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a4e      	ldr	r2, [pc, #312]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e5e:	f7fa f8d1 	bl	8001004 <HAL_GetTick>
 8006e62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e64:	e008      	b.n	8006e78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e66:	f7fa f8cd 	bl	8001004 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e086      	b.n	8006f86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e78:	4b45      	ldr	r3, [pc, #276]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1f0      	bne.n	8006e66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e84:	4b42      	ldr	r3, [pc, #264]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	051b      	lsls	r3, r3, #20
 8006e92:	493f      	ldr	r1, [pc, #252]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	628b      	str	r3, [r1, #40]	; 0x28
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	025b      	lsls	r3, r3, #9
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	041b      	lsls	r3, r3, #16
 8006eb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	061b      	lsls	r3, r3, #24
 8006ec4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ec8:	4931      	ldr	r1, [pc, #196]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ece:	4b30      	ldr	r3, [pc, #192]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	492d      	ldr	r1, [pc, #180]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ee0:	4b2b      	ldr	r3, [pc, #172]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	4928      	ldr	r1, [pc, #160]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006ef2:	4b27      	ldr	r3, [pc, #156]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	4a26      	ldr	r2, [pc, #152]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006efc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006efe:	4b24      	ldr	r3, [pc, #144]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f02:	4b24      	ldr	r3, [pc, #144]	; (8006f94 <RCCEx_PLL3_Config+0x160>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	69d2      	ldr	r2, [r2, #28]
 8006f0a:	00d2      	lsls	r2, r2, #3
 8006f0c:	4920      	ldr	r1, [pc, #128]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f12:	4b1f      	ldr	r3, [pc, #124]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	4a1e      	ldr	r2, [pc, #120]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f24:	4b1a      	ldr	r3, [pc, #104]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	4a19      	ldr	r2, [pc, #100]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f30:	e00f      	b.n	8006f52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d106      	bne.n	8006f46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f38:	4b15      	ldr	r3, [pc, #84]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	4a14      	ldr	r2, [pc, #80]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f44:	e005      	b.n	8006f52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f46:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	4a11      	ldr	r2, [pc, #68]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f52:	4b0f      	ldr	r3, [pc, #60]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a0e      	ldr	r2, [pc, #56]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f5e:	f7fa f851 	bl	8001004 <HAL_GetTick>
 8006f62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f64:	e008      	b.n	8006f78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f66:	f7fa f84d 	bl	8001004 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d901      	bls.n	8006f78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e006      	b.n	8006f86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f78:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0f0      	beq.n	8006f66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	58024400 	.word	0x58024400
 8006f94:	ffff0007 	.word	0xffff0007

08006f98 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d904      	bls.n	8006fb6 <HAL_SAI_InitProtocol+0x1e>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	3b03      	subs	r3, #3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d812      	bhi.n	8006fda <HAL_SAI_InitProtocol+0x42>
 8006fb4:	e008      	b.n	8006fc8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	68b9      	ldr	r1, [r7, #8]
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fb8b 	bl	80076d8 <SAI_InitI2S>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc6:	e00b      	b.n	8006fe0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 fc34 	bl	800783c <SAI_InitPCM>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd8:	e002      	b.n	8006fe0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8006fde:	bf00      	nop
  }

  if (status == HAL_OK)
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d104      	bne.n	8006ff0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 f808 	bl	8006ffc <HAL_SAI_Init>
 8006fec:	4603      	mov	r3, r0
 8006fee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	; 0x28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e201      	b.n	8007412 <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007014:	2b01      	cmp	r3, #1
 8007016:	d113      	bne.n	8007040 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a99      	ldr	r2, [pc, #612]	; (8007284 <HAL_SAI_Init+0x288>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d004      	beq.n	800702c <HAL_SAI_Init+0x30>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a98      	ldr	r2, [pc, #608]	; (8007288 <HAL_SAI_Init+0x28c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d107      	bne.n	800703c <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007030:	2b01      	cmp	r3, #1
 8007032:	d103      	bne.n	800703c <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e1e8      	b.n	8007412 <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a8f      	ldr	r2, [pc, #572]	; (8007284 <HAL_SAI_Init+0x288>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_SAI_Init+0x58>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a8f      	ldr	r2, [pc, #572]	; (800728c <HAL_SAI_Init+0x290>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d102      	bne.n	800705a <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8007054:	4b8e      	ldr	r3, [pc, #568]	; (8007290 <HAL_SAI_Init+0x294>)
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	e00e      	b.n	8007078 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a8a      	ldr	r2, [pc, #552]	; (8007288 <HAL_SAI_Init+0x28c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d004      	beq.n	800706e <HAL_SAI_Init+0x72>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a8a      	ldr	r2, [pc, #552]	; (8007294 <HAL_SAI_Init+0x298>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d102      	bne.n	8007074 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800706e:	4b8a      	ldr	r3, [pc, #552]	; (8007298 <HAL_SAI_Init+0x29c>)
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	e001      	b.n	8007078 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e1cc      	b.n	8007412 <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d106      	bne.n	8007092 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7f9 fd6d 	bl	8000b6c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fc8c 	bl	80079b0 <SAI_Disable>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e1b7      	b.n	8007412 <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2202      	movs	r2, #2
 80070a6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d00c      	beq.n	80070cc <HAL_SAI_Init+0xd0>
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d80d      	bhi.n	80070d2 <HAL_SAI_Init+0xd6>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <HAL_SAI_Init+0xc4>
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d003      	beq.n	80070c6 <HAL_SAI_Init+0xca>
 80070be:	e008      	b.n	80070d2 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80070c4:	e008      	b.n	80070d8 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80070c6:	2310      	movs	r3, #16
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80070ca:	e005      	b.n	80070d8 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80070cc:	2320      	movs	r3, #32
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80070d0:	e002      	b.n	80070d8 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80070d6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	2b05      	cmp	r3, #5
 80070de:	d822      	bhi.n	8007126 <HAL_SAI_Init+0x12a>
 80070e0:	a201      	add	r2, pc, #4	; (adr r2, 80070e8 <HAL_SAI_Init+0xec>)
 80070e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e6:	bf00      	nop
 80070e8:	08007101 	.word	0x08007101
 80070ec:	08007107 	.word	0x08007107
 80070f0:	0800710f 	.word	0x0800710f
 80070f4:	08007127 	.word	0x08007127
 80070f8:	08007127 	.word	0x08007127
 80070fc:	08007117 	.word	0x08007117
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	61fb      	str	r3, [r7, #28]
      break;
 8007104:	e012      	b.n	800712c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800710a:	61fb      	str	r3, [r7, #28]
      break;
 800710c:	e00e      	b.n	800712c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800710e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007112:	61fb      	str	r3, [r7, #28]
      break;
 8007114:	e00a      	b.n	800712c <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007116:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800711a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	f043 0303 	orr.w	r3, r3, #3
 8007122:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007124:	e002      	b.n	800712c <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007126:	2300      	movs	r3, #0
 8007128:	61fb      	str	r3, [r7, #28]
      break;
 800712a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007130:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 808a 	beq.w	8007250 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a4f      	ldr	r2, [pc, #316]	; (8007284 <HAL_SAI_Init+0x288>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d004      	beq.n	8007154 <HAL_SAI_Init+0x158>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a4f      	ldr	r2, [pc, #316]	; (800728c <HAL_SAI_Init+0x290>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d106      	bne.n	8007162 <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007154:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007158:	f04f 0100 	mov.w	r1, #0
 800715c:	f7fe fcd6 	bl	8005b0c <HAL_RCCEx_GetPeriphCLKFreq>
 8007160:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a48      	ldr	r2, [pc, #288]	; (8007288 <HAL_SAI_Init+0x28c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d106      	bne.n	800717a <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800716c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007170:	f04f 0100 	mov.w	r1, #0
 8007174:	f7fe fcca 	bl	8005b0c <HAL_RCCEx_GetPeriphCLKFreq>
 8007178:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a45      	ldr	r2, [pc, #276]	; (8007294 <HAL_SAI_Init+0x298>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d106      	bne.n	8007192 <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007184:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007188:	f04f 0100 	mov.w	r1, #0
 800718c:	f7fe fcbe 	bl	8005b0c <HAL_RCCEx_GetPeriphCLKFreq>
 8007190:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800719a:	d120      	bne.n	80071de <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d102      	bne.n	80071aa <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80071a4:	2340      	movs	r3, #64	; 0x40
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e00a      	b.n	80071c0 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ae:	2b08      	cmp	r3, #8
 80071b0:	d103      	bne.n	80071ba <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80071b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e002      	b.n	80071c0 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071be:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	4613      	mov	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	4619      	mov	r1, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	fb02 f303 	mul.w	r3, r2, r3
 80071d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80071da:	613b      	str	r3, [r7, #16]
 80071dc:	e017      	b.n	800720e <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071e6:	d101      	bne.n	80071ec <HAL_SAI_Init+0x1f0>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e000      	b.n	80071ee <HAL_SAI_Init+0x1f2>
 80071ec:	2301      	movs	r3, #1
 80071ee:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	4619      	mov	r1, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	fb02 f303 	mul.w	r3, r2, r3
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	fbb1 f3f3 	udiv	r3, r1, r3
 800720c:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	4a22      	ldr	r2, [pc, #136]	; (800729c <HAL_SAI_Init+0x2a0>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	08da      	lsrs	r2, r3, #3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800721c:	6939      	ldr	r1, [r7, #16]
 800721e:	4b1f      	ldr	r3, [pc, #124]	; (800729c <HAL_SAI_Init+0x2a0>)
 8007220:	fba3 2301 	umull	r2, r3, r3, r1
 8007224:	08da      	lsrs	r2, r3, #3
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	1aca      	subs	r2, r1, r3
 8007230:	2a08      	cmp	r2, #8
 8007232:	d904      	bls.n	800723e <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007242:	2b04      	cmp	r3, #4
 8007244:	d104      	bne.n	8007250 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	085a      	lsrs	r2, r3, #1
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <HAL_SAI_Init+0x264>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d109      	bne.n	8007274 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_SAI_Init+0x270>
 8007268:	2300      	movs	r3, #0
 800726a:	e001      	b.n	8007270 <HAL_SAI_Init+0x274>
 800726c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007270:	623b      	str	r3, [r7, #32]
 8007272:	e017      	b.n	80072a4 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007278:	2b01      	cmp	r3, #1
 800727a:	d111      	bne.n	80072a0 <HAL_SAI_Init+0x2a4>
 800727c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007280:	e00f      	b.n	80072a2 <HAL_SAI_Init+0x2a6>
 8007282:	bf00      	nop
 8007284:	40015804 	.word	0x40015804
 8007288:	58005404 	.word	0x58005404
 800728c:	40015824 	.word	0x40015824
 8007290:	40015800 	.word	0x40015800
 8007294:	58005424 	.word	0x58005424
 8007298:	58005400 	.word	0x58005400
 800729c:	cccccccd 	.word	0xcccccccd
 80072a0:	2300      	movs	r3, #0
 80072a2:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6819      	ldr	r1, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	4b5b      	ldr	r3, [pc, #364]	; (800741c <HAL_SAI_Init+0x420>)
 80072b0:	400b      	ands	r3, r1
 80072b2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6819      	ldr	r1, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80072c8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ce:	431a      	orrs	r2, r3
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 80072dc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80072e8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	051b      	lsls	r3, r3, #20
 80072f0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80072f6:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6859      	ldr	r1, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	4b43      	ldr	r3, [pc, #268]	; (8007420 <HAL_SAI_Init+0x424>)
 8007312:	400b      	ands	r3, r1
 8007314:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6859      	ldr	r1, [r3, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	69da      	ldr	r2, [r3, #28]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007324:	431a      	orrs	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6899      	ldr	r1, [r3, #8]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	4b39      	ldr	r3, [pc, #228]	; (8007424 <HAL_SAI_Init+0x428>)
 8007340:	400b      	ands	r3, r1
 8007342:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6899      	ldr	r1, [r3, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007354:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800735a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007360:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007366:	3b01      	subs	r3, #1
 8007368:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800736a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68d9      	ldr	r1, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007382:	400b      	ands	r3, r1
 8007384:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68d9      	ldr	r1, [r3, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007394:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800739a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800739c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a2:	3b01      	subs	r3, #1
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1c      	ldr	r2, [pc, #112]	; (8007428 <HAL_SAI_Init+0x42c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d004      	beq.n	80073c4 <HAL_SAI_Init+0x3c8>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1b      	ldr	r2, [pc, #108]	; (800742c <HAL_SAI_Init+0x430>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d119      	bne.n	80073f8 <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c8:	f023 0201 	bic.w	r2, r3, #1
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d10e      	bne.n	80073f8 <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e2:	3b01      	subs	r3, #1
 80073e4:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80073e6:	431a      	orrs	r2, r3
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f0:	f043 0201 	orr.w	r2, r3, #1
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3728      	adds	r7, #40	; 0x28
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	f005c010 	.word	0xf005c010
 8007420:	ffff1ff0 	.word	0xffff1ff0
 8007424:	fff88000 	.word	0xfff88000
 8007428:	40015804 	.word	0x40015804
 800742c:	58005404 	.word	0x58005404

08007430 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4613      	mov	r3, r2
 800743c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800743e:	f7f9 fde1 	bl	8001004 <HAL_GetTick>
 8007442:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <HAL_SAI_Transmit_DMA+0x20>
 800744a:	88fb      	ldrh	r3, [r7, #6]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e098      	b.n	8007586 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b01      	cmp	r3, #1
 800745e:	f040 8091 	bne.w	8007584 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_SAI_Transmit_DMA+0x40>
 800746c:	2302      	movs	r3, #2
 800746e:	e08a      	b.n	8007586 <HAL_SAI_Transmit_DMA+0x156>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	88fa      	ldrh	r2, [r7, #6]
 8007482:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	88fa      	ldrh	r2, [r7, #6]
 800748a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2212      	movs	r2, #18
 800749a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074a4:	4a3a      	ldr	r2, [pc, #232]	; (8007590 <HAL_SAI_Transmit_DMA+0x160>)
 80074a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074ae:	4a39      	ldr	r2, [pc, #228]	; (8007594 <HAL_SAI_Transmit_DMA+0x164>)
 80074b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074b8:	4a37      	ldr	r2, [pc, #220]	; (8007598 <HAL_SAI_Transmit_DMA+0x168>)
 80074ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074c2:	2200      	movs	r2, #0
 80074c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074d0:	4619      	mov	r1, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	331c      	adds	r3, #28
 80074d8:	461a      	mov	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80074e0:	f7fa faa0 	bl	8001a24 <HAL_DMA_Start_IT>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e047      	b.n	8007586 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80074f6:	2100      	movs	r1, #0
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 fa21 	bl	8007940 <SAI_InterruptFlag>
 80074fe:	4601      	mov	r1, r0
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	691a      	ldr	r2, [r3, #16]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800751c:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800751e:	e015      	b.n	800754c <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007520:	f7f9 fd70 	bl	8001004 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800752e:	d90d      	bls.n	800754c <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007536:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e01c      	b.n	8007586 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0e2      	beq.n	8007520 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d107      	bne.n	8007578 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007576:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	e000      	b.n	8007586 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8007584:	2302      	movs	r3, #2
  }
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	08007a85 	.word	0x08007a85
 8007594:	08007a25 	.word	0x08007a25
 8007598:	08007b1d 	.word	0x08007b1d

0800759c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4613      	mov	r3, r2
 80075a8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <HAL_SAI_Receive_DMA+0x1a>
 80075b0:	88fb      	ldrh	r3, [r7, #6]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e079      	b.n	80076ae <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d172      	bne.n	80076ac <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d101      	bne.n	80075d4 <HAL_SAI_Receive_DMA+0x38>
 80075d0:	2302      	movs	r3, #2
 80075d2:	e06c      	b.n	80076ae <HAL_SAI_Receive_DMA+0x112>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	88fa      	ldrh	r2, [r7, #6]
 80075e6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	88fa      	ldrh	r2, [r7, #6]
 80075ee:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2222      	movs	r2, #34	; 0x22
 80075fe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007608:	4a2b      	ldr	r2, [pc, #172]	; (80076b8 <HAL_SAI_Receive_DMA+0x11c>)
 800760a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007612:	4a2a      	ldr	r2, [pc, #168]	; (80076bc <HAL_SAI_Receive_DMA+0x120>)
 8007614:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800761c:	4a28      	ldr	r2, [pc, #160]	; (80076c0 <HAL_SAI_Receive_DMA+0x124>)
 800761e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007626:	2200      	movs	r2, #0
 8007628:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	331c      	adds	r3, #28
 8007636:	4619      	mov	r1, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800763c:	461a      	mov	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007644:	f7fa f9ee 	bl	8001a24 <HAL_DMA_Start_IT>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e029      	b.n	80076ae <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800765a:	2100      	movs	r1, #0
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 f96f 	bl	8007940 <SAI_InterruptFlag>
 8007662:	4601      	mov	r1, r0
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691a      	ldr	r2, [r3, #16]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007680:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d107      	bne.n	80076a0 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800769e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e000      	b.n	80076ae <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
  }
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	08007b01 	.word	0x08007b01
 80076bc:	08007aa1 	.word	0x08007aa1
 80076c0:	08007b1d 	.word	0x08007b1d

080076c4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <SAI_InitI2S+0x2e>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d103      	bne.n	800770e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	651a      	str	r2, [r3, #80]	; 0x50
 800770c:	e002      	b.n	8007714 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800771a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007722:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e077      	b.n	800782e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d107      	bne.n	8007754 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007750:	665a      	str	r2, [r3, #100]	; 0x64
 8007752:	e006      	b.n	8007762 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800775a:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b03      	cmp	r3, #3
 8007766:	d84f      	bhi.n	8007808 <SAI_InitI2S+0x130>
 8007768:	a201      	add	r2, pc, #4	; (adr r2, 8007770 <SAI_InitI2S+0x98>)
 800776a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776e:	bf00      	nop
 8007770:	08007781 	.word	0x08007781
 8007774:	080077a3 	.word	0x080077a3
 8007778:	080077c5 	.word	0x080077c5
 800777c:	080077e7 	.word	0x080077e7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2280      	movs	r2, #128	; 0x80
 8007784:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	085b      	lsrs	r3, r3, #1
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	085b      	lsrs	r3, r3, #1
 8007794:	011a      	lsls	r2, r3, #4
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2240      	movs	r2, #64	; 0x40
 800779e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80077a0:	e035      	b.n	800780e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2280      	movs	r2, #128	; 0x80
 80077a6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	085b      	lsrs	r3, r3, #1
 80077ac:	019a      	lsls	r2, r3, #6
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	085b      	lsrs	r3, r3, #1
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2280      	movs	r2, #128	; 0x80
 80077c0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80077c2:	e024      	b.n	800780e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	22c0      	movs	r2, #192	; 0xc0
 80077c8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	085b      	lsrs	r3, r3, #1
 80077ce:	019a      	lsls	r2, r3, #6
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	085b      	lsrs	r3, r3, #1
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2280      	movs	r2, #128	; 0x80
 80077e2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80077e4:	e013      	b.n	800780e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	22e0      	movs	r2, #224	; 0xe0
 80077ea:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	085b      	lsrs	r3, r3, #1
 80077f0:	019a      	lsls	r2, r3, #6
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	085b      	lsrs	r3, r3, #1
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2280      	movs	r2, #128	; 0x80
 8007804:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007806:	e002      	b.n	800780e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	75fb      	strb	r3, [r7, #23]
      break;
 800780c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b02      	cmp	r3, #2
 8007812:	d10b      	bne.n	800782c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d102      	bne.n	8007820 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2210      	movs	r2, #16
 800781e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d102      	bne.n	800782c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2208      	movs	r2, #8
 800782a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
}
 800782e:	4618      	mov	r0, r3
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop

0800783c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <SAI_InitPCM+0x2e>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2b02      	cmp	r3, #2
 8007868:	d103      	bne.n	8007872 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	651a      	str	r2, [r3, #80]	; 0x50
 8007870:	e002      	b.n	8007878 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007884:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800788c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078a0:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d103      	bne.n	80078b0 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2201      	movs	r2, #1
 80078ac:	659a      	str	r2, [r3, #88]	; 0x58
 80078ae:	e002      	b.n	80078b6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	220d      	movs	r2, #13
 80078b4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d837      	bhi.n	800792c <SAI_InitPCM+0xf0>
 80078bc:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <SAI_InitPCM+0x88>)
 80078be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c2:	bf00      	nop
 80078c4:	080078d5 	.word	0x080078d5
 80078c8:	080078eb 	.word	0x080078eb
 80078cc:	08007901 	.word	0x08007901
 80078d0:	08007917 	.word	0x08007917
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2280      	movs	r2, #128	; 0x80
 80078d8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	011a      	lsls	r2, r3, #4
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2240      	movs	r2, #64	; 0x40
 80078e6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80078e8:	e023      	b.n	8007932 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2280      	movs	r2, #128	; 0x80
 80078ee:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2280      	movs	r2, #128	; 0x80
 80078fc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80078fe:	e018      	b.n	8007932 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	22c0      	movs	r2, #192	; 0xc0
 8007904:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2280      	movs	r2, #128	; 0x80
 8007912:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007914:	e00d      	b.n	8007932 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	22e0      	movs	r2, #224	; 0xe0
 800791a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2280      	movs	r2, #128	; 0x80
 8007928:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800792a:	e002      	b.n	8007932 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	75fb      	strb	r3, [r7, #23]
      break;
 8007930:	bf00      	nop
  }

  return status;
 8007932:	7dfb      	ldrb	r3, [r7, #23]
}
 8007934:	4618      	mov	r0, r3
 8007936:	371c      	adds	r7, #28
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800794c:	2301      	movs	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d103      	bne.n	800795e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f043 0308 	orr.w	r3, r3, #8
 800795c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007962:	2b08      	cmp	r3, #8
 8007964:	d10b      	bne.n	800797e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800796a:	2b03      	cmp	r3, #3
 800796c:	d003      	beq.n	8007976 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d103      	bne.n	800797e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f043 0310 	orr.w	r3, r3, #16
 800797c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2b03      	cmp	r3, #3
 8007984:	d003      	beq.n	800798e <SAI_InterruptFlag+0x4e>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2b02      	cmp	r3, #2
 800798c:	d104      	bne.n	8007998 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	e003      	b.n	80079a0 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f043 0304 	orr.w	r3, r3, #4
 800799e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80079a0:	68fb      	ldr	r3, [r7, #12]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
	...

080079b0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80079b8:	4b18      	ldr	r3, [pc, #96]	; (8007a1c <SAI_Disable+0x6c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a18      	ldr	r2, [pc, #96]	; (8007a20 <SAI_Disable+0x70>)
 80079be:	fba2 2303 	umull	r2, r3, r2, r3
 80079c2:	0b1b      	lsrs	r3, r3, #12
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079da:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	72fb      	strb	r3, [r7, #11]
      break;
 80079f6:	e009      	b.n	8007a0c <SAI_Disable+0x5c>
    }
    count--;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3b01      	subs	r3, #1
 80079fc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e7      	bne.n	80079dc <SAI_Disable+0x2c>

  return status;
 8007a0c:	7afb      	ldrb	r3, [r7, #11]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	24000000 	.word	0x24000000
 8007a20:	95cbec1b 	.word	0x95cbec1b

08007a24 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a3a:	d01c      	beq.n	8007a76 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007a52:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007a54:	2100      	movs	r1, #0
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff ff72 	bl	8007940 <SAI_InterruptFlag>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	43d9      	mvns	r1, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	691a      	ldr	r2, [r3, #16]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	400a      	ands	r2, r1
 8007a6c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f7f8 fd1a 	bl	80004b0 <HAL_SAI_TxCpltCallback>
#endif
}
 8007a7c:	bf00      	nop
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f7f8 fd1c 	bl	80004d0 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8007a98:	bf00      	nop
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aac:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab6:	d01c      	beq.n	8007af2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007ac6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7ff ff34 	bl	8007940 <SAI_InterruptFlag>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	43d9      	mvns	r1, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	691a      	ldr	r2, [r3, #16]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	400a      	ands	r2, r1
 8007ae8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f7f8 fcfc 	bl	80004f0 <HAL_SAI_RxCpltCallback>
#endif
}
 8007af8:	bf00      	nop
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f7f8 fd0a 	bl	8000528 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8007b14:	bf00      	nop
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7fb f90e 	bl	8002d4c <HAL_DMA_GetError>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d01d      	beq.n	8007b72 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007b54:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f7ff ff2a 	bl	80079b0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f7ff fda9 	bl	80076c4 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e10f      	b.n	8007dae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a87      	ldr	r2, [pc, #540]	; (8007db8 <HAL_SPI_Init+0x23c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d00f      	beq.n	8007bbe <HAL_SPI_Init+0x42>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a86      	ldr	r2, [pc, #536]	; (8007dbc <HAL_SPI_Init+0x240>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d00a      	beq.n	8007bbe <HAL_SPI_Init+0x42>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a84      	ldr	r2, [pc, #528]	; (8007dc0 <HAL_SPI_Init+0x244>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d005      	beq.n	8007bbe <HAL_SPI_Init+0x42>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	2b0f      	cmp	r3, #15
 8007bb8:	d901      	bls.n	8007bbe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e0f7      	b.n	8007dae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fd08 	bl	80085d4 <SPI_GetPacketSize>
 8007bc4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a7b      	ldr	r2, [pc, #492]	; (8007db8 <HAL_SPI_Init+0x23c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d00c      	beq.n	8007bea <HAL_SPI_Init+0x6e>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a79      	ldr	r2, [pc, #484]	; (8007dbc <HAL_SPI_Init+0x240>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d007      	beq.n	8007bea <HAL_SPI_Init+0x6e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a78      	ldr	r2, [pc, #480]	; (8007dc0 <HAL_SPI_Init+0x244>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d002      	beq.n	8007bea <HAL_SPI_Init+0x6e>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d811      	bhi.n	8007c0e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007bee:	4a72      	ldr	r2, [pc, #456]	; (8007db8 <HAL_SPI_Init+0x23c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d009      	beq.n	8007c08 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a70      	ldr	r2, [pc, #448]	; (8007dbc <HAL_SPI_Init+0x240>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d004      	beq.n	8007c08 <HAL_SPI_Init+0x8c>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a6f      	ldr	r2, [pc, #444]	; (8007dc0 <HAL_SPI_Init+0x244>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d104      	bne.n	8007c12 <HAL_SPI_Init+0x96>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b10      	cmp	r3, #16
 8007c0c:	d901      	bls.n	8007c12 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e0cd      	b.n	8007dae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d106      	bne.n	8007c2c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7f8 ff12 	bl	8000a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0201 	bic.w	r2, r2, #1
 8007c42:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007c4e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c58:	d119      	bne.n	8007c8e <HAL_SPI_Init+0x112>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c62:	d103      	bne.n	8007c6c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d008      	beq.n	8007c7e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10c      	bne.n	8007c8e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c7c:	d107      	bne.n	8007c8e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00f      	beq.n	8007cba <HAL_SPI_Init+0x13e>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	2b06      	cmp	r3, #6
 8007ca0:	d90b      	bls.n	8007cba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	e007      	b.n	8007cca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69da      	ldr	r2, [r3, #28]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cdc:	ea42 0103 	orr.w	r1, r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	431a      	orrs	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	431a      	orrs	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d2a:	ea42 0103 	orr.w	r1, r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d113      	bne.n	8007d6a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d54:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d68:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0201 	bic.w	r2, r2, #1
 8007d78:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	40013000 	.word	0x40013000
 8007dbc:	40003800 	.word	0x40003800
 8007dc0:	40003c00 	.word	0x40003c00

08007dc4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08e      	sub	sp, #56	; 0x38
 8007dc8:	af02      	add	r7, sp, #8
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3320      	adds	r3, #32
 8007dd8:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3330      	adds	r3, #48	; 0x30
 8007de0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3301      	adds	r3, #1
 8007dec:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dee:	f7f9 f909 	bl	8001004 <HAL_GetTick>
 8007df2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8007df4:	887b      	ldrh	r3, [r7, #2]
 8007df6:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8007df8:	887b      	ldrh	r3, [r7, #2]
 8007dfa:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d001      	beq.n	8007e0c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e310      	b.n	800842e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d005      	beq.n	8007e1e <HAL_SPI_TransmitReceive+0x5a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <HAL_SPI_TransmitReceive+0x5a>
 8007e18:	887b      	ldrh	r3, [r7, #2]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e305      	b.n	800842e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d101      	bne.n	8007e30 <HAL_SPI_TransmitReceive+0x6c>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e2fe      	b.n	800842e <HAL_SPI_TransmitReceive+0x66a>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2205      	movs	r2, #5
 8007e3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	887a      	ldrh	r2, [r7, #2]
 8007e52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	887a      	ldrh	r2, [r7, #2]
 8007e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	887a      	ldrh	r2, [r7, #2]
 8007e68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	887a      	ldrh	r2, [r7, #2]
 8007e70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8007e8e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a70      	ldr	r2, [pc, #448]	; (8008058 <HAL_SPI_TransmitReceive+0x294>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d009      	beq.n	8007eae <HAL_SPI_TransmitReceive+0xea>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a6f      	ldr	r2, [pc, #444]	; (800805c <HAL_SPI_TransmitReceive+0x298>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d004      	beq.n	8007eae <HAL_SPI_TransmitReceive+0xea>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a6d      	ldr	r2, [pc, #436]	; (8008060 <HAL_SPI_TransmitReceive+0x29c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d102      	bne.n	8007eb4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8007eae:	2310      	movs	r3, #16
 8007eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb2:	e001      	b.n	8007eb8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8007eb4:	2308      	movs	r3, #8
 8007eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	4b69      	ldr	r3, [pc, #420]	; (8008064 <HAL_SPI_TransmitReceive+0x2a0>)
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	8879      	ldrh	r1, [r7, #2]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	6812      	ldr	r2, [r2, #0]
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0201 	orr.w	r2, r2, #1
 8007eda:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ee4:	d107      	bne.n	8007ef6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ef4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	2b0f      	cmp	r3, #15
 8007efc:	f240 80a2 	bls.w	8008044 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	089b      	lsrs	r3, r3, #2
 8007f04:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007f06:	e094      	b.n	8008032 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	f003 0302 	and.w	r3, r3, #2
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d120      	bne.n	8007f58 <HAL_SPI_TransmitReceive+0x194>
 8007f16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d01d      	beq.n	8007f58 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007f1c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007f1e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f22:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d217      	bcs.n	8007f58 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6812      	ldr	r2, [r2, #0]
 8007f32:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f38:	1d1a      	adds	r2, r3, #4
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f56:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007f60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d065      	beq.n	8008032 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d118      	bne.n	8007fa6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007f7e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f84:	1d1a      	adds	r2, r3, #4
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fa2:	853b      	strh	r3, [r7, #40]	; 0x28
 8007fa4:	e045      	b.n	8008032 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007fa6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007fa8:	8bfb      	ldrh	r3, [r7, #30]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d21d      	bcs.n	8007fea <HAL_SPI_TransmitReceive+0x226>
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d018      	beq.n	8007fea <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007fc2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fc8:	1d1a      	adds	r2, r3, #4
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fe6:	853b      	strh	r3, [r7, #40]	; 0x28
 8007fe8:	e023      	b.n	8008032 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fea:	f7f9 f80b 	bl	8001004 <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d803      	bhi.n	8008002 <HAL_SPI_TransmitReceive+0x23e>
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008000:	d102      	bne.n	8008008 <HAL_SPI_TransmitReceive+0x244>
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	2b00      	cmp	r3, #0
 8008006:	d114      	bne.n	8008032 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 fa15 	bl	8008438 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008014:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e1fd      	b.n	800842e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008032:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008034:	2b00      	cmp	r3, #0
 8008036:	f47f af67 	bne.w	8007f08 <HAL_SPI_TransmitReceive+0x144>
 800803a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800803c:	2b00      	cmp	r3, #0
 800803e:	f47f af63 	bne.w	8007f08 <HAL_SPI_TransmitReceive+0x144>
 8008042:	e1ce      	b.n	80083e2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	2b07      	cmp	r3, #7
 800804a:	f240 81c2 	bls.w	80083d2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800804e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008050:	085b      	lsrs	r3, r3, #1
 8008052:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008054:	e0c9      	b.n	80081ea <HAL_SPI_TransmitReceive+0x426>
 8008056:	bf00      	nop
 8008058:	40013000 	.word	0x40013000
 800805c:	40003800 	.word	0x40003800
 8008060:	40003c00 	.word	0x40003c00
 8008064:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b02      	cmp	r3, #2
 8008074:	d11f      	bne.n	80080b6 <HAL_SPI_TransmitReceive+0x2f2>
 8008076:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01c      	beq.n	80080b6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800807c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800807e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008082:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008084:	429a      	cmp	r2, r3
 8008086:	d216      	bcs.n	80080b6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808c:	881a      	ldrh	r2, [r3, #0]
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008096:	1c9a      	adds	r2, r3, #2
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	3b01      	subs	r3, #1
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080b4:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80080be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 8092 	beq.w	80081ea <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d118      	bne.n	8008106 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080d8:	6a3a      	ldr	r2, [r7, #32]
 80080da:	8812      	ldrh	r2, [r2, #0]
 80080dc:	b292      	uxth	r2, r2
 80080de:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080e4:	1c9a      	adds	r2, r3, #2
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008102:	853b      	strh	r3, [r7, #40]	; 0x28
 8008104:	e071      	b.n	80081ea <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008106:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008108:	8bfb      	ldrh	r3, [r7, #30]
 800810a:	429a      	cmp	r2, r3
 800810c:	d228      	bcs.n	8008160 <HAL_SPI_TransmitReceive+0x39c>
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d023      	beq.n	8008160 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800811c:	6a3a      	ldr	r2, [r7, #32]
 800811e:	8812      	ldrh	r2, [r2, #0]
 8008120:	b292      	uxth	r2, r2
 8008122:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008128:	1c9a      	adds	r2, r3, #2
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008132:	6a3a      	ldr	r2, [r7, #32]
 8008134:	8812      	ldrh	r2, [r2, #0]
 8008136:	b292      	uxth	r2, r2
 8008138:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800813e:	1c9a      	adds	r2, r3, #2
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800814a:	b29b      	uxth	r3, r3
 800814c:	3b02      	subs	r3, #2
 800814e:	b29a      	uxth	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800815c:	853b      	strh	r3, [r7, #40]	; 0x28
 800815e:	e044      	b.n	80081ea <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008160:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008162:	2b01      	cmp	r3, #1
 8008164:	d11d      	bne.n	80081a2 <HAL_SPI_TransmitReceive+0x3de>
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d018      	beq.n	80081a2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008174:	6a3a      	ldr	r2, [r7, #32]
 8008176:	8812      	ldrh	r2, [r2, #0]
 8008178:	b292      	uxth	r2, r2
 800817a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008180:	1c9a      	adds	r2, r3, #2
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800818c:	b29b      	uxth	r3, r3
 800818e:	3b01      	subs	r3, #1
 8008190:	b29a      	uxth	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800819e:	853b      	strh	r3, [r7, #40]	; 0x28
 80081a0:	e023      	b.n	80081ea <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081a2:	f7f8 ff2f 	bl	8001004 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d803      	bhi.n	80081ba <HAL_SPI_TransmitReceive+0x3f6>
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b8:	d102      	bne.n	80081c0 <HAL_SPI_TransmitReceive+0x3fc>
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d114      	bne.n	80081ea <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 f939 	bl	8008438 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e121      	b.n	800842e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80081ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f47f af3b 	bne.w	8008068 <HAL_SPI_TransmitReceive+0x2a4>
 80081f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f47f af37 	bne.w	8008068 <HAL_SPI_TransmitReceive+0x2a4>
 80081fa:	e0f2      	b.n	80083e2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b02      	cmp	r3, #2
 8008208:	d121      	bne.n	800824e <HAL_SPI_TransmitReceive+0x48a>
 800820a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01e      	beq.n	800824e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008210:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008212:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008216:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008218:	429a      	cmp	r2, r3
 800821a:	d218      	bcs.n	800824e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3320      	adds	r3, #32
 8008226:	7812      	ldrb	r2, [r2, #0]
 8008228:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800823a:	b29b      	uxth	r3, r3
 800823c:	3b01      	subs	r3, #1
 800823e:	b29a      	uxth	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800824c:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008256:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 80ba 	beq.w	80083d2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b01      	cmp	r3, #1
 800826a:	d11b      	bne.n	80082a4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008278:	7812      	ldrb	r2, [r2, #0]
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800828e:	b29b      	uxth	r3, r3
 8008290:	3b01      	subs	r3, #1
 8008292:	b29a      	uxth	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082a0:	853b      	strh	r3, [r7, #40]	; 0x28
 80082a2:	e096      	b.n	80083d2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80082a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80082a6:	8bfb      	ldrh	r3, [r7, #30]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d24a      	bcs.n	8008342 <HAL_SPI_TransmitReceive+0x57e>
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d045      	beq.n	8008342 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c2:	7812      	ldrb	r2, [r2, #0]
 80082c4:	b2d2      	uxtb	r2, r2
 80082c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082de:	7812      	ldrb	r2, [r2, #0]
 80082e0:	b2d2      	uxtb	r2, r2
 80082e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082fa:	7812      	ldrb	r2, [r2, #0]
 80082fc:	b2d2      	uxtb	r2, r2
 80082fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008316:	7812      	ldrb	r2, [r2, #0]
 8008318:	b2d2      	uxtb	r2, r2
 800831a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800832c:	b29b      	uxth	r3, r3
 800832e:	3b04      	subs	r3, #4
 8008330:	b29a      	uxth	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800833e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008340:	e047      	b.n	80083d2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008342:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008344:	2b03      	cmp	r3, #3
 8008346:	d820      	bhi.n	800838a <HAL_SPI_TransmitReceive+0x5c6>
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01b      	beq.n	800838a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800835e:	7812      	ldrb	r2, [r2, #0]
 8008360:	b2d2      	uxtb	r2, r2
 8008362:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008374:	b29b      	uxth	r3, r3
 8008376:	3b01      	subs	r3, #1
 8008378:	b29a      	uxth	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008386:	853b      	strh	r3, [r7, #40]	; 0x28
 8008388:	e023      	b.n	80083d2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800838a:	f7f8 fe3b 	bl	8001004 <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008396:	429a      	cmp	r2, r3
 8008398:	d803      	bhi.n	80083a2 <HAL_SPI_TransmitReceive+0x5de>
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a0:	d102      	bne.n	80083a8 <HAL_SPI_TransmitReceive+0x5e4>
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d114      	bne.n	80083d2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 f845 	bl	8008438 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e02d      	b.n	800842e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80083d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f47f af11 	bne.w	80081fc <HAL_SPI_TransmitReceive+0x438>
 80083da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f47f af0d 	bne.w	80081fc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	2200      	movs	r2, #0
 80083ea:	2108      	movs	r1, #8
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 f8c3 	bl	8008578 <SPI_WaitOnFlagUntilTimeout>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d007      	beq.n	8008408 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083fe:	f043 0220 	orr.w	r2, r3, #32
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f815 	bl	8008438 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e000      	b.n	800842e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800842c:	2300      	movs	r3, #0
  }
}
 800842e:	4618      	mov	r0, r3
 8008430:	3730      	adds	r7, #48	; 0x30
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop

08008438 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699a      	ldr	r2, [r3, #24]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0208 	orr.w	r2, r2, #8
 8008456:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	699a      	ldr	r2, [r3, #24]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0210 	orr.w	r2, r2, #16
 8008466:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 0201 	bic.w	r2, r2, #1
 8008476:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6919      	ldr	r1, [r3, #16]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	4b3c      	ldr	r3, [pc, #240]	; (8008574 <SPI_CloseTransfer+0x13c>)
 8008484:	400b      	ands	r3, r1
 8008486:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	689a      	ldr	r2, [r3, #8]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008496:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d014      	beq.n	80084ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00f      	beq.n	80084ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699a      	ldr	r2, [r3, #24]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f042 0220 	orr.w	r2, r2, #32
 80084cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d014      	beq.n	8008504 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00f      	beq.n	8008504 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ea:	f043 0204 	orr.w	r2, r3, #4
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699a      	ldr	r2, [r3, #24]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008502:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00f      	beq.n	800852e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008514:	f043 0201 	orr.w	r2, r3, #1
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800852c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00f      	beq.n	8008558 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800853e:	f043 0208 	orr.w	r2, r3, #8
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699a      	ldr	r2, [r3, #24]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008556:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008568:	bf00      	nop
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	fffffc90 	.word	0xfffffc90

08008578 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	4613      	mov	r3, r2
 8008586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008588:	e010      	b.n	80085ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800858a:	f7f8 fd3b 	bl	8001004 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d803      	bhi.n	80085a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a0:	d102      	bne.n	80085a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e00f      	b.n	80085cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	695a      	ldr	r2, [r3, #20]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	4013      	ands	r3, r2
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	bf0c      	ite	eq
 80085bc:	2301      	moveq	r3, #1
 80085be:	2300      	movne	r3, #0
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	461a      	mov	r2, r3
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d0df      	beq.n	800858a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e0:	095b      	lsrs	r3, r3, #5
 80085e2:	3301      	adds	r3, #1
 80085e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	3301      	adds	r3, #1
 80085ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	3307      	adds	r3, #7
 80085f2:	08db      	lsrs	r3, r3, #3
 80085f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <memset>:
 800860a:	4402      	add	r2, r0
 800860c:	4603      	mov	r3, r0
 800860e:	4293      	cmp	r3, r2
 8008610:	d100      	bne.n	8008614 <memset+0xa>
 8008612:	4770      	bx	lr
 8008614:	f803 1b01 	strb.w	r1, [r3], #1
 8008618:	e7f9      	b.n	800860e <memset+0x4>
	...

0800861c <__libc_init_array>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	4d0d      	ldr	r5, [pc, #52]	; (8008654 <__libc_init_array+0x38>)
 8008620:	4c0d      	ldr	r4, [pc, #52]	; (8008658 <__libc_init_array+0x3c>)
 8008622:	1b64      	subs	r4, r4, r5
 8008624:	10a4      	asrs	r4, r4, #2
 8008626:	2600      	movs	r6, #0
 8008628:	42a6      	cmp	r6, r4
 800862a:	d109      	bne.n	8008640 <__libc_init_array+0x24>
 800862c:	4d0b      	ldr	r5, [pc, #44]	; (800865c <__libc_init_array+0x40>)
 800862e:	4c0c      	ldr	r4, [pc, #48]	; (8008660 <__libc_init_array+0x44>)
 8008630:	f000 f818 	bl	8008664 <_init>
 8008634:	1b64      	subs	r4, r4, r5
 8008636:	10a4      	asrs	r4, r4, #2
 8008638:	2600      	movs	r6, #0
 800863a:	42a6      	cmp	r6, r4
 800863c:	d105      	bne.n	800864a <__libc_init_array+0x2e>
 800863e:	bd70      	pop	{r4, r5, r6, pc}
 8008640:	f855 3b04 	ldr.w	r3, [r5], #4
 8008644:	4798      	blx	r3
 8008646:	3601      	adds	r6, #1
 8008648:	e7ee      	b.n	8008628 <__libc_init_array+0xc>
 800864a:	f855 3b04 	ldr.w	r3, [r5], #4
 800864e:	4798      	blx	r3
 8008650:	3601      	adds	r6, #1
 8008652:	e7f2      	b.n	800863a <__libc_init_array+0x1e>
 8008654:	08008694 	.word	0x08008694
 8008658:	08008694 	.word	0x08008694
 800865c:	08008694 	.word	0x08008694
 8008660:	08008698 	.word	0x08008698

08008664 <_init>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	bf00      	nop
 8008668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866a:	bc08      	pop	{r3}
 800866c:	469e      	mov	lr, r3
 800866e:	4770      	bx	lr

08008670 <_fini>:
 8008670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008672:	bf00      	nop
 8008674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008676:	bc08      	pop	{r3}
 8008678:	469e      	mov	lr, r3
 800867a:	4770      	bx	lr
